
BLE_Client_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000847c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000c0  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000140  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08008bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000015ac  20000084  08008c60  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001630  08008c60  00021630  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037937  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006095  00000000  00000000  000579eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000142c9  00000000  00000000  0005da80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00071d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f88  00000000  00000000  00073838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010db7  00000000  00000000  000757c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b5af  00000000  00000000  00086577  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00091b26  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005cc4  00000000  00000000  00091ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085f4 	.word	0x080085f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080085f4 	.word	0x080085f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2uiz>:
 8000a14:	004a      	lsls	r2, r1, #1
 8000a16:	d211      	bcs.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d211      	bcs.n	8000a42 <__aeabi_d2uiz+0x2e>
 8000a1e:	d50d      	bpl.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d40e      	bmi.n	8000a48 <__aeabi_d2uiz+0x34>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d102      	bne.n	8000a4e <__aeabi_d2uiz+0x3a>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f001 b8f6 	b.w	8001c58 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	468c      	mov	ip, r1
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	9e08      	ldr	r6, [sp, #32]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d151      	bne.n	8000b38 <__udivmoddi4+0xb4>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d96d      	bls.n	8000b76 <__udivmoddi4+0xf2>
 8000a9a:	fab2 fe82 	clz	lr, r2
 8000a9e:	f1be 0f00 	cmp.w	lr, #0
 8000aa2:	d00b      	beq.n	8000abc <__udivmoddi4+0x38>
 8000aa4:	f1ce 0c20 	rsb	ip, lr, #32
 8000aa8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000aac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ab0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ab4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ab8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000abc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ac0:	0c25      	lsrs	r5, r4, #16
 8000ac2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ac6:	fa1f f987 	uxth.w	r9, r7
 8000aca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ace:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ad2:	fb08 f309 	mul.w	r3, r8, r9
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x6c>
 8000ada:	19ed      	adds	r5, r5, r7
 8000adc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ae0:	f080 8123 	bcs.w	8000d2a <__udivmoddi4+0x2a6>
 8000ae4:	42ab      	cmp	r3, r5
 8000ae6:	f240 8120 	bls.w	8000d2a <__udivmoddi4+0x2a6>
 8000aea:	f1a8 0802 	sub.w	r8, r8, #2
 8000aee:	443d      	add	r5, r7
 8000af0:	1aed      	subs	r5, r5, r3
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000af8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000afc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b00:	fb00 f909 	mul.w	r9, r0, r9
 8000b04:	45a1      	cmp	r9, r4
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x98>
 8000b08:	19e4      	adds	r4, r4, r7
 8000b0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0e:	f080 810a 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000b12:	45a1      	cmp	r9, r4
 8000b14:	f240 8107 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	443c      	add	r4, r7
 8000b1c:	eba4 0409 	sub.w	r4, r4, r9
 8000b20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b24:	2100      	movs	r1, #0
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d061      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6034      	str	r4, [r6, #0]
 8000b32:	6073      	str	r3, [r6, #4]
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0xc8>
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d054      	beq.n	8000bea <__udivmoddi4+0x166>
 8000b40:	2100      	movs	r1, #0
 8000b42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b46:	4608      	mov	r0, r1
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	fab3 f183 	clz	r1, r3
 8000b50:	2900      	cmp	r1, #0
 8000b52:	f040 808e 	bne.w	8000c72 <__udivmoddi4+0x1ee>
 8000b56:	42ab      	cmp	r3, r5
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xdc>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80fa 	bhi.w	8000d54 <__udivmoddi4+0x2d0>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb65 0503 	sbc.w	r5, r5, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	46ac      	mov	ip, r5
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d03f      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b912      	cbnz	r2, 8000b7e <__udivmoddi4+0xfa>
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b7e:	fab7 fe87 	clz	lr, r7
 8000b82:	f1be 0f00 	cmp.w	lr, #0
 8000b86:	d134      	bne.n	8000bf2 <__udivmoddi4+0x16e>
 8000b88:	1beb      	subs	r3, r5, r7
 8000b8a:	0c3a      	lsrs	r2, r7, #16
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	2101      	movs	r1, #1
 8000b92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b96:	0c25      	lsrs	r5, r4, #16
 8000b98:	fb02 3318 	mls	r3, r2, r8, r3
 8000b9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ba0:	fb0c f308 	mul.w	r3, ip, r8
 8000ba4:	42ab      	cmp	r3, r5
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x134>
 8000ba8:	19ed      	adds	r5, r5, r7
 8000baa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x132>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	f200 80d1 	bhi.w	8000d58 <__udivmoddi4+0x2d4>
 8000bb6:	4680      	mov	r8, r0
 8000bb8:	1aed      	subs	r5, r5, r3
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x15c>
 8000bd0:	19e4      	adds	r4, r4, r7
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x15a>
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	f200 80b8 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 040c 	sub.w	r4, r4, ip
 8000be4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be8:	e79d      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000bea:	4631      	mov	r1, r6
 8000bec:	4630      	mov	r0, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	f1ce 0420 	rsb	r4, lr, #32
 8000bf6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000c02:	0c3a      	lsrs	r2, r7, #16
 8000c04:	fa25 f404 	lsr.w	r4, r5, r4
 8000c08:	ea48 0803 	orr.w	r8, r8, r3
 8000c0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c14:	fb02 4411 	mls	r4, r2, r1, r4
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c20:	fb01 f30c 	mul.w	r3, r1, ip
 8000c24:	42ab      	cmp	r3, r5
 8000c26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x1bc>
 8000c2c:	19ed      	adds	r5, r5, r7
 8000c2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c32:	f080 808a 	bcs.w	8000d4a <__udivmoddi4+0x2c6>
 8000c36:	42ab      	cmp	r3, r5
 8000c38:	f240 8087 	bls.w	8000d4a <__udivmoddi4+0x2c6>
 8000c3c:	3902      	subs	r1, #2
 8000c3e:	443d      	add	r5, r7
 8000c40:	1aeb      	subs	r3, r5, r3
 8000c42:	fa1f f588 	uxth.w	r5, r8
 8000c46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c52:	fb00 f30c 	mul.w	r3, r0, ip
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x1e6>
 8000c5a:	19ed      	adds	r5, r5, r7
 8000c5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c60:	d26f      	bcs.n	8000d42 <__udivmoddi4+0x2be>
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d96d      	bls.n	8000d42 <__udivmoddi4+0x2be>
 8000c66:	3802      	subs	r0, #2
 8000c68:	443d      	add	r5, r7
 8000c6a:	1aeb      	subs	r3, r5, r3
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	e78f      	b.n	8000b92 <__udivmoddi4+0x10e>
 8000c72:	f1c1 0720 	rsb	r7, r1, #32
 8000c76:	fa22 f807 	lsr.w	r8, r2, r7
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c80:	ea48 0303 	orr.w	r3, r8, r3
 8000c84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c9e:	fa1f f883 	uxth.w	r8, r3
 8000ca2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ca6:	fb09 f408 	mul.w	r4, r9, r8
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x244>
 8000cb6:	18ed      	adds	r5, r5, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	d243      	bcs.n	8000d46 <__udivmoddi4+0x2c2>
 8000cbe:	42ac      	cmp	r4, r5
 8000cc0:	d941      	bls.n	8000d46 <__udivmoddi4+0x2c2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	441d      	add	r5, r3
 8000cc8:	1b2d      	subs	r5, r5, r4
 8000cca:	fa1f fe8e 	uxth.w	lr, lr
 8000cce:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cd2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cda:	fb00 f808 	mul.w	r8, r0, r8
 8000cde:	45a0      	cmp	r8, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x26e>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ce8:	d229      	bcs.n	8000d3e <__udivmoddi4+0x2ba>
 8000cea:	45a0      	cmp	r8, r4
 8000cec:	d927      	bls.n	8000d3e <__udivmoddi4+0x2ba>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	441c      	add	r4, r3
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	eba4 0408 	sub.w	r4, r4, r8
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c6      	mov	lr, r8
 8000d02:	464d      	mov	r5, r9
 8000d04:	d315      	bcc.n	8000d32 <__udivmoddi4+0x2ae>
 8000d06:	d012      	beq.n	8000d2e <__udivmoddi4+0x2aa>
 8000d08:	b156      	cbz	r6, 8000d20 <__udivmoddi4+0x29c>
 8000d0a:	ebba 030e 	subs.w	r3, sl, lr
 8000d0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d12:	fa04 f707 	lsl.w	r7, r4, r7
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	6037      	str	r7, [r6, #0]
 8000d1e:	6074      	str	r4, [r6, #4]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	4618      	mov	r0, r3
 8000d28:	e6f8      	b.n	8000b1c <__udivmoddi4+0x98>
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	e6e0      	b.n	8000af0 <__udivmoddi4+0x6c>
 8000d2e:	45c2      	cmp	sl, r8
 8000d30:	d2ea      	bcs.n	8000d08 <__udivmoddi4+0x284>
 8000d32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d36:	eb69 0503 	sbc.w	r5, r9, r3
 8000d3a:	3801      	subs	r0, #1
 8000d3c:	e7e4      	b.n	8000d08 <__udivmoddi4+0x284>
 8000d3e:	4628      	mov	r0, r5
 8000d40:	e7d7      	b.n	8000cf2 <__udivmoddi4+0x26e>
 8000d42:	4640      	mov	r0, r8
 8000d44:	e791      	b.n	8000c6a <__udivmoddi4+0x1e6>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e7be      	b.n	8000cc8 <__udivmoddi4+0x244>
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	e778      	b.n	8000c40 <__udivmoddi4+0x1bc>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	e745      	b.n	8000be0 <__udivmoddi4+0x15c>
 8000d54:	4608      	mov	r0, r1
 8000d56:	e708      	b.n	8000b6a <__udivmoddi4+0xe6>
 8000d58:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5c:	443d      	add	r5, r7
 8000d5e:	e72b      	b.n	8000bb8 <__udivmoddi4+0x134>

08000d60 <selfrel_offset31>:
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	005a      	lsls	r2, r3, #1
 8000d64:	bf4c      	ite	mi
 8000d66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000d6a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000d6e:	4418      	add	r0, r3
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <search_EIT_table>:
 8000d74:	b361      	cbz	r1, 8000dd0 <search_EIT_table+0x5c>
 8000d76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d7a:	f101 3aff 	add.w	sl, r1, #4294967295
 8000d7e:	4690      	mov	r8, r2
 8000d80:	4606      	mov	r6, r0
 8000d82:	46d1      	mov	r9, sl
 8000d84:	2700      	movs	r7, #0
 8000d86:	eb07 0409 	add.w	r4, r7, r9
 8000d8a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000d8e:	1064      	asrs	r4, r4, #1
 8000d90:	00e5      	lsls	r5, r4, #3
 8000d92:	1971      	adds	r1, r6, r5
 8000d94:	4608      	mov	r0, r1
 8000d96:	f7ff ffe3 	bl	8000d60 <selfrel_offset31>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	4683      	mov	fp, r0
 8000d9e:	f105 0008 	add.w	r0, r5, #8
 8000da2:	4430      	add	r0, r6
 8000da4:	d009      	beq.n	8000dba <search_EIT_table+0x46>
 8000da6:	f7ff ffdb 	bl	8000d60 <selfrel_offset31>
 8000daa:	45c3      	cmp	fp, r8
 8000dac:	f100 30ff 	add.w	r0, r0, #4294967295
 8000db0:	d805      	bhi.n	8000dbe <search_EIT_table+0x4a>
 8000db2:	4540      	cmp	r0, r8
 8000db4:	d209      	bcs.n	8000dca <search_EIT_table+0x56>
 8000db6:	1c67      	adds	r7, r4, #1
 8000db8:	e7e5      	b.n	8000d86 <search_EIT_table+0x12>
 8000dba:	45c3      	cmp	fp, r8
 8000dbc:	d905      	bls.n	8000dca <search_EIT_table+0x56>
 8000dbe:	42a7      	cmp	r7, r4
 8000dc0:	d002      	beq.n	8000dc8 <search_EIT_table+0x54>
 8000dc2:	f104 39ff 	add.w	r9, r4, #4294967295
 8000dc6:	e7de      	b.n	8000d86 <search_EIT_table+0x12>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4770      	bx	lr

08000dd4 <__gnu_unwind_get_pr_addr>:
 8000dd4:	2801      	cmp	r0, #1
 8000dd6:	d007      	beq.n	8000de8 <__gnu_unwind_get_pr_addr+0x14>
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d007      	beq.n	8000dec <__gnu_unwind_get_pr_addr+0x18>
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__gnu_unwind_get_pr_addr+0x1c>)
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	4618      	moveq	r0, r3
 8000de4:	2000      	movne	r0, #0
 8000de6:	4770      	bx	lr
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <__gnu_unwind_get_pr_addr+0x20>)
 8000dea:	4770      	bx	lr
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <__gnu_unwind_get_pr_addr+0x24>)
 8000dee:	4770      	bx	lr
 8000df0:	080014d9 	.word	0x080014d9
 8000df4:	080014dd 	.word	0x080014dd
 8000df8:	080014e1 	.word	0x080014e1

08000dfc <get_eit_entry>:
 8000dfc:	b530      	push	{r4, r5, lr}
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <get_eit_entry+0x94>)
 8000e00:	b083      	sub	sp, #12
 8000e02:	4604      	mov	r4, r0
 8000e04:	1e8d      	subs	r5, r1, #2
 8000e06:	b37b      	cbz	r3, 8000e68 <get_eit_entry+0x6c>
 8000e08:	a901      	add	r1, sp, #4
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f3af 8000 	nop.w
 8000e10:	b320      	cbz	r0, 8000e5c <get_eit_entry+0x60>
 8000e12:	9901      	ldr	r1, [sp, #4]
 8000e14:	462a      	mov	r2, r5
 8000e16:	f7ff ffad 	bl	8000d74 <search_EIT_table>
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	b1f0      	cbz	r0, 8000e5c <get_eit_entry+0x60>
 8000e1e:	f7ff ff9f 	bl	8000d60 <selfrel_offset31>
 8000e22:	684b      	ldr	r3, [r1, #4]
 8000e24:	64a0      	str	r0, [r4, #72]	; 0x48
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d012      	beq.n	8000e50 <get_eit_entry+0x54>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f101 0004 	add.w	r0, r1, #4
 8000e30:	db20      	blt.n	8000e74 <get_eit_entry+0x78>
 8000e32:	f7ff ff95 	bl	8000d60 <selfrel_offset31>
 8000e36:	2300      	movs	r3, #0
 8000e38:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e3a:	6523      	str	r3, [r4, #80]	; 0x50
 8000e3c:	6803      	ldr	r3, [r0, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db1c      	blt.n	8000e7c <get_eit_entry+0x80>
 8000e42:	f7ff ff8d 	bl	8000d60 <selfrel_offset31>
 8000e46:	2300      	movs	r3, #0
 8000e48:	6120      	str	r0, [r4, #16]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bd30      	pop	{r4, r5, pc}
 8000e50:	2300      	movs	r3, #0
 8000e52:	6123      	str	r3, [r4, #16]
 8000e54:	2305      	movs	r3, #5
 8000e56:	4618      	mov	r0, r3
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	6123      	str	r3, [r4, #16]
 8000e60:	2309      	movs	r3, #9
 8000e62:	4618      	mov	r0, r3
 8000e64:	b003      	add	sp, #12
 8000e66:	bd30      	pop	{r4, r5, pc}
 8000e68:	490a      	ldr	r1, [pc, #40]	; (8000e94 <get_eit_entry+0x98>)
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <get_eit_entry+0x9c>)
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	10c9      	asrs	r1, r1, #3
 8000e70:	9101      	str	r1, [sp, #4]
 8000e72:	e7cf      	b.n	8000e14 <get_eit_entry+0x18>
 8000e74:	2301      	movs	r3, #1
 8000e76:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e78:	6523      	str	r3, [r4, #80]	; 0x50
 8000e7a:	e7df      	b.n	8000e3c <get_eit_entry+0x40>
 8000e7c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000e80:	f7ff ffa8 	bl	8000dd4 <__gnu_unwind_get_pr_addr>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	6120      	str	r0, [r4, #16]
 8000e88:	bf14      	ite	ne
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	2309      	moveq	r3, #9
 8000e8e:	e7dc      	b.n	8000e4a <get_eit_entry+0x4e>
 8000e90:	00000000 	.word	0x00000000
 8000e94:	08008bd0 	.word	0x08008bd0
 8000e98:	08008a90 	.word	0x08008a90

08000e9c <restore_non_core_regs>:
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	07da      	lsls	r2, r3, #31
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	d406      	bmi.n	8000eb4 <restore_non_core_regs+0x18>
 8000ea6:	079b      	lsls	r3, r3, #30
 8000ea8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000eac:	d509      	bpl.n	8000ec2 <restore_non_core_regs+0x26>
 8000eae:	f000 fc51 	bl	8001754 <__gnu_Unwind_Restore_VFP_D>
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	0759      	lsls	r1, r3, #29
 8000eb6:	d509      	bpl.n	8000ecc <restore_non_core_regs+0x30>
 8000eb8:	071a      	lsls	r2, r3, #28
 8000eba:	d50e      	bpl.n	8000eda <restore_non_core_regs+0x3e>
 8000ebc:	06db      	lsls	r3, r3, #27
 8000ebe:	d513      	bpl.n	8000ee8 <restore_non_core_regs+0x4c>
 8000ec0:	bd10      	pop	{r4, pc}
 8000ec2:	f000 fc3f 	bl	8001744 <__gnu_Unwind_Restore_VFP>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	0759      	lsls	r1, r3, #29
 8000eca:	d4f5      	bmi.n	8000eb8 <restore_non_core_regs+0x1c>
 8000ecc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ed0:	f000 fc48 	bl	8001764 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	071a      	lsls	r2, r3, #28
 8000ed8:	d4f0      	bmi.n	8000ebc <restore_non_core_regs+0x20>
 8000eda:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000ede:	f000 fc49 	bl	8001774 <__gnu_Unwind_Restore_WMMXD>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	06db      	lsls	r3, r3, #27
 8000ee6:	d4eb      	bmi.n	8000ec0 <restore_non_core_regs+0x24>
 8000ee8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ef0:	f000 bc84 	b.w	80017fc <__gnu_Unwind_Restore_WMMXC>

08000ef4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000ef4:	6803      	ldr	r3, [r0, #0]
 8000ef6:	b103      	cbz	r3, 8000efa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000ef8:	4403      	add	r3, r0
 8000efa:	4618      	mov	r0, r3
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__gnu_unwind_24bit.isra.1>:
 8000f00:	2009      	movs	r0, #9
 8000f02:	4770      	bx	lr

08000f04 <_Unwind_DebugHook>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <unwind_phase2>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	e008      	b.n	8000f22 <unwind_phase2+0x1a>
 8000f10:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f12:	6163      	str	r3, [r4, #20]
 8000f14:	462a      	mov	r2, r5
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	4621      	mov	r1, r4
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	4798      	blx	r3
 8000f1e:	2808      	cmp	r0, #8
 8000f20:	d108      	bne.n	8000f34 <unwind_phase2+0x2c>
 8000f22:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff ff69 	bl	8000dfc <get_eit_entry>
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d0ef      	beq.n	8000f10 <unwind_phase2+0x8>
 8000f30:	f007 fb15 	bl	800855e <abort>
 8000f34:	2807      	cmp	r0, #7
 8000f36:	d1fb      	bne.n	8000f30 <unwind_phase2+0x28>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f3c:	f7ff ffe2 	bl	8000f04 <_Unwind_DebugHook>
 8000f40:	1d28      	adds	r0, r5, #4
 8000f42:	f000 fbf3 	bl	800172c <__restore_core_regs>
 8000f46:	bf00      	nop

08000f48 <unwind_phase2_forced>:
 8000f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f4c:	1d0c      	adds	r4, r1, #4
 8000f4e:	4605      	mov	r5, r0
 8000f50:	4692      	mov	sl, r2
 8000f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f54:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000f58:	ae03      	add	r6, sp, #12
 8000f5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f68:	ac02      	add	r4, sp, #8
 8000f6a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000f6e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000f72:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000f76:	2300      	movs	r3, #0
 8000f78:	4628      	mov	r0, r5
 8000f7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	f7ff ff3d 	bl	8000dfc <get_eit_entry>
 8000f82:	f1ba 0f00 	cmp.w	sl, #0
 8000f86:	4607      	mov	r7, r0
 8000f88:	bf14      	ite	ne
 8000f8a:	260a      	movne	r6, #10
 8000f8c:	2609      	moveq	r6, #9
 8000f8e:	b17f      	cbz	r7, 8000fb0 <unwind_phase2_forced+0x68>
 8000f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f92:	f046 0110 	orr.w	r1, r6, #16
 8000f96:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	6463      	str	r3, [r4, #68]	; 0x44
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	462b      	mov	r3, r5
 8000fa2:	47c0      	blx	r8
 8000fa4:	bb78      	cbnz	r0, 8001006 <unwind_phase2_forced+0xbe>
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fb2:	616b      	str	r3, [r5, #20]
 8000fb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fb8:	4621      	mov	r1, r4
 8000fba:	a87a      	add	r0, sp, #488	; 0x1e8
 8000fbc:	f006 fad4 	bl	8007568 <memcpy>
 8000fc0:	692b      	ldr	r3, [r5, #16]
 8000fc2:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	4798      	blx	r3
 8000fca:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000fcc:	4682      	mov	sl, r0
 8000fce:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000fd2:	4631      	mov	r1, r6
 8000fd4:	6463      	str	r3, [r4, #68]	; 0x44
 8000fd6:	462a      	mov	r2, r5
 8000fd8:	462b      	mov	r3, r5
 8000fda:	2001      	movs	r0, #1
 8000fdc:	47c0      	blx	r8
 8000fde:	b990      	cbnz	r0, 8001006 <unwind_phase2_forced+0xbe>
 8000fe0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fe4:	a97a      	add	r1, sp, #488	; 0x1e8
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f006 fabe 	bl	8007568 <memcpy>
 8000fec:	f1ba 0f08 	cmp.w	sl, #8
 8000ff0:	d106      	bne.n	8001000 <unwind_phase2_forced+0xb8>
 8000ff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f7ff ff01 	bl	8000dfc <get_eit_entry>
 8000ffa:	2609      	movs	r6, #9
 8000ffc:	4607      	mov	r7, r0
 8000ffe:	e7c6      	b.n	8000f8e <unwind_phase2_forced+0x46>
 8001000:	f1ba 0f07 	cmp.w	sl, #7
 8001004:	d005      	beq.n	8001012 <unwind_phase2_forced+0xca>
 8001006:	2709      	movs	r7, #9
 8001008:	4638      	mov	r0, r7
 800100a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	4638      	mov	r0, r7
 8001014:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001016:	f7ff ff75 	bl	8000f04 <_Unwind_DebugHook>
 800101a:	a803      	add	r0, sp, #12
 800101c:	f000 fb86 	bl	800172c <__restore_core_regs>

08001020 <_Unwind_GetCFA>:
 8001020:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001022:	4770      	bx	lr

08001024 <__gnu_Unwind_RaiseException>:
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001028:	640b      	str	r3, [r1, #64]	; 0x40
 800102a:	1d0e      	adds	r6, r1, #4
 800102c:	460f      	mov	r7, r1
 800102e:	4604      	mov	r4, r0
 8001030:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001032:	b0f9      	sub	sp, #484	; 0x1e4
 8001034:	ad01      	add	r5, sp, #4
 8001036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001038:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001040:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001044:	f04f 36ff 	mov.w	r6, #4294967295
 8001048:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800104c:	9600      	str	r6, [sp, #0]
 800104e:	e006      	b.n	800105e <__gnu_Unwind_RaiseException+0x3a>
 8001050:	6923      	ldr	r3, [r4, #16]
 8001052:	466a      	mov	r2, sp
 8001054:	4621      	mov	r1, r4
 8001056:	4798      	blx	r3
 8001058:	2808      	cmp	r0, #8
 800105a:	4605      	mov	r5, r0
 800105c:	d108      	bne.n	8001070 <__gnu_Unwind_RaiseException+0x4c>
 800105e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff fecb 	bl	8000dfc <get_eit_entry>
 8001066:	2800      	cmp	r0, #0
 8001068:	d0f2      	beq.n	8001050 <__gnu_Unwind_RaiseException+0x2c>
 800106a:	2009      	movs	r0, #9
 800106c:	b079      	add	sp, #484	; 0x1e4
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	4668      	mov	r0, sp
 8001072:	f7ff ff13 	bl	8000e9c <restore_non_core_regs>
 8001076:	2d06      	cmp	r5, #6
 8001078:	d1f7      	bne.n	800106a <__gnu_Unwind_RaiseException+0x46>
 800107a:	4639      	mov	r1, r7
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff ff43 	bl	8000f08 <unwind_phase2>
 8001082:	bf00      	nop

08001084 <__gnu_Unwind_ForcedUnwind>:
 8001084:	b430      	push	{r4, r5}
 8001086:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001088:	60c1      	str	r1, [r0, #12]
 800108a:	6182      	str	r2, [r0, #24]
 800108c:	4619      	mov	r1, r3
 800108e:	641d      	str	r5, [r3, #64]	; 0x40
 8001090:	2200      	movs	r2, #0
 8001092:	bc30      	pop	{r4, r5}
 8001094:	e758      	b.n	8000f48 <unwind_phase2_forced>
 8001096:	bf00      	nop

08001098 <__gnu_Unwind_Resume>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	68c6      	ldr	r6, [r0, #12]
 800109c:	6943      	ldr	r3, [r0, #20]
 800109e:	640b      	str	r3, [r1, #64]	; 0x40
 80010a0:	b126      	cbz	r6, 80010ac <__gnu_Unwind_Resume+0x14>
 80010a2:	2201      	movs	r2, #1
 80010a4:	f7ff ff50 	bl	8000f48 <unwind_phase2_forced>
 80010a8:	f007 fa59 	bl	800855e <abort>
 80010ac:	6903      	ldr	r3, [r0, #16]
 80010ae:	460a      	mov	r2, r1
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	4601      	mov	r1, r0
 80010b6:	2002      	movs	r0, #2
 80010b8:	4798      	blx	r3
 80010ba:	2807      	cmp	r0, #7
 80010bc:	d007      	beq.n	80010ce <__gnu_Unwind_Resume+0x36>
 80010be:	2808      	cmp	r0, #8
 80010c0:	d103      	bne.n	80010ca <__gnu_Unwind_Resume+0x32>
 80010c2:	4629      	mov	r1, r5
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff ff1f 	bl	8000f08 <unwind_phase2>
 80010ca:	f007 fa48 	bl	800855e <abort>
 80010ce:	4630      	mov	r0, r6
 80010d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010d2:	f7ff ff17 	bl	8000f04 <_Unwind_DebugHook>
 80010d6:	1d28      	adds	r0, r5, #4
 80010d8:	f000 fb28 	bl	800172c <__restore_core_regs>

080010dc <__gnu_Unwind_Resume_or_Rethrow>:
 80010dc:	68c2      	ldr	r2, [r0, #12]
 80010de:	b11a      	cbz	r2, 80010e8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80010e0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80010e2:	640a      	str	r2, [r1, #64]	; 0x40
 80010e4:	2200      	movs	r2, #0
 80010e6:	e72f      	b.n	8000f48 <unwind_phase2_forced>
 80010e8:	e79c      	b.n	8001024 <__gnu_Unwind_RaiseException>
 80010ea:	bf00      	nop

080010ec <_Unwind_Complete>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <_Unwind_DeleteException>:
 80010f0:	6883      	ldr	r3, [r0, #8]
 80010f2:	b113      	cbz	r3, 80010fa <_Unwind_DeleteException+0xa>
 80010f4:	4601      	mov	r1, r0
 80010f6:	2001      	movs	r0, #1
 80010f8:	4718      	bx	r3
 80010fa:	4770      	bx	lr

080010fc <_Unwind_VRS_Get>:
 80010fc:	b500      	push	{lr}
 80010fe:	2904      	cmp	r1, #4
 8001100:	d807      	bhi.n	8001112 <_Unwind_VRS_Get+0x16>
 8001102:	e8df f001 	tbb	[pc, r1]
 8001106:	0903      	.short	0x0903
 8001108:	0906      	.short	0x0906
 800110a:	09          	.byte	0x09
 800110b:	00          	.byte	0x00
 800110c:	b90b      	cbnz	r3, 8001112 <_Unwind_VRS_Get+0x16>
 800110e:	2a0f      	cmp	r2, #15
 8001110:	d905      	bls.n	800111e <_Unwind_VRS_Get+0x22>
 8001112:	2002      	movs	r0, #2
 8001114:	f85d fb04 	ldr.w	pc, [sp], #4
 8001118:	2001      	movs	r0, #1
 800111a:	f85d fb04 	ldr.w	pc, [sp], #4
 800111e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001122:	4618      	mov	r0, r3
 8001124:	6853      	ldr	r3, [r2, #4]
 8001126:	9a01      	ldr	r2, [sp, #4]
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	f85d fb04 	ldr.w	pc, [sp], #4
 800112e:	bf00      	nop

08001130 <_Unwind_GetGR>:
 8001130:	b510      	push	{r4, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	2300      	movs	r3, #0
 8001136:	ac03      	add	r4, sp, #12
 8001138:	460a      	mov	r2, r1
 800113a:	9400      	str	r4, [sp, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff ffdd 	bl	80010fc <_Unwind_VRS_Get>
 8001142:	9803      	ldr	r0, [sp, #12]
 8001144:	b004      	add	sp, #16
 8001146:	bd10      	pop	{r4, pc}

08001148 <_Unwind_VRS_Set>:
 8001148:	b500      	push	{lr}
 800114a:	2904      	cmp	r1, #4
 800114c:	d807      	bhi.n	800115e <_Unwind_VRS_Set+0x16>
 800114e:	e8df f001 	tbb	[pc, r1]
 8001152:	0903      	.short	0x0903
 8001154:	0906      	.short	0x0906
 8001156:	09          	.byte	0x09
 8001157:	00          	.byte	0x00
 8001158:	b90b      	cbnz	r3, 800115e <_Unwind_VRS_Set+0x16>
 800115a:	2a0f      	cmp	r2, #15
 800115c:	d905      	bls.n	800116a <_Unwind_VRS_Set+0x22>
 800115e:	2002      	movs	r0, #2
 8001160:	f85d fb04 	ldr.w	pc, [sp], #4
 8001164:	2001      	movs	r0, #1
 8001166:	f85d fb04 	ldr.w	pc, [sp], #4
 800116a:	9901      	ldr	r1, [sp, #4]
 800116c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001170:	6809      	ldr	r1, [r1, #0]
 8001172:	6051      	str	r1, [r2, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f85d fb04 	ldr.w	pc, [sp], #4
 800117a:	bf00      	nop

0800117c <_Unwind_SetGR>:
 800117c:	b510      	push	{r4, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	ac04      	add	r4, sp, #16
 8001182:	2300      	movs	r3, #0
 8001184:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001188:	460a      	mov	r2, r1
 800118a:	9400      	str	r4, [sp, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff ffdb 	bl	8001148 <_Unwind_VRS_Set>
 8001192:	b004      	add	sp, #16
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop

08001198 <__gnu_Unwind_Backtrace>:
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	1d15      	adds	r5, r2, #4
 80011a0:	4607      	mov	r7, r0
 80011a2:	460e      	mov	r6, r1
 80011a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80011aa:	ac17      	add	r4, sp, #92	; 0x5c
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011ba:	f04f 35ff 	mov.w	r5, #4294967295
 80011be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011c2:	9516      	str	r5, [sp, #88]	; 0x58
 80011c4:	e010      	b.n	80011e8 <__gnu_Unwind_Backtrace+0x50>
 80011c6:	a816      	add	r0, sp, #88	; 0x58
 80011c8:	f7ff ffd8 	bl	800117c <_Unwind_SetGR>
 80011cc:	4631      	mov	r1, r6
 80011ce:	a816      	add	r0, sp, #88	; 0x58
 80011d0:	47b8      	blx	r7
 80011d2:	aa16      	add	r2, sp, #88	; 0x58
 80011d4:	4669      	mov	r1, sp
 80011d6:	b978      	cbnz	r0, 80011f8 <__gnu_Unwind_Backtrace+0x60>
 80011d8:	9b04      	ldr	r3, [sp, #16]
 80011da:	2008      	movs	r0, #8
 80011dc:	4798      	blx	r3
 80011de:	2805      	cmp	r0, #5
 80011e0:	4604      	mov	r4, r0
 80011e2:	d00a      	beq.n	80011fa <__gnu_Unwind_Backtrace+0x62>
 80011e4:	2809      	cmp	r0, #9
 80011e6:	d007      	beq.n	80011f8 <__gnu_Unwind_Backtrace+0x60>
 80011e8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80011ea:	4668      	mov	r0, sp
 80011ec:	f7ff fe06 	bl	8000dfc <get_eit_entry>
 80011f0:	466a      	mov	r2, sp
 80011f2:	210c      	movs	r1, #12
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d0e6      	beq.n	80011c6 <__gnu_Unwind_Backtrace+0x2e>
 80011f8:	2409      	movs	r4, #9
 80011fa:	a816      	add	r0, sp, #88	; 0x58
 80011fc:	f7ff fe4e 	bl	8000e9c <restore_non_core_regs>
 8001200:	4620      	mov	r0, r4
 8001202:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001208 <__gnu_unwind_pr_common>:
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	460d      	mov	r5, r1
 800120e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001210:	b08b      	sub	sp, #44	; 0x2c
 8001212:	1d0c      	adds	r4, r1, #4
 8001214:	6809      	ldr	r1, [r1, #0]
 8001216:	9107      	str	r1, [sp, #28]
 8001218:	4691      	mov	r9, r2
 800121a:	9408      	str	r4, [sp, #32]
 800121c:	f000 0b03 	and.w	fp, r0, #3
 8001220:	461e      	mov	r6, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d160      	bne.n	80012e8 <__gnu_unwind_pr_common+0xe0>
 8001226:	0209      	lsls	r1, r1, #8
 8001228:	2303      	movs	r3, #3
 800122a:	9107      	str	r1, [sp, #28]
 800122c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001230:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001234:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001236:	f1bb 0f02 	cmp.w	fp, #2
 800123a:	bf08      	it	eq
 800123c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800123e:	f013 0301 	ands.w	r3, r3, #1
 8001242:	d140      	bne.n	80012c6 <__gnu_unwind_pr_common+0xbe>
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f000 0308 	and.w	r3, r0, #8
 800124a:	9303      	str	r3, [sp, #12]
 800124c:	f8d4 8000 	ldr.w	r8, [r4]
 8001250:	f1b8 0f00 	cmp.w	r8, #0
 8001254:	d039      	beq.n	80012ca <__gnu_unwind_pr_common+0xc2>
 8001256:	2e02      	cmp	r6, #2
 8001258:	d043      	beq.n	80012e2 <__gnu_unwind_pr_common+0xda>
 800125a:	f8b4 8000 	ldrh.w	r8, [r4]
 800125e:	8867      	ldrh	r7, [r4, #2]
 8001260:	3404      	adds	r4, #4
 8001262:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001264:	f027 0a01 	bic.w	sl, r7, #1
 8001268:	210f      	movs	r1, #15
 800126a:	4648      	mov	r0, r9
 800126c:	449a      	add	sl, r3
 800126e:	f7ff ff5f 	bl	8001130 <_Unwind_GetGR>
 8001272:	4582      	cmp	sl, r0
 8001274:	d833      	bhi.n	80012de <__gnu_unwind_pr_common+0xd6>
 8001276:	f028 0301 	bic.w	r3, r8, #1
 800127a:	449a      	add	sl, r3
 800127c:	4550      	cmp	r0, sl
 800127e:	bf2c      	ite	cs
 8001280:	2000      	movcs	r0, #0
 8001282:	2001      	movcc	r0, #1
 8001284:	007f      	lsls	r7, r7, #1
 8001286:	f007 0702 	and.w	r7, r7, #2
 800128a:	f008 0801 	and.w	r8, r8, #1
 800128e:	ea47 0708 	orr.w	r7, r7, r8
 8001292:	2f01      	cmp	r7, #1
 8001294:	d03e      	beq.n	8001314 <__gnu_unwind_pr_common+0x10c>
 8001296:	d335      	bcc.n	8001304 <__gnu_unwind_pr_common+0xfc>
 8001298:	2f02      	cmp	r7, #2
 800129a:	d11c      	bne.n	80012d6 <__gnu_unwind_pr_common+0xce>
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a2:	9202      	str	r2, [sp, #8]
 80012a4:	f1bb 0f00 	cmp.w	fp, #0
 80012a8:	d176      	bne.n	8001398 <__gnu_unwind_pr_common+0x190>
 80012aa:	b128      	cbz	r0, 80012b8 <__gnu_unwind_pr_common+0xb0>
 80012ac:	9903      	ldr	r1, [sp, #12]
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d07e      	beq.n	80013b0 <__gnu_unwind_pr_common+0x1a8>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	f000 80a6 	beq.w	8001404 <__gnu_unwind_pr_common+0x1fc>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db77      	blt.n	80013ac <__gnu_unwind_pr_common+0x1a4>
 80012bc:	9b02      	ldr	r3, [sp, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80012c4:	e7c2      	b.n	800124c <__gnu_unwind_pr_common+0x44>
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2e02      	cmp	r6, #2
 80012cc:	dd3e      	ble.n	800134c <__gnu_unwind_pr_common+0x144>
 80012ce:	f7ff fe17 	bl	8000f00 <__gnu_unwind_24bit.isra.1>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d040      	beq.n	8001358 <__gnu_unwind_pr_common+0x150>
 80012d6:	2009      	movs	r0, #9
 80012d8:	b00b      	add	sp, #44	; 0x2c
 80012da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012de:	2000      	movs	r0, #0
 80012e0:	e7d0      	b.n	8001284 <__gnu_unwind_pr_common+0x7c>
 80012e2:	6867      	ldr	r7, [r4, #4]
 80012e4:	3408      	adds	r4, #8
 80012e6:	e7bc      	b.n	8001262 <__gnu_unwind_pr_common+0x5a>
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	dca3      	bgt.n	8001234 <__gnu_unwind_pr_common+0x2c>
 80012ec:	0c0b      	lsrs	r3, r1, #16
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	0409      	lsls	r1, r1, #16
 80012f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80012f6:	2302      	movs	r3, #2
 80012f8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80012fc:	9107      	str	r1, [sp, #28]
 80012fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001302:	e797      	b.n	8001234 <__gnu_unwind_pr_common+0x2c>
 8001304:	f1bb 0f00 	cmp.w	fp, #0
 8001308:	d002      	beq.n	8001310 <__gnu_unwind_pr_common+0x108>
 800130a:	2800      	cmp	r0, #0
 800130c:	f040 80bd 	bne.w	800148a <__gnu_unwind_pr_common+0x282>
 8001310:	3404      	adds	r4, #4
 8001312:	e79b      	b.n	800124c <__gnu_unwind_pr_common+0x44>
 8001314:	f1bb 0f00 	cmp.w	fp, #0
 8001318:	d125      	bne.n	8001366 <__gnu_unwind_pr_common+0x15e>
 800131a:	b1a8      	cbz	r0, 8001348 <__gnu_unwind_pr_common+0x140>
 800131c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001320:	1c99      	adds	r1, r3, #2
 8001322:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001326:	d0d6      	beq.n	80012d6 <__gnu_unwind_pr_common+0xce>
 8001328:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800132c:	3301      	adds	r3, #1
 800132e:	9106      	str	r1, [sp, #24]
 8001330:	f000 80a3 	beq.w	800147a <__gnu_unwind_pr_common+0x272>
 8001334:	1d20      	adds	r0, r4, #4
 8001336:	f7ff fddd 	bl	8000ef4 <_Unwind_decode_typeinfo_ptr.isra.0>
 800133a:	ab06      	add	r3, sp, #24
 800133c:	4601      	mov	r1, r0
 800133e:	4628      	mov	r0, r5
 8001340:	f3af 8000 	nop.w
 8001344:	2800      	cmp	r0, #0
 8001346:	d177      	bne.n	8001438 <__gnu_unwind_pr_common+0x230>
 8001348:	3408      	adds	r4, #8
 800134a:	e77f      	b.n	800124c <__gnu_unwind_pr_common+0x44>
 800134c:	a907      	add	r1, sp, #28
 800134e:	4648      	mov	r0, r9
 8001350:	f000 faee 	bl	8001930 <__gnu_unwind_execute>
 8001354:	2800      	cmp	r0, #0
 8001356:	d1be      	bne.n	80012d6 <__gnu_unwind_pr_common+0xce>
 8001358:	9b01      	ldr	r3, [sp, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d15c      	bne.n	8001418 <__gnu_unwind_pr_common+0x210>
 800135e:	2008      	movs	r0, #8
 8001360:	b00b      	add	sp, #44	; 0x2c
 8001362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001366:	210d      	movs	r1, #13
 8001368:	4648      	mov	r0, r9
 800136a:	6a2f      	ldr	r7, [r5, #32]
 800136c:	f7ff fee0 	bl	8001130 <_Unwind_GetGR>
 8001370:	4287      	cmp	r7, r0
 8001372:	d1e9      	bne.n	8001348 <__gnu_unwind_pr_common+0x140>
 8001374:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001376:	429c      	cmp	r4, r3
 8001378:	d1e6      	bne.n	8001348 <__gnu_unwind_pr_common+0x140>
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fcf0 	bl	8000d60 <selfrel_offset31>
 8001380:	210f      	movs	r1, #15
 8001382:	4602      	mov	r2, r0
 8001384:	4648      	mov	r0, r9
 8001386:	f7ff fef9 	bl	800117c <_Unwind_SetGR>
 800138a:	4648      	mov	r0, r9
 800138c:	462a      	mov	r2, r5
 800138e:	2100      	movs	r1, #0
 8001390:	f7ff fef4 	bl	800117c <_Unwind_SetGR>
 8001394:	2007      	movs	r0, #7
 8001396:	e79f      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 8001398:	210d      	movs	r1, #13
 800139a:	4648      	mov	r0, r9
 800139c:	6a2f      	ldr	r7, [r5, #32]
 800139e:	f7ff fec7 	bl	8001130 <_Unwind_GetGR>
 80013a2:	4287      	cmp	r7, r0
 80013a4:	d058      	beq.n	8001458 <__gnu_unwind_pr_common+0x250>
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da87      	bge.n	80012bc <__gnu_unwind_pr_common+0xb4>
 80013ac:	3404      	adds	r4, #4
 80013ae:	e785      	b.n	80012bc <__gnu_unwind_pr_common+0xb4>
 80013b0:	9b02      	ldr	r3, [sp, #8]
 80013b2:	b33b      	cbz	r3, 8001404 <__gnu_unwind_pr_common+0x1fc>
 80013b4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80013b8:	1d27      	adds	r7, r4, #4
 80013ba:	f8cd b010 	str.w	fp, [sp, #16]
 80013be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013c2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80013c6:	9605      	str	r6, [sp, #20]
 80013c8:	46a3      	mov	fp, r4
 80013ca:	461c      	mov	r4, r3
 80013cc:	e002      	b.n	80013d4 <__gnu_unwind_pr_common+0x1cc>
 80013ce:	45b2      	cmp	sl, r6
 80013d0:	46b0      	mov	r8, r6
 80013d2:	d016      	beq.n	8001402 <__gnu_unwind_pr_common+0x1fa>
 80013d4:	4638      	mov	r0, r7
 80013d6:	9406      	str	r4, [sp, #24]
 80013d8:	f7ff fd8c 	bl	8000ef4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80013dc:	ab06      	add	r3, sp, #24
 80013de:	4601      	mov	r1, r0
 80013e0:	2200      	movs	r2, #0
 80013e2:	4628      	mov	r0, r5
 80013e4:	f3af 8000 	nop.w
 80013e8:	f108 0601 	add.w	r6, r8, #1
 80013ec:	3704      	adds	r7, #4
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d0ed      	beq.n	80013ce <__gnu_unwind_pr_common+0x1c6>
 80013f2:	9b02      	ldr	r3, [sp, #8]
 80013f4:	9e05      	ldr	r6, [sp, #20]
 80013f6:	4543      	cmp	r3, r8
 80013f8:	465c      	mov	r4, fp
 80013fa:	f8dd b010 	ldr.w	fp, [sp, #16]
 80013fe:	d1d2      	bne.n	80013a6 <__gnu_unwind_pr_common+0x19e>
 8001400:	e000      	b.n	8001404 <__gnu_unwind_pr_common+0x1fc>
 8001402:	465c      	mov	r4, fp
 8001404:	4648      	mov	r0, r9
 8001406:	210d      	movs	r1, #13
 8001408:	f7ff fe92 	bl	8001130 <_Unwind_GetGR>
 800140c:	9b06      	ldr	r3, [sp, #24]
 800140e:	6228      	str	r0, [r5, #32]
 8001410:	62ac      	str	r4, [r5, #40]	; 0x28
 8001412:	626b      	str	r3, [r5, #36]	; 0x24
 8001414:	2006      	movs	r0, #6
 8001416:	e75f      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 8001418:	210f      	movs	r1, #15
 800141a:	4648      	mov	r0, r9
 800141c:	f7ff fe88 	bl	8001130 <_Unwind_GetGR>
 8001420:	210e      	movs	r1, #14
 8001422:	4602      	mov	r2, r0
 8001424:	4648      	mov	r0, r9
 8001426:	f7ff fea9 	bl	800117c <_Unwind_SetGR>
 800142a:	4648      	mov	r0, r9
 800142c:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <__gnu_unwind_pr_common+0x2cc>)
 800142e:	210f      	movs	r1, #15
 8001430:	f7ff fea4 	bl	800117c <_Unwind_SetGR>
 8001434:	2007      	movs	r0, #7
 8001436:	e74f      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 8001438:	4607      	mov	r7, r0
 800143a:	210d      	movs	r1, #13
 800143c:	4648      	mov	r0, r9
 800143e:	f7ff fe77 	bl	8001130 <_Unwind_GetGR>
 8001442:	2f02      	cmp	r7, #2
 8001444:	6228      	str	r0, [r5, #32]
 8001446:	d11d      	bne.n	8001484 <__gnu_unwind_pr_common+0x27c>
 8001448:	462b      	mov	r3, r5
 800144a:	9a06      	ldr	r2, [sp, #24]
 800144c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001450:	626b      	str	r3, [r5, #36]	; 0x24
 8001452:	62ac      	str	r4, [r5, #40]	; 0x28
 8001454:	2006      	movs	r0, #6
 8001456:	e73f      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 8001458:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800145a:	429c      	cmp	r4, r3
 800145c:	d1a3      	bne.n	80013a6 <__gnu_unwind_pr_common+0x19e>
 800145e:	2204      	movs	r2, #4
 8001460:	2700      	movs	r7, #0
 8001462:	18a3      	adds	r3, r4, r2
 8001464:	9902      	ldr	r1, [sp, #8]
 8001466:	62a9      	str	r1, [r5, #40]	; 0x28
 8001468:	62ef      	str	r7, [r5, #44]	; 0x2c
 800146a:	632a      	str	r2, [r5, #48]	; 0x30
 800146c:	636b      	str	r3, [r5, #52]	; 0x34
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	42bb      	cmp	r3, r7
 8001472:	db1d      	blt.n	80014b0 <__gnu_unwind_pr_common+0x2a8>
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	e720      	b.n	80012bc <__gnu_unwind_pr_common+0xb4>
 800147a:	4648      	mov	r0, r9
 800147c:	210d      	movs	r1, #13
 800147e:	f7ff fe57 	bl	8001130 <_Unwind_GetGR>
 8001482:	6228      	str	r0, [r5, #32]
 8001484:	9b06      	ldr	r3, [sp, #24]
 8001486:	626b      	str	r3, [r5, #36]	; 0x24
 8001488:	e7e3      	b.n	8001452 <__gnu_unwind_pr_common+0x24a>
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fc68 	bl	8000d60 <selfrel_offset31>
 8001490:	3404      	adds	r4, #4
 8001492:	4606      	mov	r6, r0
 8001494:	63ac      	str	r4, [r5, #56]	; 0x38
 8001496:	4628      	mov	r0, r5
 8001498:	f3af 8000 	nop.w
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af1a 	beq.w	80012d6 <__gnu_unwind_pr_common+0xce>
 80014a2:	4648      	mov	r0, r9
 80014a4:	4632      	mov	r2, r6
 80014a6:	210f      	movs	r1, #15
 80014a8:	f7ff fe68 	bl	800117c <_Unwind_SetGR>
 80014ac:	2007      	movs	r0, #7
 80014ae:	e713      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 80014b0:	4608      	mov	r0, r1
 80014b2:	3001      	adds	r0, #1
 80014b4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80014b8:	f7ff fc52 	bl	8000d60 <selfrel_offset31>
 80014bc:	210f      	movs	r1, #15
 80014be:	4602      	mov	r2, r0
 80014c0:	4648      	mov	r0, r9
 80014c2:	f7ff fe5b 	bl	800117c <_Unwind_SetGR>
 80014c6:	4648      	mov	r0, r9
 80014c8:	462a      	mov	r2, r5
 80014ca:	4639      	mov	r1, r7
 80014cc:	f7ff fe56 	bl	800117c <_Unwind_SetGR>
 80014d0:	2007      	movs	r0, #7
 80014d2:	e701      	b.n	80012d8 <__gnu_unwind_pr_common+0xd0>
 80014d4:	00000000 	.word	0x00000000

080014d8 <__aeabi_unwind_cpp_pr0>:
 80014d8:	2300      	movs	r3, #0
 80014da:	e695      	b.n	8001208 <__gnu_unwind_pr_common>

080014dc <__aeabi_unwind_cpp_pr1>:
 80014dc:	2301      	movs	r3, #1
 80014de:	e693      	b.n	8001208 <__gnu_unwind_pr_common>

080014e0 <__aeabi_unwind_cpp_pr2>:
 80014e0:	2302      	movs	r3, #2
 80014e2:	e691      	b.n	8001208 <__gnu_unwind_pr_common>

080014e4 <_Unwind_VRS_Pop>:
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	4604      	mov	r4, r0
 80014e8:	b0c5      	sub	sp, #276	; 0x114
 80014ea:	2904      	cmp	r1, #4
 80014ec:	d80d      	bhi.n	800150a <_Unwind_VRS_Pop+0x26>
 80014ee:	e8df f001 	tbb	[pc, r1]
 80014f2:	0353      	.short	0x0353
 80014f4:	310c      	.short	0x310c
 80014f6:	0f          	.byte	0x0f
 80014f7:	00          	.byte	0x00
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80014fe:	b295      	uxth	r5, r2
 8001500:	d162      	bne.n	80015c8 <_Unwind_VRS_Pop+0xe4>
 8001502:	1972      	adds	r2, r6, r5
 8001504:	2a10      	cmp	r2, #16
 8001506:	f240 809b 	bls.w	8001640 <_Unwind_VRS_Pop+0x15c>
 800150a:	2002      	movs	r0, #2
 800150c:	b045      	add	sp, #276	; 0x114
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fa      	bne.n	800150a <_Unwind_VRS_Pop+0x26>
 8001514:	2a10      	cmp	r2, #16
 8001516:	d8f8      	bhi.n	800150a <_Unwind_VRS_Pop+0x26>
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	06d8      	lsls	r0, r3, #27
 800151c:	f100 80c6 	bmi.w	80016ac <_Unwind_VRS_Pop+0x1c8>
 8001520:	ae22      	add	r6, sp, #136	; 0x88
 8001522:	4630      	mov	r0, r6
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	f000 f973 	bl	8001810 <__gnu_Unwind_Save_WMMXC>
 800152a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800152c:	9a01      	ldr	r2, [sp, #4]
 800152e:	2300      	movs	r3, #0
 8001530:	2501      	movs	r5, #1
 8001532:	fa05 f103 	lsl.w	r1, r5, r3
 8001536:	4211      	tst	r1, r2
 8001538:	d003      	beq.n	8001542 <_Unwind_VRS_Pop+0x5e>
 800153a:	6801      	ldr	r1, [r0, #0]
 800153c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001540:	3004      	adds	r0, #4
 8001542:	3301      	adds	r3, #1
 8001544:	2b04      	cmp	r3, #4
 8001546:	d1f4      	bne.n	8001532 <_Unwind_VRS_Pop+0x4e>
 8001548:	63a0      	str	r0, [r4, #56]	; 0x38
 800154a:	4630      	mov	r0, r6
 800154c:	f000 f956 	bl	80017fc <__gnu_Unwind_Restore_WMMXC>
 8001550:	2000      	movs	r0, #0
 8001552:	e7db      	b.n	800150c <_Unwind_VRS_Pop+0x28>
 8001554:	2b03      	cmp	r3, #3
 8001556:	d1d8      	bne.n	800150a <_Unwind_VRS_Pop+0x26>
 8001558:	0c15      	lsrs	r5, r2, #16
 800155a:	b297      	uxth	r7, r2
 800155c:	19eb      	adds	r3, r5, r7
 800155e:	2b10      	cmp	r3, #16
 8001560:	d8d3      	bhi.n	800150a <_Unwind_VRS_Pop+0x26>
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	071e      	lsls	r6, r3, #28
 8001566:	f100 80b5 	bmi.w	80016d4 <_Unwind_VRS_Pop+0x1f0>
 800156a:	ae22      	add	r6, sp, #136	; 0x88
 800156c:	4630      	mov	r0, r6
 800156e:	f000 f923 	bl	80017b8 <__gnu_Unwind_Save_WMMXD>
 8001572:	00ed      	lsls	r5, r5, #3
 8001574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001576:	b14f      	cbz	r7, 800158c <_Unwind_VRS_Pop+0xa8>
 8001578:	3d04      	subs	r5, #4
 800157a:	1971      	adds	r1, r6, r5
 800157c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8001580:	f853 2b04 	ldr.w	r2, [r3], #4
 8001584:	f841 2f04 	str.w	r2, [r1, #4]!
 8001588:	4283      	cmp	r3, r0
 800158a:	d1f9      	bne.n	8001580 <_Unwind_VRS_Pop+0x9c>
 800158c:	4630      	mov	r0, r6
 800158e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001590:	f000 f8f0 	bl	8001774 <__gnu_Unwind_Restore_WMMXD>
 8001594:	2000      	movs	r0, #0
 8001596:	e7b9      	b.n	800150c <_Unwind_VRS_Pop+0x28>
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1b6      	bne.n	800150a <_Unwind_VRS_Pop+0x26>
 800159c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800159e:	b297      	uxth	r7, r2
 80015a0:	1d20      	adds	r0, r4, #4
 80015a2:	2601      	movs	r6, #1
 80015a4:	fa06 f103 	lsl.w	r1, r6, r3
 80015a8:	4239      	tst	r1, r7
 80015aa:	f103 0301 	add.w	r3, r3, #1
 80015ae:	d002      	beq.n	80015b6 <_Unwind_VRS_Pop+0xd2>
 80015b0:	6829      	ldr	r1, [r5, #0]
 80015b2:	6001      	str	r1, [r0, #0]
 80015b4:	3504      	adds	r5, #4
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	f100 0004 	add.w	r0, r0, #4
 80015bc:	d1f2      	bne.n	80015a4 <_Unwind_VRS_Pop+0xc0>
 80015be:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80015c2:	d13b      	bne.n	800163c <_Unwind_VRS_Pop+0x158>
 80015c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80015c6:	e7a1      	b.n	800150c <_Unwind_VRS_Pop+0x28>
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d19e      	bne.n	800150a <_Unwind_VRS_Pop+0x26>
 80015cc:	1977      	adds	r7, r6, r5
 80015ce:	2f20      	cmp	r7, #32
 80015d0:	d89b      	bhi.n	800150a <_Unwind_VRS_Pop+0x26>
 80015d2:	2e0f      	cmp	r6, #15
 80015d4:	d966      	bls.n	80016a4 <_Unwind_VRS_Pop+0x1c0>
 80015d6:	462f      	mov	r7, r5
 80015d8:	2d00      	cmp	r5, #0
 80015da:	d13a      	bne.n	8001652 <_Unwind_VRS_Pop+0x16e>
 80015dc:	462a      	mov	r2, r5
 80015de:	2700      	movs	r7, #0
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e4:	dd72      	ble.n	80016cc <_Unwind_VRS_Pop+0x1e8>
 80015e6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80015ea:	4601      	mov	r1, r0
 80015ec:	a844      	add	r0, sp, #272	; 0x110
 80015ee:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80015f2:	388c      	subs	r0, #140	; 0x8c
 80015f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80015f8:	f840 5f04 	str.w	r5, [r0, #4]!
 80015fc:	4291      	cmp	r1, r2
 80015fe:	d1f9      	bne.n	80015f4 <_Unwind_VRS_Pop+0x110>
 8001600:	4608      	mov	r0, r1
 8001602:	b197      	cbz	r7, 800162a <_Unwind_VRS_Pop+0x146>
 8001604:	2e10      	cmp	r6, #16
 8001606:	4632      	mov	r2, r6
 8001608:	a944      	add	r1, sp, #272	; 0x110
 800160a:	bf38      	it	cc
 800160c:	2210      	movcc	r2, #16
 800160e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001612:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001616:	0079      	lsls	r1, r7, #1
 8001618:	3a04      	subs	r2, #4
 800161a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800161e:	f850 5b04 	ldr.w	r5, [r0], #4
 8001622:	f842 5f04 	str.w	r5, [r2, #4]!
 8001626:	4288      	cmp	r0, r1
 8001628:	d1f9      	bne.n	800161e <_Unwind_VRS_Pop+0x13a>
 800162a:	2b01      	cmp	r3, #1
 800162c:	d048      	beq.n	80016c0 <_Unwind_VRS_Pop+0x1dc>
 800162e:	2e0f      	cmp	r6, #15
 8001630:	63a1      	str	r1, [r4, #56]	; 0x38
 8001632:	d933      	bls.n	800169c <_Unwind_VRS_Pop+0x1b8>
 8001634:	b117      	cbz	r7, 800163c <_Unwind_VRS_Pop+0x158>
 8001636:	a802      	add	r0, sp, #8
 8001638:	f000 f894 	bl	8001764 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800163c:	2000      	movs	r0, #0
 800163e:	e765      	b.n	800150c <_Unwind_VRS_Pop+0x28>
 8001640:	2e0f      	cmp	r6, #15
 8001642:	f63f af62 	bhi.w	800150a <_Unwind_VRS_Pop+0x26>
 8001646:	2700      	movs	r7, #0
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	07d1      	lsls	r1, r2, #31
 800164c:	d417      	bmi.n	800167e <_Unwind_VRS_Pop+0x19a>
 800164e:	2f00      	cmp	r7, #0
 8001650:	d060      	beq.n	8001714 <_Unwind_VRS_Pop+0x230>
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	0751      	lsls	r1, r2, #29
 8001656:	d445      	bmi.n	80016e4 <_Unwind_VRS_Pop+0x200>
 8001658:	2b01      	cmp	r3, #1
 800165a:	d04d      	beq.n	80016f8 <_Unwind_VRS_Pop+0x214>
 800165c:	2e0f      	cmp	r6, #15
 800165e:	d806      	bhi.n	800166e <_Unwind_VRS_Pop+0x18a>
 8001660:	a822      	add	r0, sp, #136	; 0x88
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	f000 f87a 	bl	800175c <__gnu_Unwind_Save_VFP_D>
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	2f00      	cmp	r7, #0
 800166c:	d0b6      	beq.n	80015dc <_Unwind_VRS_Pop+0xf8>
 800166e:	a802      	add	r0, sp, #8
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	f000 f87b 	bl	800176c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001676:	9b01      	ldr	r3, [sp, #4]
 8001678:	f1c6 0210 	rsb	r2, r6, #16
 800167c:	e7b0      	b.n	80015e0 <_Unwind_VRS_Pop+0xfc>
 800167e:	f022 0101 	bic.w	r1, r2, #1
 8001682:	2b05      	cmp	r3, #5
 8001684:	6021      	str	r1, [r4, #0]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	4620      	mov	r0, r4
 800168a:	d03b      	beq.n	8001704 <_Unwind_VRS_Pop+0x220>
 800168c:	f022 0203 	bic.w	r2, r2, #3
 8001690:	f840 2b48 	str.w	r2, [r0], #72
 8001694:	f000 f85a 	bl	800174c <__gnu_Unwind_Save_VFP>
 8001698:	9b01      	ldr	r3, [sp, #4]
 800169a:	e7d8      	b.n	800164e <_Unwind_VRS_Pop+0x16a>
 800169c:	a822      	add	r0, sp, #136	; 0x88
 800169e:	f000 f859 	bl	8001754 <__gnu_Unwind_Restore_VFP_D>
 80016a2:	e7c7      	b.n	8001634 <_Unwind_VRS_Pop+0x150>
 80016a4:	2f10      	cmp	r7, #16
 80016a6:	d9ce      	bls.n	8001646 <_Unwind_VRS_Pop+0x162>
 80016a8:	3f10      	subs	r7, #16
 80016aa:	e7cd      	b.n	8001648 <_Unwind_VRS_Pop+0x164>
 80016ac:	f023 0310 	bic.w	r3, r3, #16
 80016b0:	6023      	str	r3, [r4, #0]
 80016b2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80016b6:	9201      	str	r2, [sp, #4]
 80016b8:	f000 f8aa 	bl	8001810 <__gnu_Unwind_Save_WMMXC>
 80016bc:	9a01      	ldr	r2, [sp, #4]
 80016be:	e72f      	b.n	8001520 <_Unwind_VRS_Pop+0x3c>
 80016c0:	3104      	adds	r1, #4
 80016c2:	63a1      	str	r1, [r4, #56]	; 0x38
 80016c4:	a822      	add	r0, sp, #136	; 0x88
 80016c6:	f000 f83d 	bl	8001744 <__gnu_Unwind_Restore_VFP>
 80016ca:	e7b7      	b.n	800163c <_Unwind_VRS_Pop+0x158>
 80016cc:	2f00      	cmp	r7, #0
 80016ce:	d199      	bne.n	8001604 <_Unwind_VRS_Pop+0x120>
 80016d0:	4601      	mov	r1, r0
 80016d2:	e7aa      	b.n	800162a <_Unwind_VRS_Pop+0x146>
 80016d4:	f023 0308 	bic.w	r3, r3, #8
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80016de:	f000 f86b 	bl	80017b8 <__gnu_Unwind_Save_WMMXD>
 80016e2:	e742      	b.n	800156a <_Unwind_VRS_Pop+0x86>
 80016e4:	4620      	mov	r0, r4
 80016e6:	f022 0204 	bic.w	r2, r2, #4
 80016ea:	f840 2bd0 	str.w	r2, [r0], #208
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f000 f83c 	bl	800176c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	e7af      	b.n	8001658 <_Unwind_VRS_Pop+0x174>
 80016f8:	a822      	add	r0, sp, #136	; 0x88
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f000 f826 	bl	800174c <__gnu_Unwind_Save_VFP>
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	e7b9      	b.n	8001678 <_Unwind_VRS_Pop+0x194>
 8001704:	f041 0102 	orr.w	r1, r1, #2
 8001708:	f840 1b48 	str.w	r1, [r0], #72
 800170c:	f000 f826 	bl	800175c <__gnu_Unwind_Save_VFP_D>
 8001710:	9b01      	ldr	r3, [sp, #4]
 8001712:	e79c      	b.n	800164e <_Unwind_VRS_Pop+0x16a>
 8001714:	2b01      	cmp	r3, #1
 8001716:	d003      	beq.n	8001720 <_Unwind_VRS_Pop+0x23c>
 8001718:	2e0f      	cmp	r6, #15
 800171a:	f63f af5f 	bhi.w	80015dc <_Unwind_VRS_Pop+0xf8>
 800171e:	e79f      	b.n	8001660 <_Unwind_VRS_Pop+0x17c>
 8001720:	a822      	add	r0, sp, #136	; 0x88
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	f000 f812 	bl	800174c <__gnu_Unwind_Save_VFP>
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	e757      	b.n	80015dc <_Unwind_VRS_Pop+0xf8>

0800172c <__restore_core_regs>:
 800172c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001730:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001734:	469c      	mov	ip, r3
 8001736:	46a6      	mov	lr, r4
 8001738:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800173c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001740:	46e5      	mov	sp, ip
 8001742:	bd00      	pop	{pc}

08001744 <__gnu_Unwind_Restore_VFP>:
 8001744:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <__gnu_Unwind_Save_VFP>:
 800174c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <__gnu_Unwind_Restore_VFP_D>:
 8001754:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <__gnu_Unwind_Save_VFP_D>:
 800175c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop

08001764 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001764:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800176c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <__gnu_Unwind_Restore_WMMXD>:
 8001774:	ecf0 0102 	ldfe	f0, [r0], #8
 8001778:	ecf0 1102 	ldfe	f1, [r0], #8
 800177c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001780:	ecf0 3102 	ldfe	f3, [r0], #8
 8001784:	ecf0 4102 	ldfe	f4, [r0], #8
 8001788:	ecf0 5102 	ldfe	f5, [r0], #8
 800178c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001790:	ecf0 7102 	ldfe	f7, [r0], #8
 8001794:	ecf0 8102 	ldfp	f0, [r0], #8
 8001798:	ecf0 9102 	ldfp	f1, [r0], #8
 800179c:	ecf0 a102 	ldfp	f2, [r0], #8
 80017a0:	ecf0 b102 	ldfp	f3, [r0], #8
 80017a4:	ecf0 c102 	ldfp	f4, [r0], #8
 80017a8:	ecf0 d102 	ldfp	f5, [r0], #8
 80017ac:	ecf0 e102 	ldfp	f6, [r0], #8
 80017b0:	ecf0 f102 	ldfp	f7, [r0], #8
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <__gnu_Unwind_Save_WMMXD>:
 80017b8:	ece0 0102 	stfe	f0, [r0], #8
 80017bc:	ece0 1102 	stfe	f1, [r0], #8
 80017c0:	ece0 2102 	stfe	f2, [r0], #8
 80017c4:	ece0 3102 	stfe	f3, [r0], #8
 80017c8:	ece0 4102 	stfe	f4, [r0], #8
 80017cc:	ece0 5102 	stfe	f5, [r0], #8
 80017d0:	ece0 6102 	stfe	f6, [r0], #8
 80017d4:	ece0 7102 	stfe	f7, [r0], #8
 80017d8:	ece0 8102 	stfp	f0, [r0], #8
 80017dc:	ece0 9102 	stfp	f1, [r0], #8
 80017e0:	ece0 a102 	stfp	f2, [r0], #8
 80017e4:	ece0 b102 	stfp	f3, [r0], #8
 80017e8:	ece0 c102 	stfp	f4, [r0], #8
 80017ec:	ece0 d102 	stfp	f5, [r0], #8
 80017f0:	ece0 e102 	stfp	f6, [r0], #8
 80017f4:	ece0 f102 	stfp	f7, [r0], #8
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <__gnu_Unwind_Restore_WMMXC>:
 80017fc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001800:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001804:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001808:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <__gnu_Unwind_Save_WMMXC>:
 8001810:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001814:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001818:	fca0 a101 	stc2	1, cr10, [r0], #4
 800181c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <_Unwind_RaiseException>:
 8001824:	46ec      	mov	ip, sp
 8001826:	b500      	push	{lr}
 8001828:	e92d 5000 	stmdb	sp!, {ip, lr}
 800182c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001838:	a901      	add	r1, sp, #4
 800183a:	f7ff fbf3 	bl	8001024 <__gnu_Unwind_RaiseException>
 800183e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001842:	b012      	add	sp, #72	; 0x48
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <_Unwind_Resume>:
 8001848:	46ec      	mov	ip, sp
 800184a:	b500      	push	{lr}
 800184c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001850:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e92d 000c 	stmdb	sp!, {r2, r3}
 800185c:	a901      	add	r1, sp, #4
 800185e:	f7ff fc1b 	bl	8001098 <__gnu_Unwind_Resume>
 8001862:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001866:	b012      	add	sp, #72	; 0x48
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <_Unwind_Resume_or_Rethrow>:
 800186c:	46ec      	mov	ip, sp
 800186e:	b500      	push	{lr}
 8001870:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001874:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001880:	a901      	add	r1, sp, #4
 8001882:	f7ff fc2b 	bl	80010dc <__gnu_Unwind_Resume_or_Rethrow>
 8001886:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800188a:	b012      	add	sp, #72	; 0x48
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <_Unwind_ForcedUnwind>:
 8001890:	46ec      	mov	ip, sp
 8001892:	b500      	push	{lr}
 8001894:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001898:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018a4:	ab01      	add	r3, sp, #4
 80018a6:	f7ff fbed 	bl	8001084 <__gnu_Unwind_ForcedUnwind>
 80018aa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018ae:	b012      	add	sp, #72	; 0x48
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop

080018b4 <_Unwind_Backtrace>:
 80018b4:	46ec      	mov	ip, sp
 80018b6:	b500      	push	{lr}
 80018b8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018c8:	aa01      	add	r2, sp, #4
 80018ca:	f7ff fc65 	bl	8001198 <__gnu_Unwind_Backtrace>
 80018ce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018d2:	b012      	add	sp, #72	; 0x48
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <next_unwind_byte>:
 80018d8:	7a02      	ldrb	r2, [r0, #8]
 80018da:	b91a      	cbnz	r2, 80018e4 <next_unwind_byte+0xc>
 80018dc:	7a43      	ldrb	r3, [r0, #9]
 80018de:	b943      	cbnz	r3, 80018f2 <next_unwind_byte+0x1a>
 80018e0:	20b0      	movs	r0, #176	; 0xb0
 80018e2:	4770      	bx	lr
 80018e4:	6803      	ldr	r3, [r0, #0]
 80018e6:	3a01      	subs	r2, #1
 80018e8:	7202      	strb	r2, [r0, #8]
 80018ea:	021a      	lsls	r2, r3, #8
 80018ec:	6002      	str	r2, [r0, #0]
 80018ee:	0e18      	lsrs	r0, r3, #24
 80018f0:	4770      	bx	lr
 80018f2:	6842      	ldr	r2, [r0, #4]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b410      	push	{r4}
 80018f8:	7243      	strb	r3, [r0, #9]
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	2103      	movs	r1, #3
 80018fe:	1d14      	adds	r4, r2, #4
 8001900:	7201      	strb	r1, [r0, #8]
 8001902:	021a      	lsls	r2, r3, #8
 8001904:	6044      	str	r4, [r0, #4]
 8001906:	6002      	str	r2, [r0, #0]
 8001908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800190c:	0e18      	lsrs	r0, r3, #24
 800190e:	4770      	bx	lr

08001910 <_Unwind_GetGR.constprop.0>:
 8001910:	b500      	push	{lr}
 8001912:	b085      	sub	sp, #20
 8001914:	aa03      	add	r2, sp, #12
 8001916:	2300      	movs	r3, #0
 8001918:	9200      	str	r2, [sp, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	220c      	movs	r2, #12
 800191e:	f7ff fbed 	bl	80010fc <_Unwind_VRS_Get>
 8001922:	9803      	ldr	r0, [sp, #12]
 8001924:	b005      	add	sp, #20
 8001926:	f85d fb04 	ldr.w	pc, [sp], #4
 800192a:	bf00      	nop

0800192c <unwind_UCB_from_context>:
 800192c:	e7f0      	b.n	8001910 <_Unwind_GetGR.constprop.0>
 800192e:	bf00      	nop

08001930 <__gnu_unwind_execute>:
 8001930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	4606      	mov	r6, r0
 8001936:	b085      	sub	sp, #20
 8001938:	460f      	mov	r7, r1
 800193a:	f04f 0800 	mov.w	r8, #0
 800193e:	4638      	mov	r0, r7
 8001940:	f7ff ffca 	bl	80018d8 <next_unwind_byte>
 8001944:	28b0      	cmp	r0, #176	; 0xb0
 8001946:	4604      	mov	r4, r0
 8001948:	d023      	beq.n	8001992 <__gnu_unwind_execute+0x62>
 800194a:	0605      	lsls	r5, r0, #24
 800194c:	d427      	bmi.n	800199e <__gnu_unwind_execute+0x6e>
 800194e:	2300      	movs	r3, #0
 8001950:	f10d 090c 	add.w	r9, sp, #12
 8001954:	4619      	mov	r1, r3
 8001956:	0085      	lsls	r5, r0, #2
 8001958:	220d      	movs	r2, #13
 800195a:	f8cd 9000 	str.w	r9, [sp]
 800195e:	4630      	mov	r0, r6
 8001960:	f7ff fbcc 	bl	80010fc <_Unwind_VRS_Get>
 8001964:	b2ed      	uxtb	r5, r5
 8001966:	9b03      	ldr	r3, [sp, #12]
 8001968:	f8cd 9000 	str.w	r9, [sp]
 800196c:	0660      	lsls	r0, r4, #25
 800196e:	f105 0504 	add.w	r5, r5, #4
 8001972:	bf4c      	ite	mi
 8001974:	1b5d      	submi	r5, r3, r5
 8001976:	18ed      	addpl	r5, r5, r3
 8001978:	2300      	movs	r3, #0
 800197a:	4619      	mov	r1, r3
 800197c:	220d      	movs	r2, #13
 800197e:	4630      	mov	r0, r6
 8001980:	9503      	str	r5, [sp, #12]
 8001982:	f7ff fbe1 	bl	8001148 <_Unwind_VRS_Set>
 8001986:	4638      	mov	r0, r7
 8001988:	f7ff ffa6 	bl	80018d8 <next_unwind_byte>
 800198c:	28b0      	cmp	r0, #176	; 0xb0
 800198e:	4604      	mov	r4, r0
 8001990:	d1db      	bne.n	800194a <__gnu_unwind_execute+0x1a>
 8001992:	f1b8 0f00 	cmp.w	r8, #0
 8001996:	f000 8095 	beq.w	8001ac4 <__gnu_unwind_execute+0x194>
 800199a:	2000      	movs	r0, #0
 800199c:	e01c      	b.n	80019d8 <__gnu_unwind_execute+0xa8>
 800199e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80019a2:	2b80      	cmp	r3, #128	; 0x80
 80019a4:	d05d      	beq.n	8001a62 <__gnu_unwind_execute+0x132>
 80019a6:	2b90      	cmp	r3, #144	; 0x90
 80019a8:	d019      	beq.n	80019de <__gnu_unwind_execute+0xae>
 80019aa:	2ba0      	cmp	r3, #160	; 0xa0
 80019ac:	d02c      	beq.n	8001a08 <__gnu_unwind_execute+0xd8>
 80019ae:	2bb0      	cmp	r3, #176	; 0xb0
 80019b0:	d03f      	beq.n	8001a32 <__gnu_unwind_execute+0x102>
 80019b2:	2bc0      	cmp	r3, #192	; 0xc0
 80019b4:	d06c      	beq.n	8001a90 <__gnu_unwind_execute+0x160>
 80019b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019ba:	2bd0      	cmp	r3, #208	; 0xd0
 80019bc:	d10b      	bne.n	80019d6 <__gnu_unwind_execute+0xa6>
 80019be:	f000 0207 	and.w	r2, r0, #7
 80019c2:	3201      	adds	r2, #1
 80019c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019c8:	2305      	movs	r3, #5
 80019ca:	2101      	movs	r1, #1
 80019cc:	4630      	mov	r0, r6
 80019ce:	f7ff fd89 	bl	80014e4 <_Unwind_VRS_Pop>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0b3      	beq.n	800193e <__gnu_unwind_execute+0xe>
 80019d6:	2009      	movs	r0, #9
 80019d8:	b005      	add	sp, #20
 80019da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019de:	f000 030d 	and.w	r3, r0, #13
 80019e2:	2b0d      	cmp	r3, #13
 80019e4:	d0f7      	beq.n	80019d6 <__gnu_unwind_execute+0xa6>
 80019e6:	ad03      	add	r5, sp, #12
 80019e8:	2300      	movs	r3, #0
 80019ea:	f000 020f 	and.w	r2, r0, #15
 80019ee:	4619      	mov	r1, r3
 80019f0:	9500      	str	r5, [sp, #0]
 80019f2:	4630      	mov	r0, r6
 80019f4:	f7ff fb82 	bl	80010fc <_Unwind_VRS_Get>
 80019f8:	2300      	movs	r3, #0
 80019fa:	9500      	str	r5, [sp, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	220d      	movs	r2, #13
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7ff fba1 	bl	8001148 <_Unwind_VRS_Set>
 8001a06:	e79a      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001a08:	43c2      	mvns	r2, r0
 8001a0a:	f002 0307 	and.w	r3, r2, #7
 8001a0e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001a12:	411a      	asrs	r2, r3
 8001a14:	0701      	lsls	r1, r0, #28
 8001a16:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	bf48      	it	mi
 8001a20:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001a24:	4619      	mov	r1, r3
 8001a26:	4630      	mov	r0, r6
 8001a28:	f7ff fd5c 	bl	80014e4 <_Unwind_VRS_Pop>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1d2      	bne.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001a30:	e785      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001a32:	28b1      	cmp	r0, #177	; 0xb1
 8001a34:	d057      	beq.n	8001ae6 <__gnu_unwind_execute+0x1b6>
 8001a36:	28b2      	cmp	r0, #178	; 0xb2
 8001a38:	d068      	beq.n	8001b0c <__gnu_unwind_execute+0x1dc>
 8001a3a:	28b3      	cmp	r0, #179	; 0xb3
 8001a3c:	f000 8095 	beq.w	8001b6a <__gnu_unwind_execute+0x23a>
 8001a40:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001a44:	2bb4      	cmp	r3, #180	; 0xb4
 8001a46:	d0c6      	beq.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001a48:	f000 0207 	and.w	r2, r0, #7
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a54:	4619      	mov	r1, r3
 8001a56:	4630      	mov	r0, r6
 8001a58:	f7ff fd44 	bl	80014e4 <_Unwind_VRS_Pop>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1ba      	bne.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001a60:	e76d      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001a62:	4638      	mov	r0, r7
 8001a64:	f7ff ff38 	bl	80018d8 <next_unwind_byte>
 8001a68:	0224      	lsls	r4, r4, #8
 8001a6a:	4304      	orrs	r4, r0
 8001a6c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001a70:	d0b1      	beq.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001a72:	0124      	lsls	r4, r4, #4
 8001a74:	2300      	movs	r3, #0
 8001a76:	b2a2      	uxth	r2, r4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4630      	mov	r0, r6
 8001a7c:	f7ff fd32 	bl	80014e4 <_Unwind_VRS_Pop>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d1a8      	bne.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001a84:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001a88:	bf18      	it	ne
 8001a8a:	f04f 0801 	movne.w	r8, #1
 8001a8e:	e756      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001a90:	28c6      	cmp	r0, #198	; 0xc6
 8001a92:	d07d      	beq.n	8001b90 <__gnu_unwind_execute+0x260>
 8001a94:	28c7      	cmp	r0, #199	; 0xc7
 8001a96:	f000 8086 	beq.w	8001ba6 <__gnu_unwind_execute+0x276>
 8001a9a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8001aa0:	f000 8094 	beq.w	8001bcc <__gnu_unwind_execute+0x29c>
 8001aa4:	28c8      	cmp	r0, #200	; 0xc8
 8001aa6:	f000 809f 	beq.w	8001be8 <__gnu_unwind_execute+0x2b8>
 8001aaa:	28c9      	cmp	r0, #201	; 0xc9
 8001aac:	d193      	bne.n	80019d6 <__gnu_unwind_execute+0xa6>
 8001aae:	4638      	mov	r0, r7
 8001ab0:	f7ff ff12 	bl	80018d8 <next_unwind_byte>
 8001ab4:	0302      	lsls	r2, r0, #12
 8001ab6:	f000 000f 	and.w	r0, r0, #15
 8001aba:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001abe:	3001      	adds	r0, #1
 8001ac0:	4302      	orrs	r2, r0
 8001ac2:	e781      	b.n	80019c8 <__gnu_unwind_execute+0x98>
 8001ac4:	ac03      	add	r4, sp, #12
 8001ac6:	4643      	mov	r3, r8
 8001ac8:	220e      	movs	r2, #14
 8001aca:	4641      	mov	r1, r8
 8001acc:	9400      	str	r4, [sp, #0]
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f7ff fb14 	bl	80010fc <_Unwind_VRS_Get>
 8001ad4:	9400      	str	r4, [sp, #0]
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	4643      	mov	r3, r8
 8001ada:	220f      	movs	r2, #15
 8001adc:	4641      	mov	r1, r8
 8001ade:	f7ff fb33 	bl	8001148 <_Unwind_VRS_Set>
 8001ae2:	4640      	mov	r0, r8
 8001ae4:	e778      	b.n	80019d8 <__gnu_unwind_execute+0xa8>
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	f7ff fef6 	bl	80018d8 <next_unwind_byte>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f43f af72 	beq.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001af2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001af6:	f47f af6e 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4619      	mov	r1, r3
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff fcf0 	bl	80014e4 <_Unwind_VRS_Pop>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	f47f af66 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001b0a:	e718      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f10d 090c 	add.w	r9, sp, #12
 8001b12:	220d      	movs	r2, #13
 8001b14:	4619      	mov	r1, r3
 8001b16:	f8cd 9000 	str.w	r9, [sp]
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	f7ff faee 	bl	80010fc <_Unwind_VRS_Get>
 8001b20:	4638      	mov	r0, r7
 8001b22:	f7ff fed9 	bl	80018d8 <next_unwind_byte>
 8001b26:	0602      	lsls	r2, r0, #24
 8001b28:	f04f 0402 	mov.w	r4, #2
 8001b2c:	d50c      	bpl.n	8001b48 <__gnu_unwind_execute+0x218>
 8001b2e:	9b03      	ldr	r3, [sp, #12]
 8001b30:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b34:	40a0      	lsls	r0, r4
 8001b36:	4403      	add	r3, r0
 8001b38:	4638      	mov	r0, r7
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	f7ff fecc 	bl	80018d8 <next_unwind_byte>
 8001b40:	0603      	lsls	r3, r0, #24
 8001b42:	f104 0407 	add.w	r4, r4, #7
 8001b46:	d4f2      	bmi.n	8001b2e <__gnu_unwind_execute+0x1fe>
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	f8cd 9000 	str.w	r9, [sp]
 8001b4e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b52:	40a2      	lsls	r2, r4
 8001b54:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4414      	add	r4, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	220d      	movs	r2, #13
 8001b60:	4630      	mov	r0, r6
 8001b62:	9403      	str	r4, [sp, #12]
 8001b64:	f7ff faf0 	bl	8001148 <_Unwind_VRS_Set>
 8001b68:	e6e9      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	f7ff feb4 	bl	80018d8 <next_unwind_byte>
 8001b70:	0301      	lsls	r1, r0, #12
 8001b72:	f000 000f 	and.w	r0, r0, #15
 8001b76:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001b7a:	1c42      	adds	r2, r0, #1
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	4630      	mov	r0, r6
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff fcae 	bl	80014e4 <_Unwind_VRS_Pop>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	f47f af24 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001b8e:	e6d6      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001b90:	4638      	mov	r0, r7
 8001b92:	f7ff fea1 	bl	80018d8 <next_unwind_byte>
 8001b96:	0301      	lsls	r1, r0, #12
 8001b98:	f000 000f 	and.w	r0, r0, #15
 8001b9c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001ba0:	1c42      	adds	r2, r0, #1
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e7eb      	b.n	8001b7e <__gnu_unwind_execute+0x24e>
 8001ba6:	4638      	mov	r0, r7
 8001ba8:	f7ff fe96 	bl	80018d8 <next_unwind_byte>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	f43f af12 	beq.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001bb2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001bb6:	f47f af0e 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fc90 	bl	80014e4 <_Unwind_VRS_Pop>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f47f af06 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001bca:	e6b8      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001bcc:	f000 020f 	and.w	r2, r0, #15
 8001bd0:	3201      	adds	r2, #1
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff fc82 	bl	80014e4 <_Unwind_VRS_Pop>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	f47f aef8 	bne.w	80019d6 <__gnu_unwind_execute+0xa6>
 8001be6:	e6aa      	b.n	800193e <__gnu_unwind_execute+0xe>
 8001be8:	4638      	mov	r0, r7
 8001bea:	f7ff fe75 	bl	80018d8 <next_unwind_byte>
 8001bee:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001bf2:	f000 030f 	and.w	r3, r0, #15
 8001bf6:	3210      	adds	r2, #16
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001bfe:	e6e3      	b.n	80019c8 <__gnu_unwind_execute+0x98>

08001c00 <__gnu_unwind_frame>:
 8001c00:	b510      	push	{r4, lr}
 8001c02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c04:	b084      	sub	sp, #16
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f88d 000c 	strb.w	r0, [sp, #12]
 8001c0e:	79dc      	ldrb	r4, [r3, #7]
 8001c10:	f88d 400d 	strb.w	r4, [sp, #13]
 8001c14:	0212      	lsls	r2, r2, #8
 8001c16:	3308      	adds	r3, #8
 8001c18:	4608      	mov	r0, r1
 8001c1a:	a901      	add	r1, sp, #4
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	f7ff fe86 	bl	8001930 <__gnu_unwind_execute>
 8001c24:	b004      	add	sp, #16
 8001c26:	bd10      	pop	{r4, pc}

08001c28 <_Unwind_GetRegionStart>:
 8001c28:	b508      	push	{r3, lr}
 8001c2a:	f7ff fe7f 	bl	800192c <unwind_UCB_from_context>
 8001c2e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001c30:	bd08      	pop	{r3, pc}
 8001c32:	bf00      	nop

08001c34 <_Unwind_GetLanguageSpecificData>:
 8001c34:	b508      	push	{r3, lr}
 8001c36:	f7ff fe79 	bl	800192c <unwind_UCB_from_context>
 8001c3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001c3c:	79c3      	ldrb	r3, [r0, #7]
 8001c3e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c42:	3008      	adds	r0, #8
 8001c44:	bd08      	pop	{r3, pc}
 8001c46:	bf00      	nop

08001c48 <_Unwind_GetTextRelBase>:
 8001c48:	b508      	push	{r3, lr}
 8001c4a:	f006 fc88 	bl	800855e <abort>
 8001c4e:	bf00      	nop

08001c50 <_Unwind_GetDataRelBase>:
 8001c50:	b508      	push	{r3, lr}
 8001c52:	f7ff fff9 	bl	8001c48 <_Unwind_GetTextRelBase>
 8001c56:	bf00      	nop

08001c58 <__aeabi_idiv0>:
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_Init+0x28>)
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001c64:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c66:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	f000 f833 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f005 f840 	bl	8006cf4 <HAL_InitTick>
 8001c74:	4604      	mov	r4, r0
 8001c76:	b918      	cbnz	r0, 8001c80 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c78:	f004 ffea 	bl	8006c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001c80:	2401      	movs	r4, #1
 8001c82:	e7fb      	b.n	8001c7c <HAL_Init+0x20>
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x10>)
 8001c8a:	4904      	ldr	r1, [pc, #16]	; (8001c9c <HAL_IncTick+0x14>)
 8001c8c:	6813      	ldr	r3, [r2, #0]
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	440b      	add	r3, r1
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200014e0 	.word	0x200014e0
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <HAL_GetTick+0x8>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200014e0 	.word	0x200014e0

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff fff6 	bl	8001ca0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	bf1c      	itt	ne
 8001cb8:	4b05      	ldrne	r3, [pc, #20]	; (8001cd0 <HAL_Delay+0x24>)
 8001cba:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	bf18      	it	ne
 8001cc0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	f7ff ffed 	bl	8001ca0 <HAL_GetTick>
 8001cc6:	1b40      	subs	r0, r0, r5
 8001cc8:	4284      	cmp	r4, r0
 8001cca:	d8fa      	bhi.n	8001cc2 <HAL_Delay+0x16>
  {
  }
}
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	0200      	lsls	r0, r0, #8
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001cee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfa:	b530      	push	{r4, r5, lr}
 8001cfc:	68dc      	ldr	r4, [r3, #12]
 8001cfe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	bf28      	it	cs
 8001d0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 0501 	mov.w	r5, #1
 8001d14:	fa05 f303 	lsl.w	r3, r5, r3
 8001d18:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1c:	bf8c      	ite	hi
 8001d1e:	3c03      	subhi	r4, #3
 8001d20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d22:	4019      	ands	r1, r3
 8001d24:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d26:	fa05 f404 	lsl.w	r4, r5, r4
 8001d2a:	3c01      	subs	r4, #1
 8001d2c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	ea42 0201 	orr.w	r2, r2, r1
 8001d34:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	bfad      	iteet	ge
 8001d3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	f000 000f 	andlt.w	r0, r0, #15
 8001d42:	4b06      	ldrlt	r3, [pc, #24]	; (8001d5c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	bfb5      	itete	lt
 8001d4a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001d54:	bd30      	pop	{r4, r5, pc}
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	e000ed14 	.word	0xe000ed14

08001d60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d60:	2800      	cmp	r0, #0
 8001d62:	db08      	blt.n	8001d76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d64:	0942      	lsrs	r2, r0, #5
 8001d66:	2301      	movs	r3, #1
 8001d68:	f000 001f 	and.w	r0, r0, #31
 8001d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <HAL_NVIC_EnableIRQ+0x18>)
 8001d72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001d7c:	b911      	cbnz	r1, 8001d84 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d7e:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	4608      	mov	r0, r1
      break;
 8001d82:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8001d86:	4770      	bx	lr

08001d88 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d88:	b110      	cbz	r0, 8001d90 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d8a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	4770      	bx	lr
    return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
  }
}
 8001d92:	4770      	bx	lr

08001d94 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d94:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d96:	2201      	movs	r2, #1
 8001d98:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d9c:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001da0:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <HAL_EXTI_IRQHandler+0x2c>)
{
 8001da6:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8001da8:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8001daa:	4222      	tst	r2, r4
 8001dac:	d005      	beq.n	8001dba <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dae:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001db0:	6843      	ldr	r3, [r0, #4]
 8001db2:	b113      	cbz	r3, 8001dba <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8001db4:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8001db8:	4718      	bx	r3
}
 8001dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40010414 	.word	0x40010414

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dcc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001f78 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd0:	4c67      	ldr	r4, [pc, #412]	; (8001f70 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001dd4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	9a01      	ldr	r2, [sp, #4]
 8001dd8:	40da      	lsrs	r2, r3
 8001dda:	d102      	bne.n	8001de2 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001ddc:	b005      	add	sp, #20
 8001dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de2:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001de4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de6:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001de8:	ea12 0e06 	ands.w	lr, r2, r6
 8001dec:	f000 80b1 	beq.w	8001f52 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df0:	684a      	ldr	r2, [r1, #4]
 8001df2:	f022 0710 	bic.w	r7, r2, #16
 8001df6:	2f02      	cmp	r7, #2
 8001df8:	d116      	bne.n	8001e28 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001dfa:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001dfe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e02:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001e06:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e0a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001e0e:	f04f 0c0f 	mov.w	ip, #15
 8001e12:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001e16:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e1a:	690d      	ldr	r5, [r1, #16]
 8001e1c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001e20:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001e24:	f8c9 5020 	str.w	r5, [r9, #32]
 8001e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001e2e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e32:	fa05 f50c 	lsl.w	r5, r5, ip
 8001e36:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e38:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e3c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e40:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e44:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e46:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e4a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001e4c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e50:	d811      	bhi.n	8001e76 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001e52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e54:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e58:	68cf      	ldr	r7, [r1, #12]
 8001e5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8001e5e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001e62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e66:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e6a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001e6e:	409f      	lsls	r7, r3
 8001e70:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001e74:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e76:	f1ba 0f03 	cmp.w	sl, #3
 8001e7a:	d107      	bne.n	8001e8c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001e7c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e7e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e82:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001e86:	409f      	lsls	r7, r3
 8001e88:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001e8a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001e8c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e8e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e90:	688e      	ldr	r6, [r1, #8]
 8001e92:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e96:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001e98:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	00d5      	lsls	r5, r2, #3
 8001e9c:	d559      	bpl.n	8001f52 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001ea2:	f045 0501 	orr.w	r5, r5, #1
 8001ea6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001eaa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001eae:	f023 0603 	bic.w	r6, r3, #3
 8001eb2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001eb6:	f005 0501 	and.w	r5, r5, #1
 8001eba:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001ebe:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001ecc:	270f      	movs	r7, #15
 8001ece:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eda:	d03c      	beq.n	8001f56 <HAL_GPIO_Init+0x192>
 8001edc:	4d25      	ldr	r5, [pc, #148]	; (8001f74 <HAL_GPIO_Init+0x1b0>)
 8001ede:	42a8      	cmp	r0, r5
 8001ee0:	d03b      	beq.n	8001f5a <HAL_GPIO_Init+0x196>
 8001ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee6:	42a8      	cmp	r0, r5
 8001ee8:	d039      	beq.n	8001f5e <HAL_GPIO_Init+0x19a>
 8001eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eee:	42a8      	cmp	r0, r5
 8001ef0:	d037      	beq.n	8001f62 <HAL_GPIO_Init+0x19e>
 8001ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ef6:	42a8      	cmp	r0, r5
 8001ef8:	d035      	beq.n	8001f66 <HAL_GPIO_Init+0x1a2>
 8001efa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	d033      	beq.n	8001f6a <HAL_GPIO_Init+0x1a6>
 8001f02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f06:	42a8      	cmp	r0, r5
 8001f08:	bf14      	ite	ne
 8001f0a:	2507      	movne	r5, #7
 8001f0c:	2506      	moveq	r5, #6
 8001f0e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001f12:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f14:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001f16:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001f18:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001f1e:	bf54      	ite	pl
 8001f20:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f22:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001f26:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001f28:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001f2c:	bf54      	ite	pl
 8001f2e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f30:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001f34:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001f36:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001f3a:	bf54      	ite	pl
 8001f3c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f3e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001f42:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001f44:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f46:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001f48:	bf54      	ite	pl
 8001f4a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f4c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001f50:	60e5      	str	r5, [r4, #12]
    position++;
 8001f52:	3301      	adds	r3, #1
 8001f54:	e73f      	b.n	8001dd6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f56:	2500      	movs	r5, #0
 8001f58:	e7d9      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f5a:	2501      	movs	r5, #1
 8001f5c:	e7d7      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f5e:	2502      	movs	r5, #2
 8001f60:	e7d5      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f62:	2503      	movs	r5, #3
 8001f64:	e7d3      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f66:	2504      	movs	r5, #4
 8001f68:	e7d1      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f6a:	2505      	movs	r5, #5
 8001f6c:	e7cf      	b.n	8001f0e <HAL_GPIO_Init+0x14a>
 8001f6e:	bf00      	nop
 8001f70:	40010400 	.word	0x40010400
 8001f74:	48000400 	.word	0x48000400
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f80:	4c40      	ldr	r4, [pc, #256]	; (8002084 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f82:	f8df b108 	ldr.w	fp, [pc, #264]	; 800208c <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 8001f86:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f88:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f8c:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 8001f90:	fa31 f203 	lsrs.w	r2, r1, r3
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 8001f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f9a:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 8001f9e:	ea11 0605 	ands.w	r6, r1, r5
 8001fa2:	d060      	beq.n	8002066 <HAL_GPIO_DeInit+0xea>
 8001fa4:	f023 0703 	bic.w	r7, r3, #3
 8001fa8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001fac:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fb0:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fb4:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fb6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001fba:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fbe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fc2:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fc6:	d050      	beq.n	800206a <HAL_GPIO_DeInit+0xee>
 8001fc8:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <HAL_GPIO_DeInit+0x10c>)
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	d04f      	beq.n	800206e <HAL_GPIO_DeInit+0xf2>
 8001fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d04d      	beq.n	8002072 <HAL_GPIO_DeInit+0xf6>
 8001fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d04b      	beq.n	8002076 <HAL_GPIO_DeInit+0xfa>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d049      	beq.n	800207a <HAL_GPIO_DeInit+0xfe>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d047      	beq.n	800207e <HAL_GPIO_DeInit+0x102>
 8001fee:	4558      	cmp	r0, fp
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2206      	moveq	r2, #6
 8001ff4:	2207      	movne	r2, #7
 8001ff6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ffa:	4594      	cmp	ip, r2
 8001ffc:	d110      	bne.n	8002020 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	43f6      	mvns	r6, r6
 8002002:	4032      	ands	r2, r6
 8002004:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002006:	6862      	ldr	r2, [r4, #4]
 8002008:	4032      	ands	r2, r6
 800200a:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800200c:	68a2      	ldr	r2, [r4, #8]
 800200e:	4032      	ands	r2, r6
 8002010:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002012:	68e2      	ldr	r2, [r4, #12]
 8002014:	4016      	ands	r6, r2
 8002016:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	ea22 0209 	bic.w	r2, r2, r9
 800201e:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002020:	6806      	ldr	r6, [r0, #0]
 8002022:	2703      	movs	r7, #3
 8002024:	005a      	lsls	r2, r3, #1
 8002026:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800202a:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800202e:	4316      	orrs	r6, r2
 8002030:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002034:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002036:	f003 0607 	and.w	r6, r3, #7
 800203a:	f8d7 e020 	ldr.w	lr, [r7, #32]
 800203e:	00b6      	lsls	r6, r6, #2
 8002040:	fa08 f606 	lsl.w	r6, r8, r6
 8002044:	ea2e 0606 	bic.w	r6, lr, r6
 8002048:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800204a:	6886      	ldr	r6, [r0, #8]
 800204c:	43d2      	mvns	r2, r2
 800204e:	4016      	ands	r6, r2
 8002050:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002052:	6846      	ldr	r6, [r0, #4]
 8002054:	43ed      	mvns	r5, r5
 8002056:	402e      	ands	r6, r5
 8002058:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800205a:	68c6      	ldr	r6, [r0, #12]
 800205c:	4032      	ands	r2, r6
 800205e:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002060:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002062:	4015      	ands	r5, r2
 8002064:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 8002066:	3301      	adds	r3, #1
 8002068:	e792      	b.n	8001f90 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800206a:	2200      	movs	r2, #0
 800206c:	e7c3      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 800206e:	2201      	movs	r2, #1
 8002070:	e7c1      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 8002072:	2202      	movs	r2, #2
 8002074:	e7bf      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 8002076:	2203      	movs	r2, #3
 8002078:	e7bd      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 800207a:	2204      	movs	r2, #4
 800207c:	e7bb      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 800207e:	2205      	movs	r2, #5
 8002080:	e7b9      	b.n	8001ff6 <HAL_GPIO_DeInit+0x7a>
 8002082:	bf00      	nop
 8002084:	40010400 	.word	0x40010400
 8002088:	48000400 	.word	0x48000400
 800208c:	48001800 	.word	0x48001800

08002090 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002090:	6903      	ldr	r3, [r0, #16]
 8002092:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002094:	bf14      	ite	ne
 8002096:	2001      	movne	r0, #1
 8002098:	2000      	moveq	r0, #0
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	b10a      	cbz	r2, 80020a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209e:	6181      	str	r1, [r0, #24]
 80020a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a2:	6281      	str	r1, [r0, #40]	; 0x28
 80020a4:	4770      	bx	lr

080020a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020a6:	6943      	ldr	r3, [r0, #20]
 80020a8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020aa:	bf14      	ite	ne
 80020ac:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ae:	6181      	streq	r1, [r0, #24]
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020b4:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80020b6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80020b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000

080020c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020cc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d0:	d11c      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80020d6:	d015      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020e4:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80020e6:	6811      	ldr	r1, [r2, #0]
 80020e8:	2232      	movs	r2, #50	; 0x32
 80020ea:	434a      	muls	r2, r1
 80020ec:	490f      	ldr	r1, [pc, #60]	; (800212c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80020ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80020f2:	4619      	mov	r1, r3
 80020f4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f6:	6958      	ldr	r0, [r3, #20]
 80020f8:	0540      	lsls	r0, r0, #21
 80020fa:	d500      	bpl.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x3a>
 80020fc:	b922      	cbnz	r2, 8002108 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fe:	694b      	ldr	r3, [r1, #20]
 8002100:	055b      	lsls	r3, r3, #21
 8002102:	d40d      	bmi.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002104:	2000      	movs	r0, #0
 8002106:	4770      	bx	lr
        wait_loop_index--;
 8002108:	3a01      	subs	r2, #1
 800210a:	e7f4      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800210c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002110:	bf1f      	itttt	ne
 8002112:	681a      	ldrne	r2, [r3, #0]
 8002114:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002118:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800211c:	601a      	strne	r2, [r3, #0]
 800211e:	e7f1      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8002120:	2003      	movs	r0, #3
}
 8002122:	4770      	bx	lr
 8002124:	40007000 	.word	0x40007000
 8002128:	2000001c 	.word	0x2000001c
 800212c:	000f4240 	.word	0x000f4240

08002130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002130:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002132:	4d1e      	ldr	r5, [pc, #120]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002134:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002136:	00da      	lsls	r2, r3, #3
{
 8002138:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800213a:	d518      	bpl.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff ffba 	bl	80020b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002140:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002144:	d123      	bne.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002146:	2c80      	cmp	r4, #128	; 0x80
 8002148:	d929      	bls.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800214a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800214c:	bf8c      	ite	hi
 800214e:	2002      	movhi	r0, #2
 8002150:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	f023 0307 	bic.w	r3, r3, #7
 800215a:	4303      	orrs	r3, r0
 800215c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002164:	1a18      	subs	r0, r3, r0
 8002166:	bf18      	it	ne
 8002168:	2001      	movne	r0, #1
 800216a:	b003      	add	sp, #12
 800216c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	65ab      	str	r3, [r5, #88]	; 0x58
 8002176:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff ff98 	bl	80020b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	65ab      	str	r3, [r5, #88]	; 0x58
 800218c:	e7d8      	b.n	8002140 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800218e:	2c80      	cmp	r4, #128	; 0x80
 8002190:	d807      	bhi.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002192:	d008      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002194:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002198:	4258      	negs	r0, r3
 800219a:	4158      	adcs	r0, r3
 800219c:	e7d9      	b.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800219e:	2000      	movs	r0, #0
 80021a0:	e7d7      	b.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a2:	2003      	movs	r0, #3
 80021a4:	e7d5      	b.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2002      	movs	r0, #2
 80021a8:	e7d3      	b.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_GetSysClockFreq+0x8c>)
 80021b6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ba:	f012 020c 	ands.w	r2, r2, #12
 80021be:	d005      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x18>
 80021c0:	2a0c      	cmp	r2, #12
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021c8:	2901      	cmp	r1, #1
 80021ca:	d118      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021cc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80021ce:	481d      	ldr	r0, [pc, #116]	; (8002244 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d2:	bf55      	itete	pl
 80021d4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021d8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021da:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021de:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80021e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e6:	b34a      	cbz	r2, 800223c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e8:	2a0c      	cmp	r2, #12
 80021ea:	d009      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x4c>
 80021ec:	2000      	movs	r0, #0
  return sysclockfreq;
 80021ee:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021f0:	2a04      	cmp	r2, #4
 80021f2:	d022      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x86>
 80021f4:	2a08      	cmp	r2, #8
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f8:	bf18      	it	ne
 80021fa:	2000      	movne	r0, #0
 80021fc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fe:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002206:	2a02      	cmp	r2, #2
 8002208:	d015      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 800220a:	490f      	ldr	r1, [pc, #60]	; (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 800220c:	2a03      	cmp	r2, #3
 800220e:	bf08      	it	eq
 8002210:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002212:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002214:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800221c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002220:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002224:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002226:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002228:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800222c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002230:	fbb0 f0f3 	udiv	r0, r0, r3
 8002234:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002238:	e7eb      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	08008908 	.word	0x08008908
 8002248:	007a1200 	.word	0x007a1200
 800224c:	00f42400 	.word	0x00f42400

08002250 <HAL_RCC_OscConfig>:
{
 8002250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002254:	4605      	mov	r5, r0
 8002256:	b918      	cbnz	r0, 8002260 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
}
 800225a:	b003      	add	sp, #12
 800225c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002260:	4ca7      	ldr	r4, [pc, #668]	; (8002500 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002264:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002266:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002268:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002272:	d53d      	bpl.n	80022f0 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002274:	b11e      	cbz	r6, 800227e <HAL_RCC_OscConfig+0x2e>
 8002276:	2e0c      	cmp	r6, #12
 8002278:	d166      	bne.n	8002348 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227a:	2f01      	cmp	r7, #1
 800227c:	d164      	bne.n	8002348 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	0799      	lsls	r1, r3, #30
 8002282:	d502      	bpl.n	800228a <HAL_RCC_OscConfig+0x3a>
 8002284:	69ab      	ldr	r3, [r5, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0e6      	beq.n	8002258 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	6a28      	ldr	r0, [r5, #32]
 800228e:	071a      	lsls	r2, r3, #28
 8002290:	bf56      	itet	pl
 8002292:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002296:	6823      	ldrmi	r3, [r4, #0]
 8002298:	091b      	lsrpl	r3, r3, #4
 800229a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229e:	4283      	cmp	r3, r0
 80022a0:	d23b      	bcs.n	800231a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a2:	f7ff ff45 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d1d6      	bne.n	8002258 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	6a2a      	ldr	r2, [r5, #32]
 80022b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	69ea      	ldr	r2, [r5, #28]
 80022c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022ca:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022cc:	f7ff ff72 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 80022d0:	68a3      	ldr	r3, [r4, #8]
 80022d2:	4a8c      	ldr	r2, [pc, #560]	; (8002504 <HAL_RCC_OscConfig+0x2b4>)
 80022d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	40d8      	lsrs	r0, r3
 80022e0:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x2b8>)
 80022e2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80022e4:	4b89      	ldr	r3, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0x2bc>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	f004 fd04 	bl	8006cf4 <HAL_InitTick>
        if(status != HAL_OK)
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1b4      	bne.n	800225a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	07d9      	lsls	r1, r3, #31
 80022f4:	d45f      	bmi.n	80023b6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	079a      	lsls	r2, r3, #30
 80022fa:	f100 809e 	bmi.w	800243a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	682b      	ldr	r3, [r5, #0]
 8002300:	0719      	lsls	r1, r3, #28
 8002302:	f100 80d2 	bmi.w	80024aa <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	075a      	lsls	r2, r3, #29
 800230a:	f100 8101 	bmi.w	8002510 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800230e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 816a 	bne.w	80025ea <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002316:	2000      	movs	r0, #0
 8002318:	e79f      	b.n	800225a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002328:	4303      	orrs	r3, r0
 800232a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	69ea      	ldr	r2, [r5, #28]
 8002330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002338:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233a:	2e00      	cmp	r6, #0
 800233c:	d1c6      	bne.n	80022cc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233e:	f7ff fef7 	bl	8002130 <RCC_SetFlashLatencyFromMSIRange>
 8002342:	2800      	cmp	r0, #0
 8002344:	d0c2      	beq.n	80022cc <HAL_RCC_OscConfig+0x7c>
 8002346:	e787      	b.n	8002258 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002348:	69ab      	ldr	r3, [r5, #24]
 800234a:	b31b      	cbz	r3, 8002394 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002354:	f7ff fca4 	bl	8001ca0 <HAL_GetTick>
 8002358:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	079b      	lsls	r3, r3, #30
 800235e:	d511      	bpl.n	8002384 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6023      	str	r3, [r4, #0]
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	6a2a      	ldr	r2, [r5, #32]
 800236c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002370:	4313      	orrs	r3, r2
 8002372:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002374:	6863      	ldr	r3, [r4, #4]
 8002376:	69ea      	ldr	r2, [r5, #28]
 8002378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002380:	6063      	str	r3, [r4, #4]
 8002382:	e7b5      	b.n	80022f0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002384:	f7ff fc8c 	bl	8001ca0 <HAL_GetTick>
 8002388:	eba0 0008 	sub.w	r0, r0, r8
 800238c:	2802      	cmp	r0, #2
 800238e:	d9e4      	bls.n	800235a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002390:	2003      	movs	r0, #3
 8002392:	e762      	b.n	800225a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800239c:	f7ff fc80 	bl	8001ca0 <HAL_GetTick>
 80023a0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	0798      	lsls	r0, r3, #30
 80023a6:	d5a3      	bpl.n	80022f0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc7a 	bl	8001ca0 <HAL_GetTick>
 80023ac:	eba0 0008 	sub.w	r0, r0, r8
 80023b0:	2802      	cmp	r0, #2
 80023b2:	d9f6      	bls.n	80023a2 <HAL_RCC_OscConfig+0x152>
 80023b4:	e7ec      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b6:	2e08      	cmp	r6, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_OscConfig+0x172>
 80023ba:	2e0c      	cmp	r6, #12
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023be:	2f03      	cmp	r7, #3
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	039b      	lsls	r3, r3, #14
 80023c6:	d596      	bpl.n	80022f6 <HAL_RCC_OscConfig+0xa6>
 80023c8:	686b      	ldr	r3, [r5, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d193      	bne.n	80022f6 <HAL_RCC_OscConfig+0xa6>
 80023ce:	e743      	b.n	8002258 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	686b      	ldr	r3, [r5, #4]
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d6:	d110      	bne.n	80023fa <HAL_RCC_OscConfig+0x1aa>
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc5e 	bl	8001ca0 <HAL_GetTick>
 80023e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	0398      	lsls	r0, r3, #14
 80023ea:	d484      	bmi.n	80022f6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fc58 	bl	8001ca0 <HAL_GetTick>
 80023f0:	eba0 0008 	sub.w	r0, r0, r8
 80023f4:	2864      	cmp	r0, #100	; 0x64
 80023f6:	d9f6      	bls.n	80023e6 <HAL_RCC_OscConfig+0x196>
 80023f8:	e7ca      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fe:	d104      	bne.n	800240a <HAL_RCC_OscConfig+0x1ba>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	e7e6      	b.n	80023d8 <HAL_RCC_OscConfig+0x188>
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002410:	6022      	str	r2, [r4, #0]
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002418:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800241e:	f7ff fc3f 	bl	8001ca0 <HAL_GetTick>
 8002422:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	0399      	lsls	r1, r3, #14
 8002428:	f57f af65 	bpl.w	80022f6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff fc38 	bl	8001ca0 <HAL_GetTick>
 8002430:	eba0 0008 	sub.w	r0, r0, r8
 8002434:	2864      	cmp	r0, #100	; 0x64
 8002436:	d9f5      	bls.n	8002424 <HAL_RCC_OscConfig+0x1d4>
 8002438:	e7aa      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800243a:	2e04      	cmp	r6, #4
 800243c:	d003      	beq.n	8002446 <HAL_RCC_OscConfig+0x1f6>
 800243e:	2e0c      	cmp	r6, #12
 8002440:	d110      	bne.n	8002464 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002442:	2f02      	cmp	r7, #2
 8002444:	d10e      	bne.n	8002464 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	055a      	lsls	r2, r3, #21
 800244a:	d503      	bpl.n	8002454 <HAL_RCC_OscConfig+0x204>
 800244c:	68eb      	ldr	r3, [r5, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f43f af02 	beq.w	8002258 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	692a      	ldr	r2, [r5, #16]
 8002458:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800245c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002460:	6063      	str	r3, [r4, #4]
 8002462:	e74c      	b.n	80022fe <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	68eb      	ldr	r3, [r5, #12]
 8002466:	b17b      	cbz	r3, 8002488 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002470:	f7ff fc16 	bl	8001ca0 <HAL_GetTick>
 8002474:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	055b      	lsls	r3, r3, #21
 800247a:	d4eb      	bmi.n	8002454 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fc10 	bl	8001ca0 <HAL_GetTick>
 8002480:	1bc0      	subs	r0, r0, r7
 8002482:	2802      	cmp	r0, #2
 8002484:	d9f7      	bls.n	8002476 <HAL_RCC_OscConfig+0x226>
 8002486:	e783      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800248e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002490:	f7ff fc06 	bl	8001ca0 <HAL_GetTick>
 8002494:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	0558      	lsls	r0, r3, #21
 800249a:	f57f af30 	bpl.w	80022fe <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff fbff 	bl	8001ca0 <HAL_GetTick>
 80024a2:	1bc0      	subs	r0, r0, r7
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d9f6      	bls.n	8002496 <HAL_RCC_OscConfig+0x246>
 80024a8:	e772      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024aa:	696b      	ldr	r3, [r5, #20]
 80024ac:	b19b      	cbz	r3, 80024d6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80024ae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024ba:	f7ff fbf1 	bl	8001ca0 <HAL_GetTick>
 80024be:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024c4:	079b      	lsls	r3, r3, #30
 80024c6:	f53f af1e 	bmi.w	8002306 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7ff fbe9 	bl	8001ca0 <HAL_GetTick>
 80024ce:	1bc0      	subs	r0, r0, r7
 80024d0:	2802      	cmp	r0, #2
 80024d2:	d9f5      	bls.n	80024c0 <HAL_RCC_OscConfig+0x270>
 80024d4:	e75c      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80024d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024e2:	f7ff fbdd 	bl	8001ca0 <HAL_GetTick>
 80024e6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024ec:	0798      	lsls	r0, r3, #30
 80024ee:	f57f af0a 	bpl.w	8002306 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7ff fbd5 	bl	8001ca0 <HAL_GetTick>
 80024f6:	1bc0      	subs	r0, r0, r7
 80024f8:	2802      	cmp	r0, #2
 80024fa:	d9f5      	bls.n	80024e8 <HAL_RCC_OscConfig+0x298>
 80024fc:	e748      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	080088ed 	.word	0x080088ed
 8002508:	2000001c 	.word	0x2000001c
 800250c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002512:	00d9      	lsls	r1, r3, #3
 8002514:	d429      	bmi.n	800256a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	65a3      	str	r3, [r4, #88]	; 0x58
 800251e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002528:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	4f89      	ldr	r7, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x504>)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	05da      	lsls	r2, r3, #23
 8002532:	d51d      	bpl.n	8002570 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002534:	68ab      	ldr	r3, [r5, #8]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12b      	bne.n	8002592 <HAL_RCC_OscConfig+0x342>
 800253a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002546:	f7ff fbab 	bl	8001ca0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800254e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002550:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002554:	0798      	lsls	r0, r3, #30
 8002556:	d542      	bpl.n	80025de <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002558:	f1b8 0f00 	cmp.w	r8, #0
 800255c:	f43f aed7 	beq.w	800230e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002566:	65a3      	str	r3, [r4, #88]	; 0x58
 8002568:	e6d1      	b.n	800230e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800256a:	f04f 0800 	mov.w	r8, #0
 800256e:	e7dd      	b.n	800252c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002578:	f7ff fb92 	bl	8001ca0 <HAL_GetTick>
 800257c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	d4d7      	bmi.n	8002534 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7ff fb8c 	bl	8001ca0 <HAL_GetTick>
 8002588:	eba0 0009 	sub.w	r0, r0, r9
 800258c:	2802      	cmp	r0, #2
 800258e:	d9f6      	bls.n	800257e <HAL_RCC_OscConfig+0x32e>
 8002590:	e6fe      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002592:	2b05      	cmp	r3, #5
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x354>
 8002596:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80025a2:	e7ca      	b.n	800253a <HAL_RCC_OscConfig+0x2ea>
 80025a4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80025b0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80025b4:	f022 0204 	bic.w	r2, r2, #4
 80025b8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1c2      	bne.n	8002546 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80025c0:	f7ff fb6e 	bl	8001ca0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80025ce:	0799      	lsls	r1, r3, #30
 80025d0:	d5c2      	bpl.n	8002558 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fb65 	bl	8001ca0 <HAL_GetTick>
 80025d6:	1bc0      	subs	r0, r0, r7
 80025d8:	4548      	cmp	r0, r9
 80025da:	d9f6      	bls.n	80025ca <HAL_RCC_OscConfig+0x37a>
 80025dc:	e6d8      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7ff fb5f 	bl	8001ca0 <HAL_GetTick>
 80025e2:	1bc0      	subs	r0, r0, r7
 80025e4:	4548      	cmp	r0, r9
 80025e6:	d9b3      	bls.n	8002550 <HAL_RCC_OscConfig+0x300>
 80025e8:	e6d2      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f040 808f 	bne.w	800270e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80025f0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80025f4:	f003 0103 	and.w	r1, r3, #3
 80025f8:	4291      	cmp	r1, r2
 80025fa:	d124      	bne.n	8002646 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80025fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002602:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002604:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002608:	d11d      	bne.n	8002646 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800260a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800260c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002610:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002614:	d117      	bne.n	8002646 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002616:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002618:	3a07      	subs	r2, #7
 800261a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800261e:	bf18      	it	ne
 8002620:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002622:	4291      	cmp	r1, r2
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002626:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800262e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002630:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002634:	d107      	bne.n	8002646 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002636:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002638:	0852      	lsrs	r2, r2, #1
 800263a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800263e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002644:	d04a      	beq.n	80026dc <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002646:	2e0c      	cmp	r6, #12
 8002648:	f43f ae06 	beq.w	8002258 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	f53f ae02 	bmi.w	8002258 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	f53f adfe 	bmi.w	8002258 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002662:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002664:	f7ff fb1c 	bl	8001ca0 <HAL_GetTick>
 8002668:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	019f      	lsls	r7, r3, #6
 800266e:	d42f      	bmi.n	80026d0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	68e2      	ldr	r2, [r4, #12]
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x508>)
 8002674:	4013      	ands	r3, r2
 8002676:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002678:	4313      	orrs	r3, r2
 800267a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800267c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002680:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002682:	3a01      	subs	r2, #1
 8002684:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002688:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800268a:	0912      	lsrs	r2, r2, #4
 800268c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002690:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800269a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	3a01      	subs	r2, #1
 80026a0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80026a4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ac:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ae:	68e3      	ldr	r3, [r4, #12]
 80026b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80026b6:	f7ff faf3 	bl	8001ca0 <HAL_GetTick>
 80026ba:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	0198      	lsls	r0, r3, #6
 80026c0:	f53f ae29 	bmi.w	8002316 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff faec 	bl	8001ca0 <HAL_GetTick>
 80026c8:	1b40      	subs	r0, r0, r5
 80026ca:	2802      	cmp	r0, #2
 80026cc:	d9f6      	bls.n	80026bc <HAL_RCC_OscConfig+0x46c>
 80026ce:	e65f      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7ff fae6 	bl	8001ca0 <HAL_GetTick>
 80026d4:	1b80      	subs	r0, r0, r6
 80026d6:	2802      	cmp	r0, #2
 80026d8:	d9c7      	bls.n	800266a <HAL_RCC_OscConfig+0x41a>
 80026da:	e659      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	0199      	lsls	r1, r3, #6
 80026e0:	f53f ae19 	bmi.w	8002316 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ea:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ec:	68e3      	ldr	r3, [r4, #12]
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80026f4:	f7ff fad4 	bl	8001ca0 <HAL_GetTick>
 80026f8:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	019a      	lsls	r2, r3, #6
 80026fe:	f53f ae0a 	bmi.w	8002316 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff facd 	bl	8001ca0 <HAL_GetTick>
 8002706:	1b40      	subs	r0, r0, r5
 8002708:	2802      	cmp	r0, #2
 800270a:	d9f6      	bls.n	80026fa <HAL_RCC_OscConfig+0x4aa>
 800270c:	e640      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800270e:	2e0c      	cmp	r6, #12
 8002710:	f43f ada2 	beq.w	8002258 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800271a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002722:	bf02      	ittt	eq
 8002724:	68e3      	ldreq	r3, [r4, #12]
 8002726:	f023 0303 	biceq.w	r3, r3, #3
 800272a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800272c:	68e3      	ldr	r3, [r4, #12]
 800272e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002738:	f7ff fab2 	bl	8001ca0 <HAL_GetTick>
 800273c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	f57f ade8 	bpl.w	8002316 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7ff faab 	bl	8001ca0 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d9f6      	bls.n	800273e <HAL_RCC_OscConfig+0x4ee>
 8002750:	e61e      	b.n	8002390 <HAL_RCC_OscConfig+0x140>
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000
 8002758:	f99d808c 	.word	0xf99d808c

0800275c <HAL_RCC_ClockConfig>:
{
 800275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002760:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002762:	4604      	mov	r4, r0
 8002764:	b910      	cbnz	r0, 800276c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
 8002768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_RCC_ClockConfig+0x118>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	428b      	cmp	r3, r1
 8002776:	d32a      	bcc.n	80027ce <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	07d9      	lsls	r1, r3, #31
 800277c:	d432      	bmi.n	80027e4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277e:	6821      	ldr	r1, [r4, #0]
 8002780:	078a      	lsls	r2, r1, #30
 8002782:	d45c      	bmi.n	800283e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4a3b      	ldr	r2, [pc, #236]	; (8002874 <HAL_RCC_ClockConfig+0x118>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	429e      	cmp	r6, r3
 800278e:	d35e      	bcc.n	800284e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	f011 0f04 	tst.w	r1, #4
 8002794:	4d38      	ldr	r5, [pc, #224]	; (8002878 <HAL_RCC_ClockConfig+0x11c>)
 8002796:	d165      	bne.n	8002864 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	070b      	lsls	r3, r1, #28
 800279a:	d506      	bpl.n	80027aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279c:	68ab      	ldr	r3, [r5, #8]
 800279e:	6922      	ldr	r2, [r4, #16]
 80027a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027a8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027aa:	f7ff fd03 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 80027ae:	68ab      	ldr	r3, [r5, #8]
 80027b0:	4a32      	ldr	r2, [pc, #200]	; (800287c <HAL_RCC_ClockConfig+0x120>)
 80027b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80027b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_RCC_ClockConfig+0x124>)
 80027c4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCC_ClockConfig+0x128>)
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f004 ba93 	b.w	8006cf4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d8:	6813      	ldr	r3, [r2, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	4299      	cmp	r1, r3
 80027e0:	d1c1      	bne.n	8002766 <HAL_RCC_ClockConfig+0xa>
 80027e2:	e7c9      	b.n	8002778 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e4:	6862      	ldr	r2, [r4, #4]
 80027e6:	4d24      	ldr	r5, [pc, #144]	; (8002878 <HAL_RCC_ClockConfig+0x11c>)
 80027e8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ec:	d11b      	bne.n	8002826 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f2:	d0b8      	beq.n	8002766 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f4:	68ab      	ldr	r3, [r5, #8]
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80027fe:	f7ff fa4f 	bl	8001ca0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002802:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002806:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002808:	68ab      	ldr	r3, [r5, #8]
 800280a:	6862      	ldr	r2, [r4, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002814:	d0b3      	beq.n	800277e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002816:	f7ff fa43 	bl	8001ca0 <HAL_GetTick>
 800281a:	1bc0      	subs	r0, r0, r7
 800281c:	4540      	cmp	r0, r8
 800281e:	d9f3      	bls.n	8002808 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8002820:	2003      	movs	r0, #3
}
 8002822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	2a02      	cmp	r2, #2
 8002828:	d102      	bne.n	8002830 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800282e:	e7e0      	b.n	80027f2 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002830:	b912      	cbnz	r2, 8002838 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002832:	f013 0f02 	tst.w	r3, #2
 8002836:	e7dc      	b.n	80027f2 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800283c:	e7d9      	b.n	80027f2 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283e:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x11c>)
 8002840:	68a0      	ldr	r0, [r4, #8]
 8002842:	6893      	ldr	r3, [r2, #8]
 8002844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002848:	4303      	orrs	r3, r0
 800284a:	6093      	str	r3, [r2, #8]
 800284c:	e79a      	b.n	8002784 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f023 0307 	bic.w	r3, r3, #7
 8002854:	4333      	orrs	r3, r6
 8002856:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	429e      	cmp	r6, r3
 8002860:	d181      	bne.n	8002766 <HAL_RCC_ClockConfig+0xa>
 8002862:	e795      	b.n	8002790 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	68ab      	ldr	r3, [r5, #8]
 8002866:	68e2      	ldr	r2, [r4, #12]
 8002868:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800286c:	4313      	orrs	r3, r2
 800286e:	60ab      	str	r3, [r5, #8]
 8002870:	e792      	b.n	8002798 <HAL_RCC_ClockConfig+0x3c>
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	080088ed 	.word	0x080088ed
 8002880:	2000001c 	.word	0x2000001c
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetHCLKFreq>:
}
 8002888:	4b01      	ldr	r3, [pc, #4]	; (8002890 <HAL_RCC_GetHCLKFreq+0x8>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000001c 	.word	0x2000001c

08002894 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8002896:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a2:	6810      	ldr	r0, [r2, #0]
 80028a4:	f003 031f 	and.w	r3, r3, #31
}
 80028a8:	40d8      	lsrs	r0, r3
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080088fd 	.word	0x080088fd
 80028b4:	2000001c 	.word	0x2000001c

080028b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028ba:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c6:	6810      	ldr	r0, [r2, #0]
 80028c8:	f003 031f 	and.w	r3, r3, #31
}
 80028cc:	40d8      	lsrs	r0, r3
 80028ce:	4770      	bx	lr
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080088fd 	.word	0x080088fd
 80028d8:	2000001c 	.word	0x2000001c

080028dc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028dc:	230f      	movs	r3, #15
 80028de:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetClockConfig+0x34>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80028f0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028f8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002902:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetClockConfig+0x38>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	4770      	bx	lr
 8002910:	40021000 	.word	0x40021000
 8002914:	40022000 	.word	0x40022000

08002918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800291a:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <RCCEx_PLLSAI1_Config+0x118>)
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	f012 0f03 	tst.w	r2, #3
{
 8002922:	4605      	mov	r5, r0
 8002924:	460e      	mov	r6, r1
 8002926:	461c      	mov	r4, r3
 8002928:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	d02a      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	f002 0203 	and.w	r2, r2, #3
 8002932:	4282      	cmp	r2, r0
 8002934:	d13c      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002936:	2a00      	cmp	r2, #0
 8002938:	d03a      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800293a:	68db      	ldr	r3, [r3, #12]
       ||
 800293c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800293e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002942:	3301      	adds	r3, #1
       ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d133      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800294e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7ff f9a6 	bl	8001ca0 <HAL_GetTick>
 8002954:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	011a      	lsls	r2, r3, #4
 800295a:	d432      	bmi.n	80029c2 <RCCEx_PLLSAI1_Config+0xaa>
 800295c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800295e:	2e00      	cmp	r6, #0
 8002960:	d036      	beq.n	80029d0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002962:	2e01      	cmp	r6, #1
 8002964:	d150      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002966:	6922      	ldr	r2, [r4, #16]
 8002968:	6928      	ldr	r0, [r5, #16]
 800296a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800296e:	0840      	lsrs	r0, r0, #1
 8002970:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002974:	3801      	subs	r0, #1
 8002976:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800297a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800297e:	6122      	str	r2, [r4, #16]
 8002980:	e032      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002982:	2802      	cmp	r0, #2
 8002984:	d010      	beq.n	80029a8 <RCCEx_PLLSAI1_Config+0x90>
 8002986:	2803      	cmp	r0, #3
 8002988:	d014      	beq.n	80029b4 <RCCEx_PLLSAI1_Config+0x9c>
 800298a:	2801      	cmp	r0, #1
 800298c:	d110      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	079f      	lsls	r7, r3, #30
 8002992:	d538      	bpl.n	8002a06 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002994:	68e3      	ldr	r3, [r4, #12]
 8002996:	686a      	ldr	r2, [r5, #4]
 8002998:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800299c:	3a01      	subs	r2, #1
 800299e:	4318      	orrs	r0, r3
 80029a0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80029a4:	60e0      	str	r0, [r4, #12]
 80029a6:	e7cf      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	d1f1      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x7c>
 80029b0:	2001      	movs	r0, #1
 80029b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	0391      	lsls	r1, r2, #14
 80029b8:	d4ec      	bmi.n	8002994 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80029c0:	e7f5      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c2:	f7ff f96d 	bl	8001ca0 <HAL_GetTick>
 80029c6:	1bc0      	subs	r0, r0, r7
 80029c8:	2802      	cmp	r0, #2
 80029ca:	d9c4      	bls.n	8002956 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d0:	6921      	ldr	r1, [r4, #16]
 80029d2:	68eb      	ldr	r3, [r5, #12]
 80029d4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80029d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80029dc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80029e6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ee:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff f956 	bl	8001ca0 <HAL_GetTick>
 80029f4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	d513      	bpl.n	8002a24 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	69aa      	ldr	r2, [r5, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	6123      	str	r3, [r4, #16]
 8002a04:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a08:	6923      	ldr	r3, [r4, #16]
 8002a0a:	6968      	ldr	r0, [r5, #20]
 8002a0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a10:	0840      	lsrs	r0, r0, #1
 8002a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a16:	3801      	subs	r0, #1
 8002a18:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002a1c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002a20:	6123      	str	r3, [r4, #16]
 8002a22:	e7e1      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a24:	f7ff f93c 	bl	8001ca0 <HAL_GetTick>
 8002a28:	1b80      	subs	r0, r0, r6
 8002a2a:	2802      	cmp	r0, #2
 8002a2c:	d9e3      	bls.n	80029f6 <RCCEx_PLLSAI1_Config+0xde>
 8002a2e:	e7cd      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
 8002a30:	40021000 	.word	0x40021000

08002a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <RCCEx_PLLSAI2_Config+0xf8>)
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	f012 0f03 	tst.w	r2, #3
{
 8002a3e:	4605      	mov	r5, r0
 8002a40:	460e      	mov	r6, r1
 8002a42:	461c      	mov	r4, r3
 8002a44:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a46:	d028      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	4282      	cmp	r2, r0
 8002a50:	d13a      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d038      	beq.n	8002ac8 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a56:	68db      	ldr	r3, [r3, #12]
       ||
 8002a58:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a5a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a5e:	3301      	adds	r3, #1
       ||
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d131      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7ff f918 	bl	8001ca0 <HAL_GetTick>
 8002a70:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	d430      	bmi.n	8002ada <RCCEx_PLLSAI2_Config+0xa6>
 8002a78:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7a:	2e00      	cmp	r6, #0
 8002a7c:	d034      	beq.n	8002ae8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a7e:	6963      	ldr	r3, [r4, #20]
 8002a80:	6929      	ldr	r1, [r5, #16]
 8002a82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a86:	0849      	lsrs	r1, r1, #1
 8002a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a8c:	3901      	subs	r1, #1
 8002a8e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a92:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002a96:	6163      	str	r3, [r4, #20]
 8002a98:	e032      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002a9a:	2802      	cmp	r0, #2
 8002a9c:	d010      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x8c>
 8002a9e:	2803      	cmp	r0, #3
 8002aa0:	d014      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0x98>
 8002aa2:	2801      	cmp	r0, #1
 8002aa4:	d110      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	079f      	lsls	r7, r3, #30
 8002aaa:	d538      	bpl.n	8002b1e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aac:	68e3      	ldr	r3, [r4, #12]
 8002aae:	686a      	ldr	r2, [r5, #4]
 8002ab0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	4318      	orrs	r0, r3
 8002ab8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002abc:	60e0      	str	r0, [r4, #12]
 8002abe:	e7d1      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac6:	d1f1      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x78>
 8002ac8:	2001      	movs	r0, #1
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	0391      	lsls	r1, r2, #14
 8002ad0:	d4ec      	bmi.n	8002aac <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ad8:	e7f5      	b.n	8002ac6 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ada:	f7ff f8e1 	bl	8001ca0 <HAL_GetTick>
 8002ade:	1bc0      	subs	r0, r0, r7
 8002ae0:	2802      	cmp	r0, #2
 8002ae2:	d9c6      	bls.n	8002a72 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ae8:	6962      	ldr	r2, [r4, #20]
 8002aea:	68eb      	ldr	r3, [r5, #12]
 8002aec:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002af0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002af4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002afe:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff f8ca 	bl	8001ca0 <HAL_GetTick>
 8002b0c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	d505      	bpl.n	8002b20 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b14:	6963      	ldr	r3, [r4, #20]
 8002b16:	696a      	ldr	r2, [r5, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	6163      	str	r3, [r4, #20]
 8002b1c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b20:	f7ff f8be 	bl	8001ca0 <HAL_GetTick>
 8002b24:	1b80      	subs	r0, r0, r6
 8002b26:	2802      	cmp	r0, #2
 8002b28:	d9f1      	bls.n	8002b0e <RCCEx_PLLSAI2_Config+0xda>
 8002b2a:	e7db      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xb0>
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002b30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b34:	6806      	ldr	r6, [r0, #0]
 8002b36:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002b3a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b3c:	d024      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b3e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002b40:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002b44:	d02c      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002b46:	d802      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b48:	b1c1      	cbz	r1, 8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002b4a:	2601      	movs	r6, #1
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b4e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b54:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002b58:	d1f7      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5a:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b70:	4a47      	ldr	r2, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	68d3      	ldr	r3, [r2, #12]
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	60d3      	str	r3, [r2, #12]
      break;
 8002b7a:	e7ee      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b7c:	3004      	adds	r0, #4
 8002b7e:	f7ff fecb 	bl	8002918 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b82:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d0e8      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	04d8      	lsls	r0, r3, #19
 8002b8c:	d506      	bpl.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b8e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002b90:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002b94:	d074      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002b96:	d808      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b98:	b1a9      	cbz	r1, 8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002b9a:	2601      	movs	r6, #1
 8002b9c:	4635      	mov	r5, r6
 8002b9e:	e021      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	3020      	adds	r0, #32
 8002ba4:	f7ff ff46 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 8002ba8:	e7eb      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002baa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002bae:	d004      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002bb0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002bb4:	d1f1      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002bb6:	4635      	mov	r5, r6
 8002bb8:	e009      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bba:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	68d3      	ldr	r3, [r2, #12]
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
 8002bc4:	e7f7      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc6:	1d20      	adds	r0, r4, #4
 8002bc8:	f7ff fea6 	bl	8002918 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bcc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	d15c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bd2:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002bd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bda:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002bde:	430b      	orrs	r3, r1
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	0399      	lsls	r1, r3, #14
 8002be8:	f140 814f 	bpl.w	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bec:	4f28      	ldr	r7, [pc, #160]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	00da      	lsls	r2, r3, #3
 8002bf2:	f140 8176 	bpl.w	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002bfe:	f8d9 3000 	ldr.w	r3, [r9]
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002c0a:	f7ff f849 	bl	8001ca0 <HAL_GetTick>
 8002c0e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c10:	f8d9 3000 	ldr.w	r3, [r9]
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	d53f      	bpl.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d144      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c20:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c24:	d015      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002c26:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c52:	07d8      	lsls	r0, r3, #31
 8002c54:	d509      	bpl.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002c56:	f7ff f823 	bl	8001ca0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c5e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c64:	0799      	lsls	r1, r3, #30
 8002c66:	f140 8109 	bpl.w	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c6e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c7c:	4635      	mov	r5, r6
 8002c7e:	e012      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c80:	2100      	movs	r1, #0
 8002c82:	f104 0020 	add.w	r0, r4, #32
 8002c86:	f7ff fed5 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 8002c8a:	e79f      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002c8c:	462e      	mov	r6, r5
 8002c8e:	e7a9      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7ff f802 	bl	8001ca0 <HAL_GetTick>
 8002c9c:	eba0 000a 	sub.w	r0, r0, sl
 8002ca0:	2802      	cmp	r0, #2
 8002ca2:	d9b5      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002ca4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002ca6:	f1b8 0f00 	cmp.w	r8, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	07da      	lsls	r2, r3, #31
 8002cb8:	d508      	bpl.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cba:	4990      	ldr	r1, [pc, #576]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002cbc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cbe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cc2:	f022 0203 	bic.w	r2, r2, #3
 8002cc6:	4302      	orrs	r2, r0
 8002cc8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ccc:	079f      	lsls	r7, r3, #30
 8002cce:	d508      	bpl.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd0:	498a      	ldr	r1, [pc, #552]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002cd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cd8:	f022 020c 	bic.w	r2, r2, #12
 8002cdc:	4302      	orrs	r2, r0
 8002cde:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce2:	075e      	lsls	r6, r3, #29
 8002ce4:	d508      	bpl.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce6:	4985      	ldr	r1, [pc, #532]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ce8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002cea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002cf2:	4302      	orrs	r2, r0
 8002cf4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf8:	0718      	lsls	r0, r3, #28
 8002cfa:	d508      	bpl.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfc:	497f      	ldr	r1, [pc, #508]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002cfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002d00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d04:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d08:	4302      	orrs	r2, r0
 8002d0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0e:	06d9      	lsls	r1, r3, #27
 8002d10:	d508      	bpl.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d12:	497a      	ldr	r1, [pc, #488]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002d16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d1e:	4302      	orrs	r2, r0
 8002d20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d24:	069a      	lsls	r2, r3, #26
 8002d26:	d508      	bpl.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d28:	4974      	ldr	r1, [pc, #464]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d2a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d34:	4302      	orrs	r2, r0
 8002d36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3a:	059f      	lsls	r7, r3, #22
 8002d3c:	d508      	bpl.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3e:	496f      	ldr	r1, [pc, #444]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d40:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002d42:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d46:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002d4a:	4302      	orrs	r2, r0
 8002d4c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d50:	055e      	lsls	r6, r3, #21
 8002d52:	d508      	bpl.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d54:	4969      	ldr	r1, [pc, #420]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d56:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002d58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d5c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d60:	4302      	orrs	r2, r0
 8002d62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d66:	0658      	lsls	r0, r3, #25
 8002d68:	d508      	bpl.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6a:	4964      	ldr	r1, [pc, #400]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d6c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002d6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d72:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d76:	4302      	orrs	r2, r0
 8002d78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7c:	0619      	lsls	r1, r3, #24
 8002d7e:	d508      	bpl.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d80:	495e      	ldr	r1, [pc, #376]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d88:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d8c:	4302      	orrs	r2, r0
 8002d8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d92:	05da      	lsls	r2, r3, #23
 8002d94:	d508      	bpl.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d96:	4959      	ldr	r1, [pc, #356]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d9e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002da2:	4302      	orrs	r2, r0
 8002da4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	d50f      	bpl.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002dae:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002db0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002db4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002db8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dc2:	d164      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc4:	68d3      	ldr	r3, [r2, #12]
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	031f      	lsls	r7, r3, #12
 8002dd0:	d50f      	bpl.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd2:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002dd4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002dd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002dda:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002dde:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002de0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002de8:	d15c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dea:	68d3      	ldr	r3, [r2, #12]
 8002dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	035e      	lsls	r6, r3, #13
 8002df6:	d50f      	bpl.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df8:	4a40      	ldr	r2, [pc, #256]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002dfa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002dfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e00:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e04:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e06:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0e:	d154      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	68d3      	ldr	r3, [r2, #12]
 8002e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e16:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	0458      	lsls	r0, r3, #17
 8002e1c:	d512      	bpl.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e1e:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e20:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002e22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e2a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e2c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e34:	d14c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e36:	2102      	movs	r1, #2
 8002e38:	1d20      	adds	r0, r4, #4
 8002e3a:	f7ff fd6d 	bl	8002918 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	bf18      	it	ne
 8002e42:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	0411      	lsls	r1, r2, #16
 8002e48:	d508      	bpl.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e4a:	492c      	ldr	r1, [pc, #176]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e4c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002e4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e56:	4303      	orrs	r3, r0
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e5c:	03d3      	lsls	r3, r2, #15
 8002e5e:	d509      	bpl.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e62:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002e66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002e74:	4628      	mov	r0, r5
 8002e76:	b002      	add	sp, #8
 8002e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe ff10 	bl	8001ca0 <HAL_GetTick>
 8002e80:	1b40      	subs	r0, r0, r5
 8002e82:	4548      	cmp	r0, r9
 8002e84:	f67f aeec 	bls.w	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002e88:	e70c      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002e8a:	4635      	mov	r5, r6
 8002e8c:	e712      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e8e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e92:	d19b      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e94:	2101      	movs	r1, #1
 8002e96:	1d20      	adds	r0, r4, #4
 8002e98:	f7ff fd3e 	bl	8002918 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	bf18      	it	ne
 8002ea0:	4605      	movne	r5, r0
 8002ea2:	e793      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ea4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ea8:	d1a3      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	1d20      	adds	r0, r4, #4
 8002eae:	f7ff fd33 	bl	8002918 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	bf18      	it	ne
 8002eb6:	4605      	movne	r5, r0
 8002eb8:	e79b      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ebe:	d1ab      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	1d20      	adds	r0, r4, #4
 8002ec4:	f7ff fd28 	bl	8002918 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	bf18      	it	ne
 8002ecc:	4605      	movne	r5, r0
 8002ece:	e7a3      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ed0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002ed4:	d1b6      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	f104 0020 	add.w	r0, r4, #32
 8002edc:	f7ff fdaa 	bl	8002a34 <RCCEx_PLLSAI2_Config>
 8002ee0:	e7ad      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ef4:	f04f 0801 	mov.w	r8, #1
 8002ef8:	e67f      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0a:	6842      	ldr	r2, [r0, #4]
 8002f0c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f10:	d10a      	bne.n	8002f28 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002f12:	6882      	ldr	r2, [r0, #8]
 8002f14:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f18:	d002      	beq.n	8002f20 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f1e:	d103      	bne.n	8002f28 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f2e:	d107      	bne.n	8002f40 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f46:	2300      	movs	r3, #0
 8002f48:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	4770      	bx	lr

08002f50 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	460d      	mov	r5, r1
 8002f56:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	6898      	ldr	r0, [r3, #8]
 8002f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f60:	d100      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	1c6a      	adds	r2, r5, #1
 8002f66:	d0f8      	beq.n	8002f5a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f68:	f7fe fe9a 	bl	8001ca0 <HAL_GetTick>
 8002f6c:	1b80      	subs	r0, r0, r6
 8002f6e:	4285      	cmp	r5, r0
 8002f70:	d8f2      	bhi.n	8002f58 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002f72:	4620      	mov	r0, r4
}
 8002f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f78:	f7ff bfc2 	b.w	8002f00 <SPI_WaitFifoStateUntilTimeout.part.1>

08002f7c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	4605      	mov	r5, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	4616      	mov	r6, r2
 8002f84:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002f86:	6829      	ldr	r1, [r5, #0]
 8002f88:	6888      	ldr	r0, [r1, #8]
 8002f8a:	4020      	ands	r0, r4
 8002f8c:	d100      	bne.n	8002f90 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f90:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f94:	bf08      	it	eq
 8002f96:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002f98:	1c73      	adds	r3, r6, #1
 8002f9a:	d0f5      	beq.n	8002f88 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f9c:	f7fe fe80 	bl	8001ca0 <HAL_GetTick>
 8002fa0:	1bc0      	subs	r0, r0, r7
 8002fa2:	4286      	cmp	r6, r0
 8002fa4:	d8ef      	bhi.n	8002f86 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002fa6:	4628      	mov	r0, r5
}
 8002fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002fac:	f7ff bfa8 	b.w	8002f00 <SPI_WaitFifoStateUntilTimeout.part.1>

08002fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb2:	4613      	mov	r3, r2
{
 8002fb4:	460d      	mov	r5, r1
 8002fb6:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb8:	460a      	mov	r2, r1
 8002fba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002fbe:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fc0:	f7ff ffdc 	bl	8002f7c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002fc4:	b128      	cbz	r0, 8002fd2 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
 8002fd0:	e00f      	b.n	8002ff2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff ffba 	bl	8002f50 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1f2      	bne.n	8002fc6 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fe0:	4633      	mov	r3, r6
 8002fe2:	462a      	mov	r2, r5
 8002fe4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff ffc7 	bl	8002f7c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d1e9      	bne.n	8002fc6 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}

08002ff4 <HAL_SPI_MspInit>:
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_SPI_Init>:
{
 8002ff6:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d04a      	beq.n	8003094 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003002:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003006:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800300a:	b91b      	cbnz	r3, 8003014 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800300c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003010:	f7ff fff0 	bl	8002ff4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003014:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003016:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003018:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800301c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800301e:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003024:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003028:	600b      	str	r3, [r1, #0]
 800302a:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800302e:	d92e      	bls.n	800308e <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003030:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003032:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003036:	bf18      	it	ne
 8003038:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800303a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800303c:	b92b      	cbnz	r3, 800304a <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003042:	bf8c      	ite	hi
 8003044:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003046:	2301      	movls	r3, #1
 8003048:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800304a:	68a6      	ldr	r6, [r4, #8]
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	69a5      	ldr	r5, [r4, #24]
 8003050:	4333      	orrs	r3, r6
 8003052:	6926      	ldr	r6, [r4, #16]
 8003054:	4333      	orrs	r3, r6
 8003056:	6966      	ldr	r6, [r4, #20]
 8003058:	4333      	orrs	r3, r6
 800305a:	69e6      	ldr	r6, [r4, #28]
 800305c:	4333      	orrs	r3, r6
 800305e:	6a26      	ldr	r6, [r4, #32]
 8003060:	4333      	orrs	r3, r6
 8003062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003064:	4333      	orrs	r3, r6
 8003066:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800306a:	4333      	orrs	r3, r6
 800306c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800306e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003070:	431a      	orrs	r2, r3
 8003072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003074:	0c2d      	lsrs	r5, r5, #16
 8003076:	431a      	orrs	r2, r3
 8003078:	f005 0504 	and.w	r5, r5, #4
 800307c:	432a      	orrs	r2, r5
 800307e:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003084:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003086:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003088:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800308c:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800308e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003092:	e7d0      	b.n	8003036 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8003094:	2001      	movs	r0, #1
}
 8003096:	bd70      	pop	{r4, r5, r6, pc}

08003098 <HAL_SPI_TransmitReceive>:
{
 8003098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800309c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800309e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80030a2:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80030a4:	2b01      	cmp	r3, #1
{
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80030ac:	f000 8115 	beq.w	80032da <HAL_SPI_TransmitReceive+0x242>
 80030b0:	2301      	movs	r3, #1
 80030b2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80030b6:	f7fe fdf3 	bl	8001ca0 <HAL_GetTick>
  tmp_state           = hspi->State;
 80030ba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80030be:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80030c0:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030c2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80030c4:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030c6:	d00a      	beq.n	80030de <HAL_SPI_TransmitReceive+0x46>
 80030c8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80030cc:	f040 8103 	bne.w	80032d6 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030d0:	68a0      	ldr	r0, [r4, #8]
 80030d2:	2800      	cmp	r0, #0
 80030d4:	f040 80ff 	bne.w	80032d6 <HAL_SPI_TransmitReceive+0x23e>
 80030d8:	2b04      	cmp	r3, #4
 80030da:	f040 80fc 	bne.w	80032d6 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030de:	2d00      	cmp	r5, #0
 80030e0:	d049      	beq.n	8003176 <HAL_SPI_TransmitReceive+0xde>
 80030e2:	f1b9 0f00 	cmp.w	r9, #0
 80030e6:	d046      	beq.n	8003176 <HAL_SPI_TransmitReceive+0xde>
 80030e8:	2e00      	cmp	r6, #0
 80030ea:	d044      	beq.n	8003176 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030f0:	68e2      	ldr	r2, [r4, #12]
 80030f2:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f4:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030f8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030fa:	bf1c      	itt	ne
 80030fc:	2305      	movne	r3, #5
 80030fe:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003102:	2300      	movs	r3, #0
 8003104:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003106:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 800310a:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800310e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003110:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003112:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8003114:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003118:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800311a:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800311c:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800311e:	d801      	bhi.n	8003124 <HAL_SPI_TransmitReceive+0x8c>
 8003120:	2e01      	cmp	r6, #1
 8003122:	d92a      	bls.n	800317a <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003128:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312a:	6803      	ldr	r3, [r0, #0]
 800312c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800312e:	bf5e      	ittt	pl
 8003130:	6803      	ldrpl	r3, [r0, #0]
 8003132:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003136:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003138:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800313c:	d956      	bls.n	80031ec <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313e:	b109      	cbz	r1, 8003144 <HAL_SPI_TransmitReceive+0xac>
 8003140:	2e01      	cmp	r6, #1
 8003142:	d107      	bne.n	8003154 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003144:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003148:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800314a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800314c:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800314e:	3b01      	subs	r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003154:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003156:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003158:	b29b      	uxth	r3, r3
 800315a:	b98b      	cbnz	r3, 8003180 <HAL_SPI_TransmitReceive+0xe8>
 800315c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003160:	b29b      	uxth	r3, r3
 8003162:	b96b      	cbnz	r3, 8003180 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003164:	4642      	mov	r2, r8
 8003166:	4639      	mov	r1, r7
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff ff21 	bl	8002fb0 <SPI_EndRxTxTransaction>
 800316e:	2800      	cmp	r0, #0
 8003170:	d034      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003172:	2320      	movs	r3, #32
 8003174:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003176:	2001      	movs	r0, #1
 8003178:	e030      	b.n	80031dc <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800317a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317e:	e7d3      	b.n	8003128 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	6893      	ldr	r3, [r2, #8]
 8003184:	0799      	lsls	r1, r3, #30
 8003186:	d50d      	bpl.n	80031a4 <HAL_SPI_TransmitReceive+0x10c>
 8003188:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	b153      	cbz	r3, 80031a4 <HAL_SPI_TransmitReceive+0x10c>
 800318e:	b14d      	cbz	r5, 80031a4 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003192:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003196:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800319a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800319c:	3b01      	subs	r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80031a2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031a4:	6893      	ldr	r3, [r2, #8]
 80031a6:	07db      	lsls	r3, r3, #31
 80031a8:	d50f      	bpl.n	80031ca <HAL_SPI_TransmitReceive+0x132>
 80031aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	b15b      	cbz	r3, 80031ca <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ba:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80031bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80031c8:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031ca:	f7fe fd69 	bl	8001ca0 <HAL_GetTick>
 80031ce:	eba0 0008 	sub.w	r0, r0, r8
 80031d2:	4287      	cmp	r7, r0
 80031d4:	d8bf      	bhi.n	8003156 <HAL_SPI_TransmitReceive+0xbe>
 80031d6:	1c7e      	adds	r6, r7, #1
 80031d8:	d0bd      	beq.n	8003156 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80031dc:	2301      	movs	r3, #1
 80031de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80031e2:	2300      	movs	r3, #0
 80031e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80031e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ec:	b109      	cbz	r1, 80031f2 <HAL_SPI_TransmitReceive+0x15a>
 80031ee:	2e01      	cmp	r6, #1
 80031f0:	d10b      	bne.n	800320a <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80031f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d951      	bls.n	800329e <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80031fe:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8003200:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003202:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003204:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003206:	b29b      	uxth	r3, r3
 8003208:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800320a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800320e:	b29b      	uxth	r3, r3
 8003210:	b923      	cbnz	r3, 800321c <HAL_SPI_TransmitReceive+0x184>
 8003212:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0a3      	beq.n	8003164 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	6893      	ldr	r3, [r2, #8]
 8003220:	0798      	lsls	r0, r3, #30
 8003222:	d511      	bpl.n	8003248 <HAL_SPI_TransmitReceive+0x1b0>
 8003224:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	b173      	cbz	r3, 8003248 <HAL_SPI_TransmitReceive+0x1b0>
 800322a:	b16d      	cbz	r5, 8003248 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 800322c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003234:	d93b      	bls.n	80032ae <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	f833 1b02 	ldrh.w	r1, [r3], #2
 800323a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800323c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800323e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003240:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003242:	b29b      	uxth	r3, r3
 8003244:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003246:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	6893      	ldr	r3, [r2, #8]
 800324c:	07d9      	lsls	r1, r3, #31
 800324e:	d51d      	bpl.n	800328c <HAL_SPI_TransmitReceive+0x1f4>
 8003250:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003254:	b29b      	uxth	r3, r3
 8003256:	b1cb      	cbz	r3, 800328c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8003258:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003262:	d92c      	bls.n	80032be <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003264:	68d1      	ldr	r1, [r2, #12]
 8003266:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800326a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800326c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003270:	3b02      	subs	r3, #2
 8003272:	b29b      	uxth	r3, r3
 8003274:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003278:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d803      	bhi.n	800328a <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003282:	6853      	ldr	r3, [r2, #4]
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800328a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800328c:	f7fe fd08 	bl	8001ca0 <HAL_GetTick>
 8003290:	eba0 0008 	sub.w	r0, r0, r8
 8003294:	4287      	cmp	r7, r0
 8003296:	d8b9      	bhi.n	800320c <HAL_SPI_TransmitReceive+0x174>
 8003298:	1c7b      	adds	r3, r7, #1
 800329a:	d0b7      	beq.n	800320c <HAL_SPI_TransmitReceive+0x174>
 800329c:	e79d      	b.n	80031da <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800329e:	782b      	ldrb	r3, [r5, #0]
 80032a0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 80032a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a4:	3301      	adds	r3, #1
 80032a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80032a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032aa:	3b01      	subs	r3, #1
 80032ac:	e7ab      	b.n	8003206 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80032b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032b4:	3301      	adds	r3, #1
 80032b6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80032b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ba:	3b01      	subs	r3, #1
 80032bc:	e7c1      	b.n	8003242 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032be:	7b12      	ldrb	r2, [r2, #12]
 80032c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032c4:	3301      	adds	r3, #1
 80032c6:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80032c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80032d4:	e7d9      	b.n	800328a <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 80032d6:	2002      	movs	r0, #2
 80032d8:	e780      	b.n	80031dc <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 80032da:	2002      	movs	r0, #2
}
 80032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080032e0 <HAL_SPI_GetState>:
  return hspi->State;
 80032e0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_Base_MspInit>:
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f2:	6899      	ldr	r1, [r3, #8]
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_TIM_Base_Start_IT+0x28>)
 80032f6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	2a06      	cmp	r2, #6
 80032fa:	d006      	beq.n	800330a <HAL_TIM_Base_Start_IT+0x22>
 80032fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8003300:	bf1e      	ittt	ne
 8003302:	681a      	ldrne	r2, [r3, #0]
 8003304:	f042 0201 	orrne.w	r2, r2, #1
 8003308:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800330a:	2000      	movs	r0, #0
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	00010007 	.word	0x00010007

08003314 <HAL_TIM_OC_DelayElapsedCallback>:
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_TriggerCallback>:
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800331c:	6803      	ldr	r3, [r0, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	0791      	lsls	r1, r2, #30
{
 8003322:	b510      	push	{r4, lr}
 8003324:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003326:	d50f      	bpl.n	8003348 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	0792      	lsls	r2, r2, #30
 800332c:	d50c      	bpl.n	8003348 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332e:	f06f 0202 	mvn.w	r2, #2
 8003332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003334:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	f000 8085 	beq.w	800344a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003340:	f7ff ffe9 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003344:	2300      	movs	r3, #0
 8003346:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	0752      	lsls	r2, r2, #29
 800334e:	d510      	bpl.n	8003372 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	0750      	lsls	r0, r2, #29
 8003354:	d50d      	bpl.n	8003372 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003356:	f06f 0204 	mvn.w	r2, #4
 800335a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003364:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003368:	d075      	beq.n	8003456 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	f7ff ffd4 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	2300      	movs	r3, #0
 8003370:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	0711      	lsls	r1, r2, #28
 8003378:	d50f      	bpl.n	800339a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	0712      	lsls	r2, r2, #28
 800337e:	d50c      	bpl.n	800339a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003380:	f06f 0208 	mvn.w	r2, #8
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003386:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003388:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800338a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003390:	d067      	beq.n	8003462 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	f7ff ffc0 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	2300      	movs	r3, #0
 8003398:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	06d0      	lsls	r0, r2, #27
 80033a0:	d510      	bpl.n	80033c4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	06d1      	lsls	r1, r2, #27
 80033a6:	d50d      	bpl.n	80033c4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ba:	d058      	beq.n	800346e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80033bc:	f7ff ffab 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c0:	2300      	movs	r3, #0
 80033c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	07d2      	lsls	r2, r2, #31
 80033ca:	d508      	bpl.n	80033de <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	07d0      	lsls	r0, r2, #31
 80033d0:	d505      	bpl.n	80033de <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d2:	f06f 0201 	mvn.w	r2, #1
 80033d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d8:	4620      	mov	r0, r4
 80033da:	f003 fa83 	bl	80068e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	0611      	lsls	r1, r2, #24
 80033e4:	d508      	bpl.n	80033f8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	0612      	lsls	r2, r2, #24
 80033ea:	d505      	bpl.n	80033f8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 f8c3 	bl	800357e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	05d0      	lsls	r0, r2, #23
 80033fe:	d508      	bpl.n	8003412 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	0611      	lsls	r1, r2, #24
 8003404:	d505      	bpl.n	8003412 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800340a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800340c:	4620      	mov	r0, r4
 800340e:	f000 f8b7 	bl	8003580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	0652      	lsls	r2, r2, #25
 8003418:	d508      	bpl.n	800342c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	0650      	lsls	r0, r2, #25
 800341e:	d505      	bpl.n	800342c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff ff77 	bl	800331a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	0691      	lsls	r1, r2, #26
 8003432:	d522      	bpl.n	800347a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	0692      	lsls	r2, r2, #26
 8003438:	d51f      	bpl.n	800347a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800343a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003440:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003446:	f000 b899 	b.w	800357c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	f7ff ff63 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff62 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
 8003454:	e776      	b.n	8003344 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	f7ff ff5d 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	4620      	mov	r0, r4
 800345c:	f7ff ff5c 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
 8003460:	e785      	b.n	800336e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	f7ff ff57 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff ff56 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
 800346c:	e793      	b.n	8003396 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	f7ff ff51 	bl	8003314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff ff50 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
 8003478:	e7a2      	b.n	80033c0 <HAL_TIM_IRQHandler+0xa4>
 800347a:	bd10      	pop	{r4, pc}

0800347c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347c:	4a30      	ldr	r2, [pc, #192]	; (8003540 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800347e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	4290      	cmp	r0, r2
 8003482:	d012      	beq.n	80034aa <TIM_Base_SetConfig+0x2e>
 8003484:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0x2e>
 800348a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800348e:	4290      	cmp	r0, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0x2e>
 8003492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003496:	4290      	cmp	r0, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0x2e>
 800349a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800349e:	4290      	cmp	r0, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0x2e>
 80034a2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80034a6:	4290      	cmp	r0, r2
 80034a8:	d119      	bne.n	80034de <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80034aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	4a23      	ldr	r2, [pc, #140]	; (8003540 <TIM_Base_SetConfig+0xc4>)
 80034b4:	4290      	cmp	r0, r2
 80034b6:	d01d      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034bc:	d01a      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80034c2:	4290      	cmp	r0, r2
 80034c4:	d016      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ca:	4290      	cmp	r0, r2
 80034cc:	d012      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034d2:	4290      	cmp	r0, r2
 80034d4:	d00e      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034d6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80034da:	4290      	cmp	r0, r2
 80034dc:	d00a      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <TIM_Base_SetConfig+0xc8>)
 80034e0:	4290      	cmp	r0, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e8:	4290      	cmp	r0, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x78>
 80034ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034f0:	4290      	cmp	r0, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	694a      	ldr	r2, [r1, #20]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003502:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003504:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003506:	688b      	ldr	r3, [r1, #8]
 8003508:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350a:	680b      	ldr	r3, [r1, #0]
 800350c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <TIM_Base_SetConfig+0xc4>)
 8003510:	4298      	cmp	r0, r3
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0xb8>
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	4298      	cmp	r0, r3
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0xb8>
 800351c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003520:	4298      	cmp	r0, r3
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0xb8>
 8003524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003528:	4298      	cmp	r0, r3
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0xb8>
 800352c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003530:	4298      	cmp	r0, r3
 8003532:	d101      	bne.n	8003538 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	690b      	ldr	r3, [r1, #16]
 8003536:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	2301      	movs	r3, #1
 800353a:	6143      	str	r3, [r0, #20]
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40014000 	.word	0x40014000

08003548 <HAL_TIM_Base_Init>:
{
 8003548:	b510      	push	{r4, lr}
  if (htim == NULL)
 800354a:	4604      	mov	r4, r0
 800354c:	b1a0      	cbz	r0, 8003578 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800354e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003552:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003556:	b91b      	cbnz	r3, 8003560 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003558:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800355c:	f7ff fec3 	bl	80032e6 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	1d21      	adds	r1, r4, #4
 800356a:	f7ff ff87 	bl	800347c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800356e:	2301      	movs	r3, #1
 8003570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003574:	2000      	movs	r0, #0
 8003576:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003578:	2001      	movs	r0, #1
}
 800357a:	bd10      	pop	{r4, pc}

0800357c <HAL_TIMEx_CommutCallback>:
 800357c:	4770      	bx	lr

0800357e <HAL_TIMEx_BreakCallback>:
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003580:	4770      	bx	lr
	...

08003584 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003584:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003586:	69c1      	ldr	r1, [r0, #28]
{
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358c:	6883      	ldr	r3, [r0, #8]
 800358e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003590:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003592:	4303      	orrs	r3, r0
 8003594:	6960      	ldr	r0, [r4, #20]
 8003596:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	48ba      	ldr	r0, [pc, #744]	; (8003884 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800359c:	4028      	ands	r0, r5
 800359e:	4303      	orrs	r3, r0
 80035a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a2:	6853      	ldr	r3, [r2, #4]
 80035a4:	68e0      	ldr	r0, [r4, #12]
 80035a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035aa:	4303      	orrs	r3, r0
 80035ac:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ae:	4bb6      	ldr	r3, [pc, #728]	; (8003888 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b4:	bf1c      	itt	ne
 80035b6:	6a23      	ldrne	r3, [r4, #32]
 80035b8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ba:	6893      	ldr	r3, [r2, #8]
 80035bc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035c0:	4303      	orrs	r3, r0
 80035c2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c4:	4bb1      	ldr	r3, [pc, #708]	; (800388c <UART_SetConfig+0x308>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d119      	bne.n	80035fe <UART_SetConfig+0x7a>
 80035ca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035ce:	4ab0      	ldr	r2, [pc, #704]	; (8003890 <UART_SetConfig+0x30c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	f040 8138 	bne.w	8003852 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	f200 808f 	bhi.w	8003706 <UART_SetConfig+0x182>
 80035e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035ec:	00ca011a 	.word	0x00ca011a
 80035f0:	008d00f9 	.word	0x008d00f9
 80035f4:	008d0114 	.word	0x008d0114
 80035f8:	008d008d 	.word	0x008d008d
 80035fc:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fe:	4ba5      	ldr	r3, [pc, #660]	; (8003894 <UART_SetConfig+0x310>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <UART_SetConfig+0x90>
 8003604:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003608:	4aa3      	ldr	r2, [pc, #652]	; (8003898 <UART_SetConfig+0x314>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	e7e1      	b.n	80035d8 <UART_SetConfig+0x54>
 8003614:	4ba1      	ldr	r3, [pc, #644]	; (800389c <UART_SetConfig+0x318>)
 8003616:	429a      	cmp	r2, r3
 8003618:	d123      	bne.n	8003662 <UART_SetConfig+0xde>
 800361a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003626:	2b10      	cmp	r3, #16
 8003628:	f000 80f1 	beq.w	800380e <UART_SetConfig+0x28a>
 800362c:	d80b      	bhi.n	8003646 <UART_SetConfig+0xc2>
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80f3 	beq.w	800381a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003634:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8003638:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800363c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003640:	f000 80f8 	beq.w	8003834 <UART_SetConfig+0x2b0>
 8003644:	e0a8      	b.n	8003798 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003646:	2b20      	cmp	r3, #32
 8003648:	f000 80c6 	beq.w	80037d8 <UART_SetConfig+0x254>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d1f1      	bne.n	8003634 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003650:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003654:	f040 80b8 	bne.w	80037c8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003658:	6860      	ldr	r0, [r4, #4]
 800365a:	0843      	lsrs	r3, r0, #1
 800365c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003660:	e0c3      	b.n	80037ea <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003662:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <UART_SetConfig+0x31c>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d11e      	bne.n	80036a6 <UART_SetConfig+0x122>
 8003668:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	f000 80bb 	beq.w	80037f0 <UART_SetConfig+0x26c>
 800367a:	d80a      	bhi.n	8003692 <UART_SetConfig+0x10e>
 800367c:	b97b      	cbnz	r3, 800369e <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800367e:	4b82      	ldr	r3, [pc, #520]	; (8003888 <UART_SetConfig+0x304>)
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 80ca 	bne.w	800381a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003686:	f7ff f905 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
        break;
 800368a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800368c:	bbb0      	cbnz	r0, 80036fc <UART_SetConfig+0x178>
 800368e:	4602      	mov	r2, r0
 8003690:	e03a      	b.n	8003708 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	f000 809d 	beq.w	80037d2 <UART_SetConfig+0x24e>
 8003698:	2bc0      	cmp	r3, #192	; 0xc0
 800369a:	f000 80b0 	beq.w	80037fe <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800369e:	4b7a      	ldr	r3, [pc, #488]	; (8003888 <UART_SetConfig+0x304>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1c7      	bne.n	8003634 <UART_SetConfig+0xb0>
 80036a4:	e02f      	b.n	8003706 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <UART_SetConfig+0x320>)
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d111      	bne.n	80036d0 <UART_SetConfig+0x14c>
 80036ac:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036bc:	f000 8098 	beq.w	80037f0 <UART_SetConfig+0x26c>
 80036c0:	d9dc      	bls.n	800367c <UART_SetConfig+0xf8>
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c6:	f000 8084 	beq.w	80037d2 <UART_SetConfig+0x24e>
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	e7e4      	b.n	800369a <UART_SetConfig+0x116>
 80036d0:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <UART_SetConfig+0x304>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d1ae      	bne.n	8003634 <UART_SetConfig+0xb0>
 80036d6:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	f000 8083 	beq.w	80037f0 <UART_SetConfig+0x26c>
 80036ea:	d9c7      	bls.n	800367c <UART_SetConfig+0xf8>
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f0:	d06f      	beq.n	80037d2 <UART_SetConfig+0x24e>
 80036f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036f6:	e7d0      	b.n	800369a <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80036f8:	486b      	ldr	r0, [pc, #428]	; (80038a8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80036fa:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036fc:	6862      	ldr	r2, [r4, #4]
 80036fe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003702:	4281      	cmp	r1, r0
 8003704:	d905      	bls.n	8003712 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003706:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800370c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800370e:	4610      	mov	r0, r2
 8003710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003712:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003716:	d8f6      	bhi.n	8003706 <UART_SetConfig+0x182>
        switch (clocksource)
 8003718:	2b08      	cmp	r3, #8
 800371a:	d82e      	bhi.n	800377a <UART_SetConfig+0x1f6>
 800371c:	e8df f003 	tbb	[pc, r3]
 8003720:	2d1c2d05 	.word	0x2d1c2d05
 8003724:	2d2d2d24 	.word	0x2d2d2d24
 8003728:	27          	.byte	0x27
 8003729:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 800372a:	f7ff f8b3 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003734:	0856      	lsrs	r6, r2, #1
 8003736:	2700      	movs	r7, #0
 8003738:	fbe1 6700 	umlal	r6, r7, r1, r0
 800373c:	2300      	movs	r3, #0
 800373e:	4630      	mov	r0, r6
 8003740:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003742:	f7fd f987 	bl	8000a54 <__aeabi_uldivmod>
            break;
 8003746:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003748:	4b58      	ldr	r3, [pc, #352]	; (80038ac <UART_SetConfig+0x328>)
 800374a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800374e:	4299      	cmp	r1, r3
 8003750:	d8d9      	bhi.n	8003706 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	60d8      	str	r0, [r3, #12]
 8003756:	e7d7      	b.n	8003708 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003758:	4855      	ldr	r0, [pc, #340]	; (80038b0 <UART_SetConfig+0x32c>)
 800375a:	0855      	lsrs	r5, r2, #1
 800375c:	2300      	movs	r3, #0
 800375e:	2100      	movs	r1, #0
 8003760:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003762:	f141 0100 	adc.w	r1, r1, #0
 8003766:	e7ec      	b.n	8003742 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 8003768:	f7fe fd24 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800376c:	e7df      	b.n	800372e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800376e:	0850      	lsrs	r0, r2, #1
 8003770:	2100      	movs	r1, #0
 8003772:	2300      	movs	r3, #0
 8003774:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003778:	e7f3      	b.n	8003762 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800377a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800377c:	2000      	movs	r0, #0
 800377e:	e7e3      	b.n	8003748 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7ff f89a 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8003784:	e04e      	b.n	8003824 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003786:	f7ff f885 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003790:	fbb3 f3f2 	udiv	r3, r3, r2
 8003794:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003796:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	f1a3 0010 	sub.w	r0, r3, #16
 800379c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80037a0:	4288      	cmp	r0, r1
 80037a2:	d8b0      	bhi.n	8003706 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80037a4:	6821      	ldr	r1, [r4, #0]
 80037a6:	60cb      	str	r3, [r1, #12]
 80037a8:	e7ae      	b.n	8003708 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037aa:	f7ff f885 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 80037ae:	e7ec      	b.n	800378a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80037b0:	6860      	ldr	r0, [r4, #4]
 80037b2:	0843      	lsrs	r3, r0, #1
 80037b4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037b8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80037c0:	e7e8      	b.n	8003794 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 80037c2:	f7fe fcf7 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 80037c6:	e7e0      	b.n	800378a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037c8:	6860      	ldr	r0, [r4, #4]
 80037ca:	0843      	lsrs	r3, r0, #1
 80037cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037d0:	e7f4      	b.n	80037bc <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037d2:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <UART_SetConfig+0x304>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d08f      	beq.n	80036f8 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037dc:	d1e8      	bne.n	80037b0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037de:	6860      	ldr	r0, [r4, #4]
 80037e0:	0843      	lsrs	r3, r0, #1
 80037e2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80037ee:	e01f      	b.n	8003830 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <UART_SetConfig+0x304>)
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10b      	bne.n	800380e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037f6:	f7fe fcdd 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
        break;
 80037fa:	2304      	movs	r3, #4
 80037fc:	e746      	b.n	800368c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <UART_SetConfig+0x304>)
 8003800:	429a      	cmp	r2, r3
 8003802:	f47f af25 	bne.w	8003650 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003806:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800380a:	2308      	movs	r3, #8
 800380c:	e776      	b.n	80036fc <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003812:	d1d6      	bne.n	80037c2 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003814:	f7fe fcce 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800381e:	d1b2      	bne.n	8003786 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff f838 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	084a      	lsrs	r2, r1, #1
 8003828:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800382c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003830:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003832:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003834:	f1a3 0010 	sub.w	r0, r3, #16
 8003838:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800383c:	4288      	cmp	r0, r1
 800383e:	f63f af62 	bhi.w	8003706 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003842:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003846:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003848:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800384c:	430b      	orrs	r3, r1
 800384e:	60c3      	str	r3, [r0, #12]
 8003850:	e75a      	b.n	8003708 <UART_SetConfig+0x184>
    switch (clocksource)
 8003852:	2b08      	cmp	r3, #8
 8003854:	f63f af57 	bhi.w	8003706 <UART_SetConfig+0x182>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x2dc>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003787 	.word	0x08003787
 8003864:	080037ab 	.word	0x080037ab
 8003868:	080037b1 	.word	0x080037b1
 800386c:	08003707 	.word	0x08003707
 8003870:	080037c3 	.word	0x080037c3
 8003874:	08003707 	.word	0x08003707
 8003878:	08003707 	.word	0x08003707
 800387c:	08003707 	.word	0x08003707
 8003880:	080037c9 	.word	0x080037c9
 8003884:	efff69f3 	.word	0xefff69f3
 8003888:	40008000 	.word	0x40008000
 800388c:	40013800 	.word	0x40013800
 8003890:	0800879d 	.word	0x0800879d
 8003894:	40004400 	.word	0x40004400
 8003898:	080087a1 	.word	0x080087a1
 800389c:	40004800 	.word	0x40004800
 80038a0:	40004c00 	.word	0x40004c00
 80038a4:	40005000 	.word	0x40005000
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	000ffcff 	.word	0x000ffcff
 80038b0:	f4240000 	.word	0xf4240000

080038b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b6:	07da      	lsls	r2, r3, #31
{
 80038b8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ba:	d506      	bpl.n	80038ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80038c0:	684a      	ldr	r2, [r1, #4]
 80038c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038c6:	4322      	orrs	r2, r4
 80038c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ca:	079c      	lsls	r4, r3, #30
 80038cc:	d506      	bpl.n	80038dc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	6801      	ldr	r1, [r0, #0]
 80038d0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038d2:	684a      	ldr	r2, [r1, #4]
 80038d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038d8:	4322      	orrs	r2, r4
 80038da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038dc:	0759      	lsls	r1, r3, #29
 80038de:	d506      	bpl.n	80038ee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e0:	6801      	ldr	r1, [r0, #0]
 80038e2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038e4:	684a      	ldr	r2, [r1, #4]
 80038e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ea:	4322      	orrs	r2, r4
 80038ec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	071a      	lsls	r2, r3, #28
 80038f0:	d506      	bpl.n	8003900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f2:	6801      	ldr	r1, [r0, #0]
 80038f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038f6:	684a      	ldr	r2, [r1, #4]
 80038f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fc:	4322      	orrs	r2, r4
 80038fe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003900:	06dc      	lsls	r4, r3, #27
 8003902:	d506      	bpl.n	8003912 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003904:	6801      	ldr	r1, [r0, #0]
 8003906:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003908:	688a      	ldr	r2, [r1, #8]
 800390a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800390e:	4322      	orrs	r2, r4
 8003910:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003912:	0699      	lsls	r1, r3, #26
 8003914:	d506      	bpl.n	8003924 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003916:	6801      	ldr	r1, [r0, #0]
 8003918:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800391a:	688a      	ldr	r2, [r1, #8]
 800391c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003920:	4322      	orrs	r2, r4
 8003922:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	065a      	lsls	r2, r3, #25
 8003926:	d50f      	bpl.n	8003948 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003928:	6801      	ldr	r1, [r0, #0]
 800392a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800392c:	684a      	ldr	r2, [r1, #4]
 800392e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003932:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003934:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003938:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	d105      	bne.n	8003948 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800393c:	684a      	ldr	r2, [r1, #4]
 800393e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003940:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003944:	4322      	orrs	r2, r4
 8003946:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	d506      	bpl.n	800395a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800394c:	6802      	ldr	r2, [r0, #0]
 800394e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003950:	6853      	ldr	r3, [r2, #4]
 8003952:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003956:	430b      	orrs	r3, r1
 8003958:	6053      	str	r3, [r2, #4]
 800395a:	bd10      	pop	{r4, pc}

0800395c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003960:	9d06      	ldr	r5, [sp, #24]
 8003962:	4604      	mov	r4, r0
 8003964:	460f      	mov	r7, r1
 8003966:	4616      	mov	r6, r2
 8003968:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	6821      	ldr	r1, [r4, #0]
 800396c:	69ca      	ldr	r2, [r1, #28]
 800396e:	ea37 0302 	bics.w	r3, r7, r2
 8003972:	bf0c      	ite	eq
 8003974:	2201      	moveq	r2, #1
 8003976:	2200      	movne	r2, #0
 8003978:	42b2      	cmp	r2, r6
 800397a:	d002      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2000      	movs	r0, #0
}
 800397e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003982:	1c68      	adds	r0, r5, #1
 8003984:	d0f2      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fe f98b 	bl	8001ca0 <HAL_GetTick>
 800398a:	eba0 0008 	sub.w	r0, r0, r8
 800398e:	4285      	cmp	r5, r0
 8003990:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003992:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	d300      	bcc.n	8003998 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003996:	b97d      	cbnz	r5, 80039b8 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800399c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399e:	6883      	ldr	r3, [r0, #8]
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80039a6:	2320      	movs	r3, #32
 80039a8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039aa:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80039ac:	2300      	movs	r3, #0
 80039ae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80039b2:	2003      	movs	r0, #3
 80039b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b8:	075a      	lsls	r2, r3, #29
 80039ba:	d5d6      	bpl.n	800396a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039bc:	69c3      	ldr	r3, [r0, #28]
 80039be:	051b      	lsls	r3, r3, #20
 80039c0:	d5d3      	bpl.n	800396a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039c6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ce:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	6883      	ldr	r3, [r0, #8]
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80039d8:	2320      	movs	r3, #32
 80039da:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039dc:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039de:	67e3      	str	r3, [r4, #124]	; 0x7c
 80039e0:	e7e4      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0x50>

080039e2 <HAL_UART_Transmit>:
{
 80039e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039e6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80039e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80039ea:	2b20      	cmp	r3, #32
{
 80039ec:	4604      	mov	r4, r0
 80039ee:	460e      	mov	r6, r1
 80039f0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80039f2:	d14c      	bne.n	8003a8e <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d048      	beq.n	8003a8a <HAL_UART_Transmit+0xa8>
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d046      	beq.n	8003a8a <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80039fc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d044      	beq.n	8003a8e <HAL_UART_Transmit+0xac>
 8003a04:	2301      	movs	r3, #1
 8003a06:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0e:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003a12:	f7fe f945 	bl	8001ca0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a16:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003a18:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003a20:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003a22:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a26:	d103      	bne.n	8003a30 <HAL_UART_Transmit+0x4e>
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	b90b      	cbnz	r3, 8003a30 <HAL_UART_Transmit+0x4e>
 8003a2c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003a2e:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8003a36:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003a3e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a40:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003a42:	b93a      	cbnz	r2, 8003a54 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ff88 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 8003a4c:	b940      	cbnz	r0, 8003a60 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8003a52:	e006      	b.n	8003a62 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ff7f 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 8003a5e:	b118      	cbz	r0, 8003a68 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8003a60:	2003      	movs	r0, #3
}
 8003a62:	b003      	add	sp, #12
 8003a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a68:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003a6a:	b95e      	cbnz	r6, 8003a84 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a6c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a74:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003a76:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003a82:	e7d8      	b.n	8003a36 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a84:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a88:	e7f4      	b.n	8003a74 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e7e9      	b.n	8003a62 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003a8e:	2002      	movs	r0, #2
 8003a90:	e7e7      	b.n	8003a62 <HAL_UART_Transmit+0x80>

08003a92 <UART_CheckIdleState>:
{
 8003a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a94:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	2600      	movs	r6, #0
 8003a98:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003a9a:	f7fe f901 	bl	8001ca0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003aa4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa6:	d415      	bmi.n	8003ad4 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	075b      	lsls	r3, r3, #29
 8003aae:	d50a      	bpl.n	8003ac6 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff ff4c 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 8003ac4:	b990      	cbnz	r0, 8003aec <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003ac8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003aca:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8003acc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8003ad2:	e00c      	b.n	8003aee <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4632      	mov	r2, r6
 8003adc:	4603      	mov	r3, r0
 8003ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff ff3a 	bl	800395c <UART_WaitOnFlagUntilTimeout>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d0dd      	beq.n	8003aa8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003aec:	2003      	movs	r0, #3
}
 8003aee:	b002      	add	sp, #8
 8003af0:	bd70      	pop	{r4, r5, r6, pc}

08003af2 <HAL_UART_Init>:
{
 8003af2:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003af4:	4604      	mov	r4, r0
 8003af6:	b340      	cbz	r0, 8003b4a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003af8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003afa:	b91b      	cbnz	r3, 8003b04 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003afc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003b00:	f003 f8c6 	bl	8006c90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003b04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b06:	2324      	movs	r3, #36	; 0x24
 8003b08:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff fd36 	bl	8003584 <UART_SetConfig>
 8003b18:	2801      	cmp	r0, #1
 8003b1a:	d016      	beq.n	8003b4a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b1e:	b113      	cbz	r3, 8003b26 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff fec7 	bl	80038b4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b36:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b3e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b46:	f7ff bfa4 	b.w	8003a92 <UART_CheckIdleState>
}
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003b4e:	b570      	push	{r4, r5, r6, lr}
 8003b50:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b52:	2400      	movs	r4, #0
  cp.role = role;
 8003b54:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 8003b58:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 8003b5c:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b60:	4621      	mov	r1, r4
 8003b62:	2218      	movs	r2, #24
 8003b64:	a804      	add	r0, sp, #16
{
 8003b66:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b68:	9402      	str	r4, [sp, #8]
 8003b6a:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b6e:	f003 fd06 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003b72:	233f      	movs	r3, #63	; 0x3f
 8003b74:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003b78:	238a      	movs	r3, #138	; 0x8a
 8003b7a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003b7e:	ab01      	add	r3, sp, #4
 8003b80:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003b82:	2303      	movs	r3, #3
 8003b84:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b86:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003b88:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003b8e:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003b92:	f000 fa79 	bl	8004088 <hci_send_req>
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	db15      	blt.n	8003bc6 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003b9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b9e:	b980      	cbnz	r0, 8003bc2 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003ba0:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003ba2:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8003ba6:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003baa:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003bac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003bb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bb6:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bbc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003bc0:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8003bc2:	b00a      	add	sp, #40	; 0x28
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003bc6:	20ff      	movs	r0, #255	; 0xff
 8003bc8:	e7fb      	b.n	8003bc2 <aci_gap_init_IDB05A1+0x74>

08003bca <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003bd0:	2400      	movs	r4, #0
  cp.role = role;
 8003bd2:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8003bd6:	4688      	mov	r8, r1
 8003bd8:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bda:	4621      	mov	r1, r4
 8003bdc:	2218      	movs	r2, #24
 8003bde:	a804      	add	r0, sp, #16
{
 8003be0:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003be2:	9402      	str	r4, [sp, #8]
 8003be4:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003be8:	f003 fcc9 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003bec:	233f      	movs	r3, #63	; 0x3f
 8003bee:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003bf2:	238a      	movs	r3, #138	; 0x8a
 8003bf4:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003bf8:	ab01      	add	r3, sp, #4
 8003bfa:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003c00:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003c02:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003c04:	4621      	mov	r1, r4
 8003c06:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003c08:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003c0a:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003c0c:	f000 fa3c 	bl	8004088 <hci_send_req>
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	db15      	blt.n	8003c40 <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003c14:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003c18:	b978      	cbnz	r0, 8003c3a <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003c1a:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003c1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 8003c20:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003c24:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003c28:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003c2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c30:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003c32:	9a03      	ldr	r2, [sp, #12]
 8003c34:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003c38:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 8003c3a:	b00a      	add	sp, #40	; 0x28
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8003c40:	20ff      	movs	r0, #255	; 0xff
 8003c42:	e7fa      	b.n	8003c3a <aci_gap_init_IDB04A1+0x70>

08003c44 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003c44:	b510      	push	{r4, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003c48:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8003c4c:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003c50:	f102 0010 	add.w	r0, r2, #16
 8003c54:	f10d 011e 	add.w	r1, sp, #30
 8003c58:	f852 4b04 	ldr.w	r4, [r2], #4
 8003c5c:	f841 4b04 	str.w	r4, [r1], #4
 8003c60:	4282      	cmp	r2, r0
 8003c62:	d1f9      	bne.n	8003c58 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8003c64:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8003c68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003c6c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8003c70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003c74:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8003c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c7a:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003c7e:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8003c80:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003c84:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003c88:	2100      	movs	r1, #0
 8003c8a:	a801      	add	r0, sp, #4
 8003c8c:	f003 fc77 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003c90:	233f      	movs	r3, #63	; 0x3f
 8003c92:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8003c96:	2386      	movs	r3, #134	; 0x86
 8003c98:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8003c9c:	ab07      	add	r3, sp, #28
 8003c9e:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8003ca0:	231a      	movs	r3, #26
 8003ca2:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8003ca4:	f10d 0303 	add.w	r3, sp, #3
 8003ca8:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003caa:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003cac:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003cae:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8003cb0:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003cb2:	f000 f9e9 	bl	8004088 <hci_send_req>
 8003cb6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003cb8:	bfac      	ite	ge
 8003cba:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003cbe:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8003cc0:	b00e      	add	sp, #56	; 0x38
 8003cc2:	bd10      	pop	{r4, pc}

08003cc4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003cc4:	b500      	push	{lr}
 8003cc6:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003cc8:	2218      	movs	r2, #24
 8003cca:	2100      	movs	r1, #0
 8003ccc:	a802      	add	r0, sp, #8
 8003cce:	f003 fc56 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003cd2:	233f      	movs	r3, #63	; 0x3f
 8003cd4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8003cd8:	f240 1301 	movw	r3, #257	; 0x101
 8003cdc:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003ce0:	f10d 0307 	add.w	r3, sp, #7
 8003ce4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003ce6:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003ce8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003cea:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003cec:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003cee:	f000 f9cb 	bl	8004088 <hci_send_req>
 8003cf2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003cf4:	bfac      	ite	ge
 8003cf6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003cfa:	20ff      	movlt	r0, #255	; 0xff
}
 8003cfc:	b009      	add	sp, #36	; 0x24
 8003cfe:	f85d fb04 	ldr.w	pc, [sp], #4

08003d02 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d04:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003d06:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8003d08:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2402      	moveq	r4, #2
 8003d0e:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 8003d10:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 8003d14:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003d16:	f10d 0005 	add.w	r0, sp, #5
 8003d1a:	4622      	mov	r2, r4
{
 8003d1c:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003d1e:	f003 fc23 	bl	8007568 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8003d22:	ab0c      	add	r3, sp, #48	; 0x30
 8003d24:	4423      	add	r3, r4
 8003d26:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8003d2a:	ab0c      	add	r3, sp, #48	; 0x30
 8003d2c:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8003d2e:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 8003d30:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003d34:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d36:	2218      	movs	r2, #24
 8003d38:	4629      	mov	r1, r5
 8003d3a:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003d3e:	f8ad 5000 	strh.w	r5, [sp]
 8003d42:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d46:	f003 fc1a 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003d4a:	233f      	movs	r3, #63	; 0x3f
 8003d4c:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8003d50:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003d54:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 8003d58:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003d5a:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8003d5c:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 8003d5e:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 8003d60:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8003d62:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003d66:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8003d68:	f000 f98e 	bl	8004088 <hci_send_req>
 8003d6c:	42a8      	cmp	r0, r5
 8003d6e:	db09      	blt.n	8003d84 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003d70:	f89d 0000 	ldrb.w	r0, [sp]
 8003d74:	b920      	cbnz	r0, 8003d80 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8003d76:	9b00      	ldr	r3, [sp, #0]
 8003d78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d7a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003d7e:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8003d80:	b00d      	add	sp, #52	; 0x34
 8003d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8003d84:	20ff      	movs	r0, #255	; 0xff
 8003d86:	e7fb      	b.n	8003d80 <aci_gatt_add_serv+0x7e>

08003d88 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8003d88:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003d8a:	2901      	cmp	r1, #1
{
 8003d8c:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 8003d8e:	bf0c      	ite	eq
 8003d90:	2402      	moveq	r4, #2
 8003d92:	2410      	movne	r4, #16
{
 8003d94:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8003d96:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003d9a:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 8003d9c:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003da0:	f10d 001f 	add.w	r0, sp, #31
 8003da4:	4631      	mov	r1, r6
{
 8003da6:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003da8:	f003 fbde 	bl	8007568 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8003dac:	ab0e      	add	r3, sp, #56	; 0x38
 8003dae:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 8003db0:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 8003db2:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8003db6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8003dba:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 8003dbe:	ab0e      	add	r3, sp, #56	; 0x38
 8003dc0:	4423      	add	r3, r4
 8003dc2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8003dc6:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8003dca:	ab0e      	add	r3, sp, #56	; 0x38
 8003dcc:	4423      	add	r3, r4
 8003dce:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8003dd2:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8003dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8003dd8:	4423      	add	r3, r4
 8003dda:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8003dde:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 8003de2:	ab0e      	add	r3, sp, #56	; 0x38
 8003de4:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003de6:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 8003de8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003dec:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003df0:	4629      	mov	r1, r5
 8003df2:	2218      	movs	r2, #24
 8003df4:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003df6:	f8ad 5000 	strh.w	r5, [sp]
 8003dfa:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003dfe:	f003 fbbe 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e02:	233f      	movs	r3, #63	; 0x3f
 8003e04:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003e08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003e0c:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 8003e10:	ab07      	add	r3, sp, #28
 8003e12:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 8003e14:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003e16:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8003e18:	4629      	mov	r1, r5
 8003e1a:	a801      	add	r0, sp, #4
  rq.clen = indx;
 8003e1c:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8003e1e:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003e22:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003e24:	f000 f930 	bl	8004088 <hci_send_req>
 8003e28:	42a8      	cmp	r0, r5
 8003e2a:	db09      	blt.n	8003e40 <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003e2c:	f89d 0000 	ldrb.w	r0, [sp]
 8003e30:	b920      	cbnz	r0, 8003e3c <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8003e32:	9b00      	ldr	r3, [sp, #0]
 8003e34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003e36:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003e3a:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8003e3c:	b00e      	add	sp, #56	; 0x38
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003e40:	20ff      	movs	r0, #255	; 0xff
 8003e42:	e7fb      	b.n	8003e3c <aci_gatt_add_char+0xb4>

08003e44 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003e44:	b510      	push	{r4, lr}
 8003e46:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003e48:	2c7e      	cmp	r4, #126	; 0x7e
{
 8003e4a:	b0a8      	sub	sp, #160	; 0xa0
 8003e4c:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003e4e:	dc27      	bgt.n	8003ea0 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003e50:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8003e52:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 8003e56:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8003e5a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8003e5e:	f003 fb83 	bl	8007568 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e62:	2218      	movs	r2, #24
 8003e64:	2100      	movs	r1, #0
 8003e66:	a802      	add	r0, sp, #8
 8003e68:	f003 fb89 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e6c:	233f      	movs	r3, #63	; 0x3f
 8003e6e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003e72:	230c      	movs	r3, #12
 8003e74:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8003e78:	ab08      	add	r3, sp, #32
 8003e7a:	9304      	str	r3, [sp, #16]
  indx +=  len;
 8003e7c:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8003e7e:	f10d 0307 	add.w	r3, sp, #7
 8003e82:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003e84:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003e86:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8003e88:	2100      	movs	r1, #0
 8003e8a:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8003e8c:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003e8e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003e90:	f000 f8fa 	bl	8004088 <hci_send_req>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	db05      	blt.n	8003ea4 <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 8003e98:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003e9c:	b028      	add	sp, #160	; 0xa0
 8003e9e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003ea0:	2042      	movs	r0, #66	; 0x42
 8003ea2:	e7fb      	b.n	8003e9c <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 8003ea4:	20ff      	movs	r0, #255	; 0xff
 8003ea6:	e7f9      	b.n	8003e9c <aci_hal_write_config_data+0x58>

08003ea8 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8003ea8:	b500      	push	{lr}
 8003eaa:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003eac:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8003eae:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8003eb2:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003eb6:	a802      	add	r0, sp, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f003 fb60 	bl	800757e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003ebe:	233f      	movs	r3, #63	; 0x3f
 8003ec0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8003eca:	ab01      	add	r3, sp, #4
 8003ecc:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8003ed2:	f10d 0303 	add.w	r3, sp, #3
 8003ed6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003ed8:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003eda:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003edc:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003ede:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003ee0:	f000 f8d2 	bl	8004088 <hci_send_req>
 8003ee4:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003ee6:	bfac      	ite	ge
 8003ee8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003eec:	20ff      	movlt	r0, #255	; 0xff
}
 8003eee:	b009      	add	sp, #36	; 0x24
 8003ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08003ef4 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8003ef4:	b530      	push	{r4, r5, lr}
 8003ef6:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8003ef8:	f10d 030e 	add.w	r3, sp, #14
 8003efc:	9300      	str	r3, [sp, #0]
{
 8003efe:	4605      	mov	r5, r0
 8003f00:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8003f02:	ab03      	add	r3, sp, #12
 8003f04:	f10d 0209 	add.w	r2, sp, #9
 8003f08:	f10d 010a 	add.w	r1, sp, #10
 8003f0c:	a802      	add	r0, sp, #8
 8003f0e:	f000 f82f 	bl	8003f70 <hci_le_read_local_version>
 8003f12:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8003f14:	b968      	cbnz	r0, 8003f32 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 8003f16:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003f1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8003f1e:	0a0b      	lsrs	r3, r1, #8
 8003f20:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003f22:	f002 030f 	and.w	r3, r2, #15
 8003f26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003f2a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8003f32:	b005      	add	sp, #20
 8003f34:	bd30      	pop	{r4, r5, pc}

08003f36 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003f36:	b500      	push	{lr}
 8003f38:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f3a:	2218      	movs	r2, #24
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	a802      	add	r0, sp, #8
 8003f40:	f003 fb1d 	bl	800757e <memset>
  rq.ogf = OGF_HOST_CTL;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8003f4a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003f4e:	f10d 0307 	add.w	r3, sp, #7
 8003f52:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003f54:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003f56:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003f58:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003f5a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003f5c:	f000 f894 	bl	8004088 <hci_send_req>
 8003f60:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8003f62:	bfac      	ite	ge
 8003f64:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8003f68:	20ff      	movlt	r0, #255	; 0xff
}
 8003f6a:	b009      	add	sp, #36	; 0x24
 8003f6c:	f85d fb04 	ldr.w	pc, [sp], #4

08003f70 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8003f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003f74:	2400      	movs	r4, #0
{
 8003f76:	b08b      	sub	sp, #44	; 0x2c
 8003f78:	4681      	mov	r9, r0
 8003f7a:	4688      	mov	r8, r1
 8003f7c:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f7e:	4621      	mov	r1, r4
 8003f80:	2218      	movs	r2, #24
 8003f82:	a804      	add	r0, sp, #16
{
 8003f84:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003f86:	9401      	str	r4, [sp, #4]
 8003f88:	9402      	str	r4, [sp, #8]
 8003f8a:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f8e:	f003 faf6 	bl	800757e <memset>
  rq.ogf = OGF_INFO_PARAM;
 8003f92:	2304      	movs	r3, #4
 8003f94:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003f9e:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8003fa0:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003fa6:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003faa:	f000 f86d 	bl	8004088 <hci_send_req>
 8003fae:	42a0      	cmp	r0, r4
 8003fb0:	db1c      	blt.n	8003fec <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003fb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003fb6:	b9b0      	cbnz	r0, 8003fe6 <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8003fb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003fbc:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 8003fc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003fc4:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 8003fc8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003fcc:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8003fce:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003fd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8003fd4:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003fd8:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003fda:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fe4:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8003fe6:	b00b      	add	sp, #44	; 0x2c
 8003fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 8003fec:	20ff      	movs	r0, #255	; 0xff
 8003fee:	e7fa      	b.n	8003fe6 <hci_le_read_local_version+0x76>

08003ff0 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8003ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 8003ff2:	4d08      	ldr	r5, [pc, #32]	; (8004014 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 8003ff4:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 f939 	bl	800426e <list_is_empty>
 8003ffc:	b108      	cbz	r0, 8004002 <move_list.constprop.0+0x12>
  }
}
 8003ffe:	b003      	add	sp, #12
 8004000:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 8004002:	a901      	add	r1, sp, #4
 8004004:	4620      	mov	r0, r4
 8004006:	f000 f971 	bl	80042ec <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800400a:	9901      	ldr	r1, [sp, #4]
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f938 	bl	8004282 <list_insert_head>
 8004012:	e7f0      	b.n	8003ff6 <move_list.constprop.0+0x6>
 8004014:	200014ec 	.word	0x200014ec

08004018 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004018:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800401a:	b108      	cbz	r0, 8004020 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <hci_init+0x44>)
 800401e:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8004020:	f001 ff50 	bl	8005ec4 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004024:	480e      	ldr	r0, [pc, #56]	; (8004060 <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004026:	4e0f      	ldr	r6, [pc, #60]	; (8004064 <hci_init+0x4c>)
 8004028:	4d0d      	ldr	r5, [pc, #52]	; (8004060 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 800402a:	f000 f91d 	bl	8004268 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800402e:	480e      	ldr	r0, [pc, #56]	; (8004068 <hci_init+0x50>)
 8004030:	f000 f91a 	bl	8004268 <list_init_head>
 8004034:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004036:	1931      	adds	r1, r6, r4
 8004038:	4628      	mov	r0, r5
 800403a:	348c      	adds	r4, #140	; 0x8c
 800403c:	f000 f92d 	bl	800429a <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004040:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8004044:	d1f7      	bne.n	8004036 <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004046:	4c05      	ldr	r4, [pc, #20]	; (800405c <hci_init+0x44>)
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	b10a      	cbz	r2, 8004050 <hci_init+0x38>
 800404c:	2000      	movs	r0, #0
 800404e:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004050:	68a3      	ldr	r3, [r4, #8]
 8004052:	b113      	cbz	r3, 800405a <hci_init+0x42>
}
 8004054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004058:	4718      	bx	r3
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	20000190 	.word	0x20000190
 8004060:	200014e4 	.word	0x200014e4
 8004064:	200001b0 	.word	0x200001b0
 8004068:	200014ec 	.word	0x200014ec

0800406c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <hci_register_io_bus+0x18>)
 800406e:	6802      	ldr	r2, [r0, #0]
 8004070:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8004072:	68c2      	ldr	r2, [r0, #12]
 8004074:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8004076:	6902      	ldr	r2, [r0, #16]
 8004078:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800407a:	6982      	ldr	r2, [r0, #24]
 800407c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800407e:	6882      	ldr	r2, [r0, #8]
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	4770      	bx	lr
 8004084:	20000190 	.word	0x20000190

08004088 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8004088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800408c:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800408e:	8846      	ldrh	r6, [r0, #2]
 8004090:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004094:	4f59      	ldr	r7, [pc, #356]	; (80041fc <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8004096:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8004204 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800409a:	2300      	movs	r3, #0
{
 800409c:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800409e:	a802      	add	r0, sp, #8
{
 80040a0:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 80040a2:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 80040a4:	f000 f8e0 	bl	8004268 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80040a8:	4638      	mov	r0, r7
 80040aa:	f000 f931 	bl	8004310 <list_get_size>
 80040ae:	2801      	cmp	r0, #1
 80040b0:	dd53      	ble.n	800415a <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80040b2:	8863      	ldrh	r3, [r4, #2]
 80040b4:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80040b6:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80040b8:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80040ba:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80040be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 80040c6:	2201      	movs	r2, #1
 80040c8:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80040cc:	a805      	add	r0, sp, #20
 80040ce:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80040d0:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80040d4:	f003 fa48 	bl	8007568 <memcpy>
  if (hciContext.io.Send)
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <hci_send_req+0x178>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	b113      	cbz	r3, 80040e4 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80040de:	1d39      	adds	r1, r7, #4
 80040e0:	a804      	add	r0, sp, #16
 80040e2:	4798      	blx	r3
  
  if (async)
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	d178      	bne.n	80041da <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80040e8:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80040ec:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80040f0:	4e44      	ldr	r6, [pc, #272]	; (8004204 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80040f2:	4f42      	ldr	r7, [pc, #264]	; (80041fc <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80040f4:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 80040f6:	f7fd fdd3 	bl	8001ca0 <HAL_GetTick>
 80040fa:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80040fc:	f7fd fdd0 	bl	8001ca0 <HAL_GetTick>
 8004100:	eba0 0008 	sub.w	r0, r0, r8
 8004104:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004108:	d84a      	bhi.n	80041a0 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800410a:	4630      	mov	r0, r6
 800410c:	f000 f8af 	bl	800426e <list_is_empty>
 8004110:	2800      	cmp	r0, #0
 8004112:	d1f3      	bne.n	80040fc <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004114:	a901      	add	r1, sp, #4
 8004116:	4630      	mov	r0, r6
 8004118:	f000 f8d6 	bl	80042c8 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800411c:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800411e:	7a0b      	ldrb	r3, [r1, #8]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d109      	bne.n	8004138 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 8004124:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004126:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800412a:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800412c:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8004130:	d02c      	beq.n	800418c <hci_send_req+0x104>
 8004132:	d81b      	bhi.n	800416c <hci_send_req+0xe4>
 8004134:	280e      	cmp	r0, #14
 8004136:	d052      	beq.n	80041de <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004138:	4638      	mov	r0, r7
 800413a:	f000 f898 	bl	800426e <list_is_empty>
 800413e:	2800      	cmp	r0, #0
 8004140:	d058      	beq.n	80041f4 <hci_send_req+0x16c>
 8004142:	4630      	mov	r0, r6
 8004144:	f000 f893 	bl	800426e <list_is_empty>
 8004148:	2800      	cmp	r0, #0
 800414a:	d053      	beq.n	80041f4 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800414c:	9901      	ldr	r1, [sp, #4]
 800414e:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004150:	f000 f8a3 	bl	800429a <list_insert_tail>
      hciReadPacket=NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	e7cd      	b.n	80040f6 <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800415a:	a904      	add	r1, sp, #16
 800415c:	4648      	mov	r0, r9
 800415e:	f000 f8b3 	bl	80042c8 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004162:	9904      	ldr	r1, [sp, #16]
 8004164:	4638      	mov	r0, r7
 8004166:	f000 f898 	bl	800429a <list_insert_tail>
 800416a:	e79d      	b.n	80040a8 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800416c:	2810      	cmp	r0, #16
 800416e:	d017      	beq.n	80041a0 <hci_send_req+0x118>
 8004170:	283e      	cmp	r0, #62	; 0x3e
 8004172:	d1e1      	bne.n	8004138 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 8004174:	7ac8      	ldrb	r0, [r1, #11]
 8004176:	6862      	ldr	r2, [r4, #4]
 8004178:	4290      	cmp	r0, r2
 800417a:	d1dd      	bne.n	8004138 <hci_send_req+0xb0>
        len -= 1;
 800417c:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 800417e:	6963      	ldr	r3, [r4, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	bf28      	it	cs
 8004184:	461a      	movcs	r2, r3
 8004186:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004188:	310c      	adds	r1, #12
 800418a:	e01c      	b.n	80041c6 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 800418c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8004190:	42ab      	cmp	r3, r5
 8004192:	d105      	bne.n	80041a0 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 8004194:	6863      	ldr	r3, [r4, #4]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d00f      	beq.n	80041ba <hci_send_req+0x132>
          if (cs->status) {
 800419a:	7acb      	ldrb	r3, [r1, #11]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0cb      	beq.n	8004138 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80041a0:	9901      	ldr	r1, [sp, #4]
 80041a2:	b111      	cbz	r1, 80041aa <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80041a4:	4815      	ldr	r0, [pc, #84]	; (80041fc <hci_send_req+0x174>)
 80041a6:	f000 f86c 	bl	8004282 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 80041aa:	a802      	add	r0, sp, #8
 80041ac:	f7ff ff20 	bl	8003ff0 <move_list.constprop.0>
  return -1;
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 80041b4:	b025      	add	sp, #148	; 0x94
 80041b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 80041ba:	6963      	ldr	r3, [r4, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	bf28      	it	cs
 80041c0:	461a      	movcs	r2, r3
 80041c2:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80041c4:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80041c6:	6920      	ldr	r0, [r4, #16]
 80041c8:	f003 f9ce 	bl	8007568 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80041cc:	480b      	ldr	r0, [pc, #44]	; (80041fc <hci_send_req+0x174>)
 80041ce:	9901      	ldr	r1, [sp, #4]
 80041d0:	f000 f857 	bl	8004282 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80041d4:	a802      	add	r0, sp, #8
 80041d6:	f7ff ff0b 	bl	8003ff0 <move_list.constprop.0>
    return 0;
 80041da:	2000      	movs	r0, #0
 80041dc:	e7ea      	b.n	80041b4 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 80041de:	898a      	ldrh	r2, [r1, #12]
 80041e0:	42aa      	cmp	r2, r5
 80041e2:	d1dd      	bne.n	80041a0 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 80041e4:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 80041e6:	6963      	ldr	r3, [r4, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bf28      	it	cs
 80041ec:	461a      	movcs	r2, r3
 80041ee:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80041f0:	310e      	adds	r1, #14
 80041f2:	e7e8      	b.n	80041c6 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80041f4:	9901      	ldr	r1, [sp, #4]
 80041f6:	a802      	add	r0, sp, #8
 80041f8:	e7aa      	b.n	8004150 <hci_send_req+0xc8>
 80041fa:	bf00      	nop
 80041fc:	200014e4 	.word	0x200014e4
 8004200:	20000190 	.word	0x20000190
 8004204:	200014ec 	.word	0x200014ec

08004208 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8004208:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800420a:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800420c:	4813      	ldr	r0, [pc, #76]	; (800425c <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 800420e:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8004210:	f000 f82d 	bl	800426e <list_is_empty>
 8004214:	b9d8      	cbnz	r0, 800424e <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004216:	a901      	add	r1, sp, #4
 8004218:	4810      	ldr	r0, [pc, #64]	; (800425c <hci_notify_asynch_evt+0x54>)
 800421a:	f000 f855 	bl	80042c8 <list_remove_head>
    
    if (hciContext.io.Receive)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <hci_notify_asynch_evt+0x58>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	b193      	cbz	r3, 800424a <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8004224:	9801      	ldr	r0, [sp, #4]
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	3008      	adds	r0, #8
 800422a:	4798      	blx	r3
 800422c:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 800422e:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8004230:	b185      	cbz	r5, 8004254 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004232:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8004234:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004238:	2b04      	cmp	r3, #4
 800423a:	d10b      	bne.n	8004254 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800423c:	7a8b      	ldrb	r3, [r1, #10]
 800423e:	1ee8      	subs	r0, r5, #3
 8004240:	4283      	cmp	r3, r0
 8004242:	d107      	bne.n	8004254 <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8004244:	4807      	ldr	r0, [pc, #28]	; (8004264 <hci_notify_asynch_evt+0x5c>)
 8004246:	f000 f828 	bl	800429a <list_insert_tail>
  int32_t ret = 0;
 800424a:	2000      	movs	r0, #0
 800424c:	e000      	b.n	8004250 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 800424e:	2001      	movs	r0, #1
  }
  return ret;

}
 8004250:	b003      	add	sp, #12
 8004252:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8004254:	4801      	ldr	r0, [pc, #4]	; (800425c <hci_notify_asynch_evt+0x54>)
 8004256:	f000 f814 	bl	8004282 <list_insert_head>
 800425a:	e7f6      	b.n	800424a <hci_notify_asynch_evt+0x42>
 800425c:	200014e4 	.word	0x200014e4
 8004260:	20000190 	.word	0x20000190
 8004264:	200014ec 	.word	0x200014ec

08004268 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8004268:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800426a:	6040      	str	r0, [r0, #4]
 800426c:	4770      	bx	lr

0800426e <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004272:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8004274:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8004276:	1a1b      	subs	r3, r3, r0
 8004278:	4258      	negs	r0, r3
 800427a:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8004280:	4770      	bx	lr

08004282 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004286:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8004288:	6802      	ldr	r2, [r0, #0]
 800428a:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800428c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800428e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8004290:	680a      	ldr	r2, [r1, #0]
 8004292:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	f383 8810 	msr	PRIMASK, r3
 8004298:	4770      	bx	lr

0800429a <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800429e:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 80042a0:	6842      	ldr	r2, [r0, #4]
 80042a2:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 80042a4:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 80042a6:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80042a8:	684a      	ldr	r2, [r1, #4]
 80042aa:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	f383 8810 	msr	PRIMASK, r3
 80042b0:	4770      	bx	lr

080042b2 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80042b6:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80042b8:	e890 000a 	ldmia.w	r0, {r1, r3}
 80042bc:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 80042be:	6801      	ldr	r1, [r0, #0]
 80042c0:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	f382 8810 	msr	PRIMASK, r2
 80042c6:	4770      	bx	lr

080042c8 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80042d0:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80042d2:	6803      	ldr	r3, [r0, #0]
 80042d4:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 80042d6:	6800      	ldr	r0, [r0, #0]
 80042d8:	f7ff ffeb 	bl	80042b2 <list_remove_node>
  (*node)->next = NULL;
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	f385 8810 	msr	PRIMASK, r5
 80042ea:	bd38      	pop	{r3, r4, r5, pc}

080042ec <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80042f4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80042f6:	6843      	ldr	r3, [r0, #4]
 80042f8:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 80042fa:	6840      	ldr	r0, [r0, #4]
 80042fc:	f7ff ffd9 	bl	80042b2 <list_remove_node>
  (*node)->next = NULL;
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	2300      	movs	r3, #0
 8004304:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430a:	f385 8810 	msr	PRIMASK, r5
 800430e:	bd38      	pop	{r3, r4, r5, pc}

08004310 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004314:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004316:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8004318:	2300      	movs	r3, #0
  while (temp != listHead)
 800431a:	4282      	cmp	r2, r0
 800431c:	d103      	bne.n	8004326 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8004322:	4618      	mov	r0, r3
 8004324:	4770      	bx	lr
    size++;
 8004326:	3301      	adds	r3, #1
    temp = temp->next;		
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	e7f6      	b.n	800431a <list_get_size+0xa>

0800432c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800432c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800432e:	f000 ffd5 	bl	80052dc <vTaskStartScheduler>
  
  return osOK;
}
 8004332:	2000      	movs	r0, #0
 8004334:	bd08      	pop	{r3, pc}

08004336 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004336:	b570      	push	{r4, r5, r6, lr}
 8004338:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800433a:	6946      	ldr	r6, [r0, #20]
 800433c:	692a      	ldr	r2, [r5, #16]
 800433e:	6840      	ldr	r0, [r0, #4]
 8004340:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8004344:	460b      	mov	r3, r1
 8004346:	b086      	sub	sp, #24
 8004348:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800434a:	b176      	cbz	r6, 800436a <osThreadCreate+0x34>
 800434c:	69ad      	ldr	r5, [r5, #24]
 800434e:	b165      	cbz	r5, 800436a <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8004350:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004352:	bf14      	ite	ne
 8004354:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004356:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004358:	9502      	str	r5, [sp, #8]
 800435a:	e88d 0050 	stmia.w	sp, {r4, r6}
 800435e:	f000 ff5e 	bl	800521e <xTaskCreateStatic>
 8004362:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004364:	9805      	ldr	r0, [sp, #20]
}
 8004366:	b006      	add	sp, #24
 8004368:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800436a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800436c:	bf14      	ite	ne
 800436e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004370:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004372:	ad05      	add	r5, sp, #20
 8004374:	b292      	uxth	r2, r2
 8004376:	e88d 0030 	stmia.w	sp, {r4, r5}
 800437a:	f000 ff81 	bl	8005280 <xTaskCreate>
 800437e:	2801      	cmp	r0, #1
 8004380:	d0f0      	beq.n	8004364 <osThreadCreate+0x2e>
      return NULL;
 8004382:	2000      	movs	r0, #0
 8004384:	e7ef      	b.n	8004366 <osThreadCreate+0x30>

08004386 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004386:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004388:	2800      	cmp	r0, #0
 800438a:	bf08      	it	eq
 800438c:	2001      	moveq	r0, #1
 800438e:	f001 f8ed 	bl	800556c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004392:	2000      	movs	r0, #0
 8004394:	bd08      	pop	{r3, pc}
	...

08004398 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004398:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <prvInsertBlockIntoFreeList+0x40>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4282      	cmp	r2, r0
 80043a0:	d318      	bcc.n	80043d4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043a2:	685c      	ldr	r4, [r3, #4]
 80043a4:	1919      	adds	r1, r3, r4
 80043a6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a8:	bf01      	itttt	eq
 80043aa:	6841      	ldreq	r1, [r0, #4]
 80043ac:	4618      	moveq	r0, r3
 80043ae:	1909      	addeq	r1, r1, r4
 80043b0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043b2:	6844      	ldr	r4, [r0, #4]
 80043b4:	1901      	adds	r1, r0, r4
 80043b6:	428a      	cmp	r2, r1
 80043b8:	d107      	bne.n	80043ca <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ba:	4908      	ldr	r1, [pc, #32]	; (80043dc <prvInsertBlockIntoFreeList+0x44>)
 80043bc:	6809      	ldr	r1, [r1, #0]
 80043be:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043c0:	bf1f      	itttt	ne
 80043c2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043c4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043c6:	1909      	addne	r1, r1, r4
 80043c8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043ca:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043cc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043ce:	bf18      	it	ne
 80043d0:	6018      	strne	r0, [r3, #0]
 80043d2:	bd10      	pop	{r4, pc}
 80043d4:	4613      	mov	r3, r2
 80043d6:	e7e1      	b.n	800439c <prvInsertBlockIntoFreeList+0x4>
 80043d8:	20001034 	.word	0x20001034
 80043dc:	2000046c 	.word	0x2000046c

080043e0 <pvPortMalloc>:
{
 80043e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80043e6:	f000 ffaf 	bl	8005348 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80043ea:	493e      	ldr	r1, [pc, #248]	; (80044e4 <pvPortMalloc+0x104>)
 80043ec:	4d3e      	ldr	r5, [pc, #248]	; (80044e8 <pvPortMalloc+0x108>)
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	bb0b      	cbnz	r3, 8004436 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80043f2:	4a3e      	ldr	r2, [pc, #248]	; (80044ec <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043f4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043f6:	bf1f      	itttt	ne
 80043f8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043fa:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043fe:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 8004402:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004404:	bf14      	ite	ne
 8004406:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004408:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800440c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800440e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004410:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004414:	4e36      	ldr	r6, [pc, #216]	; (80044f0 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004416:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004418:	2000      	movs	r0, #0
 800441a:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800441c:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800441e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004420:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004422:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004424:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004428:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800442a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <pvPortMalloc+0x118>)
 800442e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004434:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004436:	682f      	ldr	r7, [r5, #0]
 8004438:	4227      	tst	r7, r4
 800443a:	d116      	bne.n	800446a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800443c:	2c00      	cmp	r4, #0
 800443e:	d041      	beq.n	80044c4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8004440:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004444:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004446:	bf1c      	itt	ne
 8004448:	f023 0307 	bicne.w	r3, r3, #7
 800444c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800444e:	b163      	cbz	r3, 800446a <pvPortMalloc+0x8a>
 8004450:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <pvPortMalloc+0x118>)
 8004452:	6816      	ldr	r6, [r2, #0]
 8004454:	42b3      	cmp	r3, r6
 8004456:	4690      	mov	r8, r2
 8004458:	d807      	bhi.n	800446a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800445a:	4a25      	ldr	r2, [pc, #148]	; (80044f0 <pvPortMalloc+0x110>)
 800445c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800445e:	6868      	ldr	r0, [r5, #4]
 8004460:	4283      	cmp	r3, r0
 8004462:	d804      	bhi.n	800446e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004464:	6809      	ldr	r1, [r1, #0]
 8004466:	428d      	cmp	r5, r1
 8004468:	d107      	bne.n	800447a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800446a:	2400      	movs	r4, #0
 800446c:	e02a      	b.n	80044c4 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800446e:	682c      	ldr	r4, [r5, #0]
 8004470:	2c00      	cmp	r4, #0
 8004472:	d0f7      	beq.n	8004464 <pvPortMalloc+0x84>
 8004474:	462a      	mov	r2, r5
 8004476:	4625      	mov	r5, r4
 8004478:	e7f1      	b.n	800445e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800447a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800447c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800447e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004480:	1ac2      	subs	r2, r0, r3
 8004482:	2a10      	cmp	r2, #16
 8004484:	d90f      	bls.n	80044a6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004486:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004488:	0741      	lsls	r1, r0, #29
 800448a:	d008      	beq.n	800449e <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	e7fe      	b.n	800449c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800449e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044a0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044a2:	f7ff ff79 	bl	8004398 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044a6:	4913      	ldr	r1, [pc, #76]	; (80044f4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044a8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044aa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044ac:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ae:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044b0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80044b2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044b6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044ba:	bf38      	it	cc
 80044bc:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044be:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044c0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044c2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80044c4:	f000 ffda 	bl	800547c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c8:	0763      	lsls	r3, r4, #29
 80044ca:	d008      	beq.n	80044de <pvPortMalloc+0xfe>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	e7fe      	b.n	80044dc <pvPortMalloc+0xfc>
}
 80044de:	4620      	mov	r0, r4
 80044e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e4:	2000046c 	.word	0x2000046c
 80044e8:	20001028 	.word	0x20001028
 80044ec:	20000470 	.word	0x20000470
 80044f0:	20001034 	.word	0x20001034
 80044f4:	20001030 	.word	0x20001030
 80044f8:	2000102c 	.word	0x2000102c

080044fc <vPortFree>:
{
 80044fc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80044fe:	4604      	mov	r4, r0
 8004500:	b370      	cbz	r0, 8004560 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <vPortFree+0x68>)
 8004504:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	4213      	tst	r3, r2
 800450c:	d108      	bne.n	8004520 <vPortFree+0x24>
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	e7fe      	b.n	800451e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004520:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004524:	b141      	cbz	r1, 8004538 <vPortFree+0x3c>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	e7fe      	b.n	8004536 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004538:	ea23 0302 	bic.w	r3, r3, r2
 800453c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004540:	f000 ff02 	bl	8005348 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004544:	4a08      	ldr	r2, [pc, #32]	; (8004568 <vPortFree+0x6c>)
 8004546:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800454a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004550:	440b      	add	r3, r1
 8004552:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004554:	f7ff ff20 	bl	8004398 <prvInsertBlockIntoFreeList>
}
 8004558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800455c:	f000 bf8e 	b.w	800547c <xTaskResumeAll>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	bf00      	nop
 8004564:	20001028 	.word	0x20001028
 8004568:	2000102c 	.word	0x2000102c

0800456c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	f100 0308 	add.w	r3, r0, #8
 8004570:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004572:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004576:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004578:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800457a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800457c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800457e:	6003      	str	r3, [r0, #0]
 8004580:	4770      	bx	lr

08004582 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	6103      	str	r3, [r0, #16]
 8004586:	4770      	bx	lr

08004588 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004588:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800458a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004594:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004596:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004598:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800459a:	3301      	adds	r3, #1
 800459c:	6003      	str	r3, [r0, #0]
 800459e:	4770      	bx	lr

080045a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045a0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045a2:	1c53      	adds	r3, r2, #1
{
 80045a4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80045a6:	d10a      	bne.n	80045be <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045a8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045ae:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045b0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80045b2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80045b4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80045b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80045b8:	3301      	adds	r3, #1
 80045ba:	6003      	str	r3, [r0, #0]
 80045bc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045be:	f100 0308 	add.w	r3, r0, #8
 80045c2:	685c      	ldr	r4, [r3, #4]
 80045c4:	6825      	ldr	r5, [r4, #0]
 80045c6:	42aa      	cmp	r2, r5
 80045c8:	d3ef      	bcc.n	80045aa <vListInsert+0xa>
 80045ca:	4623      	mov	r3, r4
 80045cc:	e7f9      	b.n	80045c2 <vListInsert+0x22>

080045ce <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ce:	6841      	ldr	r1, [r0, #4]
 80045d0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 80045d2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045d4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d6:	6882      	ldr	r2, [r0, #8]
 80045d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045de:	bf08      	it	eq
 80045e0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045e2:	2200      	movs	r2, #0
 80045e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ec:	6818      	ldr	r0, [r3, #0]
}
 80045ee:	4770      	bx	lr

080045f0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045f0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <prvTaskExitError+0x3c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	d008      	beq.n	8004610 <prvTaskExitError+0x20>
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	e7fe      	b.n	800460e <prvTaskExitError+0x1e>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0fc      	beq.n	8004620 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004626:	b002      	add	sp, #8
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000008 	.word	0x20000008

08004630 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <prvPortStartFirstTask+0x24>)
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	6800      	ldr	r0, [r0, #0]
 8004636:	f380 8808 	msr	MSP, r0
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f380 8814 	msr	CONTROL, r0
 8004642:	b662      	cpsie	i
 8004644:	b661      	cpsie	f
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	df00      	svc	0
 8004650:	bf00      	nop
 8004652:	0000      	.short	0x0000
 8004654:	e000ed08 	.word	0xe000ed08

08004658 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004658:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004668 <vPortEnableVFP+0x10>
 800465c:	6801      	ldr	r1, [r0, #0]
 800465e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004662:	6001      	str	r1, [r0, #0]
 8004664:	4770      	bx	lr
 8004666:	0000      	.short	0x0000
 8004668:	e000ed88 	.word	0xe000ed88

0800466c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800466c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004670:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <pxPortInitialiseStack+0x28>)
 8004676:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800467a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800467e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004682:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004686:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800468a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800468e:	3844      	subs	r0, #68	; 0x44
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	080045f1 	.word	0x080045f1
	...

080046a0 <SVC_Handler>:
	__asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20001044 	.word	0x20001044

080046c4 <vPortEnterCritical>:
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <vPortEnterCritical+0x3c>)
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80046da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046de:	d10d      	bne.n	80046fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <vPortEnterCritical+0x40>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046e8:	d008      	beq.n	80046fc <vPortEnterCritical+0x38>
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	e7fe      	b.n	80046fa <vPortEnterCritical+0x36>
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000008 	.word	0x20000008
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004708:	4a08      	ldr	r2, [pc, #32]	; (800472c <vPortExitCritical+0x24>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	b943      	cbnz	r3, 8004720 <vPortExitCritical+0x18>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	e7fe      	b.n	800471e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004720:	3b01      	subs	r3, #1
 8004722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004724:	b90b      	cbnz	r3, 800472a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	4770      	bx	lr
 800472c:	20000008 	.word	0x20000008

08004730 <PendSV_Handler>:
	__asm volatile
 8004730:	f3ef 8009 	mrs	r0, PSP
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <pxCurrentTCBConst>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f01e 0f10 	tst.w	lr, #16
 8004740:	bf08      	it	eq
 8004742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004754:	f380 8811 	msr	BASEPRI, r0
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f000 ff28 	bl	80055b4 <vTaskSwitchContext>
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f380 8811 	msr	BASEPRI, r0
 800476c:	bc09      	pop	{r0, r3}
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6808      	ldr	r0, [r1, #0]
 8004772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004776:	f01e 0f10 	tst.w	lr, #16
 800477a:	bf08      	it	eq
 800477c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004780:	f380 8809 	msr	PSP, r0
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst>:
 8004790:	20001044 	.word	0x20001044

08004794 <SysTick_Handler>:
{
 8004794:	b508      	push	{r3, lr}
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80047a6:	f000 fdd7 	bl	8005358 <xTaskIncrementTick>
 80047aa:	b118      	cbz	r0, 80047b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <SysTick_Handler+0x28>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80047b4:	2300      	movs	r3, #0
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	bd08      	pop	{r3, pc}
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c2:	4909      	ldr	r1, [pc, #36]	; (80047e8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <vPortSetupTimerInterrupt+0x2c>)
 80047cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d6:	4906      	ldr	r1, [pc, #24]	; (80047f0 <vPortSetupTimerInterrupt+0x30>)
 80047d8:	3b01      	subs	r3, #1
 80047da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047dc:	2307      	movs	r3, #7
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010
 80047e8:	e000e018 	.word	0xe000e018
 80047ec:	2000001c 	.word	0x2000001c
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <xPortStartScheduler+0xe8>)
 80047f6:	4a3a      	ldr	r2, [pc, #232]	; (80048e0 <xPortStartScheduler+0xec>)
{
 80047f8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	4291      	cmp	r1, r2
 80047fe:	d108      	bne.n	8004812 <xPortStartScheduler+0x1e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	e7fe      	b.n	8004810 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <xPortStartScheduler+0xf0>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d108      	bne.n	800482c <xPortStartScheduler+0x38>
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	e7fe      	b.n	800482a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800482c:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <xPortStartScheduler+0xf4>)
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004838:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800483a:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004842:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004846:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800484a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <xPortStartScheduler+0xfc>)
 800484e:	2207      	movs	r2, #7
 8004850:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004852:	2100      	movs	r1, #0
 8004854:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004858:	0600      	lsls	r0, r0, #24
 800485a:	f102 34ff 	add.w	r4, r2, #4294967295
 800485e:	d40d      	bmi.n	800487c <xPortStartScheduler+0x88>
 8004860:	b101      	cbz	r1, 8004864 <xPortStartScheduler+0x70>
 8004862:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2a03      	cmp	r2, #3
 8004868:	d011      	beq.n	800488e <xPortStartScheduler+0x9a>
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	e7fe      	b.n	800487a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800487c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004880:	0052      	lsls	r2, r2, #1
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f88d 2003 	strb.w	r2, [sp, #3]
 8004888:	2101      	movs	r1, #1
 800488a:	4622      	mov	r2, r4
 800488c:	e7e2      	b.n	8004854 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800488e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004890:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004894:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004896:	9b01      	ldr	r3, [sp, #4]
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <xPortStartScheduler+0xf4>)
 800489a:	b2db      	uxtb	r3, r3
 800489c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <xPortStartScheduler+0x100>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80048a6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80048ae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80048b0:	f7ff ff86 	bl	80047c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <xPortStartScheduler+0x104>)
 80048b6:	2400      	movs	r4, #0
 80048b8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80048ba:	f7ff fecd 	bl	8004658 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048be:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <xPortStartScheduler+0x108>)
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048c6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80048c8:	f7ff feb2 	bl	8004630 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80048cc:	f000 fe72 	bl	80055b4 <vTaskSwitchContext>
	prvTaskExitError();
 80048d0:	f7ff fe8e 	bl	80045f0 <prvTaskExitError>
}
 80048d4:	4620      	mov	r0, r4
 80048d6:	b002      	add	sp, #8
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	e000ed00 	.word	0xe000ed00
 80048e0:	410fc271 	.word	0x410fc271
 80048e4:	410fc270 	.word	0x410fc270
 80048e8:	e000e400 	.word	0xe000e400
 80048ec:	2000103c 	.word	0x2000103c
 80048f0:	20001040 	.word	0x20001040
 80048f4:	e000ed20 	.word	0xe000ed20
 80048f8:	20000008 	.word	0x20000008
 80048fc:	e000ef34 	.word	0xe000ef34

08004900 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004900:	b510      	push	{r4, lr}
 8004902:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004904:	f7ff fede 	bl	80046c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004908:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800490a:	f7ff fefd 	bl	8004708 <vPortExitCritical>

	return xReturn;
}
 800490e:	fab4 f084 	clz	r0, r4
 8004912:	0940      	lsrs	r0, r0, #5
 8004914:	bd10      	pop	{r4, pc}

08004916 <prvCopyDataToQueue>:
{
 8004916:	b570      	push	{r4, r5, r6, lr}
 8004918:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800491a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800491c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800491e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004920:	b942      	cbnz	r2, 8004934 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004922:	6805      	ldr	r5, [r0, #0]
 8004924:	b99d      	cbnz	r5, 800494e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004926:	6880      	ldr	r0, [r0, #8]
 8004928:	f000 ff8c 	bl	8005844 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800492c:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800492e:	3601      	adds	r6, #1
 8004930:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004932:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004934:	b96d      	cbnz	r5, 8004952 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004936:	6840      	ldr	r0, [r0, #4]
 8004938:	f002 fe16 	bl	8007568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004940:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004942:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004944:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004946:	4293      	cmp	r3, r2
 8004948:	d301      	bcc.n	800494e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800494e:	2000      	movs	r0, #0
 8004950:	e7ed      	b.n	800492e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004952:	68c0      	ldr	r0, [r0, #12]
 8004954:	f002 fe08 	bl	8007568 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800495a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800495c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800495e:	425b      	negs	r3, r3
 8004960:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004962:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004964:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004966:	bf3e      	ittt	cc
 8004968:	68a2      	ldrcc	r2, [r4, #8]
 800496a:	189b      	addcc	r3, r3, r2
 800496c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800496e:	2d02      	cmp	r5, #2
 8004970:	d1ed      	bne.n	800494e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004972:	b10e      	cbz	r6, 8004978 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004974:	3e01      	subs	r6, #1
 8004976:	e7ea      	b.n	800494e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004978:	4630      	mov	r0, r6
 800497a:	e7d8      	b.n	800492e <prvCopyDataToQueue+0x18>

0800497c <prvCopyDataFromQueue>:
{
 800497c:	4603      	mov	r3, r0
 800497e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004982:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004984:	b162      	cbz	r2, 80049a0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004986:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004988:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800498a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800498c:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800498e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004990:	bf24      	itt	cs
 8004992:	6819      	ldrcs	r1, [r3, #0]
 8004994:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004996:	68d9      	ldr	r1, [r3, #12]
}
 8004998:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800499c:	f002 bde4 	b.w	8007568 <memcpy>
}
 80049a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <prvUnlockQueue>:
{
 80049a6:	b570      	push	{r4, r5, r6, lr}
 80049a8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80049aa:	f7ff fe8b 	bl	80046c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80049ae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80049b6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	dc14      	bgt.n	80049e6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80049bc:	23ff      	movs	r3, #255	; 0xff
 80049be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80049c2:	f7ff fea1 	bl	8004708 <vPortExitCritical>
	taskENTER_CRITICAL();
 80049c6:	f7ff fe7d 	bl	80046c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80049ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80049d2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	dc12      	bgt.n	80049fe <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80049d8:	23ff      	movs	r3, #255	; 0xff
 80049da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80049de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80049e2:	f7ff be91 	b.w	8004708 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0e7      	beq.n	80049bc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ec:	4630      	mov	r0, r6
 80049ee:	f000 fe35 	bl	800565c <xTaskRemoveFromEventList>
 80049f2:	b108      	cbz	r0, 80049f8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80049f4:	f000 febc 	bl	8005770 <vTaskMissedYield>
 80049f8:	3d01      	subs	r5, #1
 80049fa:	b26d      	sxtb	r5, r5
 80049fc:	e7dc      	b.n	80049b8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0e9      	beq.n	80049d8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a04:	4630      	mov	r0, r6
 8004a06:	f000 fe29 	bl	800565c <xTaskRemoveFromEventList>
 8004a0a:	b108      	cbz	r0, 8004a10 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004a0c:	f000 feb0 	bl	8005770 <vTaskMissedYield>
 8004a10:	3d01      	subs	r5, #1
 8004a12:	b26d      	sxtb	r5, r5
 8004a14:	e7de      	b.n	80049d4 <prvUnlockQueue+0x2e>
	...

08004a18 <xQueueGenericReset>:
{
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	b940      	cbnz	r0, 8004a32 <xQueueGenericReset+0x1a>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004a32:	f7ff fe47 	bl	80046c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a36:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a3a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a3e:	4343      	muls	r3, r0
 8004a40:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a42:	1a1b      	subs	r3, r3, r0
 8004a44:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a46:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a48:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004a4c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004a58:	b995      	cbnz	r5, 8004a80 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	b163      	cbz	r3, 8004a78 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5e:	f104 0010 	add.w	r0, r4, #16
 8004a62:	f000 fdfb 	bl	800565c <xTaskRemoveFromEventList>
 8004a66:	b138      	cbz	r0, 8004a78 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <xQueueGenericReset+0x7c>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004a78:	f7ff fe46 	bl	8004708 <vPortExitCritical>
}
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a80:	f104 0010 	add.w	r0, r4, #16
 8004a84:	f7ff fd72 	bl	800456c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a8c:	f7ff fd6e 	bl	800456c <vListInitialise>
 8004a90:	e7f2      	b.n	8004a78 <xQueueGenericReset+0x60>
 8004a92:	bf00      	nop
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <xQueueGenericCreate>:
	{
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	b940      	cbnz	r0, 8004ab2 <xQueueGenericCreate+0x1a>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ab4:	3048      	adds	r0, #72	; 0x48
 8004ab6:	f7ff fc93 	bl	80043e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004aba:	4604      	mov	r4, r0
 8004abc:	b150      	cbz	r0, 8004ad4 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ac4:	b945      	cbnz	r5, 8004ad8 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ac6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004ac8:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aca:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004acc:	2101      	movs	r1, #1
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff ffa2 	bl	8004a18 <xQueueGenericReset>
	}
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad8:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004adc:	6003      	str	r3, [r0, #0]
 8004ade:	e7f3      	b.n	8004ac8 <xQueueGenericCreate+0x30>

08004ae0 <xQueueGenericSend>:
{
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	4689      	mov	r9, r1
 8004ae6:	9201      	str	r2, [sp, #4]
 8004ae8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004aea:	4604      	mov	r4, r0
 8004aec:	b940      	cbnz	r0, 8004b00 <xQueueGenericSend+0x20>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b00:	2900      	cmp	r1, #0
 8004b02:	f040 8088 	bne.w	8004c16 <xQueueGenericSend+0x136>
 8004b06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8084 	beq.w	8004c16 <xQueueGenericSend+0x136>
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	e7fe      	b.n	8004b1e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b20:	9e01      	ldr	r6, [sp, #4]
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	f000 8082 	beq.w	8004c2c <xQueueGenericSend+0x14c>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	e7fe      	b.n	8004b38 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3a:	9d01      	ldr	r5, [sp, #4]
 8004b3c:	b91d      	cbnz	r5, 8004b46 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8004b3e:	f7ff fde3 	bl	8004708 <vPortExitCritical>
			return errQUEUE_FULL;
 8004b42:	2000      	movs	r0, #0
 8004b44:	e058      	b.n	8004bf8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8004b46:	b916      	cbnz	r6, 8004b4e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b48:	a802      	add	r0, sp, #8
 8004b4a:	f000 fdc9 	bl	80056e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b4e:	f7ff fddb 	bl	8004708 <vPortExitCritical>
		vTaskSuspendAll();
 8004b52:	f000 fbf9 	bl	8005348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b56:	f7ff fdb5 	bl	80046c4 <vPortEnterCritical>
 8004b5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b5e:	2bff      	cmp	r3, #255	; 0xff
 8004b60:	bf08      	it	eq
 8004b62:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004b66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004b6a:	2bff      	cmp	r3, #255	; 0xff
 8004b6c:	bf08      	it	eq
 8004b6e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004b72:	f7ff fdc9 	bl	8004708 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b76:	a901      	add	r1, sp, #4
 8004b78:	a802      	add	r0, sp, #8
 8004b7a:	f000 fdbd 	bl	80056f8 <xTaskCheckForTimeOut>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d143      	bne.n	8004c0a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b82:	f7ff fd9f 	bl	80046c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b86:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004b88:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004b8a:	f7ff fdbd 	bl	8004708 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b8e:	42ae      	cmp	r6, r5
 8004b90:	d135      	bne.n	8004bfe <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b92:	9901      	ldr	r1, [sp, #4]
 8004b94:	f104 0010 	add.w	r0, r4, #16
 8004b98:	f000 fd46 	bl	8005628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff ff02 	bl	80049a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba2:	f000 fc6b 	bl	800547c <xTaskResumeAll>
 8004ba6:	b938      	cbnz	r0, 8004bb8 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bac:	f8ca 3000 	str.w	r3, [sl]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004bba:	f7ff fd83 	bl	80046c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d301      	bcc.n	8004bca <xQueueGenericSend+0xea>
 8004bc6:	2f02      	cmp	r7, #2
 8004bc8:	d1b7      	bne.n	8004b3a <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bca:	463a      	mov	r2, r7
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff fea1 	bl	8004916 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd6:	b11b      	cbz	r3, 8004be0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bdc:	f000 fd3e 	bl	800565c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004be0:	b138      	cbz	r0, 8004bf2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004be2:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <xQueueGenericSend+0x168>)
 8004be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004bf2:	f7ff fd89 	bl	8004708 <vPortExitCritical>
				return pdPASS;
 8004bf6:	2001      	movs	r0, #1
}
 8004bf8:	b004      	add	sp, #16
 8004bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7ff fed1 	bl	80049a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c04:	f000 fc3a 	bl	800547c <xTaskResumeAll>
 8004c08:	e7d6      	b.n	8004bb8 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff fecb 	bl	80049a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c10:	f000 fc34 	bl	800547c <xTaskResumeAll>
 8004c14:	e795      	b.n	8004b42 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c16:	2f02      	cmp	r7, #2
 8004c18:	d102      	bne.n	8004c20 <xQueueGenericSend+0x140>
 8004c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c20:	f000 fdac 	bl	800577c <xTaskGetSchedulerState>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f43f af7b 	beq.w	8004b20 <xQueueGenericSend+0x40>
 8004c2a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c2c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004c30:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004c48 <xQueueGenericSend+0x168>
 8004c34:	e7c1      	b.n	8004bba <xQueueGenericSend+0xda>
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericSend+0x166>
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8004c4c:	b138      	cbz	r0, 8004c5e <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c52:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c54:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c56:	461a      	mov	r2, r3
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f7ff bf41 	b.w	8004ae0 <xQueueGenericSend>
 8004c5e:	4770      	bx	lr

08004c60 <xQueueCreateMutex>:
	{
 8004c60:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c62:	4602      	mov	r2, r0
 8004c64:	2100      	movs	r1, #0
 8004c66:	2001      	movs	r0, #1
 8004c68:	f7ff ff16 	bl	8004a98 <xQueueGenericCreate>
 8004c6c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c6e:	f7ff ffed 	bl	8004c4c <prvInitialiseMutex>
	}
 8004c72:	4620      	mov	r0, r4
 8004c74:	bd10      	pop	{r4, pc}
	...

08004c78 <xQueueReceive>:
{
 8004c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	4688      	mov	r8, r1
 8004c80:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004c82:	4604      	mov	r4, r0
 8004c84:	b940      	cbnz	r0, 8004c98 <xQueueReceive+0x20>
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	e7fe      	b.n	8004c96 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	f040 8086 	bne.w	8004daa <xQueueReceive+0x132>
 8004c9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8082 	beq.w	8004daa <xQueueReceive+0x132>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	e7fe      	b.n	8004cb6 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb8:	9e01      	ldr	r6, [sp, #4]
 8004cba:	2e00      	cmp	r6, #0
 8004cbc:	d07a      	beq.n	8004db4 <xQueueReceive+0x13c>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	e7fe      	b.n	8004cce <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cd0:	9d01      	ldr	r5, [sp, #4]
 8004cd2:	b91d      	cbnz	r5, 8004cdc <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8004cd4:	f7ff fd18 	bl	8004708 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e052      	b.n	8004d82 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8004cdc:	b916      	cbnz	r6, 8004ce4 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cde:	a802      	add	r0, sp, #8
 8004ce0:	f000 fcfe 	bl	80056e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004ce4:	f7ff fd10 	bl	8004708 <vPortExitCritical>
		vTaskSuspendAll();
 8004ce8:	f000 fb2e 	bl	8005348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cec:	f7ff fcea 	bl	80046c4 <vPortEnterCritical>
 8004cf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004cf4:	2bff      	cmp	r3, #255	; 0xff
 8004cf6:	bf08      	it	eq
 8004cf8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004cfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d00:	2bff      	cmp	r3, #255	; 0xff
 8004d02:	bf08      	it	eq
 8004d04:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004d08:	f7ff fcfe 	bl	8004708 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0c:	a901      	add	r1, sp, #4
 8004d0e:	a802      	add	r0, sp, #8
 8004d10:	f000 fcf2 	bl	80056f8 <xTaskCheckForTimeOut>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d13d      	bne.n	8004d94 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff fdf1 	bl	8004900 <prvIsQueueEmpty>
 8004d1e:	b398      	cbz	r0, 8004d88 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d20:	9901      	ldr	r1, [sp, #4]
 8004d22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d26:	f000 fc7f 	bl	8005628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fe3b 	bl	80049a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d30:	f000 fba4 	bl	800547c <xTaskResumeAll>
 8004d34:	b938      	cbnz	r0, 8004d46 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8004d36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d3a:	f8c9 3000 	str.w	r3, [r9]
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004d48:	f7ff fcbc 	bl	80046c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	d0be      	beq.n	8004cd0 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d52:	4641      	mov	r1, r8
 8004d54:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d56:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d58:	f7ff fe10 	bl	800497c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d5c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	b163      	cbz	r3, 8004d7c <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d62:	f104 0010 	add.w	r0, r4, #16
 8004d66:	f000 fc79 	bl	800565c <xTaskRemoveFromEventList>
 8004d6a:	b138      	cbz	r0, 8004d7c <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <xQueueReceive+0x144>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004d7c:	f7ff fcc4 	bl	8004708 <vPortExitCritical>
				return pdPASS;
 8004d80:	2001      	movs	r0, #1
}
 8004d82:	b005      	add	sp, #20
 8004d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff fe0c 	bl	80049a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d8e:	f000 fb75 	bl	800547c <xTaskResumeAll>
 8004d92:	e7d8      	b.n	8004d46 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8004d94:	4620      	mov	r0, r4
 8004d96:	f7ff fe06 	bl	80049a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d9a:	f000 fb6f 	bl	800547c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff fdae 	bl	8004900 <prvIsQueueEmpty>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d0ce      	beq.n	8004d46 <xQueueReceive+0xce>
 8004da8:	e796      	b.n	8004cd8 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004daa:	f000 fce7 	bl	800577c <xTaskGetSchedulerState>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d082      	beq.n	8004cb8 <xQueueReceive+0x40>
 8004db2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004db4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004db6:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8004dbc <xQueueReceive+0x144>
 8004dba:	e7c5      	b.n	8004d48 <xQueueReceive+0xd0>
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueSemaphoreTake>:
{
 8004dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8004dc4:	4604      	mov	r4, r0
{
 8004dc6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004dc8:	b940      	cbnz	r0, 8004ddc <xQueueSemaphoreTake+0x1c>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	e7fe      	b.n	8004dda <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ddc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004dde:	b145      	cbz	r5, 8004df2 <xQueueSemaphoreTake+0x32>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	e7fe      	b.n	8004df0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004df2:	f000 fcc3 	bl	800577c <xTaskGetSchedulerState>
 8004df6:	b918      	cbnz	r0, 8004e00 <xQueueSemaphoreTake+0x40>
 8004df8:	9d01      	ldr	r5, [sp, #4]
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	f040 8095 	bne.w	8004f2a <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8004e00:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8004f3c <xQueueSemaphoreTake+0x17c>
 8004e04:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8004e06:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8004e08:	f7ff fc5c 	bl	80046c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e0e:	b1e3      	cbz	r3, 8004e4a <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e10:	3b01      	subs	r3, #1
 8004e12:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	b913      	cbnz	r3, 8004e1e <xQueueSemaphoreTake+0x5e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e18:	f000 fdbe 	bl	8005998 <pvTaskIncrementMutexHeldCount>
 8004e1c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	b163      	cbz	r3, 8004e3c <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e22:	f104 0010 	add.w	r0, r4, #16
 8004e26:	f000 fc19 	bl	800565c <xTaskRemoveFromEventList>
 8004e2a:	b138      	cbz	r0, 8004e3c <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8004e2c:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <xQueueSemaphoreTake+0x17c>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004e3c:	f7ff fc64 	bl	8004708 <vPortExitCritical>
				return pdPASS;
 8004e40:	2501      	movs	r5, #1
}
 8004e42:	4628      	mov	r0, r5
 8004e44:	b004      	add	sp, #16
 8004e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	b963      	cbnz	r3, 8004e68 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e4e:	b145      	cbz	r5, 8004e62 <xQueueSemaphoreTake+0xa2>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	e7fe      	b.n	8004e60 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8004e62:	f7ff fc51 	bl	8004708 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004e66:	e7ec      	b.n	8004e42 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8004e68:	b916      	cbnz	r6, 8004e70 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6a:	a802      	add	r0, sp, #8
 8004e6c:	f000 fc38 	bl	80056e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e70:	f7ff fc4a 	bl	8004708 <vPortExitCritical>
		vTaskSuspendAll();
 8004e74:	f000 fa68 	bl	8005348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e78:	f7ff fc24 	bl	80046c4 <vPortEnterCritical>
 8004e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e80:	2bff      	cmp	r3, #255	; 0xff
 8004e82:	bf08      	it	eq
 8004e84:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004e88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e8c:	2bff      	cmp	r3, #255	; 0xff
 8004e8e:	bf08      	it	eq
 8004e90:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004e94:	f7ff fc38 	bl	8004708 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e98:	a901      	add	r1, sp, #4
 8004e9a:	a802      	add	r0, sp, #8
 8004e9c:	f000 fc2c 	bl	80056f8 <xTaskCheckForTimeOut>
 8004ea0:	bb40      	cbnz	r0, 8004ef4 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f7ff fd2c 	bl	8004900 <prvIsQueueEmpty>
 8004ea8:	b1f0      	cbz	r0, 8004ee8 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	b93b      	cbnz	r3, 8004ebe <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8004eae:	f7ff fc09 	bl	80046c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eb2:	68a0      	ldr	r0, [r4, #8]
 8004eb4:	f000 fc72 	bl	800579c <xTaskPriorityInherit>
 8004eb8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004eba:	f7ff fc25 	bl	8004708 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ebe:	9901      	ldr	r1, [sp, #4]
 8004ec0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ec4:	f000 fbb0 	bl	8005628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff fd6c 	bl	80049a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ece:	f000 fad5 	bl	800547c <xTaskResumeAll>
 8004ed2:	b938      	cbnz	r0, 8004ee4 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8004ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ed8:	f8c8 3000 	str.w	r3, [r8]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	2601      	movs	r6, #1
 8004ee6:	e78f      	b.n	8004e08 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7ff fd5c 	bl	80049a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eee:	f000 fac5 	bl	800547c <xTaskResumeAll>
 8004ef2:	e7f7      	b.n	8004ee4 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff fd56 	bl	80049a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004efa:	f000 fabf 	bl	800547c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff fcfe 	bl	8004900 <prvIsQueueEmpty>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0ed      	beq.n	8004ee4 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	d09a      	beq.n	8004e42 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8004f0c:	f7ff fbda 	bl	80046c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f12:	b119      	cbz	r1, 8004f1c <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f1c:	68a0      	ldr	r0, [r4, #8]
 8004f1e:	f000 fce1 	bl	80058e4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8004f22:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8004f24:	f7ff fbf0 	bl	8004708 <vPortExitCritical>
 8004f28:	e78b      	b.n	8004e42 <xQueueSemaphoreTake+0x82>
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	e7fe      	b.n	8004f3a <xQueueSemaphoreTake+0x17a>
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f44:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f46:	f7ff fbbd 	bl	80046c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8004f4c:	4c2d      	ldr	r4, [pc, #180]	; (8005004 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4f2d      	ldr	r7, [pc, #180]	; (8005008 <prvAddNewTaskToReadyList+0xc8>)
 8004f52:	3201      	adds	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	d145      	bne.n	8004fe8 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f5c:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d11c      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f64:	1978      	adds	r0, r7, r5
 8004f66:	3514      	adds	r5, #20
 8004f68:	f7ff fb00 	bl	800456c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f6c:	2d8c      	cmp	r5, #140	; 0x8c
 8004f6e:	d1f9      	bne.n	8004f64 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f70:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005034 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8004f74:	4d25      	ldr	r5, [pc, #148]	; (800500c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8004f76:	4640      	mov	r0, r8
 8004f78:	f7ff faf8 	bl	800456c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7ff faf5 	bl	800456c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f82:	4823      	ldr	r0, [pc, #140]	; (8005010 <prvAddNewTaskToReadyList+0xd0>)
 8004f84:	f7ff faf2 	bl	800456c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f88:	4822      	ldr	r0, [pc, #136]	; (8005014 <prvAddNewTaskToReadyList+0xd4>)
 8004f8a:	f7ff faef 	bl	800456c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f8e:	4822      	ldr	r0, [pc, #136]	; (8005018 <prvAddNewTaskToReadyList+0xd8>)
 8004f90:	f7ff faec 	bl	800456c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <prvAddNewTaskToReadyList+0xdc>)
 8004f96:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f9a:	4b21      	ldr	r3, [pc, #132]	; (8005020 <prvAddNewTaskToReadyList+0xe0>)
 8004f9c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8004fa0:	4921      	ldr	r1, [pc, #132]	; (8005028 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8004fa2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004fa4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004faa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004fac:	2301      	movs	r3, #1
 8004fae:	4093      	lsls	r3, r2
 8004fb0:	4303      	orrs	r3, r0
 8004fb2:	2014      	movs	r0, #20
 8004fb4:	600b      	str	r3, [r1, #0]
 8004fb6:	fb00 7002 	mla	r0, r0, r2, r7
 8004fba:	1d31      	adds	r1, r6, #4
 8004fbc:	f7ff fae4 	bl	8004588 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004fc0:	f7ff fba2 	bl	8004708 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004fc4:	4b19      	ldr	r3, [pc, #100]	; (800502c <prvAddNewTaskToReadyList+0xec>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	b163      	cbz	r3, 8004fe4 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d207      	bcs.n	8004fe4 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <prvAddNewTaskToReadyList+0xf0>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <prvAddNewTaskToReadyList+0xec>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1d6      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004ff6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004ff8:	bf98      	it	ls
 8004ffa:	6026      	strls	r6, [r4, #0]
 8004ffc:	e7cf      	b.n	8004f9e <prvAddNewTaskToReadyList+0x5e>
 8004ffe:	bf00      	nop
 8005000:	200010dc 	.word	0x200010dc
 8005004:	20001044 	.word	0x20001044
 8005008:	20001050 	.word	0x20001050
 800500c:	20001108 	.word	0x20001108
 8005010:	20001124 	.word	0x20001124
 8005014:	20001150 	.word	0x20001150
 8005018:	2000113c 	.word	0x2000113c
 800501c:	20001048 	.word	0x20001048
 8005020:	2000104c 	.word	0x2000104c
 8005024:	200010ec 	.word	0x200010ec
 8005028:	200010f0 	.word	0x200010f0
 800502c:	20001138 	.word	0x20001138
 8005030:	e000ed04 	.word	0xe000ed04
 8005034:	200010f4 	.word	0x200010f4

08005038 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005038:	4a06      	ldr	r2, [pc, #24]	; (8005054 <prvResetNextTaskUnblockTime+0x1c>)
 800503a:	6813      	ldr	r3, [r2, #0]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <prvResetNextTaskUnblockTime+0x20>)
 8005040:	b919      	cbnz	r1, 800504a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800504e:	68d2      	ldr	r2, [r2, #12]
 8005050:	6852      	ldr	r2, [r2, #4]
 8005052:	e7f8      	b.n	8005046 <prvResetNextTaskUnblockTime+0xe>
 8005054:	20001048 	.word	0x20001048
 8005058:	2000111c 	.word	0x2000111c

0800505c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005062:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005064:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8005066:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800506a:	3a01      	subs	r2, #1
 800506c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005070:	4680      	mov	r8, r0
 8005072:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005074:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005078:	b391      	cbz	r1, 80050e0 <prvInitialiseNewTask.isra.2+0x84>
 800507a:	1e4b      	subs	r3, r1, #1
 800507c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8005080:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005082:	7858      	ldrb	r0, [r3, #1]
 8005084:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8005088:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800508c:	b108      	cbz	r0, 8005092 <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800508e:	428b      	cmp	r3, r1
 8005090:	d1f7      	bne.n	8005082 <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005092:	2300      	movs	r3, #0
 8005094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005098:	9d08      	ldr	r5, [sp, #32]
 800509a:	2d06      	cmp	r5, #6
 800509c:	bf28      	it	cs
 800509e:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80050a0:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80050a4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80050a6:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050a8:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80050aa:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ae:	f7ff fa68 	bl	8004582 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b2:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050b6:	f104 0018 	add.w	r0, r4, #24
 80050ba:	f7ff fa62 	bl	8004582 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80050be:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050c6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050c8:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050cc:	464a      	mov	r2, r9
 80050ce:	4641      	mov	r1, r8
 80050d0:	4630      	mov	r0, r6
 80050d2:	f7ff facb 	bl	800466c <pxPortInitialiseStack>
 80050d6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80050d8:	b107      	cbz	r7, 80050dc <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050da:	603c      	str	r4, [r7, #0]
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050e0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80050e4:	e7d8      	b.n	8005098 <prvInitialiseNewTask.isra.2+0x3c>

080050e6 <prvDeleteTCB>:
	{
 80050e6:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050e8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80050ec:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050ee:	b93b      	cbnz	r3, 8005100 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80050f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80050f2:	f7ff fa03 	bl	80044fc <vPortFree>
				vPortFree( pxTCB );
 80050f6:	4620      	mov	r0, r4
	}
 80050f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80050fc:	f7ff b9fe 	b.w	80044fc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005100:	2b01      	cmp	r3, #1
 8005102:	d0f9      	beq.n	80050f8 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005104:	2b02      	cmp	r3, #2
 8005106:	d008      	beq.n	800511a <prvDeleteTCB+0x34>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	e7fe      	b.n	8005118 <prvDeleteTCB+0x32>
 800511a:	bd10      	pop	{r4, pc}

0800511c <prvIdleTask>:
{
 800511c:	b580      	push	{r7, lr}
				taskYIELD();
 800511e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800517c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005122:	4f12      	ldr	r7, [pc, #72]	; (800516c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005124:	4c12      	ldr	r4, [pc, #72]	; (8005170 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8005126:	4d13      	ldr	r5, [pc, #76]	; (8005174 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	b963      	cbnz	r3, 8005146 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <prvIdleTask+0x5c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d9f8      	bls.n	8005126 <prvIdleTask+0xa>
				taskYIELD();
 8005134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005138:	f8c8 3000 	str.w	r3, [r8]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	e7ee      	b.n	8005124 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8005146:	f7ff fabd 	bl	80046c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800514e:	1d30      	adds	r0, r6, #4
 8005150:	f7ff fa3d 	bl	80045ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005160:	f7ff fad2 	bl	8004708 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005164:	4630      	mov	r0, r6
 8005166:	f7ff ffbe 	bl	80050e6 <prvDeleteTCB>
 800516a:	e7dd      	b.n	8005128 <prvIdleTask+0xc>
 800516c:	20001150 	.word	0x20001150
 8005170:	200010e0 	.word	0x200010e0
 8005174:	200010dc 	.word	0x200010dc
 8005178:	20001050 	.word	0x20001050
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005182:	4b1b      	ldr	r3, [pc, #108]	; (80051f0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005184:	4e1b      	ldr	r6, [pc, #108]	; (80051f4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005186:	681d      	ldr	r5, [r3, #0]
{
 8005188:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800518a:	6830      	ldr	r0, [r6, #0]
 800518c:	3004      	adds	r0, #4
{
 800518e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005190:	f7ff fa1d 	bl	80045ce <uxListRemove>
 8005194:	4633      	mov	r3, r6
 8005196:	b940      	cbnz	r0, 80051aa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005198:	6831      	ldr	r1, [r6, #0]
 800519a:	4e17      	ldr	r6, [pc, #92]	; (80051f8 <prvAddCurrentTaskToDelayedList+0x78>)
 800519c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	2001      	movs	r0, #1
 80051a2:	4088      	lsls	r0, r1
 80051a4:	ea22 0200 	bic.w	r2, r2, r0
 80051a8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051aa:	1c62      	adds	r2, r4, #1
 80051ac:	d107      	bne.n	80051be <prvAddCurrentTaskToDelayedList+0x3e>
 80051ae:	b137      	cbz	r7, 80051be <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	4812      	ldr	r0, [pc, #72]	; (80051fc <prvAddCurrentTaskToDelayedList+0x7c>)
 80051b4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ba:	f7ff b9e5 	b.w	8004588 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051be:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051c0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80051c2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051c4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80051c6:	d907      	bls.n	80051d8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c8:	4a0d      	ldr	r2, [pc, #52]	; (8005200 <prvAddCurrentTaskToDelayedList+0x80>)
 80051ca:	6810      	ldr	r0, [r2, #0]
 80051cc:	6819      	ldr	r1, [r3, #0]
}
 80051ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d2:	3104      	adds	r1, #4
 80051d4:	f7ff b9e4 	b.w	80045a0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d8:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <prvAddCurrentTaskToDelayedList+0x84>)
 80051da:	6810      	ldr	r0, [r2, #0]
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	3104      	adds	r1, #4
 80051e0:	f7ff f9de 	bl	80045a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <prvAddCurrentTaskToDelayedList+0x88>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80051ea:	bf38      	it	cc
 80051ec:	601c      	strcc	r4, [r3, #0]
 80051ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f0:	20001164 	.word	0x20001164
 80051f4:	20001044 	.word	0x20001044
 80051f8:	200010f0 	.word	0x200010f0
 80051fc:	2000113c 	.word	0x2000113c
 8005200:	2000104c 	.word	0x2000104c
 8005204:	20001048 	.word	0x20001048
 8005208:	2000111c 	.word	0x2000111c

0800520c <prvTaskIsTaskSuspended.part.0>:
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	e7fe      	b.n	800521c <prvTaskIsTaskSuspended.part.0+0x10>

0800521e <xTaskCreateStatic>:
	{
 800521e:	b570      	push	{r4, r5, r6, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005224:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005226:	b90d      	cbnz	r5, 800522c <xTaskCreateStatic+0xe>
 8005228:	f7ff fff0 	bl	800520c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 800522c:	b944      	cbnz	r4, 8005240 <xTaskCreateStatic+0x22>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	e7fe      	b.n	800523e <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005240:	2654      	movs	r6, #84	; 0x54
 8005242:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005244:	9e05      	ldr	r6, [sp, #20]
 8005246:	2e54      	cmp	r6, #84	; 0x54
 8005248:	d008      	beq.n	800525c <xTaskCreateStatic+0x3e>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	e7fe      	b.n	800525a <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800525c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800525e:	2502      	movs	r5, #2
 8005260:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005264:	ad04      	add	r5, sp, #16
 8005266:	9501      	str	r5, [sp, #4]
 8005268:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800526a:	9402      	str	r4, [sp, #8]
 800526c:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800526e:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005270:	f7ff fef4 	bl	800505c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005274:	4620      	mov	r0, r4
 8005276:	f7ff fe63 	bl	8004f40 <prvAddNewTaskToReadyList>
	}
 800527a:	9804      	ldr	r0, [sp, #16]
 800527c:	b006      	add	sp, #24
 800527e:	bd70      	pop	{r4, r5, r6, pc}

08005280 <xTaskCreate>:
	{
 8005280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005284:	4607      	mov	r7, r0
 8005286:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005288:	0090      	lsls	r0, r2, #2
	{
 800528a:	4688      	mov	r8, r1
 800528c:	4616      	mov	r6, r2
 800528e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005290:	f7ff f8a6 	bl	80043e0 <pvPortMalloc>
			if( pxStack != NULL )
 8005294:	4605      	mov	r5, r0
 8005296:	b1e8      	cbz	r0, 80052d4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005298:	2054      	movs	r0, #84	; 0x54
 800529a:	f7ff f8a1 	bl	80043e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800529e:	4604      	mov	r4, r0
 80052a0:	b1a8      	cbz	r0, 80052ce <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80052aa:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052b0:	9002      	str	r0, [sp, #8]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4632      	mov	r2, r6
 80052b6:	464b      	mov	r3, r9
 80052b8:	4641      	mov	r1, r8
 80052ba:	4638      	mov	r0, r7
 80052bc:	f7ff fece 	bl	800505c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fe3d 	bl	8004f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052c6:	2001      	movs	r0, #1
	}
 80052c8:	b005      	add	sp, #20
 80052ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7ff f914 	bl	80044fc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80052d8:	e7f6      	b.n	80052c8 <xTaskCreate+0x48>
	...

080052dc <vTaskStartScheduler>:
{
 80052dc:	b510      	push	{r4, lr}
 80052de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052e0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052e2:	aa07      	add	r2, sp, #28
 80052e4:	a906      	add	r1, sp, #24
 80052e6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052e8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052ea:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ec:	f000 fce0 	bl	8005cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052f0:	9b05      	ldr	r3, [sp, #20]
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	9400      	str	r4, [sp, #0]
 80052fa:	4623      	mov	r3, r4
 80052fc:	9a07      	ldr	r2, [sp, #28]
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <vTaskStartScheduler+0x58>)
 8005300:	480d      	ldr	r0, [pc, #52]	; (8005338 <vTaskStartScheduler+0x5c>)
 8005302:	f7ff ff8c 	bl	800521e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005306:	b190      	cbz	r0, 800532e <vTaskStartScheduler+0x52>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <vTaskStartScheduler+0x60>)
 800531a:	f04f 32ff 	mov.w	r2, #4294967295
 800531e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <vTaskStartScheduler+0x64>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <vTaskStartScheduler+0x68>)
 8005328:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800532a:	f7ff fa63 	bl	80047f4 <xPortStartScheduler>
}
 800532e:	b008      	add	sp, #32
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	080087ae 	.word	0x080087ae
 8005338:	0800511d 	.word	0x0800511d
 800533c:	2000111c 	.word	0x2000111c
 8005340:	20001138 	.word	0x20001138
 8005344:	20001164 	.word	0x20001164

08005348 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <vTaskSuspendAll+0xc>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	200010e8 	.word	0x200010e8

08005358 <xTaskIncrementTick>:
{
 8005358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800535c:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <xTaskIncrementTick+0xf8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d16d      	bne.n	8005440 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005364:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <xTaskIncrementTick+0xfc>)
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800536a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800536c:	b9bc      	cbnz	r4, 800539e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <xTaskIncrementTick+0x100>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	b142      	cbz	r2, 8005388 <xTaskIncrementTick+0x30>
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	e7fe      	b.n	8005386 <xTaskIncrementTick+0x2e>
 8005388:	4a34      	ldr	r2, [pc, #208]	; (800545c <xTaskIncrementTick+0x104>)
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	6810      	ldr	r0, [r2, #0]
 800538e:	6018      	str	r0, [r3, #0]
 8005390:	6011      	str	r1, [r2, #0]
 8005392:	4a33      	ldr	r2, [pc, #204]	; (8005460 <xTaskIncrementTick+0x108>)
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	f7ff fe4d 	bl	8005038 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800539e:	4d31      	ldr	r5, [pc, #196]	; (8005464 <xTaskIncrementTick+0x10c>)
 80053a0:	4f31      	ldr	r7, [pc, #196]	; (8005468 <xTaskIncrementTick+0x110>)
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	429c      	cmp	r4, r3
 80053a6:	f04f 0b00 	mov.w	fp, #0
 80053aa:	d30a      	bcc.n	80053c2 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ac:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8005458 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80053b0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005478 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b4:	f8da 2000 	ldr.w	r2, [sl]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	b9a2      	cbnz	r2, 80053e6 <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	4b29      	ldr	r3, [pc, #164]	; (800546c <xTaskIncrementTick+0x114>)
 80053c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053c8:	2214      	movs	r2, #20
 80053ca:	434a      	muls	r2, r1
 80053cc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80053ce:	2a02      	cmp	r2, #2
 80053d0:	bf28      	it	cs
 80053d2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <xTaskIncrementTick+0x118>)
 80053d8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80053da:	2a00      	cmp	r2, #0
}
 80053dc:	bf0c      	ite	eq
 80053de:	4658      	moveq	r0, fp
 80053e0:	2001      	movne	r0, #1
 80053e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e6:	f8da 2000 	ldr.w	r2, [sl]
 80053ea:	68d2      	ldr	r2, [r2, #12]
 80053ec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80053f0:	428c      	cmp	r4, r1
 80053f2:	d201      	bcs.n	80053f8 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 80053f4:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053f6:	e7e4      	b.n	80053c2 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f8:	f106 0804 	add.w	r8, r6, #4
 80053fc:	4640      	mov	r0, r8
 80053fe:	f7ff f8e6 	bl	80045ce <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005402:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005404:	b119      	cbz	r1, 800540e <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005406:	f106 0018 	add.w	r0, r6, #24
 800540a:	f7ff f8e0 	bl	80045ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800540e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005410:	f8d9 3000 	ldr.w	r3, [r9]
 8005414:	2201      	movs	r2, #1
 8005416:	fa02 f100 	lsl.w	r1, r2, r0
 800541a:	4319      	orrs	r1, r3
 800541c:	4b13      	ldr	r3, [pc, #76]	; (800546c <xTaskIncrementTick+0x114>)
 800541e:	f8c9 1000 	str.w	r1, [r9]
 8005422:	f04f 0e14 	mov.w	lr, #20
 8005426:	4641      	mov	r1, r8
 8005428:	fb0e 3000 	mla	r0, lr, r0, r3
 800542c:	f7ff f8ac 	bl	8004588 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005430:	6838      	ldr	r0, [r7, #0]
 8005432:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005434:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005436:	4291      	cmp	r1, r2
 8005438:	bf28      	it	cs
 800543a:	f04f 0b01 	movcs.w	fp, #1
 800543e:	e7b9      	b.n	80053b4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8005440:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <xTaskIncrementTick+0x11c>)
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005448:	f04f 0b00 	mov.w	fp, #0
 800544c:	e7c3      	b.n	80053d6 <xTaskIncrementTick+0x7e>
 800544e:	bf00      	nop
 8005450:	200010e8 	.word	0x200010e8
 8005454:	20001164 	.word	0x20001164
 8005458:	20001048 	.word	0x20001048
 800545c:	2000104c 	.word	0x2000104c
 8005460:	20001120 	.word	0x20001120
 8005464:	2000111c 	.word	0x2000111c
 8005468:	20001044 	.word	0x20001044
 800546c:	20001050 	.word	0x20001050
 8005470:	20001168 	.word	0x20001168
 8005474:	200010e4 	.word	0x200010e4
 8005478:	200010f0 	.word	0x200010f0

0800547c <xTaskResumeAll>:
{
 800547c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005480:	4c31      	ldr	r4, [pc, #196]	; (8005548 <xTaskResumeAll+0xcc>)
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	b943      	cbnz	r3, 8005498 <xTaskResumeAll+0x1c>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	e7fe      	b.n	8005496 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005498:	f7ff f914 	bl	80046c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a2:	6824      	ldr	r4, [r4, #0]
 80054a4:	b12c      	cbz	r4, 80054b2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80054a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80054a8:	f7ff f92e 	bl	8004708 <vPortExitCritical>
}
 80054ac:	4620      	mov	r0, r4
 80054ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <xTaskResumeAll+0xd0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f5      	beq.n	80054a6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ba:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005564 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80054be:	4f24      	ldr	r7, [pc, #144]	; (8005550 <xTaskResumeAll+0xd4>)
 80054c0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005568 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c4:	f8d9 3000 	ldr.w	r3, [r9]
 80054c8:	b9e3      	cbnz	r3, 8005504 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80054ca:	b10c      	cbz	r4, 80054d0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80054cc:	f7ff fdb4 	bl	8005038 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054d0:	4d20      	ldr	r5, [pc, #128]	; (8005554 <xTaskResumeAll+0xd8>)
 80054d2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054d4:	b144      	cbz	r4, 80054e8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80054d6:	4e20      	ldr	r6, [pc, #128]	; (8005558 <xTaskResumeAll+0xdc>)
 80054d8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80054da:	f7ff ff3d 	bl	8005358 <xTaskIncrementTick>
 80054de:	b100      	cbz	r0, 80054e2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80054e0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054e2:	3c01      	subs	r4, #1
 80054e4:	d1f9      	bne.n	80054da <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80054e6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <xTaskResumeAll+0xdc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0da      	beq.n	80054a6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <xTaskResumeAll+0xe0>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005500:	2401      	movs	r4, #1
 8005502:	e7d1      	b.n	80054a8 <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005504:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005508:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550c:	f104 0018 	add.w	r0, r4, #24
 8005510:	f7ff f85d 	bl	80045ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005514:	4630      	mov	r0, r6
 8005516:	f7ff f85a 	bl	80045ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800551a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	2501      	movs	r5, #1
 8005520:	fa05 f302 	lsl.w	r3, r5, r2
 8005524:	2014      	movs	r0, #20
 8005526:	430b      	orrs	r3, r1
 8005528:	fb00 8002 	mla	r0, r0, r2, r8
 800552c:	4631      	mov	r1, r6
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	f7ff f82a 	bl	8004588 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <xTaskResumeAll+0xe4>)
 8005536:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800553e:	bf24      	itt	cs
 8005540:	4b05      	ldrcs	r3, [pc, #20]	; (8005558 <xTaskResumeAll+0xdc>)
 8005542:	601d      	strcs	r5, [r3, #0]
 8005544:	e7be      	b.n	80054c4 <xTaskResumeAll+0x48>
 8005546:	bf00      	nop
 8005548:	200010e8 	.word	0x200010e8
 800554c:	200010dc 	.word	0x200010dc
 8005550:	200010f0 	.word	0x200010f0
 8005554:	200010e4 	.word	0x200010e4
 8005558:	20001168 	.word	0x20001168
 800555c:	e000ed04 	.word	0xe000ed04
 8005560:	20001044 	.word	0x20001044
 8005564:	20001124 	.word	0x20001124
 8005568:	20001050 	.word	0x20001050

0800556c <vTaskDelay>:
	{
 800556c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800556e:	b940      	cbnz	r0, 8005582 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <vTaskDelay+0x40>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vTaskDelay+0x44>)
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	b141      	cbz	r1, 800559a <vTaskDelay+0x2e>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	e7fe      	b.n	8005598 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800559a:	f7ff fed5 	bl	8005348 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800559e:	f7ff fdef 	bl	8005180 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80055a2:	f7ff ff6b 	bl	800547c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0e2      	beq.n	8005570 <vTaskDelay+0x4>
 80055aa:	bd08      	pop	{r3, pc}
 80055ac:	e000ed04 	.word	0xe000ed04
 80055b0:	200010e8 	.word	0x200010e8

080055b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055b4:	4b17      	ldr	r3, [pc, #92]	; (8005614 <vTaskSwitchContext+0x60>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b17      	ldr	r3, [pc, #92]	; (8005618 <vTaskSwitchContext+0x64>)
{
 80055ba:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055bc:	b112      	cbz	r2, 80055c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80055be:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80055c4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <vTaskSwitchContext+0x68>)
 80055c8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055ca:	fab3 f383 	clz	r3, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f1c3 031f 	rsb	r3, r3, #31
 80055d4:	2214      	movs	r2, #20
 80055d6:	4912      	ldr	r1, [pc, #72]	; (8005620 <vTaskSwitchContext+0x6c>)
 80055d8:	435a      	muls	r2, r3
 80055da:	1888      	adds	r0, r1, r2
 80055dc:	588c      	ldr	r4, [r1, r2]
 80055de:	b944      	cbnz	r4, 80055f2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	e7fe      	b.n	80055f0 <vTaskSwitchContext+0x3c>
 80055f2:	6844      	ldr	r4, [r0, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	6864      	ldr	r4, [r4, #4]
 80055f8:	6044      	str	r4, [r0, #4]
 80055fa:	440a      	add	r2, r1
 80055fc:	4294      	cmp	r4, r2
 80055fe:	bf04      	itt	eq
 8005600:	6862      	ldreq	r2, [r4, #4]
 8005602:	6042      	streq	r2, [r0, #4]
 8005604:	2214      	movs	r2, #20
 8005606:	fb02 1303 	mla	r3, r2, r3, r1
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <vTaskSwitchContext+0x70>)
 8005610:	e7d6      	b.n	80055c0 <vTaskSwitchContext+0xc>
 8005612:	bf00      	nop
 8005614:	200010e8 	.word	0x200010e8
 8005618:	20001168 	.word	0x20001168
 800561c:	200010f0 	.word	0x200010f0
 8005620:	20001050 	.word	0x20001050
 8005624:	20001044 	.word	0x20001044

08005628 <vTaskPlaceOnEventList>:
{
 8005628:	b510      	push	{r4, lr}
 800562a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800562c:	b940      	cbnz	r0, 8005640 <vTaskPlaceOnEventList+0x18>
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	e7fe      	b.n	800563e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <vTaskPlaceOnEventList+0x30>)
 8005642:	6819      	ldr	r1, [r3, #0]
 8005644:	3118      	adds	r1, #24
 8005646:	f7fe ffab 	bl	80045a0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800564a:	4620      	mov	r0, r4
 800564c:	2101      	movs	r1, #1
}
 800564e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005652:	f7ff bd95 	b.w	8005180 <prvAddCurrentTaskToDelayedList>
 8005656:	bf00      	nop
 8005658:	20001044 	.word	0x20001044

0800565c <xTaskRemoveFromEventList>:
{
 800565c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565e:	68c3      	ldr	r3, [r0, #12]
 8005660:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005662:	b944      	cbnz	r4, 8005676 <xTaskRemoveFromEventList+0x1a>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	e7fe      	b.n	8005674 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005676:	f104 0518 	add.w	r5, r4, #24
 800567a:	4628      	mov	r0, r5
 800567c:	f7fe ffa7 	bl	80045ce <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <xTaskRemoveFromEventList+0x6c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	b9e3      	cbnz	r3, 80056c0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005686:	1d25      	adds	r5, r4, #4
 8005688:	4628      	mov	r0, r5
 800568a:	f7fe ffa0 	bl	80045ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800568e:	490f      	ldr	r1, [pc, #60]	; (80056cc <xTaskRemoveFromEventList+0x70>)
 8005690:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005692:	6808      	ldr	r0, [r1, #0]
 8005694:	2301      	movs	r3, #1
 8005696:	4093      	lsls	r3, r2
 8005698:	4303      	orrs	r3, r0
 800569a:	600b      	str	r3, [r1, #0]
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <xTaskRemoveFromEventList+0x74>)
 800569e:	2014      	movs	r0, #20
 80056a0:	4629      	mov	r1, r5
 80056a2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056a6:	f7fe ff6f 	bl	8004588 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <xTaskRemoveFromEventList+0x78>)
 80056ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80056b4:	bf83      	ittte	hi
 80056b6:	4b08      	ldrhi	r3, [pc, #32]	; (80056d8 <xTaskRemoveFromEventList+0x7c>)
 80056b8:	2001      	movhi	r0, #1
 80056ba:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80056bc:	2000      	movls	r0, #0
}
 80056be:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056c0:	4629      	mov	r1, r5
 80056c2:	4806      	ldr	r0, [pc, #24]	; (80056dc <xTaskRemoveFromEventList+0x80>)
 80056c4:	e7ef      	b.n	80056a6 <xTaskRemoveFromEventList+0x4a>
 80056c6:	bf00      	nop
 80056c8:	200010e8 	.word	0x200010e8
 80056cc:	200010f0 	.word	0x200010f0
 80056d0:	20001050 	.word	0x20001050
 80056d4:	20001044 	.word	0x20001044
 80056d8:	20001168 	.word	0x20001168
 80056dc:	20001124 	.word	0x20001124

080056e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <vTaskInternalSetTimeOutState+0x10>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056e6:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <vTaskInternalSetTimeOutState+0x14>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6043      	str	r3, [r0, #4]
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20001120 	.word	0x20001120
 80056f4:	20001164 	.word	0x20001164

080056f8 <xTaskCheckForTimeOut>:
{
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80056fc:	4605      	mov	r5, r0
 80056fe:	b940      	cbnz	r0, 8005712 <xTaskCheckForTimeOut+0x1a>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	e7fe      	b.n	8005710 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005712:	b941      	cbnz	r1, 8005726 <xTaskCheckForTimeOut+0x2e>
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	e7fe      	b.n	8005724 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005726:	f7fe ffcd 	bl	80046c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800572a:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800572c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800572e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	1c58      	adds	r0, r3, #1
 8005734:	d00e      	beq.n	8005754 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005736:	480d      	ldr	r0, [pc, #52]	; (800576c <xTaskCheckForTimeOut+0x74>)
 8005738:	682e      	ldr	r6, [r5, #0]
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	4286      	cmp	r6, r0
 800573e:	d001      	beq.n	8005744 <xTaskCheckForTimeOut+0x4c>
 8005740:	428a      	cmp	r2, r1
 8005742:	d20e      	bcs.n	8005762 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005744:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005746:	429a      	cmp	r2, r3
 8005748:	d209      	bcs.n	800575e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff ffc6 	bl	80056e0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005754:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005756:	f7fe ffd7 	bl	8004708 <vPortExitCritical>
}
 800575a:	4620      	mov	r0, r4
 800575c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005762:	2401      	movs	r4, #1
 8005764:	e7f7      	b.n	8005756 <xTaskCheckForTimeOut+0x5e>
 8005766:	bf00      	nop
 8005768:	20001164 	.word	0x20001164
 800576c:	20001120 	.word	0x20001120

08005770 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005770:	4b01      	ldr	r3, [pc, #4]	; (8005778 <vTaskMissedYield+0x8>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	4770      	bx	lr
 8005778:	20001168 	.word	0x20001168

0800577c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <xTaskGetSchedulerState+0x18>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b133      	cbz	r3, 8005790 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <xTaskGetSchedulerState+0x1c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005788:	bf0c      	ite	eq
 800578a:	2002      	moveq	r0, #2
 800578c:	2000      	movne	r0, #0
 800578e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005790:	2001      	movs	r0, #1
	}
 8005792:	4770      	bx	lr
 8005794:	20001138 	.word	0x20001138
 8005798:	200010e8 	.word	0x200010e8

0800579c <xTaskPriorityInherit>:
	{
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80057a0:	4604      	mov	r4, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d035      	beq.n	8005812 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057a6:	4a24      	ldr	r2, [pc, #144]	; (8005838 <xTaskPriorityInherit+0x9c>)
 80057a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057aa:	6811      	ldr	r1, [r2, #0]
 80057ac:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80057ae:	428b      	cmp	r3, r1
 80057b0:	4617      	mov	r7, r2
 80057b2:	d237      	bcs.n	8005824 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057b4:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057b6:	4d21      	ldr	r5, [pc, #132]	; (800583c <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057b8:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ba:	bfa1      	itttt	ge
 80057bc:	683a      	ldrge	r2, [r7, #0]
 80057be:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80057c0:	f1c2 0207 	rsbge	r2, r2, #7
 80057c4:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057c6:	2614      	movs	r6, #20
 80057c8:	6942      	ldr	r2, [r0, #20]
 80057ca:	fb06 5303 	mla	r3, r6, r3, r5
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d122      	bne.n	8005818 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d2:	f100 0804 	add.w	r8, r0, #4
 80057d6:	4640      	mov	r0, r8
 80057d8:	f7fe fef9 	bl	80045ce <uxListRemove>
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <xTaskPriorityInherit+0xa4>)
 80057de:	b948      	cbnz	r0, 80057f4 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80057e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80057e2:	4346      	muls	r6, r0
 80057e4:	59aa      	ldr	r2, [r5, r6]
 80057e6:	b92a      	cbnz	r2, 80057f4 <xTaskPriorityInherit+0x58>
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	2101      	movs	r1, #1
 80057ec:	4081      	lsls	r1, r0
 80057ee:	ea22 0201 	bic.w	r2, r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057f4:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80057f6:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057fa:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80057fc:	2401      	movs	r4, #1
 80057fe:	fa04 f002 	lsl.w	r0, r4, r2
 8005802:	4308      	orrs	r0, r1
 8005804:	6018      	str	r0, [r3, #0]
 8005806:	2014      	movs	r0, #20
 8005808:	4641      	mov	r1, r8
 800580a:	fb00 5002 	mla	r0, r0, r2, r5
 800580e:	f7fe febb 	bl	8004588 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8005812:	4620      	mov	r0, r4
	}
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800581e:	2001      	movs	r0, #1
 8005820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005824:	6813      	ldr	r3, [r2, #0]
 8005826:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005828:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800582a:	42a0      	cmp	r0, r4
 800582c:	bf2c      	ite	cs
 800582e:	2000      	movcs	r0, #0
 8005830:	2001      	movcc	r0, #1
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005836:	bf00      	nop
 8005838:	20001044 	.word	0x20001044
 800583c:	20001050 	.word	0x20001050
 8005840:	200010f0 	.word	0x200010f0

08005844 <xTaskPriorityDisinherit>:
	{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005846:	4604      	mov	r4, r0
 8005848:	b908      	cbnz	r0, 800584e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800584a:	2000      	movs	r0, #0
 800584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <xTaskPriorityDisinherit+0x94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4298      	cmp	r0, r3
 8005854:	d008      	beq.n	8005868 <xTaskPriorityDisinherit+0x24>
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	e7fe      	b.n	8005866 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005868:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800586a:	b943      	cbnz	r3, 800587e <xTaskPriorityDisinherit+0x3a>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	e7fe      	b.n	800587c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800587e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005880:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005882:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005884:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005886:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005888:	d0df      	beq.n	800584a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1dd      	bne.n	800584a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588e:	1d05      	adds	r5, r0, #4
 8005890:	4628      	mov	r0, r5
 8005892:	f7fe fe9c 	bl	80045ce <uxListRemove>
 8005896:	4e11      	ldr	r6, [pc, #68]	; (80058dc <xTaskPriorityDisinherit+0x98>)
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <xTaskPriorityDisinherit+0x9c>)
 800589a:	b950      	cbnz	r0, 80058b2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800589c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800589e:	2114      	movs	r1, #20
 80058a0:	4379      	muls	r1, r7
 80058a2:	5873      	ldr	r3, [r6, r1]
 80058a4:	b92b      	cbnz	r3, 80058b2 <xTaskPriorityDisinherit+0x6e>
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	2001      	movs	r0, #1
 80058aa:	40b8      	lsls	r0, r7
 80058ac:	ea23 0300 	bic.w	r3, r3, r0
 80058b0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b6:	f1c3 0107 	rsb	r1, r3, #7
 80058ba:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	2401      	movs	r4, #1
 80058c0:	fa04 f003 	lsl.w	r0, r4, r3
 80058c4:	4308      	orrs	r0, r1
 80058c6:	6010      	str	r0, [r2, #0]
 80058c8:	2014      	movs	r0, #20
 80058ca:	fb00 6003 	mla	r0, r0, r3, r6
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fe fe5a 	bl	8004588 <vListInsertEnd>
					xReturn = pdTRUE;
 80058d4:	4620      	mov	r0, r4
	}
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d8:	20001044 	.word	0x20001044
 80058dc:	20001050 	.word	0x20001050
 80058e0:	200010f0 	.word	0x200010f0

080058e4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80058e6:	4604      	mov	r4, r0
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d04d      	beq.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ec:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80058ee:	b942      	cbnz	r2, 8005902 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	e7fe      	b.n	8005900 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005902:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005904:	4299      	cmp	r1, r3
 8005906:	bf38      	it	cc
 8005908:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800590a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800590c:	428b      	cmp	r3, r1
 800590e:	d03b      	beq.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005910:	2a01      	cmp	r2, #1
 8005912:	d139      	bne.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8005914:	4a1d      	ldr	r2, [pc, #116]	; (800598c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	4290      	cmp	r0, r2
 800591a:	d108      	bne.n	800592e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	e7fe      	b.n	800592c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800592e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005930:	4d17      	ldr	r5, [pc, #92]	; (8005990 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8005932:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005934:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005936:	f04f 0614 	mov.w	r6, #20
 800593a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593c:	bfa8      	it	ge
 800593e:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005942:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005946:	bfa8      	it	ge
 8005948:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800594a:	429a      	cmp	r2, r3
 800594c:	d11c      	bne.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800594e:	1d07      	adds	r7, r0, #4
 8005950:	4638      	mov	r0, r7
 8005952:	f7fe fe3c 	bl	80045ce <uxListRemove>
 8005956:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005958:	4c0e      	ldr	r4, [pc, #56]	; (8005994 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800595a:	b940      	cbnz	r0, 800596e <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800595c:	4356      	muls	r6, r2
 800595e:	59ab      	ldr	r3, [r5, r6]
 8005960:	b92b      	cbnz	r3, 800596e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	4091      	lsls	r1, r2
 8005968:	ea23 0301 	bic.w	r3, r3, r1
 800596c:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800596e:	6821      	ldr	r1, [r4, #0]
 8005970:	2301      	movs	r3, #1
 8005972:	4093      	lsls	r3, r2
 8005974:	430b      	orrs	r3, r1
 8005976:	2014      	movs	r0, #20
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	4639      	mov	r1, r7
 800597c:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8005980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8005984:	f7fe be00 	b.w	8004588 <vListInsertEnd>
 8005988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598a:	bf00      	nop
 800598c:	20001044 	.word	0x20001044
 8005990:	20001050 	.word	0x20001050
 8005994:	200010f0 	.word	0x200010f0

08005998 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <pvTaskIncrementMutexHeldCount+0x14>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	b11a      	cbz	r2, 80059a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80059a2:	3201      	adds	r2, #1
 80059a4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80059a6:	6818      	ldr	r0, [r3, #0]
	}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20001044 	.word	0x20001044

080059b0 <xTaskNotifyWait>:
	{
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059b4:	4c1f      	ldr	r4, [pc, #124]	; (8005a34 <xTaskNotifyWait+0x84>)
	{
 80059b6:	461e      	mov	r6, r3
 80059b8:	4680      	mov	r8, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80059be:	f7fe fe81 	bl	80046c4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d014      	beq.n	80059f6 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d0:	ea22 0208 	bic.w	r2, r2, r8
 80059d4:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	2101      	movs	r1, #1
 80059da:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80059de:	b156      	cbz	r6, 80059f6 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7ff fbcd 	bl	8005180 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <xTaskNotifyWait+0x88>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80059f6:	f7fe fe87 	bl	8004708 <vPortExitCritical>
		taskENTER_CRITICAL();
 80059fa:	f7fe fe63 	bl	80046c4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80059fe:	b115      	cbz	r5, 8005a06 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a04:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0c:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005a0e:	bf01      	itttt	eq
 8005a10:	6823      	ldreq	r3, [r4, #0]
 8005a12:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 8005a14:	43b9      	biceq	r1, r7
 8005a16:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8005a1e:	bf0c      	ite	eq
 8005a20:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8005a22:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8005a28:	f7fe fe6e 	bl	8004708 <vPortExitCritical>
	}
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a32:	bf00      	nop
 8005a34:	20001044 	.word	0x20001044
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <xTaskGenericNotify>:
	{
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	460e      	mov	r6, r1
 8005a40:	4617      	mov	r7, r2
 8005a42:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8005a44:	4604      	mov	r4, r0
 8005a46:	b940      	cbnz	r0, 8005a5a <xTaskGenericNotify+0x1e>
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	e7fe      	b.n	8005a58 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8005a5a:	f7fe fe33 	bl	80046c4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005a5e:	b10d      	cbz	r5, 8005a64 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005a60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005a62:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a64:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a68:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005a6a:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005a6c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 8005a70:	2f04      	cmp	r7, #4
 8005a72:	d816      	bhi.n	8005aa2 <xTaskGenericNotify+0x66>
 8005a74:	e8df f007 	tbb	[pc, r7]
 8005a78:	0507030a 	.word	0x0507030a
 8005a7c:	11          	.byte	0x11
 8005a7d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005a7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005a80:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8005a82:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005a84:	e002      	b.n	8005a8c <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8005a86:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005a88:	3301      	adds	r3, #1
 8005a8a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a8c:	2d01      	cmp	r5, #1
 8005a8e:	d014      	beq.n	8005aba <xTaskGenericNotify+0x7e>
	{
 8005a90:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8005a92:	f7fe fe39 	bl	8004708 <vPortExitCritical>
	}
 8005a96:	4628      	mov	r0, r5
 8005a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a9a:	2d02      	cmp	r5, #2
 8005a9c:	d1f1      	bne.n	8005a82 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	e7f7      	b.n	8005a92 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005aa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	d0f1      	beq.n	8005a8c <xTaskGenericNotify+0x50>
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskGenericNotify+0x7c>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aba:	1d26      	adds	r6, r4, #4
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7fe fd86 	bl	80045ce <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005ac2:	4914      	ldr	r1, [pc, #80]	; (8005b14 <xTaskGenericNotify+0xd8>)
 8005ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ac6:	6808      	ldr	r0, [r1, #0]
 8005ac8:	fa05 f302 	lsl.w	r3, r5, r2
 8005acc:	4303      	orrs	r3, r0
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <xTaskGenericNotify+0xdc>)
 8005ad2:	2014      	movs	r0, #20
 8005ad4:	fb00 3002 	mla	r0, r0, r2, r3
 8005ad8:	4631      	mov	r1, r6
 8005ada:	f7fe fd55 	bl	8004588 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ae0:	b143      	cbz	r3, 8005af4 <xTaskGenericNotify+0xb8>
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	e7fe      	b.n	8005af2 <xTaskGenericNotify+0xb6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <xTaskGenericNotify+0xe0>)
 8005af6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d9c7      	bls.n	8005a90 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <xTaskGenericNotify+0xe4>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	e7bf      	b.n	8005a92 <xTaskGenericNotify+0x56>
 8005b12:	bf00      	nop
 8005b14:	200010f0 	.word	0x200010f0
 8005b18:	20001050 	.word	0x20001050
 8005b1c:	20001044 	.word	0x20001044
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8005b24:	b530      	push	{r4, r5, lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005b26:	2101      	movs	r1, #1
{
 8005b28:	b08b      	sub	sp, #44	; 0x2c
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f001 f962 	bl	8006df4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f001 f933 	bl	8006d9c <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 8005b36:	2000      	movs	r0, #0
 8005b38:	f001 f9d2 	bl	8006ee0 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f001 f9a5 	bl	8006e8c <BSP_PB_GetState>
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <MX_BlueNRG_MS_Init+0x148>)
 8005b44:	4d4a      	ldr	r5, [pc, #296]	; (8005c70 <MX_BlueNRG_MS_Init+0x14c>)
  if (BLE_Role == CLIENT) {
 8005b46:	4c4b      	ldr	r4, [pc, #300]	; (8005c74 <MX_BlueNRG_MS_Init+0x150>)
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005b48:	b2c0      	uxtb	r0, r0
 8005b4a:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	484a      	ldr	r0, [pc, #296]	; (8005c78 <MX_BlueNRG_MS_Init+0x154>)
 8005b50:	f7fe fa62 	bl	8004018 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8005b54:	f10d 011e 	add.w	r1, sp, #30
 8005b58:	f10d 0017 	add.w	r0, sp, #23
 8005b5c:	f7fe f9ca 	bl	8003ef4 <getBlueNRGVersion>
  hci_reset();
 8005b60:	f7fe f9e9 	bl	8003f36 <hci_reset>
  HAL_Delay(100);
 8005b64:	2064      	movs	r0, #100	; 0x64
 8005b66:	f7fc f8a1 	bl	8001cac <HAL_Delay>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8005b6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005b6e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8005b72:	4842      	ldr	r0, [pc, #264]	; (8005c7c <MX_BlueNRG_MS_Init+0x158>)
 8005b74:	f001 fdb8 	bl	80076e8 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8005b78:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005b7c:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 8005b7e:	bf84      	itt	hi
 8005b80:	2301      	movhi	r3, #1
 8005b82:	702b      	strbhi	r3, [r5, #0]
  if (BLE_Role == CLIENT) {
 8005b84:	7823      	ldrb	r3, [r4, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d156      	bne.n	8005c38 <MX_BlueNRG_MS_Init+0x114>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8005b8a:	22bb      	movs	r2, #187	; 0xbb
 8005b8c:	f88d 2020 	strb.w	r2, [sp, #32]
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005b90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005b94:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8005b98:	23e1      	movs	r3, #225	; 0xe1
 8005b9a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ba4:	2106      	movs	r1, #6
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005ba6:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ba8:	aa08      	add	r2, sp, #32
 8005baa:	2000      	movs	r0, #0
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005bac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005bb0:	f7fe f948 	bl	8003e44 <aci_hal_write_config_data>
  if (ret) {
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	b110      	cbz	r0, 8005bbe <MX_BlueNRG_MS_Init+0x9a>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8005bb8:	4831      	ldr	r0, [pc, #196]	; (8005c80 <MX_BlueNRG_MS_Init+0x15c>)
 8005bba:	f001 fd95 	bl	80076e8 <iprintf>
  ret = aci_gatt_init();    
 8005bbe:	f7fe f881 	bl	8003cc4 <aci_gatt_init>
  if (ret) {
 8005bc2:	b110      	cbz	r0, 8005bca <MX_BlueNRG_MS_Init+0xa6>
    printf("GATT_Init failed.\n");
 8005bc4:	482f      	ldr	r0, [pc, #188]	; (8005c84 <MX_BlueNRG_MS_Init+0x160>)
 8005bc6:	f001 fe17 	bl	80077f8 <puts>
  if (BLE_Role == SERVER) {
 8005bca:	7820      	ldrb	r0, [r4, #0]
 8005bcc:	2801      	cmp	r0, #1
 8005bce:	ab07      	add	r3, sp, #28
 8005bd0:	f10d 021a 	add.w	r2, sp, #26
 8005bd4:	d139      	bne.n	8005c4a <MX_BlueNRG_MS_Init+0x126>
    if (bnrg_expansion_board == IDB05A1) {
 8005bd6:	782d      	ldrb	r5, [r5, #0]
 8005bd8:	2d01      	cmp	r5, #1
 8005bda:	d132      	bne.n	8005c42 <MX_BlueNRG_MS_Init+0x11e>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005bdc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005be0:	2100      	movs	r1, #0
 8005be2:	ab06      	add	r3, sp, #24
 8005be4:	2207      	movs	r2, #7
 8005be6:	4628      	mov	r0, r5
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005be8:	f7fd ffb1 	bl	8003b4e <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 8005bec:	b110      	cbz	r0, 8005bf4 <MX_BlueNRG_MS_Init+0xd0>
    printf("GAP_Init failed.\n");
 8005bee:	4826      	ldr	r0, [pc, #152]	; (8005c88 <MX_BlueNRG_MS_Init+0x164>)
 8005bf0:	f001 fe02 	bl	80077f8 <puts>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <MX_BlueNRG_MS_Init+0x168>)
 8005bf6:	9302      	str	r3, [sp, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	9003      	str	r0, [sp, #12]
 8005c02:	9201      	str	r2, [sp, #4]
 8005c04:	2307      	movs	r3, #7
 8005c06:	4611      	mov	r1, r2
 8005c08:	f7fe f81c 	bl	8003c44 <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 8005c0c:	b910      	cbnz	r0, 8005c14 <MX_BlueNRG_MS_Init+0xf0>
    printf("BLE Stack Initialized.\n");
 8005c0e:	4820      	ldr	r0, [pc, #128]	; (8005c90 <MX_BlueNRG_MS_Init+0x16c>)
 8005c10:	f001 fdf2 	bl	80077f8 <puts>
  if (BLE_Role == SERVER) {
 8005c14:	7823      	ldrb	r3, [r4, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d126      	bne.n	8005c68 <MX_BlueNRG_MS_Init+0x144>
    printf("SERVER: BLE Stack Initialized\n");
 8005c1a:	481e      	ldr	r0, [pc, #120]	; (8005c94 <MX_BlueNRG_MS_Init+0x170>)
 8005c1c:	f001 fdec 	bl	80077f8 <puts>
    ret = Add_Sample_Service();
 8005c20:	f000 fea4 	bl	800696c <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS)
 8005c24:	b9f0      	cbnz	r0, 8005c64 <MX_BlueNRG_MS_Init+0x140>
      printf("Service added successfully.\n");
 8005c26:	481c      	ldr	r0, [pc, #112]	; (8005c98 <MX_BlueNRG_MS_Init+0x174>)
    printf("CLIENT: BLE Stack Initialized\n");
 8005c28:	f001 fde6 	bl	80077f8 <puts>
  ret = aci_hal_set_tx_power_level(1,4);
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f7fe f93a 	bl	8003ea8 <aci_hal_set_tx_power_level>
}
 8005c34:	b00b      	add	sp, #44	; 0x2c
 8005c36:	bd30      	pop	{r4, r5, pc}
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005c38:	23aa      	movs	r3, #170	; 0xaa
 8005c3a:	f88d 3020 	strb.w	r3, [sp, #32]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e7a6      	b.n	8005b90 <MX_BlueNRG_MS_Init+0x6c>
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005c42:	a906      	add	r1, sp, #24
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005c44:	f7fd ffc1 	bl	8003bca <aci_gap_init_IDB04A1>
 8005c48:	e7d0      	b.n	8005bec <MX_BlueNRG_MS_Init+0xc8>
    if (bnrg_expansion_board == IDB05A1) {
 8005c4a:	7829      	ldrb	r1, [r5, #0]
 8005c4c:	2901      	cmp	r1, #1
 8005c4e:	d106      	bne.n	8005c5e <MX_BlueNRG_MS_Init+0x13a>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005c50:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005c54:	2100      	movs	r1, #0
 8005c56:	ab06      	add	r3, sp, #24
 8005c58:	2207      	movs	r2, #7
 8005c5a:	2004      	movs	r0, #4
 8005c5c:	e7c4      	b.n	8005be8 <MX_BlueNRG_MS_Init+0xc4>
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005c5e:	a906      	add	r1, sp, #24
 8005c60:	2003      	movs	r0, #3
 8005c62:	e7ef      	b.n	8005c44 <MX_BlueNRG_MS_Init+0x120>
      printf("Error while adding service.\n");
 8005c64:	480d      	ldr	r0, [pc, #52]	; (8005c9c <MX_BlueNRG_MS_Init+0x178>)
 8005c66:	e7df      	b.n	8005c28 <MX_BlueNRG_MS_Init+0x104>
    printf("CLIENT: BLE Stack Initialized\n");
 8005c68:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <MX_BlueNRG_MS_Init+0x17c>)
 8005c6a:	e7dd      	b.n	8005c28 <MX_BlueNRG_MS_Init+0x104>
 8005c6c:	2000000d 	.word	0x2000000d
 8005c70:	2000116c 	.word	0x2000116c
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	08006b4d 	.word	0x08006b4d
 8005c7c:	080087b3 	.word	0x080087b3
 8005c80:	080087c7 	.word	0x080087c7
 8005c84:	080087e7 	.word	0x080087e7
 8005c88:	080087f9 	.word	0x080087f9
 8005c8c:	0001e240 	.word	0x0001e240
 8005c90:	0800880a 	.word	0x0800880a
 8005c94:	08008821 	.word	0x08008821
 8005c98:	0800883f 	.word	0x0800883f
 8005c9c:	0800885b 	.word	0x0800885b
 8005ca0:	08008877 	.word	0x08008877

08005ca4 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8005ca4:	4b01      	ldr	r3, [pc, #4]	; (8005cac <BSP_PB_Callback+0x8>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	4770      	bx	lr
 8005cac:	2000116d 	.word	0x2000116d

08005cb0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <vApplicationGetIdleTaskMemory+0x10>)
 8005cb2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <vApplicationGetIdleTaskMemory+0x14>)
 8005cb6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20001370 	.word	0x20001370
 8005cc4:	20001170 	.word	0x20001170

08005cc8 <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <HCI_TL_SPI_Init+0x60>)
{
 8005cca:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8005cd6:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cde:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8005ce0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ce4:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <HCI_TL_SPI_Init+0x64>)
 8005ce6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8005ce8:	a901      	add	r1, sp, #4
 8005cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8005cee:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8005cf2:	f7fc f867 	bl	8001dc4 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8005cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8005cfa:	a901      	add	r1, sp, #4
 8005cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8005d00:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d02:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d04:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d06:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8005d08:	f7fc f85c 	bl	8001dc4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8005d0c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005d0e:	a901      	add	r1, sp, #4
 8005d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8005d14:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d16:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d18:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005d1c:	f7fc f852 	bl	8001dc4 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8005d20:	f001 f96c 	bl	8006ffc <BSP_SPI1_Init>
}
 8005d24:	b007      	add	sp, #28
 8005d26:	bd30      	pop	{r4, r5, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	10110000 	.word	0x10110000

08005d30 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8005d30:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8005d32:	2101      	movs	r1, #1
 8005d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d38:	f7fc f920 	bl	8001f7c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d42:	f7fc f91b 	bl	8001f7c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8005d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d4e:	f7fc f915 	bl	8001f7c <HAL_GPIO_DeInit>
  return 0;
}
 8005d52:	2000      	movs	r0, #0
 8005d54:	bd08      	pop	{r3, pc}

08005d56 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8005d56:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d62:	f7fc f99b 	bl	800209c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8005d66:	2005      	movs	r0, #5
 8005d68:	f7fb ffa0 	bl	8001cac <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d76:	f7fc f991 	bl	800209c <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8005d7a:	2005      	movs	r0, #5
 8005d7c:	f7fb ff96 	bl	8001cac <HAL_Delay>
  return 0;
}  
 8005d80:	2000      	movs	r0, #0
 8005d82:	bd08      	pop	{r3, pc}

08005d84 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d86:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8005d88:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 8005d8a:	23ff      	movs	r3, #255	; 0xff
 8005d8c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005d90:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8005d92:	230b      	movs	r3, #11
{
 8005d94:	4607      	mov	r7, r0
 8005d96:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d9c:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8005d9e:	f88d 3008 	strb.w	r3, [sp, #8]
 8005da2:	f88d 4009 	strb.w	r4, [sp, #9]
 8005da6:	f88d 400a 	strb.w	r4, [sp, #10]
 8005daa:	f88d 400b 	strb.w	r4, [sp, #11]
 8005dae:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005db2:	f7fc f973 	bl	800209c <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8005db6:	2205      	movs	r2, #5
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	a802      	add	r0, sp, #8
 8005dbc:	f001 f8e6 	bl	8006f8c <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8005dc0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d122      	bne.n	8005e0e <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8005dc8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8005dcc:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8005dd0:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8005dd4:	d007      	beq.n	8005de6 <HCI_TL_SPI_Receive+0x62>
 8005dd6:	42ae      	cmp	r6, r5
 8005dd8:	bf28      	it	cs
 8005dda:	462e      	movcs	r6, r5
 8005ddc:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 8005dde:	42b5      	cmp	r5, r6
 8005de0:	f104 0401 	add.w	r4, r4, #1
 8005de4:	d308      	bcc.n	8005df8 <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005de6:	2201      	movs	r2, #1
 8005de8:	2102      	movs	r1, #2
 8005dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dee:	f7fc f955 	bl	800209c <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8005df2:	4628      	mov	r0, r5
 8005df4:	b007      	add	sp, #28
 8005df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f10d 0107 	add.w	r1, sp, #7
 8005dfe:	f10d 0006 	add.w	r0, sp, #6
 8005e02:	f001 f8c3 	bl	8006f8c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8005e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e0a:	557b      	strb	r3, [r7, r5]
 8005e0c:	e7e6      	b.n	8005ddc <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 8005e0e:	4625      	mov	r5, r4
 8005e10:	e7e9      	b.n	8005de6 <HCI_TL_SPI_Receive+0x62>
	...

08005e14 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8005e14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005e18:	230a      	movs	r3, #10
 8005e1a:	f88d 3000 	strb.w	r3, [sp]
 8005e1e:	2300      	movs	r3, #0
{  
 8005e20:	4607      	mov	r7, r0
 8005e22:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005e24:	f88d 3001 	strb.w	r3, [sp, #1]
 8005e28:	f88d 3002 	strb.w	r3, [sp, #2]
 8005e2c:	f88d 3003 	strb.w	r3, [sp, #3]
 8005e30:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7fb ff34 	bl	8001ca0 <HAL_GetTick>
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8005e38:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005ea4 <HCI_TL_SPI_Send+0x90>
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2102      	movs	r1, #2
 8005e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e46:	f7fc f929 	bl	800209c <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	a902      	add	r1, sp, #8
 8005e4e:	4668      	mov	r0, sp
 8005e50:	f001 f89c 	bl	8006f8c <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8005e54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d11a      	bne.n	8005e92 <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 8005e5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005e60:	42ab      	cmp	r3, r5
 8005e62:	d319      	bcc.n	8005e98 <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8005e64:	462a      	mov	r2, r5
 8005e66:	4641      	mov	r1, r8
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f001 f88f 	bl	8006f8c <BSP_SPI1_SendRecv>
    result = 0;
 8005e6e:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005e70:	2201      	movs	r2, #1
 8005e72:	2102      	movs	r1, #2
 8005e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e78:	f7fc f910 	bl	800209c <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8005e7c:	f7fb ff10 	bl	8001ca0 <HAL_GetTick>
 8005e80:	1b80      	subs	r0, r0, r6
 8005e82:	280f      	cmp	r0, #15
 8005e84:	d80b      	bhi.n	8005e9e <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8005e86:	2c00      	cmp	r4, #0
 8005e88:	d1d9      	bne.n	8005e3e <HCI_TL_SPI_Send+0x2a>
  
  return result;
}
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	b004      	add	sp, #16
 8005e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = -1;
 8005e92:	f04f 34ff 	mov.w	r4, #4294967295
 8005e96:	e7eb      	b.n	8005e70 <HCI_TL_SPI_Send+0x5c>
        result = -2;
 8005e98:	f06f 0401 	mvn.w	r4, #1
 8005e9c:	e7e8      	b.n	8005e70 <HCI_TL_SPI_Send+0x5c>
      result = -3;
 8005e9e:	f06f 0402 	mvn.w	r4, #2
  return result;
 8005ea2:	e7f2      	b.n	8005e8a <HCI_TL_SPI_Send+0x76>
 8005ea4:	200013c4 	.word	0x200013c4

08005ea8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8005ea8:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8005eaa:	2101      	movs	r1, #1
 8005eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005eb0:	f7fc f8ee 	bl	8002090 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8005eb4:	2801      	cmp	r0, #1
 8005eb6:	d104      	bne.n	8005ec2 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f7fe f9a5 	bl	8004208 <hci_notify_asynch_evt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0f3      	beq.n	8005eaa <hci_tl_lowlevel_isr+0x2>
 8005ec2:	bd08      	pop	{r3, pc}

08005ec4 <hci_tl_lowlevel_init>:
{
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8005ec8:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <hci_tl_lowlevel_init+0x4c>)
 8005eca:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <hci_tl_lowlevel_init+0x50>)
 8005ece:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <hci_tl_lowlevel_init+0x54>)
 8005ed2:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <hci_tl_lowlevel_init+0x58>)
 8005ed6:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8005ed8:	4c11      	ldr	r4, [pc, #68]	; (8005f20 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <hci_tl_lowlevel_init+0x60>)
 8005edc:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8005ede:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8005ee0:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <hci_tl_lowlevel_init+0x64>)
 8005ee2:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8005ee4:	f7fe f8c2 	bl	800406c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8005ee8:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8005eec:	4620      	mov	r0, r4
 8005eee:	f7fb ff4b 	bl	8001d88 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8005ef2:	4a0e      	ldr	r2, [pc, #56]	; (8005f2c <hci_tl_lowlevel_init+0x68>)
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7fb ff40 	bl	8001d7c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005efc:	2200      	movs	r2, #0
 8005efe:	4611      	mov	r1, r2
 8005f00:	2006      	movs	r0, #6
 8005f02:	f7fb fef9 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005f06:	2006      	movs	r0, #6
 8005f08:	f7fb ff2a 	bl	8001d60 <HAL_NVIC_EnableIRQ>
}
 8005f0c:	b008      	add	sp, #32
 8005f0e:	bd10      	pop	{r4, pc}
 8005f10:	08005cc9 	.word	0x08005cc9
 8005f14:	08005d31 	.word	0x08005d31
 8005f18:	08005e15 	.word	0x08005e15
 8005f1c:	08005d85 	.word	0x08005d85
 8005f20:	200014f4 	.word	0x200014f4
 8005f24:	08005d57 	.word	0x08005d57
 8005f28:	08006fb5 	.word	0x08006fb5
 8005f2c:	08005ea9 	.word	0x08005ea9

08005f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b09c      	sub	sp, #112	; 0x70
 8005f34:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f36:	f7fb fe91 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f3a:	f000 f875 	bl	8006028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f3e:	f000 f933 	bl	80061a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005f42:	f000 f8fd 	bl	8006140 <MX_USART3_UART_Init>
  MX_BlueNRG_MS_Init();
 8005f46:	f7ff fded 	bl	8005b24 <MX_BlueNRG_MS_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutexHandle = xSemaphoreCreateMutex();
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f7fe fe88 	bl	8004c60 <xQueueCreateMutex>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <main+0xd0>)
 8005f54:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  msgQueueHandle = xQueueCreate(5, sizeof(uartData));
 8005f56:	2200      	movs	r2, #0
 8005f58:	2132      	movs	r1, #50	; 0x32
 8005f5a:	2005      	movs	r0, #5
 8005f5c:	f7fe fd9c 	bl	8004a98 <xQueueGenericCreate>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b28      	ldr	r3, [pc, #160]	; (8006004 <main+0xd4>)
 8005f64:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <main+0xd8>)
 8005f68:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8005f6c:	461d      	mov	r5, r3
 8005f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005f7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe f9d8 	bl	8004336 <osThreadCreate>
 8005f86:	4602      	mov	r2, r0
 8005f88:	4b20      	ldr	r3, [pc, #128]	; (800600c <main+0xdc>)
 8005f8a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readingTask, ReadingTaskThread, osPriorityNormal, 0, 128);
 8005f8c:	4b20      	ldr	r3, [pc, #128]	; (8006010 <main+0xe0>)
 8005f8e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8005f92:	461d      	mov	r5, r3
 8005f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	readingTaskHandle = osThreadCreate(osThread(readingTask), NULL);
 8005fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f9c5 	bl	8004336 <osThreadCreate>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b19      	ldr	r3, [pc, #100]	; (8006014 <main+0xe4>)
 8005fb0:	601a      	str	r2, [r3, #0]

	osThreadDef(presentationTask, PresentationTaskThread, osPriorityNormal, 0, 128);
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <main+0xe8>)
 8005fb4:	f107 041c 	add.w	r4, r7, #28
 8005fb8:	461d      	mov	r5, r3
 8005fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	presentationTaskHandle = osThreadCreate(osThread(presentationTask), NULL);
 8005fc6:	f107 031c 	add.w	r3, r7, #28
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe f9b2 	bl	8004336 <osThreadCreate>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <main+0xec>)
 8005fd6:	601a      	str	r2, [r3, #0]

	osThreadDef(communicationTask, CommunicationTaskThread, osPriorityLow, 0, 128);
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <main+0xf0>)
 8005fda:	463c      	mov	r4, r7
 8005fdc:	461d      	mov	r5, r3
 8005fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	communicationTaskHandle = osThreadCreate(osThread(communicationTask), NULL);
 8005fea:	463b      	mov	r3, r7
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe f9a1 	bl	8004336 <osThreadCreate>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <main+0xf4>)
 8005ff8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005ffa:	f7fe f997 	bl	800432c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005ffe:	e7fe      	b.n	8005ffe <main+0xce>
 8006000:	20000130 	.word	0x20000130
 8006004:	20000134 	.word	0x20000134
 8006008:	08008618 	.word	0x08008618
 800600c:	20000120 	.word	0x20000120
 8006010:	08008640 	.word	0x08008640
 8006014:	20000124 	.word	0x20000124
 8006018:	08008670 	.word	0x08008670
 800601c:	20000128 	.word	0x20000128
 8006020:	080086a0 	.word	0x080086a0
 8006024:	2000012c 	.word	0x2000012c

08006028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0b8      	sub	sp, #224	; 0xe0
 800602c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800602e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006032:	2244      	movs	r2, #68	; 0x44
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f001 faa1 	bl	800757e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800603c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	60da      	str	r2, [r3, #12]
 800604a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800604c:	463b      	mov	r3, r7
 800604e:	2288      	movs	r2, #136	; 0x88
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fa93 	bl	800757e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006058:	2302      	movs	r3, #2
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800605e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006066:	2310      	movs	r3, #16
 8006068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800606c:	2302      	movs	r3, #2
 800606e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006072:	2302      	movs	r3, #2
 8006074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006078:	2301      	movs	r3, #1
 800607a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800607e:	230a      	movs	r3, #10
 8006080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006084:	2307      	movs	r3, #7
 8006086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800608a:	2302      	movs	r3, #2
 800608c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006090:	2302      	movs	r3, #2
 8006092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006096:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800609a:	4618      	mov	r0, r3
 800609c:	f7fc f8d8 	bl	8002250 <HAL_RCC_OscConfig>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80060b0:	f000 fc2a 	bl	8006908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060b4:	230f      	movs	r3, #15
 80060b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060ba:	2303      	movs	r3, #3
 80060bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80060d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80060d6:	2104      	movs	r1, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fc fb3f 	bl	800275c <HAL_RCC_ClockConfig>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80060ee:	f000 fc0b 	bl	8006908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80060f2:	2306      	movs	r3, #6
 80060f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80060fa:	2300      	movs	r3, #0
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060fe:	463b      	mov	r3, r7
 8006100:	4618      	mov	r0, r3
 8006102:	f7fc fd15 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8006116:	f000 fbf7 	bl	8006908 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800611a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800611e:	f7fb ffd1 	bl	80020c4 <HAL_PWREx_ControlVoltageScaling>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8006132:	f000 fbe9 	bl	8006908 <Error_Handler>
  }
}
 8006136:	bf00      	nop
 8006138:	37e0      	adds	r7, #224	; 0xe0
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006146:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <MX_USART3_UART_Init+0x64>)
 8006148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 800614c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006154:	2200      	movs	r2, #0
 8006156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 800615a:	2200      	movs	r2, #0
 800615c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006166:	220c      	movs	r2, #12
 8006168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 800616c:	2200      	movs	r2, #0
 800616e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006172:	2200      	movs	r2, #0
 8006174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006178:	2200      	movs	r2, #0
 800617a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800617c:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 800617e:	2200      	movs	r2, #0
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006182:	4807      	ldr	r0, [pc, #28]	; (80061a0 <MX_USART3_UART_Init+0x60>)
 8006184:	f7fd fcb5 	bl	8003af2 <HAL_UART_Init>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8006198:	f000 fbb6 	bl	8006908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200000a0 	.word	0x200000a0
 80061a4:	40004800 	.word	0x40004800

080061a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061be:	4a3a      	ldr	r2, [pc, #232]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061c0:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c4:	f043 0304 	orr.w	r3, r3, #4
 80061c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061ca:	4b37      	ldr	r3, [pc, #220]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061d6:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061d8:	4b33      	ldr	r3, [pc, #204]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ee:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061f0:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061fa:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <MX_GPIO_Init+0x100>)
 80061fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006206:	4a28      	ldr	r2, [pc, #160]	; (80062a8 <MX_GPIO_Init+0x100>)
 8006208:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <MX_GPIO_Init+0x100>)
 800620a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006212:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <MX_GPIO_Init+0x100>)
 8006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800621e:	2200      	movs	r2, #0
 8006220:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006228:	f7fb ff38 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800622c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006232:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <MX_GPIO_Init+0x104>)
 8006234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4619      	mov	r1, r3
 8006240:	481b      	ldr	r0, [pc, #108]	; (80062b0 <MX_GPIO_Init+0x108>)
 8006242:	f7fb fdbf 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006246:	2301      	movs	r3, #1
 8006248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <MX_GPIO_Init+0x10c>)
 800624c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006252:	f107 0314 	add.w	r3, r7, #20
 8006256:	4619      	mov	r1, r3
 8006258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800625c:	f7fb fdb2 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8006260:	f44f 7391 	mov.w	r3, #290	; 0x122
 8006264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006266:	2301      	movs	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	4619      	mov	r1, r3
 8006278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800627c:	f7fb fda2 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8006280:	2200      	movs	r2, #0
 8006282:	2105      	movs	r1, #5
 8006284:	2006      	movs	r0, #6
 8006286:	f7fb fd37 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800628a:	2006      	movs	r0, #6
 800628c:	f7fb fd68 	bl	8001d60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006290:	2200      	movs	r2, #0
 8006292:	2105      	movs	r1, #5
 8006294:	2028      	movs	r0, #40	; 0x28
 8006296:	f7fb fd2f 	bl	8001cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800629a:	2028      	movs	r0, #40	; 0x28
 800629c:	f7fb fd60 	bl	8001d60 <HAL_NVIC_EnableIRQ>

}
 80062a0:	bf00      	nop
 80062a2:	3728      	adds	r7, #40	; 0x28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40021000 	.word	0x40021000
 80062ac:	10210000 	.word	0x10210000
 80062b0:	48000800 	.word	0x48000800
 80062b4:	10110000 	.word	0x10110000

080062b8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	xTaskNotify(readingTaskHandle, 0x01, eSetBits);
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <StartDefaultTask+0x20>)
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	2201      	movs	r2, #1
 80062c8:	2101      	movs	r1, #1
 80062ca:	f7ff fbb7 	bl	8005a3c <xTaskGenericNotify>
	osDelay(delayTime);
 80062ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80062d2:	f7fe f858 	bl	8004386 <osDelay>
	xTaskNotify(readingTaskHandle, 0x01, eSetBits);
 80062d6:	e7f3      	b.n	80062c0 <StartDefaultTask+0x8>
 80062d8:	20000124 	.word	0x20000124

080062dc <ReadingTaskThread>:
}


/* USER CODE BEGIN 6 */
void ReadingTaskThread(void const * argument)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
//		sprintf(uartData, "ReadingTask sie wykonuje!\r\n");
//		xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uartData, strlen(uartData), 10);
//		xSemaphoreGive(uartMutexHandle);

		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 80062e4:	f107 020c 	add.w	r2, r7, #12
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	21ff      	movs	r1, #255	; 0xff
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7ff fb5e 	bl	80059b0 <xTaskNotifyWait>
		if((notifValue&0x01) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task supervisora
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f2      	beq.n	80062e4 <ReadingTaskThread+0x8>
		{
		  if(whichSensorWrites % sensorObjectCount == 0)
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <ReadingTaskThread+0x70>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <ReadingTaskThread+0x74>)
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	fbb3 f1f2 	udiv	r1, r3, r2
 800630a:	fb02 f201 	mul.w	r2, r2, r1
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <ReadingTaskThread+0x42>
		  {
			  s1.performReadFromSensor();
 8006316:	480f      	ldr	r0, [pc, #60]	; (8006354 <ReadingTaskThread+0x78>)
 8006318:	f000 f94c 	bl	80065b4 <_ZN6Sensor21performReadFromSensorEv>
 800631c:	e00e      	b.n	800633c <ReadingTaskThread+0x60>
		  }
		  else if (whichSensorWrites % sensorObjectCount == 1)
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <ReadingTaskThread+0x70>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <ReadingTaskThread+0x74>)
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	fbb3 f1f2 	udiv	r1, r3, r2
 800632a:	fb02 f201 	mul.w	r2, r2, r1
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d102      	bne.n	800633c <ReadingTaskThread+0x60>
		  {
			  s2.performReadFromSensor();
 8006336:	4808      	ldr	r0, [pc, #32]	; (8006358 <ReadingTaskThread+0x7c>)
 8006338:	f000 f93c 	bl	80065b4 <_ZN6Sensor21performReadFromSensorEv>
		  }
		  //Wyslij sygnal do taska od prezentacji ze powinien teraz sie uruchomic
		  xTaskNotify(presentationTaskHandle, 0x02, eSetBits);
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <ReadingTaskThread+0x80>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	2300      	movs	r3, #0
 8006342:	2201      	movs	r2, #1
 8006344:	2102      	movs	r1, #2
 8006346:	f7ff fb79 	bl	8005a3c <xTaskGenericNotify>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 800634a:	e7cb      	b.n	80062e4 <ReadingTaskThread+0x8>
 800634c:	20000139 	.word	0x20000139
 8006350:	20000138 	.word	0x20000138
 8006354:	20000180 	.word	0x20000180
 8006358:	20000188 	.word	0x20000188
 800635c:	20000128 	.word	0x20000128

08006360 <PresentationTaskThread>:
		}
	}
}

void PresentationTaskThread(void const * argument)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
//		xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uartData, strlen(uartData), 10);
//		xSemaphoreGive(uartMutexHandle);

		//Czekaj na sygnal od taska odczytu
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8006368:	f107 0208 	add.w	r2, r7, #8
 800636c:	f04f 33ff 	mov.w	r3, #4294967295
 8006370:	21ff      	movs	r1, #255	; 0xff
 8006372:	2000      	movs	r0, #0
 8006374:	f7ff fb1c 	bl	80059b0 <xTaskNotifyWait>
		if((notifValue&0x02) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task odczytu
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f2      	beq.n	8006368 <PresentationTaskThread+0x8>
		{
			uint8_t which = whichSensorWrites % sensorObjectCount;
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <PresentationTaskThread+0x68>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4a11      	ldr	r2, [pc, #68]	; (80063cc <PresentationTaskThread+0x6c>)
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	fbb3 f1f2 	udiv	r1, r3, r2
 800638e:	fb02 f201 	mul.w	r2, r2, r1
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	73fb      	strb	r3, [r7, #15]
			presentDataFromSensor(which);
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f9bd 	bl	8006718 <presentDataFromSensor>
			if(++whichSensorWrites == sensorObjectCount){
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <PresentationTaskThread+0x68>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <PresentationTaskThread+0x68>)
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <PresentationTaskThread+0x68>)
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	4b07      	ldr	r3, [pc, #28]	; (80063cc <PresentationTaskThread+0x6c>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0d3      	beq.n	8006368 <PresentationTaskThread+0x8>
				whichSensorWrites = 0;
 80063c0:	4b01      	ldr	r3, [pc, #4]	; (80063c8 <PresentationTaskThread+0x68>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 80063c6:	e7cf      	b.n	8006368 <PresentationTaskThread+0x8>
 80063c8:	20000139 	.word	0x20000139
 80063cc:	20000138 	.word	0x20000138

080063d0 <CommunicationTaskThread>:
}

void CommunicationTaskThread(void const * argument)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b090      	sub	sp, #64	; 0x40
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
//		sprintf(uartData, "CommunicationTask sie wykonuje!\r\n");
//		xSemaphoreTake(uartMutexHandle, portMAX_DELAY);
//		HAL_UART_Transmit(&huart2, (uint8_t *)uartData, strlen(uartData), 10);
//		xSemaphoreGive(uartMutexHandle);

		xQueueReceive(msgQueueHandle, receivedData, delayTime); // delayTime???
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <CommunicationTaskThread+0x54>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f107 010c 	add.w	r1, r7, #12
 80063e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fc47 	bl	8004c78 <xQueueReceive>
		xSemaphoreTake(uartMutexHandle, 1000); // 1000???
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <CommunicationTaskThread+0x58>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fce4 	bl	8004dc0 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart3, (uint8_t *)receivedData, strlen(receivedData), 10);
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7f9 fee7 	bl	80001d0 <strlen>
 8006402:	4603      	mov	r3, r0
 8006404:	b29a      	uxth	r2, r3
 8006406:	f107 010c 	add.w	r1, r7, #12
 800640a:	230a      	movs	r3, #10
 800640c:	4807      	ldr	r0, [pc, #28]	; (800642c <CommunicationTaskThread+0x5c>)
 800640e:	f7fd fae8 	bl	80039e2 <HAL_UART_Transmit>
		xSemaphoreGive(uartMutexHandle);
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <CommunicationTaskThread+0x58>)
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	2200      	movs	r2, #0
 800641a:	2100      	movs	r1, #0
 800641c:	f7fe fb60 	bl	8004ae0 <xQueueGenericSend>
		xQueueReceive(msgQueueHandle, receivedData, delayTime); // delayTime???
 8006420:	e7da      	b.n	80063d8 <CommunicationTaskThread+0x8>
 8006422:	bf00      	nop
 8006424:	20000134 	.word	0x20000134
 8006428:	20000130 	.word	0x20000130
 800642c:	200000a0 	.word	0x200000a0

08006430 <_ZN13DeviceManagerC1Ev>:
}
/* USER CODE END 6 */

/* USER CODE BEGIN 7 */
//DeviceManager
DeviceManager::DeviceManager(){
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	occupiedPinsCount = 0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
//	hardwarePinsList[0] = ((uint16_t)0x0001); /* Pin PA0 selected */ //EXTI line
//	hardwarePinsList[1] = ((uint16_t)0x0002); /* Pin PA1 selected */ //CS line
//	hardwarePinsList[2] = ((uint16_t)0x0004); /* Pin PA2 selected */ //USART2 TX
//	hardwarePinsList[3] = ((uint16_t)0x0008); /* Pin PA3 selected */ //USART2 RX
	hardwarePinsList[0] = ((uint16_t)0x0010); /* Pin PA4 selected */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2210      	movs	r2, #16
 8006442:	805a      	strh	r2, [r3, #2]
//	hardwarePinsList[1] = ((uint16_t)0x0020); /* Pin PA5 selected */ //LED
//	hardwarePinsList[2] = ((uint16_t)0x0040); /* Pin PA6 selected */ //SPI MISO
//	hardwarePinsList[3] = ((uint16_t)0x0080); /* Pin PA7 selected */ //SPI MOSI
//	hardwarePinsList[4] = ((uint16_t)0x0100); /* Pin PA8 selected */ //Reset line
	hardwarePinsList[1] = ((uint16_t)0x0200); /* Pin PA9 selected */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644a:	809a      	strh	r2, [r3, #4]
	hardwarePinsList[2] = ((uint16_t)0x0400); /* Pin PA10 selected*/
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006452:	80da      	strh	r2, [r3, #6]
}
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_ZN13DeviceManager22getNewCommunicationPinEv>:
uint16_t DeviceManager::getNewCommunicationPin(void){
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
	if(occupiedPinsCount < 2){
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b01      	cmp	r3, #1
 8006470:	dc0a      	bgt.n	8006488 <_ZN13DeviceManager22getNewCommunicationPinEv+0x26>
		return hardwarePinsList[occupiedPinsCount++];
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	b2d1      	uxtb	r1, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	7011      	strb	r1, [r2, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4413      	add	r3, r2
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	e001      	b.n	800648c <_ZN13DeviceManager22getNewCommunicationPinEv+0x2a>
	}
	else {
		return 0xFFFF;
 8006488:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <_ZN6SensorC1ER13DeviceManager>:
	xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
	return occupiedPinsCount;
}

//Sensor
Sensor::Sensor(DeviceManager &dm){
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	communicationPort = oneWirePort;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80064a8:	601a      	str	r2, [r3, #0]
	communicationPin = dm.getNewCommunicationPin(); /// !!!
 80064aa:	6838      	ldr	r0, [r7, #0]
 80064ac:	f7ff ffd9 	bl	8006462 <_ZN13DeviceManager22getNewCommunicationPinEv>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	809a      	strh	r2, [r3, #4]
	for(uint8_t i=0; i<16; i++){
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	dc11      	bgt.n	80064e6 <_ZN6SensorC1ER13DeviceManager+0x4e>
		if(communicationPin & (1 << i)){
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	889b      	ldrh	r3, [r3, #4]
 80064c6:	461a      	mov	r2, r3
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	fa42 f303 	asr.w	r3, r2, r3
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <_ZN6SensorC1ER13DeviceManager+0x46>
			communicationPinID = i;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	7bfa      	ldrb	r2, [r7, #15]
 80064da:	719a      	strb	r2, [r3, #6]
			break;
 80064dc:	e003      	b.n	80064e6 <_ZN6SensorC1ER13DeviceManager+0x4e>
	for(uint8_t i=0; i<16; i++){
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3301      	adds	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e7ea      	b.n	80064bc <_ZN6SensorC1ER13DeviceManager+0x24>
		}
	}
	sensorObjectIndex = sensorObjectCount++;
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <_ZN6SensorC1ER13DeviceManager+0x68>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	b2d1      	uxtb	r1, r2
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <_ZN6SensorC1ER13DeviceManager+0x68>)
 80064f0:	7011      	strb	r1, [r2, #0]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	71d3      	strb	r3, [r2, #7]
}
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000138 	.word	0x20000138

08006504 <_ZN6Sensor13changePinModeE11oneWireMode>:
}
void Sensor::printCommunicationPin(void){
	sprintf(uartData, "\r\nCommunication pin: %hu", this->communicationPin);
	xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
}
void Sensor::changePinMode(oneWireMode mode){
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = this->communicationPin;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	889b      	ldrh	r3, [r3, #4]
 8006514:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
	if(mode == ONE_OUTPUT){
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <_ZN6Sensor13changePinModeE11oneWireMode+0x26>
		//oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx); //Reset State
		//oneWire_PORT->MODER |= (0x01 << 2*oneWirePin_Idx); //Output Mode
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006524:	2301      	movs	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	e004      	b.n	8006534 <_ZN6Sensor13changePinModeE11oneWireMode+0x30>
	}
	else if(mode == ONE_INPUT){
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <_ZN6Sensor13changePinModeE11oneWireMode+0x30>
		//oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx); //Input Mode
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(oneWirePort, &GPIO_InitStruct);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4619      	mov	r1, r3
 800653a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800653e:	f7fb fc41 	bl	8001dc4 <HAL_GPIO_Init>
}
 8006542:	bf00      	nop
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_ZN6Sensor8writePinEb>:

void Sensor::writePin(bool state){
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
	if(state){
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <_ZN6Sensor8writePinEb+0x24>
		HAL_GPIO_WritePin(oneWirePort, this->communicationPin, GPIO_PIN_SET);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	889b      	ldrh	r3, [r3, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	4619      	mov	r1, r3
 8006564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006568:	f7fb fd98 	bl	800209c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(oneWirePort, this->communicationPin, GPIO_PIN_RESET);
	}
}
 800656c:	e007      	b.n	800657e <_ZN6Sensor8writePinEb+0x34>
		HAL_GPIO_WritePin(oneWirePort, this->communicationPin, GPIO_PIN_RESET);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	889b      	ldrh	r3, [r3, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	4619      	mov	r1, r3
 8006576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800657a:	f7fb fd8f 	bl	800209c <HAL_GPIO_WritePin>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZN6Sensor7readPinEv>:

bool Sensor::readPin(void){
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
	return (1&HAL_GPIO_ReadPin(oneWirePort, this->communicationPin));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	889b      	ldrh	r3, [r3, #4]
 8006592:	4619      	mov	r1, r3
 8006594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006598:	f7fb fd7a 	bl	8002090 <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <_ZN6Sensor21performReadFromSensorEv>:

//Method performing reading temperature and humidity data from sensor
void Sensor::performReadFromSensor(){
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	this->changePinMode(ONE_OUTPUT);	//Change data pin mode to OUTPUT
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ffa0 	bl	8006504 <_ZN6Sensor13changePinModeE11oneWireMode>
	this->writePin(0);					//Put pin LOW
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ffbf 	bl	800654a <_ZN6Sensor8writePinEb>
	vTaskDelay(1 / portTICK_PERIOD_MS);	//Delay for 1 ms to let the sensor wake up
 80065cc:	2001      	movs	r0, #1
 80065ce:	f7fe ffcd 	bl	800556c <vTaskDelay>
	this->writePin(1);					//Bring pin HIGH
 80065d2:	2101      	movs	r1, #1
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ffb8 	bl	800654a <_ZN6Sensor8writePinEb>
	delayMicroseconds(20);				//Wait a bit until the high state on the pin is set
 80065da:	2014      	movs	r0, #20
 80065dc:	f000 f92c 	bl	8006838 <delayMicroseconds>
	this->changePinMode(ONE_INPUT);		//Set pin as input
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ff8e 	bl	8006504 <_ZN6Sensor13changePinModeE11oneWireMode>
	uint32_t rawBits = 0UL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
	uint8_t checksumBits = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	72fb      	strb	r3, [r7, #11]
	//Receive the alternating states to confirm the sensor is about to send data
	while(this->readPin());
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ffc8 	bl	8006586 <_ZN6Sensor7readPinEv>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d000      	beq.n	80065fe <_ZN6Sensor21performReadFromSensorEv+0x4a>
 80065fc:	e7f8      	b.n	80065f0 <_ZN6Sensor21performReadFromSensorEv+0x3c>
	while(!this->readPin());
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ffc1 	bl	8006586 <_ZN6Sensor7readPinEv>
 8006604:	4603      	mov	r3, r0
 8006606:	f083 0301 	eor.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d000      	beq.n	8006612 <_ZN6Sensor21performReadFromSensorEv+0x5e>
 8006610:	e7f5      	b.n	80065fe <_ZN6Sensor21performReadFromSensorEv+0x4a>
	while(this->readPin());
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff ffb7 	bl	8006586 <_ZN6Sensor7readPinEv>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d000      	beq.n	8006620 <_ZN6Sensor21performReadFromSensorEv+0x6c>
 800661e:	e7f8      	b.n	8006612 <_ZN6Sensor21performReadFromSensorEv+0x5e>
	for(int8_t i = 31; i>=0; i--)		//Read 32 bits of temp.&humidity data
 8006620:	231f      	movs	r3, #31
 8006622:	72bb      	strb	r3, [r7, #10]
 8006624:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006628:	2b00      	cmp	r3, #0
 800662a:	db28      	blt.n	800667e <_ZN6Sensor21performReadFromSensorEv+0xca>
		* Bit data "1" signal: the level is LOW for 50ms and HIGH for 70ms;
		* MAX FREQUENCY ON STM32L476RG = 80MHz
		* SO IT TAKES 12,5 ns FOR ONE INSTRUCTION TO EXECUTE
		* A DELAY OF 1 SECOND (x TICKS): 80 MILLION NOP INSTRUCTIONS TO EXECUTE
		*/
	  while(!this->readPin());
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ffaa 	bl	8006586 <_ZN6Sensor7readPinEv>
 8006632:	4603      	mov	r3, r0
 8006634:	f083 0301 	eor.w	r3, r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d000      	beq.n	8006640 <_ZN6Sensor21performReadFromSensorEv+0x8c>
 800663e:	e7f5      	b.n	800662c <_ZN6Sensor21performReadFromSensorEv+0x78>
	  //Experimentally determined average time of one rotation of the 'for' loop with nop: 140 ns
	  //A correct value range for 26/28 to 70 us delay is then <190; 500>
	  delayMicroseconds(50);
 8006640:	2032      	movs	r0, #50	; 0x32
 8006642:	f000 f8f9 	bl	8006838 <delayMicroseconds>
	  if(this->readPin())
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff9d 	bl	8006586 <_ZN6Sensor7readPinEv>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <_ZN6Sensor21performReadFromSensorEv+0xae>
	  {
		  rawBits |= (1UL << i);
 8006652:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006656:	2201      	movs	r2, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
	  }
	  while(this->readPin());
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ff8f 	bl	8006586 <_ZN6Sensor7readPinEv>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d000      	beq.n	8006670 <_ZN6Sensor21performReadFromSensorEv+0xbc>
 800666e:	e7f8      	b.n	8006662 <_ZN6Sensor21performReadFromSensorEv+0xae>
	for(int8_t i = 31; i>=0; i--)		//Read 32 bits of temp.&humidity data
 8006670:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	72bb      	strb	r3, [r7, #10]
 800667c:	e7d2      	b.n	8006624 <_ZN6Sensor21performReadFromSensorEv+0x70>
	}
	for(int8_t i = 7; i>=0; i--)		//Read 8 bits of checksum data
 800667e:	2307      	movs	r3, #7
 8006680:	727b      	strb	r3, [r7, #9]
 8006682:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db29      	blt.n	80066de <_ZN6Sensor21performReadFromSensorEv+0x12a>
	{
	  while(!this->readPin());
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff7b 	bl	8006586 <_ZN6Sensor7readPinEv>
 8006690:	4603      	mov	r3, r0
 8006692:	f083 0301 	eor.w	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d000      	beq.n	800669e <_ZN6Sensor21performReadFromSensorEv+0xea>
 800669c:	e7f5      	b.n	800668a <_ZN6Sensor21performReadFromSensorEv+0xd6>
	  delayMicroseconds(50);
 800669e:	2032      	movs	r0, #50	; 0x32
 80066a0:	f000 f8ca 	bl	8006838 <delayMicroseconds>
	  if(this->readPin())
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ff6e 	bl	8006586 <_ZN6Sensor7readPinEv>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <_ZN6Sensor21performReadFromSensorEv+0x10e>
	  {
		  checksumBits |= (1UL << i);
 80066b0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	4313      	orrs	r3, r2
 80066c0:	72fb      	strb	r3, [r7, #11]
	  }
	  while(this->readPin());
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff ff5f 	bl	8006586 <_ZN6Sensor7readPinEv>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d000      	beq.n	80066d0 <_ZN6Sensor21performReadFromSensorEv+0x11c>
 80066ce:	e7f8      	b.n	80066c2 <_ZN6Sensor21performReadFromSensorEv+0x10e>
	for(int8_t i = 7; i>=0; i--)		//Read 8 bits of checksum data
 80066d0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	727b      	strb	r3, [r7, #9]
 80066dc:	e7d1      	b.n	8006682 <_ZN6Sensor21performReadFromSensorEv+0xce>
	}
	data[0] = (rawBits>>24)&0xFF;		//Copy raw data bits to an array of bytes
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <_ZN6Sensor21performReadFromSensorEv+0x160>)
 80066e6:	701a      	strb	r2, [r3, #0]
	data[1] = (rawBits>>16)&0xFF;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <_ZN6Sensor21performReadFromSensorEv+0x160>)
 80066f0:	705a      	strb	r2, [r3, #1]
	data[2] = (rawBits>>8)&0xFF;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <_ZN6Sensor21performReadFromSensorEv+0x160>)
 80066fa:	709a      	strb	r2, [r3, #2]
	data[3] = (rawBits>>0)&0xFF;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <_ZN6Sensor21performReadFromSensorEv+0x160>)
 8006702:	70da      	strb	r2, [r3, #3]
	data[4] = (checksumBits)&0xFF;
 8006704:	4a03      	ldr	r2, [pc, #12]	; (8006714 <_ZN6Sensor21performReadFromSensorEv+0x160>)
 8006706:	7afb      	ldrb	r3, [r7, #11]
 8006708:	7113      	strb	r3, [r2, #4]
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000013c 	.word	0x2000013c

08006718 <presentDataFromSensor>:

void presentDataFromSensor(uint8_t which){
 8006718:	b5b0      	push	{r4, r5, r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
	//Calculate the temperature and humidity values
	uint8_t myChecksum;
	uint16_t temp, humidity, tempDecimal, humidityDecimal, temp16, humid16;
	uint16_t ten = (uint16_t)10;
 8006722:	230a      	movs	r3, #10
 8006724:	82bb      	strh	r3, [r7, #20]
	//Calculate checksum
	myChecksum = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<4; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	75bb      	strb	r3, [r7, #22]
 800672e:	7dbb      	ldrb	r3, [r7, #22]
 8006730:	2b03      	cmp	r3, #3
 8006732:	dc09      	bgt.n	8006748 <presentDataFromSensor+0x30>
	{
	  myChecksum += data[i];
 8006734:	7dbb      	ldrb	r3, [r7, #22]
 8006736:	4a39      	ldr	r2, [pc, #228]	; (800681c <presentDataFromSensor+0x104>)
 8006738:	5cd2      	ldrb	r2, [r2, r3]
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	4413      	add	r3, r2
 800673e:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<4; i++)
 8006740:	7dbb      	ldrb	r3, [r7, #22]
 8006742:	3301      	adds	r3, #1
 8006744:	75bb      	strb	r3, [r7, #22]
 8006746:	e7f2      	b.n	800672e <presentDataFromSensor+0x16>
	}
	if(myChecksum == data[4])
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <presentDataFromSensor+0x104>)
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	7dfa      	ldrb	r2, [r7, #23]
 800674e:	429a      	cmp	r2, r3
 8006750:	d14f      	bne.n	80067f2 <presentDataFromSensor+0xda>
	{
	  temp16 = (data[2] << 8) | data[3];
 8006752:	4b32      	ldr	r3, [pc, #200]	; (800681c <presentDataFromSensor+0x104>)
 8006754:	789b      	ldrb	r3, [r3, #2]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	b21a      	sxth	r2, r3
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <presentDataFromSensor+0x104>)
 800675c:	78db      	ldrb	r3, [r3, #3]
 800675e:	b21b      	sxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b21b      	sxth	r3, r3
 8006764:	827b      	strh	r3, [r7, #18]
	  humid16= (data[0] << 8) | data[1];
 8006766:	4b2d      	ldr	r3, [pc, #180]	; (800681c <presentDataFromSensor+0x104>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	b21a      	sxth	r2, r3
 800676e:	4b2b      	ldr	r3, [pc, #172]	; (800681c <presentDataFromSensor+0x104>)
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	b21b      	sxth	r3, r3
 8006774:	4313      	orrs	r3, r2
 8006776:	b21b      	sxth	r3, r3
 8006778:	823b      	strh	r3, [r7, #16]
	  temp = temp16/ten;
 800677a:	8a7a      	ldrh	r2, [r7, #18]
 800677c:	8abb      	ldrh	r3, [r7, #20]
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	81fb      	strh	r3, [r7, #14]
	  tempDecimal = temp16%ten;
 8006784:	8a7b      	ldrh	r3, [r7, #18]
 8006786:	8aba      	ldrh	r2, [r7, #20]
 8006788:	fbb3 f1f2 	udiv	r1, r3, r2
 800678c:	fb02 f201 	mul.w	r2, r2, r1
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	81bb      	strh	r3, [r7, #12]
	  humidity = humid16/ten;
 8006794:	8a3a      	ldrh	r2, [r7, #16]
 8006796:	8abb      	ldrh	r3, [r7, #20]
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	817b      	strh	r3, [r7, #10]
	  humidityDecimal = humid16%ten;
 800679e:	8a3b      	ldrh	r3, [r7, #16]
 80067a0:	8aba      	ldrh	r2, [r7, #20]
 80067a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80067a6:	fb02 f201 	mul.w	r2, r2, r1
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	813b      	strh	r3, [r7, #8]

	  sprintf(uartData, "\r\nCzujnik %hu:", which+1);
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	3301      	adds	r3, #1
 80067b2:	461a      	mov	r2, r3
 80067b4:	491a      	ldr	r1, [pc, #104]	; (8006820 <presentDataFromSensor+0x108>)
 80067b6:	481b      	ldr	r0, [pc, #108]	; (8006824 <presentDataFromSensor+0x10c>)
 80067b8:	f001 f836 	bl	8007828 <siprintf>
	  xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);	//100 ticks to wait???
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <presentDataFromSensor+0x110>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	2300      	movs	r3, #0
 80067c2:	2264      	movs	r2, #100	; 0x64
 80067c4:	4917      	ldr	r1, [pc, #92]	; (8006824 <presentDataFromSensor+0x10c>)
 80067c6:	f7fe f98b 	bl	8004ae0 <xQueueGenericSend>
	  sprintf(uartData, "\r\nTemperatura\t %hu.%huC"
 80067ca:	89f9      	ldrh	r1, [r7, #14]
 80067cc:	89b8      	ldrh	r0, [r7, #12]
 80067ce:	897b      	ldrh	r3, [r7, #10]
 80067d0:	893a      	ldrh	r2, [r7, #8]
			  "\r\nWilgotnosc\t %hu.%hu%%\r\n",
			  temp, tempDecimal, humidity, humidityDecimal);
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	460a      	mov	r2, r1
 80067da:	4914      	ldr	r1, [pc, #80]	; (800682c <presentDataFromSensor+0x114>)
 80067dc:	4811      	ldr	r0, [pc, #68]	; (8006824 <presentDataFromSensor+0x10c>)
 80067de:	f001 f823 	bl	8007828 <siprintf>
	  xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100); //100???
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <presentDataFromSensor+0x110>)
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	2300      	movs	r3, #0
 80067e8:	2264      	movs	r2, #100	; 0x64
 80067ea:	490e      	ldr	r1, [pc, #56]	; (8006824 <presentDataFromSensor+0x10c>)
 80067ec:	f7fe f978 	bl	8004ae0 <xQueueGenericSend>
	else
	{
	  strcpy(uartData, "\r\nBlad odczytu danych z czujnika!");
	  xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
	}
}
 80067f0:	e010      	b.n	8006814 <presentDataFromSensor+0xfc>
	  strcpy(uartData, "\r\nBlad odczytu danych z czujnika!");
 80067f2:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <presentDataFromSensor+0x10c>)
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <presentDataFromSensor+0x118>)
 80067f6:	4614      	mov	r4, r2
 80067f8:	461d      	mov	r5, r3
 80067fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	8023      	strh	r3, [r4, #0]
	  xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <presentDataFromSensor+0x110>)
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	2300      	movs	r3, #0
 800680c:	2264      	movs	r2, #100	; 0x64
 800680e:	4905      	ldr	r1, [pc, #20]	; (8006824 <presentDataFromSensor+0x10c>)
 8006810:	f7fe f966 	bl	8004ae0 <xQueueGenericSend>
}
 8006814:	bf00      	nop
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bdb0      	pop	{r4, r5, r7, pc}
 800681c:	2000013c 	.word	0x2000013c
 8006820:	080086f4 	.word	0x080086f4
 8006824:	20000144 	.word	0x20000144
 8006828:	20000134 	.word	0x20000134
 800682c:	08008704 	.word	0x08008704
 8006830:	08008738 	.word	0x08008738
 8006834:	00000000 	.word	0x00000000

08006838 <delayMicroseconds>:

void delayMicroseconds(uint32_t us){
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 8006840:	f7fc f822 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 8006844:	4603      	mov	r3, r0
 8006846:	613b      	str	r3, [r7, #16]
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor frequency relative to base of 80MHz
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006852:	eddf 6a23 	vldr	s13, [pc, #140]	; 80068e0 <delayMicroseconds+0xa8>
 8006856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800685a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d019      	beq.n	8006898 <delayMicroseconds+0x60>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800686e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006876:	ee17 0a90 	vmov	r0, s15
 800687a:	f7f9 fe65 	bl	8000548 <__aeabi_f2d>
 800687e:	a316      	add	r3, pc, #88	; (adr r3, 80068d8 <delayMicroseconds+0xa0>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 feb4 	bl	80005f0 <__aeabi_dmul>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	4618      	mov	r0, r3
 800688e:	4621      	mov	r1, r4
 8006890:	f7fa f8c0 	bl	8000a14 <__aeabi_d2uiz>
 8006894:	4603      	mov	r3, r0
 8006896:	e00e      	b.n	80068b6 <delayMicroseconds+0x7e>
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7f9 fe55 	bl	8000548 <__aeabi_f2d>
 800689e:	a30e      	add	r3, pc, #56	; (adr r3, 80068d8 <delayMicroseconds+0xa0>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fea4 	bl	80005f0 <__aeabi_dmul>
 80068a8:	4603      	mov	r3, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4618      	mov	r0, r3
 80068ae:	4621      	mov	r1, r4
 80068b0:	f7fa f8b0 	bl	8000a14 <__aeabi_d2uiz>
 80068b4:	4603      	mov	r3, r0
 80068b6:	60bb      	str	r3, [r7, #8]
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm("nop");}
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d204      	bcs.n	80068ce <delayMicroseconds+0x96>
 80068c4:	bf00      	nop
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	3301      	adds	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e7f6      	b.n	80068bc <delayMicroseconds+0x84>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd90      	pop	{r4, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	978d4fdf 	.word	0x978d4fdf
 80068dc:	401c926e 	.word	0x401c926e
 80068e0:	4c989680 	.word	0x4c989680

080068e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80068f6:	f7fb f9c7 	bl	8001c88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40000400 	.word	0x40000400

08006908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <_Z41__static_initialization_and_destruction_0ii>:


///
}
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10f      	bne.n	8006948 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800692e:	4293      	cmp	r3, r2
 8006930:	d10a      	bne.n	8006948 <_Z41__static_initialization_and_destruction_0ii+0x30>
DeviceManager dm; //The only DeviceManager object to administer hardware ports
 8006932:	4807      	ldr	r0, [pc, #28]	; (8006950 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8006934:	f7ff fd7c 	bl	8006430 <_ZN13DeviceManagerC1Ev>
Sensor s1(dm); //Many sensors can be declared here
 8006938:	4905      	ldr	r1, [pc, #20]	; (8006950 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800693a:	4806      	ldr	r0, [pc, #24]	; (8006954 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800693c:	f7ff fdac 	bl	8006498 <_ZN6SensorC1ER13DeviceManager>
Sensor s2(dm);
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8006942:	4805      	ldr	r0, [pc, #20]	; (8006958 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006944:	f7ff fda8 	bl	8006498 <_ZN6SensorC1ER13DeviceManager>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000178 	.word	0x20000178
 8006954:	20000180 	.word	0x20000180
 8006958:	20000188 	.word	0x20000188

0800695c <_GLOBAL__sub_I_huart3>:
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
 8006960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006964:	2001      	movs	r0, #1
 8006966:	f7ff ffd7 	bl	8006918 <_Z41__static_initialization_and_destruction_0ii>
 800696a:	bd80      	pop	{r7, pc}

0800696c <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8006970:	4b2c      	ldr	r3, [pc, #176]	; (8006a24 <Add_Sample_Service+0xb8>)
{
 8006972:	b092      	sub	sp, #72	; 0x48
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8006974:	aa06      	add	r2, sp, #24
 8006976:	f103 0610 	add.w	r6, r3, #16
 800697a:	4615      	mov	r5, r2
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	6859      	ldr	r1, [r3, #4]
 8006980:	4614      	mov	r4, r2
 8006982:	c403      	stmia	r4!, {r0, r1}
 8006984:	3308      	adds	r3, #8
 8006986:	42b3      	cmp	r3, r6
 8006988:	4622      	mov	r2, r4
 800698a:	d1f7      	bne.n	800697c <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800698c:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <Add_Sample_Service+0xbc>)
 800698e:	aa0a      	add	r2, sp, #40	; 0x28
 8006990:	f103 0710 	add.w	r7, r3, #16
 8006994:	4616      	mov	r6, r2
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	4614      	mov	r4, r2
 800699c:	c403      	stmia	r4!, {r0, r1}
 800699e:	3308      	adds	r3, #8
 80069a0:	42bb      	cmp	r3, r7
 80069a2:	4622      	mov	r2, r4
 80069a4:	d1f7      	bne.n	8006996 <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80069a6:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <Add_Sample_Service+0xc0>)
 80069a8:	aa0e      	add	r2, sp, #56	; 0x38
 80069aa:	f103 0e10 	add.w	lr, r3, #16
 80069ae:	4617      	mov	r7, r2
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	6859      	ldr	r1, [r3, #4]
 80069b4:	4614      	mov	r4, r2
 80069b6:	c403      	stmia	r4!, {r0, r1}
 80069b8:	3308      	adds	r3, #8
 80069ba:	4573      	cmp	r3, lr
 80069bc:	4622      	mov	r2, r4
 80069be:	d1f7      	bne.n	80069b0 <Add_Sample_Service+0x44>
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80069c0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006a38 <Add_Sample_Service+0xcc>
 80069c4:	f8cd 8000 	str.w	r8, [sp]
 80069c8:	2307      	movs	r3, #7
 80069ca:	2201      	movs	r2, #1
 80069cc:	4629      	mov	r1, r5
 80069ce:	2002      	movs	r0, #2
 80069d0:	f7fd f997 	bl	8003d02 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 80069d4:	4603      	mov	r3, r0
 80069d6:	bb08      	cbnz	r0, 8006a1c <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <Add_Sample_Service+0xc4>)
 80069da:	9205      	str	r2, [sp, #20]
 80069dc:	2510      	movs	r5, #16
 80069de:	2401      	movs	r4, #1
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	f8b8 0000 	ldrh.w	r0, [r8]
 80069e8:	9404      	str	r4, [sp, #16]
 80069ea:	2314      	movs	r3, #20
 80069ec:	9503      	str	r5, [sp, #12]
 80069ee:	9500      	str	r5, [sp, #0]
 80069f0:	4632      	mov	r2, r6
 80069f2:	2102      	movs	r1, #2
 80069f4:	f7fd f9c8 	bl	8003d88 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80069f8:	4603      	mov	r3, r0
 80069fa:	b978      	cbnz	r0, 8006a1c <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80069fc:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <Add_Sample_Service+0xc8>)
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	230c      	movs	r3, #12
 8006a02:	9205      	str	r2, [sp, #20]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	f8b8 0000 	ldrh.w	r0, [r8]
 8006a0a:	9404      	str	r4, [sp, #16]
 8006a0c:	9503      	str	r5, [sp, #12]
 8006a0e:	9402      	str	r4, [sp, #8]
 8006a10:	2314      	movs	r3, #20
 8006a12:	463a      	mov	r2, r7
 8006a14:	2102      	movs	r1, #2
 8006a16:	f7fd f9b7 	bl	8003d88 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8006a1a:	b100      	cbz	r0, 8006a1e <Add_Sample_Service+0xb2>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8006a1c:	2047      	movs	r0, #71	; 0x47
}
 8006a1e:	b012      	add	sp, #72	; 0x48
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	0800875a 	.word	0x0800875a
 8006a28:	0800876a 	.word	0x0800876a
 8006a2c:	0800877a 	.word	0x0800877a
 8006a30:	20001500 	.word	0x20001500
 8006a34:	20001504 	.word	0x20001504
 8006a38:	20001502 	.word	0x20001502

08006a3c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4605      	mov	r5, r0
  BSP_LED_Toggle(LED2);
 8006a40:	2000      	movs	r0, #0
{
 8006a42:	460e      	mov	r6, r1
  BSP_LED_Toggle(LED2);
 8006a44:	f000 f9ce 	bl	8006de4 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8006a48:	462c      	mov	r4, r5
 8006a4a:	1b63      	subs	r3, r4, r5
 8006a4c:	429e      	cmp	r6, r3
 8006a4e:	dc06      	bgt.n	8006a5e <receiveData+0x22>
    printf("%c", data_buffer[i]);
  }
  fflush(stdout);
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <receiveData+0x2c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fflush(stdout);
 8006a58:	6898      	ldr	r0, [r3, #8]
 8006a5a:	f000 bc85 	b.w	8007368 <fflush>
    printf("%c", data_buffer[i]);
 8006a5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006a62:	f000 fe59 	bl	8007718 <putchar>
 8006a66:	e7f0      	b.n	8006a4a <receiveData+0xe>
 8006a68:	20000020 	.word	0x20000020

08006a6c <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <Attribute_Modified_CB+0x28>)
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4298      	cmp	r0, r3
 8006a74:	d102      	bne.n	8006a7c <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7ff bfe0 	b.w	8006a3c <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <Attribute_Modified_CB+0x2c>)
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	3302      	adds	r3, #2
 8006a82:	4298      	cmp	r0, r3
 8006a84:	d104      	bne.n	8006a90 <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 8006a86:	7813      	ldrb	r3, [r2, #0]
 8006a88:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 8006a8a:	bf04      	itt	eq
 8006a8c:	4a03      	ldreq	r2, [pc, #12]	; (8006a9c <Attribute_Modified_CB+0x30>)
 8006a8e:	7013      	strbeq	r3, [r2, #0]
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20001504 	.word	0x20001504
 8006a98:	20001500 	.word	0x20001500
 8006a9c:	200014cc 	.word	0x200014cc

08006aa0 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  
  printf("Connected to device:");
  for(int i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 8006aa4:	4f0c      	ldr	r7, [pc, #48]	; (8006ad8 <GAP_ConnectionComplete_CB+0x38>)
  connected = TRUE;
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <GAP_ConnectionComplete_CB+0x3c>)
{  
 8006aac:	4604      	mov	r4, r0
  printf("Connected to device:");
 8006aae:	480c      	ldr	r0, [pc, #48]	; (8006ae0 <GAP_ConnectionComplete_CB+0x40>)
  connection_handle = handle;
 8006ab0:	8019      	strh	r1, [r3, #0]
  printf("Connected to device:");
 8006ab2:	f000 fe19 	bl	80076e8 <iprintf>
 8006ab6:	1da5      	adds	r5, r4, #6
 8006ab8:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 8006aba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006abe:	4638      	mov	r0, r7
 8006ac0:	f000 fe12 	bl	80076e8 <iprintf>
  for(int i = 5; i > 0; i--){
 8006ac4:	42b5      	cmp	r5, r6
 8006ac6:	d1f8      	bne.n	8006aba <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 8006ac8:	7821      	ldrb	r1, [r4, #0]
 8006aca:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <GAP_ConnectionComplete_CB+0x44>)
}
 8006acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 8006ad0:	f000 be0a 	b.w	80076e8 <iprintf>
 8006ad4:	200014c4 	.word	0x200014c4
 8006ad8:	080088aa 	.word	0x080088aa
 8006adc:	200014c8 	.word	0x200014c8
 8006ae0:	08008895 	.word	0x08008895
 8006ae4:	080088b0 	.word	0x080088b0

08006ae8 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <GAP_DisconnectionComplete_CB+0x2c>)
  
  printf("Disconnected\n");
 8006aea:	480b      	ldr	r0, [pc, #44]	; (8006b18 <GAP_DisconnectionComplete_CB+0x30>)
{
 8006aec:	b510      	push	{r4, lr}
  connected = FALSE;
 8006aee:	2400      	movs	r4, #0
 8006af0:	601c      	str	r4, [r3, #0]
  printf("Disconnected\n");
 8006af2:	f000 fe81 	bl	80077f8 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <GAP_DisconnectionComplete_CB+0x34>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <GAP_DisconnectionComplete_CB+0x38>)
 8006afe:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8006b00:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <GAP_DisconnectionComplete_CB+0x3c>)
 8006b02:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <GAP_DisconnectionComplete_CB+0x40>)
 8006b06:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <GAP_DisconnectionComplete_CB+0x44>)
 8006b0a:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <GAP_DisconnectionComplete_CB+0x48>)
 8006b0e:	701c      	strb	r4, [r3, #0]
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	200014c4 	.word	0x200014c4
 8006b18:	080088b6 	.word	0x080088b6
 8006b1c:	2000000e 	.word	0x2000000e
 8006b20:	200014cc 	.word	0x200014cc
 8006b24:	200014ce 	.word	0x200014ce
 8006b28:	200014cd 	.word	0x200014cd
 8006b2c:	200014cb 	.word	0x200014cb
 8006b30:	200014ca 	.word	0x200014ca

08006b34 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <GATT_Notification_CB+0x14>)
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4298      	cmp	r0, r3
 8006b3c:	d102      	bne.n	8006b44 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7ff bf7c 	b.w	8006a3c <receiveData>
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	200014fc 	.word	0x200014fc

08006b4c <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8006b4c:	7802      	ldrb	r2, [r0, #0]
 8006b4e:	2a04      	cmp	r2, #4
{
 8006b50:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8006b52:	d167      	bne.n	8006c24 <user_notify+0xd8>
    return;
  
  switch(event_pckt->evt){
 8006b54:	7842      	ldrb	r2, [r0, #1]
 8006b56:	2a3e      	cmp	r2, #62	; 0x3e
 8006b58:	d005      	beq.n	8006b66 <user_notify+0x1a>
 8006b5a:	2aff      	cmp	r2, #255	; 0xff
 8006b5c:	d00b      	beq.n	8006b76 <user_notify+0x2a>
 8006b5e:	2a05      	cmp	r2, #5
 8006b60:	d160      	bne.n	8006c24 <user_notify+0xd8>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8006b62:	f7ff bfc1 	b.w	8006ae8 <GAP_DisconnectionComplete_CB>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 8006b66:	78c2      	ldrb	r2, [r0, #3]
 8006b68:	2a01      	cmp	r2, #1
 8006b6a:	d15b      	bne.n	8006c24 <user_notify+0xd8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8006b6c:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8006b70:	3009      	adds	r0, #9
 8006b72:	f7ff bf95 	b.w	8006aa0 <GAP_ConnectionComplete_CB>
    break;
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8006b76:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006b7a:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006b7e:	428a      	cmp	r2, r1
 8006b80:	d01a      	beq.n	8006bb8 <user_notify+0x6c>
 8006b82:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8006b86:	d204      	bcs.n	8006b92 <user_notify+0x46>
 8006b88:	f640 4101 	movw	r1, #3073	; 0xc01
 8006b8c:	428a      	cmp	r2, r1
 8006b8e:	d006      	beq.n	8006b9e <user_notify+0x52>
 8006b90:	4770      	bx	lr
 8006b92:	d034      	beq.n	8006bfe <user_notify+0xb2>
 8006b94:	f640 4112 	movw	r1, #3090	; 0xc12
 8006b98:	428a      	cmp	r2, r1
 8006b9a:	d015      	beq.n	8006bc8 <user_notify+0x7c>
 8006b9c:	4770      	bx	lr
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8006b9e:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <user_notify+0xdc>)
 8006ba0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8006ba4:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006ba6:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 8006ba8:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006baa:	bf0c      	ite	eq
 8006bac:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006bb0:	f103 020a 	addne.w	r2, r3, #10
 8006bb4:	f7ff bf5a 	b.w	8006a6c <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8006bb8:	79c1      	ldrb	r1, [r0, #7]
 8006bba:	3902      	subs	r1, #2
 8006bbc:	f100 020a 	add.w	r2, r0, #10
 8006bc0:	b2c9      	uxtb	r1, r1
 8006bc2:	8900      	ldrh	r0, [r0, #8]
 8006bc4:	f7ff bfb6 	b.w	8006b34 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <user_notify+0xe0>)
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	d129      	bne.n	8006c24 <user_notify+0xd8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8006bd0:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <user_notify+0xe4>)
 8006bd2:	7812      	ldrb	r2, [r2, #0]
 8006bd4:	b142      	cbz	r2, 8006be8 <user_notify+0x9c>
 8006bd6:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <user_notify+0xe8>)
 8006bd8:	7812      	ldrb	r2, [r2, #0]
 8006bda:	b92a      	cbnz	r2, 8006be8 <user_notify+0x9c>
          {
            tx_handle = resp->attr_handle;
 8006bdc:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <user_notify+0xec>)
 8006bde:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 8006be0:	4816      	ldr	r0, [pc, #88]	; (8006c3c <user_notify+0xf0>)
            tx_handle = resp->attr_handle;
 8006be2:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 8006be4:	f000 bd80 	b.w	80076e8 <iprintf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8006be8:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <user_notify+0xf4>)
 8006bea:	7812      	ldrb	r2, [r2, #0]
 8006bec:	b1d2      	cbz	r2, 8006c24 <user_notify+0xd8>
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <user_notify+0xf8>)
 8006bf0:	7812      	ldrb	r2, [r2, #0]
 8006bf2:	b9ba      	cbnz	r2, 8006c24 <user_notify+0xd8>
            rx_handle = resp->attr_handle;
 8006bf4:	8919      	ldrh	r1, [r3, #8]
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <user_notify+0xfc>)
            printf("RX Char Handle %04X\n", rx_handle);
 8006bf8:	4814      	ldr	r0, [pc, #80]	; (8006c4c <user_notify+0x100>)
            rx_handle = resp->attr_handle;
 8006bfa:	8019      	strh	r1, [r3, #0]
 8006bfc:	e7f2      	b.n	8006be4 <user_notify+0x98>
          }
        }
        break;
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <user_notify+0xe0>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b97b      	cbnz	r3, 8006c24 <user_notify+0xd8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <user_notify+0xe4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b12b      	cbz	r3, 8006c16 <user_notify+0xca>
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <user_notify+0xe8>)
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	b912      	cbnz	r2, 8006c16 <user_notify+0xca>
          {
            end_read_tx_char_handle = TRUE;
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
 8006c10:	2201      	movs	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	e006      	b.n	8006c24 <user_notify+0xd8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <user_notify+0xf4>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	b11b      	cbz	r3, 8006c24 <user_notify+0xd8>
 8006c1c:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <user_notify+0xf8>)
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	d0f5      	beq.n	8006c10 <user_notify+0xc4>
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	2000116c 	.word	0x2000116c
 8006c2c:	2000000c 	.word	0x2000000c
 8006c30:	200014ce 	.word	0x200014ce
 8006c34:	200014cb 	.word	0x200014cb
 8006c38:	200014fc 	.word	0x200014fc
 8006c3c:	080088c3 	.word	0x080088c3
 8006c40:	200014cd 	.word	0x200014cd
 8006c44:	200014ca 	.word	0x200014ca
 8006c48:	200014fe 	.word	0x200014fe
 8006c4c:	080088d8 	.word	0x080088d8

08006c50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c50:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <HAL_MspInit+0x3c>)
{
 8006c52:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	661a      	str	r2, [r3, #96]	; 0x60
 8006c5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c5e:	f002 0201 	and.w	r2, r2, #1
 8006c62:	9200      	str	r2, [sp, #0]
 8006c64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c6c:	659a      	str	r2, [r3, #88]	; 0x58
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c74:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c76:	2200      	movs	r2, #0
 8006c78:	210f      	movs	r1, #15
 8006c7a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c80:	f7fb f83a 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c84:	b003      	add	sp, #12
 8006c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c8a:	bf00      	nop
 8006c8c:	40021000 	.word	0x40021000

08006c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c96:	2214      	movs	r2, #20
 8006c98:	2100      	movs	r1, #0
 8006c9a:	a803      	add	r0, sp, #12
 8006c9c:	f000 fc6f 	bl	800757e <memset>
  if(huart->Instance==USART3)
 8006ca0:	6822      	ldr	r2, [r4, #0]
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_UART_MspInit+0x5c>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d11f      	bne.n	8006ce8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ca8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cac:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8006cae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb0:	480f      	ldr	r0, [pc, #60]	; (8006cf0 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006cb2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8006cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006cba:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cc4:	f042 0204 	orr.w	r2, r2, #4
 8006cc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8006cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cd4:	2330      	movs	r3, #48	; 0x30
 8006cd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ce0:	2307      	movs	r3, #7
 8006ce2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ce4:	f7fb f86e 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006ce8:	b008      	add	sp, #32
 8006cea:	bd10      	pop	{r4, pc}
 8006cec:	40004800 	.word	0x40004800
 8006cf0:	48000800 	.word	0x48000800

08006cf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cf4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006cf6:	4601      	mov	r1, r0
{
 8006cf8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	201d      	movs	r0, #29
 8006cfe:	f7fa fffb 	bl	8001cf8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8006d02:	201d      	movs	r0, #29
 8006d04:	f7fb f82c 	bl	8001d60 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8006d0a:	4c15      	ldr	r4, [pc, #84]	; (8006d60 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d0e:	f042 0202 	orr.w	r2, r2, #2
 8006d12:	659a      	str	r2, [r3, #88]	; 0x58
 8006d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d1c:	a901      	add	r1, sp, #4
 8006d1e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006d20:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d22:	f7fb fddb 	bl	80028dc <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006d26:	f7fb fdb5 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <HAL_InitTick+0x70>)
 8006d2c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8006d2e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006d32:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <HAL_InitTick+0x74>)
 8006d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d3a:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 8006d3c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 8006d3e:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006d40:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8006d42:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d44:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006d46:	f7fc fbff 	bl	8003548 <HAL_TIM_Base_Init>
 8006d4a:	b920      	cbnz	r0, 8006d56 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7fc facb 	bl	80032e8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8006d52:	b008      	add	sp, #32
 8006d54:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7fb      	b.n	8006d52 <HAL_InitTick+0x5e>
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	20001508 	.word	0x20001508
 8006d64:	40000400 	.word	0x40000400
 8006d68:	000f4240 	.word	0x000f4240

08006d6c <NMI_Handler>:
 8006d6c:	4770      	bx	lr

08006d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d6e:	e7fe      	b.n	8006d6e <HardFault_Handler>

08006d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d70:	e7fe      	b.n	8006d70 <MemManage_Handler>

08006d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d72:	e7fe      	b.n	8006d72 <BusFault_Handler>

08006d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d74:	e7fe      	b.n	8006d74 <UsageFault_Handler>

08006d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d76:	4770      	bx	lr

08006d78 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8006d78:	4801      	ldr	r0, [pc, #4]	; (8006d80 <EXTI0_IRQHandler+0x8>)
 8006d7a:	f7fb b80b 	b.w	8001d94 <HAL_EXTI_IRQHandler>
 8006d7e:	bf00      	nop
 8006d80:	200014f4 	.word	0x200014f4

08006d84 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <TIM3_IRQHandler+0x8>)
 8006d86:	f7fc bac9 	b.w	800331c <HAL_TIM_IRQHandler>
 8006d8a:	bf00      	nop
 8006d8c:	20001508 	.word	0x20001508

08006d90 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <EXTI15_10_IRQHandler+0x8>)
 8006d92:	f7fa bfff 	b.w	8001d94 <HAL_EXTI_IRQHandler>
 8006d96:	bf00      	nop
 8006d98:	20000014 	.word	0x20000014

08006d9c <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8006d9c:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <BSP_LED_Init+0x44>)
{
 8006d9e:	b510      	push	{r4, lr}
  LED2_GPIO_CLK_ENABLE();    
 8006da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8006daa:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006db4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8006db6:	2420      	movs	r4, #32
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006db8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006dba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8006dbc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8006dbe:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8006dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8006dc4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8006dc6:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8006dc8:	f7fa fffc 	bl	8001dc4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4621      	mov	r1, r4
 8006dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dd4:	f7fb f962 	bl	800209c <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8006dd8:	2000      	movs	r0, #0
 8006dda:	b006      	add	sp, #24
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	40021000 	.word	0x40021000

08006de4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8006de4:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8006de6:	2120      	movs	r1, #32
 8006de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dec:	f7fb f95b 	bl	80020a6 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	bd08      	pop	{r3, pc}

08006df4 <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8006df4:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <BSP_PB_Init+0x80>)
{
 8006df6:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8006df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dfa:	f042 0204 	orr.w	r2, r2, #4
 8006dfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8006e02:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8006e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e10:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8006e12:	2302      	movs	r3, #2
{
 8006e14:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8006e16:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e18:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	b931      	cbnz	r1, 8006e2c <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006e1e:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8006e20:	4815      	ldr	r0, [pc, #84]	; (8006e78 <BSP_PB_Init+0x84>)
 8006e22:	a901      	add	r1, sp, #4
 8006e24:	f7fa ffce 	bl	8001dc4 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 8006e28:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 8006e2a:	e010      	b.n	8006e4e <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006e2c:	4c13      	ldr	r4, [pc, #76]	; (8006e7c <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006e2e:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006e30:	4811      	ldr	r0, [pc, #68]	; (8006e78 <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006e32:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006e34:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006e36:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006e3a:	f7fa ffc3 	bl	8001dc4 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8006e3e:	4911      	ldr	r1, [pc, #68]	; (8006e84 <BSP_PB_Init+0x90>)
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7fa ffa1 	bl	8001d88 <HAL_EXTI_GetHandle>
 8006e46:	4601      	mov	r1, r0
 8006e48:	b118      	cbz	r0, 8006e52 <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006e4a:	f06f 0003 	mvn.w	r0, #3
}
 8006e4e:	b007      	add	sp, #28
 8006e50:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8006e52:	4620      	mov	r0, r4
 8006e54:	4a0c      	ldr	r2, [pc, #48]	; (8006e88 <BSP_PB_Init+0x94>)
 8006e56:	f7fa ff91 	bl	8001d7c <HAL_EXTI_RegisterCallback>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d1f4      	bne.n	8006e4a <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006e60:	4602      	mov	r2, r0
 8006e62:	210f      	movs	r1, #15
 8006e64:	2028      	movs	r0, #40	; 0x28
 8006e66:	f7fa ff47 	bl	8001cf8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006e6a:	2028      	movs	r0, #40	; 0x28
 8006e6c:	f7fa ff78 	bl	8001d60 <HAL_NVIC_EnableIRQ>
 8006e70:	e7da      	b.n	8006e28 <BSP_PB_Init+0x34>
 8006e72:	bf00      	nop
 8006e74:	40021000 	.word	0x40021000
 8006e78:	48000800 	.word	0x48000800
 8006e7c:	20000014 	.word	0x20000014
 8006e80:	10110000 	.word	0x10110000
 8006e84:	1600000d 	.word	0x1600000d
 8006e88:	08006ea5 	.word	0x08006ea5

08006e8c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006e8c:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8006e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e92:	4803      	ldr	r0, [pc, #12]	; (8006ea0 <BSP_PB_GetState+0x14>)
 8006e94:	f7fb f8fc 	bl	8002090 <HAL_GPIO_ReadPin>
}
 8006e98:	fab0 f080 	clz	r0, r0
 8006e9c:	0940      	lsrs	r0, r0, #5
 8006e9e:	bd08      	pop	{r3, pc}
 8006ea0:	48000800 	.word	0x48000800

08006ea4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8006ea4:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f7fe fefc 	bl	8005ca4 <BSP_PB_Callback>
 8006eac:	bd08      	pop	{r3, pc}
	...

08006eb0 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <MX_USART2_UART_Init+0x2c>)
 8006eb2:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 8006eb6:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8006eb8:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 8006eba:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006ec2:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8006ec4:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006ec6:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ec8:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006eca:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ecc:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ece:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006ed0:	f7fc fe0f 	bl	8003af2 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8006ed4:	3000      	adds	r0, #0
 8006ed6:	bf18      	it	ne
 8006ed8:	2001      	movne	r0, #1
 8006eda:	bd08      	pop	{r3, pc}
 8006edc:	40004400 	.word	0x40004400

08006ee0 <BSP_COM_Init>:
{
 8006ee0:	b510      	push	{r4, lr}
  if(COM > COMn)
 8006ee2:	2801      	cmp	r0, #1
{
 8006ee4:	b088      	sub	sp, #32
  if(COM > COMn)
 8006ee6:	d832      	bhi.n	8006f4e <BSP_COM_Init+0x6e>
     hcom_uart[COM].Instance = COM_USART[COM];
 8006ee8:	491a      	ldr	r1, [pc, #104]	; (8006f54 <BSP_COM_Init+0x74>)
 8006eea:	4a1b      	ldr	r2, [pc, #108]	; (8006f58 <BSP_COM_Init+0x78>)
 8006eec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006ef0:	01c3      	lsls	r3, r0, #7
 8006ef2:	18d4      	adds	r4, r2, r3
 8006ef4:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ef6:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <BSP_COM_Init+0x7c>)
 8006ef8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006efa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006efe:	659a      	str	r2, [r3, #88]	; 0x58
 8006f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f02:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006f06:	9201      	str	r2, [sp, #4]
 8006f08:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f20:	2302      	movs	r3, #2
 8006f22:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f2e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f36:	f7fa ff45 	bl	8001dc4 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7ff ffb8 	bl	8006eb0 <MX_USART2_UART_Init>
 8006f40:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006f42:	bf0c      	ite	eq
 8006f44:	2000      	moveq	r0, #0
 8006f46:	f06f 0003 	mvnne.w	r0, #3
}
 8006f4a:	b008      	add	sp, #32
 8006f4c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006f4e:	f06f 0001 	mvn.w	r0, #1
 8006f52:	e7fa      	b.n	8006f4a <BSP_COM_Init+0x6a>
 8006f54:	20000010 	.word	0x20000010
 8006f58:	20001548 	.word	0x20001548
 8006f5c:	40021000 	.word	0x40021000

08006f60 <__io_putchar>:
{ 
 8006f60:	b513      	push	{r0, r1, r4, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <__io_putchar+0x24>)
{ 
 8006f64:	a902      	add	r1, sp, #8
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8006f66:	781c      	ldrb	r4, [r3, #0]
{ 
 8006f68:	f841 0d04 	str.w	r0, [r1, #-4]!
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8006f6c:	4806      	ldr	r0, [pc, #24]	; (8006f88 <__io_putchar+0x28>)
 8006f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f72:	2201      	movs	r2, #1
 8006f74:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8006f78:	f7fc fd33 	bl	80039e2 <HAL_UART_Transmit>
}
 8006f7c:	9801      	ldr	r0, [sp, #4]
 8006f7e:	b002      	add	sp, #8
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	200014cf 	.word	0x200014cf
 8006f88:	20001548 	.word	0x20001548

08006f8c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8006f8c:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8006f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	460a      	mov	r2, r1
 8006f98:	4601      	mov	r1, r0
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <BSP_SPI1_SendRecv+0x24>)
 8006f9c:	f7fc f87c 	bl	8003098 <HAL_SPI_TransmitReceive>
 8006fa0:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 8006fa2:	bf14      	ite	ne
 8006fa4:	f06f 0005 	mvnne.w	r0, #5
 8006fa8:	2000      	moveq	r0, #0
 8006faa:	b003      	add	sp, #12
 8006fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fb0:	200015c8 	.word	0x200015c8

08006fb4 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8006fb4:	f7fa be74 	b.w	8001ca0 <HAL_GetTick>

08006fb8 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006fb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ff8 <MX_SPI1_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006fba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8006fbe:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006fc0:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006fc4:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006fca:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006fce:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006fd0:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006fd2:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006fd4:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fd6:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006fd8:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006fda:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fdc:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8006fde:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006fe0:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe2:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006fe4:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006fe6:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 8006fe8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006fea:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006fec:	f7fc f803 	bl	8002ff6 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8006ff0:	3000      	adds	r0, #0
 8006ff2:	bf18      	it	ne
 8006ff4:	2001      	movne	r0, #1
 8006ff6:	bd08      	pop	{r3, pc}
 8006ff8:	40013000 	.word	0x40013000

08006ffc <BSP_SPI1_Init>:
{
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 8007000:	4a28      	ldr	r2, [pc, #160]	; (80070a4 <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 8007002:	4c29      	ldr	r4, [pc, #164]	; (80070a8 <BSP_SPI1_Init+0xac>)
 8007004:	4b29      	ldr	r3, [pc, #164]	; (80070ac <BSP_SPI1_Init+0xb0>)
 8007006:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	1c59      	adds	r1, r3, #1
{
 800700c:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	b11b      	cbz	r3, 800701a <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8007012:	2000      	movs	r0, #0
}
 8007014:	b008      	add	sp, #32
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 800701a:	4620      	mov	r0, r4
 800701c:	f7fc f960 	bl	80032e0 <HAL_SPI_GetState>
 8007020:	4605      	mov	r5, r0
 8007022:	2800      	cmp	r0, #0
 8007024:	d1f5      	bne.n	8007012 <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007026:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <BSP_SPI1_Init+0xb4>)
 8007028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800702a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800702e:	661a      	str	r2, [r3, #96]	; 0x60
 8007030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007032:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007036:	9200      	str	r2, [sp, #0]
 8007038:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800703c:	f042 0201 	orr.w	r2, r2, #1
 8007040:	64da      	str	r2, [r3, #76]	; 0x4c
 8007042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007044:	f002 0201 	and.w	r2, r2, #1
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800704c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800704e:	f042 0202 	orr.w	r2, r2, #2
 8007052:	64da      	str	r2, [r3, #76]	; 0x4c
 8007054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007056:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	9302      	str	r3, [sp, #8]
 800705e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007060:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007064:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007066:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007068:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800706a:	a903      	add	r1, sp, #12
 800706c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007070:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007072:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007076:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007078:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707a:	f7fa fea3 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800707e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007080:	480c      	ldr	r0, [pc, #48]	; (80070b4 <BSP_SPI1_Init+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007082:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007084:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007086:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800708e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007090:	f7fa fe98 	bl	8001dc4 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8007094:	4620      	mov	r0, r4
 8007096:	f7ff ff8f 	bl	8006fb8 <MX_SPI1_Init>
 800709a:	2800      	cmp	r0, #0
 800709c:	d0b9      	beq.n	8007012 <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 800709e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80070a2:	e7b7      	b.n	8007014 <BSP_SPI1_Init+0x18>
 80070a4:	200014d0 	.word	0x200014d0
 80070a8:	200015c8 	.word	0x200015c8
 80070ac:	40013000 	.word	0x40013000
 80070b0:	40021000 	.word	0x40021000
 80070b4:	48000400 	.word	0x48000400

080070b8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80070b8:	2001      	movs	r0, #1
 80070ba:	4770      	bx	lr

080070bc <_kill>:

int _kill(int pid, int sig)
{
 80070bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80070be:	f000 f89b 	bl	80071f8 <__errno>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	bd08      	pop	{r3, pc}

080070cc <_exit>:

void _exit (int status)
{
 80070cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80070ce:	f000 f893 	bl	80071f8 <__errno>
 80070d2:	2316      	movs	r3, #22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	e7fe      	b.n	80070d6 <_exit+0xa>

080070d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	460e      	mov	r6, r1
 80070dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070de:	460c      	mov	r4, r1
 80070e0:	1ba3      	subs	r3, r4, r6
 80070e2:	429d      	cmp	r5, r3
 80070e4:	dc01      	bgt.n	80070ea <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80070e6:	4628      	mov	r0, r5
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80070ea:	f3af 8000 	nop.w
 80070ee:	f804 0b01 	strb.w	r0, [r4], #1
 80070f2:	e7f5      	b.n	80070e0 <_read+0x8>

080070f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	460e      	mov	r6, r1
 80070f8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070fa:	460c      	mov	r4, r1
 80070fc:	1ba3      	subs	r3, r4, r6
 80070fe:	429d      	cmp	r5, r3
 8007100:	dc01      	bgt.n	8007106 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007102:	4628      	mov	r0, r5
 8007104:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007106:	f814 0b01 	ldrb.w	r0, [r4], #1
 800710a:	f7ff ff29 	bl	8006f60 <__io_putchar>
 800710e:	e7f5      	b.n	80070fc <_write+0x8>

08007110 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007110:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <_sbrk+0x2c>)
 8007114:	6819      	ldr	r1, [r3, #0]
{
 8007116:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007118:	b909      	cbnz	r1, 800711e <_sbrk+0xe>
		heap_end = &end;
 800711a:	4909      	ldr	r1, [pc, #36]	; (8007140 <_sbrk+0x30>)
 800711c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800711e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007120:	4669      	mov	r1, sp
 8007122:	4402      	add	r2, r0
 8007124:	428a      	cmp	r2, r1
 8007126:	d906      	bls.n	8007136 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007128:	f000 f866 	bl	80071f8 <__errno>
 800712c:	230c      	movs	r3, #12
 800712e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8007136:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8007138:	bd08      	pop	{r3, pc}
 800713a:	bf00      	nop
 800713c:	200014d4 	.word	0x200014d4
 8007140:	20001630 	.word	0x20001630

08007144 <_close>:

int _close(int file)
{
	return -1;
}
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	4770      	bx	lr

0800714a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800714a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800714e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007150:	2000      	movs	r0, #0
 8007152:	4770      	bx	lr

08007154 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007154:	2001      	movs	r0, #1
 8007156:	4770      	bx	lr

08007158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007158:	2000      	movs	r0, #0
 800715a:	4770      	bx	lr

0800715c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800715c:	490f      	ldr	r1, [pc, #60]	; (800719c <SystemInit+0x40>)
 800715e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007162:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <SystemInit+0x44>)
 800716c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800716e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007170:	f042 0201 	orr.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8007176:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800717e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007182:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007188:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007190:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007192:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007198:	608b      	str	r3, [r1, #8]
 800719a:	4770      	bx	lr
 800719c:	e000ed00 	.word	0xe000ed00
 80071a0:	40021000 	.word	0x40021000

080071a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80071a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80071a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80071aa:	e003      	b.n	80071b4 <LoopCopyDataInit>

080071ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80071ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80071b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80071b2:	3104      	adds	r1, #4

080071b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80071b4:	480b      	ldr	r0, [pc, #44]	; (80071e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80071b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80071ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80071bc:	d3f6      	bcc.n	80071ac <CopyDataInit>
	ldr	r2, =_sbss
 80071be:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80071c0:	e002      	b.n	80071c8 <LoopFillZerobss>

080071c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80071c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80071c4:	f842 3b04 	str.w	r3, [r2], #4

080071c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <LoopForever+0x16>)
	cmp	r2, r3
 80071ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80071cc:	d3f9      	bcc.n	80071c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80071ce:	f7ff ffc5 	bl	800715c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071d2:	f000 f9a5 	bl	8007520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80071d6:	f7fe feab 	bl	8005f30 <main>

080071da <LoopForever>:

LoopForever:
    b LoopForever
 80071da:	e7fe      	b.n	80071da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80071dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80071e0:	08008bdc 	.word	0x08008bdc
	ldr	r0, =_sdata
 80071e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80071e8:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80071ec:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80071f0:	20001630 	.word	0x20001630

080071f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80071f4:	e7fe      	b.n	80071f4 <ADC1_2_IRQHandler>
	...

080071f8 <__errno>:
 80071f8:	4b01      	ldr	r3, [pc, #4]	; (8007200 <__errno+0x8>)
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20000020 	.word	0x20000020

08007204 <__sflush_r>:
 8007204:	898a      	ldrh	r2, [r1, #12]
 8007206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720a:	4605      	mov	r5, r0
 800720c:	0710      	lsls	r0, r2, #28
 800720e:	460c      	mov	r4, r1
 8007210:	d45a      	bmi.n	80072c8 <__sflush_r+0xc4>
 8007212:	684b      	ldr	r3, [r1, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc05      	bgt.n	8007224 <__sflush_r+0x20>
 8007218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	dc02      	bgt.n	8007224 <__sflush_r+0x20>
 800721e:	2000      	movs	r0, #0
 8007220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007226:	2e00      	cmp	r6, #0
 8007228:	d0f9      	beq.n	800721e <__sflush_r+0x1a>
 800722a:	2300      	movs	r3, #0
 800722c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007230:	682f      	ldr	r7, [r5, #0]
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	d033      	beq.n	800729e <__sflush_r+0x9a>
 8007236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	075a      	lsls	r2, r3, #29
 800723c:	d505      	bpl.n	800724a <__sflush_r+0x46>
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	1ac0      	subs	r0, r0, r3
 8007242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007244:	b10b      	cbz	r3, 800724a <__sflush_r+0x46>
 8007246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007248:	1ac0      	subs	r0, r0, r3
 800724a:	2300      	movs	r3, #0
 800724c:	4602      	mov	r2, r0
 800724e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007250:	6a21      	ldr	r1, [r4, #32]
 8007252:	4628      	mov	r0, r5
 8007254:	47b0      	blx	r6
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	d106      	bne.n	800726a <__sflush_r+0x66>
 800725c:	6829      	ldr	r1, [r5, #0]
 800725e:	291d      	cmp	r1, #29
 8007260:	d84b      	bhi.n	80072fa <__sflush_r+0xf6>
 8007262:	4a2b      	ldr	r2, [pc, #172]	; (8007310 <__sflush_r+0x10c>)
 8007264:	40ca      	lsrs	r2, r1
 8007266:	07d6      	lsls	r6, r2, #31
 8007268:	d547      	bpl.n	80072fa <__sflush_r+0xf6>
 800726a:	2200      	movs	r2, #0
 800726c:	6062      	str	r2, [r4, #4]
 800726e:	04d9      	lsls	r1, r3, #19
 8007270:	6922      	ldr	r2, [r4, #16]
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	d504      	bpl.n	8007280 <__sflush_r+0x7c>
 8007276:	1c42      	adds	r2, r0, #1
 8007278:	d101      	bne.n	800727e <__sflush_r+0x7a>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	b903      	cbnz	r3, 8007280 <__sflush_r+0x7c>
 800727e:	6560      	str	r0, [r4, #84]	; 0x54
 8007280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007282:	602f      	str	r7, [r5, #0]
 8007284:	2900      	cmp	r1, #0
 8007286:	d0ca      	beq.n	800721e <__sflush_r+0x1a>
 8007288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800728c:	4299      	cmp	r1, r3
 800728e:	d002      	beq.n	8007296 <__sflush_r+0x92>
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f97d 	bl	8007590 <_free_r>
 8007296:	2000      	movs	r0, #0
 8007298:	6360      	str	r0, [r4, #52]	; 0x34
 800729a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729e:	6a21      	ldr	r1, [r4, #32]
 80072a0:	2301      	movs	r3, #1
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b0      	blx	r6
 80072a6:	1c41      	adds	r1, r0, #1
 80072a8:	d1c6      	bne.n	8007238 <__sflush_r+0x34>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0c3      	beq.n	8007238 <__sflush_r+0x34>
 80072b0:	2b1d      	cmp	r3, #29
 80072b2:	d001      	beq.n	80072b8 <__sflush_r+0xb4>
 80072b4:	2b16      	cmp	r3, #22
 80072b6:	d101      	bne.n	80072bc <__sflush_r+0xb8>
 80072b8:	602f      	str	r7, [r5, #0]
 80072ba:	e7b0      	b.n	800721e <__sflush_r+0x1a>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c8:	690f      	ldr	r7, [r1, #16]
 80072ca:	2f00      	cmp	r7, #0
 80072cc:	d0a7      	beq.n	800721e <__sflush_r+0x1a>
 80072ce:	0793      	lsls	r3, r2, #30
 80072d0:	680e      	ldr	r6, [r1, #0]
 80072d2:	bf08      	it	eq
 80072d4:	694b      	ldreq	r3, [r1, #20]
 80072d6:	600f      	str	r7, [r1, #0]
 80072d8:	bf18      	it	ne
 80072da:	2300      	movne	r3, #0
 80072dc:	eba6 0807 	sub.w	r8, r6, r7
 80072e0:	608b      	str	r3, [r1, #8]
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	dd9a      	ble.n	800721e <__sflush_r+0x1a>
 80072e8:	4643      	mov	r3, r8
 80072ea:	463a      	mov	r2, r7
 80072ec:	6a21      	ldr	r1, [r4, #32]
 80072ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dc07      	bgt.n	8007308 <__sflush_r+0x104>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007308:	4407      	add	r7, r0
 800730a:	eba8 0800 	sub.w	r8, r8, r0
 800730e:	e7e8      	b.n	80072e2 <__sflush_r+0xde>
 8007310:	20400001 	.word	0x20400001

08007314 <_fflush_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b1db      	cbz	r3, 8007356 <_fflush_r+0x42>
 800731e:	b118      	cbz	r0, 8007328 <_fflush_r+0x14>
 8007320:	6983      	ldr	r3, [r0, #24]
 8007322:	b90b      	cbnz	r3, 8007328 <_fflush_r+0x14>
 8007324:	f000 f872 	bl	800740c <__sinit>
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <_fflush_r+0x48>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d109      	bne.n	8007342 <_fflush_r+0x2e>
 800732e:	686c      	ldr	r4, [r5, #4]
 8007330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007334:	b17b      	cbz	r3, 8007356 <_fflush_r+0x42>
 8007336:	4621      	mov	r1, r4
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733e:	f7ff bf61 	b.w	8007204 <__sflush_r>
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <_fflush_r+0x4c>)
 8007344:	429c      	cmp	r4, r3
 8007346:	d101      	bne.n	800734c <_fflush_r+0x38>
 8007348:	68ac      	ldr	r4, [r5, #8]
 800734a:	e7f1      	b.n	8007330 <_fflush_r+0x1c>
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <_fflush_r+0x50>)
 800734e:	429c      	cmp	r4, r3
 8007350:	bf08      	it	eq
 8007352:	68ec      	ldreq	r4, [r5, #12]
 8007354:	e7ec      	b.n	8007330 <_fflush_r+0x1c>
 8007356:	2000      	movs	r0, #0
 8007358:	bd38      	pop	{r3, r4, r5, pc}
 800735a:	bf00      	nop
 800735c:	08008958 	.word	0x08008958
 8007360:	08008978 	.word	0x08008978
 8007364:	08008938 	.word	0x08008938

08007368 <fflush>:
 8007368:	4601      	mov	r1, r0
 800736a:	b920      	cbnz	r0, 8007376 <fflush+0xe>
 800736c:	4b04      	ldr	r3, [pc, #16]	; (8007380 <fflush+0x18>)
 800736e:	4905      	ldr	r1, [pc, #20]	; (8007384 <fflush+0x1c>)
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f000 b8b7 	b.w	80074e4 <_fwalk_reent>
 8007376:	4b04      	ldr	r3, [pc, #16]	; (8007388 <fflush+0x20>)
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f7ff bfcb 	b.w	8007314 <_fflush_r>
 800737e:	bf00      	nop
 8007380:	08008998 	.word	0x08008998
 8007384:	08007315 	.word	0x08007315
 8007388:	20000020 	.word	0x20000020

0800738c <_cleanup_r>:
 800738c:	4901      	ldr	r1, [pc, #4]	; (8007394 <_cleanup_r+0x8>)
 800738e:	f000 b8a9 	b.w	80074e4 <_fwalk_reent>
 8007392:	bf00      	nop
 8007394:	08007315 	.word	0x08007315

08007398 <std.isra.0>:
 8007398:	2300      	movs	r3, #0
 800739a:	b510      	push	{r4, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	6003      	str	r3, [r0, #0]
 80073a0:	6043      	str	r3, [r0, #4]
 80073a2:	6083      	str	r3, [r0, #8]
 80073a4:	8181      	strh	r1, [r0, #12]
 80073a6:	6643      	str	r3, [r0, #100]	; 0x64
 80073a8:	81c2      	strh	r2, [r0, #14]
 80073aa:	6103      	str	r3, [r0, #16]
 80073ac:	6143      	str	r3, [r0, #20]
 80073ae:	6183      	str	r3, [r0, #24]
 80073b0:	4619      	mov	r1, r3
 80073b2:	2208      	movs	r2, #8
 80073b4:	305c      	adds	r0, #92	; 0x5c
 80073b6:	f000 f8e2 	bl	800757e <memset>
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std.isra.0+0x38>)
 80073bc:	6263      	str	r3, [r4, #36]	; 0x24
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <std.isra.0+0x3c>)
 80073c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <std.isra.0+0x40>)
 80073c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <std.isra.0+0x44>)
 80073c8:	6224      	str	r4, [r4, #32]
 80073ca:	6323      	str	r3, [r4, #48]	; 0x30
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	08007871 	.word	0x08007871
 80073d4:	08007893 	.word	0x08007893
 80073d8:	080078cb 	.word	0x080078cb
 80073dc:	080078ef 	.word	0x080078ef

080073e0 <__sfmoreglue>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	1e4a      	subs	r2, r1, #1
 80073e4:	2568      	movs	r5, #104	; 0x68
 80073e6:	4355      	muls	r5, r2
 80073e8:	460e      	mov	r6, r1
 80073ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ee:	f000 f91d 	bl	800762c <_malloc_r>
 80073f2:	4604      	mov	r4, r0
 80073f4:	b140      	cbz	r0, 8007408 <__sfmoreglue+0x28>
 80073f6:	2100      	movs	r1, #0
 80073f8:	e880 0042 	stmia.w	r0, {r1, r6}
 80073fc:	300c      	adds	r0, #12
 80073fe:	60a0      	str	r0, [r4, #8]
 8007400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007404:	f000 f8bb 	bl	800757e <memset>
 8007408:	4620      	mov	r0, r4
 800740a:	bd70      	pop	{r4, r5, r6, pc}

0800740c <__sinit>:
 800740c:	6983      	ldr	r3, [r0, #24]
 800740e:	b510      	push	{r4, lr}
 8007410:	4604      	mov	r4, r0
 8007412:	bb33      	cbnz	r3, 8007462 <__sinit+0x56>
 8007414:	6483      	str	r3, [r0, #72]	; 0x48
 8007416:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007418:	6503      	str	r3, [r0, #80]	; 0x50
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <__sinit+0x58>)
 800741c:	4a12      	ldr	r2, [pc, #72]	; (8007468 <__sinit+0x5c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6282      	str	r2, [r0, #40]	; 0x28
 8007422:	4298      	cmp	r0, r3
 8007424:	bf04      	itt	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	6183      	streq	r3, [r0, #24]
 800742a:	f000 f81f 	bl	800746c <__sfp>
 800742e:	6060      	str	r0, [r4, #4]
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f81b 	bl	800746c <__sfp>
 8007436:	60a0      	str	r0, [r4, #8]
 8007438:	4620      	mov	r0, r4
 800743a:	f000 f817 	bl	800746c <__sfp>
 800743e:	2200      	movs	r2, #0
 8007440:	60e0      	str	r0, [r4, #12]
 8007442:	2104      	movs	r1, #4
 8007444:	6860      	ldr	r0, [r4, #4]
 8007446:	f7ff ffa7 	bl	8007398 <std.isra.0>
 800744a:	2201      	movs	r2, #1
 800744c:	2109      	movs	r1, #9
 800744e:	68a0      	ldr	r0, [r4, #8]
 8007450:	f7ff ffa2 	bl	8007398 <std.isra.0>
 8007454:	2202      	movs	r2, #2
 8007456:	2112      	movs	r1, #18
 8007458:	68e0      	ldr	r0, [r4, #12]
 800745a:	f7ff ff9d 	bl	8007398 <std.isra.0>
 800745e:	2301      	movs	r3, #1
 8007460:	61a3      	str	r3, [r4, #24]
 8007462:	bd10      	pop	{r4, pc}
 8007464:	08008998 	.word	0x08008998
 8007468:	0800738d 	.word	0x0800738d

0800746c <__sfp>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4b1c      	ldr	r3, [pc, #112]	; (80074e0 <__sfp+0x74>)
 8007470:	681e      	ldr	r6, [r3, #0]
 8007472:	69b3      	ldr	r3, [r6, #24]
 8007474:	4607      	mov	r7, r0
 8007476:	b913      	cbnz	r3, 800747e <__sfp+0x12>
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff ffc7 	bl	800740c <__sinit>
 800747e:	3648      	adds	r6, #72	; 0x48
 8007480:	68b4      	ldr	r4, [r6, #8]
 8007482:	6873      	ldr	r3, [r6, #4]
 8007484:	3b01      	subs	r3, #1
 8007486:	d503      	bpl.n	8007490 <__sfp+0x24>
 8007488:	6833      	ldr	r3, [r6, #0]
 800748a:	b133      	cbz	r3, 800749a <__sfp+0x2e>
 800748c:	6836      	ldr	r6, [r6, #0]
 800748e:	e7f7      	b.n	8007480 <__sfp+0x14>
 8007490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007494:	b16d      	cbz	r5, 80074b2 <__sfp+0x46>
 8007496:	3468      	adds	r4, #104	; 0x68
 8007498:	e7f4      	b.n	8007484 <__sfp+0x18>
 800749a:	2104      	movs	r1, #4
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff ff9f 	bl	80073e0 <__sfmoreglue>
 80074a2:	6030      	str	r0, [r6, #0]
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d1f1      	bne.n	800748c <__sfp+0x20>
 80074a8:	230c      	movs	r3, #12
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4604      	mov	r4, r0
 80074ae:	4620      	mov	r0, r4
 80074b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074b6:	81e3      	strh	r3, [r4, #14]
 80074b8:	2301      	movs	r3, #1
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	6665      	str	r5, [r4, #100]	; 0x64
 80074be:	6025      	str	r5, [r4, #0]
 80074c0:	60a5      	str	r5, [r4, #8]
 80074c2:	6065      	str	r5, [r4, #4]
 80074c4:	6125      	str	r5, [r4, #16]
 80074c6:	6165      	str	r5, [r4, #20]
 80074c8:	61a5      	str	r5, [r4, #24]
 80074ca:	2208      	movs	r2, #8
 80074cc:	4629      	mov	r1, r5
 80074ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d2:	f000 f854 	bl	800757e <memset>
 80074d6:	6365      	str	r5, [r4, #52]	; 0x34
 80074d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80074da:	64a5      	str	r5, [r4, #72]	; 0x48
 80074dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80074de:	e7e6      	b.n	80074ae <__sfp+0x42>
 80074e0:	08008998 	.word	0x08008998

080074e4 <_fwalk_reent>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	4680      	mov	r8, r0
 80074ea:	4689      	mov	r9, r1
 80074ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074f0:	2600      	movs	r6, #0
 80074f2:	b914      	cbnz	r4, 80074fa <_fwalk_reent+0x16>
 80074f4:	4630      	mov	r0, r6
 80074f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fa:	68a5      	ldr	r5, [r4, #8]
 80074fc:	6867      	ldr	r7, [r4, #4]
 80074fe:	3f01      	subs	r7, #1
 8007500:	d501      	bpl.n	8007506 <_fwalk_reent+0x22>
 8007502:	6824      	ldr	r4, [r4, #0]
 8007504:	e7f5      	b.n	80074f2 <_fwalk_reent+0xe>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d907      	bls.n	800751c <_fwalk_reent+0x38>
 800750c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007510:	3301      	adds	r3, #1
 8007512:	d003      	beq.n	800751c <_fwalk_reent+0x38>
 8007514:	4629      	mov	r1, r5
 8007516:	4640      	mov	r0, r8
 8007518:	47c8      	blx	r9
 800751a:	4306      	orrs	r6, r0
 800751c:	3568      	adds	r5, #104	; 0x68
 800751e:	e7ee      	b.n	80074fe <_fwalk_reent+0x1a>

08007520 <__libc_init_array>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	4e0d      	ldr	r6, [pc, #52]	; (8007558 <__libc_init_array+0x38>)
 8007524:	4c0d      	ldr	r4, [pc, #52]	; (800755c <__libc_init_array+0x3c>)
 8007526:	1ba4      	subs	r4, r4, r6
 8007528:	10a4      	asrs	r4, r4, #2
 800752a:	2500      	movs	r5, #0
 800752c:	42a5      	cmp	r5, r4
 800752e:	d109      	bne.n	8007544 <__libc_init_array+0x24>
 8007530:	4e0b      	ldr	r6, [pc, #44]	; (8007560 <__libc_init_array+0x40>)
 8007532:	4c0c      	ldr	r4, [pc, #48]	; (8007564 <__libc_init_array+0x44>)
 8007534:	f001 f85e 	bl	80085f4 <_init>
 8007538:	1ba4      	subs	r4, r4, r6
 800753a:	10a4      	asrs	r4, r4, #2
 800753c:	2500      	movs	r5, #0
 800753e:	42a5      	cmp	r5, r4
 8007540:	d105      	bne.n	800754e <__libc_init_array+0x2e>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007548:	4798      	blx	r3
 800754a:	3501      	adds	r5, #1
 800754c:	e7ee      	b.n	800752c <__libc_init_array+0xc>
 800754e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007552:	4798      	blx	r3
 8007554:	3501      	adds	r5, #1
 8007556:	e7f2      	b.n	800753e <__libc_init_array+0x1e>
 8007558:	08008bd0 	.word	0x08008bd0
 800755c:	08008bd0 	.word	0x08008bd0
 8007560:	08008bd0 	.word	0x08008bd0
 8007564:	08008bd8 	.word	0x08008bd8

08007568 <memcpy>:
 8007568:	b510      	push	{r4, lr}
 800756a:	1e43      	subs	r3, r0, #1
 800756c:	440a      	add	r2, r1
 800756e:	4291      	cmp	r1, r2
 8007570:	d100      	bne.n	8007574 <memcpy+0xc>
 8007572:	bd10      	pop	{r4, pc}
 8007574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757c:	e7f7      	b.n	800756e <memcpy+0x6>

0800757e <memset>:
 800757e:	4402      	add	r2, r0
 8007580:	4603      	mov	r3, r0
 8007582:	4293      	cmp	r3, r2
 8007584:	d100      	bne.n	8007588 <memset+0xa>
 8007586:	4770      	bx	lr
 8007588:	f803 1b01 	strb.w	r1, [r3], #1
 800758c:	e7f9      	b.n	8007582 <memset+0x4>
	...

08007590 <_free_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	2900      	cmp	r1, #0
 8007596:	d045      	beq.n	8007624 <_free_r+0x94>
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f0c      	subs	r4, r1, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	18e4      	addlt	r4, r4, r3
 80075a4:	f000 fb00 	bl	8007ba8 <__malloc_lock>
 80075a8:	4a1f      	ldr	r2, [pc, #124]	; (8007628 <_free_r+0x98>)
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	4610      	mov	r0, r2
 80075ae:	b933      	cbnz	r3, 80075be <_free_r+0x2e>
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	6014      	str	r4, [r2, #0]
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ba:	f000 baf6 	b.w	8007baa <__malloc_unlock>
 80075be:	42a3      	cmp	r3, r4
 80075c0:	d90c      	bls.n	80075dc <_free_r+0x4c>
 80075c2:	6821      	ldr	r1, [r4, #0]
 80075c4:	1862      	adds	r2, r4, r1
 80075c6:	4293      	cmp	r3, r2
 80075c8:	bf04      	itt	eq
 80075ca:	681a      	ldreq	r2, [r3, #0]
 80075cc:	685b      	ldreq	r3, [r3, #4]
 80075ce:	6063      	str	r3, [r4, #4]
 80075d0:	bf04      	itt	eq
 80075d2:	1852      	addeq	r2, r2, r1
 80075d4:	6022      	streq	r2, [r4, #0]
 80075d6:	6004      	str	r4, [r0, #0]
 80075d8:	e7ec      	b.n	80075b4 <_free_r+0x24>
 80075da:	4613      	mov	r3, r2
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	b10a      	cbz	r2, 80075e4 <_free_r+0x54>
 80075e0:	42a2      	cmp	r2, r4
 80075e2:	d9fa      	bls.n	80075da <_free_r+0x4a>
 80075e4:	6819      	ldr	r1, [r3, #0]
 80075e6:	1858      	adds	r0, r3, r1
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	d10b      	bne.n	8007604 <_free_r+0x74>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	4401      	add	r1, r0
 80075f0:	1858      	adds	r0, r3, r1
 80075f2:	4282      	cmp	r2, r0
 80075f4:	6019      	str	r1, [r3, #0]
 80075f6:	d1dd      	bne.n	80075b4 <_free_r+0x24>
 80075f8:	6810      	ldr	r0, [r2, #0]
 80075fa:	6852      	ldr	r2, [r2, #4]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	4401      	add	r1, r0
 8007600:	6019      	str	r1, [r3, #0]
 8007602:	e7d7      	b.n	80075b4 <_free_r+0x24>
 8007604:	d902      	bls.n	800760c <_free_r+0x7c>
 8007606:	230c      	movs	r3, #12
 8007608:	602b      	str	r3, [r5, #0]
 800760a:	e7d3      	b.n	80075b4 <_free_r+0x24>
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	1821      	adds	r1, r4, r0
 8007610:	428a      	cmp	r2, r1
 8007612:	bf04      	itt	eq
 8007614:	6811      	ldreq	r1, [r2, #0]
 8007616:	6852      	ldreq	r2, [r2, #4]
 8007618:	6062      	str	r2, [r4, #4]
 800761a:	bf04      	itt	eq
 800761c:	1809      	addeq	r1, r1, r0
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	605c      	str	r4, [r3, #4]
 8007622:	e7c7      	b.n	80075b4 <_free_r+0x24>
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	200014d8 	.word	0x200014d8

0800762c <_malloc_r>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	1ccd      	adds	r5, r1, #3
 8007630:	f025 0503 	bic.w	r5, r5, #3
 8007634:	3508      	adds	r5, #8
 8007636:	2d0c      	cmp	r5, #12
 8007638:	bf38      	it	cc
 800763a:	250c      	movcc	r5, #12
 800763c:	2d00      	cmp	r5, #0
 800763e:	4606      	mov	r6, r0
 8007640:	db01      	blt.n	8007646 <_malloc_r+0x1a>
 8007642:	42a9      	cmp	r1, r5
 8007644:	d903      	bls.n	800764e <_malloc_r+0x22>
 8007646:	230c      	movs	r3, #12
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	2000      	movs	r0, #0
 800764c:	bd70      	pop	{r4, r5, r6, pc}
 800764e:	f000 faab 	bl	8007ba8 <__malloc_lock>
 8007652:	4a23      	ldr	r2, [pc, #140]	; (80076e0 <_malloc_r+0xb4>)
 8007654:	6814      	ldr	r4, [r2, #0]
 8007656:	4621      	mov	r1, r4
 8007658:	b991      	cbnz	r1, 8007680 <_malloc_r+0x54>
 800765a:	4c22      	ldr	r4, [pc, #136]	; (80076e4 <_malloc_r+0xb8>)
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	b91b      	cbnz	r3, 8007668 <_malloc_r+0x3c>
 8007660:	4630      	mov	r0, r6
 8007662:	f000 f8d1 	bl	8007808 <_sbrk_r>
 8007666:	6020      	str	r0, [r4, #0]
 8007668:	4629      	mov	r1, r5
 800766a:	4630      	mov	r0, r6
 800766c:	f000 f8cc 	bl	8007808 <_sbrk_r>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d126      	bne.n	80076c2 <_malloc_r+0x96>
 8007674:	230c      	movs	r3, #12
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	4630      	mov	r0, r6
 800767a:	f000 fa96 	bl	8007baa <__malloc_unlock>
 800767e:	e7e4      	b.n	800764a <_malloc_r+0x1e>
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	1b5b      	subs	r3, r3, r5
 8007684:	d41a      	bmi.n	80076bc <_malloc_r+0x90>
 8007686:	2b0b      	cmp	r3, #11
 8007688:	d90f      	bls.n	80076aa <_malloc_r+0x7e>
 800768a:	600b      	str	r3, [r1, #0]
 800768c:	50cd      	str	r5, [r1, r3]
 800768e:	18cc      	adds	r4, r1, r3
 8007690:	4630      	mov	r0, r6
 8007692:	f000 fa8a 	bl	8007baa <__malloc_unlock>
 8007696:	f104 000b 	add.w	r0, r4, #11
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	f020 0007 	bic.w	r0, r0, #7
 80076a0:	1ac3      	subs	r3, r0, r3
 80076a2:	d01b      	beq.n	80076dc <_malloc_r+0xb0>
 80076a4:	425a      	negs	r2, r3
 80076a6:	50e2      	str	r2, [r4, r3]
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	428c      	cmp	r4, r1
 80076ac:	bf0d      	iteet	eq
 80076ae:	6863      	ldreq	r3, [r4, #4]
 80076b0:	684b      	ldrne	r3, [r1, #4]
 80076b2:	6063      	strne	r3, [r4, #4]
 80076b4:	6013      	streq	r3, [r2, #0]
 80076b6:	bf18      	it	ne
 80076b8:	460c      	movne	r4, r1
 80076ba:	e7e9      	b.n	8007690 <_malloc_r+0x64>
 80076bc:	460c      	mov	r4, r1
 80076be:	6849      	ldr	r1, [r1, #4]
 80076c0:	e7ca      	b.n	8007658 <_malloc_r+0x2c>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d005      	beq.n	80076d8 <_malloc_r+0xac>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f89a 	bl	8007808 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d0cd      	beq.n	8007674 <_malloc_r+0x48>
 80076d8:	6025      	str	r5, [r4, #0]
 80076da:	e7d9      	b.n	8007690 <_malloc_r+0x64>
 80076dc:	bd70      	pop	{r4, r5, r6, pc}
 80076de:	bf00      	nop
 80076e0:	200014d8 	.word	0x200014d8
 80076e4:	200014dc 	.word	0x200014dc

080076e8 <iprintf>:
 80076e8:	b40f      	push	{r0, r1, r2, r3}
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <iprintf+0x2c>)
 80076ec:	b513      	push	{r0, r1, r4, lr}
 80076ee:	681c      	ldr	r4, [r3, #0]
 80076f0:	b124      	cbz	r4, 80076fc <iprintf+0x14>
 80076f2:	69a3      	ldr	r3, [r4, #24]
 80076f4:	b913      	cbnz	r3, 80076fc <iprintf+0x14>
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff fe88 	bl	800740c <__sinit>
 80076fc:	ab05      	add	r3, sp, #20
 80076fe:	9a04      	ldr	r2, [sp, #16]
 8007700:	68a1      	ldr	r1, [r4, #8]
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fbcb 	bl	8007ea0 <_vfiprintf_r>
 800770a:	b002      	add	sp, #8
 800770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007710:	b004      	add	sp, #16
 8007712:	4770      	bx	lr
 8007714:	20000020 	.word	0x20000020

08007718 <putchar>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4b08      	ldr	r3, [pc, #32]	; (800773c <putchar+0x24>)
 800771c:	681c      	ldr	r4, [r3, #0]
 800771e:	4605      	mov	r5, r0
 8007720:	b124      	cbz	r4, 800772c <putchar+0x14>
 8007722:	69a3      	ldr	r3, [r4, #24]
 8007724:	b913      	cbnz	r3, 800772c <putchar+0x14>
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff fe70 	bl	800740c <__sinit>
 800772c:	68a2      	ldr	r2, [r4, #8]
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007736:	f000 be5f 	b.w	80083f8 <_putc_r>
 800773a:	bf00      	nop
 800773c:	20000020 	.word	0x20000020

08007740 <_puts_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	4605      	mov	r5, r0
 8007746:	b118      	cbz	r0, 8007750 <_puts_r+0x10>
 8007748:	6983      	ldr	r3, [r0, #24]
 800774a:	b90b      	cbnz	r3, 8007750 <_puts_r+0x10>
 800774c:	f7ff fe5e 	bl	800740c <__sinit>
 8007750:	69ab      	ldr	r3, [r5, #24]
 8007752:	68ac      	ldr	r4, [r5, #8]
 8007754:	b913      	cbnz	r3, 800775c <_puts_r+0x1c>
 8007756:	4628      	mov	r0, r5
 8007758:	f7ff fe58 	bl	800740c <__sinit>
 800775c:	4b23      	ldr	r3, [pc, #140]	; (80077ec <_puts_r+0xac>)
 800775e:	429c      	cmp	r4, r3
 8007760:	d117      	bne.n	8007792 <_puts_r+0x52>
 8007762:	686c      	ldr	r4, [r5, #4]
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	071b      	lsls	r3, r3, #28
 8007768:	d51d      	bpl.n	80077a6 <_puts_r+0x66>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	b1db      	cbz	r3, 80077a6 <_puts_r+0x66>
 800776e:	3e01      	subs	r6, #1
 8007770:	68a3      	ldr	r3, [r4, #8]
 8007772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007776:	3b01      	subs	r3, #1
 8007778:	60a3      	str	r3, [r4, #8]
 800777a:	b9e9      	cbnz	r1, 80077b8 <_puts_r+0x78>
 800777c:	2b00      	cmp	r3, #0
 800777e:	da2e      	bge.n	80077de <_puts_r+0x9e>
 8007780:	4622      	mov	r2, r4
 8007782:	210a      	movs	r1, #10
 8007784:	4628      	mov	r0, r5
 8007786:	f000 f8b7 	bl	80078f8 <__swbuf_r>
 800778a:	3001      	adds	r0, #1
 800778c:	d011      	beq.n	80077b2 <_puts_r+0x72>
 800778e:	200a      	movs	r0, #10
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <_puts_r+0xb0>)
 8007794:	429c      	cmp	r4, r3
 8007796:	d101      	bne.n	800779c <_puts_r+0x5c>
 8007798:	68ac      	ldr	r4, [r5, #8]
 800779a:	e7e3      	b.n	8007764 <_puts_r+0x24>
 800779c:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <_puts_r+0xb4>)
 800779e:	429c      	cmp	r4, r3
 80077a0:	bf08      	it	eq
 80077a2:	68ec      	ldreq	r4, [r5, #12]
 80077a4:	e7de      	b.n	8007764 <_puts_r+0x24>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f909 	bl	80079c0 <__swsetup_r>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d0dd      	beq.n	800776e <_puts_r+0x2e>
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da04      	bge.n	80077c6 <_puts_r+0x86>
 80077bc:	69a2      	ldr	r2, [r4, #24]
 80077be:	4293      	cmp	r3, r2
 80077c0:	db06      	blt.n	80077d0 <_puts_r+0x90>
 80077c2:	290a      	cmp	r1, #10
 80077c4:	d004      	beq.n	80077d0 <_puts_r+0x90>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	6022      	str	r2, [r4, #0]
 80077cc:	7019      	strb	r1, [r3, #0]
 80077ce:	e7cf      	b.n	8007770 <_puts_r+0x30>
 80077d0:	4622      	mov	r2, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f890 	bl	80078f8 <__swbuf_r>
 80077d8:	3001      	adds	r0, #1
 80077da:	d1c9      	bne.n	8007770 <_puts_r+0x30>
 80077dc:	e7e9      	b.n	80077b2 <_puts_r+0x72>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	200a      	movs	r0, #10
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	7018      	strb	r0, [r3, #0]
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	bf00      	nop
 80077ec:	08008958 	.word	0x08008958
 80077f0:	08008978 	.word	0x08008978
 80077f4:	08008938 	.word	0x08008938

080077f8 <puts>:
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <puts+0xc>)
 80077fa:	4601      	mov	r1, r0
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f7ff bf9f 	b.w	8007740 <_puts_r>
 8007802:	bf00      	nop
 8007804:	20000020 	.word	0x20000020

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4c06      	ldr	r4, [pc, #24]	; (8007824 <_sbrk_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4605      	mov	r5, r0
 8007810:	4608      	mov	r0, r1
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	f7ff fc7c 	bl	8007110 <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	2000162c 	.word	0x2000162c

08007828 <siprintf>:
 8007828:	b40e      	push	{r1, r2, r3}
 800782a:	b500      	push	{lr}
 800782c:	b09c      	sub	sp, #112	; 0x70
 800782e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007832:	ab1d      	add	r3, sp, #116	; 0x74
 8007834:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	9006      	str	r0, [sp, #24]
 800783c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007840:	480a      	ldr	r0, [pc, #40]	; (800786c <siprintf+0x44>)
 8007842:	9104      	str	r1, [sp, #16]
 8007844:	9107      	str	r1, [sp, #28]
 8007846:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800784a:	f853 2b04 	ldr.w	r2, [r3], #4
 800784e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	a902      	add	r1, sp, #8
 8007858:	f000 fa04 	bl	8007c64 <_svfiprintf_r>
 800785c:	9b02      	ldr	r3, [sp, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	b01c      	add	sp, #112	; 0x70
 8007864:	f85d eb04 	ldr.w	lr, [sp], #4
 8007868:	b003      	add	sp, #12
 800786a:	4770      	bx	lr
 800786c:	20000020 	.word	0x20000020

08007870 <__sread>:
 8007870:	b510      	push	{r4, lr}
 8007872:	460c      	mov	r4, r1
 8007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007878:	f000 fdf4 	bl	8008464 <_read_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	bfab      	itete	ge
 8007880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007882:	89a3      	ldrhlt	r3, [r4, #12]
 8007884:	181b      	addge	r3, r3, r0
 8007886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800788a:	bfac      	ite	ge
 800788c:	6563      	strge	r3, [r4, #84]	; 0x54
 800788e:	81a3      	strhlt	r3, [r4, #12]
 8007890:	bd10      	pop	{r4, pc}

08007892 <__swrite>:
 8007892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007896:	461f      	mov	r7, r3
 8007898:	898b      	ldrh	r3, [r1, #12]
 800789a:	05db      	lsls	r3, r3, #23
 800789c:	4605      	mov	r5, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4616      	mov	r6, r2
 80078a2:	d505      	bpl.n	80078b0 <__swrite+0x1e>
 80078a4:	2302      	movs	r3, #2
 80078a6:	2200      	movs	r2, #0
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	f000 f906 	bl	8007abc <_lseek_r>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	4628      	mov	r0, r5
 80078c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c6:	f000 b869 	b.w	800799c <_write_r>

080078ca <__sseek>:
 80078ca:	b510      	push	{r4, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 f8f3 	bl	8007abc <_lseek_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	bf15      	itete	ne
 80078dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078e6:	81a3      	strheq	r3, [r4, #12]
 80078e8:	bf18      	it	ne
 80078ea:	81a3      	strhne	r3, [r4, #12]
 80078ec:	bd10      	pop	{r4, pc}

080078ee <__sclose>:
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 b8d3 	b.w	8007a9c <_close_r>
	...

080078f8 <__swbuf_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	460e      	mov	r6, r1
 80078fc:	4614      	mov	r4, r2
 80078fe:	4605      	mov	r5, r0
 8007900:	b118      	cbz	r0, 800790a <__swbuf_r+0x12>
 8007902:	6983      	ldr	r3, [r0, #24]
 8007904:	b90b      	cbnz	r3, 800790a <__swbuf_r+0x12>
 8007906:	f7ff fd81 	bl	800740c <__sinit>
 800790a:	4b21      	ldr	r3, [pc, #132]	; (8007990 <__swbuf_r+0x98>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d12a      	bne.n	8007966 <__swbuf_r+0x6e>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	69a3      	ldr	r3, [r4, #24]
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	071a      	lsls	r2, r3, #28
 800791a:	d52e      	bpl.n	800797a <__swbuf_r+0x82>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	b363      	cbz	r3, 800797a <__swbuf_r+0x82>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	6820      	ldr	r0, [r4, #0]
 8007924:	1ac0      	subs	r0, r0, r3
 8007926:	6963      	ldr	r3, [r4, #20]
 8007928:	b2f6      	uxtb	r6, r6
 800792a:	4298      	cmp	r0, r3
 800792c:	4637      	mov	r7, r6
 800792e:	db04      	blt.n	800793a <__swbuf_r+0x42>
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f7ff fcee 	bl	8007314 <_fflush_r>
 8007938:	bb28      	cbnz	r0, 8007986 <__swbuf_r+0x8e>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	3b01      	subs	r3, #1
 800793e:	60a3      	str	r3, [r4, #8]
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	701e      	strb	r6, [r3, #0]
 8007948:	6963      	ldr	r3, [r4, #20]
 800794a:	3001      	adds	r0, #1
 800794c:	4298      	cmp	r0, r3
 800794e:	d004      	beq.n	800795a <__swbuf_r+0x62>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	07db      	lsls	r3, r3, #31
 8007954:	d519      	bpl.n	800798a <__swbuf_r+0x92>
 8007956:	2e0a      	cmp	r6, #10
 8007958:	d117      	bne.n	800798a <__swbuf_r+0x92>
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f7ff fcd9 	bl	8007314 <_fflush_r>
 8007962:	b190      	cbz	r0, 800798a <__swbuf_r+0x92>
 8007964:	e00f      	b.n	8007986 <__swbuf_r+0x8e>
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <__swbuf_r+0x9c>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d101      	bne.n	8007970 <__swbuf_r+0x78>
 800796c:	68ac      	ldr	r4, [r5, #8]
 800796e:	e7d0      	b.n	8007912 <__swbuf_r+0x1a>
 8007970:	4b09      	ldr	r3, [pc, #36]	; (8007998 <__swbuf_r+0xa0>)
 8007972:	429c      	cmp	r4, r3
 8007974:	bf08      	it	eq
 8007976:	68ec      	ldreq	r4, [r5, #12]
 8007978:	e7cb      	b.n	8007912 <__swbuf_r+0x1a>
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f000 f81f 	bl	80079c0 <__swsetup_r>
 8007982:	2800      	cmp	r0, #0
 8007984:	d0cc      	beq.n	8007920 <__swbuf_r+0x28>
 8007986:	f04f 37ff 	mov.w	r7, #4294967295
 800798a:	4638      	mov	r0, r7
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798e:	bf00      	nop
 8007990:	08008958 	.word	0x08008958
 8007994:	08008978 	.word	0x08008978
 8007998:	08008938 	.word	0x08008938

0800799c <_write_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4c07      	ldr	r4, [pc, #28]	; (80079bc <_write_r+0x20>)
 80079a0:	4605      	mov	r5, r0
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7ff fba2 	bl	80070f4 <_write>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_write_r+0x1e>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_write_r+0x1e>
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	2000162c 	.word	0x2000162c

080079c0 <__swsetup_r>:
 80079c0:	4b32      	ldr	r3, [pc, #200]	; (8007a8c <__swsetup_r+0xcc>)
 80079c2:	b570      	push	{r4, r5, r6, lr}
 80079c4:	681d      	ldr	r5, [r3, #0]
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	b125      	cbz	r5, 80079d6 <__swsetup_r+0x16>
 80079cc:	69ab      	ldr	r3, [r5, #24]
 80079ce:	b913      	cbnz	r3, 80079d6 <__swsetup_r+0x16>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7ff fd1b 	bl	800740c <__sinit>
 80079d6:	4b2e      	ldr	r3, [pc, #184]	; (8007a90 <__swsetup_r+0xd0>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	d10f      	bne.n	80079fc <__swsetup_r+0x3c>
 80079dc:	686c      	ldr	r4, [r5, #4]
 80079de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	0715      	lsls	r5, r2, #28
 80079e6:	d42c      	bmi.n	8007a42 <__swsetup_r+0x82>
 80079e8:	06d0      	lsls	r0, r2, #27
 80079ea:	d411      	bmi.n	8007a10 <__swsetup_r+0x50>
 80079ec:	2209      	movs	r2, #9
 80079ee:	6032      	str	r2, [r6, #0]
 80079f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <__swsetup_r+0xd4>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d101      	bne.n	8007a06 <__swsetup_r+0x46>
 8007a02:	68ac      	ldr	r4, [r5, #8]
 8007a04:	e7eb      	b.n	80079de <__swsetup_r+0x1e>
 8007a06:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <__swsetup_r+0xd8>)
 8007a08:	429c      	cmp	r4, r3
 8007a0a:	bf08      	it	eq
 8007a0c:	68ec      	ldreq	r4, [r5, #12]
 8007a0e:	e7e6      	b.n	80079de <__swsetup_r+0x1e>
 8007a10:	0751      	lsls	r1, r2, #29
 8007a12:	d512      	bpl.n	8007a3a <__swsetup_r+0x7a>
 8007a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a16:	b141      	cbz	r1, 8007a2a <__swsetup_r+0x6a>
 8007a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	d002      	beq.n	8007a26 <__swsetup_r+0x66>
 8007a20:	4630      	mov	r0, r6
 8007a22:	f7ff fdb5 	bl	8007590 <_free_r>
 8007a26:	2300      	movs	r3, #0
 8007a28:	6363      	str	r3, [r4, #52]	; 0x34
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	2300      	movs	r3, #0
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f043 0308 	orr.w	r3, r3, #8
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	b94b      	cbnz	r3, 8007a5a <__swsetup_r+0x9a>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a50:	d003      	beq.n	8007a5a <__swsetup_r+0x9a>
 8007a52:	4621      	mov	r1, r4
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 f867 	bl	8007b28 <__smakebuf_r>
 8007a5a:	89a2      	ldrh	r2, [r4, #12]
 8007a5c:	f012 0301 	ands.w	r3, r2, #1
 8007a60:	d00c      	beq.n	8007a7c <__swsetup_r+0xbc>
 8007a62:	2300      	movs	r3, #0
 8007a64:	60a3      	str	r3, [r4, #8]
 8007a66:	6963      	ldr	r3, [r4, #20]
 8007a68:	425b      	negs	r3, r3
 8007a6a:	61a3      	str	r3, [r4, #24]
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	b953      	cbnz	r3, 8007a86 <__swsetup_r+0xc6>
 8007a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a78:	d1ba      	bne.n	80079f0 <__swsetup_r+0x30>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	0792      	lsls	r2, r2, #30
 8007a7e:	bf58      	it	pl
 8007a80:	6963      	ldrpl	r3, [r4, #20]
 8007a82:	60a3      	str	r3, [r4, #8]
 8007a84:	e7f2      	b.n	8007a6c <__swsetup_r+0xac>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7f7      	b.n	8007a7a <__swsetup_r+0xba>
 8007a8a:	bf00      	nop
 8007a8c:	20000020 	.word	0x20000020
 8007a90:	08008958 	.word	0x08008958
 8007a94:	08008978 	.word	0x08008978
 8007a98:	08008938 	.word	0x08008938

08007a9c <_close_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4c06      	ldr	r4, [pc, #24]	; (8007ab8 <_close_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	f7ff fb4c 	bl	8007144 <_close>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_close_r+0x1a>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_close_r+0x1a>
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	2000162c 	.word	0x2000162c

08007abc <_lseek_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4c07      	ldr	r4, [pc, #28]	; (8007adc <_lseek_r+0x20>)
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7ff fb44 	bl	8007158 <_lseek>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_lseek_r+0x1e>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_lseek_r+0x1e>
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	2000162c 	.word	0x2000162c

08007ae0 <__swhatbuf_r>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	460e      	mov	r6, r1
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	b090      	sub	sp, #64	; 0x40
 8007aec:	4614      	mov	r4, r2
 8007aee:	461d      	mov	r5, r3
 8007af0:	da07      	bge.n	8007b02 <__swhatbuf_r+0x22>
 8007af2:	2300      	movs	r3, #0
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	89b3      	ldrh	r3, [r6, #12]
 8007af8:	061a      	lsls	r2, r3, #24
 8007afa:	d410      	bmi.n	8007b1e <__swhatbuf_r+0x3e>
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	e00e      	b.n	8007b20 <__swhatbuf_r+0x40>
 8007b02:	aa01      	add	r2, sp, #4
 8007b04:	f000 fcc0 	bl	8008488 <_fstat_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dbf2      	blt.n	8007af2 <__swhatbuf_r+0x12>
 8007b0c:	9a02      	ldr	r2, [sp, #8]
 8007b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b16:	425a      	negs	r2, r3
 8007b18:	415a      	adcs	r2, r3
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	e7ee      	b.n	8007afc <__swhatbuf_r+0x1c>
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2000      	movs	r0, #0
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	b010      	add	sp, #64	; 0x40
 8007b26:	bd70      	pop	{r4, r5, r6, pc}

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	ab01      	add	r3, sp, #4
 8007b46:	466a      	mov	r2, sp
 8007b48:	f7ff ffca 	bl	8007ae0 <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff fd6b 	bl	800762c <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	6120      	str	r0, [r4, #16]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 fc8f 	bl	80084ac <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	431d      	orrs	r5, r3
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	0800738d 	.word	0x0800738d

08007ba8 <__malloc_lock>:
 8007ba8:	4770      	bx	lr

08007baa <__malloc_unlock>:
 8007baa:	4770      	bx	lr

08007bac <__ssputs_r>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	688e      	ldr	r6, [r1, #8]
 8007bb2:	429e      	cmp	r6, r3
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4691      	mov	r9, r2
 8007bba:	4698      	mov	r8, r3
 8007bbc:	d835      	bhi.n	8007c2a <__ssputs_r+0x7e>
 8007bbe:	898a      	ldrh	r2, [r1, #12]
 8007bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc4:	d031      	beq.n	8007c2a <__ssputs_r+0x7e>
 8007bc6:	6825      	ldr	r5, [r4, #0]
 8007bc8:	6909      	ldr	r1, [r1, #16]
 8007bca:	1a6f      	subs	r7, r5, r1
 8007bcc:	6965      	ldr	r5, [r4, #20]
 8007bce:	2302      	movs	r3, #2
 8007bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007bd8:	f108 0301 	add.w	r3, r8, #1
 8007bdc:	443b      	add	r3, r7
 8007bde:	429d      	cmp	r5, r3
 8007be0:	bf38      	it	cc
 8007be2:	461d      	movcc	r5, r3
 8007be4:	0553      	lsls	r3, r2, #21
 8007be6:	d531      	bpl.n	8007c4c <__ssputs_r+0xa0>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7ff fd1f 	bl	800762c <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b950      	cbnz	r0, 8007c08 <__ssputs_r+0x5c>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	f8ca 3000 	str.w	r3, [sl]
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	463a      	mov	r2, r7
 8007c0a:	6921      	ldr	r1, [r4, #16]
 8007c0c:	f7ff fcac 	bl	8007568 <memcpy>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	6126      	str	r6, [r4, #16]
 8007c1e:	6165      	str	r5, [r4, #20]
 8007c20:	443e      	add	r6, r7
 8007c22:	1bed      	subs	r5, r5, r7
 8007c24:	6026      	str	r6, [r4, #0]
 8007c26:	60a5      	str	r5, [r4, #8]
 8007c28:	4646      	mov	r6, r8
 8007c2a:	4546      	cmp	r6, r8
 8007c2c:	bf28      	it	cs
 8007c2e:	4646      	movcs	r6, r8
 8007c30:	4632      	mov	r2, r6
 8007c32:	4649      	mov	r1, r9
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	f000 fc49 	bl	80084cc <memmove>
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	1b9b      	subs	r3, r3, r6
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	441e      	add	r6, r3
 8007c44:	6026      	str	r6, [r4, #0]
 8007c46:	2000      	movs	r0, #0
 8007c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f000 fc57 	bl	8008500 <_realloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e1      	bne.n	8007c1c <__ssputs_r+0x70>
 8007c58:	6921      	ldr	r1, [r4, #16]
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f7ff fc98 	bl	8007590 <_free_r>
 8007c60:	e7c7      	b.n	8007bf2 <__ssputs_r+0x46>
	...

08007c64 <_svfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	b09d      	sub	sp, #116	; 0x74
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	9303      	str	r3, [sp, #12]
 8007c6e:	898b      	ldrh	r3, [r1, #12]
 8007c70:	061c      	lsls	r4, r3, #24
 8007c72:	460d      	mov	r5, r1
 8007c74:	4616      	mov	r6, r2
 8007c76:	d50f      	bpl.n	8007c98 <_svfiprintf_r+0x34>
 8007c78:	690b      	ldr	r3, [r1, #16]
 8007c7a:	b96b      	cbnz	r3, 8007c98 <_svfiprintf_r+0x34>
 8007c7c:	2140      	movs	r1, #64	; 0x40
 8007c7e:	f7ff fcd5 	bl	800762c <_malloc_r>
 8007c82:	6028      	str	r0, [r5, #0]
 8007c84:	6128      	str	r0, [r5, #16]
 8007c86:	b928      	cbnz	r0, 8007c94 <_svfiprintf_r+0x30>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	f8c8 3000 	str.w	r3, [r8]
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	e0c5      	b.n	8007e20 <_svfiprintf_r+0x1bc>
 8007c94:	2340      	movs	r3, #64	; 0x40
 8007c96:	616b      	str	r3, [r5, #20]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9c:	2320      	movs	r3, #32
 8007c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ca2:	2330      	movs	r3, #48	; 0x30
 8007ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ca8:	f04f 0b01 	mov.w	fp, #1
 8007cac:	4637      	mov	r7, r6
 8007cae:	463c      	mov	r4, r7
 8007cb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d13c      	bne.n	8007d32 <_svfiprintf_r+0xce>
 8007cb8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007cbc:	d00b      	beq.n	8007cd6 <_svfiprintf_r+0x72>
 8007cbe:	4653      	mov	r3, sl
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	f7ff ff71 	bl	8007bac <__ssputs_r>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f000 80a3 	beq.w	8007e16 <_svfiprintf_r+0x1b2>
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	4453      	add	r3, sl
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	783b      	ldrb	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 809c 	beq.w	8007e16 <_svfiprintf_r+0x1b2>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	9307      	str	r3, [sp, #28]
 8007ce8:	9205      	str	r2, [sp, #20]
 8007cea:	9306      	str	r3, [sp, #24]
 8007cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	7821      	ldrb	r1, [r4, #0]
 8007cf6:	4850      	ldr	r0, [pc, #320]	; (8007e38 <_svfiprintf_r+0x1d4>)
 8007cf8:	f7f8 fa72 	bl	80001e0 <memchr>
 8007cfc:	1c67      	adds	r7, r4, #1
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	b9d8      	cbnz	r0, 8007d3a <_svfiprintf_r+0xd6>
 8007d02:	06d9      	lsls	r1, r3, #27
 8007d04:	bf44      	itt	mi
 8007d06:	2220      	movmi	r2, #32
 8007d08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d0c:	071a      	lsls	r2, r3, #28
 8007d0e:	bf44      	itt	mi
 8007d10:	222b      	movmi	r2, #43	; 0x2b
 8007d12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d16:	7822      	ldrb	r2, [r4, #0]
 8007d18:	2a2a      	cmp	r2, #42	; 0x2a
 8007d1a:	d016      	beq.n	8007d4a <_svfiprintf_r+0xe6>
 8007d1c:	9a07      	ldr	r2, [sp, #28]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	200a      	movs	r0, #10
 8007d22:	4627      	mov	r7, r4
 8007d24:	3401      	adds	r4, #1
 8007d26:	783b      	ldrb	r3, [r7, #0]
 8007d28:	3b30      	subs	r3, #48	; 0x30
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d951      	bls.n	8007dd2 <_svfiprintf_r+0x16e>
 8007d2e:	b1c9      	cbz	r1, 8007d64 <_svfiprintf_r+0x100>
 8007d30:	e011      	b.n	8007d56 <_svfiprintf_r+0xf2>
 8007d32:	2b25      	cmp	r3, #37	; 0x25
 8007d34:	d0c0      	beq.n	8007cb8 <_svfiprintf_r+0x54>
 8007d36:	4627      	mov	r7, r4
 8007d38:	e7b9      	b.n	8007cae <_svfiprintf_r+0x4a>
 8007d3a:	4a3f      	ldr	r2, [pc, #252]	; (8007e38 <_svfiprintf_r+0x1d4>)
 8007d3c:	1a80      	subs	r0, r0, r2
 8007d3e:	fa0b f000 	lsl.w	r0, fp, r0
 8007d42:	4318      	orrs	r0, r3
 8007d44:	9004      	str	r0, [sp, #16]
 8007d46:	463c      	mov	r4, r7
 8007d48:	e7d3      	b.n	8007cf2 <_svfiprintf_r+0x8e>
 8007d4a:	9a03      	ldr	r2, [sp, #12]
 8007d4c:	1d11      	adds	r1, r2, #4
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	9103      	str	r1, [sp, #12]
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	db01      	blt.n	8007d5a <_svfiprintf_r+0xf6>
 8007d56:	9207      	str	r2, [sp, #28]
 8007d58:	e004      	b.n	8007d64 <_svfiprintf_r+0x100>
 8007d5a:	4252      	negs	r2, r2
 8007d5c:	f043 0302 	orr.w	r3, r3, #2
 8007d60:	9207      	str	r2, [sp, #28]
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	783b      	ldrb	r3, [r7, #0]
 8007d66:	2b2e      	cmp	r3, #46	; 0x2e
 8007d68:	d10e      	bne.n	8007d88 <_svfiprintf_r+0x124>
 8007d6a:	787b      	ldrb	r3, [r7, #1]
 8007d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6e:	f107 0101 	add.w	r1, r7, #1
 8007d72:	d132      	bne.n	8007dda <_svfiprintf_r+0x176>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	9203      	str	r2, [sp, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bfb8      	it	lt
 8007d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d84:	3702      	adds	r7, #2
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	4c2c      	ldr	r4, [pc, #176]	; (8007e3c <_svfiprintf_r+0x1d8>)
 8007d8a:	7839      	ldrb	r1, [r7, #0]
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7f8 fa26 	bl	80001e0 <memchr>
 8007d94:	b138      	cbz	r0, 8007da6 <_svfiprintf_r+0x142>
 8007d96:	2340      	movs	r3, #64	; 0x40
 8007d98:	1b00      	subs	r0, r0, r4
 8007d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	4303      	orrs	r3, r0
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	3701      	adds	r7, #1
 8007da6:	7839      	ldrb	r1, [r7, #0]
 8007da8:	4825      	ldr	r0, [pc, #148]	; (8007e40 <_svfiprintf_r+0x1dc>)
 8007daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dae:	2206      	movs	r2, #6
 8007db0:	1c7e      	adds	r6, r7, #1
 8007db2:	f7f8 fa15 	bl	80001e0 <memchr>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d035      	beq.n	8007e26 <_svfiprintf_r+0x1c2>
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <_svfiprintf_r+0x1e0>)
 8007dbc:	b9fb      	cbnz	r3, 8007dfe <_svfiprintf_r+0x19a>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	f023 0307 	bic.w	r3, r3, #7
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dcc:	444b      	add	r3, r9
 8007dce:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd0:	e76c      	b.n	8007cac <_svfiprintf_r+0x48>
 8007dd2:	fb00 3202 	mla	r2, r0, r2, r3
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	e7a3      	b.n	8007d22 <_svfiprintf_r+0xbe>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	4618      	mov	r0, r3
 8007de0:	240a      	movs	r4, #10
 8007de2:	460f      	mov	r7, r1
 8007de4:	3101      	adds	r1, #1
 8007de6:	783a      	ldrb	r2, [r7, #0]
 8007de8:	3a30      	subs	r2, #48	; 0x30
 8007dea:	2a09      	cmp	r2, #9
 8007dec:	d903      	bls.n	8007df6 <_svfiprintf_r+0x192>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0ca      	beq.n	8007d88 <_svfiprintf_r+0x124>
 8007df2:	9005      	str	r0, [sp, #20]
 8007df4:	e7c8      	b.n	8007d88 <_svfiprintf_r+0x124>
 8007df6:	fb04 2000 	mla	r0, r4, r0, r2
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e7f1      	b.n	8007de2 <_svfiprintf_r+0x17e>
 8007dfe:	ab03      	add	r3, sp, #12
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	462a      	mov	r2, r5
 8007e04:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <_svfiprintf_r+0x1e4>)
 8007e06:	a904      	add	r1, sp, #16
 8007e08:	4640      	mov	r0, r8
 8007e0a:	f3af 8000 	nop.w
 8007e0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e12:	4681      	mov	r9, r0
 8007e14:	d1d9      	bne.n	8007dca <_svfiprintf_r+0x166>
 8007e16:	89ab      	ldrh	r3, [r5, #12]
 8007e18:	065b      	lsls	r3, r3, #25
 8007e1a:	f53f af38 	bmi.w	8007c8e <_svfiprintf_r+0x2a>
 8007e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e20:	b01d      	add	sp, #116	; 0x74
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	ab03      	add	r3, sp, #12
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <_svfiprintf_r+0x1e4>)
 8007e2e:	a904      	add	r1, sp, #16
 8007e30:	4640      	mov	r0, r8
 8007e32:	f000 f9c1 	bl	80081b8 <_printf_i>
 8007e36:	e7ea      	b.n	8007e0e <_svfiprintf_r+0x1aa>
 8007e38:	0800899c 	.word	0x0800899c
 8007e3c:	080089a2 	.word	0x080089a2
 8007e40:	080089a6 	.word	0x080089a6
 8007e44:	00000000 	.word	0x00000000
 8007e48:	08007bad 	.word	0x08007bad

08007e4c <__sfputc_r>:
 8007e4c:	6893      	ldr	r3, [r2, #8]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	b410      	push	{r4}
 8007e54:	6093      	str	r3, [r2, #8]
 8007e56:	da09      	bge.n	8007e6c <__sfputc_r+0x20>
 8007e58:	6994      	ldr	r4, [r2, #24]
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	db02      	blt.n	8007e64 <__sfputc_r+0x18>
 8007e5e:	b2cb      	uxtb	r3, r1
 8007e60:	2b0a      	cmp	r3, #10
 8007e62:	d103      	bne.n	8007e6c <__sfputc_r+0x20>
 8007e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e68:	f7ff bd46 	b.w	80078f8 <__swbuf_r>
 8007e6c:	6813      	ldr	r3, [r2, #0]
 8007e6e:	1c58      	adds	r0, r3, #1
 8007e70:	6010      	str	r0, [r2, #0]
 8007e72:	7019      	strb	r1, [r3, #0]
 8007e74:	b2c8      	uxtb	r0, r1
 8007e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <__sfputs_r>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	4614      	mov	r4, r2
 8007e84:	18d5      	adds	r5, r2, r3
 8007e86:	42ac      	cmp	r4, r5
 8007e88:	d101      	bne.n	8007e8e <__sfputs_r+0x12>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e007      	b.n	8007e9e <__sfputs_r+0x22>
 8007e8e:	463a      	mov	r2, r7
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff ffd9 	bl	8007e4c <__sfputc_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	d1f3      	bne.n	8007e86 <__sfputs_r+0xa>
 8007e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ea0 <_vfiprintf_r>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	b09d      	sub	sp, #116	; 0x74
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4617      	mov	r7, r2
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	4606      	mov	r6, r0
 8007eae:	b118      	cbz	r0, 8007eb8 <_vfiprintf_r+0x18>
 8007eb0:	6983      	ldr	r3, [r0, #24]
 8007eb2:	b90b      	cbnz	r3, 8007eb8 <_vfiprintf_r+0x18>
 8007eb4:	f7ff faaa 	bl	800740c <__sinit>
 8007eb8:	4b7c      	ldr	r3, [pc, #496]	; (80080ac <_vfiprintf_r+0x20c>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d157      	bne.n	8007f6e <_vfiprintf_r+0xce>
 8007ebe:	6874      	ldr	r4, [r6, #4]
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	0718      	lsls	r0, r3, #28
 8007ec4:	d55d      	bpl.n	8007f82 <_vfiprintf_r+0xe2>
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05a      	beq.n	8007f82 <_vfiprintf_r+0xe2>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ed6:	2330      	movs	r3, #48	; 0x30
 8007ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007edc:	f04f 0b01 	mov.w	fp, #1
 8007ee0:	46b8      	mov	r8, r7
 8007ee2:	4645      	mov	r5, r8
 8007ee4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d155      	bne.n	8007f98 <_vfiprintf_r+0xf8>
 8007eec:	ebb8 0a07 	subs.w	sl, r8, r7
 8007ef0:	d00b      	beq.n	8007f0a <_vfiprintf_r+0x6a>
 8007ef2:	4653      	mov	r3, sl
 8007ef4:	463a      	mov	r2, r7
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff ffbf 	bl	8007e7c <__sfputs_r>
 8007efe:	3001      	adds	r0, #1
 8007f00:	f000 80c4 	beq.w	800808c <_vfiprintf_r+0x1ec>
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	4453      	add	r3, sl
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	f898 3000 	ldrb.w	r3, [r8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 80bc 	beq.w	800808c <_vfiprintf_r+0x1ec>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	9205      	str	r2, [sp, #20]
 8007f20:	9306      	str	r3, [sp, #24]
 8007f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f26:	931a      	str	r3, [sp, #104]	; 0x68
 8007f28:	2205      	movs	r2, #5
 8007f2a:	7829      	ldrb	r1, [r5, #0]
 8007f2c:	4860      	ldr	r0, [pc, #384]	; (80080b0 <_vfiprintf_r+0x210>)
 8007f2e:	f7f8 f957 	bl	80001e0 <memchr>
 8007f32:	f105 0801 	add.w	r8, r5, #1
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d131      	bne.n	8007fa0 <_vfiprintf_r+0x100>
 8007f3c:	06d9      	lsls	r1, r3, #27
 8007f3e:	bf44      	itt	mi
 8007f40:	2220      	movmi	r2, #32
 8007f42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f46:	071a      	lsls	r2, r3, #28
 8007f48:	bf44      	itt	mi
 8007f4a:	222b      	movmi	r2, #43	; 0x2b
 8007f4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f50:	782a      	ldrb	r2, [r5, #0]
 8007f52:	2a2a      	cmp	r2, #42	; 0x2a
 8007f54:	d02c      	beq.n	8007fb0 <_vfiprintf_r+0x110>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	200a      	movs	r0, #10
 8007f5c:	46a8      	mov	r8, r5
 8007f5e:	3501      	adds	r5, #1
 8007f60:	f898 3000 	ldrb.w	r3, [r8]
 8007f64:	3b30      	subs	r3, #48	; 0x30
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d96d      	bls.n	8008046 <_vfiprintf_r+0x1a6>
 8007f6a:	b371      	cbz	r1, 8007fca <_vfiprintf_r+0x12a>
 8007f6c:	e026      	b.n	8007fbc <_vfiprintf_r+0x11c>
 8007f6e:	4b51      	ldr	r3, [pc, #324]	; (80080b4 <_vfiprintf_r+0x214>)
 8007f70:	429c      	cmp	r4, r3
 8007f72:	d101      	bne.n	8007f78 <_vfiprintf_r+0xd8>
 8007f74:	68b4      	ldr	r4, [r6, #8]
 8007f76:	e7a3      	b.n	8007ec0 <_vfiprintf_r+0x20>
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <_vfiprintf_r+0x218>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	bf08      	it	eq
 8007f7e:	68f4      	ldreq	r4, [r6, #12]
 8007f80:	e79e      	b.n	8007ec0 <_vfiprintf_r+0x20>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff fd1b 	bl	80079c0 <__swsetup_r>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d09e      	beq.n	8007ecc <_vfiprintf_r+0x2c>
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	b01d      	add	sp, #116	; 0x74
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	2b25      	cmp	r3, #37	; 0x25
 8007f9a:	d0a7      	beq.n	8007eec <_vfiprintf_r+0x4c>
 8007f9c:	46a8      	mov	r8, r5
 8007f9e:	e7a0      	b.n	8007ee2 <_vfiprintf_r+0x42>
 8007fa0:	4a43      	ldr	r2, [pc, #268]	; (80080b0 <_vfiprintf_r+0x210>)
 8007fa2:	1a80      	subs	r0, r0, r2
 8007fa4:	fa0b f000 	lsl.w	r0, fp, r0
 8007fa8:	4318      	orrs	r0, r3
 8007faa:	9004      	str	r0, [sp, #16]
 8007fac:	4645      	mov	r5, r8
 8007fae:	e7bb      	b.n	8007f28 <_vfiprintf_r+0x88>
 8007fb0:	9a03      	ldr	r2, [sp, #12]
 8007fb2:	1d11      	adds	r1, r2, #4
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	9103      	str	r1, [sp, #12]
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	db01      	blt.n	8007fc0 <_vfiprintf_r+0x120>
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	e004      	b.n	8007fca <_vfiprintf_r+0x12a>
 8007fc0:	4252      	negs	r2, r2
 8007fc2:	f043 0302 	orr.w	r3, r3, #2
 8007fc6:	9207      	str	r2, [sp, #28]
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	f898 3000 	ldrb.w	r3, [r8]
 8007fce:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd0:	d110      	bne.n	8007ff4 <_vfiprintf_r+0x154>
 8007fd2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd8:	f108 0101 	add.w	r1, r8, #1
 8007fdc:	d137      	bne.n	800804e <_vfiprintf_r+0x1ae>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	1d1a      	adds	r2, r3, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	9203      	str	r2, [sp, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bfb8      	it	lt
 8007fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fee:	f108 0802 	add.w	r8, r8, #2
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	4d31      	ldr	r5, [pc, #196]	; (80080bc <_vfiprintf_r+0x21c>)
 8007ff6:	f898 1000 	ldrb.w	r1, [r8]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f7f8 f8ef 	bl	80001e0 <memchr>
 8008002:	b140      	cbz	r0, 8008016 <_vfiprintf_r+0x176>
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	1b40      	subs	r0, r0, r5
 8008008:	fa03 f000 	lsl.w	r0, r3, r0
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	4303      	orrs	r3, r0
 8008010:	9304      	str	r3, [sp, #16]
 8008012:	f108 0801 	add.w	r8, r8, #1
 8008016:	f898 1000 	ldrb.w	r1, [r8]
 800801a:	4829      	ldr	r0, [pc, #164]	; (80080c0 <_vfiprintf_r+0x220>)
 800801c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008020:	2206      	movs	r2, #6
 8008022:	f108 0701 	add.w	r7, r8, #1
 8008026:	f7f8 f8db 	bl	80001e0 <memchr>
 800802a:	2800      	cmp	r0, #0
 800802c:	d034      	beq.n	8008098 <_vfiprintf_r+0x1f8>
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <_vfiprintf_r+0x224>)
 8008030:	bb03      	cbnz	r3, 8008074 <_vfiprintf_r+0x1d4>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	3307      	adds	r3, #7
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	3308      	adds	r3, #8
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	444b      	add	r3, r9
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	e74c      	b.n	8007ee0 <_vfiprintf_r+0x40>
 8008046:	fb00 3202 	mla	r2, r0, r2, r3
 800804a:	2101      	movs	r1, #1
 800804c:	e786      	b.n	8007f5c <_vfiprintf_r+0xbc>
 800804e:	2300      	movs	r3, #0
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	4618      	mov	r0, r3
 8008054:	250a      	movs	r5, #10
 8008056:	4688      	mov	r8, r1
 8008058:	3101      	adds	r1, #1
 800805a:	f898 2000 	ldrb.w	r2, [r8]
 800805e:	3a30      	subs	r2, #48	; 0x30
 8008060:	2a09      	cmp	r2, #9
 8008062:	d903      	bls.n	800806c <_vfiprintf_r+0x1cc>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0c5      	beq.n	8007ff4 <_vfiprintf_r+0x154>
 8008068:	9005      	str	r0, [sp, #20]
 800806a:	e7c3      	b.n	8007ff4 <_vfiprintf_r+0x154>
 800806c:	fb05 2000 	mla	r0, r5, r0, r2
 8008070:	2301      	movs	r3, #1
 8008072:	e7f0      	b.n	8008056 <_vfiprintf_r+0x1b6>
 8008074:	ab03      	add	r3, sp, #12
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	4622      	mov	r2, r4
 800807a:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <_vfiprintf_r+0x228>)
 800807c:	a904      	add	r1, sp, #16
 800807e:	4630      	mov	r0, r6
 8008080:	f3af 8000 	nop.w
 8008084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008088:	4681      	mov	r9, r0
 800808a:	d1d8      	bne.n	800803e <_vfiprintf_r+0x19e>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	065b      	lsls	r3, r3, #25
 8008090:	f53f af7d 	bmi.w	8007f8e <_vfiprintf_r+0xee>
 8008094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008096:	e77c      	b.n	8007f92 <_vfiprintf_r+0xf2>
 8008098:	ab03      	add	r3, sp, #12
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4622      	mov	r2, r4
 800809e:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <_vfiprintf_r+0x228>)
 80080a0:	a904      	add	r1, sp, #16
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 f888 	bl	80081b8 <_printf_i>
 80080a8:	e7ec      	b.n	8008084 <_vfiprintf_r+0x1e4>
 80080aa:	bf00      	nop
 80080ac:	08008958 	.word	0x08008958
 80080b0:	0800899c 	.word	0x0800899c
 80080b4:	08008978 	.word	0x08008978
 80080b8:	08008938 	.word	0x08008938
 80080bc:	080089a2 	.word	0x080089a2
 80080c0:	080089a6 	.word	0x080089a6
 80080c4:	00000000 	.word	0x00000000
 80080c8:	08007e7d 	.word	0x08007e7d

080080cc <_printf_common>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	4691      	mov	r9, r2
 80080d2:	461f      	mov	r7, r3
 80080d4:	688a      	ldr	r2, [r1, #8]
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080dc:	4293      	cmp	r3, r2
 80080de:	bfb8      	it	lt
 80080e0:	4613      	movlt	r3, r2
 80080e2:	f8c9 3000 	str.w	r3, [r9]
 80080e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ea:	4606      	mov	r6, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	b112      	cbz	r2, 80080f6 <_printf_common+0x2a>
 80080f0:	3301      	adds	r3, #1
 80080f2:	f8c9 3000 	str.w	r3, [r9]
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	0699      	lsls	r1, r3, #26
 80080fa:	bf42      	ittt	mi
 80080fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008100:	3302      	addmi	r3, #2
 8008102:	f8c9 3000 	strmi.w	r3, [r9]
 8008106:	6825      	ldr	r5, [r4, #0]
 8008108:	f015 0506 	ands.w	r5, r5, #6
 800810c:	d107      	bne.n	800811e <_printf_common+0x52>
 800810e:	f104 0a19 	add.w	sl, r4, #25
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	f8d9 2000 	ldr.w	r2, [r9]
 8008118:	1a9b      	subs	r3, r3, r2
 800811a:	429d      	cmp	r5, r3
 800811c:	db29      	blt.n	8008172 <_printf_common+0xa6>
 800811e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	3300      	adds	r3, #0
 8008126:	bf18      	it	ne
 8008128:	2301      	movne	r3, #1
 800812a:	0692      	lsls	r2, r2, #26
 800812c:	d42e      	bmi.n	800818c <_printf_common+0xc0>
 800812e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008132:	4639      	mov	r1, r7
 8008134:	4630      	mov	r0, r6
 8008136:	47c0      	blx	r8
 8008138:	3001      	adds	r0, #1
 800813a:	d021      	beq.n	8008180 <_printf_common+0xb4>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	68e5      	ldr	r5, [r4, #12]
 8008140:	f8d9 2000 	ldr.w	r2, [r9]
 8008144:	f003 0306 	and.w	r3, r3, #6
 8008148:	2b04      	cmp	r3, #4
 800814a:	bf08      	it	eq
 800814c:	1aad      	subeq	r5, r5, r2
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	6922      	ldr	r2, [r4, #16]
 8008152:	bf0c      	ite	eq
 8008154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008158:	2500      	movne	r5, #0
 800815a:	4293      	cmp	r3, r2
 800815c:	bfc4      	itt	gt
 800815e:	1a9b      	subgt	r3, r3, r2
 8008160:	18ed      	addgt	r5, r5, r3
 8008162:	f04f 0900 	mov.w	r9, #0
 8008166:	341a      	adds	r4, #26
 8008168:	454d      	cmp	r5, r9
 800816a:	d11b      	bne.n	80081a4 <_printf_common+0xd8>
 800816c:	2000      	movs	r0, #0
 800816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008172:	2301      	movs	r3, #1
 8008174:	4652      	mov	r2, sl
 8008176:	4639      	mov	r1, r7
 8008178:	4630      	mov	r0, r6
 800817a:	47c0      	blx	r8
 800817c:	3001      	adds	r0, #1
 800817e:	d103      	bne.n	8008188 <_printf_common+0xbc>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	3501      	adds	r5, #1
 800818a:	e7c2      	b.n	8008112 <_printf_common+0x46>
 800818c:	18e1      	adds	r1, r4, r3
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	2030      	movs	r0, #48	; 0x30
 8008192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008196:	4422      	add	r2, r4
 8008198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800819c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a0:	3302      	adds	r3, #2
 80081a2:	e7c4      	b.n	800812e <_printf_common+0x62>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4622      	mov	r2, r4
 80081a8:	4639      	mov	r1, r7
 80081aa:	4630      	mov	r0, r6
 80081ac:	47c0      	blx	r8
 80081ae:	3001      	adds	r0, #1
 80081b0:	d0e6      	beq.n	8008180 <_printf_common+0xb4>
 80081b2:	f109 0901 	add.w	r9, r9, #1
 80081b6:	e7d7      	b.n	8008168 <_printf_common+0x9c>

080081b8 <_printf_i>:
 80081b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081bc:	4617      	mov	r7, r2
 80081be:	7e0a      	ldrb	r2, [r1, #24]
 80081c0:	b085      	sub	sp, #20
 80081c2:	2a6e      	cmp	r2, #110	; 0x6e
 80081c4:	4698      	mov	r8, r3
 80081c6:	4606      	mov	r6, r0
 80081c8:	460c      	mov	r4, r1
 80081ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80081d0:	f000 80bc 	beq.w	800834c <_printf_i+0x194>
 80081d4:	d81a      	bhi.n	800820c <_printf_i+0x54>
 80081d6:	2a63      	cmp	r2, #99	; 0x63
 80081d8:	d02e      	beq.n	8008238 <_printf_i+0x80>
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x3a>
 80081dc:	2a00      	cmp	r2, #0
 80081de:	f000 80c8 	beq.w	8008372 <_printf_i+0x1ba>
 80081e2:	2a58      	cmp	r2, #88	; 0x58
 80081e4:	f000 808a 	beq.w	80082fc <_printf_i+0x144>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80081f0:	e02a      	b.n	8008248 <_printf_i+0x90>
 80081f2:	2a64      	cmp	r2, #100	; 0x64
 80081f4:	d001      	beq.n	80081fa <_printf_i+0x42>
 80081f6:	2a69      	cmp	r2, #105	; 0x69
 80081f8:	d1f6      	bne.n	80081e8 <_printf_i+0x30>
 80081fa:	6821      	ldr	r1, [r4, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008202:	d023      	beq.n	800824c <_printf_i+0x94>
 8008204:	1d11      	adds	r1, r2, #4
 8008206:	6019      	str	r1, [r3, #0]
 8008208:	6813      	ldr	r3, [r2, #0]
 800820a:	e027      	b.n	800825c <_printf_i+0xa4>
 800820c:	2a73      	cmp	r2, #115	; 0x73
 800820e:	f000 80b4 	beq.w	800837a <_printf_i+0x1c2>
 8008212:	d808      	bhi.n	8008226 <_printf_i+0x6e>
 8008214:	2a6f      	cmp	r2, #111	; 0x6f
 8008216:	d02a      	beq.n	800826e <_printf_i+0xb6>
 8008218:	2a70      	cmp	r2, #112	; 0x70
 800821a:	d1e5      	bne.n	80081e8 <_printf_i+0x30>
 800821c:	680a      	ldr	r2, [r1, #0]
 800821e:	f042 0220 	orr.w	r2, r2, #32
 8008222:	600a      	str	r2, [r1, #0]
 8008224:	e003      	b.n	800822e <_printf_i+0x76>
 8008226:	2a75      	cmp	r2, #117	; 0x75
 8008228:	d021      	beq.n	800826e <_printf_i+0xb6>
 800822a:	2a78      	cmp	r2, #120	; 0x78
 800822c:	d1dc      	bne.n	80081e8 <_printf_i+0x30>
 800822e:	2278      	movs	r2, #120	; 0x78
 8008230:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008234:	496e      	ldr	r1, [pc, #440]	; (80083f0 <_printf_i+0x238>)
 8008236:	e064      	b.n	8008302 <_printf_i+0x14a>
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800823e:	1d11      	adds	r1, r2, #4
 8008240:	6019      	str	r1, [r3, #0]
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008248:	2301      	movs	r3, #1
 800824a:	e0a3      	b.n	8008394 <_printf_i+0x1dc>
 800824c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008250:	f102 0104 	add.w	r1, r2, #4
 8008254:	6019      	str	r1, [r3, #0]
 8008256:	d0d7      	beq.n	8008208 <_printf_i+0x50>
 8008258:	f9b2 3000 	ldrsh.w	r3, [r2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	da03      	bge.n	8008268 <_printf_i+0xb0>
 8008260:	222d      	movs	r2, #45	; 0x2d
 8008262:	425b      	negs	r3, r3
 8008264:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008268:	4962      	ldr	r1, [pc, #392]	; (80083f4 <_printf_i+0x23c>)
 800826a:	220a      	movs	r2, #10
 800826c:	e017      	b.n	800829e <_printf_i+0xe6>
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008276:	d003      	beq.n	8008280 <_printf_i+0xc8>
 8008278:	1d08      	adds	r0, r1, #4
 800827a:	6018      	str	r0, [r3, #0]
 800827c:	680b      	ldr	r3, [r1, #0]
 800827e:	e006      	b.n	800828e <_printf_i+0xd6>
 8008280:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008284:	f101 0004 	add.w	r0, r1, #4
 8008288:	6018      	str	r0, [r3, #0]
 800828a:	d0f7      	beq.n	800827c <_printf_i+0xc4>
 800828c:	880b      	ldrh	r3, [r1, #0]
 800828e:	4959      	ldr	r1, [pc, #356]	; (80083f4 <_printf_i+0x23c>)
 8008290:	2a6f      	cmp	r2, #111	; 0x6f
 8008292:	bf14      	ite	ne
 8008294:	220a      	movne	r2, #10
 8008296:	2208      	moveq	r2, #8
 8008298:	2000      	movs	r0, #0
 800829a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800829e:	6865      	ldr	r5, [r4, #4]
 80082a0:	60a5      	str	r5, [r4, #8]
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	f2c0 809c 	blt.w	80083e0 <_printf_i+0x228>
 80082a8:	6820      	ldr	r0, [r4, #0]
 80082aa:	f020 0004 	bic.w	r0, r0, #4
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d13f      	bne.n	8008334 <_printf_i+0x17c>
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	f040 8095 	bne.w	80083e4 <_printf_i+0x22c>
 80082ba:	4675      	mov	r5, lr
 80082bc:	2a08      	cmp	r2, #8
 80082be:	d10b      	bne.n	80082d8 <_printf_i+0x120>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	07da      	lsls	r2, r3, #31
 80082c4:	d508      	bpl.n	80082d8 <_printf_i+0x120>
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	6862      	ldr	r2, [r4, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	bfde      	ittt	le
 80082ce:	2330      	movle	r3, #48	; 0x30
 80082d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082d8:	ebae 0305 	sub.w	r3, lr, r5
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	f8cd 8000 	str.w	r8, [sp]
 80082e2:	463b      	mov	r3, r7
 80082e4:	aa03      	add	r2, sp, #12
 80082e6:	4621      	mov	r1, r4
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7ff feef 	bl	80080cc <_printf_common>
 80082ee:	3001      	adds	r0, #1
 80082f0:	d155      	bne.n	800839e <_printf_i+0x1e6>
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082fc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008300:	493c      	ldr	r1, [pc, #240]	; (80083f4 <_printf_i+0x23c>)
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f012 0f80 	tst.w	r2, #128	; 0x80
 800830a:	f100 0504 	add.w	r5, r0, #4
 800830e:	601d      	str	r5, [r3, #0]
 8008310:	d001      	beq.n	8008316 <_printf_i+0x15e>
 8008312:	6803      	ldr	r3, [r0, #0]
 8008314:	e002      	b.n	800831c <_printf_i+0x164>
 8008316:	0655      	lsls	r5, r2, #25
 8008318:	d5fb      	bpl.n	8008312 <_printf_i+0x15a>
 800831a:	8803      	ldrh	r3, [r0, #0]
 800831c:	07d0      	lsls	r0, r2, #31
 800831e:	bf44      	itt	mi
 8008320:	f042 0220 	orrmi.w	r2, r2, #32
 8008324:	6022      	strmi	r2, [r4, #0]
 8008326:	b91b      	cbnz	r3, 8008330 <_printf_i+0x178>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	f022 0220 	bic.w	r2, r2, #32
 800832e:	6022      	str	r2, [r4, #0]
 8008330:	2210      	movs	r2, #16
 8008332:	e7b1      	b.n	8008298 <_printf_i+0xe0>
 8008334:	4675      	mov	r5, lr
 8008336:	fbb3 f0f2 	udiv	r0, r3, r2
 800833a:	fb02 3310 	mls	r3, r2, r0, r3
 800833e:	5ccb      	ldrb	r3, [r1, r3]
 8008340:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008344:	4603      	mov	r3, r0
 8008346:	2800      	cmp	r0, #0
 8008348:	d1f5      	bne.n	8008336 <_printf_i+0x17e>
 800834a:	e7b7      	b.n	80082bc <_printf_i+0x104>
 800834c:	6808      	ldr	r0, [r1, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	6949      	ldr	r1, [r1, #20]
 8008352:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008356:	d004      	beq.n	8008362 <_printf_i+0x1aa>
 8008358:	1d10      	adds	r0, r2, #4
 800835a:	6018      	str	r0, [r3, #0]
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	6019      	str	r1, [r3, #0]
 8008360:	e007      	b.n	8008372 <_printf_i+0x1ba>
 8008362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008366:	f102 0004 	add.w	r0, r2, #4
 800836a:	6018      	str	r0, [r3, #0]
 800836c:	6813      	ldr	r3, [r2, #0]
 800836e:	d0f6      	beq.n	800835e <_printf_i+0x1a6>
 8008370:	8019      	strh	r1, [r3, #0]
 8008372:	2300      	movs	r3, #0
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	4675      	mov	r5, lr
 8008378:	e7b1      	b.n	80082de <_printf_i+0x126>
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	1d11      	adds	r1, r2, #4
 800837e:	6019      	str	r1, [r3, #0]
 8008380:	6815      	ldr	r5, [r2, #0]
 8008382:	6862      	ldr	r2, [r4, #4]
 8008384:	2100      	movs	r1, #0
 8008386:	4628      	mov	r0, r5
 8008388:	f7f7 ff2a 	bl	80001e0 <memchr>
 800838c:	b108      	cbz	r0, 8008392 <_printf_i+0x1da>
 800838e:	1b40      	subs	r0, r0, r5
 8008390:	6060      	str	r0, [r4, #4]
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	2300      	movs	r3, #0
 8008398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839c:	e79f      	b.n	80082de <_printf_i+0x126>
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4639      	mov	r1, r7
 80083a4:	4630      	mov	r0, r6
 80083a6:	47c0      	blx	r8
 80083a8:	3001      	adds	r0, #1
 80083aa:	d0a2      	beq.n	80082f2 <_printf_i+0x13a>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	079b      	lsls	r3, r3, #30
 80083b0:	d507      	bpl.n	80083c2 <_printf_i+0x20a>
 80083b2:	2500      	movs	r5, #0
 80083b4:	f104 0919 	add.w	r9, r4, #25
 80083b8:	68e3      	ldr	r3, [r4, #12]
 80083ba:	9a03      	ldr	r2, [sp, #12]
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	429d      	cmp	r5, r3
 80083c0:	db05      	blt.n	80083ce <_printf_i+0x216>
 80083c2:	68e0      	ldr	r0, [r4, #12]
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	4298      	cmp	r0, r3
 80083c8:	bfb8      	it	lt
 80083ca:	4618      	movlt	r0, r3
 80083cc:	e793      	b.n	80082f6 <_printf_i+0x13e>
 80083ce:	2301      	movs	r3, #1
 80083d0:	464a      	mov	r2, r9
 80083d2:	4639      	mov	r1, r7
 80083d4:	4630      	mov	r0, r6
 80083d6:	47c0      	blx	r8
 80083d8:	3001      	adds	r0, #1
 80083da:	d08a      	beq.n	80082f2 <_printf_i+0x13a>
 80083dc:	3501      	adds	r5, #1
 80083de:	e7eb      	b.n	80083b8 <_printf_i+0x200>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1a7      	bne.n	8008334 <_printf_i+0x17c>
 80083e4:	780b      	ldrb	r3, [r1, #0]
 80083e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083ee:	e765      	b.n	80082bc <_printf_i+0x104>
 80083f0:	080089be 	.word	0x080089be
 80083f4:	080089ad 	.word	0x080089ad

080083f8 <_putc_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	460d      	mov	r5, r1
 80083fc:	4614      	mov	r4, r2
 80083fe:	4606      	mov	r6, r0
 8008400:	b118      	cbz	r0, 800840a <_putc_r+0x12>
 8008402:	6983      	ldr	r3, [r0, #24]
 8008404:	b90b      	cbnz	r3, 800840a <_putc_r+0x12>
 8008406:	f7ff f801 	bl	800740c <__sinit>
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <_putc_r+0x60>)
 800840c:	429c      	cmp	r4, r3
 800840e:	d112      	bne.n	8008436 <_putc_r+0x3e>
 8008410:	6874      	ldr	r4, [r6, #4]
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	da16      	bge.n	800844a <_putc_r+0x52>
 800841c:	69a2      	ldr	r2, [r4, #24]
 800841e:	4293      	cmp	r3, r2
 8008420:	db02      	blt.n	8008428 <_putc_r+0x30>
 8008422:	b2eb      	uxtb	r3, r5
 8008424:	2b0a      	cmp	r3, #10
 8008426:	d110      	bne.n	800844a <_putc_r+0x52>
 8008428:	4622      	mov	r2, r4
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008432:	f7ff ba61 	b.w	80078f8 <__swbuf_r>
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <_putc_r+0x64>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d101      	bne.n	8008440 <_putc_r+0x48>
 800843c:	68b4      	ldr	r4, [r6, #8]
 800843e:	e7e8      	b.n	8008412 <_putc_r+0x1a>
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <_putc_r+0x68>)
 8008442:	429c      	cmp	r4, r3
 8008444:	bf08      	it	eq
 8008446:	68f4      	ldreq	r4, [r6, #12]
 8008448:	e7e3      	b.n	8008412 <_putc_r+0x1a>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	701d      	strb	r5, [r3, #0]
 8008452:	b2e8      	uxtb	r0, r5
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	bf00      	nop
 8008458:	08008958 	.word	0x08008958
 800845c:	08008978 	.word	0x08008978
 8008460:	08008938 	.word	0x08008938

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4c07      	ldr	r4, [pc, #28]	; (8008484 <_read_r+0x20>)
 8008468:	4605      	mov	r5, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7fe fe30 	bl	80070d8 <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	2000162c 	.word	0x2000162c

08008488 <_fstat_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4c07      	ldr	r4, [pc, #28]	; (80084a8 <_fstat_r+0x20>)
 800848c:	2300      	movs	r3, #0
 800848e:	4605      	mov	r5, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	f7fe fe58 	bl	800714a <_fstat>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d102      	bne.n	80084a4 <_fstat_r+0x1c>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	b103      	cbz	r3, 80084a4 <_fstat_r+0x1c>
 80084a2:	602b      	str	r3, [r5, #0]
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	bf00      	nop
 80084a8:	2000162c 	.word	0x2000162c

080084ac <_isatty_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4c06      	ldr	r4, [pc, #24]	; (80084c8 <_isatty_r+0x1c>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4605      	mov	r5, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	f7fe fe4c 	bl	8007154 <_isatty>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_isatty_r+0x1a>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_isatty_r+0x1a>
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	2000162c 	.word	0x2000162c

080084cc <memmove>:
 80084cc:	4288      	cmp	r0, r1
 80084ce:	b510      	push	{r4, lr}
 80084d0:	eb01 0302 	add.w	r3, r1, r2
 80084d4:	d803      	bhi.n	80084de <memmove+0x12>
 80084d6:	1e42      	subs	r2, r0, #1
 80084d8:	4299      	cmp	r1, r3
 80084da:	d10c      	bne.n	80084f6 <memmove+0x2a>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	4298      	cmp	r0, r3
 80084e0:	d2f9      	bcs.n	80084d6 <memmove+0xa>
 80084e2:	1881      	adds	r1, r0, r2
 80084e4:	1ad2      	subs	r2, r2, r3
 80084e6:	42d3      	cmn	r3, r2
 80084e8:	d100      	bne.n	80084ec <memmove+0x20>
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80084f4:	e7f7      	b.n	80084e6 <memmove+0x1a>
 80084f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084fe:	e7eb      	b.n	80084d8 <memmove+0xc>

08008500 <_realloc_r>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	4607      	mov	r7, r0
 8008504:	4614      	mov	r4, r2
 8008506:	460e      	mov	r6, r1
 8008508:	b921      	cbnz	r1, 8008514 <_realloc_r+0x14>
 800850a:	4611      	mov	r1, r2
 800850c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008510:	f7ff b88c 	b.w	800762c <_malloc_r>
 8008514:	b922      	cbnz	r2, 8008520 <_realloc_r+0x20>
 8008516:	f7ff f83b 	bl	8007590 <_free_r>
 800851a:	4625      	mov	r5, r4
 800851c:	4628      	mov	r0, r5
 800851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008520:	f000 f814 	bl	800854c <_malloc_usable_size_r>
 8008524:	4284      	cmp	r4, r0
 8008526:	d90f      	bls.n	8008548 <_realloc_r+0x48>
 8008528:	4621      	mov	r1, r4
 800852a:	4638      	mov	r0, r7
 800852c:	f7ff f87e 	bl	800762c <_malloc_r>
 8008530:	4605      	mov	r5, r0
 8008532:	2800      	cmp	r0, #0
 8008534:	d0f2      	beq.n	800851c <_realloc_r+0x1c>
 8008536:	4631      	mov	r1, r6
 8008538:	4622      	mov	r2, r4
 800853a:	f7ff f815 	bl	8007568 <memcpy>
 800853e:	4631      	mov	r1, r6
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff f825 	bl	8007590 <_free_r>
 8008546:	e7e9      	b.n	800851c <_realloc_r+0x1c>
 8008548:	4635      	mov	r5, r6
 800854a:	e7e7      	b.n	800851c <_realloc_r+0x1c>

0800854c <_malloc_usable_size_r>:
 800854c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008550:	2800      	cmp	r0, #0
 8008552:	f1a0 0004 	sub.w	r0, r0, #4
 8008556:	bfbc      	itt	lt
 8008558:	580b      	ldrlt	r3, [r1, r0]
 800855a:	18c0      	addlt	r0, r0, r3
 800855c:	4770      	bx	lr

0800855e <abort>:
 800855e:	b508      	push	{r3, lr}
 8008560:	2006      	movs	r0, #6
 8008562:	f000 f82b 	bl	80085bc <raise>
 8008566:	2001      	movs	r0, #1
 8008568:	f7fe fdb0 	bl	80070cc <_exit>

0800856c <_raise_r>:
 800856c:	291f      	cmp	r1, #31
 800856e:	b538      	push	{r3, r4, r5, lr}
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	d904      	bls.n	8008580 <_raise_r+0x14>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008582:	b112      	cbz	r2, 800858a <_raise_r+0x1e>
 8008584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008588:	b94b      	cbnz	r3, 800859e <_raise_r+0x32>
 800858a:	4620      	mov	r0, r4
 800858c:	f000 f830 	bl	80085f0 <_getpid_r>
 8008590:	462a      	mov	r2, r5
 8008592:	4601      	mov	r1, r0
 8008594:	4620      	mov	r0, r4
 8008596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859a:	f000 b817 	b.w	80085cc <_kill_r>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d00a      	beq.n	80085b8 <_raise_r+0x4c>
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	d103      	bne.n	80085ae <_raise_r+0x42>
 80085a6:	2316      	movs	r3, #22
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	2001      	movs	r0, #1
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	2400      	movs	r4, #0
 80085b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085b4:	4628      	mov	r0, r5
 80085b6:	4798      	blx	r3
 80085b8:	2000      	movs	r0, #0
 80085ba:	bd38      	pop	{r3, r4, r5, pc}

080085bc <raise>:
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <raise+0xc>)
 80085be:	4601      	mov	r1, r0
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	f7ff bfd3 	b.w	800856c <_raise_r>
 80085c6:	bf00      	nop
 80085c8:	20000020 	.word	0x20000020

080085cc <_kill_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4c07      	ldr	r4, [pc, #28]	; (80085ec <_kill_r+0x20>)
 80085d0:	2300      	movs	r3, #0
 80085d2:	4605      	mov	r5, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	f7fe fd6f 	bl	80070bc <_kill>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d102      	bne.n	80085e8 <_kill_r+0x1c>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	b103      	cbz	r3, 80085e8 <_kill_r+0x1c>
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	2000162c 	.word	0x2000162c

080085f0 <_getpid_r>:
 80085f0:	f7fe bd62 	b.w	80070b8 <_getpid>

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
