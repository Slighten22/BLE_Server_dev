
BLE_Server_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08010428  08010428  00020428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000138  08010b50  08010b50  00020b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001d0  08010c88  08010c88  00020c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000000c  08010e58  08010e58  00020e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08010e64  08010e64  00020e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000006b4  20000000  08010e68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000170c  200006b4  0801151c  000306b4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001dc0  0801151c  00031dc0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000306b4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035077  00000000  00000000  000306e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005e7e  00000000  00000000  0006575b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001f80  00000000  00000000  0006b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d40  00000000  00000000  0006d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012981  00000000  00000000  0006f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000b8e4  00000000  00000000  00081c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008d505  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ba0  00000000  00000000  0008d584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006b4 	.word	0x200006b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010410 	.word	0x08010410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006b8 	.word	0x200006b8
 80001cc:	08010410 	.word	0x08010410

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f001 b8f6 	b.w	8001e04 <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <selfrel_offset31>:
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	005a      	lsls	r2, r3, #1
 8000f10:	bf4c      	ite	mi
 8000f12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000f16:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000f1a:	4418      	add	r0, r3
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <search_EIT_table>:
 8000f20:	b361      	cbz	r1, 8000f7c <search_EIT_table+0x5c>
 8000f22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f26:	f101 3aff 	add.w	sl, r1, #4294967295
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	46d1      	mov	r9, sl
 8000f30:	2700      	movs	r7, #0
 8000f32:	eb07 0409 	add.w	r4, r7, r9
 8000f36:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000f3a:	1064      	asrs	r4, r4, #1
 8000f3c:	00e5      	lsls	r5, r4, #3
 8000f3e:	1971      	adds	r1, r6, r5
 8000f40:	4608      	mov	r0, r1
 8000f42:	f7ff ffe3 	bl	8000f0c <selfrel_offset31>
 8000f46:	45a2      	cmp	sl, r4
 8000f48:	4683      	mov	fp, r0
 8000f4a:	f105 0008 	add.w	r0, r5, #8
 8000f4e:	4430      	add	r0, r6
 8000f50:	d009      	beq.n	8000f66 <search_EIT_table+0x46>
 8000f52:	f7ff ffdb 	bl	8000f0c <selfrel_offset31>
 8000f56:	45c3      	cmp	fp, r8
 8000f58:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f5c:	d805      	bhi.n	8000f6a <search_EIT_table+0x4a>
 8000f5e:	4540      	cmp	r0, r8
 8000f60:	d209      	bcs.n	8000f76 <search_EIT_table+0x56>
 8000f62:	1c67      	adds	r7, r4, #1
 8000f64:	e7e5      	b.n	8000f32 <search_EIT_table+0x12>
 8000f66:	45c3      	cmp	fp, r8
 8000f68:	d905      	bls.n	8000f76 <search_EIT_table+0x56>
 8000f6a:	42a7      	cmp	r7, r4
 8000f6c:	d002      	beq.n	8000f74 <search_EIT_table+0x54>
 8000f6e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000f72:	e7de      	b.n	8000f32 <search_EIT_table+0x12>
 8000f74:	2100      	movs	r1, #0
 8000f76:	4608      	mov	r0, r1
 8000f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4770      	bx	lr

08000f80 <__gnu_unwind_get_pr_addr>:
 8000f80:	2801      	cmp	r0, #1
 8000f82:	d007      	beq.n	8000f94 <__gnu_unwind_get_pr_addr+0x14>
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d007      	beq.n	8000f98 <__gnu_unwind_get_pr_addr+0x18>
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__gnu_unwind_get_pr_addr+0x1c>)
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	bf0c      	ite	eq
 8000f8e:	4618      	moveq	r0, r3
 8000f90:	2000      	movne	r0, #0
 8000f92:	4770      	bx	lr
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <__gnu_unwind_get_pr_addr+0x20>)
 8000f96:	4770      	bx	lr
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <__gnu_unwind_get_pr_addr+0x24>)
 8000f9a:	4770      	bx	lr
 8000f9c:	08001685 	.word	0x08001685
 8000fa0:	08001689 	.word	0x08001689
 8000fa4:	0800168d 	.word	0x0800168d

08000fa8 <get_eit_entry>:
 8000fa8:	b530      	push	{r4, r5, lr}
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <get_eit_entry+0x94>)
 8000fac:	b083      	sub	sp, #12
 8000fae:	4604      	mov	r4, r0
 8000fb0:	1e8d      	subs	r5, r1, #2
 8000fb2:	b37b      	cbz	r3, 8001014 <get_eit_entry+0x6c>
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	b320      	cbz	r0, 8001008 <get_eit_entry+0x60>
 8000fbe:	9901      	ldr	r1, [sp, #4]
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	f7ff ffad 	bl	8000f20 <search_EIT_table>
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	b1f0      	cbz	r0, 8001008 <get_eit_entry+0x60>
 8000fca:	f7ff ff9f 	bl	8000f0c <selfrel_offset31>
 8000fce:	684b      	ldr	r3, [r1, #4]
 8000fd0:	64a0      	str	r0, [r4, #72]	; 0x48
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d012      	beq.n	8000ffc <get_eit_entry+0x54>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f101 0004 	add.w	r0, r1, #4
 8000fdc:	db20      	blt.n	8001020 <get_eit_entry+0x78>
 8000fde:	f7ff ff95 	bl	8000f0c <selfrel_offset31>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000fe6:	6523      	str	r3, [r4, #80]	; 0x50
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db1c      	blt.n	8001028 <get_eit_entry+0x80>
 8000fee:	f7ff ff8d 	bl	8000f0c <selfrel_offset31>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	6120      	str	r0, [r4, #16]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd30      	pop	{r4, r5, pc}
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6123      	str	r3, [r4, #16]
 8001000:	2305      	movs	r3, #5
 8001002:	4618      	mov	r0, r3
 8001004:	b003      	add	sp, #12
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	2300      	movs	r3, #0
 800100a:	6123      	str	r3, [r4, #16]
 800100c:	2309      	movs	r3, #9
 800100e:	4618      	mov	r0, r3
 8001010:	b003      	add	sp, #12
 8001012:	bd30      	pop	{r4, r5, pc}
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <get_eit_entry+0x98>)
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <get_eit_entry+0x9c>)
 8001018:	1a09      	subs	r1, r1, r0
 800101a:	10c9      	asrs	r1, r1, #3
 800101c:	9101      	str	r1, [sp, #4]
 800101e:	e7cf      	b.n	8000fc0 <get_eit_entry+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001024:	6523      	str	r3, [r4, #80]	; 0x50
 8001026:	e7df      	b.n	8000fe8 <get_eit_entry+0x40>
 8001028:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800102c:	f7ff ffa8 	bl	8000f80 <__gnu_unwind_get_pr_addr>
 8001030:	2800      	cmp	r0, #0
 8001032:	6120      	str	r0, [r4, #16]
 8001034:	bf14      	ite	ne
 8001036:	2300      	movne	r3, #0
 8001038:	2309      	moveq	r3, #9
 800103a:	e7dc      	b.n	8000ff6 <get_eit_entry+0x4e>
 800103c:	00000000 	.word	0x00000000
 8001040:	08010e58 	.word	0x08010e58
 8001044:	08010c88 	.word	0x08010c88

08001048 <restore_non_core_regs>:
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	07da      	lsls	r2, r3, #31
 800104c:	b510      	push	{r4, lr}
 800104e:	4604      	mov	r4, r0
 8001050:	d406      	bmi.n	8001060 <restore_non_core_regs+0x18>
 8001052:	079b      	lsls	r3, r3, #30
 8001054:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001058:	d509      	bpl.n	800106e <restore_non_core_regs+0x26>
 800105a:	f000 fc51 	bl	8001900 <__gnu_Unwind_Restore_VFP_D>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	0759      	lsls	r1, r3, #29
 8001062:	d509      	bpl.n	8001078 <restore_non_core_regs+0x30>
 8001064:	071a      	lsls	r2, r3, #28
 8001066:	d50e      	bpl.n	8001086 <restore_non_core_regs+0x3e>
 8001068:	06db      	lsls	r3, r3, #27
 800106a:	d513      	bpl.n	8001094 <restore_non_core_regs+0x4c>
 800106c:	bd10      	pop	{r4, pc}
 800106e:	f000 fc3f 	bl	80018f0 <__gnu_Unwind_Restore_VFP>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	0759      	lsls	r1, r3, #29
 8001076:	d4f5      	bmi.n	8001064 <restore_non_core_regs+0x1c>
 8001078:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800107c:	f000 fc48 	bl	8001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	071a      	lsls	r2, r3, #28
 8001084:	d4f0      	bmi.n	8001068 <restore_non_core_regs+0x20>
 8001086:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800108a:	f000 fc49 	bl	8001920 <__gnu_Unwind_Restore_WMMXD>
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	06db      	lsls	r3, r3, #27
 8001092:	d4eb      	bmi.n	800106c <restore_non_core_regs+0x24>
 8001094:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800109c:	f000 bc84 	b.w	80019a8 <__gnu_Unwind_Restore_WMMXC>

080010a0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	b103      	cbz	r3, 80010a6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80010a4:	4403      	add	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__gnu_unwind_24bit.isra.1>:
 80010ac:	2009      	movs	r0, #9
 80010ae:	4770      	bx	lr

080010b0 <_Unwind_DebugHook>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <unwind_phase2>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	e008      	b.n	80010ce <unwind_phase2+0x1a>
 80010bc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80010be:	6163      	str	r3, [r4, #20]
 80010c0:	462a      	mov	r2, r5
 80010c2:	6923      	ldr	r3, [r4, #16]
 80010c4:	4621      	mov	r1, r4
 80010c6:	2001      	movs	r0, #1
 80010c8:	4798      	blx	r3
 80010ca:	2808      	cmp	r0, #8
 80010cc:	d108      	bne.n	80010e0 <unwind_phase2+0x2c>
 80010ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff69 	bl	8000fa8 <get_eit_entry>
 80010d6:	4606      	mov	r6, r0
 80010d8:	2800      	cmp	r0, #0
 80010da:	d0ef      	beq.n	80010bc <unwind_phase2+0x8>
 80010dc:	f00f f94d 	bl	801037a <abort>
 80010e0:	2807      	cmp	r0, #7
 80010e2:	d1fb      	bne.n	80010dc <unwind_phase2+0x28>
 80010e4:	4630      	mov	r0, r6
 80010e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010e8:	f7ff ffe2 	bl	80010b0 <_Unwind_DebugHook>
 80010ec:	1d28      	adds	r0, r5, #4
 80010ee:	f000 fbf3 	bl	80018d8 <__restore_core_regs>
 80010f2:	bf00      	nop

080010f4 <unwind_phase2_forced>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	1d0c      	adds	r4, r1, #4
 80010fa:	4605      	mov	r5, r0
 80010fc:	4692      	mov	sl, r2
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001104:	ae03      	add	r6, sp, #12
 8001106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001110:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001114:	ac02      	add	r4, sp, #8
 8001116:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800111a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800111e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001122:	2300      	movs	r3, #0
 8001124:	4628      	mov	r0, r5
 8001126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	f7ff ff3d 	bl	8000fa8 <get_eit_entry>
 800112e:	f1ba 0f00 	cmp.w	sl, #0
 8001132:	4607      	mov	r7, r0
 8001134:	bf14      	ite	ne
 8001136:	260a      	movne	r6, #10
 8001138:	2609      	moveq	r6, #9
 800113a:	b17f      	cbz	r7, 800115c <unwind_phase2_forced+0x68>
 800113c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800113e:	f046 0110 	orr.w	r1, r6, #16
 8001142:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001146:	462a      	mov	r2, r5
 8001148:	6463      	str	r3, [r4, #68]	; 0x44
 800114a:	2001      	movs	r0, #1
 800114c:	462b      	mov	r3, r5
 800114e:	47c0      	blx	r8
 8001150:	bb78      	cbnz	r0, 80011b2 <unwind_phase2_forced+0xbe>
 8001152:	4638      	mov	r0, r7
 8001154:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115e:	616b      	str	r3, [r5, #20]
 8001160:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001164:	4621      	mov	r1, r4
 8001166:	a87a      	add	r0, sp, #488	; 0x1e8
 8001168:	f00a ff78 	bl	800c05c <memcpy>
 800116c:	692b      	ldr	r3, [r5, #16]
 800116e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001170:	4629      	mov	r1, r5
 8001172:	4630      	mov	r0, r6
 8001174:	4798      	blx	r3
 8001176:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001178:	4682      	mov	sl, r0
 800117a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800117e:	4631      	mov	r1, r6
 8001180:	6463      	str	r3, [r4, #68]	; 0x44
 8001182:	462a      	mov	r2, r5
 8001184:	462b      	mov	r3, r5
 8001186:	2001      	movs	r0, #1
 8001188:	47c0      	blx	r8
 800118a:	b990      	cbnz	r0, 80011b2 <unwind_phase2_forced+0xbe>
 800118c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001190:	a97a      	add	r1, sp, #488	; 0x1e8
 8001192:	4620      	mov	r0, r4
 8001194:	f00a ff62 	bl	800c05c <memcpy>
 8001198:	f1ba 0f08 	cmp.w	sl, #8
 800119c:	d106      	bne.n	80011ac <unwind_phase2_forced+0xb8>
 800119e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011a0:	4628      	mov	r0, r5
 80011a2:	f7ff ff01 	bl	8000fa8 <get_eit_entry>
 80011a6:	2609      	movs	r6, #9
 80011a8:	4607      	mov	r7, r0
 80011aa:	e7c6      	b.n	800113a <unwind_phase2_forced+0x46>
 80011ac:	f1ba 0f07 	cmp.w	sl, #7
 80011b0:	d005      	beq.n	80011be <unwind_phase2_forced+0xca>
 80011b2:	2709      	movs	r7, #9
 80011b4:	4638      	mov	r0, r7
 80011b6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	4638      	mov	r0, r7
 80011c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011c2:	f7ff ff75 	bl	80010b0 <_Unwind_DebugHook>
 80011c6:	a803      	add	r0, sp, #12
 80011c8:	f000 fb86 	bl	80018d8 <__restore_core_regs>

080011cc <_Unwind_GetCFA>:
 80011cc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80011ce:	4770      	bx	lr

080011d0 <__gnu_Unwind_RaiseException>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80011d4:	640b      	str	r3, [r1, #64]	; 0x40
 80011d6:	1d0e      	adds	r6, r1, #4
 80011d8:	460f      	mov	r7, r1
 80011da:	4604      	mov	r4, r0
 80011dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011de:	b0f9      	sub	sp, #484	; 0x1e4
 80011e0:	ad01      	add	r5, sp, #4
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011f0:	f04f 36ff 	mov.w	r6, #4294967295
 80011f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011f8:	9600      	str	r6, [sp, #0]
 80011fa:	e006      	b.n	800120a <__gnu_Unwind_RaiseException+0x3a>
 80011fc:	6923      	ldr	r3, [r4, #16]
 80011fe:	466a      	mov	r2, sp
 8001200:	4621      	mov	r1, r4
 8001202:	4798      	blx	r3
 8001204:	2808      	cmp	r0, #8
 8001206:	4605      	mov	r5, r0
 8001208:	d108      	bne.n	800121c <__gnu_Unwind_RaiseException+0x4c>
 800120a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fecb 	bl	8000fa8 <get_eit_entry>
 8001212:	2800      	cmp	r0, #0
 8001214:	d0f2      	beq.n	80011fc <__gnu_Unwind_RaiseException+0x2c>
 8001216:	2009      	movs	r0, #9
 8001218:	b079      	add	sp, #484	; 0x1e4
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121c:	4668      	mov	r0, sp
 800121e:	f7ff ff13 	bl	8001048 <restore_non_core_regs>
 8001222:	2d06      	cmp	r5, #6
 8001224:	d1f7      	bne.n	8001216 <__gnu_Unwind_RaiseException+0x46>
 8001226:	4639      	mov	r1, r7
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff43 	bl	80010b4 <unwind_phase2>
 800122e:	bf00      	nop

08001230 <__gnu_Unwind_ForcedUnwind>:
 8001230:	b430      	push	{r4, r5}
 8001232:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001234:	60c1      	str	r1, [r0, #12]
 8001236:	6182      	str	r2, [r0, #24]
 8001238:	4619      	mov	r1, r3
 800123a:	641d      	str	r5, [r3, #64]	; 0x40
 800123c:	2200      	movs	r2, #0
 800123e:	bc30      	pop	{r4, r5}
 8001240:	e758      	b.n	80010f4 <unwind_phase2_forced>
 8001242:	bf00      	nop

08001244 <__gnu_Unwind_Resume>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	68c6      	ldr	r6, [r0, #12]
 8001248:	6943      	ldr	r3, [r0, #20]
 800124a:	640b      	str	r3, [r1, #64]	; 0x40
 800124c:	b126      	cbz	r6, 8001258 <__gnu_Unwind_Resume+0x14>
 800124e:	2201      	movs	r2, #1
 8001250:	f7ff ff50 	bl	80010f4 <unwind_phase2_forced>
 8001254:	f00f f891 	bl	801037a <abort>
 8001258:	6903      	ldr	r3, [r0, #16]
 800125a:	460a      	mov	r2, r1
 800125c:	4604      	mov	r4, r0
 800125e:	460d      	mov	r5, r1
 8001260:	4601      	mov	r1, r0
 8001262:	2002      	movs	r0, #2
 8001264:	4798      	blx	r3
 8001266:	2807      	cmp	r0, #7
 8001268:	d007      	beq.n	800127a <__gnu_Unwind_Resume+0x36>
 800126a:	2808      	cmp	r0, #8
 800126c:	d103      	bne.n	8001276 <__gnu_Unwind_Resume+0x32>
 800126e:	4629      	mov	r1, r5
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff1f 	bl	80010b4 <unwind_phase2>
 8001276:	f00f f880 	bl	801037a <abort>
 800127a:	4630      	mov	r0, r6
 800127c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800127e:	f7ff ff17 	bl	80010b0 <_Unwind_DebugHook>
 8001282:	1d28      	adds	r0, r5, #4
 8001284:	f000 fb28 	bl	80018d8 <__restore_core_regs>

08001288 <__gnu_Unwind_Resume_or_Rethrow>:
 8001288:	68c2      	ldr	r2, [r0, #12]
 800128a:	b11a      	cbz	r2, 8001294 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800128c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800128e:	640a      	str	r2, [r1, #64]	; 0x40
 8001290:	2200      	movs	r2, #0
 8001292:	e72f      	b.n	80010f4 <unwind_phase2_forced>
 8001294:	e79c      	b.n	80011d0 <__gnu_Unwind_RaiseException>
 8001296:	bf00      	nop

08001298 <_Unwind_Complete>:
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <_Unwind_DeleteException>:
 800129c:	6883      	ldr	r3, [r0, #8]
 800129e:	b113      	cbz	r3, 80012a6 <_Unwind_DeleteException+0xa>
 80012a0:	4601      	mov	r1, r0
 80012a2:	2001      	movs	r0, #1
 80012a4:	4718      	bx	r3
 80012a6:	4770      	bx	lr

080012a8 <_Unwind_VRS_Get>:
 80012a8:	b500      	push	{lr}
 80012aa:	2904      	cmp	r1, #4
 80012ac:	d807      	bhi.n	80012be <_Unwind_VRS_Get+0x16>
 80012ae:	e8df f001 	tbb	[pc, r1]
 80012b2:	0903      	.short	0x0903
 80012b4:	0906      	.short	0x0906
 80012b6:	09          	.byte	0x09
 80012b7:	00          	.byte	0x00
 80012b8:	b90b      	cbnz	r3, 80012be <_Unwind_VRS_Get+0x16>
 80012ba:	2a0f      	cmp	r2, #15
 80012bc:	d905      	bls.n	80012ca <_Unwind_VRS_Get+0x22>
 80012be:	2002      	movs	r0, #2
 80012c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c4:	2001      	movs	r0, #1
 80012c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	6853      	ldr	r3, [r2, #4]
 80012d2:	9a01      	ldr	r2, [sp, #4]
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012da:	bf00      	nop

080012dc <_Unwind_GetGR>:
 80012dc:	b510      	push	{r4, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	2300      	movs	r3, #0
 80012e2:	ac03      	add	r4, sp, #12
 80012e4:	460a      	mov	r2, r1
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff ffdd 	bl	80012a8 <_Unwind_VRS_Get>
 80012ee:	9803      	ldr	r0, [sp, #12]
 80012f0:	b004      	add	sp, #16
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <_Unwind_VRS_Set>:
 80012f4:	b500      	push	{lr}
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d807      	bhi.n	800130a <_Unwind_VRS_Set+0x16>
 80012fa:	e8df f001 	tbb	[pc, r1]
 80012fe:	0903      	.short	0x0903
 8001300:	0906      	.short	0x0906
 8001302:	09          	.byte	0x09
 8001303:	00          	.byte	0x00
 8001304:	b90b      	cbnz	r3, 800130a <_Unwind_VRS_Set+0x16>
 8001306:	2a0f      	cmp	r2, #15
 8001308:	d905      	bls.n	8001316 <_Unwind_VRS_Set+0x22>
 800130a:	2002      	movs	r0, #2
 800130c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001310:	2001      	movs	r0, #1
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	9901      	ldr	r1, [sp, #4]
 8001318:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800131c:	6809      	ldr	r1, [r1, #0]
 800131e:	6051      	str	r1, [r2, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	f85d fb04 	ldr.w	pc, [sp], #4
 8001326:	bf00      	nop

08001328 <_Unwind_SetGR>:
 8001328:	b510      	push	{r4, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	ac04      	add	r4, sp, #16
 800132e:	2300      	movs	r3, #0
 8001330:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001334:	460a      	mov	r2, r1
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff ffdb 	bl	80012f4 <_Unwind_VRS_Set>
 800133e:	b004      	add	sp, #16
 8001340:	bd10      	pop	{r4, pc}
 8001342:	bf00      	nop

08001344 <__gnu_Unwind_Backtrace>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	1d15      	adds	r5, r2, #4
 800134c:	4607      	mov	r7, r0
 800134e:	460e      	mov	r6, r1
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001356:	ac17      	add	r4, sp, #92	; 0x5c
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001366:	f04f 35ff 	mov.w	r5, #4294967295
 800136a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800136e:	9516      	str	r5, [sp, #88]	; 0x58
 8001370:	e010      	b.n	8001394 <__gnu_Unwind_Backtrace+0x50>
 8001372:	a816      	add	r0, sp, #88	; 0x58
 8001374:	f7ff ffd8 	bl	8001328 <_Unwind_SetGR>
 8001378:	4631      	mov	r1, r6
 800137a:	a816      	add	r0, sp, #88	; 0x58
 800137c:	47b8      	blx	r7
 800137e:	aa16      	add	r2, sp, #88	; 0x58
 8001380:	4669      	mov	r1, sp
 8001382:	b978      	cbnz	r0, 80013a4 <__gnu_Unwind_Backtrace+0x60>
 8001384:	9b04      	ldr	r3, [sp, #16]
 8001386:	2008      	movs	r0, #8
 8001388:	4798      	blx	r3
 800138a:	2805      	cmp	r0, #5
 800138c:	4604      	mov	r4, r0
 800138e:	d00a      	beq.n	80013a6 <__gnu_Unwind_Backtrace+0x62>
 8001390:	2809      	cmp	r0, #9
 8001392:	d007      	beq.n	80013a4 <__gnu_Unwind_Backtrace+0x60>
 8001394:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001396:	4668      	mov	r0, sp
 8001398:	f7ff fe06 	bl	8000fa8 <get_eit_entry>
 800139c:	466a      	mov	r2, sp
 800139e:	210c      	movs	r1, #12
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0e6      	beq.n	8001372 <__gnu_Unwind_Backtrace+0x2e>
 80013a4:	2409      	movs	r4, #9
 80013a6:	a816      	add	r0, sp, #88	; 0x58
 80013a8:	f7ff fe4e 	bl	8001048 <restore_non_core_regs>
 80013ac:	4620      	mov	r0, r4
 80013ae:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013b4 <__gnu_unwind_pr_common>:
 80013b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b8:	460d      	mov	r5, r1
 80013ba:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80013bc:	b08b      	sub	sp, #44	; 0x2c
 80013be:	1d0c      	adds	r4, r1, #4
 80013c0:	6809      	ldr	r1, [r1, #0]
 80013c2:	9107      	str	r1, [sp, #28]
 80013c4:	4691      	mov	r9, r2
 80013c6:	9408      	str	r4, [sp, #32]
 80013c8:	f000 0b03 	and.w	fp, r0, #3
 80013cc:	461e      	mov	r6, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d160      	bne.n	8001494 <__gnu_unwind_pr_common+0xe0>
 80013d2:	0209      	lsls	r1, r1, #8
 80013d4:	2303      	movs	r3, #3
 80013d6:	9107      	str	r1, [sp, #28]
 80013d8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80013dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80013e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80013e2:	f1bb 0f02 	cmp.w	fp, #2
 80013e6:	bf08      	it	eq
 80013e8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80013ea:	f013 0301 	ands.w	r3, r3, #1
 80013ee:	d140      	bne.n	8001472 <__gnu_unwind_pr_common+0xbe>
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f000 0308 	and.w	r3, r0, #8
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	f8d4 8000 	ldr.w	r8, [r4]
 80013fc:	f1b8 0f00 	cmp.w	r8, #0
 8001400:	d039      	beq.n	8001476 <__gnu_unwind_pr_common+0xc2>
 8001402:	2e02      	cmp	r6, #2
 8001404:	d043      	beq.n	800148e <__gnu_unwind_pr_common+0xda>
 8001406:	f8b4 8000 	ldrh.w	r8, [r4]
 800140a:	8867      	ldrh	r7, [r4, #2]
 800140c:	3404      	adds	r4, #4
 800140e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001410:	f027 0a01 	bic.w	sl, r7, #1
 8001414:	210f      	movs	r1, #15
 8001416:	4648      	mov	r0, r9
 8001418:	449a      	add	sl, r3
 800141a:	f7ff ff5f 	bl	80012dc <_Unwind_GetGR>
 800141e:	4582      	cmp	sl, r0
 8001420:	d833      	bhi.n	800148a <__gnu_unwind_pr_common+0xd6>
 8001422:	f028 0301 	bic.w	r3, r8, #1
 8001426:	449a      	add	sl, r3
 8001428:	4550      	cmp	r0, sl
 800142a:	bf2c      	ite	cs
 800142c:	2000      	movcs	r0, #0
 800142e:	2001      	movcc	r0, #1
 8001430:	007f      	lsls	r7, r7, #1
 8001432:	f007 0702 	and.w	r7, r7, #2
 8001436:	f008 0801 	and.w	r8, r8, #1
 800143a:	ea47 0708 	orr.w	r7, r7, r8
 800143e:	2f01      	cmp	r7, #1
 8001440:	d03e      	beq.n	80014c0 <__gnu_unwind_pr_common+0x10c>
 8001442:	d335      	bcc.n	80014b0 <__gnu_unwind_pr_common+0xfc>
 8001444:	2f02      	cmp	r7, #2
 8001446:	d11c      	bne.n	8001482 <__gnu_unwind_pr_common+0xce>
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144e:	9202      	str	r2, [sp, #8]
 8001450:	f1bb 0f00 	cmp.w	fp, #0
 8001454:	d176      	bne.n	8001544 <__gnu_unwind_pr_common+0x190>
 8001456:	b128      	cbz	r0, 8001464 <__gnu_unwind_pr_common+0xb0>
 8001458:	9903      	ldr	r1, [sp, #12]
 800145a:	2900      	cmp	r1, #0
 800145c:	d07e      	beq.n	800155c <__gnu_unwind_pr_common+0x1a8>
 800145e:	2a00      	cmp	r2, #0
 8001460:	f000 80a6 	beq.w	80015b0 <__gnu_unwind_pr_common+0x1fc>
 8001464:	2b00      	cmp	r3, #0
 8001466:	db77      	blt.n	8001558 <__gnu_unwind_pr_common+0x1a4>
 8001468:	9b02      	ldr	r3, [sp, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001470:	e7c2      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 8001472:	2300      	movs	r3, #0
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	2e02      	cmp	r6, #2
 8001478:	dd3e      	ble.n	80014f8 <__gnu_unwind_pr_common+0x144>
 800147a:	f7ff fe17 	bl	80010ac <__gnu_unwind_24bit.isra.1>
 800147e:	2800      	cmp	r0, #0
 8001480:	d040      	beq.n	8001504 <__gnu_unwind_pr_common+0x150>
 8001482:	2009      	movs	r0, #9
 8001484:	b00b      	add	sp, #44	; 0x2c
 8001486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148a:	2000      	movs	r0, #0
 800148c:	e7d0      	b.n	8001430 <__gnu_unwind_pr_common+0x7c>
 800148e:	6867      	ldr	r7, [r4, #4]
 8001490:	3408      	adds	r4, #8
 8001492:	e7bc      	b.n	800140e <__gnu_unwind_pr_common+0x5a>
 8001494:	2b02      	cmp	r3, #2
 8001496:	dca3      	bgt.n	80013e0 <__gnu_unwind_pr_common+0x2c>
 8001498:	0c0b      	lsrs	r3, r1, #16
 800149a:	b2da      	uxtb	r2, r3
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80014a2:	2302      	movs	r3, #2
 80014a4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80014a8:	9107      	str	r1, [sp, #28]
 80014aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80014ae:	e797      	b.n	80013e0 <__gnu_unwind_pr_common+0x2c>
 80014b0:	f1bb 0f00 	cmp.w	fp, #0
 80014b4:	d002      	beq.n	80014bc <__gnu_unwind_pr_common+0x108>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	f040 80bd 	bne.w	8001636 <__gnu_unwind_pr_common+0x282>
 80014bc:	3404      	adds	r4, #4
 80014be:	e79b      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 80014c0:	f1bb 0f00 	cmp.w	fp, #0
 80014c4:	d125      	bne.n	8001512 <__gnu_unwind_pr_common+0x15e>
 80014c6:	b1a8      	cbz	r0, 80014f4 <__gnu_unwind_pr_common+0x140>
 80014c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014cc:	1c99      	adds	r1, r3, #2
 80014ce:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80014d2:	d0d6      	beq.n	8001482 <__gnu_unwind_pr_common+0xce>
 80014d4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80014d8:	3301      	adds	r3, #1
 80014da:	9106      	str	r1, [sp, #24]
 80014dc:	f000 80a3 	beq.w	8001626 <__gnu_unwind_pr_common+0x272>
 80014e0:	1d20      	adds	r0, r4, #4
 80014e2:	f7ff fddd 	bl	80010a0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80014e6:	ab06      	add	r3, sp, #24
 80014e8:	4601      	mov	r1, r0
 80014ea:	4628      	mov	r0, r5
 80014ec:	f3af 8000 	nop.w
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d177      	bne.n	80015e4 <__gnu_unwind_pr_common+0x230>
 80014f4:	3408      	adds	r4, #8
 80014f6:	e77f      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 80014f8:	a907      	add	r1, sp, #28
 80014fa:	4648      	mov	r0, r9
 80014fc:	f000 faee 	bl	8001adc <__gnu_unwind_execute>
 8001500:	2800      	cmp	r0, #0
 8001502:	d1be      	bne.n	8001482 <__gnu_unwind_pr_common+0xce>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d15c      	bne.n	80015c4 <__gnu_unwind_pr_common+0x210>
 800150a:	2008      	movs	r0, #8
 800150c:	b00b      	add	sp, #44	; 0x2c
 800150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001512:	210d      	movs	r1, #13
 8001514:	4648      	mov	r0, r9
 8001516:	6a2f      	ldr	r7, [r5, #32]
 8001518:	f7ff fee0 	bl	80012dc <_Unwind_GetGR>
 800151c:	4287      	cmp	r7, r0
 800151e:	d1e9      	bne.n	80014f4 <__gnu_unwind_pr_common+0x140>
 8001520:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001522:	429c      	cmp	r4, r3
 8001524:	d1e6      	bne.n	80014f4 <__gnu_unwind_pr_common+0x140>
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fcf0 	bl	8000f0c <selfrel_offset31>
 800152c:	210f      	movs	r1, #15
 800152e:	4602      	mov	r2, r0
 8001530:	4648      	mov	r0, r9
 8001532:	f7ff fef9 	bl	8001328 <_Unwind_SetGR>
 8001536:	4648      	mov	r0, r9
 8001538:	462a      	mov	r2, r5
 800153a:	2100      	movs	r1, #0
 800153c:	f7ff fef4 	bl	8001328 <_Unwind_SetGR>
 8001540:	2007      	movs	r0, #7
 8001542:	e79f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001544:	210d      	movs	r1, #13
 8001546:	4648      	mov	r0, r9
 8001548:	6a2f      	ldr	r7, [r5, #32]
 800154a:	f7ff fec7 	bl	80012dc <_Unwind_GetGR>
 800154e:	4287      	cmp	r7, r0
 8001550:	d058      	beq.n	8001604 <__gnu_unwind_pr_common+0x250>
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da87      	bge.n	8001468 <__gnu_unwind_pr_common+0xb4>
 8001558:	3404      	adds	r4, #4
 800155a:	e785      	b.n	8001468 <__gnu_unwind_pr_common+0xb4>
 800155c:	9b02      	ldr	r3, [sp, #8]
 800155e:	b33b      	cbz	r3, 80015b0 <__gnu_unwind_pr_common+0x1fc>
 8001560:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001564:	1d27      	adds	r7, r4, #4
 8001566:	f8cd b010 	str.w	fp, [sp, #16]
 800156a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800156e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001572:	9605      	str	r6, [sp, #20]
 8001574:	46a3      	mov	fp, r4
 8001576:	461c      	mov	r4, r3
 8001578:	e002      	b.n	8001580 <__gnu_unwind_pr_common+0x1cc>
 800157a:	45b2      	cmp	sl, r6
 800157c:	46b0      	mov	r8, r6
 800157e:	d016      	beq.n	80015ae <__gnu_unwind_pr_common+0x1fa>
 8001580:	4638      	mov	r0, r7
 8001582:	9406      	str	r4, [sp, #24]
 8001584:	f7ff fd8c 	bl	80010a0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001588:	ab06      	add	r3, sp, #24
 800158a:	4601      	mov	r1, r0
 800158c:	2200      	movs	r2, #0
 800158e:	4628      	mov	r0, r5
 8001590:	f3af 8000 	nop.w
 8001594:	f108 0601 	add.w	r6, r8, #1
 8001598:	3704      	adds	r7, #4
 800159a:	2800      	cmp	r0, #0
 800159c:	d0ed      	beq.n	800157a <__gnu_unwind_pr_common+0x1c6>
 800159e:	9b02      	ldr	r3, [sp, #8]
 80015a0:	9e05      	ldr	r6, [sp, #20]
 80015a2:	4543      	cmp	r3, r8
 80015a4:	465c      	mov	r4, fp
 80015a6:	f8dd b010 	ldr.w	fp, [sp, #16]
 80015aa:	d1d2      	bne.n	8001552 <__gnu_unwind_pr_common+0x19e>
 80015ac:	e000      	b.n	80015b0 <__gnu_unwind_pr_common+0x1fc>
 80015ae:	465c      	mov	r4, fp
 80015b0:	4648      	mov	r0, r9
 80015b2:	210d      	movs	r1, #13
 80015b4:	f7ff fe92 	bl	80012dc <_Unwind_GetGR>
 80015b8:	9b06      	ldr	r3, [sp, #24]
 80015ba:	6228      	str	r0, [r5, #32]
 80015bc:	62ac      	str	r4, [r5, #40]	; 0x28
 80015be:	626b      	str	r3, [r5, #36]	; 0x24
 80015c0:	2006      	movs	r0, #6
 80015c2:	e75f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 80015c4:	210f      	movs	r1, #15
 80015c6:	4648      	mov	r0, r9
 80015c8:	f7ff fe88 	bl	80012dc <_Unwind_GetGR>
 80015cc:	210e      	movs	r1, #14
 80015ce:	4602      	mov	r2, r0
 80015d0:	4648      	mov	r0, r9
 80015d2:	f7ff fea9 	bl	8001328 <_Unwind_SetGR>
 80015d6:	4648      	mov	r0, r9
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <__gnu_unwind_pr_common+0x2cc>)
 80015da:	210f      	movs	r1, #15
 80015dc:	f7ff fea4 	bl	8001328 <_Unwind_SetGR>
 80015e0:	2007      	movs	r0, #7
 80015e2:	e74f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 80015e4:	4607      	mov	r7, r0
 80015e6:	210d      	movs	r1, #13
 80015e8:	4648      	mov	r0, r9
 80015ea:	f7ff fe77 	bl	80012dc <_Unwind_GetGR>
 80015ee:	2f02      	cmp	r7, #2
 80015f0:	6228      	str	r0, [r5, #32]
 80015f2:	d11d      	bne.n	8001630 <__gnu_unwind_pr_common+0x27c>
 80015f4:	462b      	mov	r3, r5
 80015f6:	9a06      	ldr	r2, [sp, #24]
 80015f8:	f843 2f2c 	str.w	r2, [r3, #44]!
 80015fc:	626b      	str	r3, [r5, #36]	; 0x24
 80015fe:	62ac      	str	r4, [r5, #40]	; 0x28
 8001600:	2006      	movs	r0, #6
 8001602:	e73f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001604:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001606:	429c      	cmp	r4, r3
 8001608:	d1a3      	bne.n	8001552 <__gnu_unwind_pr_common+0x19e>
 800160a:	2204      	movs	r2, #4
 800160c:	2700      	movs	r7, #0
 800160e:	18a3      	adds	r3, r4, r2
 8001610:	9902      	ldr	r1, [sp, #8]
 8001612:	62a9      	str	r1, [r5, #40]	; 0x28
 8001614:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001616:	632a      	str	r2, [r5, #48]	; 0x30
 8001618:	636b      	str	r3, [r5, #52]	; 0x34
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	42bb      	cmp	r3, r7
 800161e:	db1d      	blt.n	800165c <__gnu_unwind_pr_common+0x2a8>
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	e720      	b.n	8001468 <__gnu_unwind_pr_common+0xb4>
 8001626:	4648      	mov	r0, r9
 8001628:	210d      	movs	r1, #13
 800162a:	f7ff fe57 	bl	80012dc <_Unwind_GetGR>
 800162e:	6228      	str	r0, [r5, #32]
 8001630:	9b06      	ldr	r3, [sp, #24]
 8001632:	626b      	str	r3, [r5, #36]	; 0x24
 8001634:	e7e3      	b.n	80015fe <__gnu_unwind_pr_common+0x24a>
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff fc68 	bl	8000f0c <selfrel_offset31>
 800163c:	3404      	adds	r4, #4
 800163e:	4606      	mov	r6, r0
 8001640:	63ac      	str	r4, [r5, #56]	; 0x38
 8001642:	4628      	mov	r0, r5
 8001644:	f3af 8000 	nop.w
 8001648:	2800      	cmp	r0, #0
 800164a:	f43f af1a 	beq.w	8001482 <__gnu_unwind_pr_common+0xce>
 800164e:	4648      	mov	r0, r9
 8001650:	4632      	mov	r2, r6
 8001652:	210f      	movs	r1, #15
 8001654:	f7ff fe68 	bl	8001328 <_Unwind_SetGR>
 8001658:	2007      	movs	r0, #7
 800165a:	e713      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 800165c:	4608      	mov	r0, r1
 800165e:	3001      	adds	r0, #1
 8001660:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001664:	f7ff fc52 	bl	8000f0c <selfrel_offset31>
 8001668:	210f      	movs	r1, #15
 800166a:	4602      	mov	r2, r0
 800166c:	4648      	mov	r0, r9
 800166e:	f7ff fe5b 	bl	8001328 <_Unwind_SetGR>
 8001672:	4648      	mov	r0, r9
 8001674:	462a      	mov	r2, r5
 8001676:	4639      	mov	r1, r7
 8001678:	f7ff fe56 	bl	8001328 <_Unwind_SetGR>
 800167c:	2007      	movs	r0, #7
 800167e:	e701      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001680:	00000000 	.word	0x00000000

08001684 <__aeabi_unwind_cpp_pr0>:
 8001684:	2300      	movs	r3, #0
 8001686:	e695      	b.n	80013b4 <__gnu_unwind_pr_common>

08001688 <__aeabi_unwind_cpp_pr1>:
 8001688:	2301      	movs	r3, #1
 800168a:	e693      	b.n	80013b4 <__gnu_unwind_pr_common>

0800168c <__aeabi_unwind_cpp_pr2>:
 800168c:	2302      	movs	r3, #2
 800168e:	e691      	b.n	80013b4 <__gnu_unwind_pr_common>

08001690 <_Unwind_VRS_Pop>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	b0c5      	sub	sp, #276	; 0x114
 8001696:	2904      	cmp	r1, #4
 8001698:	d80d      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800169a:	e8df f001 	tbb	[pc, r1]
 800169e:	0353      	.short	0x0353
 80016a0:	310c      	.short	0x310c
 80016a2:	0f          	.byte	0x0f
 80016a3:	00          	.byte	0x00
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80016aa:	b295      	uxth	r5, r2
 80016ac:	d162      	bne.n	8001774 <_Unwind_VRS_Pop+0xe4>
 80016ae:	1972      	adds	r2, r6, r5
 80016b0:	2a10      	cmp	r2, #16
 80016b2:	f240 809b 	bls.w	80017ec <_Unwind_VRS_Pop+0x15c>
 80016b6:	2002      	movs	r0, #2
 80016b8:	b045      	add	sp, #276	; 0x114
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1fa      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 80016c0:	2a10      	cmp	r2, #16
 80016c2:	d8f8      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	06d8      	lsls	r0, r3, #27
 80016c8:	f100 80c6 	bmi.w	8001858 <_Unwind_VRS_Pop+0x1c8>
 80016cc:	ae22      	add	r6, sp, #136	; 0x88
 80016ce:	4630      	mov	r0, r6
 80016d0:	9201      	str	r2, [sp, #4]
 80016d2:	f000 f973 	bl	80019bc <__gnu_Unwind_Save_WMMXC>
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	9a01      	ldr	r2, [sp, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	2501      	movs	r5, #1
 80016de:	fa05 f103 	lsl.w	r1, r5, r3
 80016e2:	4211      	tst	r1, r2
 80016e4:	d003      	beq.n	80016ee <_Unwind_VRS_Pop+0x5e>
 80016e6:	6801      	ldr	r1, [r0, #0]
 80016e8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80016ec:	3004      	adds	r0, #4
 80016ee:	3301      	adds	r3, #1
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d1f4      	bne.n	80016de <_Unwind_VRS_Pop+0x4e>
 80016f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80016f6:	4630      	mov	r0, r6
 80016f8:	f000 f956 	bl	80019a8 <__gnu_Unwind_Restore_WMMXC>
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7db      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001700:	2b03      	cmp	r3, #3
 8001702:	d1d8      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001704:	0c15      	lsrs	r5, r2, #16
 8001706:	b297      	uxth	r7, r2
 8001708:	19eb      	adds	r3, r5, r7
 800170a:	2b10      	cmp	r3, #16
 800170c:	d8d3      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	071e      	lsls	r6, r3, #28
 8001712:	f100 80b5 	bmi.w	8001880 <_Unwind_VRS_Pop+0x1f0>
 8001716:	ae22      	add	r6, sp, #136	; 0x88
 8001718:	4630      	mov	r0, r6
 800171a:	f000 f923 	bl	8001964 <__gnu_Unwind_Save_WMMXD>
 800171e:	00ed      	lsls	r5, r5, #3
 8001720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001722:	b14f      	cbz	r7, 8001738 <_Unwind_VRS_Pop+0xa8>
 8001724:	3d04      	subs	r5, #4
 8001726:	1971      	adds	r1, r6, r5
 8001728:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 800172c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001730:	f841 2f04 	str.w	r2, [r1, #4]!
 8001734:	4283      	cmp	r3, r0
 8001736:	d1f9      	bne.n	800172c <_Unwind_VRS_Pop+0x9c>
 8001738:	4630      	mov	r0, r6
 800173a:	63a3      	str	r3, [r4, #56]	; 0x38
 800173c:	f000 f8f0 	bl	8001920 <__gnu_Unwind_Restore_WMMXD>
 8001740:	2000      	movs	r0, #0
 8001742:	e7b9      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1b6      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001748:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800174a:	b297      	uxth	r7, r2
 800174c:	1d20      	adds	r0, r4, #4
 800174e:	2601      	movs	r6, #1
 8001750:	fa06 f103 	lsl.w	r1, r6, r3
 8001754:	4239      	tst	r1, r7
 8001756:	f103 0301 	add.w	r3, r3, #1
 800175a:	d002      	beq.n	8001762 <_Unwind_VRS_Pop+0xd2>
 800175c:	6829      	ldr	r1, [r5, #0]
 800175e:	6001      	str	r1, [r0, #0]
 8001760:	3504      	adds	r5, #4
 8001762:	2b10      	cmp	r3, #16
 8001764:	f100 0004 	add.w	r0, r0, #4
 8001768:	d1f2      	bne.n	8001750 <_Unwind_VRS_Pop+0xc0>
 800176a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800176e:	d13b      	bne.n	80017e8 <_Unwind_VRS_Pop+0x158>
 8001770:	63a5      	str	r5, [r4, #56]	; 0x38
 8001772:	e7a1      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001774:	2b05      	cmp	r3, #5
 8001776:	d19e      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001778:	1977      	adds	r7, r6, r5
 800177a:	2f20      	cmp	r7, #32
 800177c:	d89b      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800177e:	2e0f      	cmp	r6, #15
 8001780:	d966      	bls.n	8001850 <_Unwind_VRS_Pop+0x1c0>
 8001782:	462f      	mov	r7, r5
 8001784:	2d00      	cmp	r5, #0
 8001786:	d13a      	bne.n	80017fe <_Unwind_VRS_Pop+0x16e>
 8001788:	462a      	mov	r2, r5
 800178a:	2700      	movs	r7, #0
 800178c:	2a00      	cmp	r2, #0
 800178e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001790:	dd72      	ble.n	8001878 <_Unwind_VRS_Pop+0x1e8>
 8001792:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001796:	4601      	mov	r1, r0
 8001798:	a844      	add	r0, sp, #272	; 0x110
 800179a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800179e:	388c      	subs	r0, #140	; 0x8c
 80017a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80017a4:	f840 5f04 	str.w	r5, [r0, #4]!
 80017a8:	4291      	cmp	r1, r2
 80017aa:	d1f9      	bne.n	80017a0 <_Unwind_VRS_Pop+0x110>
 80017ac:	4608      	mov	r0, r1
 80017ae:	b197      	cbz	r7, 80017d6 <_Unwind_VRS_Pop+0x146>
 80017b0:	2e10      	cmp	r6, #16
 80017b2:	4632      	mov	r2, r6
 80017b4:	a944      	add	r1, sp, #272	; 0x110
 80017b6:	bf38      	it	cc
 80017b8:	2210      	movcc	r2, #16
 80017ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80017be:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80017c2:	0079      	lsls	r1, r7, #1
 80017c4:	3a04      	subs	r2, #4
 80017c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80017ca:	f850 5b04 	ldr.w	r5, [r0], #4
 80017ce:	f842 5f04 	str.w	r5, [r2, #4]!
 80017d2:	4288      	cmp	r0, r1
 80017d4:	d1f9      	bne.n	80017ca <_Unwind_VRS_Pop+0x13a>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d048      	beq.n	800186c <_Unwind_VRS_Pop+0x1dc>
 80017da:	2e0f      	cmp	r6, #15
 80017dc:	63a1      	str	r1, [r4, #56]	; 0x38
 80017de:	d933      	bls.n	8001848 <_Unwind_VRS_Pop+0x1b8>
 80017e0:	b117      	cbz	r7, 80017e8 <_Unwind_VRS_Pop+0x158>
 80017e2:	a802      	add	r0, sp, #8
 80017e4:	f000 f894 	bl	8001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80017e8:	2000      	movs	r0, #0
 80017ea:	e765      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 80017ec:	2e0f      	cmp	r6, #15
 80017ee:	f63f af62 	bhi.w	80016b6 <_Unwind_VRS_Pop+0x26>
 80017f2:	2700      	movs	r7, #0
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	07d1      	lsls	r1, r2, #31
 80017f8:	d417      	bmi.n	800182a <_Unwind_VRS_Pop+0x19a>
 80017fa:	2f00      	cmp	r7, #0
 80017fc:	d060      	beq.n	80018c0 <_Unwind_VRS_Pop+0x230>
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	0751      	lsls	r1, r2, #29
 8001802:	d445      	bmi.n	8001890 <_Unwind_VRS_Pop+0x200>
 8001804:	2b01      	cmp	r3, #1
 8001806:	d04d      	beq.n	80018a4 <_Unwind_VRS_Pop+0x214>
 8001808:	2e0f      	cmp	r6, #15
 800180a:	d806      	bhi.n	800181a <_Unwind_VRS_Pop+0x18a>
 800180c:	a822      	add	r0, sp, #136	; 0x88
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f000 f87a 	bl	8001908 <__gnu_Unwind_Save_VFP_D>
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	2f00      	cmp	r7, #0
 8001818:	d0b6      	beq.n	8001788 <_Unwind_VRS_Pop+0xf8>
 800181a:	a802      	add	r0, sp, #8
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	f000 f87b 	bl	8001918 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	f1c6 0210 	rsb	r2, r6, #16
 8001828:	e7b0      	b.n	800178c <_Unwind_VRS_Pop+0xfc>
 800182a:	f022 0101 	bic.w	r1, r2, #1
 800182e:	2b05      	cmp	r3, #5
 8001830:	6021      	str	r1, [r4, #0]
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4620      	mov	r0, r4
 8001836:	d03b      	beq.n	80018b0 <_Unwind_VRS_Pop+0x220>
 8001838:	f022 0203 	bic.w	r2, r2, #3
 800183c:	f840 2b48 	str.w	r2, [r0], #72
 8001840:	f000 f85a 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 8001844:	9b01      	ldr	r3, [sp, #4]
 8001846:	e7d8      	b.n	80017fa <_Unwind_VRS_Pop+0x16a>
 8001848:	a822      	add	r0, sp, #136	; 0x88
 800184a:	f000 f859 	bl	8001900 <__gnu_Unwind_Restore_VFP_D>
 800184e:	e7c7      	b.n	80017e0 <_Unwind_VRS_Pop+0x150>
 8001850:	2f10      	cmp	r7, #16
 8001852:	d9ce      	bls.n	80017f2 <_Unwind_VRS_Pop+0x162>
 8001854:	3f10      	subs	r7, #16
 8001856:	e7cd      	b.n	80017f4 <_Unwind_VRS_Pop+0x164>
 8001858:	f023 0310 	bic.w	r3, r3, #16
 800185c:	6023      	str	r3, [r4, #0]
 800185e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	f000 f8aa 	bl	80019bc <__gnu_Unwind_Save_WMMXC>
 8001868:	9a01      	ldr	r2, [sp, #4]
 800186a:	e72f      	b.n	80016cc <_Unwind_VRS_Pop+0x3c>
 800186c:	3104      	adds	r1, #4
 800186e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001870:	a822      	add	r0, sp, #136	; 0x88
 8001872:	f000 f83d 	bl	80018f0 <__gnu_Unwind_Restore_VFP>
 8001876:	e7b7      	b.n	80017e8 <_Unwind_VRS_Pop+0x158>
 8001878:	2f00      	cmp	r7, #0
 800187a:	d199      	bne.n	80017b0 <_Unwind_VRS_Pop+0x120>
 800187c:	4601      	mov	r1, r0
 800187e:	e7aa      	b.n	80017d6 <_Unwind_VRS_Pop+0x146>
 8001880:	f023 0308 	bic.w	r3, r3, #8
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800188a:	f000 f86b 	bl	8001964 <__gnu_Unwind_Save_WMMXD>
 800188e:	e742      	b.n	8001716 <_Unwind_VRS_Pop+0x86>
 8001890:	4620      	mov	r0, r4
 8001892:	f022 0204 	bic.w	r2, r2, #4
 8001896:	f840 2bd0 	str.w	r2, [r0], #208
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f000 f83c 	bl	8001918 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018a0:	9b01      	ldr	r3, [sp, #4]
 80018a2:	e7af      	b.n	8001804 <_Unwind_VRS_Pop+0x174>
 80018a4:	a822      	add	r0, sp, #136	; 0x88
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f000 f826 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 80018ac:	9b01      	ldr	r3, [sp, #4]
 80018ae:	e7b9      	b.n	8001824 <_Unwind_VRS_Pop+0x194>
 80018b0:	f041 0102 	orr.w	r1, r1, #2
 80018b4:	f840 1b48 	str.w	r1, [r0], #72
 80018b8:	f000 f826 	bl	8001908 <__gnu_Unwind_Save_VFP_D>
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	e79c      	b.n	80017fa <_Unwind_VRS_Pop+0x16a>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d003      	beq.n	80018cc <_Unwind_VRS_Pop+0x23c>
 80018c4:	2e0f      	cmp	r6, #15
 80018c6:	f63f af5f 	bhi.w	8001788 <_Unwind_VRS_Pop+0xf8>
 80018ca:	e79f      	b.n	800180c <_Unwind_VRS_Pop+0x17c>
 80018cc:	a822      	add	r0, sp, #136	; 0x88
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f000 f812 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 80018d4:	9b01      	ldr	r3, [sp, #4]
 80018d6:	e757      	b.n	8001788 <_Unwind_VRS_Pop+0xf8>

080018d8 <__restore_core_regs>:
 80018d8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80018dc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80018e0:	469c      	mov	ip, r3
 80018e2:	46a6      	mov	lr, r4
 80018e4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80018e8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80018ec:	46e5      	mov	sp, ip
 80018ee:	bd00      	pop	{pc}

080018f0 <__gnu_Unwind_Restore_VFP>:
 80018f0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <__gnu_Unwind_Save_VFP>:
 80018f8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <__gnu_Unwind_Restore_VFP_D>:
 8001900:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <__gnu_Unwind_Save_VFP_D>:
 8001908:	ec80 0b20 	vstmia	r0, {d0-d15}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001910:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001918:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <__gnu_Unwind_Restore_WMMXD>:
 8001920:	ecf0 0102 	ldfe	f0, [r0], #8
 8001924:	ecf0 1102 	ldfe	f1, [r0], #8
 8001928:	ecf0 2102 	ldfe	f2, [r0], #8
 800192c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001930:	ecf0 4102 	ldfe	f4, [r0], #8
 8001934:	ecf0 5102 	ldfe	f5, [r0], #8
 8001938:	ecf0 6102 	ldfe	f6, [r0], #8
 800193c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001940:	ecf0 8102 	ldfp	f0, [r0], #8
 8001944:	ecf0 9102 	ldfp	f1, [r0], #8
 8001948:	ecf0 a102 	ldfp	f2, [r0], #8
 800194c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001950:	ecf0 c102 	ldfp	f4, [r0], #8
 8001954:	ecf0 d102 	ldfp	f5, [r0], #8
 8001958:	ecf0 e102 	ldfp	f6, [r0], #8
 800195c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <__gnu_Unwind_Save_WMMXD>:
 8001964:	ece0 0102 	stfe	f0, [r0], #8
 8001968:	ece0 1102 	stfe	f1, [r0], #8
 800196c:	ece0 2102 	stfe	f2, [r0], #8
 8001970:	ece0 3102 	stfe	f3, [r0], #8
 8001974:	ece0 4102 	stfe	f4, [r0], #8
 8001978:	ece0 5102 	stfe	f5, [r0], #8
 800197c:	ece0 6102 	stfe	f6, [r0], #8
 8001980:	ece0 7102 	stfe	f7, [r0], #8
 8001984:	ece0 8102 	stfp	f0, [r0], #8
 8001988:	ece0 9102 	stfp	f1, [r0], #8
 800198c:	ece0 a102 	stfp	f2, [r0], #8
 8001990:	ece0 b102 	stfp	f3, [r0], #8
 8001994:	ece0 c102 	stfp	f4, [r0], #8
 8001998:	ece0 d102 	stfp	f5, [r0], #8
 800199c:	ece0 e102 	stfp	f6, [r0], #8
 80019a0:	ece0 f102 	stfp	f7, [r0], #8
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Restore_WMMXC>:
 80019a8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80019ac:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80019b0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80019b4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <__gnu_Unwind_Save_WMMXC>:
 80019bc:	fca0 8101 	stc2	1, cr8, [r0], #4
 80019c0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80019c4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80019c8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <_Unwind_RaiseException>:
 80019d0:	46ec      	mov	ip, sp
 80019d2:	b500      	push	{lr}
 80019d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019e4:	a901      	add	r1, sp, #4
 80019e6:	f7ff fbf3 	bl	80011d0 <__gnu_Unwind_RaiseException>
 80019ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019ee:	b012      	add	sp, #72	; 0x48
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <_Unwind_Resume>:
 80019f4:	46ec      	mov	ip, sp
 80019f6:	b500      	push	{lr}
 80019f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a08:	a901      	add	r1, sp, #4
 8001a0a:	f7ff fc1b 	bl	8001244 <__gnu_Unwind_Resume>
 8001a0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a12:	b012      	add	sp, #72	; 0x48
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <_Unwind_Resume_or_Rethrow>:
 8001a18:	46ec      	mov	ip, sp
 8001a1a:	b500      	push	{lr}
 8001a1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a2c:	a901      	add	r1, sp, #4
 8001a2e:	f7ff fc2b 	bl	8001288 <__gnu_Unwind_Resume_or_Rethrow>
 8001a32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a36:	b012      	add	sp, #72	; 0x48
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <_Unwind_ForcedUnwind>:
 8001a3c:	46ec      	mov	ip, sp
 8001a3e:	b500      	push	{lr}
 8001a40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a50:	ab01      	add	r3, sp, #4
 8001a52:	f7ff fbed 	bl	8001230 <__gnu_Unwind_ForcedUnwind>
 8001a56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a5a:	b012      	add	sp, #72	; 0x48
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <_Unwind_Backtrace>:
 8001a60:	46ec      	mov	ip, sp
 8001a62:	b500      	push	{lr}
 8001a64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a74:	aa01      	add	r2, sp, #4
 8001a76:	f7ff fc65 	bl	8001344 <__gnu_Unwind_Backtrace>
 8001a7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a7e:	b012      	add	sp, #72	; 0x48
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <next_unwind_byte>:
 8001a84:	7a02      	ldrb	r2, [r0, #8]
 8001a86:	b91a      	cbnz	r2, 8001a90 <next_unwind_byte+0xc>
 8001a88:	7a43      	ldrb	r3, [r0, #9]
 8001a8a:	b943      	cbnz	r3, 8001a9e <next_unwind_byte+0x1a>
 8001a8c:	20b0      	movs	r0, #176	; 0xb0
 8001a8e:	4770      	bx	lr
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	3a01      	subs	r2, #1
 8001a94:	7202      	strb	r2, [r0, #8]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	6002      	str	r2, [r0, #0]
 8001a9a:	0e18      	lsrs	r0, r3, #24
 8001a9c:	4770      	bx	lr
 8001a9e:	6842      	ldr	r2, [r0, #4]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b410      	push	{r4}
 8001aa4:	7243      	strb	r3, [r0, #9]
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	1d14      	adds	r4, r2, #4
 8001aac:	7201      	strb	r1, [r0, #8]
 8001aae:	021a      	lsls	r2, r3, #8
 8001ab0:	6044      	str	r4, [r0, #4]
 8001ab2:	6002      	str	r2, [r0, #0]
 8001ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ab8:	0e18      	lsrs	r0, r3, #24
 8001aba:	4770      	bx	lr

08001abc <_Unwind_GetGR.constprop.0>:
 8001abc:	b500      	push	{lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	aa03      	add	r2, sp, #12
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	220c      	movs	r2, #12
 8001aca:	f7ff fbed 	bl	80012a8 <_Unwind_VRS_Get>
 8001ace:	9803      	ldr	r0, [sp, #12]
 8001ad0:	b005      	add	sp, #20
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	bf00      	nop

08001ad8 <unwind_UCB_from_context>:
 8001ad8:	e7f0      	b.n	8001abc <_Unwind_GetGR.constprop.0>
 8001ada:	bf00      	nop

08001adc <__gnu_unwind_execute>:
 8001adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ae0:	4606      	mov	r6, r0
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	460f      	mov	r7, r1
 8001ae6:	f04f 0800 	mov.w	r8, #0
 8001aea:	4638      	mov	r0, r7
 8001aec:	f7ff ffca 	bl	8001a84 <next_unwind_byte>
 8001af0:	28b0      	cmp	r0, #176	; 0xb0
 8001af2:	4604      	mov	r4, r0
 8001af4:	d023      	beq.n	8001b3e <__gnu_unwind_execute+0x62>
 8001af6:	0605      	lsls	r5, r0, #24
 8001af8:	d427      	bmi.n	8001b4a <__gnu_unwind_execute+0x6e>
 8001afa:	2300      	movs	r3, #0
 8001afc:	f10d 090c 	add.w	r9, sp, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	0085      	lsls	r5, r0, #2
 8001b04:	220d      	movs	r2, #13
 8001b06:	f8cd 9000 	str.w	r9, [sp]
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff fbcc 	bl	80012a8 <_Unwind_VRS_Get>
 8001b10:	b2ed      	uxtb	r5, r5
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	f8cd 9000 	str.w	r9, [sp]
 8001b18:	0660      	lsls	r0, r4, #25
 8001b1a:	f105 0504 	add.w	r5, r5, #4
 8001b1e:	bf4c      	ite	mi
 8001b20:	1b5d      	submi	r5, r3, r5
 8001b22:	18ed      	addpl	r5, r5, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	220d      	movs	r2, #13
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	9503      	str	r5, [sp, #12]
 8001b2e:	f7ff fbe1 	bl	80012f4 <_Unwind_VRS_Set>
 8001b32:	4638      	mov	r0, r7
 8001b34:	f7ff ffa6 	bl	8001a84 <next_unwind_byte>
 8001b38:	28b0      	cmp	r0, #176	; 0xb0
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	d1db      	bne.n	8001af6 <__gnu_unwind_execute+0x1a>
 8001b3e:	f1b8 0f00 	cmp.w	r8, #0
 8001b42:	f000 8095 	beq.w	8001c70 <__gnu_unwind_execute+0x194>
 8001b46:	2000      	movs	r0, #0
 8001b48:	e01c      	b.n	8001b84 <__gnu_unwind_execute+0xa8>
 8001b4a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d05d      	beq.n	8001c0e <__gnu_unwind_execute+0x132>
 8001b52:	2b90      	cmp	r3, #144	; 0x90
 8001b54:	d019      	beq.n	8001b8a <__gnu_unwind_execute+0xae>
 8001b56:	2ba0      	cmp	r3, #160	; 0xa0
 8001b58:	d02c      	beq.n	8001bb4 <__gnu_unwind_execute+0xd8>
 8001b5a:	2bb0      	cmp	r3, #176	; 0xb0
 8001b5c:	d03f      	beq.n	8001bde <__gnu_unwind_execute+0x102>
 8001b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8001b60:	d06c      	beq.n	8001c3c <__gnu_unwind_execute+0x160>
 8001b62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b66:	2bd0      	cmp	r3, #208	; 0xd0
 8001b68:	d10b      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001b6a:	f000 0207 	and.w	r2, r0, #7
 8001b6e:	3201      	adds	r2, #1
 8001b70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b74:	2305      	movs	r3, #5
 8001b76:	2101      	movs	r1, #1
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7ff fd89 	bl	8001690 <_Unwind_VRS_Pop>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0b3      	beq.n	8001aea <__gnu_unwind_execute+0xe>
 8001b82:	2009      	movs	r0, #9
 8001b84:	b005      	add	sp, #20
 8001b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b8a:	f000 030d 	and.w	r3, r0, #13
 8001b8e:	2b0d      	cmp	r3, #13
 8001b90:	d0f7      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001b92:	ad03      	add	r5, sp, #12
 8001b94:	2300      	movs	r3, #0
 8001b96:	f000 020f 	and.w	r2, r0, #15
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	9500      	str	r5, [sp, #0]
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff fb82 	bl	80012a8 <_Unwind_VRS_Get>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9500      	str	r5, [sp, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	220d      	movs	r2, #13
 8001bac:	4630      	mov	r0, r6
 8001bae:	f7ff fba1 	bl	80012f4 <_Unwind_VRS_Set>
 8001bb2:	e79a      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001bb4:	43c2      	mvns	r2, r0
 8001bb6:	f002 0307 	and.w	r3, r2, #7
 8001bba:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bbe:	411a      	asrs	r2, r3
 8001bc0:	0701      	lsls	r1, r0, #28
 8001bc2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	bf48      	it	mi
 8001bcc:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7ff fd5c 	bl	8001690 <_Unwind_VRS_Pop>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1d2      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001bdc:	e785      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001bde:	28b1      	cmp	r0, #177	; 0xb1
 8001be0:	d057      	beq.n	8001c92 <__gnu_unwind_execute+0x1b6>
 8001be2:	28b2      	cmp	r0, #178	; 0xb2
 8001be4:	d068      	beq.n	8001cb8 <__gnu_unwind_execute+0x1dc>
 8001be6:	28b3      	cmp	r0, #179	; 0xb3
 8001be8:	f000 8095 	beq.w	8001d16 <__gnu_unwind_execute+0x23a>
 8001bec:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001bf0:	2bb4      	cmp	r3, #180	; 0xb4
 8001bf2:	d0c6      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001bf4:	f000 0207 	and.w	r2, r0, #7
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c00:	4619      	mov	r1, r3
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7ff fd44 	bl	8001690 <_Unwind_VRS_Pop>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1ba      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c0c:	e76d      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001c0e:	4638      	mov	r0, r7
 8001c10:	f7ff ff38 	bl	8001a84 <next_unwind_byte>
 8001c14:	0224      	lsls	r4, r4, #8
 8001c16:	4304      	orrs	r4, r0
 8001c18:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001c1c:	d0b1      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c1e:	0124      	lsls	r4, r4, #4
 8001c20:	2300      	movs	r3, #0
 8001c22:	b2a2      	uxth	r2, r4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff fd32 	bl	8001690 <_Unwind_VRS_Pop>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1a8      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c30:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001c34:	bf18      	it	ne
 8001c36:	f04f 0801 	movne.w	r8, #1
 8001c3a:	e756      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001c3c:	28c6      	cmp	r0, #198	; 0xc6
 8001c3e:	d07d      	beq.n	8001d3c <__gnu_unwind_execute+0x260>
 8001c40:	28c7      	cmp	r0, #199	; 0xc7
 8001c42:	f000 8086 	beq.w	8001d52 <__gnu_unwind_execute+0x276>
 8001c46:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8001c4c:	f000 8094 	beq.w	8001d78 <__gnu_unwind_execute+0x29c>
 8001c50:	28c8      	cmp	r0, #200	; 0xc8
 8001c52:	f000 809f 	beq.w	8001d94 <__gnu_unwind_execute+0x2b8>
 8001c56:	28c9      	cmp	r0, #201	; 0xc9
 8001c58:	d193      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f7ff ff12 	bl	8001a84 <next_unwind_byte>
 8001c60:	0302      	lsls	r2, r0, #12
 8001c62:	f000 000f 	and.w	r0, r0, #15
 8001c66:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	4302      	orrs	r2, r0
 8001c6e:	e781      	b.n	8001b74 <__gnu_unwind_execute+0x98>
 8001c70:	ac03      	add	r4, sp, #12
 8001c72:	4643      	mov	r3, r8
 8001c74:	220e      	movs	r2, #14
 8001c76:	4641      	mov	r1, r8
 8001c78:	9400      	str	r4, [sp, #0]
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff fb14 	bl	80012a8 <_Unwind_VRS_Get>
 8001c80:	9400      	str	r4, [sp, #0]
 8001c82:	4630      	mov	r0, r6
 8001c84:	4643      	mov	r3, r8
 8001c86:	220f      	movs	r2, #15
 8001c88:	4641      	mov	r1, r8
 8001c8a:	f7ff fb33 	bl	80012f4 <_Unwind_VRS_Set>
 8001c8e:	4640      	mov	r0, r8
 8001c90:	e778      	b.n	8001b84 <__gnu_unwind_execute+0xa8>
 8001c92:	4638      	mov	r0, r7
 8001c94:	f7ff fef6 	bl	8001a84 <next_unwind_byte>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f43f af72 	beq.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001c9e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ca2:	f47f af6e 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4630      	mov	r0, r6
 8001cac:	f7ff fcf0 	bl	8001690 <_Unwind_VRS_Pop>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	f47f af66 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001cb6:	e718      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f10d 090c 	add.w	r9, sp, #12
 8001cbe:	220d      	movs	r2, #13
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f8cd 9000 	str.w	r9, [sp]
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f7ff faee 	bl	80012a8 <_Unwind_VRS_Get>
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f7ff fed9 	bl	8001a84 <next_unwind_byte>
 8001cd2:	0602      	lsls	r2, r0, #24
 8001cd4:	f04f 0402 	mov.w	r4, #2
 8001cd8:	d50c      	bpl.n	8001cf4 <__gnu_unwind_execute+0x218>
 8001cda:	9b03      	ldr	r3, [sp, #12]
 8001cdc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001ce0:	40a0      	lsls	r0, r4
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	f7ff fecc 	bl	8001a84 <next_unwind_byte>
 8001cec:	0603      	lsls	r3, r0, #24
 8001cee:	f104 0407 	add.w	r4, r4, #7
 8001cf2:	d4f2      	bmi.n	8001cda <__gnu_unwind_execute+0x1fe>
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	f8cd 9000 	str.w	r9, [sp]
 8001cfa:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001cfe:	40a2      	lsls	r2, r4
 8001d00:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001d04:	2300      	movs	r3, #0
 8001d06:	4414      	add	r4, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	220d      	movs	r2, #13
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	9403      	str	r4, [sp, #12]
 8001d10:	f7ff faf0 	bl	80012f4 <_Unwind_VRS_Set>
 8001d14:	e6e9      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d16:	4638      	mov	r0, r7
 8001d18:	f7ff feb4 	bl	8001a84 <next_unwind_byte>
 8001d1c:	0301      	lsls	r1, r0, #12
 8001d1e:	f000 000f 	and.w	r0, r0, #15
 8001d22:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001d26:	1c42      	adds	r2, r0, #1
 8001d28:	2301      	movs	r3, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7ff fcae 	bl	8001690 <_Unwind_VRS_Pop>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f47f af24 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d3a:	e6d6      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	f7ff fea1 	bl	8001a84 <next_unwind_byte>
 8001d42:	0301      	lsls	r1, r0, #12
 8001d44:	f000 000f 	and.w	r0, r0, #15
 8001d48:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001d4c:	1c42      	adds	r2, r0, #1
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e7eb      	b.n	8001d2a <__gnu_unwind_execute+0x24e>
 8001d52:	4638      	mov	r0, r7
 8001d54:	f7ff fe96 	bl	8001a84 <next_unwind_byte>
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f43f af12 	beq.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d5e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d62:	f47f af0e 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d66:	4602      	mov	r2, r0
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7ff fc90 	bl	8001690 <_Unwind_VRS_Pop>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	f47f af06 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d76:	e6b8      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d78:	f000 020f 	and.w	r2, r0, #15
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d84:	4619      	mov	r1, r3
 8001d86:	4630      	mov	r0, r6
 8001d88:	f7ff fc82 	bl	8001690 <_Unwind_VRS_Pop>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f47f aef8 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d92:	e6aa      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d94:	4638      	mov	r0, r7
 8001d96:	f7ff fe75 	bl	8001a84 <next_unwind_byte>
 8001d9a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d9e:	f000 030f 	and.w	r3, r0, #15
 8001da2:	3210      	adds	r2, #16
 8001da4:	3301      	adds	r3, #1
 8001da6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001daa:	e6e3      	b.n	8001b74 <__gnu_unwind_execute+0x98>

08001dac <__gnu_unwind_frame>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001db0:	b084      	sub	sp, #16
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2003      	movs	r0, #3
 8001db6:	f88d 000c 	strb.w	r0, [sp, #12]
 8001dba:	79dc      	ldrb	r4, [r3, #7]
 8001dbc:	f88d 400d 	strb.w	r4, [sp, #13]
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	f7ff fe86 	bl	8001adc <__gnu_unwind_execute>
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd10      	pop	{r4, pc}

08001dd4 <_Unwind_GetRegionStart>:
 8001dd4:	b508      	push	{r3, lr}
 8001dd6:	f7ff fe7f 	bl	8001ad8 <unwind_UCB_from_context>
 8001dda:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop

08001de0 <_Unwind_GetLanguageSpecificData>:
 8001de0:	b508      	push	{r3, lr}
 8001de2:	f7ff fe79 	bl	8001ad8 <unwind_UCB_from_context>
 8001de6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001de8:	79c3      	ldrb	r3, [r0, #7]
 8001dea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001dee:	3008      	adds	r0, #8
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop

08001df4 <_Unwind_GetTextRelBase>:
 8001df4:	b508      	push	{r3, lr}
 8001df6:	f00e fac0 	bl	801037a <abort>
 8001dfa:	bf00      	nop

08001dfc <_Unwind_GetDataRelBase>:
 8001dfc:	b508      	push	{r3, lr}
 8001dfe:	f7ff fff9 	bl	8001df4 <_Unwind_GetTextRelBase>
 8001e02:	bf00      	nop

08001e04 <__aeabi_idiv0>:
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_Init+0x3c>)
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x3c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f000 f8fd 	bl	800201e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e24:	2000      	movs	r0, #0
 8001e26:	f008 fde5 	bl	800a9f4 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	e001      	b.n	8001e3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e36:	f008 fd15 	bl	800a864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40022000 	.word	0x40022000

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e58:	6013      	str	r3, [r2, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20001c64 	.word	0x20001c64
 8001e68:	20000020 	.word	0x20000020

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20001c64 	.word	0x20001c64

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d004      	beq.n	8001ea8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_Delay+0x40>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea8:	bf00      	nop
 8001eaa:	f7ff ffdf 	bl	8001e6c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3f7      	bcc.n	8001eaa <HAL_Delay+0x26>
  {
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000020 	.word	0x20000020

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	4909      	ldr	r1, [pc, #36]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	f002 021f 	and.w	r2, r2, #31
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002002:	2101      	movs	r1, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff4e 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002046:	f7ff ff63 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffb3 	bl	8001fbc <NVIC_EncodePriority>
 8002056:	4602      	mov	r2, r0
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff82 	bl	8001f68 <__NVIC_SetPriority>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff56 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	460b      	mov	r3, r1
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
      break;
 80020ac:	bf00      	nop
  }

  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e003      	b.n	80020d8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2201      	movs	r2, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_EXTI_IRQHandler+0x5c>)
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4798      	blx	r3
    }
  }
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40010414 	.word	0x40010414

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002152:	e17f      	b.n	8002454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8171 	beq.w	800244e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x38>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d123      	bne.n	80021c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	6939      	ldr	r1, [r7, #16]
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0203 	and.w	r2, r3, #3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d00b      	beq.n	8002218 <HAL_GPIO_Init+0xd4>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220c:	2b11      	cmp	r3, #17
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b12      	cmp	r3, #18
 8002216:	d130      	bne.n	800227a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224e:	2201      	movs	r2, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 0201 	and.w	r2, r3, #1
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b03      	cmp	r3, #3
 8002284:	d118      	bne.n	80022b8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80ac 	beq.w	800244e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_GPIO_Init+0x32c>)
 80022f8:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_GPIO_Init+0x32c>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6613      	str	r3, [r2, #96]	; 0x60
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_GPIO_Init+0x32c>)
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800230e:	4a59      	ldr	r2, [pc, #356]	; (8002474 <HAL_GPIO_Init+0x330>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002338:	d025      	beq.n	8002386 <HAL_GPIO_Init+0x242>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <HAL_GPIO_Init+0x334>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <HAL_GPIO_Init+0x23e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4d      	ldr	r2, [pc, #308]	; (800247c <HAL_GPIO_Init+0x338>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d019      	beq.n	800237e <HAL_GPIO_Init+0x23a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_GPIO_Init+0x33c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0x236>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_GPIO_Init+0x340>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00d      	beq.n	8002376 <HAL_GPIO_Init+0x232>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_GPIO_Init+0x344>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	; (800248c <HAL_GPIO_Init+0x348>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_GPIO_Init+0x22a>
 800236a:	2306      	movs	r3, #6
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x244>
 800236e:	2307      	movs	r3, #7
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x244>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x244>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x244>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x244>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x244>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x244>
 8002386:	2300      	movs	r3, #0
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002398:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_GPIO_Init+0x330>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023a6:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_GPIO_Init+0x34c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ca:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_GPIO_Init+0x34c>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x34c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <HAL_GPIO_Init+0x34c>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_GPIO_Init+0x34c>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_GPIO_Init+0x34c>)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x34c>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_GPIO_Init+0x34c>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f ae78 	bne.w	8002154 <HAL_GPIO_Init+0x10>
  }
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000
 8002478:	48000400 	.word	0x48000400
 800247c:	48000800 	.word	0x48000800
 8002480:	48000c00 	.word	0x48000c00
 8002484:	48001000 	.word	0x48001000
 8002488:	48001400 	.word	0x48001400
 800248c:	48001800 	.word	0x48001800
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024a2:	e0cd      	b.n	8002640 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024a4:	2201      	movs	r2, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	409a      	lsls	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80c1 	beq.w	800263a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_GPIO_DeInit+0x1c8>)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_DeInit+0x9a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_GPIO_DeInit+0x1cc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_DeInit+0x96>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_GPIO_DeInit+0x1d0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_DeInit+0x92>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <HAL_GPIO_DeInit+0x1d4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_DeInit+0x8e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a5b      	ldr	r2, [pc, #364]	; (800266c <HAL_GPIO_DeInit+0x1d8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_DeInit+0x8a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a5a      	ldr	r2, [pc, #360]	; (8002670 <HAL_GPIO_DeInit+0x1dc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_DeInit+0x86>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a59      	ldr	r2, [pc, #356]	; (8002674 <HAL_GPIO_DeInit+0x1e0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_DeInit+0x82>
 8002512:	2306      	movs	r3, #6
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 8002516:	2307      	movs	r3, #7
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_DeInit+0x9c>
 800252e:	2300      	movs	r3, #0
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	fa03 f202 	lsl.w	r2, r3, r2
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	429a      	cmp	r2, r3
 8002540:	d132      	bne.n	80025a8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002542:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	4013      	ands	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002550:	4949      	ldr	r1, [pc, #292]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	4013      	ands	r3, r2
 800255c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800255e:	4946      	ldr	r1, [pc, #280]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002560:	4b45      	ldr	r3, [pc, #276]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	4013      	ands	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800256c:	4942      	ldr	r1, [pc, #264]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 800256e:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_GPIO_DeInit+0x1e4>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	4013      	ands	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800258a:	4834      	ldr	r0, [pc, #208]	; (800265c <HAL_GPIO_DeInit+0x1c8>)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	4932      	ldr	r1, [pc, #200]	; (800265c <HAL_GPIO_DeInit+0x1c8>)
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	0892      	lsrs	r2, r2, #2
 8002596:	3202      	adds	r2, #2
 8002598:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	43d2      	mvns	r2, r2
 80025a0:	400a      	ands	r2, r1
 80025a2:	3302      	adds	r3, #2
 80025a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2103      	movs	r1, #3
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	08d9      	lsrs	r1, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3108      	adds	r1, #8
 80025c8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	200f      	movs	r0, #15
 80025d6:	fa00 f303 	lsl.w	r3, r0, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	4019      	ands	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2103      	movs	r1, #3
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	2101      	movs	r1, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2103      	movs	r1, #3
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	401a      	ands	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	2101      	movs	r1, #1
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f af2b 	bne.w	80024a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	48001000 	.word	0x48001000
 8002670:	48001400 	.word	0x48001400
 8002674:	48001800 	.word	0x48001800
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_PWREx_GetVoltageRange+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273a:	d130      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d038      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274a:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2232      	movs	r2, #50	; 0x32
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002770:	e002      	b.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d102      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f2      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	d110      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e00f      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d007      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000
 80027d0:	20000040 	.word	0x20000040
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e3d4      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	4ba1      	ldr	r3, [pc, #644]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f4:	4b9e      	ldr	r3, [pc, #632]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80e4 	beq.w	80029d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_RCC_OscConfig+0x4a>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	f040 808b 	bne.w	8002930 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 8087 	bne.w	8002930 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002822:	4b93      	ldr	r3, [pc, #588]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3ac      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4b8c      	ldr	r3, [pc, #560]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <HAL_RCC_OscConfig+0x7c>
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	e005      	b.n	8002860 <HAL_RCC_OscConfig+0x88>
 8002854:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002860:	429a      	cmp	r2, r3
 8002862:	d923      	bls.n	80028ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fd8d 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e38d      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4a7d      	ldr	r2, [pc, #500]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	497a      	ldr	r1, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002886:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4976      	ldr	r1, [pc, #472]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e025      	b.n	80028f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ac:	4a70      	ldr	r2, [pc, #448]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028ae:	4b70      	ldr	r3, [pc, #448]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	496d      	ldr	r1, [pc, #436]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028ba:	4b6d      	ldr	r3, [pc, #436]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ca:	4969      	ldr	r1, [pc, #420]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd4d 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e34d      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f8:	f000 fc36 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 80028fc:	4601      	mov	r1, r0
 80028fe:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	4a5a      	ldr	r2, [pc, #360]	; (8002a74 <HAL_RCC_OscConfig+0x29c>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa21 f303 	lsr.w	r3, r1, r3
 8002914:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <HAL_RCC_OscConfig+0x2a0>)
 8002916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x2a4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f008 f869 	bl	800a9f4 <HAL_InitTick>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d052      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	e331      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d032      	beq.n	800299e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800293a:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002944:	f7ff fa92 	bl	8001e6c <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294c:	f7ff fa8e 	bl	8001e6c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e31a      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295e:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296a:	4a41      	ldr	r2, [pc, #260]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	493e      	ldr	r1, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4939      	ldr	r1, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e01a      	b.n	80029d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029aa:	f7ff fa5f 	bl	8001e6c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b2:	f7ff fa5b 	bl	8001e6c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e2e7      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c4:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1da>
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d074      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x21a>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d10e      	bne.n	8002a0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d064      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d160      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e2c4      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x24a>
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e01d      	b.n	8002a5e <HAL_RCC_OscConfig+0x286>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x26e>
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e00b      	b.n	8002a5e <HAL_RCC_OscConfig+0x286>
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff fa01 	bl	8001e6c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6c:	e011      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08010740 	.word	0x08010740
 8002a78:	20000040 	.word	0x20000040
 8002a7c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7ff f9f4 	bl	8001e6c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e280      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4baf      	ldr	r3, [pc, #700]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f9e4 	bl	8001e6c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff f9e0 	bl	8001e6c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e26c      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	4ba5      	ldr	r3, [pc, #660]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d0>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x310>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b99      	ldr	r3, [pc, #612]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e249      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4993      	ldr	r1, [pc, #588]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b02:	4b93      	ldr	r3, [pc, #588]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e040      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4a8c      	ldr	r2, [pc, #560]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b20:	4b8b      	ldr	r3, [pc, #556]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f99f 	bl	8001e6c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff f99b 	bl	8001e6c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e227      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	497f      	ldr	r1, [pc, #508]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b52:	4b7f      	ldr	r3, [pc, #508]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4a7a      	ldr	r2, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b68:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff f97b 	bl	8001e6c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f977 	bl	8001e6c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e203      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4a68      	ldr	r2, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002bae:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff f956 	bl	8001e6c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff f952 	bl	8001e6c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1de      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002be4:	e01b      	b.n	8002c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4a5a      	ldr	r2, [pc, #360]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f939 	bl	8001e6c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff f935 	bl	8001e6c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1c1      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a6 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c30:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4a44      	ldr	r2, [pc, #272]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_RCC_OscConfig+0x57c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d118      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <HAL_RCC_OscConfig+0x57c>)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_OscConfig+0x57c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c70:	f7ff f8fc 	bl	8001e6c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7ff f8f8 	bl	8001e6c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e184      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCC_OscConfig+0x57c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	e024      	b.n	8002cfa <HAL_RCC_OscConfig+0x522>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d110      	bne.n	8002cda <HAL_RCC_OscConfig+0x502>
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd8:	e00f      	b.n	8002cfa <HAL_RCC_OscConfig+0x522>
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7ff f8b3 	bl	8001e6c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7ff f8af 	bl	8001e6c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e139      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x578>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ed      	beq.n	8002d0a <HAL_RCC_OscConfig+0x532>
 8002d2e:	e01a      	b.n	8002d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7ff f89c 	bl	8001e6c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d36:	e00f      	b.n	8002d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7ff f898 	bl	8001e6c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d906      	bls.n	8002d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e122      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d58:	4b90      	ldr	r3, [pc, #576]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e8      	bne.n	8002d38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4a8b      	ldr	r2, [pc, #556]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8108 	beq.w	8002f92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	f040 80d0 	bne.w	8002f2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d8c:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d130      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	3b01      	subs	r3, #1
 8002dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d127      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dcc:	2a07      	cmp	r2, #7
 8002dce:	bf14      	ite	ne
 8002dd0:	2201      	movne	r2, #1
 8002dd2:	2200      	moveq	r2, #0
 8002dd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d113      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d06e      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d069      	beq.n	8002edc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e08:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b7      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e24:	4a5d      	ldr	r2, [pc, #372]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e26:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e30:	f7ff f81c 	bl	8001e6c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff f818 	bl	8001e6c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0a4      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4a:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e56:	4851      	ldr	r0, [pc, #324]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x7c8>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e72:	0212      	lsls	r2, r2, #8
 8002e74:	4311      	orrs	r1, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0552      	lsls	r2, r2, #21
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e86:	0852      	lsrs	r2, r2, #1
 8002e88:	3a01      	subs	r2, #1
 8002e8a:	0652      	lsls	r2, r2, #25
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e92:	0912      	lsrs	r2, r2, #4
 8002e94:	0452      	lsls	r2, r2, #17
 8002e96:	430a      	orrs	r2, r1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e9c:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea8:	4a3c      	ldr	r2, [pc, #240]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb4:	f7fe ffda 	bl	8001e6c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe ffd6 	bl	8001e6c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e062      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eda:	e05a      	b.n	8002f92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e059      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d152      	bne.n	8002f92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f04:	f7fe ffb2 	bl	8001e6c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe ffae 	bl	8001e6c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e03a      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x734>
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d02d      	beq.n	8002f8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f023 0303 	bic.w	r3, r3, #3
 8002f54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe ff81 	bl	8001e6c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe ff7d 	bl	8001e6c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e009      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_OscConfig+0x7c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x796>
 8002f8c:	e001      	b.n	8002f92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	f99d808c 	.word	0xf99d808c

08002fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0c8      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0207 	and.w	r2, r3, #7
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4963      	ldr	r1, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc8:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 0207 	bic.w	r2, r3, #7
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b0      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d04c      	beq.n	800308e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffc:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d121      	bne.n	800304c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e09e      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d107      	bne.n	8003024 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d115      	bne.n	800304c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e092      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800302c:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e086      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b46      	ldr	r3, [pc, #280]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e07e      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800304c:	4942      	ldr	r1, [pc, #264]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800304e:	4b42      	ldr	r3, [pc, #264]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305e:	f7fe ff05 	bl	8001e6c <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003064:	e00a      	b.n	800307c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003066:	f7fe ff01 	bl	8001e6c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e066      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307c:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 020c 	and.w	r2, r3, #12
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	429a      	cmp	r2, r3
 800308c:	d1eb      	bne.n	8003066 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309a:	492f      	ldr	r1, [pc, #188]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0207 	and.w	r2, r3, #7
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4926      	ldr	r1, [pc, #152]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 0207 	bic.w	r2, r3, #7
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0207 	and.w	r2, r3, #7
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e036      	b.n	800314a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	491b      	ldr	r1, [pc, #108]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003106:	4914      	ldr	r1, [pc, #80]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311a:	f000 f825 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800311e:	4601      	mov	r1, r0
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	fa21 f303 	lsr.w	r3, r1, r3
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f007 fc58 	bl	800a9f4 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
 8003146:	72fb      	strb	r3, [r7, #11]

  return status;
 8003148:	7afb      	ldrb	r3, [r7, #11]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40022000 	.word	0x40022000
 8003158:	40021000 	.word	0x40021000
 800315c:	08010740 	.word	0x08010740
 8003160:	20000040 	.word	0x20000040
 8003164:	2000001c 	.word	0x2000001c

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x34>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d121      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d11e      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e005      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031c4:	4a2a      	ldr	r2, [pc, #168]	; (8003270 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10d      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d102      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e004      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d133      	bne.n	800325e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d002      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0xa4>
 8003206:	2b03      	cmp	r3, #3
 8003208:	d003      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0xaa>
 800320a:	e005      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_GetSysClockFreq+0x10c>)
 800320e:	617b      	str	r3, [r7, #20]
      break;
 8003210:	e005      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_GetSysClockFreq+0x110>)
 8003214:	617b      	str	r3, [r7, #20]
      break;
 8003216:	e002      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	617b      	str	r3, [r7, #20]
      break;
 800321c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	3301      	adds	r3, #1
 800322a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	fb02 f203 	mul.w	r2, r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_GetSysClockFreq+0x104>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	3301      	adds	r3, #1
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800325e:	69bb      	ldr	r3, [r7, #24]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3724      	adds	r7, #36	; 0x24
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	08010758 	.word	0x08010758
 8003274:	00f42400 	.word	0x00f42400
 8003278:	007a1200 	.word	0x007a1200

0800327c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_GetHCLKFreq+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000040 	.word	0x20000040

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003298:	f7ff fff0 	bl	800327c <HAL_RCC_GetHCLKFreq>
 800329c:	4601      	mov	r1, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08010750 	.word	0x08010750

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032c4:	f7ff ffda 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032c8:	4601      	mov	r1, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0adb      	lsrs	r3, r3, #11
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08010750 	.word	0x08010750

080032ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCC_GetClockConfig+0x60>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003360:	d105      	bne.n	800336e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003362:	f000 f809 	bl	8003378 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003366:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336c:	621a      	str	r2, [r3, #32]
  }
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f9b6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
 80033a6:	e014      	b.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4a25      	ldr	r2, [pc, #148]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff f9a6 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d10b      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d919      	bls.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2ba0      	cmp	r3, #160	; 0xa0
 80033e4:	d902      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e6:	2302      	movs	r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e013      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e010      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d902      	bls.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f8:	2303      	movs	r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e00a      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d102      	bne.n	800340a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003404:	2302      	movs	r3, #2
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e004      	b.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d101      	bne.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003410:	2301      	movs	r3, #1
 8003412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003414:	490b      	ldr	r1, [pc, #44]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0207 	and.w	r2, r3, #7
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	429a      	cmp	r2, r3
 8003430:	d001      	beq.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	40022000 	.word	0x40022000

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003450:	2300      	movs	r3, #0
 8003452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003454:	2300      	movs	r3, #0
 8003456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d01c      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d802      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003478:	e01f      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800347a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347e:	d003      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003484:	d01c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003486:	e018      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003488:	4a85      	ldr	r2, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348a:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003492:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003494:	e015      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fab9 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a6:	e00c      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3320      	adds	r3, #32
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fba0 	bl	8003bf4 <RCCEx_PLLSAI2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b8:	e003      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	74fb      	strb	r3, [r7, #19]
      break;
 80034be:	e000      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80034c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c8:	4975      	ldr	r1, [pc, #468]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ca:	4b75      	ldr	r3, [pc, #468]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034de:	e001      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03f      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d01c      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80034fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034fe:	d802      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003504:	e01f      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800350c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003510:	d01c      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4a62      	ldr	r2, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003516:	4b62      	ldr	r3, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa73 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3320      	adds	r3, #32
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fb5a 	bl	8003bf4 <RCCEx_PLLSAI2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	74fb      	strb	r3, [r7, #19]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003554:	4952      	ldr	r1, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003556:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800356a:	e001      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a0 	beq.w	80036be <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b4:	4a3b      	ldr	r2, [pc, #236]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c0:	f7fe fc54 	bl	8001e6c <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c6:	e009      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c8:	f7fe fc50 	bl	8001e6c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	74fb      	strb	r3, [r7, #19]
        break;
 80035da:	e005      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d15c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01f      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d019      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003618:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fc0f 	bl	8001e6c <HAL_GetTick>
 800364e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003650:	e00b      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fc0b 	bl	8001e6c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d902      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	74fb      	strb	r3, [r7, #19]
            break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ec      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x264>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ac:	7c7b      	ldrb	r3, [r7, #17]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4a9e      	ldr	r2, [pc, #632]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b4:	4b9d      	ldr	r3, [pc, #628]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ca:	4998      	ldr	r1, [pc, #608]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036cc:	4b97      	ldr	r3, [pc, #604]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ec:	498f      	ldr	r1, [pc, #572]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ee:	4b8f      	ldr	r3, [pc, #572]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f023 020c 	bic.w	r2, r3, #12
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370e:	4987      	ldr	r1, [pc, #540]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003710:	4b86      	ldr	r3, [pc, #536]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003730:	497e      	ldr	r1, [pc, #504]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003732:	4b7e      	ldr	r3, [pc, #504]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003752:	4976      	ldr	r1, [pc, #472]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003754:	4b75      	ldr	r3, [pc, #468]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003774:	496d      	ldr	r1, [pc, #436]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003776:	4b6d      	ldr	r3, [pc, #436]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003796:	4965      	ldr	r1, [pc, #404]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003798:	4b64      	ldr	r3, [pc, #400]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b8:	495c      	ldr	r1, [pc, #368]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037ba:	4b5c      	ldr	r3, [pc, #368]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037da:	4954      	ldr	r1, [pc, #336]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037fc:	494b      	ldr	r1, [pc, #300]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fe:	4b4b      	ldr	r3, [pc, #300]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381e:	4943      	ldr	r1, [pc, #268]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003820:	4b42      	ldr	r3, [pc, #264]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d028      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003840:	493a      	ldr	r1, [pc, #232]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d106      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003860:	4a32      	ldr	r2, [pc, #200]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	e011      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003876:	d10c      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f8c8 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800389e:	4923      	ldr	r1, [pc, #140]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038bc:	d106      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c8:	60d3      	str	r3, [r2, #12]
 80038ca:	e011      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f899 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391a:	d109      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4a03      	ldr	r2, [pc, #12]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391e:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
 8003928:	e014      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003938:	d10c      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2101      	movs	r1, #1
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f867 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397e:	d10d      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f844 	bl	8003a14 <RCCEx_PLLSAI1_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d014      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	74bb      	strb	r3, [r7, #18]
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3320      	adds	r3, #32
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f921 	bl	8003bf4 <RCCEx_PLLSAI2_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039cc:	4910      	ldr	r1, [pc, #64]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ee:	4908      	ldr	r1, [pc, #32]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a22:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2e:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0203 	and.w	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
       ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
       ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d044      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e041      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d00c      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x6e>
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d013      	beq.n	8003a94 <RCCEx_PLLSAI1_Config+0x80>
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d120      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11d      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e01a      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a92:	e013      	b.n	8003abc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a94:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10f      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab0:	e006      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab6:	e004      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ab8:	bf00      	nop
 8003aba:	e002      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ac0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac8:	4849      	ldr	r0, [pc, #292]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d17d      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aea:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af6:	f7fe f9b9 	bl	8001e6c <HAL_GetTick>
 8003afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afc:	e009      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afe:	f7fe f9b5 	bl	8001e6c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d902      	bls.n	8003b12 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b10:	e005      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ef      	bne.n	8003afe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d160      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2a:	4831      	ldr	r0, [pc, #196]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	0912      	lsrs	r2, r2, #4
 8003b44:	0452      	lsls	r2, r2, #17
 8003b46:	430a      	orrs	r2, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	6103      	str	r3, [r0, #16]
 8003b4c:	e027      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d112      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b54:	4826      	ldr	r0, [pc, #152]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	0211      	lsls	r1, r2, #8
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6912      	ldr	r2, [r2, #16]
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0552      	lsls	r2, r2, #21
 8003b72:	430a      	orrs	r2, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	6103      	str	r3, [r0, #16]
 8003b78:	e011      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7a:	481d      	ldr	r0, [pc, #116]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6952      	ldr	r2, [r2, #20]
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	3a01      	subs	r2, #1
 8003b96:	0652      	lsls	r2, r2, #25
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe f95f 	bl	8001e6c <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb0:	e009      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb2:	f7fe f95b 	bl	8001e6c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc4:	e005      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ef      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bd8:	4905      	ldr	r1, [pc, #20]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c02:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0203 	and.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d10d      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
       ||
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c26:	4b5f      	ldr	r3, [pc, #380]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
       ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d044      	beq.n	8003cc4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e041      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d00c      	beq.n	8003c62 <RCCEx_PLLSAI2_Config+0x6e>
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d013      	beq.n	8003c74 <RCCEx_PLLSAI2_Config+0x80>
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d120      	bne.n	8003c92 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c50:	4b54      	ldr	r3, [pc, #336]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11d      	bne.n	8003c98 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c60:	e01a      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c62:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c72:	e013      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c74:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c80:	4b48      	ldr	r3, [pc, #288]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c90:	e006      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      break;
 8003c96:	e004      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c98:	bf00      	nop
 8003c9a:	e002      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ca0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca8:	483e      	ldr	r0, [pc, #248]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003caa:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d167      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cca:	4a36      	ldr	r2, [pc, #216]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fe f8c9 	bl	8001e6c <HAL_GetTick>
 8003cda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cdc:	e009      	b.n	8003cf2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cde:	f7fe f8c5 	bl	8001e6c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d902      	bls.n	8003cf2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	73fb      	strb	r3, [r7, #15]
        break;
 8003cf0:	e005      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ef      	bne.n	8003cde <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d14a      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d111      	bne.n	8003d2e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d0a:	4826      	ldr	r0, [pc, #152]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	0912      	lsrs	r2, r2, #4
 8003d24:	0452      	lsls	r2, r2, #17
 8003d26:	430a      	orrs	r2, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	6143      	str	r3, [r0, #20]
 8003d2c:	e011      	b.n	8003d52 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d2e:	481d      	ldr	r0, [pc, #116]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d30:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	0211      	lsls	r1, r2, #8
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6912      	ldr	r2, [r2, #16]
 8003d46:	0852      	lsrs	r2, r2, #1
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0652      	lsls	r2, r2, #25
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fe f885 	bl	8001e6c <HAL_GetTick>
 8003d62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d64:	e009      	b.n	8003d7a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d66:	f7fe f881 	bl	8001e6c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d902      	bls.n	8003d7a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	73fb      	strb	r3, [r7, #15]
          break;
 8003d78:	e005      	b.n	8003d86 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ef      	beq.n	8003d66 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d8c:	4905      	ldr	r1, [pc, #20]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e07a      	b.n	8003eb0 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f86f 	bl	8003eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dfa:	d902      	bls.n	8003e02 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e002      	b.n	8003e08 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e10:	d007      	beq.n	8003e22 <HAL_SPI_Init+0x7a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e1a:	d002      	beq.n	8003e22 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e32:	d903      	bls.n	8003e3c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	e002      	b.n	8003e42 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6851      	ldr	r1, [r2, #4]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6892      	ldr	r2, [r2, #8]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6912      	ldr	r2, [r2, #16]
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6952      	ldr	r2, [r2, #20]
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6992      	ldr	r2, [r2, #24]
 8003e60:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	69d2      	ldr	r2, [r2, #28]
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6a12      	ldr	r2, [r2, #32]
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6992      	ldr	r2, [r2, #24]
 8003e82:	0c12      	lsrs	r2, r2, #16
 8003e84:	f002 0104 	and.w	r1, r2, #4
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68d2      	ldr	r2, [r2, #12]
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_SPI_TransmitReceive+0x26>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e1f8      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x418>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003efa:	f7fd ffb7 	bl	8001e6c <HAL_GetTick>
 8003efe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f16:	7efb      	ldrb	r3, [r7, #27]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d00e      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x6e>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d106      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x66>
 8003f2c:	7efb      	ldrb	r3, [r7, #27]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f38:	e1ca      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x404>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x80>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x80>
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f52:	e1bd      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x404>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d003      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003faa:	d802      	bhi.n	8003fb2 <HAL_SPI_TransmitReceive+0xe6>
 8003fac:	8a3b      	ldrh	r3, [r7, #16]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d908      	bls.n	8003fc4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e007      	b.n	8003fd4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	6852      	ldr	r2, [r2, #4]
 8003fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffa:	d97c      	bls.n	80040f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SPI_TransmitReceive+0x13e>
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d169      	bne.n	80040de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800402e:	e056      	b.n	80040de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d11b      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x1aa>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d016      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x1aa>
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	2b01      	cmp	r3, #1
 800404c:	d113      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004056:	8812      	ldrh	r2, [r2, #0]
 8004058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d11c      	bne.n	80040be <HAL_SPI_TransmitReceive+0x1f2>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d016      	beq.n	80040be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	b292      	uxth	r2, r2
 800409c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ba:	2301      	movs	r3, #1
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040be:	f7fd fed5 	bl	8001e6c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d307      	bcc.n	80040de <HAL_SPI_TransmitReceive+0x212>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d003      	beq.n	80040de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040dc:	e0f8      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1a3      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x164>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d19d      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x164>
 80040f4:	e0de      	b.n	80042b4 <HAL_SPI_TransmitReceive+0x3e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x23a>
 80040fe:	8a7b      	ldrh	r3, [r7, #18]
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 80ca 	bne.w	800429a <HAL_SPI_TransmitReceive+0x3ce>
    {
      if (hspi->TxXferCount > 1U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d912      	bls.n	8004136 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b02      	subs	r3, #2
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004134:	e0b1      	b.n	800429a <HAL_SPI_TransmitReceive+0x3ce>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	e09d      	b.n	800429a <HAL_SPI_TransmitReceive+0x3ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d134      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x30a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02f      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x30a>
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d12c      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d912      	bls.n	80041ac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b02      	subs	r3, #2
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041aa:	e012      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d147      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x3a8>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d041      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x3a8>
      {
        if (hspi->RxXferCount > 1U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d923      	bls.n	8004244 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	b292      	uxth	r2, r2
 8004208:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b02      	subs	r3, #2
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d81e      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x3a4>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	e015      	b.n	8004270 <HAL_SPI_TransmitReceive+0x3a4>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	320c      	adds	r2, #12
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004274:	f7fd fdfa 	bl	8001e6c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	1ad2      	subs	r2, r2, r3
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	429a      	cmp	r2, r3
 8004282:	d303      	bcc.n	800428c <HAL_SPI_TransmitReceive+0x3c0>
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d102      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x3c6>
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_SPI_TransmitReceive+0x3ce>
      {
        errorcode = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004298:	e01a      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f af5c 	bne.w	800415e <HAL_SPI_TransmitReceive+0x292>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f47f af55 	bne.w	800415e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f8fc 	bl	80044b6 <SPI_EndRxTxTransaction>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x404>
  {
    errorcode = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3728      	adds	r7, #40	; 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042fa:	b2db      	uxtb	r3, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004318:	e04c      	b.n	80043b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d048      	beq.n	80043b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004322:	f7fd fda3 	bl	8001e6c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d202      	bcs.n	8004338 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13d      	bne.n	80043b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	6852      	ldr	r2, [r2, #4]
 8004342:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004346:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004350:	d111      	bne.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435a:	d004      	beq.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d107      	bne.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d10f      	bne.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800439e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e00f      	b.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	401a      	ands	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d1a3      	bne.n	800431a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80043ea:	e057      	b.n	800449c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043f2:	d106      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x26>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d048      	beq.n	800449c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800440a:	f7fd fd2f 	bl	8001e6c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d202      	bcs.n	8004420 <SPI_WaitFifoStateUntilTimeout+0x44>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13d      	bne.n	800449c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	6852      	ldr	r2, [r2, #4]
 800442a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800442e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004438:	d111      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0x82>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	d004      	beq.n	800444e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d107      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004466:	d10f      	bne.n	8004488 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004486:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e008      	b.n	80044ae <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d19f      	bne.n	80043ec <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af02      	add	r7, sp, #8
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff ff84 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e027      	b.n	800453a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ff07 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e014      	b.n	800453a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ff5d 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e000      	b.n	800453a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e01d      	b.n	8004590 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f006 f9a3 	bl	800a8b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 f9a7 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <HAL_TIM_Base_Stop+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	f240 4344 	movw	r3, #1092	; 0x444
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_Base_Stop+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	68d2      	ldr	r2, [r2, #12]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_TIM_Base_Start_IT+0x50>)
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d00b      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x42>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d007      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	00010007 	.word	0x00010007

08004644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0202 	mvn.w	r2, #2
 8004670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f905 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8f7 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f908 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0204 	mvn.w	r2, #4
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8db 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8cd 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8de 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0208 	mvn.w	r2, #8
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8b1 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8a3 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8b4 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0210 	mvn.w	r2, #16
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2208      	movs	r2, #8
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f887 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f879 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f88a 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0201 	mvn.w	r2, #1
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f005 fb7a 	bl	8009ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f99c 	bl	8004b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	d10e      	bne.n	8004822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d107      	bne.n	8004822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800481a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f98f 	bl	8004b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d10e      	bne.n	800484e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d107      	bne.n	800484e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f838 	bl	80048be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b20      	cmp	r3, #32
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0220 	mvn.w	r2, #32
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f94f 	bl	8004b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00f      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <TIM_Base_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01f      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d01b      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <TIM_Base_SetConfig+0x118>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d017      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00f      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <TIM_Base_SetConfig+0x128>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a11      	ldr	r2, [pc, #68]	; (80049fc <TIM_Base_SetConfig+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0f      	ldr	r2, [pc, #60]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e068      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01d      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40014000 	.word	0x40014000

08004b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e040      	b.n	8004be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f005 fef8 	bl	800a96c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8c0 	bl	8004d18 <UART_SetConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fc18 	bl	80053e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fc9f 	bl	8005524 <UART_CheckIdleState>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 8081 	bne.w	8004d0c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_UART_Transmit+0x26>
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e079      	b.n	8004d0e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x38>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e072      	b.n	8004d0e <HAL_UART_Transmit+0x11e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2221      	movs	r2, #33	; 0x21
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fd f916 	bl	8001e6c <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d108      	bne.n	8004c6e <HAL_UART_Transmit+0x7e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e003      	b.n	8004c76 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004c7e:	e02d      	b.n	8004cdc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2180      	movs	r1, #128	; 0x80
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fc8f 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e039      	b.n	8004d0e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	8812      	ldrh	r2, [r2, #0]
 8004ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cac:	b292      	uxth	r2, r2
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e008      	b.n	8004cca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1cb      	bne.n	8004c80 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2140      	movs	r1, #64	; 0x40
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fc5b 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e005      	b.n	8004d0e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d1c:	b08a      	sub	sp, #40	; 0x28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	4bb7      	ldr	r3, [pc, #732]	; (8005030 <UART_SetConfig+0x318>)
 8004d52:	400b      	ands	r3, r1
 8004d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6852      	ldr	r2, [r2, #4]
 8004d64:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68d2      	ldr	r2, [r2, #12]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4aae      	ldr	r2, [pc, #696]	; (8005034 <UART_SetConfig+0x31c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	4313      	orrs	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4aa5      	ldr	r2, [pc, #660]	; (8005038 <UART_SetConfig+0x320>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d126      	bne.n	8004df6 <UART_SetConfig+0xde>
 8004da8:	4ba4      	ldr	r3, [pc, #656]	; (800503c <UART_SetConfig+0x324>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d81a      	bhi.n	8004dec <UART_SetConfig+0xd4>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <UART_SetConfig+0xa4>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004ddd 	.word	0x08004ddd
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004de5 	.word	0x08004de5
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e105      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e101      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e0fd      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004de4:	2308      	movs	r3, #8
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e0f9      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004dec:	2310      	movs	r3, #16
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	bf00      	nop
 8004df4:	e0f4      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a91      	ldr	r2, [pc, #580]	; (8005040 <UART_SetConfig+0x328>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d138      	bne.n	8004e72 <UART_SetConfig+0x15a>
 8004e00:	4b8e      	ldr	r3, [pc, #568]	; (800503c <UART_SetConfig+0x324>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d82c      	bhi.n	8004e68 <UART_SetConfig+0x150>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0xfc>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	08004e69 	.word	0x08004e69
 8004e20:	08004e69 	.word	0x08004e69
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e69 	.word	0x08004e69
 8004e2c:	08004e69 	.word	0x08004e69
 8004e30:	08004e69 	.word	0x08004e69
 8004e34:	08004e51 	.word	0x08004e51
 8004e38:	08004e69 	.word	0x08004e69
 8004e3c:	08004e69 	.word	0x08004e69
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e0c7      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e0c3      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e0bf      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004e60:	2308      	movs	r3, #8
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e0bb      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	bf00      	nop
 8004e70:	e0b6      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a73      	ldr	r2, [pc, #460]	; (8005044 <UART_SetConfig+0x32c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <UART_SetConfig+0x1b0>
 8004e7c:	4b6f      	ldr	r3, [pc, #444]	; (800503c <UART_SetConfig+0x324>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d011      	beq.n	8004eae <UART_SetConfig+0x196>
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d802      	bhi.n	8004e94 <UART_SetConfig+0x17c>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <UART_SetConfig+0x186>
 8004e92:	e014      	b.n	8004ebe <UART_SetConfig+0x1a6>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d006      	beq.n	8004ea6 <UART_SetConfig+0x18e>
 8004e98:	2b30      	cmp	r3, #48	; 0x30
 8004e9a:	d00c      	beq.n	8004eb6 <UART_SetConfig+0x19e>
 8004e9c:	e00f      	b.n	8004ebe <UART_SetConfig+0x1a6>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e09c      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e098      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb4:	e094      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebc:	e090      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec4:	bf00      	nop
 8004ec6:	e08b      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a5e      	ldr	r2, [pc, #376]	; (8005048 <UART_SetConfig+0x330>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d125      	bne.n	8004f1e <UART_SetConfig+0x206>
 8004ed2:	4b5a      	ldr	r3, [pc, #360]	; (800503c <UART_SetConfig+0x324>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d011      	beq.n	8004f04 <UART_SetConfig+0x1ec>
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d802      	bhi.n	8004eea <UART_SetConfig+0x1d2>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <UART_SetConfig+0x1dc>
 8004ee8:	e014      	b.n	8004f14 <UART_SetConfig+0x1fc>
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d006      	beq.n	8004efc <UART_SetConfig+0x1e4>
 8004eee:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef0:	d00c      	beq.n	8004f0c <UART_SetConfig+0x1f4>
 8004ef2:	e00f      	b.n	8004f14 <UART_SetConfig+0x1fc>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e071      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004efc:	2302      	movs	r3, #2
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e06d      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f04:	2304      	movs	r3, #4
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e069      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e065      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f14:	2310      	movs	r3, #16
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	bf00      	nop
 8004f1c:	e060      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a4a      	ldr	r2, [pc, #296]	; (800504c <UART_SetConfig+0x334>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d129      	bne.n	8004f7c <UART_SetConfig+0x264>
 8004f28:	4b44      	ldr	r3, [pc, #272]	; (800503c <UART_SetConfig+0x324>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f36:	d014      	beq.n	8004f62 <UART_SetConfig+0x24a>
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3c:	d802      	bhi.n	8004f44 <UART_SetConfig+0x22c>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <UART_SetConfig+0x23a>
 8004f42:	e016      	b.n	8004f72 <UART_SetConfig+0x25a>
 8004f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f48:	d007      	beq.n	8004f5a <UART_SetConfig+0x242>
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d00c      	beq.n	8004f6a <UART_SetConfig+0x252>
 8004f50:	e00f      	b.n	8004f72 <UART_SetConfig+0x25a>
 8004f52:	2300      	movs	r3, #0
 8004f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f58:	e042      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f60:	e03e      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f62:	2304      	movs	r3, #4
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f68:	e03a      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f70:	e036      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f72:	2310      	movs	r3, #16
 8004f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f78:	bf00      	nop
 8004f7a:	e031      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2c      	ldr	r2, [pc, #176]	; (8005034 <UART_SetConfig+0x31c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d129      	bne.n	8004fda <UART_SetConfig+0x2c2>
 8004f86:	4b2d      	ldr	r3, [pc, #180]	; (800503c <UART_SetConfig+0x324>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d014      	beq.n	8004fc0 <UART_SetConfig+0x2a8>
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d802      	bhi.n	8004fa2 <UART_SetConfig+0x28a>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <UART_SetConfig+0x298>
 8004fa0:	e016      	b.n	8004fd0 <UART_SetConfig+0x2b8>
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	d007      	beq.n	8004fb8 <UART_SetConfig+0x2a0>
 8004fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fac:	d00c      	beq.n	8004fc8 <UART_SetConfig+0x2b0>
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x2b8>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e013      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc6:	e00b      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e007      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <UART_SetConfig+0x2c8>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <UART_SetConfig+0x31c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f040 80f1 	bne.w	80051ce <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d837      	bhi.n	8005064 <UART_SetConfig+0x34c>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x2e4>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005065 	.word	0x08005065
 8005004:	08005029 	.word	0x08005029
 8005008:	08005065 	.word	0x08005065
 800500c:	08005055 	.word	0x08005055
 8005010:	08005065 	.word	0x08005065
 8005014:	08005065 	.word	0x08005065
 8005018:	08005065 	.word	0x08005065
 800501c:	0800505d 	.word	0x0800505d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe f938 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8005024:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005026:	e020      	b.n	800506a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <UART_SetConfig+0x338>)
 800502a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800502c:	e01d      	b.n	800506a <UART_SetConfig+0x352>
 800502e:	bf00      	nop
 8005030:	efff69f3 	.word	0xefff69f3
 8005034:	40008000 	.word	0x40008000
 8005038:	40013800 	.word	0x40013800
 800503c:	40021000 	.word	0x40021000
 8005040:	40004400 	.word	0x40004400
 8005044:	40004800 	.word	0x40004800
 8005048:	40004c00 	.word	0x40004c00
 800504c:	40005000 	.word	0x40005000
 8005050:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005054:	f7fe f888 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8005058:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800505a:	e006      	b.n	800506a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800505c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005060:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005062:	e002      	b.n	800506a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	76fb      	strb	r3, [r7, #27]
        break;
 8005068:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 81ab 	beq.w	80053c8 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	441a      	add	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	429a      	cmp	r2, r3
 8005080:	d805      	bhi.n	800508e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	429a      	cmp	r2, r3
 800508c:	d202      	bcs.n	8005094 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e199      	b.n	80053c8 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 8005094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005098:	2b08      	cmp	r3, #8
 800509a:	f200 8085 	bhi.w	80051a8 <UART_SetConfig+0x490>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0x38c>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080051a9 	.word	0x080051a9
 80050ac:	0800510b 	.word	0x0800510b
 80050b0:	080051a9 	.word	0x080051a9
 80050b4:	0800513f 	.word	0x0800513f
 80050b8:	080051a9 	.word	0x080051a9
 80050bc:	080051a9 	.word	0x080051a9
 80050c0:	080051a9 	.word	0x080051a9
 80050c4:	0800517f 	.word	0x0800517f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe f8e4 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 80050cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80050d8:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80050dc:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	eb18 0003 	adds.w	r0, r8, r3
 80050ee:	eb49 0104 	adc.w	r1, r9, r4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f04f 0400 	mov.w	r4, #0
 80050fa:	461a      	mov	r2, r3
 80050fc:	4623      	mov	r3, r4
 80050fe:	f7fb fd7f 	bl	8000c00 <__aeabi_uldivmod>
 8005102:	4603      	mov	r3, r0
 8005104:	460c      	mov	r4, r1
 8005106:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005108:	e051      	b.n	80051ae <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	f04f 0400 	mov.w	r4, #0
 8005114:	49aa      	ldr	r1, [pc, #680]	; (80053c0 <UART_SetConfig+0x6a8>)
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	eb13 0801 	adds.w	r8, r3, r1
 800511e:	eb44 0902 	adc.w	r9, r4, r2
 8005122:	4640      	mov	r0, r8
 8005124:	4649      	mov	r1, r9
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	461a      	mov	r2, r3
 8005130:	4623      	mov	r3, r4
 8005132:	f7fb fd65 	bl	8000c00 <__aeabi_uldivmod>
 8005136:	4603      	mov	r3, r0
 8005138:	460c      	mov	r4, r1
 800513a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800513c:	e037      	b.n	80051ae <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe f813 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8005142:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	021d      	lsls	r5, r3, #8
 800514e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005152:	0214      	lsls	r4, r2, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	461a      	mov	r2, r3
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	18a0      	adds	r0, r4, r2
 8005162:	eb45 0103 	adc.w	r1, r5, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	461a      	mov	r2, r3
 8005170:	4623      	mov	r3, r4
 8005172:	f7fb fd45 	bl	8000c00 <__aeabi_uldivmod>
 8005176:	4603      	mov	r3, r0
 8005178:	460c      	mov	r4, r1
 800517a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800517c:	e017      	b.n	80051ae <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800518c:	f144 0100 	adc.w	r1, r4, #0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	461a      	mov	r2, r3
 800519a:	4623      	mov	r3, r4
 800519c:	f7fb fd30 	bl	8000c00 <__aeabi_uldivmod>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80051a6:	e002      	b.n	80051ae <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	76fb      	strb	r3, [r7, #27]
            break;
 80051ac:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d308      	bcc.n	80051c8 <UART_SetConfig+0x4b0>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051bc:	d204      	bcs.n	80051c8 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	e0ff      	b.n	80053c8 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	e0fc      	b.n	80053c8 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d6:	f040 8083 	bne.w	80052e0 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 80051da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d85e      	bhi.n	80052a0 <UART_SetConfig+0x588>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x4d0>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	0800522d 	.word	0x0800522d
 80051f0:	0800524d 	.word	0x0800524d
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	08005269 	.word	0x08005269
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052a1 	.word	0x080052a1
 8005208:	08005289 	.word	0x08005289
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe f842 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8005210:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	005a      	lsls	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	b29b      	uxth	r3, r3
 8005228:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800522a:	e03c      	b.n	80052a6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800522c:	f7fe f848 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 8005230:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800524a:	e02c      	b.n	80052a6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005256:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005266:	e01e      	b.n	80052a6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005268:	f7fd ff7e 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800526c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	005a      	lsls	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	441a      	add	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005286:	e00e      	b.n	80052a6 <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800529e:	e002      	b.n	80052a6 <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	76fb      	strb	r3, [r7, #27]
        break;
 80052a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b0f      	cmp	r3, #15
 80052aa:	d916      	bls.n	80052da <UART_SetConfig+0x5c2>
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d212      	bcs.n	80052da <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f023 030f 	bic.w	r3, r3, #15
 80052bc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	89fa      	ldrh	r2, [r7, #14]
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	e076      	b.n	80053c8 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	76fb      	strb	r3, [r7, #27]
 80052de:	e073      	b.n	80053c8 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 80052e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d85c      	bhi.n	80053a2 <UART_SetConfig+0x68a>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x5d8>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005315 	.word	0x08005315
 80052f4:	08005333 	.word	0x08005333
 80052f8:	08005351 	.word	0x08005351
 80052fc:	080053a3 	.word	0x080053a3
 8005300:	0800536d 	.word	0x0800536d
 8005304:	080053a3 	.word	0x080053a3
 8005308:	080053a3 	.word	0x080053a3
 800530c:	080053a3 	.word	0x080053a3
 8005310:	0800538b 	.word	0x0800538b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fd ffbe 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8005318:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085a      	lsrs	r2, r3, #1
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	b29b      	uxth	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005330:	e03a      	b.n	80053a8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005332:	f7fd ffc5 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
 8005336:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	085a      	lsrs	r2, r3, #1
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	441a      	add	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	b29b      	uxth	r3, r3
 800534c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800534e:	e02b      	b.n	80053a8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800535a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6852      	ldr	r2, [r2, #4]
 8005362:	fbb3 f3f2 	udiv	r3, r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800536a:	e01d      	b.n	80053a8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536c:	f7fd fefc 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8005370:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085a      	lsrs	r2, r3, #1
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	441a      	add	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	b29b      	uxth	r3, r3
 8005386:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005388:	e00e      	b.n	80053a8 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80053a0:	e002      	b.n	80053a8 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	76fb      	strb	r3, [r7, #27]
        break;
 80053a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d90a      	bls.n	80053c4 <UART_SetConfig+0x6ac>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d206      	bcs.n	80053c4 <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e003      	b.n	80053c8 <UART_SetConfig+0x6b0>
 80053c0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80053d4:	7efb      	ldrb	r3, [r7, #27]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	; 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080053e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	6852      	ldr	r2, [r2, #4]
 80053fe:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6852      	ldr	r2, [r2, #4]
 8005420:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	6852      	ldr	r2, [r2, #4]
 8005442:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800548e:	430a      	orrs	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	6892      	ldr	r2, [r2, #8]
 80054a8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054b0:	430a      	orrs	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01a      	beq.n	80054f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d10a      	bne.n	80054f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	6852      	ldr	r2, [r2, #4]
 80054ea:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
  }
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005532:	f7fc fc9b 	bl	8001e6c <HAL_GetTick>
 8005536:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b08      	cmp	r3, #8
 8005544:	d10e      	bne.n	8005564 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005546:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f82a 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e020      	b.n	80055a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d10e      	bne.n	8005590 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f814 	bl	80055ae <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e00a      	b.n	80055a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055be:	e05d      	b.n	800567c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d059      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c8:	f7fc fc50 	bl	8001e6c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	1ad2      	subs	r2, r2, r3
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d802      	bhi.n	80055de <UART_WaitOnFlagUntilTimeout+0x30>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11b      	bne.n	8005616 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	6892      	ldr	r2, [r2, #8]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e042      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02b      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d123      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800563c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800564c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e00f      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	401a      	ands	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	429a      	cmp	r2, r3
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	429a      	cmp	r2, r3
 8005698:	d092      	beq.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	71fb      	strb	r3, [r7, #7]
 80056b0:	460b      	mov	r3, r1
 80056b2:	71bb      	strb	r3, [r7, #6]
 80056b4:	4613      	mov	r3, r2
 80056b6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80056bc:	79bb      	ldrb	r3, [r7, #6]
 80056be:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80056c0:	797b      	ldrb	r3, [r7, #5]
 80056c2:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80056c4:	f107 030c 	add.w	r3, r7, #12
 80056c8:	2207      	movs	r2, #7
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f006 fcd0 	bl	800c072 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80056d2:	f107 0318 	add.w	r3, r7, #24
 80056d6:	2218      	movs	r2, #24
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f006 fcc9 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80056e0:	233f      	movs	r3, #63	; 0x3f
 80056e2:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80056e4:	238a      	movs	r3, #138	; 0x8a
 80056e6:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80056ee:	2303      	movs	r3, #3
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80056f8:	2307      	movs	r3, #7
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f000 ffe8 	bl	80066d8 <hci_send_req>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	da01      	bge.n	8005712 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800570e:	23ff      	movs	r3, #255	; 0xff
 8005710:	e014      	b.n	800573c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8005712:	7b3b      	ldrb	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8005718:	7b3b      	ldrb	r3, [r7, #12]
 800571a:	e00f      	b.n	800573c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800571c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005720:	b29a      	uxth	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8005726:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800572a:	b29a      	uxth	r2, r3
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005730:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8005734:	b29a      	uxth	r2, r3
 8005736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005738:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	; 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af00      	add	r7, sp, #0
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	2207      	movs	r2, #7
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f006 fc86 	bl	800c072 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005766:	f107 0320 	add.w	r3, r7, #32
 800576a:	2218      	movs	r2, #24
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f006 fc7f 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005774:	233f      	movs	r3, #63	; 0x3f
 8005776:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8005778:	238a      	movs	r3, #138	; 0x8a
 800577a:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800577c:	f107 031c 	add.w	r3, r7, #28
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8005782:	2301      	movs	r3, #1
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800578c:	2307      	movs	r3, #7
 800578e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005790:	f107 0320 	add.w	r3, r7, #32
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff9e 	bl	80066d8 <hci_send_req>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da01      	bge.n	80057a6 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80057a2:	23ff      	movs	r3, #255	; 0xff
 80057a4:	e014      	b.n	80057d0 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80057a6:	7d3b      	ldrb	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80057ac:	7d3b      	ldrb	r3, [r7, #20]
 80057ae:	e00f      	b.n	80057d0 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80057b0:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80057ba:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80057c4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3738      	adds	r7, #56	; 0x38
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b095      	sub	sp, #84	; 0x54
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	71fb      	strb	r3, [r7, #7]
 80057ea:	4603      	mov	r3, r0
 80057ec:	80bb      	strh	r3, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	807b      	strh	r3, [r7, #2]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80057fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005800:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005804:	4413      	add	r3, r2
 8005806:	330e      	adds	r3, #14
 8005808:	2b28      	cmp	r3, #40	; 0x28
 800580a:	d901      	bls.n	8005810 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800580c:	2342      	movs	r3, #66	; 0x42
 800580e:	e0ce      	b.n	80059ae <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8005810:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005814:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005818:	4413      	add	r3, r2
 800581a:	79fa      	ldrb	r2, [r7, #7]
 800581c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005820:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005824:	3301      	adds	r3, #1
 8005826:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800582e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005832:	f107 0208 	add.w	r2, r7, #8
 8005836:	4413      	add	r3, r2
 8005838:	88ba      	ldrh	r2, [r7, #4]
 800583a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800583c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005840:	3302      	adds	r3, #2
 8005842:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800584a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800584e:	f107 0208 	add.w	r2, r7, #8
 8005852:	4413      	add	r3, r2
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005858:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800585c:	3302      	adds	r3, #2
 800585e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8005862:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005866:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800586a:	4413      	add	r3, r2
 800586c:	79ba      	ldrb	r2, [r7, #6]
 800586e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005872:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005876:	3301      	adds	r3, #1
 8005878:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800587c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005880:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005884:	4413      	add	r3, r2
 8005886:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800588a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800588e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005892:	3301      	adds	r3, #1
 8005894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8005898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800589c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80058a0:	4413      	add	r3, r2
 80058a2:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80058a6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80058aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058ae:	3301      	adds	r3, #1
 80058b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80058b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058b8:	f107 0208 	add.w	r2, r7, #8
 80058bc:	4413      	add	r3, r2
 80058be:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80058c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058c4:	4618      	mov	r0, r3
 80058c6:	f006 fbc9 	bl	800c05c <memcpy>
  indx +=  LocalNameLen;
 80058ca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80058ce:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80058d2:	4413      	add	r3, r2
 80058d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80058d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80058e0:	4413      	add	r3, r2
 80058e2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80058e6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80058ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058ee:	3301      	adds	r3, #1
 80058f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80058f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058f8:	f107 0208 	add.w	r2, r7, #8
 80058fc:	4413      	add	r3, r2
 80058fe:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8005902:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005904:	4618      	mov	r0, r3
 8005906:	f006 fba9 	bl	800c05c <memcpy>
  indx +=  ServiceUUIDLen;  
 800590a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800590e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005912:	4413      	add	r3, r2
 8005914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005918:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800591c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005924:	f107 0208 	add.w	r2, r7, #8
 8005928:	4413      	add	r3, r2
 800592a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800592e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005930:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005934:	3302      	adds	r3, #2
 8005936:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800593a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800593e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005946:	f107 0208 	add.w	r2, r7, #8
 800594a:	4413      	add	r3, r2
 800594c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005950:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8005952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005956:	3302      	adds	r3, #2
 8005958:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800595c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005960:	2218      	movs	r2, #24
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f006 fb84 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800596a:	233f      	movs	r3, #63	; 0x3f
 800596c:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800596e:	2383      	movs	r3, #131	; 0x83
 8005970:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8005972:	f107 0308 	add.w	r3, r7, #8
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8005978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800597c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800597e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8005984:	2301      	movs	r3, #1
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8005988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fea2 	bl	80066d8 <hci_send_req>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	da01      	bge.n	800599e <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800599a:	23ff      	movs	r3, #255	; 0xff
 800599c:	e007      	b.n	80059ae <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800599e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <aci_gap_set_discoverable+0x1d4>
    return status;
 80059a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059aa:	e000      	b.n	80059ae <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3754      	adds	r7, #84	; 0x54
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}

080059b6 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80059b6:	b590      	push	{r4, r7, lr}
 80059b8:	b091      	sub	sp, #68	; 0x44
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	603a      	str	r2, [r7, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	4603      	mov	r3, r0
 80059c2:	71fb      	strb	r3, [r7, #7]
 80059c4:	460b      	mov	r3, r1
 80059c6:	71bb      	strb	r3, [r7, #6]
 80059c8:	4613      	mov	r3, r2
 80059ca:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80059d0:	79bb      	ldrb	r3, [r7, #6]
 80059d2:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	f107 030e 	add.w	r3, r7, #14
 80059da:	6814      	ldr	r4, [r2, #0]
 80059dc:	6850      	ldr	r0, [r2, #4]
 80059de:	6891      	ldr	r1, [r2, #8]
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	601c      	str	r4, [r3, #0]
 80059e4:	6058      	str	r0, [r3, #4]
 80059e6:	6099      	str	r1, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 80059ea:	797b      	ldrb	r3, [r7, #5]
 80059ec:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80059ee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80059f2:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80059f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80059f8:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80059fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fe:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8005a02:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005a06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a0e:	2218      	movs	r2, #24
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f006 fb2d 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005a18:	233f      	movs	r3, #63	; 0x3f
 8005a1a:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8005a1c:	2386      	movs	r3, #134	; 0x86
 8005a1e:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8005a26:	231a      	movs	r3, #26
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005a2a:	f107 030b 	add.w	r3, r7, #11
 8005a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8005a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe4c 	bl	80066d8 <hci_send_req>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da01      	bge.n	8005a4a <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 8005a46:	23ff      	movs	r3, #255	; 0xff
 8005a48:	e005      	b.n	8005a56 <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <aci_gap_set_auth_requirement+0x9e>
    return status;
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	e000      	b.n	8005a56 <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3744      	adds	r7, #68	; 0x44
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd90      	pop	{r4, r7, pc}

08005a5e <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b092      	sub	sp, #72	; 0x48
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	4603      	mov	r3, r0
 8005a68:	81fb      	strh	r3, [r7, #14]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	81bb      	strh	r3, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8005a72:	89fb      	ldrh	r3, [r7, #14]
 8005a74:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8005a76:	89bb      	ldrh	r3, [r7, #12]
 8005a78:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	f107 031d 	add.w	r3, r7, #29
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	6019      	str	r1, [r3, #0]
 8005a88:	8892      	ldrh	r2, [r2, #4]
 8005a8a:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8005a8c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8005a94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a98:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8005a9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8005aa0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005aa4:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8005aa6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005aaa:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8005aac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ab0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8005ab2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005abc:	2218      	movs	r2, #24
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f006 fad6 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ac6:	233f      	movs	r3, #63	; 0x3f
 8005ac8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8005aca:	239c      	movs	r3, #156	; 0x9c
 8005acc:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8005ace:	f107 0318 	add.w	r3, r7, #24
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 8005ad4:	2318      	movs	r3, #24
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8005ad8:	230f      	movs	r3, #15
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005adc:	f107 0317 	add.w	r3, r7, #23
 8005ae0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fdf3 	bl	80066d8 <hci_send_req>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da01      	bge.n	8005afc <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8005af8:	23ff      	movs	r3, #255	; 0xff
 8005afa:	e000      	b.n	8005afe <aci_gap_create_connection+0xa0>

  return status;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3748      	adds	r7, #72	; 0x48
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b088      	sub	sp, #32
 8005b0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	2218      	movs	r2, #24
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f006 faac 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005b1a:	233f      	movs	r3, #63	; 0x3f
 8005b1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005b1e:	f240 1301 	movw	r3, #257	; 0x101
 8005b22:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b24:	1dfb      	adds	r3, r7, #7
 8005b26:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005b2c:	f107 0308 	add.w	r3, r7, #8
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fdd0 	bl	80066d8 <hci_send_req>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da01      	bge.n	8005b42 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8005b3e:	23ff      	movs	r3, #255	; 0xff
 8005b40:	e000      	b.n	8005b44 <aci_gatt_init+0x3e>

  return status;
 8005b42:	79fb      	ldrb	r3, [r7, #7]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b090      	sub	sp, #64	; 0x40
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6039      	str	r1, [r7, #0]
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	71fb      	strb	r3, [r7, #7]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	71bb      	strb	r3, [r7, #6]
 8005b60:	4613      	mov	r3, r2
 8005b62:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8005b6a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005b72:	4413      	add	r3, r2
 8005b74:	79fa      	ldrb	r2, [r7, #7]
 8005b76:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005b7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d103      	bne.n	8005b92 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005b90:	e002      	b.n	8005b98 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8005b92:	2310      	movs	r3, #16
 8005b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005b98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b9c:	f107 020c 	add.w	r2, r7, #12
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f006 fa57 	bl	800c05c <memcpy>
  indx +=  uuid_len;
 8005bae:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005bb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8005bbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bc0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005bc4:	4413      	add	r3, r2
 8005bc6:	79ba      	ldrb	r2, [r7, #6]
 8005bc8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005bcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8005bd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005bde:	4413      	add	r3, r2
 8005be0:	797a      	ldrb	r2, [r7, #5]
 8005be2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005be6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bea:	3301      	adds	r3, #1
 8005bec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005bf0:	f107 0320 	add.w	r3, r7, #32
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f006 fa3a 	bl	800c072 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c02:	2218      	movs	r2, #24
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f006 fa33 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005c0c:	233f      	movs	r3, #63	; 0x3f
 8005c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8005c10:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005c14:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8005c1c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c20:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8005c22:	f107 0320 	add.w	r3, r7, #32
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fd50 	bl	80066d8 <hci_send_req>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da01      	bge.n	8005c42 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005c3e:	23ff      	movs	r3, #255	; 0xff
 8005c40:	e00c      	b.n	8005c5c <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8005c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <aci_gatt_add_serv+0x104>
    return resp.status;
 8005c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c4e:	e005      	b.n	8005c5c <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005c50:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	801a      	strh	r2, [r3, #0]

  return 0;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3740      	adds	r7, #64	; 0x40
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b092      	sub	sp, #72	; 0x48
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	603a      	str	r2, [r7, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80fb      	strh	r3, [r7, #6]
 8005c72:	460b      	mov	r3, r1
 8005c74:	717b      	strb	r3, [r7, #5]
 8005c76:	4613      	mov	r3, r2
 8005c78:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005c84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005c88:	f107 020c 	add.w	r2, r7, #12
 8005c8c:	4413      	add	r3, r2
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005c92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005c96:	3302      	adds	r3, #2
 8005c98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8005c9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ca0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ca4:	4413      	add	r3, r2
 8005ca6:	797a      	ldrb	r2, [r7, #5]
 8005ca8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005cac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005cb6:	797b      	ldrb	r3, [r7, #5]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d103      	bne.n	8005cc4 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005cc2:	e002      	b.n	8005cca <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005cca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cce:	f107 020c 	add.w	r2, r7, #12
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f006 f9be 	bl	800c05c <memcpy>
  indx +=  uuid_len;
 8005ce0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005ce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce8:	4413      	add	r3, r2
 8005cea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8005cee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005cf6:	4413      	add	r3, r2
 8005cf8:	793a      	ldrb	r2, [r7, #4]
 8005cfa:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005cfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d02:	3301      	adds	r3, #1
 8005d04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8005d08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d10:	4413      	add	r3, r2
 8005d12:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005d16:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005d1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8005d24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8005d32:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005d36:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8005d40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d48:	4413      	add	r3, r2
 8005d4a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8005d4e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005d52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d56:	3301      	adds	r3, #1
 8005d58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8005d5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d64:	4413      	add	r3, r2
 8005d66:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8005d6a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005d6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d72:	3301      	adds	r3, #1
 8005d74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8005d78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d80:	4413      	add	r3, r2
 8005d82:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005d86:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005d8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d98:	2203      	movs	r2, #3
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f006 f968 	bl	800c072 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005da6:	2218      	movs	r2, #24
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f006 f961 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005db0:	233f      	movs	r3, #63	; 0x3f
 8005db2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005db4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005db8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8005dc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8005dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8005dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fc7e 	bl	80066d8 <hci_send_req>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da01      	bge.n	8005de6 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8005de2:	23ff      	movs	r3, #255	; 0xff
 8005de4:	e00c      	b.n	8005e00 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8005de6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <aci_gatt_add_char+0x190>
    return resp.status;
 8005dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005df2:	e005      	b.n	8005e00 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8005df4:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfc:	801a      	strh	r2, [r3, #0]

  return 0;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3748      	adds	r7, #72	; 0x48
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b0ab      	sub	sp, #172	; 0xac
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	80fb      	strh	r3, [r7, #6]
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80bb      	strh	r3, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
 8005e22:	4613      	mov	r3, r2
 8005e24:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005e2c:	78bb      	ldrb	r3, [r7, #2]
 8005e2e:	3306      	adds	r3, #6
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	dd01      	ble.n	8005e38 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8005e34:	2342      	movs	r3, #66	; 0x42
 8005e36:	e076      	b.n	8005f26 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005e3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e40:	f107 0208 	add.w	r2, r7, #8
 8005e44:	4413      	add	r3, r2
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005e4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e4e:	3302      	adds	r3, #2
 8005e50:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8005e54:	88bb      	ldrh	r3, [r7, #4]
 8005e56:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005e58:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e5c:	f107 0208 	add.w	r2, r7, #8
 8005e60:	4413      	add	r3, r2
 8005e62:	88ba      	ldrh	r2, [r7, #4]
 8005e64:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005e66:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e6a:	3302      	adds	r3, #2
 8005e6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8005e70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e78:	4413      	add	r3, r2
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005e80:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e84:	3301      	adds	r3, #1
 8005e86:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8005e8a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e92:	4413      	add	r3, r2
 8005e94:	78ba      	ldrb	r2, [r7, #2]
 8005e96:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005e9a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005ea4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005ea8:	f107 0208 	add.w	r2, r7, #8
 8005eac:	4413      	add	r3, r2
 8005eae:	78ba      	ldrb	r2, [r7, #2]
 8005eb0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f006 f8d1 	bl	800c05c <memcpy>
  indx +=  charValueLen;
 8005eba:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8005ebe:	78bb      	ldrb	r3, [r7, #2]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ec6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005eca:	2218      	movs	r2, #24
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f006 f8cf 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ed4:	233f      	movs	r3, #63	; 0x3f
 8005ed6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005eda:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005ede:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8005eea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005eee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8005ef2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8005ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8005f00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fbe6 	bl	80066d8 <hci_send_req>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da01      	bge.n	8005f16 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 8005f12:	23ff      	movs	r3, #255	; 0xff
 8005f14:	e007      	b.n	8005f26 <aci_gatt_update_char_value+0x11e>

  if (status) {
 8005f16:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <aci_gatt_update_char_value+0x11c>
    return status;
 8005f1e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005f22:	e000      	b.n	8005f26 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	37ac      	adds	r7, #172	; 0xac
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}

08005f2e <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8005f2e:	b590      	push	{r4, r7, lr}
 8005f30:	b091      	sub	sp, #68	; 0x44
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4604      	mov	r4, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	80fb      	strh	r3, [r7, #6]
 8005f40:	4603      	mov	r3, r0
 8005f42:	80bb      	strh	r3, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	807b      	strh	r3, [r7, #2]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8005f56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f5a:	f107 020c 	add.w	r2, r7, #12
 8005f5e:	4413      	add	r3, r2
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f68:	3302      	adds	r3, #2
 8005f6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8005f6e:	88bb      	ldrh	r3, [r7, #4]
 8005f70:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8005f72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f76:	f107 020c 	add.w	r2, r7, #12
 8005f7a:	4413      	add	r3, r2
 8005f7c:	88ba      	ldrh	r2, [r7, #4]
 8005f7e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f80:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f84:	3302      	adds	r3, #2
 8005f86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 8005f8a:	887b      	ldrh	r3, [r7, #2]
 8005f8c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8005f8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f92:	f107 020c 	add.w	r2, r7, #12
 8005f96:	4413      	add	r3, r2
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f9c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8005fa6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005faa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005fae:	4413      	add	r3, r2
 8005fb0:	787a      	ldrb	r2, [r7, #1]
 8005fb2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005fb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 8005fc0:	787b      	ldrb	r3, [r7, #1]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d103      	bne.n	8005fce <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005fcc:	e002      	b.n	8005fd4 <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 8005fce:	2310      	movs	r3, #16
 8005fd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005fd4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005fd8:	f107 020c 	add.w	r2, r7, #12
 8005fdc:	4413      	add	r3, r2
 8005fde:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005fe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f006 f839 	bl	800c05c <memcpy>
  indx +=  uuid_len;
 8005fea:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005fee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffc:	2218      	movs	r2, #24
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f006 f836 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006006:	233f      	movs	r3, #63	; 0x3f
 8006008:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800600a:	f44f 738b 	mov.w	r3, #278	; 0x116
 800600e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8006010:	f107 030c 	add.w	r3, r7, #12
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8006016:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800601a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 800601c:	230f      	movs	r3, #15
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8006020:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800602a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fb51 	bl	80066d8 <hci_send_req>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	da01      	bge.n	8006040 <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 800603c:	23ff      	movs	r3, #255	; 0xff
 800603e:	e001      	b.n	8006044 <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 8006040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006044:	4618      	mov	r0, r3
 8006046:	3744      	adds	r7, #68	; 0x44
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b0ac      	sub	sp, #176	; 0xb0
 8006050:	af00      	add	r7, sp, #0
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	4603      	mov	r3, r0
 8006056:	81fb      	strh	r3, [r7, #14]
 8006058:	460b      	mov	r3, r1
 800605a:	81bb      	strh	r3, [r7, #12]
 800605c:	4613      	mov	r3, r2
 800605e:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	3305      	adds	r3, #5
 800606a:	2b80      	cmp	r3, #128	; 0x80
 800606c:	dd01      	ble.n	8006072 <aci_gatt_write_charac_descriptor+0x26>
    return BLE_STATUS_INVALID_PARAMS;
 800606e:	2342      	movs	r3, #66	; 0x42
 8006070:	e065      	b.n	800613e <aci_gatt_write_charac_descriptor+0xf2>

  conn_handle = htobs(conn_handle);
 8006072:	89fb      	ldrh	r3, [r7, #14]
 8006074:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8006076:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800607a:	f107 0210 	add.w	r2, r7, #16
 800607e:	4413      	add	r3, r2
 8006080:	89fa      	ldrh	r2, [r7, #14]
 8006082:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8006084:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006088:	3302      	adds	r3, #2
 800608a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 800608e:	89bb      	ldrh	r3, [r7, #12]
 8006090:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8006092:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006096:	f107 0210 	add.w	r2, r7, #16
 800609a:	4413      	add	r3, r2
 800609c:	89ba      	ldrh	r2, [r7, #12]
 800609e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80060a0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80060a4:	3302      	adds	r3, #2
 80060a6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 80060aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80060ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80060b2:	4413      	add	r3, r2
 80060b4:	7afa      	ldrb	r2, [r7, #11]
 80060b6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80060ba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80060be:	3301      	adds	r3, #1
 80060c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80060c4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80060c8:	f107 0210 	add.w	r2, r7, #16
 80060cc:	4413      	add	r3, r2
 80060ce:	7afa      	ldrb	r2, [r7, #11]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f005 ffc2 	bl	800c05c <memcpy>
  indx +=  value_len;
 80060d8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	4413      	add	r3, r2
 80060e0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80060e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80060e8:	2218      	movs	r2, #24
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f005 ffc0 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80060f2:	233f      	movs	r3, #63	; 0x3f
 80060f4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 80060f8:	f240 1321 	movw	r3, #289	; 0x121
 80060fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8006108:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800610c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 8006110:	230f      	movs	r3, #15
 8006112:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006116:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800611a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8006124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fad4 	bl	80066d8 <hci_send_req>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	da01      	bge.n	800613a <aci_gatt_write_charac_descriptor+0xee>
    return BLE_STATUS_TIMEOUT;
 8006136:	23ff      	movs	r3, #255	; 0xff
 8006138:	e001      	b.n	800613e <aci_gatt_write_charac_descriptor+0xf2>

  return status;
 800613a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800613e:	4618      	mov	r0, r3
 8006140:	37b0      	adds	r7, #176	; 0xb0
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b092      	sub	sp, #72	; 0x48
 800614a:	af00      	add	r7, sp, #0
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	4603      	mov	r3, r0
 8006150:	81fb      	strh	r3, [r7, #14]
 8006152:	460b      	mov	r3, r1
 8006154:	81bb      	strh	r3, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	2b14      	cmp	r3, #20
 800615e:	d901      	bls.n	8006164 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 8006160:	2342      	movs	r3, #66	; 0x42
 8006162:	e031      	b.n	80061c8 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 8006164:	89fb      	ldrh	r3, [r7, #14]
 8006166:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8006168:	89bb      	ldrh	r3, [r7, #12]
 800616a:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8006170:	7afa      	ldrb	r2, [r7, #11]
 8006172:	f107 0314 	add.w	r3, r7, #20
 8006176:	3305      	adds	r3, #5
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4618      	mov	r0, r3
 800617c:	f005 ff6e 	bl	800c05c <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006184:	2218      	movs	r2, #24
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f005 ff72 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800618e:	233f      	movs	r3, #63	; 0x3f
 8006190:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8006192:	f240 1323 	movw	r3, #291	; 0x123
 8006196:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	3305      	adds	r3, #5
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80061a4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 80061ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fa8f 	bl	80066d8 <hci_send_req>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da01      	bge.n	80061c4 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 80061c0:	23ff      	movs	r3, #255	; 0xff
 80061c2:	e001      	b.n	80061c8 <aci_gatt_write_without_response+0x82>

  return status;
 80061c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3748      	adds	r7, #72	; 0x48
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b0aa      	sub	sp, #168	; 0xa8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	603a      	str	r2, [r7, #0]
 80061da:	71fb      	strb	r3, [r7, #7]
 80061dc:	460b      	mov	r3, r1
 80061de:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80061e6:	79bb      	ldrb	r3, [r7, #6]
 80061e8:	3302      	adds	r3, #2
 80061ea:	2b80      	cmp	r3, #128	; 0x80
 80061ec:	dd01      	ble.n	80061f2 <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 80061ee:	2342      	movs	r3, #66	; 0x42
 80061f0:	e052      	b.n	8006298 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 80061f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80061fa:	4413      	add	r3, r2
 80061fc:	79fa      	ldrb	r2, [r7, #7]
 80061fe:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006202:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006206:	3301      	adds	r3, #1
 8006208:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800620c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006210:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006214:	4413      	add	r3, r2
 8006216:	79ba      	ldrb	r2, [r7, #6]
 8006218:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800621c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006220:	3301      	adds	r3, #1
 8006222:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8006226:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800622a:	f107 0208 	add.w	r2, r7, #8
 800622e:	4413      	add	r3, r2
 8006230:	79ba      	ldrb	r2, [r7, #6]
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f005 ff11 	bl	800c05c <memcpy>
  indx +=  len;
 800623a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800623e:	79bb      	ldrb	r3, [r7, #6]
 8006240:	4413      	add	r3, r2
 8006242:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006246:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800624a:	2218      	movs	r2, #24
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f005 ff0f 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006254:	233f      	movs	r3, #63	; 0x3f
 8006256:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800625a:	230c      	movs	r3, #12
 800625c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8006260:	f107 0308 	add.w	r3, r7, #8
 8006264:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8006268:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800626c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006270:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8006274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8006278:	2301      	movs	r3, #1
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800627e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fa27 	bl	80066d8 <hci_send_req>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	da01      	bge.n	8006294 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8006290:	23ff      	movs	r3, #255	; 0xff
 8006292:	e001      	b.n	8006298 <aci_hal_write_config_data+0xc8>

  return status;
 8006294:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8006298:	4618      	mov	r0, r3
 800629a:	37a8      	adds	r7, #168	; 0xa8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	460a      	mov	r2, r1
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80062b4:	79bb      	ldrb	r3, [r7, #6]
 80062b6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	2218      	movs	r2, #24
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f005 fed6 	bl	800c072 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80062c6:	233f      	movs	r3, #63	; 0x3f
 80062c8:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80062ca:	230f      	movs	r3, #15
 80062cc:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80062d4:	2302      	movs	r3, #2
 80062d6:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80062d8:	f107 030b 	add.w	r3, r7, #11
 80062dc:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80062e2:	f107 0310 	add.w	r3, r7, #16
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f9f5 	bl	80066d8 <hci_send_req>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da01      	bge.n	80062f8 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80062f4:	23ff      	movs	r3, #255	; 0xff
 80062f6:	e000      	b.n	80062fa <aci_hal_set_tx_power_level+0x5a>

  return status;
 80062f8:	7afb      	ldrb	r3, [r7, #11]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3728      	adds	r7, #40	; 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8006302:	b590      	push	{r4, r7, lr}
 8006304:	b089      	sub	sp, #36	; 0x24
 8006306:	af02      	add	r7, sp, #8
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800630c:	f107 0410 	add.w	r4, r7, #16
 8006310:	f107 0215 	add.w	r2, r7, #21
 8006314:	f107 0112 	add.w	r1, r7, #18
 8006318:	f107 0016 	add.w	r0, r7, #22
 800631c:	f107 030e 	add.w	r3, r7, #14
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	4623      	mov	r3, r4
 8006324:	f000 f853 	bl	80063ce <hci_le_read_local_version>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d126      	bne.n	8006380 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8006332:	8a7b      	ldrh	r3, [r7, #18]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	b29b      	uxth	r3, r3
 8006338:	b2da      	uxtb	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800633e:	8a7b      	ldrh	r3, [r7, #18]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	b29a      	uxth	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b21a      	sxth	r2, r3
 800634e:	89fb      	ldrh	r3, [r7, #14]
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	b29b      	uxth	r3, r3
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	b21b      	sxth	r3, r3
 8006358:	b2db      	uxtb	r3, r3
 800635a:	b21b      	sxth	r3, r3
 800635c:	4313      	orrs	r3, r2
 800635e:	b21b      	sxth	r3, r3
 8006360:	b29a      	uxth	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b21a      	sxth	r2, r3
 800636c:	89fb      	ldrh	r3, [r7, #14]
 800636e:	b21b      	sxth	r3, r3
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	b21b      	sxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b21b      	sxth	r3, r3
 800637a:	b29a      	uxth	r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
}
 8006382:	4618      	mov	r0, r3
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}

0800638a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b088      	sub	sp, #32
 800638e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	2218      	movs	r2, #24
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f005 fe6a 	bl	800c072 <memset>
  rq.ogf = OGF_HOST_CTL;
 800639e:	2303      	movs	r3, #3
 80063a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80063a2:	2303      	movs	r3, #3
 80063a4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80063a6:	1dfb      	adds	r3, r7, #7
 80063a8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80063aa:	2301      	movs	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f98f 	bl	80066d8 <hci_send_req>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da01      	bge.n	80063c4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80063c0:	23ff      	movs	r3, #255	; 0xff
 80063c2:	e000      	b.n	80063c6 <hci_reset+0x3c>
  
  return status;  
 80063c4:	79fb      	ldrb	r3, [r7, #7]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08e      	sub	sp, #56	; 0x38
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80063dc:	f107 0314 	add.w	r3, r7, #20
 80063e0:	2209      	movs	r2, #9
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f005 fe44 	bl	800c072 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80063ea:	f107 0320 	add.w	r3, r7, #32
 80063ee:	2218      	movs	r2, #24
 80063f0:	2100      	movs	r1, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	f005 fe3d 	bl	800c072 <memset>
  rq.ogf = OGF_INFO_PARAM;
 80063f8:	2304      	movs	r3, #4
 80063fa:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80063fc:	2301      	movs	r3, #1
 80063fe:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800640e:	2309      	movs	r3, #9
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006412:	f107 0320 	add.w	r3, r7, #32
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f95d 	bl	80066d8 <hci_send_req>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	da01      	bge.n	8006428 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8006424:	23ff      	movs	r3, #255	; 0xff
 8006426:	e018      	b.n	800645a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8006428:	7d3b      	ldrb	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <hci_le_read_local_version+0x64>
    return resp.status;
 800642e:	7d3b      	ldrb	r3, [r7, #20]
 8006430:	e013      	b.n	800645a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8006432:	7d7a      	ldrb	r2, [r7, #21]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8006438:	8afa      	ldrh	r2, [r7, #22]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800643e:	7e3a      	ldrb	r2, [r7, #24]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8006444:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006448:	b29a      	uxth	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800644e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006452:	b29a      	uxth	r2, r3
 8006454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006456:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3738      	adds	r7, #56	; 0x38
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b092      	sub	sp, #72	; 0x48
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	6039      	str	r1, [r7, #0]
 800646c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800646e:	f107 0310 	add.w	r3, r7, #16
 8006472:	2220      	movs	r2, #32
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f005 fdfb 	bl	800c072 <memset>
  scan_resp_cp.length = length;
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b1f      	cmp	r3, #31
 8006484:	d801      	bhi.n	800648a <hci_le_set_scan_resp_data+0x28>
 8006486:	79fa      	ldrb	r2, [r7, #7]
 8006488:	e000      	b.n	800648c <hci_le_set_scan_resp_data+0x2a>
 800648a:	221f      	movs	r2, #31
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	3301      	adds	r3, #1
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f005 fde1 	bl	800c05c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800649a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800649e:	2218      	movs	r2, #24
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f005 fde5 	bl	800c072 <memset>
  rq.ogf = OGF_LE_CTL;
 80064a8:	2308      	movs	r3, #8
 80064aa:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80064ac:	2309      	movs	r3, #9
 80064ae:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80064b0:	f107 0310 	add.w	r3, r7, #16
 80064b4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80064b6:	2320      	movs	r3, #32
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80064ba:	f107 030f 	add.w	r3, r7, #15
 80064be:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80064c0:	2301      	movs	r3, #1
 80064c2:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80064c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f904 	bl	80066d8 <hci_send_req>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da01      	bge.n	80064da <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80064d6:	23ff      	movs	r3, #255	; 0xff
 80064d8:	e000      	b.n	80064dc <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80064da:	7bfb      	ldrb	r3, [r7, #15]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3748      	adds	r7, #72	; 0x48
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3308      	adds	r3, #8
 80064f0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d001      	beq.n	80064fe <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00c      	b.n	8006518 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3302      	adds	r3, #2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800650c:	3b03      	subs	r3, #3
 800650e:	429a      	cmp	r2, r3
 8006510:	d001      	beq.n	8006516 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8006512:	2302      	movs	r3, #2
 8006514:	e000      	b.n	8006518 <verify_packet+0x34>
  
  return 0;      
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b0a6      	sub	sp, #152	; 0x98
 8006528:	af00      	add	r7, sp, #0
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	4603      	mov	r3, r0
 800652e:	81fb      	strh	r3, [r7, #14]
 8006530:	460b      	mov	r3, r1
 8006532:	81bb      	strh	r3, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006538:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800653c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006540:	b21a      	sxth	r2, r3
 8006542:	89fb      	ldrh	r3, [r7, #14]
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	b21b      	sxth	r3, r3
 8006548:	4313      	orrs	r3, r2
 800654a:	b21b      	sxth	r3, r3
 800654c:	b29b      	uxth	r3, r3
 800654e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8006554:	2301      	movs	r3, #1
 8006556:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8006558:	f107 0318 	add.w	r3, r7, #24
 800655c:	3301      	adds	r3, #1
 800655e:	461a      	mov	r2, r3
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	8819      	ldrh	r1, [r3, #0]
 8006566:	789b      	ldrb	r3, [r3, #2]
 8006568:	8011      	strh	r1, [r2, #0]
 800656a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800656c:	f107 0318 	add.w	r3, r7, #24
 8006570:	3304      	adds	r3, #4
 8006572:	7afa      	ldrb	r2, [r7, #11]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	f005 fd70 	bl	800c05c <memcpy>
  
  if (hciContext.io.Send)
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <send_cmd+0x7c>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <send_cmd+0x7c>)
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	7afa      	ldrb	r2, [r7, #11]
 800658a:	b292      	uxth	r2, r2
 800658c:	3204      	adds	r2, #4
 800658e:	b291      	uxth	r1, r2
 8006590:	f107 0218 	add.w	r2, r7, #24
 8006594:	4610      	mov	r0, r2
 8006596:	4798      	blx	r3
  }
}
 8006598:	bf00      	nop
 800659a:	3798      	adds	r7, #152	; 0x98
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000b90 	.word	0x20000b90

080065a4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80065ae:	e00a      	b.n	80065c6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80065b0:	f107 030c 	add.w	r3, r7, #12
 80065b4:	4619      	mov	r1, r3
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f000 fad8 	bl	8006b6c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa47 	bl	8006a54 <list_insert_head>
  while (!list_is_empty(src_list))
 80065c6:	6838      	ldr	r0, [r7, #0]
 80065c8:	f000 fa24 	bl	8006a14 <list_is_empty>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0ee      	beq.n	80065b0 <move_list+0xc>
  }
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80065e2:	e009      	b.n	80065f8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4808      	ldr	r0, [pc, #32]	; (800660c <free_event_list+0x30>)
 80065ea:	f000 fa9a 	bl	8006b22 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4619      	mov	r1, r3
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <free_event_list+0x34>)
 80065f4:	f000 fa52 	bl	8006a9c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80065f8:	4805      	ldr	r0, [pc, #20]	; (8006610 <free_event_list+0x34>)
 80065fa:	f000 fadc 	bl	8006bb6 <list_get_size>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	ddef      	ble.n	80065e4 <free_event_list+0x8>
  }
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20001c70 	.word	0x20001c70
 8006610:	20001c68 	.word	0x20001c68

08006614 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006624:	4a18      	ldr	r2, [pc, #96]	; (8006688 <hci_init+0x74>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800662a:	f002 ff9d 	bl	8009568 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800662e:	4817      	ldr	r0, [pc, #92]	; (800668c <hci_init+0x78>)
 8006630:	f000 f9e0 	bl	80069f4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8006634:	4816      	ldr	r0, [pc, #88]	; (8006690 <hci_init+0x7c>)
 8006636:	f000 f9dd 	bl	80069f4 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	e00c      	b.n	800665a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	228c      	movs	r2, #140	; 0x8c
 8006644:	fb02 f303 	mul.w	r3, r2, r3
 8006648:	4a12      	ldr	r2, [pc, #72]	; (8006694 <hci_init+0x80>)
 800664a:	4413      	add	r3, r2
 800664c:	4619      	mov	r1, r3
 800664e:	480f      	ldr	r0, [pc, #60]	; (800668c <hci_init+0x78>)
 8006650:	f000 fa24 	bl	8006a9c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	3301      	adds	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d9ef      	bls.n	8006640 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <hci_init+0x74>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <hci_init+0x5c>
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <hci_init+0x74>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2000      	movs	r0, #0
 800666e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <hci_init+0x74>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <hci_init+0x6a>
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <hci_init+0x74>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4798      	blx	r3
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000b90 	.word	0x20000b90
 800668c:	20001c68 	.word	0x20001c68
 8006690:	20001c70 	.word	0x20001c70
 8006694:	200008d4 	.word	0x200008d4

08006698 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a0b      	ldr	r2, [pc, #44]	; (80066d4 <hci_register_io_bus+0x3c>)
 80066a6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <hci_register_io_bus+0x3c>)
 80066ae:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <hci_register_io_bus+0x3c>)
 80066b6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <hci_register_io_bus+0x3c>)
 80066be:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;    
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a03      	ldr	r2, [pc, #12]	; (80066d4 <hci_register_io_bus+0x3c>)
 80066c6:	6093      	str	r3, [r2, #8]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	20000b90 	.word	0x20000b90

080066d8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	; 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	885b      	ldrh	r3, [r3, #2]
 80066e8:	b21b      	sxth	r3, r3
 80066ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ee:	b21a      	sxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	029b      	lsls	r3, r3, #10
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8006702:	f107 0308 	add.w	r3, r7, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f974 	bl	80069f4 <list_init_head>

  free_event_list();
 800670c:	f7ff ff66 	bl	80065dc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8818      	ldrh	r0, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8859      	ldrh	r1, [r3, #2]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f7ff feff 	bl	8006524 <send_cmd>
  
  if (async)
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <hci_send_req+0x58>
  {
    return 0;
 800672c:	2300      	movs	r3, #0
 800672e:	e0e0      	b.n	80068f2 <hci_send_req+0x21a>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8006730:	f7fb fb9c 	bl	8001e6c <HAL_GetTick>
 8006734:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006736:	f7fb fb99 	bl	8001e6c <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006744:	f200 80b1 	bhi.w	80068aa <hci_send_req+0x1d2>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006748:	486c      	ldr	r0, [pc, #432]	; (80068fc <hci_send_req+0x224>)
 800674a:	f000 f963 	bl	8006a14 <list_is_empty>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d000      	beq.n	8006756 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006754:	e7ef      	b.n	8006736 <hci_send_req+0x5e>
      {
        break;
 8006756:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	4619      	mov	r1, r3
 800675e:	4867      	ldr	r0, [pc, #412]	; (80068fc <hci_send_req+0x224>)
 8006760:	f000 f9df 	bl	8006b22 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3308      	adds	r3, #8
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b04      	cmp	r3, #4
 8006770:	d17d      	bne.n	800686e <hci_send_req+0x196>
    {
      event_pckt = (void *)(hci_hdr->data);
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	3301      	adds	r3, #1
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	3308      	adds	r3, #8
 800677c:	3303      	adds	r3, #3
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006786:	3b03      	subs	r3, #3
 8006788:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b0f      	cmp	r3, #15
 8006790:	d00a      	beq.n	80067a8 <hci_send_req+0xd0>
 8006792:	2b0f      	cmp	r3, #15
 8006794:	dc02      	bgt.n	800679c <hci_send_req+0xc4>
 8006796:	2b0e      	cmp	r3, #14
 8006798:	d028      	beq.n	80067ec <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800679a:	e068      	b.n	800686e <hci_send_req+0x196>
      switch (event_pckt->evt) 
 800679c:	2b10      	cmp	r3, #16
 800679e:	f000 8086 	beq.w	80068ae <hci_send_req+0x1d6>
 80067a2:	2b3e      	cmp	r3, #62	; 0x3e
 80067a4:	d042      	beq.n	800682c <hci_send_req+0x154>
        break;
 80067a6:	e062      	b.n	800686e <hci_send_req+0x196>
        cs = (void *) ptr;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	61fb      	str	r3, [r7, #28]
        if (cs->opcode != opcode)
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	885b      	ldrh	r3, [r3, #2]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d17c      	bne.n	80068b2 <hci_send_req+0x1da>
        if (r->event != EVT_CMD_STATUS) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b0f      	cmp	r3, #15
 80067be:	d004      	beq.n	80067ca <hci_send_req+0xf2>
          if (cs->status) {
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d04f      	beq.n	8006868 <hci_send_req+0x190>
            goto failed;
 80067c8:	e076      	b.n	80068b8 <hci_send_req+0x1e0>
        r->rlen = MIN(len, r->rlen);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	bf28      	it	cs
 80067d4:	461a      	movcs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6918      	ldr	r0, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067e6:	f005 fc39 	bl	800c05c <memcpy>
        goto done;
 80067ea:	e076      	b.n	80068da <hci_send_req+0x202>
        cc = (void *) ptr;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d15b      	bne.n	80068b6 <hci_send_req+0x1de>
        ptr += EVT_CMD_COMPLETE_SIZE;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3303      	adds	r3, #3
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	3b03      	subs	r3, #3
 8006808:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	429a      	cmp	r2, r3
 8006812:	bf28      	it	cs
 8006814:	461a      	movcs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6918      	ldr	r0, [r3, #16]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	461a      	mov	r2, r3
 8006824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006826:	f005 fc19 	bl	800c05c <memcpy>
        goto done;
 800682a:	e056      	b.n	80068da <hci_send_req+0x202>
        me = (void *) ptr;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	61bb      	str	r3, [r7, #24]
        if (me->subevent != r->event)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d116      	bne.n	800686c <hci_send_req+0x194>
        len -= 1;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	3b01      	subs	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695a      	ldr	r2, [r3, #20]
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	429a      	cmp	r2, r3
 800684c:	bf28      	it	cs
 800684e:	461a      	movcs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6918      	ldr	r0, [r3, #16]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	461a      	mov	r2, r3
 8006862:	f005 fbfb 	bl	800c05c <memcpy>
        goto done;
 8006866:	e038      	b.n	80068da <hci_send_req+0x202>
          break;
 8006868:	bf00      	nop
 800686a:	e000      	b.n	800686e <hci_send_req+0x196>
          break;
 800686c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800686e:	4824      	ldr	r0, [pc, #144]	; (8006900 <hci_send_req+0x228>)
 8006870:	f000 f8d0 	bl	8006a14 <list_is_empty>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <hci_send_req+0x1be>
 800687a:	4820      	ldr	r0, [pc, #128]	; (80068fc <hci_send_req+0x224>)
 800687c:	f000 f8ca 	bl	8006a14 <list_is_empty>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <hci_send_req+0x1be>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4619      	mov	r1, r3
 800688a:	481d      	ldr	r0, [pc, #116]	; (8006900 <hci_send_req+0x228>)
 800688c:	f000 f906 	bl	8006a9c <list_insert_tail>
      hciReadPacket=NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	e008      	b.n	80068a8 <hci_send_req+0x1d0>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8fc 	bl	8006a9c <list_insert_tail>
      hciReadPacket=NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	613b      	str	r3, [r7, #16]
  {
 80068a8:	e742      	b.n	8006730 <hci_send_req+0x58>
        goto failed;
 80068aa:	bf00      	nop
 80068ac:	e004      	b.n	80068b8 <hci_send_req+0x1e0>
        goto failed;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <hci_send_req+0x1e0>
          goto failed;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <hci_send_req+0x1e0>
          goto failed;
 80068b6:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <hci_send_req+0x1f0>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4619      	mov	r1, r3
 80068c2:	480f      	ldr	r0, [pc, #60]	; (8006900 <hci_send_req+0x228>)
 80068c4:	f000 f8c6 	bl	8006a54 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	4619      	mov	r1, r3
 80068ce:	480b      	ldr	r0, [pc, #44]	; (80068fc <hci_send_req+0x224>)
 80068d0:	f7ff fe68 	bl	80065a4 <move_list>
  return -1;
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
 80068d8:	e00b      	b.n	80068f2 <hci_send_req+0x21a>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4619      	mov	r1, r3
 80068de:	4808      	ldr	r0, [pc, #32]	; (8006900 <hci_send_req+0x228>)
 80068e0:	f000 f8b8 	bl	8006a54 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	4619      	mov	r1, r3
 80068ea:	4804      	ldr	r0, [pc, #16]	; (80068fc <hci_send_req+0x224>)
 80068ec:	f7ff fe5a 	bl	80065a4 <move_list>
  return 0;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3738      	adds	r7, #56	; 0x38
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20001c70 	.word	0x20001c70
 8006900:	20001c68 	.word	0x20001c68

08006904 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800690e:	e013      	b.n	8006938 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); // TU jest
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	4619      	mov	r1, r3
 8006914:	480d      	ldr	r0, [pc, #52]	; (800694c <hci_user_evt_proc+0x48>)
 8006916:	f000 f904 	bl	8006b22 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <hci_user_evt_proc+0x4c>)
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff); //TU sa  zaladowane wyslane dane!!
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <hci_user_evt_proc+0x4c>)
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	3208      	adds	r2, #8
 800692a:	4610      	mov	r0, r2
 800692c:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4619      	mov	r1, r3
 8006932:	4808      	ldr	r0, [pc, #32]	; (8006954 <hci_user_evt_proc+0x50>)
 8006934:	f000 f8b2 	bl	8006a9c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006938:	4804      	ldr	r0, [pc, #16]	; (800694c <hci_user_evt_proc+0x48>)
 800693a:	f000 f86b 	bl	8006a14 <list_is_empty>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0e5      	beq.n	8006910 <hci_user_evt_proc+0xc>
  }
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20001c70 	.word	0x20001c70
 8006950:	20000b90 	.word	0x20000b90
 8006954:	20001c68 	.word	0x20001c68

08006958 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8006968:	481f      	ldr	r0, [pc, #124]	; (80069e8 <hci_notify_asynch_evt+0x90>)
 800696a:	f000 f853 	bl	8006a14 <list_is_empty>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d132      	bne.n	80069da <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	4619      	mov	r1, r3
 800697a:	481b      	ldr	r0, [pc, #108]	; (80069e8 <hci_notify_asynch_evt+0x90>)
 800697c:	f000 f8d1 	bl	8006b22 <list_remove_head>
    
    if (hciContext.io.Receive)
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <hci_notify_asynch_evt+0x94>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02a      	beq.n	80069de <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8006988:	4b18      	ldr	r3, [pc, #96]	; (80069ec <hci_notify_asynch_evt+0x94>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	3208      	adds	r2, #8
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	4610      	mov	r0, r2
 8006994:	4798      	blx	r3
 8006996:	4603      	mov	r3, r0
 8006998:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800699a:	7cfb      	ldrb	r3, [r7, #19]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d016      	beq.n	80069ce <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	7cfa      	ldrb	r2, [r7, #19]
 80069a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fd9a 	bl	80064e4 <verify_packet>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4619      	mov	r1, r3
 80069ba:	480d      	ldr	r0, [pc, #52]	; (80069f0 <hci_notify_asynch_evt+0x98>)
 80069bc:	f000 f86e 	bl	8006a9c <list_insert_tail>
 80069c0:	e00d      	b.n	80069de <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4619      	mov	r1, r3
 80069c6:	4808      	ldr	r0, [pc, #32]	; (80069e8 <hci_notify_asynch_evt+0x90>)
 80069c8:	f000 f844 	bl	8006a54 <list_insert_head>
 80069cc:	e007      	b.n	80069de <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4619      	mov	r1, r3
 80069d2:	4805      	ldr	r0, [pc, #20]	; (80069e8 <hci_notify_asynch_evt+0x90>)
 80069d4:	f000 f83e 	bl	8006a54 <list_insert_head>
 80069d8:	e001      	b.n	80069de <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80069da:	2301      	movs	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80069de:	697b      	ldr	r3, [r7, #20]

}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20001c68 	.word	0x20001c68
 80069ec:	20000b90 	.word	0x20000b90
 80069f0:	20001c70 	.word	0x20001c70

080069f4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a22:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a26:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d102      	bne.n	8006a38 <list_is_empty+0x24>
  {
    return_value = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
 8006a36:	e001      	b.n	8006a3c <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a64:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a68:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ab0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aec:	f3ef 8310 	mrs	r3, PRIMASK
 8006af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006af4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006af6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6852      	ldr	r2, [r2, #4]
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b32:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b36:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ffcd 	bl	8006ae4 <list_remove_node>
  (*node)->next = NULL;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006b64:	bf00      	nop
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b76:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006b7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b80:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff ffa8 	bl	8006ae4 <list_remove_node>
  (*node)->next = NULL;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b089      	sub	sp, #36	; 0x24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  int size = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8006bc8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bcc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006bd4:	e005      	b.n	8006be2 <list_get_size+0x2c>
  {
    size++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d1f5      	bne.n	8006bd6 <list_get_size+0x20>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3724      	adds	r7, #36	; 0x24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	4603      	mov	r3, r0
 8006c0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c14:	2b84      	cmp	r3, #132	; 0x84
 8006c16:	d005      	beq.n	8006c24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	3303      	adds	r3, #3
 8006c22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c36:	f001 f9c7 	bl	8007fc8 <vTaskStartScheduler>
  
  return osOK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af04      	add	r7, sp, #16
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d020      	beq.n	8006c94 <osThreadCreate+0x54>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01c      	beq.n	8006c94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685c      	ldr	r4, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681d      	ldr	r5, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691e      	ldr	r6, [r3, #16]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff ffc8 	bl	8006c02 <makeFreeRtosPriority>
 8006c72:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	9100      	str	r1, [sp, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	4632      	mov	r2, r6
 8006c86:	4629      	mov	r1, r5
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 ffd9 	bl	8007c40 <xTaskCreateStatic>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e01c      	b.n	8006cce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685c      	ldr	r4, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ca0:	b29e      	uxth	r6, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff ffaa 	bl	8006c02 <makeFreeRtosPriority>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	9200      	str	r2, [sp, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4632      	mov	r2, r6
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f001 f818 	bl	8007cf4 <xTaskCreate>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d001      	beq.n	8006cce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <osDelay+0x16>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	e000      	b.n	8006cf0 <osDelay+0x18>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 f935 	bl	8007f60 <vTaskDelay>
  
  return osOK;
 8006cf6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d0c:	f001 f9ba 	bl	8008084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d10:	4b57      	ldr	r3, [pc, #348]	; (8006e70 <pvPortMalloc+0x170>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d18:	f000 f90c 	bl	8006f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d1c:	4b55      	ldr	r3, [pc, #340]	; (8006e74 <pvPortMalloc+0x174>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 808c 	bne.w	8006e42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01c      	beq.n	8006d6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006d30:	2208      	movs	r2, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4413      	add	r3, r2
 8006d36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f023 0307 	bic.w	r3, r3, #7
 8006d48:	3308      	adds	r3, #8
 8006d4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e7fe      	b.n	8006d68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d068      	beq.n	8006e42 <pvPortMalloc+0x142>
 8006d70:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <pvPortMalloc+0x178>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d863      	bhi.n	8006e42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d7a:	4b40      	ldr	r3, [pc, #256]	; (8006e7c <pvPortMalloc+0x17c>)
 8006d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d7e:	4b3f      	ldr	r3, [pc, #252]	; (8006e7c <pvPortMalloc+0x17c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d84:	e004      	b.n	8006d90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d203      	bcs.n	8006da2 <pvPortMalloc+0xa2>
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f1      	bne.n	8006d86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006da2:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <pvPortMalloc+0x170>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d04a      	beq.n	8006e42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2208      	movs	r2, #8
 8006db2:	4413      	add	r3, r2
 8006db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	1ad2      	subs	r2, r2, r3
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d91e      	bls.n	8006e0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <pvPortMalloc+0xf4>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	e7fe      	b.n	8006df2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e06:	69b8      	ldr	r0, [r7, #24]
 8006e08:	f000 f8f6 	bl	8006ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <pvPortMalloc+0x178>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <pvPortMalloc+0x178>)
 8006e18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e1a:	4b17      	ldr	r3, [pc, #92]	; (8006e78 <pvPortMalloc+0x178>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b18      	ldr	r3, [pc, #96]	; (8006e80 <pvPortMalloc+0x180>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d203      	bcs.n	8006e2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <pvPortMalloc+0x178>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <pvPortMalloc+0x180>)
 8006e2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <pvPortMalloc+0x174>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e42:	f001 f92d 	bl	80080a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d009      	beq.n	8006e64 <pvPortMalloc+0x164>
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e7fe      	b.n	8006e62 <pvPortMalloc+0x162>
	return pvReturn;
 8006e64:	69fb      	ldr	r3, [r7, #28]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20001770 	.word	0x20001770
 8006e74:	2000177c 	.word	0x2000177c
 8006e78:	20001774 	.word	0x20001774
 8006e7c:	20001768 	.word	0x20001768
 8006e80:	20001778 	.word	0x20001778

08006e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d046      	beq.n	8006f24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e96:	2308      	movs	r3, #8
 8006e98:	425b      	negs	r3, r3
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <vPortFree+0xa8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <vPortFree+0x42>
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e7fe      	b.n	8006ec4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <vPortFree+0x5e>
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	e7fe      	b.n	8006ee0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <vPortFree+0xa8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d019      	beq.n	8006f24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d115      	bne.n	8006f24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <vPortFree+0xa8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	43db      	mvns	r3, r3
 8006f02:	401a      	ands	r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f08:	f001 f8bc 	bl	8008084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <vPortFree+0xac>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	4a06      	ldr	r2, [pc, #24]	; (8006f30 <vPortFree+0xac>)
 8006f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f1a:	6938      	ldr	r0, [r7, #16]
 8006f1c:	f000 f86c 	bl	8006ff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f20:	f001 f8be 	bl	80080a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	2000177c 	.word	0x2000177c
 8006f30:	20001774 	.word	0x20001774

08006f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <prvHeapInit+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3307      	adds	r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <prvHeapInit+0xac>)
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <prvHeapInit+0xb0>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <prvHeapInit+0xb0>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f80:	2208      	movs	r2, #8
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <prvHeapInit+0xb4>)
 8006f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvHeapInit+0xb4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <prvHeapInit+0xb4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvHeapInit+0xb4>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <prvHeapInit+0xb8>)
 8006fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <prvHeapInit+0xbc>)
 8006fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <prvHeapInit+0xc0>)
 8006fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20000bb0 	.word	0x20000bb0
 8006fe4:	20001768 	.word	0x20001768
 8006fe8:	20001770 	.word	0x20001770
 8006fec:	20001778 	.word	0x20001778
 8006ff0:	20001774 	.word	0x20001774
 8006ff4:	2000177c 	.word	0x2000177c

08006ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <prvInsertBlockIntoFreeList+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e002      	b.n	800700c <prvInsertBlockIntoFreeList+0x14>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d3f7      	bcc.n	8007006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	441a      	add	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d108      	bne.n	800703a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	441a      	add	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d118      	bne.n	8007080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d00d      	beq.n	8007076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e008      	b.n	8007088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e003      	b.n	8007088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d002      	beq.n	8007096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20001768 	.word	0x20001768
 80070a8:	20001770 	.word	0x20001770

080070ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295
 80070c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0208 	add.w	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f103 0208 	add.w	r2, r3, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d103      	bne.n	800716e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	e00c      	b.n	8007188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3308      	adds	r3, #8
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e002      	b.n	800717c <vListInsert+0x2e>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	d9f6      	bls.n	8007176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6892      	ldr	r2, [r2, #8]
 80071d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6852      	ldr	r2, [r2, #4]
 80071e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d103      	bne.n	80071f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3b04      	subs	r3, #4
 8007224:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800722c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b04      	subs	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3b04      	subs	r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007244:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <pxPortInitialiseStack+0x64>)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3b14      	subs	r3, #20
 800724e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b04      	subs	r3, #4
 800725a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f06f 0202 	mvn.w	r2, #2
 8007262:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b20      	subs	r3, #32
 8007268:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800726a:	68fb      	ldr	r3, [r7, #12]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	0800727d 	.word	0x0800727d

0800727c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <prvTaskExitError+0x50>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d009      	beq.n	80072a4 <prvTaskExitError+0x28>
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e7fe      	b.n	80072a2 <prvTaskExitError+0x26>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072b6:	bf00      	nop
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0fc      	beq.n	80072b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000024 	.word	0x20000024

080072d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <pxCurrentTCBConst2>)
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	6808      	ldr	r0, [r1, #0]
 80072d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	f380 8809 	msr	PSP, r0
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8811 	msr	BASEPRI, r0
 80072ea:	4770      	bx	lr
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst2>:
 80072f0:	20001788 	.word	0x20001788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072f8:	4808      	ldr	r0, [pc, #32]	; (800731c <prvPortStartFirstTask+0x24>)
 80072fa:	6800      	ldr	r0, [r0, #0]
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f380 8808 	msr	MSP, r0
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8814 	msr	CONTROL, r0
 800730a:	b662      	cpsie	i
 800730c:	b661      	cpsie	f
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	df00      	svc	0
 8007318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800731a:	bf00      	nop
 800731c:	e000ed08 	.word	0xe000ed08

08007320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007326:	4b44      	ldr	r3, [pc, #272]	; (8007438 <xPortStartScheduler+0x118>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a44      	ldr	r2, [pc, #272]	; (800743c <xPortStartScheduler+0x11c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d109      	bne.n	8007344 <xPortStartScheduler+0x24>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	e7fe      	b.n	8007342 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007344:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <xPortStartScheduler+0x118>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <xPortStartScheduler+0x120>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d109      	bne.n	8007362 <xPortStartScheduler+0x42>
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e7fe      	b.n	8007360 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007362:	4b38      	ldr	r3, [pc, #224]	; (8007444 <xPortStartScheduler+0x124>)
 8007364:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007384:	b2da      	uxtb	r2, r3
 8007386:	4b30      	ldr	r3, [pc, #192]	; (8007448 <xPortStartScheduler+0x128>)
 8007388:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800738a:	4b30      	ldr	r3, [pc, #192]	; (800744c <xPortStartScheduler+0x12c>)
 800738c:	2207      	movs	r2, #7
 800738e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007390:	e009      	b.n	80073a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007392:	4b2e      	ldr	r3, [pc, #184]	; (800744c <xPortStartScheduler+0x12c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3b01      	subs	r3, #1
 8007398:	4a2c      	ldr	r2, [pc, #176]	; (800744c <xPortStartScheduler+0x12c>)
 800739a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	2b80      	cmp	r3, #128	; 0x80
 80073b0:	d0ef      	beq.n	8007392 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <xPortStartScheduler+0x12c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1c3 0307 	rsb	r3, r3, #7
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d009      	beq.n	80073d2 <xPortStartScheduler+0xb2>
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60bb      	str	r3, [r7, #8]
 80073d0:	e7fe      	b.n	80073d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073d2:	4b1e      	ldr	r3, [pc, #120]	; (800744c <xPortStartScheduler+0x12c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	4a1c      	ldr	r2, [pc, #112]	; (800744c <xPortStartScheduler+0x12c>)
 80073da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <xPortStartScheduler+0x12c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073e4:	4a19      	ldr	r2, [pc, #100]	; (800744c <xPortStartScheduler+0x12c>)
 80073e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073f0:	4a17      	ldr	r2, [pc, #92]	; (8007450 <xPortStartScheduler+0x130>)
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <xPortStartScheduler+0x130>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <xPortStartScheduler+0x130>)
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <xPortStartScheduler+0x130>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007406:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007408:	f000 f8d6 	bl	80075b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800740c:	4b11      	ldr	r3, [pc, #68]	; (8007454 <xPortStartScheduler+0x134>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007412:	f000 f8f5 	bl	8007600 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007416:	4a10      	ldr	r2, [pc, #64]	; (8007458 <xPortStartScheduler+0x138>)
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <xPortStartScheduler+0x138>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007420:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007422:	f7ff ff69 	bl	80072f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007426:	f000 ff8f 	bl	8008348 <vTaskSwitchContext>
	prvTaskExitError();
 800742a:	f7ff ff27 	bl	800727c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000ed00 	.word	0xe000ed00
 800743c:	410fc271 	.word	0x410fc271
 8007440:	410fc270 	.word	0x410fc270
 8007444:	e000e400 	.word	0xe000e400
 8007448:	20001780 	.word	0x20001780
 800744c:	20001784 	.word	0x20001784
 8007450:	e000ed20 	.word	0xe000ed20
 8007454:	20000024 	.word	0x20000024
 8007458:	e000ef34 	.word	0xe000ef34

0800745c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <vPortEnterCritical+0x54>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <vPortEnterCritical+0x54>)
 800747c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <vPortEnterCritical+0x54>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d10e      	bne.n	80074a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <vPortEnterCritical+0x58>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <vPortEnterCritical+0x48>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	603b      	str	r3, [r7, #0]
 80074a2:	e7fe      	b.n	80074a2 <vPortEnterCritical+0x46>
	}
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000024 	.word	0x20000024
 80074b4:	e000ed04 	.word	0xe000ed04

080074b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <vPortExitCritical+0x4c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <vPortExitCritical+0x22>
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	e7fe      	b.n	80074d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <vPortExitCritical+0x4c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3b01      	subs	r3, #1
 80074e0:	4a08      	ldr	r2, [pc, #32]	; (8007504 <vPortExitCritical+0x4c>)
 80074e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <vPortExitCritical+0x4c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <vPortExitCritical+0x3e>
 80074ec:	2300      	movs	r3, #0
 80074ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000024 	.word	0x20000024
	...

08007510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007510:	f3ef 8009 	mrs	r0, PSP
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4b15      	ldr	r3, [pc, #84]	; (8007570 <pxCurrentTCBConst>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	f01e 0f10 	tst.w	lr, #16
 8007520:	bf08      	it	eq
 8007522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752a:	6010      	str	r0, [r2, #0]
 800752c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007534:	f380 8811 	msr	BASEPRI, r0
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f000 ff02 	bl	8008348 <vTaskSwitchContext>
 8007544:	f04f 0000 	mov.w	r0, #0
 8007548:	f380 8811 	msr	BASEPRI, r0
 800754c:	bc09      	pop	{r0, r3}
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6808      	ldr	r0, [r1, #0]
 8007552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007556:	f01e 0f10 	tst.w	lr, #16
 800755a:	bf08      	it	eq
 800755c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007560:	f380 8809 	msr	PSP, r0
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w

08007570 <pxCurrentTCBConst>:
 8007570:	20001788 	.word	0x20001788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007590:	f000 fe22 	bl	80081d8 <xTaskIncrementTick>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <SysTick_Handler+0x3c>)
 800759c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <vPortSetupTimerInterrupt+0x34>)
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortSetupTimerInterrupt+0x38>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075c8:	4a0a      	ldr	r2, [pc, #40]	; (80075f4 <vPortSetupTimerInterrupt+0x3c>)
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <vPortSetupTimerInterrupt+0x40>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	490b      	ldr	r1, [pc, #44]	; (80075fc <vPortSetupTimerInterrupt+0x44>)
 80075d0:	fba1 1303 	umull	r1, r3, r1, r3
 80075d4:	099b      	lsrs	r3, r3, #6
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <vPortSetupTimerInterrupt+0x34>)
 80075dc:	2207      	movs	r2, #7
 80075de:	601a      	str	r2, [r3, #0]
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	e000e010 	.word	0xe000e010
 80075f0:	e000e018 	.word	0xe000e018
 80075f4:	e000e014 	.word	0xe000e014
 80075f8:	20000040 	.word	0x20000040
 80075fc:	10624dd3 	.word	0x10624dd3

08007600 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007600:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007610 <vPortEnableVFP+0x10>
 8007604:	6801      	ldr	r1, [r0, #0]
 8007606:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800760a:	6001      	str	r1, [r0, #0]
 800760c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800760e:	bf00      	nop
 8007610:	e000ed88 	.word	0xe000ed88

08007614 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800761a:	f3ef 8305 	mrs	r3, IPSR
 800761e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b0f      	cmp	r3, #15
 8007624:	d913      	bls.n	800764e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <vPortValidateInterruptPriority+0x6c>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007630:	4b14      	ldr	r3, [pc, #80]	; (8007684 <vPortValidateInterruptPriority+0x70>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	7afa      	ldrb	r2, [r7, #11]
 8007636:	429a      	cmp	r2, r3
 8007638:	d209      	bcs.n	800764e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e7fe      	b.n	800764c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <vPortValidateInterruptPriority+0x74>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <vPortValidateInterruptPriority+0x78>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d909      	bls.n	8007672 <vPortValidateInterruptPriority+0x5e>
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	e7fe      	b.n	8007670 <vPortValidateInterruptPriority+0x5c>
	}
 8007672:	bf00      	nop
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000e3f0 	.word	0xe000e3f0
 8007684:	20001780 	.word	0x20001780
 8007688:	e000ed0c 	.word	0xe000ed0c
 800768c:	20001784 	.word	0x20001784

08007690 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <xQueueGenericReset+0x28>
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	e7fe      	b.n	80076b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80076b8:	f7ff fed0 	bl	800745c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c4:	68f9      	ldr	r1, [r7, #12]
 80076c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	3b01      	subs	r3, #1
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076ee:	fb01 f303 	mul.w	r3, r1, r3
 80076f2:	441a      	add	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	22ff      	movs	r2, #255	; 0xff
 80076fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	22ff      	movs	r2, #255	; 0xff
 8007704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d114      	bne.n	8007738 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01a      	beq.n	800774c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3310      	adds	r3, #16
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fe92 	bl	8008444 <xTaskRemoveFromEventList>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d012      	beq.n	800774c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <xQueueGenericReset+0xcc>)
 8007728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	e009      	b.n	800774c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3310      	adds	r3, #16
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fcb5 	bl	80070ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fcb0 	bl	80070ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800774c:	f7ff feb4 	bl	80074b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007750:	2301      	movs	r3, #1
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <xQueueGenericCreate+0x28>
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e7fe      	b.n	8007786 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e004      	b.n	800779e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3348      	adds	r3, #72	; 0x48
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff faac 	bl	8006d00 <pvPortMalloc>
 80077a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d011      	beq.n	80077d4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	3348      	adds	r3, #72	; 0x48
 80077b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077c2:	79fa      	ldrb	r2, [r7, #7]
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f805 	bl	80077de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077d4:	69bb      	ldr	r3, [r7, #24]
	}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e002      	b.n	8007800 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800780c:	2101      	movs	r1, #1
 800780e:	69b8      	ldr	r0, [r7, #24]
 8007810:	f7ff ff3e 	bl	8007690 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	; 0x38
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <xQueueGiveFromISR+0x28>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	623b      	str	r3, [r7, #32]
 8007842:	e7fe      	b.n	8007842 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <xQueueGiveFromISR+0x44>
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	e7fe      	b.n	800785e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <xQueueGiveFromISR+0x54>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <xQueueGiveFromISR+0x58>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <xQueueGiveFromISR+0x5a>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <xQueueGiveFromISR+0x72>
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	e7fe      	b.n	800788c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800788e:	f7ff fec1 	bl	8007614 <vPortValidateInterruptPriority>
	__asm volatile
 8007892:	f3ef 8211 	mrs	r2, BASEPRI
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	617a      	str	r2, [r7, #20]
 80078a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80078aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d92b      	bls.n	8007916 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d112      	bne.n	8007900 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fdac 	bl	8008444 <xTaskRemoveFromEventList>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e007      	b.n	8007910 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007904:	3301      	adds	r3, #1
 8007906:	b2db      	uxtb	r3, r3
 8007908:	b25a      	sxtb	r2, r3
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007910:	2301      	movs	r3, #1
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
 8007914:	e001      	b.n	800791a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007916:	2300      	movs	r3, #0
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007926:	4618      	mov	r0, r3
 8007928:	3738      	adds	r7, #56	; 0x38
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	; 0x38
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800793a:	2300      	movs	r3, #0
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	623b      	str	r3, [r7, #32]
 800795e:	e7fe      	b.n	800795e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <xQueueSemaphoreTake+0x4c>
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	e7fe      	b.n	800797a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800797c:	f000 ff18 	bl	80087b0 <xTaskGetSchedulerState>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <xQueueSemaphoreTake+0x5c>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <xQueueSemaphoreTake+0x60>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <xQueueSemaphoreTake+0x62>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <xQueueSemaphoreTake+0x7a>
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e7fe      	b.n	80079a8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079aa:	f7ff fd57 	bl	800745c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d024      	beq.n	8007a04 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	1e5a      	subs	r2, r3, #1
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079ca:	f001 f827 	bl	8008a1c <pvTaskIncrementMutexHeldCount>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	3310      	adds	r3, #16
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fd2f 	bl	8008444 <xTaskRemoveFromEventList>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079ec:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <xQueueSemaphoreTake+0x20c>)
 80079ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079fc:	f7ff fd5c 	bl	80074b8 <vPortExitCritical>
				return pdPASS;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e096      	b.n	8007b32 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <xQueueSemaphoreTake+0xf4>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e7fe      	b.n	8007a22 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a24:	f7ff fd48 	bl	80074b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e082      	b.n	8007b32 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a32:	f107 030c 	add.w	r3, r7, #12
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fd66 	bl	8008508 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a40:	f7ff fd3a 	bl	80074b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a44:	f000 fb1e 	bl	8008084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a48:	f7ff fd08 	bl	800745c <vPortEnterCritical>
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a52:	b25b      	sxtb	r3, r3
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d103      	bne.n	8007a62 <xQueueSemaphoreTake+0x132>
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d103      	bne.n	8007a78 <xQueueSemaphoreTake+0x148>
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a78:	f7ff fd1e 	bl	80074b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a7c:	463a      	mov	r2, r7
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fd55 	bl	8008534 <xTaskCheckForTimeOut>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d132      	bne.n	8007af6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a92:	f000 f8bf 	bl	8007c14 <prvIsQueueEmpty>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d026      	beq.n	8007aea <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d109      	bne.n	8007ab8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007aa4:	f7ff fcda 	bl	800745c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fe9d 	bl	80087ec <xTaskPriorityInherit>
 8007ab2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ab4:	f7ff fd00 	bl	80074b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 fc9b 	bl	80083fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ac8:	f000 f852 	bl	8007b70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007acc:	f000 fae8 	bl	80080a0 <xTaskResumeAll>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f47f af69 	bne.w	80079aa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007ad8:	4b18      	ldr	r3, [pc, #96]	; (8007b3c <xQueueSemaphoreTake+0x20c>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	e75f      	b.n	80079aa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aec:	f000 f840 	bl	8007b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007af0:	f000 fad6 	bl	80080a0 <xTaskResumeAll>
 8007af4:	e759      	b.n	80079aa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af8:	f000 f83a 	bl	8007b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007afc:	f000 fad0 	bl	80080a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b02:	f000 f887 	bl	8007c14 <prvIsQueueEmpty>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f43f af4e 	beq.w	80079aa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00d      	beq.n	8007b30 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007b14:	f7ff fca2 	bl	800745c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1a:	f000 f811 	bl	8007b40 <prvGetDisinheritPriorityAfterTimeout>
 8007b1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fee0 	bl	80088ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b2c:	f7ff fcc4 	bl	80074b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3738      	adds	r7, #56	; 0x38
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	e000ed04 	.word	0xe000ed04

08007b40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d006      	beq.n	8007b5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f1c3 0307 	rsb	r3, r3, #7
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e001      	b.n	8007b62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b62:	68fb      	ldr	r3, [r7, #12]
	}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b78:	f7ff fc70 	bl	800745c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b84:	e011      	b.n	8007baa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d012      	beq.n	8007bb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3324      	adds	r3, #36	; 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fc56 	bl	8008444 <xTaskRemoveFromEventList>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b9e:	f000 fd29 	bl	80085f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dce9      	bgt.n	8007b86 <prvUnlockQueue+0x16>
 8007bb2:	e000      	b.n	8007bb6 <prvUnlockQueue+0x46>
					break;
 8007bb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bbe:	f7ff fc7b 	bl	80074b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bc2:	f7ff fc4b 	bl	800745c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bce:	e011      	b.n	8007bf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d012      	beq.n	8007bfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3310      	adds	r3, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fc31 	bl	8008444 <xTaskRemoveFromEventList>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007be8:	f000 fd04 	bl	80085f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dce9      	bgt.n	8007bd0 <prvUnlockQueue+0x60>
 8007bfc:	e000      	b.n	8007c00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	22ff      	movs	r2, #255	; 0xff
 8007c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c08:	f7ff fc56 	bl	80074b8 <vPortExitCritical>
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c1c:	f7ff fc1e 	bl	800745c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e001      	b.n	8007c32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c32:	f7ff fc41 	bl	80074b8 <vPortExitCritical>

	return xReturn;
 8007c36:	68fb      	ldr	r3, [r7, #12]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08e      	sub	sp, #56	; 0x38
 8007c44:	af04      	add	r7, sp, #16
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <xTaskCreateStatic+0x28>
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	623b      	str	r3, [r7, #32]
 8007c66:	e7fe      	b.n	8007c66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <xTaskCreateStatic+0x42>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e7fe      	b.n	8007c80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c82:	2364      	movs	r3, #100	; 0x64
 8007c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b64      	cmp	r3, #100	; 0x64
 8007c8a:	d009      	beq.n	8007ca0 <xTaskCreateStatic+0x60>
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e7fe      	b.n	8007c9e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ca0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01e      	beq.n	8007ce6 <xTaskCreateStatic+0xa6>
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01b      	beq.n	8007ce6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9303      	str	r3, [sp, #12]
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f850 	bl	8007d7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce0:	f000 f8d4 	bl	8007e8c <prvAddNewTaskToReadyList>
 8007ce4:	e001      	b.n	8007cea <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cea:	697b      	ldr	r3, [r7, #20]
	}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3728      	adds	r7, #40	; 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08c      	sub	sp, #48	; 0x30
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fff9 	bl	8006d00 <pvPortMalloc>
 8007d0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00e      	beq.n	8007d34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d16:	2064      	movs	r0, #100	; 0x64
 8007d18:	f7fe fff2 	bl	8006d00 <pvPortMalloc>
 8007d1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
 8007d2a:	e005      	b.n	8007d38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d2c:	6978      	ldr	r0, [r7, #20]
 8007d2e:	f7ff f8a9 	bl	8006e84 <vPortFree>
 8007d32:	e001      	b.n	8007d38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d017      	beq.n	8007d6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	9302      	str	r3, [sp, #8]
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	9301      	str	r3, [sp, #4]
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f80e 	bl	8007d7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d62:	69f8      	ldr	r0, [r7, #28]
 8007d64:	f000 f892 	bl	8007e8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	e002      	b.n	8007d74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d74:	69bb      	ldr	r3, [r7, #24]
	}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b088      	sub	sp, #32
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	3b01      	subs	r3, #1
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	f023 0307 	bic.w	r3, r3, #7
 8007da4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <prvInitialiseNewTask+0x46>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e7fe      	b.n	8007dc2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01f      	beq.n	8007e0a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	e012      	b.n	8007df6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	7819      	ldrb	r1, [r3, #0]
 8007dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	3334      	adds	r3, #52	; 0x34
 8007de0:	460a      	mov	r2, r1
 8007de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	2b1f      	cmp	r3, #31
 8007dfa:	d9e9      	bls.n	8007dd0 <prvInitialiseNewTask+0x52>
 8007dfc:	e000      	b.n	8007e00 <prvInitialiseNewTask+0x82>
			{
				break;
 8007dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007e08:	e003      	b.n	8007e12 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	2b06      	cmp	r3, #6
 8007e16:	d901      	bls.n	8007e1c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e18:	2306      	movs	r3, #6
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	3304      	adds	r3, #4
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f95a 	bl	80070ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	3318      	adds	r3, #24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff f955 	bl	80070ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f1c3 0207 	rsb	r2, r3, #7
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	68f9      	ldr	r1, [r7, #12]
 8007e6a:	69b8      	ldr	r0, [r7, #24]
 8007e6c:	f7ff f9d2 	bl	8007214 <pxPortInitialiseStack>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e82:	bf00      	nop
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e94:	f7ff fae2 	bl	800745c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e98:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <prvAddNewTaskToReadyList+0xb8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <prvAddNewTaskToReadyList+0xb8>)
 8007ea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ea2:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <prvAddNewTaskToReadyList+0xbc>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007eaa:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <prvAddNewTaskToReadyList+0xbc>)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007eb0:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <prvAddNewTaskToReadyList+0xb8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d110      	bne.n	8007eda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007eb8:	f000 fbc0 	bl	800863c <prvInitialiseTaskLists>
 8007ebc:	e00d      	b.n	8007eda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ebe:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <prvAddNewTaskToReadyList+0xc0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <prvAddNewTaskToReadyList+0xbc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d802      	bhi.n	8007eda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	; (8007f48 <prvAddNewTaskToReadyList+0xbc>)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eda:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <prvAddNewTaskToReadyList+0xc4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <prvAddNewTaskToReadyList+0xc4>)
 8007ee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	2201      	movs	r2, #1
 8007eea:	409a      	lsls	r2, r3
 8007eec:	4b19      	ldr	r3, [pc, #100]	; (8007f54 <prvAddNewTaskToReadyList+0xc8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <prvAddNewTaskToReadyList+0xc8>)
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <prvAddNewTaskToReadyList+0xcc>)
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f7ff f8fa 	bl	8007106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f12:	f7ff fad1 	bl	80074b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f16:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <prvAddNewTaskToReadyList+0xc0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddNewTaskToReadyList+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d207      	bcs.n	8007f3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <prvAddNewTaskToReadyList+0xd0>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20001888 	.word	0x20001888
 8007f48:	20001788 	.word	0x20001788
 8007f4c:	20001894 	.word	0x20001894
 8007f50:	200018a4 	.word	0x200018a4
 8007f54:	20001890 	.word	0x20001890
 8007f58:	2000178c 	.word	0x2000178c
 8007f5c:	e000ed04 	.word	0xe000ed04

08007f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f72:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <vTaskDelay+0x60>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <vTaskDelay+0x2e>
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	60bb      	str	r3, [r7, #8]
 8007f8c:	e7fe      	b.n	8007f8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007f8e:	f000 f879 	bl	8008084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fe61 	bl	8008c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f9a:	f000 f881 	bl	80080a0 <xTaskResumeAll>
 8007f9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d107      	bne.n	8007fb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <vTaskDelay+0x64>)
 8007fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200018b0 	.word	0x200018b0
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fd6:	463a      	mov	r2, r7
 8007fd8:	1d39      	adds	r1, r7, #4
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f974 	bl	80092cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	9202      	str	r2, [sp, #8]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	460a      	mov	r2, r1
 8007ff6:	491d      	ldr	r1, [pc, #116]	; (800806c <vTaskStartScheduler+0xa4>)
 8007ff8:	481d      	ldr	r0, [pc, #116]	; (8008070 <vTaskStartScheduler+0xa8>)
 8007ffa:	f7ff fe21 	bl	8007c40 <xTaskCreateStatic>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <vTaskStartScheduler+0xac>)
 8008002:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008004:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <vTaskStartScheduler+0xac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e001      	b.n	8008016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d115      	bne.n	8008048 <vTaskStartScheduler+0x80>
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800802e:	4b12      	ldr	r3, [pc, #72]	; (8008078 <vTaskStartScheduler+0xb0>)
 8008030:	f04f 32ff 	mov.w	r2, #4294967295
 8008034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008036:	4b11      	ldr	r3, [pc, #68]	; (800807c <vTaskStartScheduler+0xb4>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <vTaskStartScheduler+0xb8>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008042:	f7ff f96d 	bl	8007320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008046:	e00d      	b.n	8008064 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d109      	bne.n	8008064 <vTaskStartScheduler+0x9c>
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e7fe      	b.n	8008062 <vTaskStartScheduler+0x9a>
}
 8008064:	bf00      	nop
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	08010428 	.word	0x08010428
 8008070:	0800860d 	.word	0x0800860d
 8008074:	200018ac 	.word	0x200018ac
 8008078:	200018a8 	.word	0x200018a8
 800807c:	20001894 	.word	0x20001894
 8008080:	2000188c 	.word	0x2000188c

08008084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <vTaskSuspendAll+0x18>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	4a03      	ldr	r2, [pc, #12]	; (800809c <vTaskSuspendAll+0x18>)
 8008090:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008092:	bf00      	nop
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200018b0 	.word	0x200018b0

080080a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ae:	4b41      	ldr	r3, [pc, #260]	; (80081b4 <xTaskResumeAll+0x114>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <xTaskResumeAll+0x2a>
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	e7fe      	b.n	80080c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080ca:	f7ff f9c7 	bl	800745c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080ce:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <xTaskResumeAll+0x114>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	4a37      	ldr	r2, [pc, #220]	; (80081b4 <xTaskResumeAll+0x114>)
 80080d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <xTaskResumeAll+0x114>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d161      	bne.n	80081a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080e0:	4b35      	ldr	r3, [pc, #212]	; (80081b8 <xTaskResumeAll+0x118>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05d      	beq.n	80081a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080e8:	e02e      	b.n	8008148 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b34      	ldr	r3, [pc, #208]	; (80081bc <xTaskResumeAll+0x11c>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3318      	adds	r3, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff f862 	bl	80071c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff f85d 	bl	80071c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	2201      	movs	r2, #1
 800810c:	409a      	lsls	r2, r3
 800810e:	4b2c      	ldr	r3, [pc, #176]	; (80081c0 <xTaskResumeAll+0x120>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4313      	orrs	r3, r2
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <xTaskResumeAll+0x120>)
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4a27      	ldr	r2, [pc, #156]	; (80081c4 <xTaskResumeAll+0x124>)
 8008126:	441a      	add	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fe ffe9 	bl	8007106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <xTaskResumeAll+0x128>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008142:	4b22      	ldr	r3, [pc, #136]	; (80081cc <xTaskResumeAll+0x12c>)
 8008144:	2201      	movs	r2, #1
 8008146:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008148:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <xTaskResumeAll+0x11c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1cc      	bne.n	80080ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008156:	f000 fb0b 	bl	8008770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <xTaskResumeAll+0x130>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008166:	f000 f837 	bl	80081d8 <xTaskIncrementTick>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <xTaskResumeAll+0x12c>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3b01      	subs	r3, #1
 800817a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f1      	bne.n	8008166 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008182:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <xTaskResumeAll+0x130>)
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008188:	4b10      	ldr	r3, [pc, #64]	; (80081cc <xTaskResumeAll+0x12c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <xTaskResumeAll+0x134>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a4:	f7ff f988 	bl	80074b8 <vPortExitCritical>

	return xAlreadyYielded;
 80081a8:	68bb      	ldr	r3, [r7, #8]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200018b0 	.word	0x200018b0
 80081b8:	20001888 	.word	0x20001888
 80081bc:	20001848 	.word	0x20001848
 80081c0:	20001890 	.word	0x20001890
 80081c4:	2000178c 	.word	0x2000178c
 80081c8:	20001788 	.word	0x20001788
 80081cc:	2000189c 	.word	0x2000189c
 80081d0:	20001898 	.word	0x20001898
 80081d4:	e000ed04 	.word	0xe000ed04

080081d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e2:	4b4e      	ldr	r3, [pc, #312]	; (800831c <xTaskIncrementTick+0x144>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 8087 	bne.w	80082fa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081ec:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <xTaskIncrementTick+0x148>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081f4:	4a4a      	ldr	r2, [pc, #296]	; (8008320 <xTaskIncrementTick+0x148>)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d11f      	bne.n	8008240 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008200:	4b48      	ldr	r3, [pc, #288]	; (8008324 <xTaskIncrementTick+0x14c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <xTaskIncrementTick+0x46>
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	e7fe      	b.n	800821c <xTaskIncrementTick+0x44>
 800821e:	4b41      	ldr	r3, [pc, #260]	; (8008324 <xTaskIncrementTick+0x14c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	4b40      	ldr	r3, [pc, #256]	; (8008328 <xTaskIncrementTick+0x150>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a3e      	ldr	r2, [pc, #248]	; (8008324 <xTaskIncrementTick+0x14c>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	4a3e      	ldr	r2, [pc, #248]	; (8008328 <xTaskIncrementTick+0x150>)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b3e      	ldr	r3, [pc, #248]	; (800832c <xTaskIncrementTick+0x154>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3301      	adds	r3, #1
 8008238:	4a3c      	ldr	r2, [pc, #240]	; (800832c <xTaskIncrementTick+0x154>)
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	f000 fa98 	bl	8008770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008240:	4b3b      	ldr	r3, [pc, #236]	; (8008330 <xTaskIncrementTick+0x158>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	d348      	bcc.n	80082dc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824a:	4b36      	ldr	r3, [pc, #216]	; (8008324 <xTaskIncrementTick+0x14c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008254:	4b36      	ldr	r3, [pc, #216]	; (8008330 <xTaskIncrementTick+0x158>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	601a      	str	r2, [r3, #0]
					break;
 800825c:	e03e      	b.n	80082dc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b31      	ldr	r3, [pc, #196]	; (8008324 <xTaskIncrementTick+0x14c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d203      	bcs.n	800827e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008276:	4a2e      	ldr	r2, [pc, #184]	; (8008330 <xTaskIncrementTick+0x158>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800827c:	e02e      	b.n	80082dc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	3304      	adds	r3, #4
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe ff9c 	bl	80071c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	3318      	adds	r3, #24
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe ff93 	bl	80071c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	2201      	movs	r2, #1
 80082a0:	409a      	lsls	r2, r3
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <xTaskIncrementTick+0x15c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	4a22      	ldr	r2, [pc, #136]	; (8008334 <xTaskIncrementTick+0x15c>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a1f      	ldr	r2, [pc, #124]	; (8008338 <xTaskIncrementTick+0x160>)
 80082ba:	441a      	add	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe ff1f 	bl	8007106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <xTaskIncrementTick+0x164>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d3b9      	bcc.n	800824a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082da:	e7b6      	b.n	800824a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <xTaskIncrementTick+0x164>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	4915      	ldr	r1, [pc, #84]	; (8008338 <xTaskIncrementTick+0x160>)
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d907      	bls.n	8008304 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e004      	b.n	8008304 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082fa:	4b11      	ldr	r3, [pc, #68]	; (8008340 <xTaskIncrementTick+0x168>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3301      	adds	r3, #1
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <xTaskIncrementTick+0x168>)
 8008302:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTaskIncrementTick+0x16c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800830c:	2301      	movs	r3, #1
 800830e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008310:	697b      	ldr	r3, [r7, #20]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200018b0 	.word	0x200018b0
 8008320:	2000188c 	.word	0x2000188c
 8008324:	20001840 	.word	0x20001840
 8008328:	20001844 	.word	0x20001844
 800832c:	200018a0 	.word	0x200018a0
 8008330:	200018a8 	.word	0x200018a8
 8008334:	20001890 	.word	0x20001890
 8008338:	2000178c 	.word	0x2000178c
 800833c:	20001788 	.word	0x20001788
 8008340:	20001898 	.word	0x20001898
 8008344:	2000189c 	.word	0x2000189c

08008348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <vTaskSwitchContext+0xa0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008356:	4b25      	ldr	r3, [pc, #148]	; (80083ec <vTaskSwitchContext+0xa4>)
 8008358:	2201      	movs	r2, #1
 800835a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800835c:	e03e      	b.n	80083dc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800835e:	4b23      	ldr	r3, [pc, #140]	; (80083ec <vTaskSwitchContext+0xa4>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008364:	4b22      	ldr	r3, [pc, #136]	; (80083f0 <vTaskSwitchContext+0xa8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	fab3 f383 	clz	r3, r3
 8008370:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	f1c3 031f 	rsb	r3, r3, #31
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	491e      	ldr	r1, [pc, #120]	; (80083f4 <vTaskSwitchContext+0xac>)
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	440b      	add	r3, r1
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	e7fe      	b.n	80083a0 <vTaskSwitchContext+0x58>
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <vTaskSwitchContext+0xac>)
 80083ae:	4413      	add	r3, r2
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	3308      	adds	r3, #8
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d104      	bne.n	80083d2 <vTaskSwitchContext+0x8a>
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a07      	ldr	r2, [pc, #28]	; (80083f8 <vTaskSwitchContext+0xb0>)
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	200018b0 	.word	0x200018b0
 80083ec:	2000189c 	.word	0x2000189c
 80083f0:	20001890 	.word	0x20001890
 80083f4:	2000178c 	.word	0x2000178c
 80083f8:	20001788 	.word	0x20001788

080083fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <vTaskPlaceOnEventList+0x24>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e7fe      	b.n	800841e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <vTaskPlaceOnEventList+0x44>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3318      	adds	r3, #24
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fe fe90 	bl	800714e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800842e:	2101      	movs	r1, #1
 8008430:	6838      	ldr	r0, [r7, #0]
 8008432:	f000 fc13 	bl	8008c5c <prvAddCurrentTaskToDelayedList>
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20001788 	.word	0x20001788

08008444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <xTaskRemoveFromEventList+0x2a>
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e7fe      	b.n	800846c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3318      	adds	r3, #24
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fea4 	bl	80071c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008478:	4b1d      	ldr	r3, [pc, #116]	; (80084f0 <xTaskRemoveFromEventList+0xac>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d11c      	bne.n	80084ba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	3304      	adds	r3, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fe9b 	bl	80071c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	2201      	movs	r2, #1
 8008490:	409a      	lsls	r2, r3
 8008492:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <xTaskRemoveFromEventList+0xb0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4313      	orrs	r3, r2
 8008498:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <xTaskRemoveFromEventList+0xb0>)
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <xTaskRemoveFromEventList+0xb4>)
 80084aa:	441a      	add	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fe27 	bl	8007106 <vListInsertEnd>
 80084b8:	e005      	b.n	80084c6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3318      	adds	r3, #24
 80084be:	4619      	mov	r1, r3
 80084c0:	480e      	ldr	r0, [pc, #56]	; (80084fc <xTaskRemoveFromEventList+0xb8>)
 80084c2:	f7fe fe20 	bl	8007106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ca:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <xTaskRemoveFromEventList+0xbc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d905      	bls.n	80084e0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084d4:	2301      	movs	r3, #1
 80084d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <xTaskRemoveFromEventList+0xc0>)
 80084da:	2201      	movs	r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e001      	b.n	80084e4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084e4:	697b      	ldr	r3, [r7, #20]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200018b0 	.word	0x200018b0
 80084f4:	20001890 	.word	0x20001890
 80084f8:	2000178c 	.word	0x2000178c
 80084fc:	20001848 	.word	0x20001848
 8008500:	20001788 	.word	0x20001788
 8008504:	2000189c 	.word	0x2000189c

08008508 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <vTaskInternalSetTimeOutState+0x24>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <vTaskInternalSetTimeOutState+0x28>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	605a      	str	r2, [r3, #4]
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	200018a0 	.word	0x200018a0
 8008530:	2000188c 	.word	0x2000188c

08008534 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <xTaskCheckForTimeOut+0x24>
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	e7fe      	b.n	8008556 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <xTaskCheckForTimeOut+0x3e>
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e7fe      	b.n	8008570 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008572:	f7fe ff73 	bl	800745c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008576:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <xTaskCheckForTimeOut+0xb8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d102      	bne.n	8008596 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	e023      	b.n	80085de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <xTaskCheckForTimeOut+0xbc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d007      	beq.n	80085b2 <xTaskCheckForTimeOut+0x7e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d802      	bhi.n	80085b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085ac:	2301      	movs	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	e015      	b.n	80085de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d90b      	bls.n	80085d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff ff9d 	bl	8008508 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
 80085d2:	e004      	b.n	80085de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085da:	2301      	movs	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085de:	f7fe ff6b 	bl	80074b8 <vPortExitCritical>

	return xReturn;
 80085e2:	69fb      	ldr	r3, [r7, #28]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	2000188c 	.word	0x2000188c
 80085f0:	200018a0 	.word	0x200018a0

080085f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085f8:	4b03      	ldr	r3, [pc, #12]	; (8008608 <vTaskMissedYield+0x14>)
 80085fa:	2201      	movs	r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
}
 80085fe:	bf00      	nop
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	2000189c 	.word	0x2000189c

0800860c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008614:	f000 f852 	bl	80086bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <prvIdleTask+0x28>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d9f9      	bls.n	8008614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <prvIdleTask+0x2c>)
 8008622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008630:	e7f0      	b.n	8008614 <prvIdleTask+0x8>
 8008632:	bf00      	nop
 8008634:	2000178c 	.word	0x2000178c
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	e00c      	b.n	8008662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4a12      	ldr	r2, [pc, #72]	; (800869c <prvInitialiseTaskLists+0x60>)
 8008654:	4413      	add	r3, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fd28 	bl	80070ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3301      	adds	r3, #1
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d9ef      	bls.n	8008648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008668:	480d      	ldr	r0, [pc, #52]	; (80086a0 <prvInitialiseTaskLists+0x64>)
 800866a:	f7fe fd1f 	bl	80070ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800866e:	480d      	ldr	r0, [pc, #52]	; (80086a4 <prvInitialiseTaskLists+0x68>)
 8008670:	f7fe fd1c 	bl	80070ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008674:	480c      	ldr	r0, [pc, #48]	; (80086a8 <prvInitialiseTaskLists+0x6c>)
 8008676:	f7fe fd19 	bl	80070ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800867a:	480c      	ldr	r0, [pc, #48]	; (80086ac <prvInitialiseTaskLists+0x70>)
 800867c:	f7fe fd16 	bl	80070ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008680:	480b      	ldr	r0, [pc, #44]	; (80086b0 <prvInitialiseTaskLists+0x74>)
 8008682:	f7fe fd13 	bl	80070ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <prvInitialiseTaskLists+0x78>)
 8008688:	4a05      	ldr	r2, [pc, #20]	; (80086a0 <prvInitialiseTaskLists+0x64>)
 800868a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <prvInitialiseTaskLists+0x7c>)
 800868e:	4a05      	ldr	r2, [pc, #20]	; (80086a4 <prvInitialiseTaskLists+0x68>)
 8008690:	601a      	str	r2, [r3, #0]
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	2000178c 	.word	0x2000178c
 80086a0:	20001818 	.word	0x20001818
 80086a4:	2000182c 	.word	0x2000182c
 80086a8:	20001848 	.word	0x20001848
 80086ac:	2000185c 	.word	0x2000185c
 80086b0:	20001874 	.word	0x20001874
 80086b4:	20001840 	.word	0x20001840
 80086b8:	20001844 	.word	0x20001844

080086bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086c2:	e019      	b.n	80086f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086c4:	f7fe feca 	bl	800745c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <prvCheckTasksWaitingTermination+0x4c>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fd73 	bl	80071c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <prvCheckTasksWaitingTermination+0x50>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3b01      	subs	r3, #1
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <prvCheckTasksWaitingTermination+0x50>)
 80086e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086e4:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <prvCheckTasksWaitingTermination+0x54>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	4a09      	ldr	r2, [pc, #36]	; (8008710 <prvCheckTasksWaitingTermination+0x54>)
 80086ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ee:	f7fe fee3 	bl	80074b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f80e 	bl	8008714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <prvCheckTasksWaitingTermination+0x54>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e1      	bne.n	80086c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	2000185c 	.word	0x2000185c
 800870c:	20001888 	.word	0x20001888
 8008710:	20001870 	.word	0x20001870

08008714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fbaa 	bl	8006e84 <vPortFree>
				vPortFree( pxTCB );
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe fba7 	bl	8006e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008736:	e017      	b.n	8008768 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800873e:	2b01      	cmp	r3, #1
 8008740:	d103      	bne.n	800874a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fe fb9e 	bl	8006e84 <vPortFree>
	}
 8008748:	e00e      	b.n	8008768 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008750:	2b02      	cmp	r3, #2
 8008752:	d009      	beq.n	8008768 <prvDeleteTCB+0x54>
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e7fe      	b.n	8008766 <prvDeleteTCB+0x52>
	}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvResetNextTaskUnblockTime+0x38>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <prvResetNextTaskUnblockTime+0x3c>)
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008788:	e008      	b.n	800879c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878a:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <prvResetNextTaskUnblockTime+0x38>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4a04      	ldr	r2, [pc, #16]	; (80087ac <prvResetNextTaskUnblockTime+0x3c>)
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20001840 	.word	0x20001840
 80087ac:	200018a8 	.word	0x200018a8

080087b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087b6:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <xTaskGetSchedulerState+0x34>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087be:	2301      	movs	r3, #1
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	e008      	b.n	80087d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c4:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <xTaskGetSchedulerState+0x38>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087cc:	2302      	movs	r3, #2
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	e001      	b.n	80087d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087d6:	687b      	ldr	r3, [r7, #4]
	}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	20001894 	.word	0x20001894
 80087e8:	200018b0 	.word	0x200018b0

080087ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d069      	beq.n	80088d6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008806:	4b36      	ldr	r3, [pc, #216]	; (80088e0 <xTaskPriorityInherit+0xf4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d259      	bcs.n	80088c4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	db06      	blt.n	8008826 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008818:	4b31      	ldr	r3, [pc, #196]	; (80088e0 <xTaskPriorityInherit+0xf4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	f1c3 0207 	rsb	r2, r3, #7
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6959      	ldr	r1, [r3, #20]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4a2b      	ldr	r2, [pc, #172]	; (80088e4 <xTaskPriorityInherit+0xf8>)
 8008838:	4413      	add	r3, r2
 800883a:	4299      	cmp	r1, r3
 800883c:	d13a      	bne.n	80088b4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	3304      	adds	r3, #4
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fcbc 	bl	80071c0 <uxListRemove>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d115      	bne.n	800887a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008852:	4924      	ldr	r1, [pc, #144]	; (80088e4 <xTaskPriorityInherit+0xf8>)
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xTaskPriorityInherit+0x8e>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	2201      	movs	r2, #1
 800886a:	fa02 f303 	lsl.w	r3, r2, r3
 800886e:	43da      	mvns	r2, r3
 8008870:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <xTaskPriorityInherit+0xfc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4013      	ands	r3, r2
 8008876:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <xTaskPriorityInherit+0xfc>)
 8008878:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800887a:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <xTaskPriorityInherit+0xf4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	2201      	movs	r2, #1
 800888a:	409a      	lsls	r2, r3
 800888c:	4b16      	ldr	r3, [pc, #88]	; (80088e8 <xTaskPriorityInherit+0xfc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4313      	orrs	r3, r2
 8008892:	4a15      	ldr	r2, [pc, #84]	; (80088e8 <xTaskPriorityInherit+0xfc>)
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4a10      	ldr	r2, [pc, #64]	; (80088e4 <xTaskPriorityInherit+0xf8>)
 80088a4:	441a      	add	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe fc2a 	bl	8007106 <vListInsertEnd>
 80088b2:	e004      	b.n	80088be <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <xTaskPriorityInherit+0xf4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088be:	2301      	movs	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e008      	b.n	80088d6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <xTaskPriorityInherit+0xf4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d201      	bcs.n	80088d6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088d2:	2301      	movs	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088d6:	68fb      	ldr	r3, [r7, #12]
	}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20001788 	.word	0x20001788
 80088e4:	2000178c 	.word	0x2000178c
 80088e8:	20001890 	.word	0x20001890

080088ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8081 	beq.w	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	e7fe      	b.n	8008920 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d202      	bcs.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e002      	b.n	8008938 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	429a      	cmp	r2, r3
 8008940:	d062      	beq.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	429a      	cmp	r2, r3
 800894a:	d15d      	bne.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800894c:	4b30      	ldr	r3, [pc, #192]	; (8008a10 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	429a      	cmp	r2, r3
 8008954:	d109      	bne.n	800896a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	60bb      	str	r3, [r7, #8]
 8008968:	e7fe      	b.n	8008968 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	db04      	blt.n	8008988 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f1c3 0207 	rsb	r2, r3, #7
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6959      	ldr	r1, [r3, #20]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4a1f      	ldr	r2, [pc, #124]	; (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008998:	4413      	add	r3, r2
 800899a:	4299      	cmp	r1, r3
 800899c:	d134      	bne.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fc0c 	bl	80071c0 <uxListRemove>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d115      	bne.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b2:	4918      	ldr	r1, [pc, #96]	; (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80089b4:	4613      	mov	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	2201      	movs	r2, #1
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43da      	mvns	r2, r3
 80089d0:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4013      	ands	r3, r2
 80089d6:	4a10      	ldr	r2, [pc, #64]	; (8008a18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80089d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	2201      	movs	r2, #1
 80089e0:	409a      	lsls	r2, r3
 80089e2:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	4a0b      	ldr	r2, [pc, #44]	; (8008a18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4a06      	ldr	r2, [pc, #24]	; (8008a14 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80089fa:	441a      	add	r2, r3
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f7fe fb7f 	bl	8007106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a08:	bf00      	nop
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20001788 	.word	0x20001788
 8008a14:	2000178c 	.word	0x2000178c
 8008a18:	20001890 	.word	0x20001890

08008a1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a2e:	3201      	adds	r2, #1
 8008a30:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a34:	681b      	ldr	r3, [r3, #0]
	}
 8008a36:	4618      	mov	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	20001788 	.word	0x20001788

08008a44 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008a52:	f7fe fd03 	bl	800745c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d01a      	beq.n	8008a9a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008a64:	4b22      	ldr	r3, [pc, #136]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	43d2      	mvns	r2, r2
 8008a6e:	400a      	ands	r2, r1
 8008a70:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008a72:	4b1f      	ldr	r3, [pc, #124]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a82:	2101      	movs	r1, #1
 8008a84:	6838      	ldr	r0, [r7, #0]
 8008a86:	f000 f8e9 	bl	8008c5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <xTaskNotifyWait+0xb0>)
 8008a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a9a:	f7fe fd0d 	bl	80074b8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008a9e:	f7fe fcdd 	bl	800745c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d002      	beq.n	8008ac6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	e008      	b.n	8008ad8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	43d2      	mvns	r2, r2
 8008ad0:	400a      	ands	r2, r1
 8008ad2:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <xTaskNotifyWait+0xac>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8008ae2:	f7fe fce9 	bl	80074b8 <vPortExitCritical>

		return xReturn;
 8008ae6:	697b      	ldr	r3, [r7, #20]
	}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20001788 	.word	0x20001788
 8008af4:	e000ed04 	.word	0xe000ed04

08008af8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08a      	sub	sp, #40	; 0x28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <xTaskGenericNotify+0x2e>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	e7fe      	b.n	8008b24 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008b2a:	f7fe fc97 	bl	800745c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008b42:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d827      	bhi.n	8008ba2 <xTaskGenericNotify+0xaa>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <xTaskGenericNotify+0x60>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008b7b 	.word	0x08008b7b
 8008b64:	08008b87 	.word	0x08008b87
 8008b68:	08008b8f 	.word	0x08008b8f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8008b78:	e025      	b.n	8008bc6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8008b84:	e01f      	b.n	8008bc6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8008b8c:	e01b      	b.n	8008bc6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b8e:	7ffb      	ldrb	r3, [r7, #31]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d003      	beq.n	8008b9c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b9a:	e014      	b.n	8008bc6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008ba0:	e011      	b.n	8008bc6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008baa:	d00b      	beq.n	8008bc4 <xTaskGenericNotify+0xcc>
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e7fe      	b.n	8008bbe <xTaskGenericNotify+0xc6>
					break;
 8008bc0:	bf00      	nop
 8008bc2:	e000      	b.n	8008bc6 <xTaskGenericNotify+0xce>

					break;
 8008bc4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008bc6:	7ffb      	ldrb	r3, [r7, #31]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d138      	bne.n	8008c3e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe faf5 	bl	80071c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	2201      	movs	r2, #1
 8008bdc:	409a      	lsls	r2, r3
 8008bde:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <xTaskGenericNotify+0x154>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <xTaskGenericNotify+0x154>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <xTaskGenericNotify+0x158>)
 8008bf6:	441a      	add	r2, r3
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe fa81 	bl	8007106 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <xTaskGenericNotify+0x128>
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	e7fe      	b.n	8008c1e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <xTaskGenericNotify+0x15c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d907      	bls.n	8008c3e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <xTaskGenericNotify+0x160>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008c3e:	f7fe fc3b 	bl	80074b8 <vPortExitCritical>

		return xReturn;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3728      	adds	r7, #40	; 0x28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20001890 	.word	0x20001890
 8008c50:	2000178c 	.word	0x2000178c
 8008c54:	20001788 	.word	0x20001788
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c66:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6c:	4b28      	ldr	r3, [pc, #160]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe faa4 	bl	80071c0 <uxListRemove>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10b      	bne.n	8008c96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c7e:	4b24      	ldr	r3, [pc, #144]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	2201      	movs	r2, #1
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43da      	mvns	r2, r3
 8008c8c:	4b21      	ldr	r3, [pc, #132]	; (8008d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4013      	ands	r3, r2
 8008c92:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d10a      	bne.n	8008cb4 <prvAddCurrentTaskToDelayedList+0x58>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ca4:	4b1a      	ldr	r3, [pc, #104]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	4619      	mov	r1, r3
 8008cac:	481a      	ldr	r0, [pc, #104]	; (8008d18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cae:	f7fe fa2a 	bl	8007106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cb2:	e026      	b.n	8008d02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4413      	add	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cbc:	4b14      	ldr	r3, [pc, #80]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d209      	bcs.n	8008ce0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ccc:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4610      	mov	r0, r2
 8008cda:	f7fe fa38 	bl	800714e <vListInsert>
}
 8008cde:	e010      	b.n	8008d02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fe fa2e 	bl	800714e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d202      	bcs.n	8008d02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6013      	str	r3, [r2, #0]
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000188c 	.word	0x2000188c
 8008d10:	20001788 	.word	0x20001788
 8008d14:	20001890 	.word	0x20001890
 8008d18:	20001874 	.word	0x20001874
 8008d1c:	20001844 	.word	0x20001844
 8008d20:	20001840 	.word	0x20001840
 8008d24:	200018a8 	.word	0x200018a8

08008d28 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08e      	sub	sp, #56	; 0x38
 8008d2c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8008d2e:	4a73      	ldr	r2, [pc, #460]	; (8008efc <MX_BlueNRG_MS_Init+0x1d4>)
 8008d30:	f107 031c 	add.w	r3, r7, #28
 8008d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d38:	6018      	str	r0, [r3, #0]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8008d3e:	4a70      	ldr	r2, [pc, #448]	; (8008f00 <MX_BlueNRG_MS_Init+0x1d8>)
 8008d40:	f107 0314 	add.w	r3, r7, #20
 8008d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d48:	6018      	str	r0, [r3, #0]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	8019      	strh	r1, [r3, #0]
  
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;
  
  User_Init();
 8008d4e:	f000 f908 	bl	8008f62 <User_Init>
  
  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8008d52:	2000      	movs	r0, #0
 8008d54:	f001 ffdc 	bl	800ad10 <BSP_PB_GetState>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	4b69      	ldr	r3, [pc, #420]	; (8008f04 <MX_BlueNRG_MS_Init+0x1dc>)
 8008d5e:	701a      	strb	r2, [r3, #0]
  
  hci_init(user_notify, NULL);
 8008d60:	2100      	movs	r1, #0
 8008d62:	4869      	ldr	r0, [pc, #420]	; (8008f08 <MX_BlueNRG_MS_Init+0x1e0>)
 8008d64:	f7fd fc56 	bl	8006614 <hci_init>
      
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8008d68:	1cba      	adds	r2, r7, #2
 8008d6a:	1d7b      	adds	r3, r7, #5
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fd fac7 	bl	8006302 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8008d74:	f7fd fb09 	bl	800638a <hci_reset>
  
  //HAL_Delay(100);
  delayMicroseconds(100000);
 8008d78:	4864      	ldr	r0, [pc, #400]	; (8008f0c <MX_BlueNRG_MS_Init+0x1e4>)
 8008d7a:	f001 f849 	bl	8009e10 <delayMicroseconds>
  
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8008d7e:	797b      	ldrb	r3, [r7, #5]
 8008d80:	4619      	mov	r1, r3
 8008d82:	887b      	ldrh	r3, [r7, #2]
 8008d84:	461a      	mov	r2, r3
 8008d86:	4862      	ldr	r0, [pc, #392]	; (8008f10 <MX_BlueNRG_MS_Init+0x1e8>)
 8008d88:	f003 f988 	bl	800c09c <printf>
  
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8008d8c:	797b      	ldrb	r3, [r7, #5]
 8008d8e:	2b30      	cmp	r3, #48	; 0x30
 8008d90:	d902      	bls.n	8008d98 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1; 
 8008d92:	4b60      	ldr	r3, [pc, #384]	; (8008f14 <MX_BlueNRG_MS_Init+0x1ec>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
  }
  
  if (BLE_Role == CLIENT) {
 8008d98:	4b5f      	ldr	r3, [pc, #380]	; (8008f18 <MX_BlueNRG_MS_Init+0x1f0>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	f107 021c 	add.w	r2, r7, #28
 8008da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dac:	6018      	str	r0, [r3, #0]
 8008dae:	3304      	adds	r3, #4
 8008db0:	8019      	strh	r1, [r3, #0]
 8008db2:	e008      	b.n	8008dc6 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	f107 0214 	add.w	r2, r7, #20
 8008dbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc0:	6018      	str	r0, [r3, #0]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	8019      	strh	r1, [r3, #0]
  }
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2106      	movs	r1, #6
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7fd f9fe 	bl	80061d0 <aci_hal_write_config_data>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8008dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008de0:	484e      	ldr	r0, [pc, #312]	; (8008f1c <MX_BlueNRG_MS_Init+0x1f4>)
 8008de2:	f003 f95b 	bl	800c09c <printf>
  }
  
  ret = aci_gatt_init();    
 8008de6:	f7fc fe8e 	bl	8005b06 <aci_gatt_init>
 8008dea:	4603      	mov	r3, r0
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 8008df4:	484a      	ldr	r0, [pc, #296]	; (8008f20 <MX_BlueNRG_MS_Init+0x1f8>)
 8008df6:	f003 f9dd 	bl	800c1b4 <puts>
  }
  
  if (BLE_Role == SERVER) {
 8008dfa:	4b47      	ldr	r3, [pc, #284]	; (8008f18 <MX_BlueNRG_MS_Init+0x1f0>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d11e      	bne.n	8008e40 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 8008e02:	4b44      	ldr	r3, [pc, #272]	; (8008f14 <MX_BlueNRG_MS_Init+0x1ec>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d10f      	bne.n	8008e2a <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8008e0a:	f107 020a 	add.w	r2, r7, #10
 8008e0e:	1dbb      	adds	r3, r7, #6
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	2207      	movs	r2, #7
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	2001      	movs	r0, #1
 8008e20:	f7fc fc40 	bl	80056a4 <aci_gap_init_IDB05A1>
 8008e24:	4603      	mov	r3, r0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
 8008e28:	e028      	b.n	8008e7c <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8008e2a:	1dbb      	adds	r3, r7, #6
 8008e2c:	f107 0208 	add.w	r2, r7, #8
 8008e30:	f107 010a 	add.w	r1, r7, #10
 8008e34:	2001      	movs	r0, #1
 8008e36:	f7fc fc85 	bl	8005744 <aci_gap_init_IDB04A1>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	e01d      	b.n	8008e7c <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 8008e40:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <MX_BlueNRG_MS_Init+0x1ec>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10f      	bne.n	8008e68 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8008e48:	f107 020a 	add.w	r2, r7, #10
 8008e4c:	1dbb      	adds	r3, r7, #6
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	f107 0308 	add.w	r3, r7, #8
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4613      	mov	r3, r2
 8008e58:	2207      	movs	r2, #7
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2004      	movs	r0, #4
 8008e5e:	f7fc fc21 	bl	80056a4 <aci_gap_init_IDB05A1>
 8008e62:	4603      	mov	r3, r0
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
 8008e66:	e009      	b.n	8008e7c <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8008e68:	1dbb      	adds	r3, r7, #6
 8008e6a:	f107 0208 	add.w	r2, r7, #8
 8008e6e:	f107 010a 	add.w	r1, r7, #10
 8008e72:	2003      	movs	r0, #3
 8008e74:	f7fc fc66 	bl	8005744 <aci_gap_init_IDB04A1>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (ret != BLE_STATUS_SUCCESS) {
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 8008e82:	4828      	ldr	r0, [pc, #160]	; (8008f24 <MX_BlueNRG_MS_Init+0x1fc>)
 8008e84:	f003 f996 	bl	800c1b4 <puts>
  }
    
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8008e88:	2301      	movs	r3, #1
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <MX_BlueNRG_MS_Init+0x200>)
 8008e8e:	9302      	str	r3, [sp, #8]
 8008e90:	2300      	movs	r3, #0
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	2310      	movs	r3, #16
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	2307      	movs	r3, #7
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	f7fc fd89 	bl	80059b6 <aci_gap_set_auth_requirement>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d102      	bne.n	8008eb4 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 8008eae:	481f      	ldr	r0, [pc, #124]	; (8008f2c <MX_BlueNRG_MS_Init+0x204>)
 8008eb0:	f003 f980 	bl	800c1b4 <puts>
  }
  
  if (BLE_Role == SERVER) {
 8008eb4:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <MX_BlueNRG_MS_Init+0x1f0>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d111      	bne.n	8008ee0 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8008ebc:	481c      	ldr	r0, [pc, #112]	; (8008f30 <MX_BlueNRG_MS_Init+0x208>)
 8008ebe:	f003 f979 	bl	800c1b4 <puts>
    ret = Add_Sample_Service();
 8008ec2:	f001 f96d 	bl	800a1a0 <Add_Sample_Service>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (ret == BLE_STATUS_SUCCESS)
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8008ed0:	4818      	ldr	r0, [pc, #96]	; (8008f34 <MX_BlueNRG_MS_Init+0x20c>)
 8008ed2:	f003 f96f 	bl	800c1b4 <puts>
 8008ed6:	e006      	b.n	8008ee6 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8008ed8:	4817      	ldr	r0, [pc, #92]	; (8008f38 <MX_BlueNRG_MS_Init+0x210>)
 8008eda:	f003 f96b 	bl	800c1b4 <puts>
 8008ede:	e002      	b.n	8008ee6 <MX_BlueNRG_MS_Init+0x1be>
    
  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8008ee0:	4816      	ldr	r0, [pc, #88]	; (8008f3c <MX_BlueNRG_MS_Init+0x214>)
 8008ee2:	f003 f967 	bl	800c1b4 <puts>
  }
  
  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8008ee6:	2104      	movs	r1, #4
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f7fd f9d9 	bl	80062a0 <aci_hal_set_tx_power_level>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8008ef2:	bf00      	nop
 8008ef4:	3728      	adds	r7, #40	; 0x28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	0801051c 	.word	0x0801051c
 8008f00:	08010524 	.word	0x08010524
 8008f04:	20000028 	.word	0x20000028
 8008f08:	0800a651 	.word	0x0800a651
 8008f0c:	000186a0 	.word	0x000186a0
 8008f10:	08010430 	.word	0x08010430
 8008f14:	200018b4 	.word	0x200018b4
 8008f18:	20000029 	.word	0x20000029
 8008f1c:	08010444 	.word	0x08010444
 8008f20:	08010464 	.word	0x08010464
 8008f24:	08010478 	.word	0x08010478
 8008f28:	0001e240 	.word	0x0001e240
 8008f2c:	0801048c 	.word	0x0801048c
 8008f30:	080104a4 	.word	0x080104a4
 8008f34:	080104c4 	.word	0x080104c4
 8008f38:	080104e0 	.word	0x080104e0
 8008f3c:	080104fc 	.word	0x080104fc

08008f40 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(uint8_t *data, uint8_t length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PreTreatment */
  
  User_Process(data, length);
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f815 	bl	8008f80 <User_Process>
  hci_user_evt_proc();
 8008f56:	f7fd fcd5 	bl	8006904 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8008f66:	2101      	movs	r1, #1
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f001 fe53 	bl	800ac14 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f001 fdd8 	bl	800ab24 <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 8008f74:	2000      	movs	r0, #0
 8008f76:	f001 feef 	bl	800ad58 <BSP_COM_Init>
}
 8008f7a:	bf00      	nop
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(uint8_t *data, uint8_t length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  if (set_connectable) 
 8008f8c:	4b2b      	ldr	r3, [pc, #172]	; (800903c <User_Process+0xbc>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <User_Process+0x2e>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8008f96:	f001 f975 	bl	800a284 <Make_Connection>
    set_connectable = FALSE;
 8008f9a:	4b28      	ldr	r3, [pc, #160]	; (800903c <User_Process+0xbc>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f001 feb5 	bl	800ad10 <BSP_PB_GetState>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	4b25      	ldr	r3, [pc, #148]	; (8009040 <User_Process+0xc0>)
 8008fac:	701a      	strb	r2, [r3, #0]
  }
  
  if (BLE_Role == CLIENT) 
 8008fae:	4b25      	ldr	r3, [pc, #148]	; (8009044 <User_Process+0xc4>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d12e      	bne.n	8009014 <User_Process+0x94>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8008fb6:	4b24      	ldr	r3, [pc, #144]	; (8009048 <User_Process+0xc8>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <User_Process+0x4e>
 8008fbe:	4b23      	ldr	r3, [pc, #140]	; (800904c <User_Process+0xcc>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <User_Process+0x4e>
      startReadTXCharHandle();
 8008fc8:	f001 f9c8 	bl	800a35c <startReadTXCharHandle>
 8008fcc:	e00a      	b.n	8008fe4 <User_Process+0x64>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
 8008fce:	4b1e      	ldr	r3, [pc, #120]	; (8009048 <User_Process+0xc8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d006      	beq.n	8008fe4 <User_Process+0x64>
 8008fd6:	4b1e      	ldr	r3, [pc, #120]	; (8009050 <User_Process+0xd0>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <User_Process+0x64>
      startReadRXCharHandle();
 8008fe0:	f001 f9e2 	bl	800a3a8 <startReadRXCharHandle>
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 8008fe4:	4b18      	ldr	r3, [pc, #96]	; (8009048 <User_Process+0xc8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d013      	beq.n	8009014 <User_Process+0x94>
 8008fec:	4b17      	ldr	r3, [pc, #92]	; (800904c <User_Process+0xcc>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00e      	beq.n	8009014 <User_Process+0x94>
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <User_Process+0xd0>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <User_Process+0x94>
 8009000:	4b14      	ldr	r3, [pc, #80]	; (8009054 <User_Process+0xd4>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <User_Process+0x94>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800900a:	2000      	movs	r0, #0
 800900c:	f001 fdd6 	bl	800abbc <BSP_LED_Off>
      enableNotification();
 8009010:	f001 fa46 	bl	800a4a0 <enableNotification>
//    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
//
//    /* Debouncing */
//    HAL_Delay(50);

	delayMicroseconds(100000);
 8009014:	4810      	ldr	r0, [pc, #64]	; (8009058 <User_Process+0xd8>)
 8009016:	f000 fefb 	bl	8009e10 <delayMicroseconds>

    if (connected /*&& notification_enabled*/)
 800901a:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <User_Process+0xc8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <User_Process+0xb2>
    {
      /* Send a toggle command to the remote device */
//      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};

      sendData(data, length); //data - argument (info o temp.)
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fa0a 	bl	800a440 <sendData>

      BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
 800902c:	2000      	movs	r0, #0
 800902e:	f001 fddb 	bl	800abe8 <BSP_LED_Toggle>
    }
    
//    /* Reset the User Button flag */
//    user_button_pressed = 0;
//  }
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	2000002a 	.word	0x2000002a
 8009040:	20000028 	.word	0x20000028
 8009044:	20000029 	.word	0x20000029
 8009048:	20001c1c 	.word	0x20001c1c
 800904c:	20001c25 	.word	0x20001c25
 8009050:	20001c26 	.word	0x20001c26
 8009054:	20001c22 	.word	0x20001c22
 8009058:	000186a0 	.word	0x000186a0

0800905c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8009066:	4b04      	ldr	r3, [pc, #16]	; (8009078 <BSP_PB_Callback+0x1c>)
 8009068:	2201      	movs	r2, #1
 800906a:	701a      	strb	r2, [r3, #0]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200018b5 	.word	0x200018b5

0800907c <_ZN13DeviceManagerC1Ev>:
Timer tim6(&htim6);
Timer tim4(&htim4);
//docelowo cala tablica Timerow globalna
Timer *timers[] = {&tim7, &tim6/*, &tim4*/}; //TODO: wiecej timerow + fix tim6, tim4

DeviceManager::DeviceManager(){
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	occupiedPinsCount = 0;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
	usedTimersCount = 0;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	705a      	strb	r2, [r3, #1]
	hardwarePinsList[0].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009096:	605a      	str	r2, [r3, #4]
	hardwarePinsList[0].GPIO_Pin  = ((uint16_t)0x0010);			   //GPIO_PIN_4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2210      	movs	r2, #16
 800909c:	811a      	strh	r2, [r3, #8]
	hardwarePinsList[1].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80090a4:	60da      	str	r2, [r3, #12]
	hardwarePinsList[1].GPIO_Pin  = ((uint16_t)0x0200);			   //GPIO_PIN_9
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ac:	821a      	strh	r2, [r3, #16]
	hardwarePinsList[2].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80090b4:	615a      	str	r2, [r3, #20]
	hardwarePinsList[2].GPIO_Pin  = ((uint16_t)0x0400);			   //GPIO_PIN_10
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090bc:	831a      	strh	r2, [r3, #24]
	hardwarePinsList[3].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80090c4:	61da      	str	r2, [r3, #28]
	hardwarePinsList[3].GPIO_Pin  =	((uint16_t)0x0800); 		   //GPIO_PIN_11
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090cc:	841a      	strh	r2, [r3, #32]
	hardwarePinsList[4].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80090d4:	625a      	str	r2, [r3, #36]	; 0x24
	hardwarePinsList[4].GPIO_Pin  =	((uint16_t)0x1000); 		   //GPIO_PIN_12
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80090dc:	851a      	strh	r2, [r3, #40]	; 0x28
	hardwarePinsList[0].occupied  = false;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	729a      	strb	r2, [r3, #10]
	hardwarePinsList[1].occupied  = false;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	749a      	strb	r2, [r3, #18]
	hardwarePinsList[2].occupied  = false;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	769a      	strb	r2, [r3, #26]
	hardwarePinsList[3].occupied  = false;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hardwarePinsList[4].occupied  = false;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <_ZN13DeviceManager14checkIfPinFreeEP7PinData>:

bool DeviceManager::checkIfPinFree(PinData *pinData){
 800910e:	b480      	push	{r7}
 8009110:	b087      	sub	sp, #28
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
	GPIO_TypeDef* reqPort = pinData->GPIO_Port;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	613b      	str	r3, [r7, #16]
	uint16_t reqPin = pinData->GPIO_Pin;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	889b      	ldrh	r3, [r3, #4]
 8009122:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 8009124:	2300      	movs	r3, #0
 8009126:	75fb      	strb	r3, [r7, #23]
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d825      	bhi.n	800917a <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6c>
			if(reqPort == hardwarePinsList[i].GPIO_Port
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4413      	add	r3, r2
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	429a      	cmp	r2, r3
 800913c:	d119      	bne.n	8009172 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && reqPin == hardwarePinsList[i].GPIO_Pin
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	891b      	ldrh	r3, [r3, #8]
 8009148:	89fa      	ldrh	r2, [r7, #14]
 800914a:	429a      	cmp	r2, r3
 800914c:	d111      	bne.n	8009172 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && hardwarePinsList[i].occupied == false){
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	7a9b      	ldrb	r3, [r3, #10]
 8009158:	f083 0301 	eor.w	r3, r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
					hardwarePinsList[i].occupied = true;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	2201      	movs	r2, #1
 800916c:	729a      	strb	r2, [r3, #10]
					return true;
 800916e:	2301      	movs	r3, #1
 8009170:	e004      	b.n	800917c <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	3301      	adds	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
 8009178:	e7d6      	b.n	8009128 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x1a>
			}
	}
	return false;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN13DeviceManager10getFreePinEv>:

PinData* DeviceManager::getFreePin(void){
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b04      	cmp	r3, #4
 8009198:	d813      	bhi.n	80091c2 <_ZN13DeviceManager10getFreePinEv+0x3a>
		if(hardwarePinsList[i].occupied == false)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4413      	add	r3, r2
 80091a2:	7a9b      	ldrb	r3, [r3, #10]
 80091a4:	f083 0301 	eor.w	r3, r3, #1
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d005      	beq.n	80091ba <_ZN13DeviceManager10getFreePinEv+0x32>
			return &hardwarePinsList[i];
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	3304      	adds	r3, #4
 80091b8:	e005      	b.n	80091c6 <_ZN13DeviceManager10getFreePinEv+0x3e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	3301      	adds	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e7e8      	b.n	8009194 <_ZN13DeviceManager10getFreePinEv+0xc>
	}
	//TODO
	//return new PinData();
	return &hardwarePinsList[0];
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3304      	adds	r3, #4
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <_ZN13DeviceManager17getNewTimerHandleEv>:

Timer* DeviceManager::getNewTimerHandle(void){
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	if(usedTimersCount < (sizeof(timers)/sizeof(timers[0]))){
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d80a      	bhi.n	80091fa <_ZN13DeviceManager17getNewTimerHandleEv+0x26>
		return timers[usedTimersCount++];
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	b2d1      	uxtb	r1, r2
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7051      	strb	r1, [r2, #1]
 80091f0:	461a      	mov	r2, r3
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 80091f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f8:	e001      	b.n	80091fe <_ZN13DeviceManager17getNewTimerHandleEv+0x2a>
	}
	else{
		return timers[0]; //TODO
 80091fa:	4b04      	ldr	r3, [pc, #16]	; (800920c <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 80091fc:	681b      	ldr	r3, [r3, #0]
	}
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000000 	.word	0x20000000

08009210 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>:

uint8_t DeviceManager::getUsedTimersCount(void){
	return this->usedTimersCount;
}

int DeviceManager::getTimerIndex(TIM_HandleTypeDef *htim){
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	int timersElemNumber = (sizeof(timers)/sizeof(timers[0]));
 800921a:	2302      	movs	r3, #2
 800921c:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<timersElemNumber; i++){
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	429a      	cmp	r2, r3
 8009228:	da15      	bge.n	8009256 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x46>
		if(htim == timers[i]->getHandle())
 800922a:	4a0e      	ldr	r2, [pc, #56]	; (8009264 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x54>)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009232:	4618      	mov	r0, r3
 8009234:	f002 f831 	bl	800b29a <_ZN5Timer9getHandleEv>
 8009238:	4602      	mov	r2, r0
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	bf0c      	ite	eq
 8009240:	2301      	moveq	r3, #1
 8009242:	2300      	movne	r3, #0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x3e>
			return i;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	e005      	b.n	800925a <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x4a>
	for(int i=0; i<timersElemNumber; i++){
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e7e5      	b.n	8009222 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x12>
	}
	return -1; //TODO: zabezpieczyc to!
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000000 	.word	0x20000000

08009268 <_Z41__static_initialization_and_destruction_0ii>:
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d110      	bne.n	800929a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800927e:	4293      	cmp	r3, r2
 8009280:	d10b      	bne.n	800929a <_Z41__static_initialization_and_destruction_0ii+0x32>
Timer tim7(&htim7);
 8009282:	4908      	ldr	r1, [pc, #32]	; (80092a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009284:	4808      	ldr	r0, [pc, #32]	; (80092a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009286:	f001 fff9 	bl	800b27c <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer tim6(&htim6);
 800928a:	4908      	ldr	r1, [pc, #32]	; (80092ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800928c:	4808      	ldr	r0, [pc, #32]	; (80092b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800928e:	f001 fff5 	bl	800b27c <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer tim4(&htim4);
 8009292:	4908      	ldr	r1, [pc, #32]	; (80092b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009294:	4808      	ldr	r0, [pc, #32]	; (80092b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009296:	f001 fff1 	bl	800b27c <_ZN5TimerC1EP17TIM_HandleTypeDef>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200006d0 	.word	0x200006d0
 80092a8:	20000790 	.word	0x20000790
 80092ac:	20000710 	.word	0x20000710
 80092b0:	20000798 	.word	0x20000798
 80092b4:	20000750 	.word	0x20000750
 80092b8:	200007a0 	.word	0x200007a0

080092bc <_GLOBAL__sub_I_htim7>:
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
 80092c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092c4:	2001      	movs	r0, #1
 80092c6:	f7ff ffcf 	bl	8009268 <_Z41__static_initialization_and_destruction_0ii>
 80092ca:	bd80      	pop	{r7, pc}

080092cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4a07      	ldr	r2, [pc, #28]	; (80092f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80092dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4a06      	ldr	r2, [pc, #24]	; (80092fc <vApplicationGetIdleTaskMemory+0x30>)
 80092e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2280      	movs	r2, #128	; 0x80
 80092e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80092ea:	bf00      	nop
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	200018b8 	.word	0x200018b8
 80092fc:	2000191c 	.word	0x2000191c

08009300 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009308:	4a1f      	ldr	r2, [pc, #124]	; (8009388 <HCI_TL_SPI_Init+0x88>)
 800930a:	4b1f      	ldr	r3, [pc, #124]	; (8009388 <HCI_TL_SPI_Init+0x88>)
 800930c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009314:	4b1c      	ldr	r3, [pc, #112]	; (8009388 <HCI_TL_SPI_Init+0x88>)
 8009316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8009320:	2301      	movs	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009324:	4b19      	ldr	r3, [pc, #100]	; (800938c <HCI_TL_SPI_Init+0x8c>)
 8009326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	4619      	mov	r1, r3
 8009332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009336:	f7f8 ff05 	bl	8002144 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800933a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009340:	2301      	movs	r3, #1
 8009342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4619      	mov	r1, r3
 8009352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009356:	f7f8 fef5 	bl	8002144 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800935a:	2302      	movs	r3, #2
 800935c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800935e:	2301      	movs	r3, #1
 8009360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009366:	2300      	movs	r3, #0
 8009368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4619      	mov	r1, r3
 8009370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009374:	f7f8 fee6 	bl	8002144 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8009378:	f001 fda2 	bl	800aec0 <BSP_SPI1_Init>
 800937c:	4603      	mov	r3, r0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	40021000 	.word	0x40021000
 800938c:	10110000 	.word	0x10110000

08009390 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8009394:	2101      	movs	r1, #1
 8009396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800939a:	f7f9 f87b 	bl	8002494 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800939e:	2102      	movs	r1, #2
 80093a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093a4:	f7f9 f876 	bl	8002494 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80093a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093b0:	f7f9 f870 	bl	8002494 <HAL_GPIO_DeInit>
  return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80093be:	2200      	movs	r2, #0
 80093c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093c8:	f7f9 f970 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80093cc:	2005      	movs	r0, #5
 80093ce:	f7f8 fd59 	bl	8001e84 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80093d2:	2201      	movs	r2, #1
 80093d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093dc:	f7f9 f966 	bl	80026ac <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80093e0:	2005      	movs	r0, #5
 80093e2:	f7f8 fd4f 	bl	8001e84 <HAL_Delay>
  return 0;
 80093e6:	2300      	movs	r3, #0
}  
 80093e8:	4618      	mov	r0, r3
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80093fc:	23ff      	movs	r3, #255	; 0xff
 80093fe:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8009400:	230b      	movs	r3, #11
 8009402:	753b      	strb	r3, [r7, #20]
 8009404:	2300      	movs	r3, #0
 8009406:	757b      	strb	r3, [r7, #21]
 8009408:	2300      	movs	r3, #0
 800940a:	75bb      	strb	r3, [r7, #22]
 800940c:	2300      	movs	r3, #0
 800940e:	75fb      	strb	r3, [r7, #23]
 8009410:	2300      	movs	r3, #0
 8009412:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8009414:	2200      	movs	r2, #0
 8009416:	2102      	movs	r1, #2
 8009418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800941c:	f7f9 f946 	bl	80026ac <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8009420:	f107 010c 	add.w	r1, r7, #12
 8009424:	f107 0314 	add.w	r3, r7, #20
 8009428:	2205      	movs	r2, #5
 800942a:	4618      	mov	r0, r3
 800942c:	f001 fd78 	bl	800af20 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8009430:	7b3b      	ldrb	r3, [r7, #12]
 8009432:	2b02      	cmp	r3, #2
 8009434:	d129      	bne.n	800948a <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8009436:	7c3b      	ldrb	r3, [r7, #16]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	b21a      	sxth	r2, r3
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	b21b      	sxth	r3, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	b21b      	sxth	r3, r3
 8009444:	83fb      	strh	r3, [r7, #30]
  
    if(byte_count > 0) {
 8009446:	8bfb      	ldrh	r3, [r7, #30]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01e      	beq.n	800948a <HCI_TL_SPI_Receive+0x9e>
  
      /* avoid to read more data that size of the buffer */

      if (byte_count > size){
 800944c:	8bfa      	ldrh	r2, [r7, #30]
 800944e:	887b      	ldrh	r3, [r7, #2]
 8009450:	429a      	cmp	r2, r3
 8009452:	d901      	bls.n	8009458 <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 8009454:	887b      	ldrh	r3, [r7, #2]
 8009456:	83fb      	strh	r3, [r7, #30]
      }        
  
      for(len = 0; len < byte_count; len++)
 8009458:	2300      	movs	r3, #0
 800945a:	777b      	strb	r3, [r7, #29]
 800945c:	e010      	b.n	8009480 <HCI_TL_SPI_Receive+0x94>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800945e:	f107 011b 	add.w	r1, r7, #27
 8009462:	f107 031c 	add.w	r3, r7, #28
 8009466:	2201      	movs	r2, #1
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fd59 	bl	800af20 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800946e:	7f7b      	ldrb	r3, [r7, #29]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	4413      	add	r3, r2
 8009474:	7efa      	ldrb	r2, [r7, #27]
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800947a:	7f7b      	ldrb	r3, [r7, #29]
 800947c:	3301      	adds	r3, #1
 800947e:	777b      	strb	r3, [r7, #29]
 8009480:	7f7b      	ldrb	r3, [r7, #29]
 8009482:	b29b      	uxth	r3, r3
 8009484:	8bfa      	ldrh	r2, [r7, #30]
 8009486:	429a      	cmp	r2, r3
 8009488:	d8e9      	bhi.n	800945e <HCI_TL_SPI_Receive+0x72>
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800948a:	2201      	movs	r2, #1
 800948c:	2102      	movs	r1, #2
 800948e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009492:	f7f9 f90b 	bl	80026ac <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
 8009496:	7f7b      	ldrb	r3, [r7, #29]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	807b      	strh	r3, [r7, #2]
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80094ac:	230a      	movs	r3, #10
 80094ae:	743b      	strb	r3, [r7, #16]
 80094b0:	2300      	movs	r3, #0
 80094b2:	747b      	strb	r3, [r7, #17]
 80094b4:	2300      	movs	r3, #0
 80094b6:	74bb      	strb	r3, [r7, #18]
 80094b8:	2300      	movs	r3, #0
 80094ba:	74fb      	strb	r3, [r7, #19]
 80094bc:	2300      	movs	r3, #0
 80094be:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80094c0:	f7f8 fcd4 	bl	8001e6c <HAL_GetTick>
 80094c4:	61b8      	str	r0, [r7, #24]
  
  do
  {
    result = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80094ca:	2200      	movs	r2, #0
 80094cc:	2102      	movs	r1, #2
 80094ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094d2:	f7f9 f8eb 	bl	80026ac <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80094d6:	f107 0108 	add.w	r1, r7, #8
 80094da:	f107 0310 	add.w	r3, r7, #16
 80094de:	2205      	movs	r2, #5
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 fd1d 	bl	800af20 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 80094e6:	7a3b      	ldrb	r3, [r7, #8]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d10f      	bne.n	800950c <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80094ec:	7a7b      	ldrb	r3, [r7, #9]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	887a      	ldrh	r2, [r7, #2]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d806      	bhi.n	8009504 <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80094f6:	887b      	ldrh	r3, [r7, #2]
 80094f8:	461a      	mov	r2, r3
 80094fa:	4912      	ldr	r1, [pc, #72]	; (8009544 <HCI_TL_SPI_Send+0xa4>)
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fd0f 	bl	800af20 <BSP_SPI1_SendRecv>
 8009502:	e006      	b.n	8009512 <HCI_TL_SPI_Send+0x72>
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8009504:	f06f 0301 	mvn.w	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
 800950a:	e002      	b.n	8009512 <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800950c:	f04f 33ff 	mov.w	r3, #4294967295
 8009510:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8009512:	2201      	movs	r2, #1
 8009514:	2102      	movs	r1, #2
 8009516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800951a:	f7f9 f8c7 	bl	80026ac <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800951e:	f7f8 fca5 	bl	8001e6c <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b0f      	cmp	r3, #15
 800952a:	d903      	bls.n	8009534 <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 800952c:	f06f 0302 	mvn.w	r3, #2
 8009530:	61fb      	str	r3, [r7, #28]
      break;
 8009532:	e002      	b.n	800953a <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dbc5      	blt.n	80094c6 <HCI_TL_SPI_Send+0x26>
  
  return result;
 800953a:	69fb      	ldr	r3, [r7, #28]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20001b1c 	.word	0x20001b1c

08009548 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800954c:	2101      	movs	r1, #1
 800954e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009552:	f7f9 f893 	bl	800267c <HAL_GPIO_ReadPin>
 8009556:	4603      	mov	r3, r0
 8009558:	2b01      	cmp	r3, #1
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
} 
 8009562:	4618      	mov	r0, r3
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
  
  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <hci_tl_lowlevel_init+0x54>)
 8009570:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <hci_tl_lowlevel_init+0x58>)
 8009574:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8009576:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <hci_tl_lowlevel_init+0x5c>)
 8009578:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800957a:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <hci_tl_lowlevel_init+0x60>)
 800957c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <hci_tl_lowlevel_init+0x64>)
 8009580:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8009582:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <hci_tl_lowlevel_init+0x68>)
 8009584:	61fb      	str	r3, [r7, #28]
  
  hci_register_io_bus (&fops);
 8009586:	1d3b      	adds	r3, r7, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd f885 	bl	8006698 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800958e:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8009592:	4810      	ldr	r0, [pc, #64]	; (80095d4 <hci_tl_lowlevel_init+0x6c>)
 8009594:	f7f8 fd92 	bl	80020bc <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8009598:	4a0f      	ldr	r2, [pc, #60]	; (80095d8 <hci_tl_lowlevel_init+0x70>)
 800959a:	2100      	movs	r1, #0
 800959c:	480d      	ldr	r0, [pc, #52]	; (80095d4 <hci_tl_lowlevel_init+0x6c>)
 800959e:	f7f8 fd73 	bl	8002088 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80095a2:	2200      	movs	r2, #0
 80095a4:	2100      	movs	r1, #0
 80095a6:	2006      	movs	r0, #6
 80095a8:	f7f8 fd44 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80095ac:	2006      	movs	r0, #6
 80095ae:	f7f8 fd5d 	bl	800206c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80095b2:	bf00      	nop
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08009301 	.word	0x08009301
 80095c0:	08009391 	.word	0x08009391
 80095c4:	080094a1 	.word	0x080094a1
 80095c8:	080093ed 	.word	0x080093ed
 80095cc:	080093bb 	.word	0x080093bb
 80095d0:	0800af61 	.word	0x0800af61
 80095d4:	20001c78 	.word	0x20001c78
 80095d8:	080095dd 	.word	0x080095dd

080095dc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80095e0:	e005      	b.n	80095ee <hci_tl_lowlevel_isr+0x12>
  {        
    if (hci_notify_asynch_evt(NULL))
 80095e2:	2000      	movs	r0, #0
 80095e4:	f7fd f9b8 	bl	8006958 <hci_notify_asynch_evt>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80095ee:	f7ff ffab 	bl	8009548 <IsDataAvailable>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1f4      	bne.n	80095e2 <hci_tl_lowlevel_isr+0x6>
 80095f8:	e000      	b.n	80095fc <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80095fa:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009600:	b5b0      	push	{r4, r5, r7, lr}
 8009602:	b08e      	sub	sp, #56	; 0x38
 8009604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009606:	f7f8 fbff 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800960a:	f000 f845 	bl	8009698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800960e:	f000 f903 	bl	8009818 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8009612:	f000 f8cd 	bl	80097b0 <MX_USART3_UART_Init>
  MX_BlueNRG_MS_Init();
 8009616:	f7ff fb87 	bl	8008d28 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM7_Init();
 800961a:	f000 f985 	bl	8009928 <MX_TIM7_Init>
  MX_TIM6_Init();
 800961e:	f000 f9c3 	bl	80099a8 <MX_TIM6_Init>
  MX_TIM4_Init();
 8009622:	f000 fa01 	bl	8009a28 <MX_TIM4_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  binarySem = xSemaphoreCreateBinary();
 8009626:	2203      	movs	r2, #3
 8009628:	2100      	movs	r1, #0
 800962a:	2001      	movs	r0, #1
 800962c:	f7fe f898 	bl	8007760 <xQueueGenericCreate>
 8009630:	4602      	mov	r2, r0
 8009632:	4b14      	ldr	r3, [pc, #80]	; (8009684 <main+0x84>)
 8009634:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <main+0x88>)
 8009638:	f107 041c 	add.w	r4, r7, #28
 800963c:	461d      	mov	r5, r3
 800963e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800964a:	f107 031c 	add.w	r3, r7, #28
 800964e:	2100      	movs	r1, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f7fd faf5 	bl	8006c40 <osThreadCreate>
 8009656:	4602      	mov	r2, r0
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <main+0x8c>)
 800965a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readoutTask, ReadoutTask, osPriorityNormal, 0, 256);
 800965c:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <main+0x90>)
 800965e:	463c      	mov	r4, r7
 8009660:	461d      	mov	r5, r3
 8009662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800966a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readoutTaskHandle = osThreadCreate(osThread(readoutTask), NULL);
 800966e:	463b      	mov	r3, r7
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f7fd fae4 	bl	8006c40 <osThreadCreate>
 8009678:	4602      	mov	r2, r0
 800967a:	4b06      	ldr	r3, [pc, #24]	; (8009694 <main+0x94>)
 800967c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800967e:	f7fd fad8 	bl	8006c32 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009682:	e7fe      	b.n	8009682 <main+0x82>
 8009684:	20000830 	.word	0x20000830
 8009688:	08010538 	.word	0x08010538
 800968c:	20000828 	.word	0x20000828
 8009690:	08010560 	.word	0x08010560
 8009694:	2000082c 	.word	0x2000082c

08009698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b0b8      	sub	sp, #224	; 0xe0
 800969c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800969e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80096a2:	2244      	movs	r2, #68	; 0x44
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f002 fce3 	bl	800c072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	605a      	str	r2, [r3, #4]
 80096b6:	609a      	str	r2, [r3, #8]
 80096b8:	60da      	str	r2, [r3, #12]
 80096ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80096bc:	463b      	mov	r3, r7
 80096be:	2288      	movs	r2, #136	; 0x88
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f002 fcd5 	bl	800c072 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80096c8:	2302      	movs	r3, #2
 80096ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80096ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80096d6:	2310      	movs	r3, #16
 80096d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096dc:	2302      	movs	r3, #2
 80096de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80096e2:	2302      	movs	r3, #2
 80096e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80096e8:	2301      	movs	r3, #1
 80096ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80096ee:	230a      	movs	r3, #10
 80096f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80096f4:	2307      	movs	r3, #7
 80096f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80096fa:	2302      	movs	r3, #2
 80096fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009700:	2302      	movs	r3, #2
 8009702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800970a:	4618      	mov	r0, r3
 800970c:	f7f9 f864 	bl	80027d8 <HAL_RCC_OscConfig>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	bf14      	ite	ne
 8009716:	2301      	movne	r3, #1
 8009718:	2300      	moveq	r3, #0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8009720:	f000 fbf4 	bl	8009f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009724:	230f      	movs	r3, #15
 8009726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800972a:	2303      	movs	r3, #3
 800972c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009730:	2300      	movs	r3, #0
 8009732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009742:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009746:	2104      	movs	r1, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7f9 fc2b 	bl	8002fa4 <HAL_RCC_ClockConfig>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	bf14      	ite	ne
 8009754:	2301      	movne	r3, #1
 8009756:	2300      	moveq	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800975e:	f000 fbd5 	bl	8009f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8009762:	2306      	movs	r3, #6
 8009764:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800976a:	2300      	movs	r3, #0
 800976c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800976e:	463b      	mov	r3, r7
 8009770:	4618      	mov	r0, r3
 8009772:	f7f9 fe69 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf14      	ite	ne
 800977c:	2301      	movne	r3, #1
 800977e:	2300      	moveq	r3, #0
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009786:	f000 fbc1 	bl	8009f0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800978a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800978e:	f7f8 ffcd 	bl	800272c <HAL_PWREx_ControlVoltageScaling>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	bf14      	ite	ne
 8009798:	2301      	movne	r3, #1
 800979a:	2300      	moveq	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80097a2:	f000 fbb3 	bl	8009f0c <Error_Handler>
  }
}
 80097a6:	bf00      	nop
 80097a8:	37e0      	adds	r7, #224	; 0xe0
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80097b4:	4b16      	ldr	r3, [pc, #88]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097b6:	4a17      	ldr	r2, [pc, #92]	; (8009814 <MX_USART3_UART_Init+0x64>)
 80097b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80097ba:	4b15      	ldr	r3, [pc, #84]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80097c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80097c2:	4b13      	ldr	r3, [pc, #76]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80097c8:	4b11      	ldr	r3, [pc, #68]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097d6:	220c      	movs	r2, #12
 80097d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097dc:	2200      	movs	r2, #0
 80097de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80097ec:	4b08      	ldr	r3, [pc, #32]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80097f2:	4807      	ldr	r0, [pc, #28]	; (8009810 <MX_USART3_UART_Init+0x60>)
 80097f4:	f7fb f9ae 	bl	8004b54 <HAL_UART_Init>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bf14      	ite	ne
 80097fe:	2301      	movne	r3, #1
 8009800:	2300      	moveq	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8009808:	f000 fb80 	bl	8009f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}
 8009810:	200007a8 	.word	0x200007a8
 8009814:	40004800 	.word	0x40004800

08009818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	; 0x28
 800981c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	605a      	str	r2, [r3, #4]
 8009828:	609a      	str	r2, [r3, #8]
 800982a:	60da      	str	r2, [r3, #12]
 800982c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800982e:	4a3a      	ldr	r2, [pc, #232]	; (8009918 <MX_GPIO_Init+0x100>)
 8009830:	4b39      	ldr	r3, [pc, #228]	; (8009918 <MX_GPIO_Init+0x100>)
 8009832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009834:	f043 0304 	orr.w	r3, r3, #4
 8009838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800983a:	4b37      	ldr	r3, [pc, #220]	; (8009918 <MX_GPIO_Init+0x100>)
 800983c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009846:	4a34      	ldr	r2, [pc, #208]	; (8009918 <MX_GPIO_Init+0x100>)
 8009848:	4b33      	ldr	r3, [pc, #204]	; (8009918 <MX_GPIO_Init+0x100>)
 800984a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009852:	4b31      	ldr	r3, [pc, #196]	; (8009918 <MX_GPIO_Init+0x100>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800985e:	4a2e      	ldr	r2, [pc, #184]	; (8009918 <MX_GPIO_Init+0x100>)
 8009860:	4b2d      	ldr	r3, [pc, #180]	; (8009918 <MX_GPIO_Init+0x100>)
 8009862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009864:	f043 0301 	orr.w	r3, r3, #1
 8009868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800986a:	4b2b      	ldr	r3, [pc, #172]	; (8009918 <MX_GPIO_Init+0x100>)
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	60bb      	str	r3, [r7, #8]
 8009874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009876:	4a28      	ldr	r2, [pc, #160]	; (8009918 <MX_GPIO_Init+0x100>)
 8009878:	4b27      	ldr	r3, [pc, #156]	; (8009918 <MX_GPIO_Init+0x100>)
 800987a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009882:	4b25      	ldr	r3, [pc, #148]	; (8009918 <MX_GPIO_Init+0x100>)
 8009884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	607b      	str	r3, [r7, #4]
 800988c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800988e:	2200      	movs	r2, #0
 8009890:	f44f 7191 	mov.w	r1, #290	; 0x122
 8009894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009898:	f7f8 ff08 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800989c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80098a2:	4b1e      	ldr	r3, [pc, #120]	; (800991c <MX_GPIO_Init+0x104>)
 80098a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80098aa:	f107 0314 	add.w	r3, r7, #20
 80098ae:	4619      	mov	r1, r3
 80098b0:	481b      	ldr	r0, [pc, #108]	; (8009920 <MX_GPIO_Init+0x108>)
 80098b2:	f7f8 fc47 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80098ba:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <MX_GPIO_Init+0x10c>)
 80098bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c2:	f107 0314 	add.w	r3, r7, #20
 80098c6:	4619      	mov	r1, r3
 80098c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098cc:	f7f8 fc3a 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 80098d0:	f44f 7391 	mov.w	r3, #290	; 0x122
 80098d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098d6:	2301      	movs	r3, #1
 80098d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098de:	2300      	movs	r3, #0
 80098e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098e2:	f107 0314 	add.w	r3, r7, #20
 80098e6:	4619      	mov	r1, r3
 80098e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098ec:	f7f8 fc2a 	bl	8002144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80098f0:	2200      	movs	r2, #0
 80098f2:	2105      	movs	r1, #5
 80098f4:	2006      	movs	r0, #6
 80098f6:	f7f8 fb9d 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80098fa:	2006      	movs	r0, #6
 80098fc:	f7f8 fbb6 	bl	800206c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8009900:	2200      	movs	r2, #0
 8009902:	2105      	movs	r1, #5
 8009904:	2028      	movs	r0, #40	; 0x28
 8009906:	f7f8 fb95 	bl	8002034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800990a:	2028      	movs	r0, #40	; 0x28
 800990c:	f7f8 fbae 	bl	800206c <HAL_NVIC_EnableIRQ>

}
 8009910:	bf00      	nop
 8009912:	3728      	adds	r7, #40	; 0x28
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40021000 	.word	0x40021000
 800991c:	10210000 	.word	0x10210000
 8009920:	48000800 	.word	0x48000800
 8009924:	10110000 	.word	0x10110000

08009928 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */
  /* USER CODE END TIM7_Init 0 */
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800992e:	1d3b      	adds	r3, r7, #4
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	605a      	str	r2, [r3, #4]
 8009936:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM7_Init 1 */
  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009938:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <MX_TIM7_Init+0x78>)
 800993a:	4a1a      	ldr	r2, [pc, #104]	; (80099a4 <MX_TIM7_Init+0x7c>)
 800993c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800993e:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <MX_TIM7_Init+0x78>)
 8009940:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8009944:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009946:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <MX_TIM7_Init+0x78>)
 8009948:	2200      	movs	r2, #0
 800994a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800994c:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <MX_TIM7_Init+0x78>)
 800994e:	2209      	movs	r2, #9
 8009950:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009952:	4b13      	ldr	r3, [pc, #76]	; (80099a0 <MX_TIM7_Init+0x78>)
 8009954:	2200      	movs	r2, #0
 8009956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009958:	4811      	ldr	r0, [pc, #68]	; (80099a0 <MX_TIM7_Init+0x78>)
 800995a:	f7fa fdf2 	bl	8004542 <HAL_TIM_Base_Init>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_TIM7_Init+0x4a>
  {
    Error_Handler();
 800996e:	f000 facd 	bl	8009f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009972:	2300      	movs	r3, #0
 8009974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800997a:	1d3b      	adds	r3, r7, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4808      	ldr	r0, [pc, #32]	; (80099a0 <MX_TIM7_Init+0x78>)
 8009980:	f7fb f842 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	bf14      	ite	ne
 800998a:	2301      	movne	r3, #1
 800998c:	2300      	moveq	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <MX_TIM7_Init+0x70>
  {
    Error_Handler();
 8009994:	f000 faba 	bl	8009f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /* USER CODE END TIM7_Init 2 */
}
 8009998:	bf00      	nop
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	200006d0 	.word	0x200006d0
 80099a4:	40001400 	.word	0x40001400

080099a8 <MX_TIM6_Init>:

static void MX_TIM6_Init(void) //TODO: check&fix
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099ae:	1d3b      	adds	r3, r7, #4
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	605a      	str	r2, [r3, #4]
 80099b6:	609a      	str	r2, [r3, #8]
  htim6.Instance = TIM6;
 80099b8:	4b19      	ldr	r3, [pc, #100]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099ba:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <MX_TIM6_Init+0x7c>)
 80099bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80099c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099c6:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80099cc:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099ce:	2209      	movs	r2, #9
 80099d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80099d8:	4811      	ldr	r0, [pc, #68]	; (8009a20 <MX_TIM6_Init+0x78>)
 80099da:	f7fa fdb2 	bl	8004542 <HAL_TIM_Base_Init>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bf14      	ite	ne
 80099e4:	2301      	movne	r3, #1
 80099e6:	2300      	moveq	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <MX_TIM6_Init+0x4a>
  {
    Error_Handler();
 80099ee:	f000 fa8d 	bl	8009f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099f2:	2300      	movs	r3, #0
 80099f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	4619      	mov	r1, r3
 80099fe:	4808      	ldr	r0, [pc, #32]	; (8009a20 <MX_TIM6_Init+0x78>)
 8009a00:	f7fb f802 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bf14      	ite	ne
 8009a0a:	2301      	movne	r3, #1
 8009a0c:	2300      	moveq	r3, #0
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 8009a14:	f000 fa7a 	bl	8009f0c <Error_Handler>
  }
}
 8009a18:	bf00      	nop
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000710 	.word	0x20000710
 8009a24:	40001000 	.word	0x40001000

08009a28 <MX_TIM4_Init>:

static void MX_TIM4_Init(void) //TODO: check&fix
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8009a38:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a3a:	4a1a      	ldr	r2, [pc, #104]	; (8009aa4 <MX_TIM4_Init+0x7c>)
 8009a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8009a3e:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a40:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8009a44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a46:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8009a4c:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a4e:	2209      	movs	r2, #9
 8009a50:	60da      	str	r2, [r3, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a52:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009a58:	4811      	ldr	r0, [pc, #68]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a5a:	f7fa fd72 	bl	8004542 <HAL_TIM_Base_Init>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bf14      	ite	ne
 8009a64:	2301      	movne	r3, #1
 8009a66:	2300      	moveq	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <MX_TIM4_Init+0x4a>
  {
    Error_Handler();
 8009a6e:	f000 fa4d 	bl	8009f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a72:	2300      	movs	r3, #0
 8009a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4808      	ldr	r0, [pc, #32]	; (8009aa0 <MX_TIM4_Init+0x78>)
 8009a80:	f7fa ffc2 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bf14      	ite	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	2300      	moveq	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8009a94:	f000 fa3a 	bl	8009f0c <Error_Handler>
  }
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000750 	.word	0x20000750
 8009aa4:	40000800 	.word	0x40000800

08009aa8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		//wyslij sygnal do taska drivera zeby pryzgotowal dane (ew. parametry = zmienne globalne?)
		xTaskNotify(readoutTaskHandle, 0x01, eSetBits); //a domyslnie kolejka (queue) requestow
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <StartDefaultTask+0x48>)
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	2101      	movs	r1, #1
 8009aba:	f7ff f81d 	bl	8008af8 <xTaskGenericNotify>

		TickType_t maxBlockTime = pdMS_TO_TICKS(300UL);
 8009abe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009ac2:	60fb      	str	r3, [r7, #12]
		xSemaphoreTake(binarySem, maxBlockTime);
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	; (8009af4 <StartDefaultTask+0x4c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68f9      	ldr	r1, [r7, #12]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd ff30 	bl	8007930 <xQueueSemaphoreTake>
		//zeby tu dojsc, musial byc oddany semafor
		HAL_UART_Transmit(&huart3, (uint8_t *)"notified\r\n", 10, 10);
 8009ad0:	230a      	movs	r3, #10
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	4908      	ldr	r1, [pc, #32]	; (8009af8 <StartDefaultTask+0x50>)
 8009ad6:	4809      	ldr	r0, [pc, #36]	; (8009afc <StartDefaultTask+0x54>)
 8009ad8:	f7fb f88a 	bl	8004bf0 <HAL_UART_Transmit>
		MX_BlueNRG_MS_Process(data, 5);
 8009adc:	2105      	movs	r1, #5
 8009ade:	4808      	ldr	r0, [pc, #32]	; (8009b00 <StartDefaultTask+0x58>)
 8009ae0:	f7ff fa2e 	bl	8008f40 <MX_BlueNRG_MS_Process>

		osDelay(delayTime);
 8009ae4:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <StartDefaultTask+0x5c>)
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fd f8f5 	bl	8006cd8 <osDelay>
	}
 8009aee:	e7df      	b.n	8009ab0 <StartDefaultTask+0x8>
 8009af0:	2000082c 	.word	0x2000082c
 8009af4:	20000830 	.word	0x20000830
 8009af8:	0801057c 	.word	0x0801057c
 8009afc:	200007a8 	.word	0x200007a8
 8009b00:	20000898 	.word	0x20000898
 8009b04:	20000018 	.word	0x20000018

08009b08 <ReadoutTask>:
	/* USER CODE END 5 */
}

/* USER CODE BEGIN 6 */
void ReadoutTask(void const * argument){
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	uint32_t notifValue;
	/* Infinite loop */
	for (;;) {
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8009b10:	f107 020c 	add.w	r2, r7, #12
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295
 8009b18:	21ff      	movs	r1, #255	; 0xff
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7fe ff92 	bl	8008a44 <xTaskNotifyWait>
		if ((notifValue & 0x01) != 0x00){
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f2      	beq.n	8009b10 <ReadoutTask+0x8>
			tempSensor1.startNewReadout();
 8009b2a:	4802      	ldr	r0, [pc, #8]	; (8009b34 <ReadoutTask+0x2c>)
 8009b2c:	f000 fb2c 	bl	800a188 <_ZN13OneWireSensor15startNewReadoutEv>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8009b30:	e7ee      	b.n	8009b10 <ReadoutTask+0x8>
 8009b32:	bf00      	nop
 8009b34:	20000860 	.word	0x20000860

08009b38 <_ZN13OneWireDriver17firstStateHandlerEv>:
			//tempSensor2.startNewReadout();
		}
	}
}

void OneWireDriver::firstStateHandler(void){
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"First state!\r\n", 14, 10);
 8009b40:	230a      	movs	r3, #10
 8009b42:	220e      	movs	r2, #14
 8009b44:	490e      	ldr	r1, [pc, #56]	; (8009b80 <_ZN13OneWireDriver17firstStateHandlerEv+0x48>)
 8009b46:	480f      	ldr	r0, [pc, #60]	; (8009b84 <_ZN13OneWireDriver17firstStateHandlerEv+0x4c>)
 8009b48:	f7fb f852 	bl	8004bf0 <HAL_UART_Transmit>
	this->changePinMode(ONE_WIRE_OUTPUT);
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fab2 	bl	800a0b8 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	this->writePin(0);
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fad4 	bl	800a104 <_ZN13OneWireDriver8writePinEb>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::secondStateHandler;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a0a      	ldr	r2, [pc, #40]	; (8009b88 <_ZN13OneWireDriver17firstStateHandlerEv+0x50>)
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	611a      	str	r2, [r3, #16]
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(800);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fbb8 	bl	800b2e6 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	08010588 	.word	0x08010588
 8009b84:	200007a8 	.word	0x200007a8
 8009b88:	08009b8d 	.word	0x08009b8d

08009b8c <_ZN13OneWireDriver18secondStateHandlerEv>:

void OneWireDriver::secondStateHandler(void){
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"Second state!\r\n", 15, 10);
 8009b94:	230a      	movs	r3, #10
 8009b96:	220f      	movs	r2, #15
 8009b98:	490d      	ldr	r1, [pc, #52]	; (8009bd0 <_ZN13OneWireDriver18secondStateHandlerEv+0x44>)
 8009b9a:	480e      	ldr	r0, [pc, #56]	; (8009bd4 <_ZN13OneWireDriver18secondStateHandlerEv+0x48>)
 8009b9c:	f7fb f828 	bl	8004bf0 <HAL_UART_Transmit>
	this->writePin(1);
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 faae 	bl	800a104 <_ZN13OneWireDriver8writePinEb>
	this->changePinMode(ONE_WIRE_INPUT);
 8009ba8:	2101      	movs	r1, #1
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa84 	bl	800a0b8 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::thirdStateHandler;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a09      	ldr	r2, [pc, #36]	; (8009bd8 <_ZN13OneWireDriver18secondStateHandlerEv+0x4c>)
 8009bb4:	60da      	str	r2, [r3, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	611a      	str	r2, [r3, #16]
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(10);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	210a      	movs	r1, #10
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 fb8f 	bl	800b2e6 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	08010598 	.word	0x08010598
 8009bd4:	200007a8 	.word	0x200007a8
 8009bd8:	08009bdd 	.word	0x08009bdd

08009bdc <_ZN13OneWireDriver17thirdStateHandlerEv>:

void OneWireDriver::thirdStateHandler(void){
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b099      	sub	sp, #100	; 0x64
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	while(this->readPin()); //kolejne state'y
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 faa6 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d000      	beq.n	8009bf2 <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
 8009bf0:	e7f8      	b.n	8009be4 <_ZN13OneWireDriver17thirdStateHandlerEv+0x8>
	while(!this->readPin());//..
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa9f 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f083 0301 	eor.w	r3, r3, #1
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d000      	beq.n	8009c06 <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
 8009c04:	e7f5      	b.n	8009bf2 <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
	while(this->readPin());
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa95 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d000      	beq.n	8009c14 <_ZN13OneWireDriver17thirdStateHandlerEv+0x38>
 8009c12:	e7f8      	b.n	8009c06 <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
	uint32_t rawBits = 0UL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t checksumBits = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	//glowna czesc - odczyt danych i sumy kontrolnej
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 8009c1e:	231f      	movs	r3, #31
 8009c20:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009c24:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db29      	blt.n	8009c80 <_ZN13OneWireDriver17thirdStateHandlerEv+0xa4>
		 * Bit data "1" signal: the level is LOW for 50ms and HIGH for 70ms;
		 * MAX FREQUENCY ON STM32L476RG = 80MHz
		 * SO IT TAKES 12,5 ns FOR ONE INSTRUCTION TO EXECUTE
		 * A DELAY OF 1 SECOND (x TICKS): 80 MILLION NOP INSTRUCTIONS TO EXECUTE
		 */
		while (!this->readPin());
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa82 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f083 0301 	eor.w	r3, r3, #1
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d000      	beq.n	8009c40 <_ZN13OneWireDriver17thirdStateHandlerEv+0x64>
 8009c3e:	e7f5      	b.n	8009c2c <_ZN13OneWireDriver17thirdStateHandlerEv+0x50>
		delayMicroseconds(50);
 8009c40:	2032      	movs	r0, #50	; 0x32
 8009c42:	f000 f8e5 	bl	8009e10 <delayMicroseconds>
		if (this->readPin()) {
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa75 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d007      	beq.n	8009c62 <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
			rawBits |= (1UL << i);
 8009c52:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8009c56:	2201      	movs	r2, #1
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	657b      	str	r3, [r7, #84]	; 0x54
		}
		while (this->readPin());
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa67 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d000      	beq.n	8009c70 <_ZN13OneWireDriver17thirdStateHandlerEv+0x94>
 8009c6e:	e7f8      	b.n	8009c62 <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 8009c70:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009c7e:	e7d1      	b.n	8009c24 <_ZN13OneWireDriver17thirdStateHandlerEv+0x48>
	}
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 8009c80:	2307      	movs	r3, #7
 8009c82:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8009c86:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	db2c      	blt.n	8009ce8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x10c>
		while (!this->readPin());
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa51 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f083 0301 	eor.w	r3, r3, #1
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d000      	beq.n	8009ca2 <_ZN13OneWireDriver17thirdStateHandlerEv+0xc6>
 8009ca0:	e7f5      	b.n	8009c8e <_ZN13OneWireDriver17thirdStateHandlerEv+0xb2>
		delayMicroseconds(50);
 8009ca2:	2032      	movs	r0, #50	; 0x32
 8009ca4:	f000 f8b4 	bl	8009e10 <delayMicroseconds>
		if (this->readPin()) {
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fa44 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00a      	beq.n	8009cca <_ZN13OneWireDriver17thirdStateHandlerEv+0xee>
			checksumBits |= (1UL << i);
 8009cb4:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8009cb8:	2201      	movs	r2, #1
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		}
		while (this->readPin());
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa33 	bl	800a136 <_ZN13OneWireDriver7readPinEv>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d000      	beq.n	8009cd8 <_ZN13OneWireDriver17thirdStateHandlerEv+0xfc>
 8009cd6:	e7f8      	b.n	8009cca <_ZN13OneWireDriver17thirdStateHandlerEv+0xee>
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 8009cd8:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8009ce6:	e7ce      	b.n	8009c86 <_ZN13OneWireDriver17thirdStateHandlerEv+0xaa>
	}
	uint8_t data[5];
	data[0] = (rawBits >> 24) & 0xFF;//Copy raw data bits to an array of bytes
 8009ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cea:	0e1b      	lsrs	r3, r3, #24
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	data[1] = (rawBits >> 16) & 0xFF;
 8009cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cf4:	0c1b      	lsrs	r3, r3, #16
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	data[2] = (rawBits >> 8) & 0xFF;
 8009cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data[3] = (rawBits >> 0) & 0xFF;
 8009d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	data[4] = (checksumBits) & 0xFF;
 8009d0e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009d12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t humid = (data[0] << 8) | data[1];
 8009d16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	b21a      	sxth	r2, r3
 8009d1e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009d22:	b21b      	sxth	r3, r3
 8009d24:	4313      	orrs	r3, r2
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t temp = (data[2] << 8) | data[3];
 8009d2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	b21a      	sxth	r2, r3
 8009d34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d38:	b21b      	sxth	r3, r3
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	b21b      	sxth	r3, r3
 8009d3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t humidDecimal = humid % 10;
 8009d42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d46:	4b2c      	ldr	r3, [pc, #176]	; (8009df8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8009d48:	fba3 1302 	umull	r1, r3, r3, r2
 8009d4c:	08d9      	lsrs	r1, r3, #3
 8009d4e:	460b      	mov	r3, r1
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	440b      	add	r3, r1
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t tempDecimal = temp % 10;
 8009d5c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009d60:	4b25      	ldr	r3, [pc, #148]	; (8009df8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8009d62:	fba3 1302 	umull	r1, r3, r3, r2
 8009d66:	08d9      	lsrs	r1, r3, #3
 8009d68:	460b      	mov	r3, r1
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	temp = temp / (uint16_t) 10;
 8009d76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009d7a:	4a1f      	ldr	r2, [pc, #124]	; (8009df8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8009d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d80:	08db      	lsrs	r3, r3, #3
 8009d82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	humid = humid / (uint16_t) 10;
 8009d86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d8a:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8009d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d90:	08db      	lsrs	r3, r3, #3
 8009d92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	char uartData[50];
	sprintf(uartData, "\r\nTemperatura\t %hu.%huC\r\nWilgotnosc\t %hu.%hu%%\r\n",
 8009d96:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8009d9a:	f8b7 4048 	ldrh.w	r4, [r7, #72]	; 0x48
 8009d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009da2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
			temp, tempDecimal, humid, humidDecimal);
 8009da6:	f107 000c 	add.w	r0, r7, #12
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4623      	mov	r3, r4
 8009db0:	460a      	mov	r2, r1
 8009db2:	4912      	ldr	r1, [pc, #72]	; (8009dfc <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 8009db4:	f002 fa16 	bl	800c1e4 <sprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)uartData, /*sizeof(uartData)*/ 42, 10);
 8009db8:	f107 010c 	add.w	r1, r7, #12
 8009dbc:	230a      	movs	r3, #10
 8009dbe:	222a      	movs	r2, #42	; 0x2a
 8009dc0:	480f      	ldr	r0, [pc, #60]	; (8009e00 <_ZN13OneWireDriver17thirdStateHandlerEv+0x224>)
 8009dc2:	f7fa ff15 	bl	8004bf0 <HAL_UART_Transmit>
	//powiadom glowny task ze juz zakonczyla sie cala robota
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60bb      	str	r3, [r7, #8]
	xSemaphoreGiveFromISR(binarySem, &xHigherPriorityTaskWoken);
 8009dca:	4b0e      	ldr	r3, [pc, #56]	; (8009e04 <_ZN13OneWireDriver17thirdStateHandlerEv+0x228>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f107 0208 	add.w	r2, r7, #8
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd fd21 	bl	800781c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <_ZN13OneWireDriver17thirdStateHandlerEv+0x214>
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <_ZN13OneWireDriver17thirdStateHandlerEv+0x22c>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	f3bf 8f6f 	isb	sy
}
 8009df0:	bf00      	nop
 8009df2:	375c      	adds	r7, #92	; 0x5c
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd90      	pop	{r4, r7, pc}
 8009df8:	cccccccd 	.word	0xcccccccd
 8009dfc:	080105a8 	.word	0x080105a8
 8009e00:	200007a8 	.word	0x200007a8
 8009e04:	20000830 	.word	0x20000830
 8009e08:	e000ed04 	.word	0xe000ed04
 8009e0c:	00000000 	.word	0x00000000

08009e10 <delayMicroseconds>:

void delayMicroseconds(uint32_t us){
 8009e10:	b590      	push	{r4, r7, lr}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 8009e18:	f7f9 fa30 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	613b      	str	r3, [r7, #16]
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor freq. relative to base of 80MHz
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e2a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009eb8 <delayMicroseconds+0xa8>
 8009e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e32:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d019      	beq.n	8009e70 <delayMicroseconds+0x60>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4e:	ee17 0a90 	vmov	r0, s15
 8009e52:	f7f6 fb89 	bl	8000568 <__aeabi_f2d>
 8009e56:	a316      	add	r3, pc, #88	; (adr r3, 8009eb0 <delayMicroseconds+0xa0>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 fbd8 	bl	8000610 <__aeabi_dmul>
 8009e60:	4603      	mov	r3, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	4618      	mov	r0, r3
 8009e66:	4621      	mov	r1, r4
 8009e68:	f7f6 feaa 	bl	8000bc0 <__aeabi_d2uiz>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	e00e      	b.n	8009e8e <delayMicroseconds+0x7e>
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7f6 fb79 	bl	8000568 <__aeabi_f2d>
 8009e76:	a30e      	add	r3, pc, #56	; (adr r3, 8009eb0 <delayMicroseconds+0xa0>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 fbc8 	bl	8000610 <__aeabi_dmul>
 8009e80:	4603      	mov	r3, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4618      	mov	r0, r3
 8009e86:	4621      	mov	r1, r4
 8009e88:	f7f6 fe9a 	bl	8000bc0 <__aeabi_d2uiz>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	60bb      	str	r3, [r7, #8]
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm volatile("nop");}
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d204      	bcs.n	8009ea6 <delayMicroseconds+0x96>
 8009e9c:	bf00      	nop
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e7f6      	b.n	8009e94 <delayMicroseconds+0x84>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd90      	pop	{r4, r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	978d4fdf 	.word	0x978d4fdf
 8009eb4:	401c926e 	.word	0x401c926e
 8009eb8:	4c989680 	.word	0x4c989680

08009ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a0d      	ldr	r2, [pc, #52]	; (8009f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d102      	bne.n	8009ed4 <HAL_TIM_PeriodElapsedCallback+0x18>
	HAL_IncTick();
 8009ece:	f7f7 ffbb 	bl	8001e48 <HAL_IncTick>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009ed2:	e010      	b.n	8009ef6 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  timers[deviceManager.getTimerIndex(htim)]->getDriver()->executeState(); //TODO!
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	480b      	ldr	r0, [pc, #44]	; (8009f04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009ed8:	f7ff f99a 	bl	8009210 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>
 8009edc:	4602      	mov	r2, r0
 8009ede:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 f9f2 	bl	800b2ce <_ZN5Timer9getDriverEv>
 8009eea:	4602      	mov	r2, r0
 8009eec:	6813      	ldr	r3, [r2, #0]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	4798      	blx	r3
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40000400 	.word	0x40000400
 8009f04:	20000834 	.word	0x20000834
 8009f08:	20000000 	.word	0x20000000

08009f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, (uint8_t *)"Error Handler!\r\n", 20, 10);
 8009f10:	230a      	movs	r3, #10
 8009f12:	2214      	movs	r2, #20
 8009f14:	4902      	ldr	r1, [pc, #8]	; (8009f20 <Error_Handler+0x14>)
 8009f16:	4803      	ldr	r0, [pc, #12]	; (8009f24 <Error_Handler+0x18>)
 8009f18:	f7fa fe6a 	bl	8004bf0 <HAL_UART_Transmit>
  /* USER CODE END Error_Handler_Debug */
}
 8009f1c:	bf00      	nop
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	080105dc 	.word	0x080105dc
 8009f24:	200007a8 	.word	0x200007a8

08009f28 <_Z41__static_initialization_and_destruction_0ii>:

///
}
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d10f      	bne.n	8009f58 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10a      	bne.n	8009f58 <_Z41__static_initialization_and_destruction_0ii+0x30>
DeviceManager deviceManager;
 8009f42:	4807      	ldr	r0, [pc, #28]	; (8009f60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8009f44:	f7ff f89a 	bl	800907c <_ZN13DeviceManagerC1Ev>
OneWireSensor tempSensor1(&sensor1Data);
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009f4a:	4807      	ldr	r0, [pc, #28]	; (8009f68 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009f4c:	f000 f90d 	bl	800a16a <_ZN13OneWireSensorC1EP7PinData>
OneWireSensor tempSensor2(&sensor2Data);
 8009f50:	4906      	ldr	r1, [pc, #24]	; (8009f6c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009f52:	4807      	ldr	r0, [pc, #28]	; (8009f70 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009f54:	f000 f909 	bl	800a16a <_ZN13OneWireSensorC1EP7PinData>
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000834 	.word	0x20000834
 8009f64:	20000008 	.word	0x20000008
 8009f68:	20000860 	.word	0x20000860
 8009f6c:	20000010 	.word	0x20000010
 8009f70:	2000087c 	.word	0x2000087c

08009f74 <_GLOBAL__sub_I_huart3>:
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	f7ff ffd3 	bl	8009f28 <_Z41__static_initialization_and_destruction_0ii>
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <_ZN13GenericDriverC1EP7PinData>:
	PinData *pinData;
	Timer *timer;
//	StateHandler stateHandler; //TODO: ?stateHandler powinien nalezec do klady bazowej
public:
	GenericDriver(){}//TODO: NIE! a potrzebna dla generycznego sensora
	GenericDriver(PinData *pinData) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	4a0f      	ldr	r2, [pc, #60]	; (8009fcc <_ZN13GenericDriverC1EP7PinData+0x48>)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	601a      	str	r2, [r3, #0]
		if(deviceManager.checkIfPinFree(pinData)){
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	480e      	ldr	r0, [pc, #56]	; (8009fd0 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8009f98:	f7ff f8b9 	bl	800910e <_ZN13DeviceManager14checkIfPinFreeEP7PinData>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <_ZN13GenericDriverC1EP7PinData+0x26>
			this->pinData = pinData;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	e005      	b.n	8009fb6 <_ZN13GenericDriverC1EP7PinData+0x32>
		}
		else {
			this->pinData = deviceManager.getFreePin();
 8009faa:	4809      	ldr	r0, [pc, #36]	; (8009fd0 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8009fac:	f7ff f8ec 	bl	8009188 <_ZN13DeviceManager10getFreePinEv>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	605a      	str	r2, [r3, #4]
		}
		this->timer = deviceManager.getNewTimerHandle();
 8009fb6:	4806      	ldr	r0, [pc, #24]	; (8009fd0 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8009fb8:	f7ff f90c 	bl	80091d4 <_ZN13DeviceManager17getNewTimerHandleEv>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	609a      	str	r2, [r3, #8]
	};
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	08010714 	.word	0x08010714
 8009fd0:	20000834 	.word	0x20000834

08009fd4 <_ZN13GenericDriver18driverStartReadoutEv>:
	virtual void driverStartReadout(void) {};//= 0; //TODO: chyba nie abstrakcyjna
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <_ZN13GenericDriver12executeStateEv>:
	virtual void executeState(void) {};//= 0;
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <_ZN13OneWireDriverC1EP7PinData>:
#include "one_wire_driver.hpp"

OneWireDriver::OneWireDriver(PinData *pinData) : GenericDriver(pinData) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff ffba 	bl	8009f84 <_ZN13GenericDriverC1EP7PinData>
 800a010:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <_ZN13OneWireDriverC1EP7PinData+0x40>)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
	this->timer->setDriver(this); //zamiast podczepiania callbacka-podczepanie obiektu drivera-TODO: podczepic obiekt generycznego drivera
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 f947 	bl	800b2b2 <_ZN5Timer9setDriverEP13GenericDriver>
	this->stateHandler = &OneWireDriver::firstStateHandler;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a06      	ldr	r2, [pc, #24]	; (800a040 <_ZN13OneWireDriverC1EP7PinData+0x44>)
 800a028:	60da      	str	r2, [r3, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	611a      	str	r2, [r3, #16]
};
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	080105f8 	.word	0x080105f8
 800a040:	08009b39 	.word	0x08009b39

0800a044 <_ZN13OneWireDriver18driverStartReadoutEv>:

void OneWireDriver::driverStartReadout(void){
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	this->stateHandler = &OneWireDriver::firstStateHandler;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a07      	ldr	r2, [pc, #28]	; (800a06c <_ZN13OneWireDriver18driverStartReadoutEv+0x28>)
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	611a      	str	r2, [r3, #16]
	this->executeState();
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3304      	adds	r3, #4
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08009b39 	.word	0x08009b39

0800a070 <_ZN13OneWireDriver12executeStateEv>:

void OneWireDriver::executeState(void){
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
	(this->*stateHandler)();
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <_ZN13OneWireDriver12executeStateEv+0x1a>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	e00a      	b.n	800a0a0 <_ZN13OneWireDriver12executeStateEv+0x30>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	105b      	asrs	r3, r3, #1
 800a090:	461a      	mov	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4413      	add	r3, r2
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	68d2      	ldr	r2, [r2, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6912      	ldr	r2, [r2, #16]
 800a0a4:	1052      	asrs	r2, r2, #1
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <_ZN13OneWireDriver13changePinModeE11oneWireMode>:

void OneWireDriver::changePinMode(oneWireMode mode){
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = this->pinData->GPIO_Pin;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	889b      	ldrh	r3, [r3, #4]
 800a0ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	617b      	str	r3, [r7, #20]
	if(mode == ONE_WIRE_OUTPUT){
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x28>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	e004      	b.n	800a0ea <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
	}
	else if(mode == ONE_WIRE_INPUT){
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(this->pinData->GPIO_Port, &GPIO_InitStruct);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f107 020c 	add.w	r2, r7, #12
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f8 f824 	bl	8002144 <HAL_GPIO_Init>
};
 800a0fc:	bf00      	nop
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN13OneWireDriver8writePinEb>:

void OneWireDriver::writePin(bool state){
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
					  this->pinData->GPIO_Pin,
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 800a11a:	8899      	ldrh	r1, [r3, #4]
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <_ZN13OneWireDriver8writePinEb+0x22>
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <_ZN13OneWireDriver8writePinEb+0x24>
 800a126:	2300      	movs	r3, #0
					  state == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800a128:	461a      	mov	r2, r3
 800a12a:	f7f8 fabf 	bl	80026ac <HAL_GPIO_WritePin>
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <_ZN13OneWireDriver7readPinEv>:

bool OneWireDriver::readPin(void){
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
	return (1&HAL_GPIO_ReadPin(this->pinData->GPIO_Port, this->pinData->GPIO_Pin));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	889b      	ldrh	r3, [r3, #4]
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f7f8 fa95 	bl	800267c <HAL_GPIO_ReadPin>
 800a152:	4603      	mov	r3, r0
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <_ZN13OneWireSensorC1EP7PinData>:
#include "one_wire_sensor.hpp"

OneWireSensor::OneWireSensor(PinData *pinData) : /*Sensor(pinData),*/ oneWireDriver(OneWireDriver(pinData)) {}
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7ff ff3f 	bl	8009ffc <_ZN13OneWireDriverC1EP7PinData>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <_ZN13OneWireSensor15startNewReadoutEv>:

void OneWireSensor::startNewReadout(void){
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	this->oneWireDriver.driverStartReadout();
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff56 	bl	800a044 <_ZN13OneWireDriver18driverStartReadoutEv>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b095      	sub	sp, #84	; 0x54
 800a1a4:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800a1a6:	4b31      	ldr	r3, [pc, #196]	; (800a26c <Add_Sample_Service+0xcc>)
 800a1a8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800a1ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800a1b2:	4b2f      	ldr	r3, [pc, #188]	; (800a270 <Add_Sample_Service+0xd0>)
 800a1b4:	f107 0414 	add.w	r4, r7, #20
 800a1b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800a1be:	4b2d      	ldr	r3, [pc, #180]	; (800a274 <Add_Sample_Service+0xd4>)
 800a1c0:	1d3c      	adds	r4, r7, #4
 800a1c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 800a1c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a1cc:	4b2a      	ldr	r3, [pc, #168]	; (800a278 <Add_Sample_Service+0xd8>)
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2307      	movs	r3, #7
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2002      	movs	r0, #2
 800a1d6:	f7fb fcb9 	bl	8005b4c <aci_gatt_add_serv>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 800a1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d136      	bne.n	800a256 <Add_Sample_Service+0xb6>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 800a1e8:	4b23      	ldr	r3, [pc, #140]	; (800a278 <Add_Sample_Service+0xd8>)
 800a1ea:	8818      	ldrh	r0, [r3, #0]
 800a1ec:	f107 0214 	add.w	r2, r7, #20
 800a1f0:	4b22      	ldr	r3, [pc, #136]	; (800a27c <Add_Sample_Service+0xdc>)
 800a1f2:	9305      	str	r3, [sp, #20]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	9304      	str	r3, [sp, #16]
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	2300      	movs	r3, #0
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	2310      	movs	r3, #16
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	2314      	movs	r3, #20
 800a20a:	2102      	movs	r1, #2
 800a20c:	f7fb fd2a 	bl	8005c64 <aci_gatt_add_char>
 800a210:	4603      	mov	r3, r0
 800a212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800a216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11d      	bne.n	800a25a <Add_Sample_Service+0xba>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800a21e:	4b16      	ldr	r3, [pc, #88]	; (800a278 <Add_Sample_Service+0xd8>)
 800a220:	8818      	ldrh	r0, [r3, #0]
 800a222:	1d3a      	adds	r2, r7, #4
 800a224:	4b16      	ldr	r3, [pc, #88]	; (800a280 <Add_Sample_Service+0xe0>)
 800a226:	9305      	str	r3, [sp, #20]
 800a228:	2301      	movs	r3, #1
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	2310      	movs	r3, #16
 800a22e:	9303      	str	r3, [sp, #12]
 800a230:	2301      	movs	r3, #1
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	2300      	movs	r3, #0
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	230c      	movs	r3, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	2314      	movs	r3, #20
 800a23e:	2102      	movs	r1, #2
 800a240:	f7fb fd10 	bl	8005c64 <aci_gatt_add_char>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800a24a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d105      	bne.n	800a25e <Add_Sample_Service+0xbe>
  
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
 800a252:	2300      	movs	r3, #0
 800a254:	e005      	b.n	800a262 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800a25e:	bf00      	nop
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 800a260:	2347      	movs	r3, #71	; 0x47
}
 800a262:	4618      	mov	r0, r3
 800a264:	373c      	adds	r7, #60	; 0x3c
 800a266:	46bd      	mov	sp, r7
 800a268:	bd90      	pop	{r4, r7, pc}
 800a26a:	bf00      	nop
 800a26c:	0801061c 	.word	0x0801061c
 800a270:	0801062c 	.word	0x0801062c
 800a274:	0801063c 	.word	0x0801063c
 800a278:	20001c86 	.word	0x20001c86
 800a27c:	20001c84 	.word	0x20001c84
 800a280:	20001c88 	.word	0x20001c88

0800a284 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b08f      	sub	sp, #60	; 0x3c
 800a288:	af08      	add	r7, sp, #32
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <Make_Connection+0xc4>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d134      	bne.n	800a2fc <Make_Connection+0x78>
    
    printf("Client Create Connection\n");
 800a292:	482e      	ldr	r0, [pc, #184]	; (800a34c <Make_Connection+0xc8>)
 800a294:	f001 ff8e 	bl	800c1b4 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800a298:	4a2d      	ldr	r2, [pc, #180]	; (800a350 <Make_Connection+0xcc>)
 800a29a:	f107 0310 	add.w	r3, r7, #16
 800a29e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2a2:	6018      	str	r0, [r3, #0]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	8019      	strh	r1, [r3, #0]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f000 fc71 	bl	800ab90 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 800a2ae:	f107 0210 	add.w	r2, r7, #16
 800a2b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2b6:	9306      	str	r3, [sp, #24]
 800a2b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2bc:	9305      	str	r3, [sp, #20]
 800a2be:	233c      	movs	r3, #60	; 0x3c
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9303      	str	r3, [sp, #12]
 800a2c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2ca:	9302      	str	r3, [sp, #8]
 800a2cc:	2328      	movs	r3, #40	; 0x28
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a2dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a2e0:	f7fb fbbd 	bl	8005a5e <aci_gap_create_connection>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2); 
    
    if (ret != 0){
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d027      	beq.n	800a33e <Make_Connection+0xba>
      printf("Error while starting connection.\n");
 800a2ee:	4819      	ldr	r0, [pc, #100]	; (800a354 <Make_Connection+0xd0>)
 800a2f0:	f001 ff60 	bl	800c1b4 <puts>
      HAL_Delay(100);
 800a2f4:	2064      	movs	r0, #100	; 0x64
 800a2f6:	f7f7 fdc5 	bl	8001e84 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 800a2fa:	e020      	b.n	800a33e <Make_Connection+0xba>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 800a2fc:	4b16      	ldr	r3, [pc, #88]	; (800a358 <Make_Connection+0xd4>)
 800a2fe:	463c      	mov	r4, r7
 800a300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a302:	c407      	stmia	r4!, {r0, r1, r2}
 800a304:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 800a306:	2100      	movs	r1, #0
 800a308:	2000      	movs	r0, #0
 800a30a:	f7fc f8aa 	bl	8006462 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
 800a30e:	2300      	movs	r3, #0
 800a310:	9306      	str	r3, [sp, #24]
 800a312:	2300      	movs	r3, #0
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	2300      	movs	r3, #0
 800a318:	9304      	str	r3, [sp, #16]
 800a31a:	2300      	movs	r3, #0
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	463b      	mov	r3, r7
 800a320:	9302      	str	r3, [sp, #8]
 800a322:	230d      	movs	r3, #13
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	2300      	movs	r3, #0
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	2300      	movs	r3, #0
 800a32c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a334:	2000      	movs	r0, #0
 800a336:	f7fb fa4f 	bl	80057d8 <aci_gap_set_discoverable>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}
 800a346:	bf00      	nop
 800a348:	20000029 	.word	0x20000029
 800a34c:	0801064c 	.word	0x0801064c
 800a350:	0801068c 	.word	0x0801068c
 800a354:	08010668 	.word	0x08010668
 800a358:	08010694 	.word	0x08010694

0800a35c <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 800a35c:	b590      	push	{r4, r7, lr}
 800a35e:	b087      	sub	sp, #28
 800a360:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 800a362:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <startReadTXCharHandle+0x40>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d112      	bne.n	800a392 <startReadTXCharHandle+0x36>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800a36c:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <startReadTXCharHandle+0x44>)
 800a36e:	463c      	mov	r4, r7
 800a370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <startReadTXCharHandle+0x48>)
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b298      	uxth	r0, r3
 800a37c:	463b      	mov	r3, r7
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2302      	movs	r3, #2
 800a382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a386:	2101      	movs	r1, #1
 800a388:	f7fb fdd1 	bl	8005f2e <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 800a38c:	4b03      	ldr	r3, [pc, #12]	; (800a39c <startReadTXCharHandle+0x40>)
 800a38e:	2201      	movs	r2, #1
 800a390:	701a      	strb	r2, [r3, #0]
  }
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20001c23 	.word	0x20001c23
 800a3a0:	0801062c 	.word	0x0801062c
 800a3a4:	20001c20 	.word	0x20001c20

0800a3a8 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <startReadRXCharHandle+0x40>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d112      	bne.n	800a3de <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <startReadRXCharHandle+0x44>)
 800a3ba:	463c      	mov	r4, r7
 800a3bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <startReadRXCharHandle+0x48>)
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b298      	uxth	r0, r3
 800a3c8:	463b      	mov	r3, r7
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	f7fb fdab 	bl	8005f2e <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <startReadRXCharHandle+0x40>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	701a      	strb	r2, [r3, #0]
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd90      	pop	{r4, r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001c24 	.word	0x20001c24
 800a3ec:	0801063c 	.word	0x0801063c
 800a3f0:	20001c20 	.word	0x20001c20

0800a3f4 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 800a400:	2000      	movs	r0, #0
 800a402:	f000 fbf1 	bl	800abe8 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e009      	b.n	800a420 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	4413      	add	r3, r2
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f001 fe59 	bl	800c0cc <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3301      	adds	r3, #1
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	429a      	cmp	r2, r3
 800a426:	dcf1      	bgt.n	800a40c <receiveData+0x18>
  }
  fflush(stdout);
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <receiveData+0x48>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 f9b4 	bl	800b79c <fflush>
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000044 	.word	0x20000044

0800a440 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {    
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <sendData+0x4c>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d10b      	bne.n	800a46c <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <sendData+0x50>)
 800a456:	8818      	ldrh	r0, [r3, #0]
 800a458:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <sendData+0x54>)
 800a45a:	8819      	ldrh	r1, [r3, #0]
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	4613      	mov	r3, r2
 800a464:	2200      	movs	r2, #0
 800a466:	f7fb fccf 	bl	8005e08 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800a46a:	e00a      	b.n	800a482 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <sendData+0x58>)
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b298      	uxth	r0, r3
 800a472:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <sendData+0x5c>)
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	b299      	uxth	r1, r3
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f7fb fe62 	bl	8006146 <aci_gatt_write_without_response>
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000029 	.word	0x20000029
 800a490:	20001c86 	.word	0x20001c86
 800a494:	20001c84 	.word	0x20001c84
 800a498:	20001c20 	.word	0x20001c20
 800a49c:	20001c82 	.word	0x20001c82

0800a4a0 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	703b      	strb	r3, [r7, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	707b      	strb	r3, [r7, #1]
  
  uint32_t tickstart = HAL_GetTick();
 800a4ae:	f7f7 fcdd 	bl	8001e6c <HAL_GetTick>
 800a4b2:	6078      	str	r0, [r7, #4]
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 800a4b4:	e008      	b.n	800a4c8 <enableNotification+0x28>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800a4b6:	f7f7 fcd9 	bl	8001e6c <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d80e      	bhi.n	800a4e6 <enableNotification+0x46>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <enableNotification+0x58>)
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b298      	uxth	r0, r3
 800a4ce:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <enableNotification+0x5c>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	3302      	adds	r3, #2
 800a4d4:	b299      	uxth	r1, r3
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	2202      	movs	r2, #2
 800a4da:	f7fb fdb7 	bl	800604c <aci_gatt_write_charac_descriptor>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b46      	cmp	r3, #70	; 0x46
 800a4e2:	d0e8      	beq.n	800a4b6 <enableNotification+0x16>
 800a4e4:	e000      	b.n	800a4e8 <enableNotification+0x48>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800a4e6:	bf00      	nop
  }
  notification_enabled = TRUE;
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <enableNotification+0x60>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20001c20 	.word	0x20001c20
 800a4fc:	20001c80 	.word	0x20001c80
 800a500:	20001c22 	.word	0x20001c22

0800a504 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	603a      	str	r2, [r7, #0]
 800a50e:	80fb      	strh	r3, [r7, #6]
 800a510:	460b      	mov	r3, r1
 800a512:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 800a514:	88fa      	ldrh	r2, [r7, #6]
 800a516:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <Attribute_Modified_CB+0x4c>)
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d105      	bne.n	800a52c <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 800a520:	797b      	ldrb	r3, [r7, #5]
 800a522:	4619      	mov	r1, r3
 800a524:	6838      	ldr	r0, [r7, #0]
 800a526:	f7ff ff65 	bl	800a3f4 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 800a52a:	e00c      	b.n	800a546 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {        
 800a52c:	88fa      	ldrh	r2, [r7, #6]
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <Attribute_Modified_CB+0x50>)
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	3302      	adds	r3, #2
 800a534:	429a      	cmp	r2, r3
 800a536:	d106      	bne.n	800a546 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d102      	bne.n	800a546 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <Attribute_Modified_CB+0x54>)
 800a542:	2201      	movs	r2, #1
 800a544:	701a      	strb	r2, [r3, #0]
}
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20001c88 	.word	0x20001c88
 800a554:	20001c84 	.word	0x20001c84
 800a558:	20001c22 	.word	0x20001c22

0800a55c <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <GAP_ConnectionComplete_CB+0x54>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800a56e:	4a11      	ldr	r2, [pc, #68]	; (800a5b4 <GAP_ConnectionComplete_CB+0x58>)
 800a570:	887b      	ldrh	r3, [r7, #2]
 800a572:	8013      	strh	r3, [r2, #0]
  
  printf("Connected to device:");
 800a574:	4810      	ldr	r0, [pc, #64]	; (800a5b8 <GAP_ConnectionComplete_CB+0x5c>)
 800a576:	f001 fd91 	bl	800c09c <printf>
  for(int i = 5; i > 0; i--){
 800a57a:	2305      	movs	r3, #5
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e00a      	b.n	800a596 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	4413      	add	r3, r2
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	4619      	mov	r1, r3
 800a58a:	480c      	ldr	r0, [pc, #48]	; (800a5bc <GAP_ConnectionComplete_CB+0x60>)
 800a58c:	f001 fd86 	bl	800c09c <printf>
  for(int i = 5; i > 0; i--){
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3b01      	subs	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dcf1      	bgt.n	800a580 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4807      	ldr	r0, [pc, #28]	; (800a5c0 <GAP_ConnectionComplete_CB+0x64>)
 800a5a4:	f001 fd7a 	bl	800c09c <printf>
}
 800a5a8:	bf00      	nop
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20001c1c 	.word	0x20001c1c
 800a5b4:	20001c20 	.word	0x20001c20
 800a5b8:	080106a4 	.word	0x080106a4
 800a5bc:	080106bc 	.word	0x080106bc
 800a5c0:	080106c4 	.word	0x080106c4

0800a5c4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
  connected = FALSE;
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <GAP_DisconnectionComplete_CB+0x38>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
  
  printf("Disconnected\n");
 800a5ce:	480c      	ldr	r0, [pc, #48]	; (800a600 <GAP_DisconnectionComplete_CB+0x3c>)
 800a5d0:	f001 fdf0 	bl	800c1b4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <GAP_DisconnectionComplete_CB+0x40>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <GAP_DisconnectionComplete_CB+0x44>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <GAP_DisconnectionComplete_CB+0x48>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <GAP_DisconnectionComplete_CB+0x4c>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <GAP_DisconnectionComplete_CB+0x50>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <GAP_DisconnectionComplete_CB+0x54>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	701a      	strb	r2, [r3, #0]
}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20001c1c 	.word	0x20001c1c
 800a600:	080106cc 	.word	0x080106cc
 800a604:	2000002a 	.word	0x2000002a
 800a608:	20001c22 	.word	0x20001c22
 800a60c:	20001c23 	.word	0x20001c23
 800a610:	20001c24 	.word	0x20001c24
 800a614:	20001c25 	.word	0x20001c25
 800a618:	20001c26 	.word	0x20001c26

0800a61c <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	603a      	str	r2, [r7, #0]
 800a626:	80fb      	strh	r3, [r7, #6]
 800a628:	460b      	mov	r3, r1
 800a62a:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 800a62c:	88fa      	ldrh	r2, [r7, #6]
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <GATT_Notification_CB+0x30>)
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	429a      	cmp	r2, r3
 800a636:	d104      	bne.n	800a642 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 800a638:	797b      	ldrb	r3, [r7, #5]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6838      	ldr	r0, [r7, #0]
 800a63e:	f7ff fed9 	bl	800a3f4 <receiveData>
  }
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20001c80 	.word	0x20001c80

0800a650 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	; 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;  
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	3301      	adds	r3, #1
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b04      	cmp	r3, #4
 800a668:	f040 80e1 	bne.w	800a82e <user_notify+0x1de>
    return;
  
  switch(event_pckt->evt){
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2b3e      	cmp	r3, #62	; 0x3e
 800a672:	d007      	beq.n	800a684 <user_notify+0x34>
 800a674:	2bff      	cmp	r3, #255	; 0xff
 800a676:	d01c      	beq.n	800a6b2 <user_notify+0x62>
 800a678:	2b05      	cmp	r3, #5
 800a67a:	f040 80db 	bne.w	800a834 <user_notify+0x1e4>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800a67e:	f7ff ffa1 	bl	800a5c4 <GAP_DisconnectionComplete_CB>
    }
    break;
 800a682:	e0d7      	b.n	800a834 <user_notify+0x1e4>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	3302      	adds	r3, #2
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
      
      switch(evt->subevent){
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d000      	beq.n	800a694 <user_notify+0x44>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 800a692:	e0cf      	b.n	800a834 <user_notify+0x1e4>
          evt_le_connection_complete *cc = (void *)evt->data;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	3301      	adds	r3, #1
 800a698:	623b      	str	r3, [r7, #32]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	1d5a      	adds	r2, r3, #5
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	f7ff ff57 	bl	800a55c <GAP_ConnectionComplete_CB>
        break;
 800a6ae:	bf00      	nop
    break;
 800a6b0:	e0c0      	b.n	800a834 <user_notify+0x1e4>
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 800a6c2:	2b11      	cmp	r3, #17
 800a6c4:	f200 80b5 	bhi.w	800a832 <user_notify+0x1e2>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <user_notify+0x80>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a719 	.word	0x0800a719
 800a6d4:	0800a833 	.word	0x0800a833
 800a6d8:	0800a833 	.word	0x0800a833
 800a6dc:	0800a833 	.word	0x0800a833
 800a6e0:	0800a833 	.word	0x0800a833
 800a6e4:	0800a833 	.word	0x0800a833
 800a6e8:	0800a833 	.word	0x0800a833
 800a6ec:	0800a833 	.word	0x0800a833
 800a6f0:	0800a833 	.word	0x0800a833
 800a6f4:	0800a833 	.word	0x0800a833
 800a6f8:	0800a833 	.word	0x0800a833
 800a6fc:	0800a833 	.word	0x0800a833
 800a700:	0800a833 	.word	0x0800a833
 800a704:	0800a833 	.word	0x0800a833
 800a708:	0800a759 	.word	0x0800a759
 800a70c:	0800a7e5 	.word	0x0800a7e5
 800a710:	0800a833 	.word	0x0800a833
 800a714:	0800a77b 	.word	0x0800a77b
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 800a718:	4b48      	ldr	r3, [pc, #288]	; (800a83c <user_notify+0x1ec>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d10d      	bne.n	800a73c <user_notify+0xec>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	3302      	adds	r3, #2
 800a724:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	885b      	ldrh	r3, [r3, #2]
 800a72a:	b298      	uxth	r0, r3
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	7919      	ldrb	r1, [r3, #4]
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	3307      	adds	r3, #7
 800a734:	461a      	mov	r2, r3
 800a736:	f7ff fee5 	bl	800a504 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          
        }
        break;
 800a73a:	e076      	b.n	800a82a <user_notify+0x1da>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	3302      	adds	r3, #2
 800a740:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	885b      	ldrh	r3, [r3, #2]
 800a746:	b298      	uxth	r0, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	7919      	ldrb	r1, [r3, #4]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	3305      	adds	r3, #5
 800a750:	461a      	mov	r2, r3
 800a752:	f7ff fed7 	bl	800a504 <Attribute_Modified_CB>
        break;
 800a756:	e068      	b.n	800a82a <user_notify+0x1da>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	3302      	adds	r3, #2
 800a75c:	613b      	str	r3, [r7, #16]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a764:	b298      	uxth	r0, r3
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	789b      	ldrb	r3, [r3, #2]
 800a76a:	3b02      	subs	r3, #2
 800a76c:	b2d9      	uxtb	r1, r3
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3305      	adds	r3, #5
 800a772:	461a      	mov	r2, r3
 800a774:	f7ff ff52 	bl	800a61c <GATT_Notification_CB>
        }
        break;
 800a778:	e057      	b.n	800a82a <user_notify+0x1da>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 800a77a:	4b31      	ldr	r3, [pc, #196]	; (800a840 <user_notify+0x1f0>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d150      	bne.n	800a824 <user_notify+0x1d4>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	3302      	adds	r3, #2
 800a786:	60fb      	str	r3, [r7, #12]
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800a788:	4b2e      	ldr	r3, [pc, #184]	; (800a844 <user_notify+0x1f4>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d011      	beq.n	800a7b6 <user_notify+0x166>
 800a792:	4b2d      	ldr	r3, [pc, #180]	; (800a848 <user_notify+0x1f8>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10c      	bne.n	800a7b6 <user_notify+0x166>
          {
            tx_handle = resp->attr_handle;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	4b29      	ldr	r3, [pc, #164]	; (800a84c <user_notify+0x1fc>)
 800a7a6:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 800a7a8:	4b28      	ldr	r3, [pc, #160]	; (800a84c <user_notify+0x1fc>)
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4828      	ldr	r0, [pc, #160]	; (800a850 <user_notify+0x200>)
 800a7b0:	f001 fc74 	bl	800c09c <printf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 800a7b4:	e036      	b.n	800a824 <user_notify+0x1d4>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800a7b6:	4b27      	ldr	r3, [pc, #156]	; (800a854 <user_notify+0x204>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d031      	beq.n	800a824 <user_notify+0x1d4>
 800a7c0:	4b25      	ldr	r3, [pc, #148]	; (800a858 <user_notify+0x208>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d12c      	bne.n	800a824 <user_notify+0x1d4>
            rx_handle = resp->attr_handle;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	4b22      	ldr	r3, [pc, #136]	; (800a85c <user_notify+0x20c>)
 800a7d4:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 800a7d6:	4b21      	ldr	r3, [pc, #132]	; (800a85c <user_notify+0x20c>)
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4820      	ldr	r0, [pc, #128]	; (800a860 <user_notify+0x210>)
 800a7de:	f001 fc5d 	bl	800c09c <printf>
        break;
 800a7e2:	e01f      	b.n	800a824 <user_notify+0x1d4>
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 800a7e4:	4b16      	ldr	r3, [pc, #88]	; (800a840 <user_notify+0x1f0>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d11d      	bne.n	800a828 <user_notify+0x1d8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800a7ec:	4b15      	ldr	r3, [pc, #84]	; (800a844 <user_notify+0x1f4>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <user_notify+0x1b8>
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <user_notify+0x1f8>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <user_notify+0x1b8>
          {
            end_read_tx_char_handle = TRUE;
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <user_notify+0x1f8>)
 800a802:	2201      	movs	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 800a806:	e00f      	b.n	800a828 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800a808:	4b12      	ldr	r3, [pc, #72]	; (800a854 <user_notify+0x204>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <user_notify+0x1d8>
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <user_notify+0x208>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d105      	bne.n	800a828 <user_notify+0x1d8>
            end_read_rx_char_handle = TRUE;
 800a81c:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <user_notify+0x208>)
 800a81e:	2201      	movs	r2, #1
 800a820:	701a      	strb	r2, [r3, #0]
        break;
 800a822:	e001      	b.n	800a828 <user_notify+0x1d8>
        break;
 800a824:	bf00      	nop
 800a826:	e000      	b.n	800a82a <user_notify+0x1da>
        break;
 800a828:	bf00      	nop
      }
    }
    break;
 800a82a:	bf00      	nop
 800a82c:	e001      	b.n	800a832 <user_notify+0x1e2>
    return;
 800a82e:	bf00      	nop
 800a830:	e000      	b.n	800a834 <user_notify+0x1e4>
    break;
 800a832:	bf00      	nop
  }    
}
 800a834:	3730      	adds	r7, #48	; 0x30
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	200018b4 	.word	0x200018b4
 800a840:	20000029 	.word	0x20000029
 800a844:	20001c23 	.word	0x20001c23
 800a848:	20001c25 	.word	0x20001c25
 800a84c:	20001c80 	.word	0x20001c80
 800a850:	080106dc 	.word	0x080106dc
 800a854:	20001c24 	.word	0x20001c24
 800a858:	20001c26 	.word	0x20001c26
 800a85c:	20001c82 	.word	0x20001c82
 800a860:	080106f4 	.word	0x080106f4

0800a864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a86c:	4b10      	ldr	r3, [pc, #64]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a86e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a870:	f043 0301 	orr.w	r3, r3, #1
 800a874:	6613      	str	r3, [r2, #96]	; 0x60
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a882:	4a0b      	ldr	r2, [pc, #44]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a88c:	6593      	str	r3, [r2, #88]	; 0x58
 800a88e:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <HAL_MspInit+0x4c>)
 800a890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a89a:	2200      	movs	r2, #0
 800a89c:	210f      	movs	r1, #15
 800a89e:	f06f 0001 	mvn.w	r0, #1
 800a8a2:	f7f7 fbc7 	bl	8002034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8a6:	bf00      	nop
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	40021000 	.word	0x40021000

0800a8b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a26      	ldr	r2, [pc, #152]	; (800a95c <HAL_TIM_Base_MspInit+0xa8>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d113      	bne.n	800a8ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a8c6:	4a26      	ldr	r2, [pc, #152]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a8c8:	4b25      	ldr	r3, [pc, #148]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	f043 0320 	orr.w	r3, r3, #32
 800a8d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a8d2:	4b23      	ldr	r3, [pc, #140]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2105      	movs	r1, #5
 800a8e2:	2037      	movs	r0, #55	; 0x37
 800a8e4:	f7f7 fba6 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a8e8:	2037      	movs	r0, #55	; 0x37
 800a8ea:	f7f7 fbbf 	bl	800206c <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM7_MspInit 1 */
  }

  //TODO: kolejne instancje timerow
  /* USER CODE BEGIN TIM4_MspInit 0 */
  if(htim_base->Instance==TIM4)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a1c      	ldr	r2, [pc, #112]	; (800a964 <HAL_TIM_Base_MspInit+0xb0>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d113      	bne.n	800a920 <HAL_TIM_Base_MspInit+0x6c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a8f8:	4a19      	ldr	r2, [pc, #100]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a8fa:	4b19      	ldr	r3, [pc, #100]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8fe:	f043 0304 	orr.w	r3, r3, #4
 800a902:	6593      	str	r3, [r2, #88]	; 0x58
 800a904:	4b16      	ldr	r3, [pc, #88]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	693b      	ldr	r3, [r7, #16]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800a910:	2200      	movs	r2, #0
 800a912:	2105      	movs	r1, #5
 800a914:	201e      	movs	r0, #30
 800a916:	f7f7 fb8d 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a91a:	201e      	movs	r0, #30
 800a91c:	f7f7 fba6 	bl	800206c <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM4_MspInit 0 */

  /* USER CODE BEGIN TIM6_MspInit 0 */
  if(htim_base->Instance==TIM6)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a10      	ldr	r2, [pc, #64]	; (800a968 <HAL_TIM_Base_MspInit+0xb4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d113      	bne.n	800a952 <HAL_TIM_Base_MspInit+0x9e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a92a:	4a0d      	ldr	r2, [pc, #52]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a92e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a930:	f043 0310 	orr.w	r3, r3, #16
 800a934:	6593      	str	r3, [r2, #88]	; 0x58
 800a936:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <HAL_TIM_Base_MspInit+0xac>)
 800a938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800a942:	2200      	movs	r2, #0
 800a944:	2105      	movs	r1, #5
 800a946:	2036      	movs	r0, #54	; 0x36
 800a948:	f7f7 fb74 	bl	8002034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a94c:	2036      	movs	r0, #54	; 0x36
 800a94e:	f7f7 fb8d 	bl	800206c <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM6_MspInit 0 */

}
 800a952:	bf00      	nop
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	40001400 	.word	0x40001400
 800a960:	40021000 	.word	0x40021000
 800a964:	40000800 	.word	0x40000800
 800a968:	40001000 	.word	0x40001000

0800a96c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	; 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <HAL_UART_MspInit+0x7c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d127      	bne.n	800a9de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a98e:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a990:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a998:	6593      	str	r3, [r2, #88]	; 0x58
 800a99a:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9a2:	613b      	str	r3, [r7, #16]
 800a9a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9a6:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a9a8:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	f043 0304 	orr.w	r3, r3, #4
 800a9b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <HAL_UART_MspInit+0x80>)
 800a9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a9be:	2330      	movs	r3, #48	; 0x30
 800a9c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a9ce:	2307      	movs	r3, #7
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9d2:	f107 0314 	add.w	r3, r7, #20
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <HAL_UART_MspInit+0x84>)
 800a9da:	f7f7 fbb3 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a9de:	bf00      	nop
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40004800 	.word	0x40004800
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	48000800 	.word	0x48000800

0800a9f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08c      	sub	sp, #48	; 0x30
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800aa04:	2200      	movs	r2, #0
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	201d      	movs	r0, #29
 800aa0a:	f7f7 fb13 	bl	8002034 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800aa0e:	201d      	movs	r0, #29
 800aa10:	f7f7 fb2c 	bl	800206c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800aa14:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <HAL_InitTick+0x9c>)
 800aa16:	4b1e      	ldr	r3, [pc, #120]	; (800aa90 <HAL_InitTick+0x9c>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	f043 0302 	orr.w	r3, r3, #2
 800aa1e:	6593      	str	r3, [r2, #88]	; 0x58
 800aa20:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <HAL_InitTick+0x9c>)
 800aa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aa2c:	f107 0210 	add.w	r2, r7, #16
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f8 fc58 	bl	80032ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800aa3c:	f7f8 fc2a 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 800aa40:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	4a13      	ldr	r2, [pc, #76]	; (800aa94 <HAL_InitTick+0xa0>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0c9b      	lsrs	r3, r3, #18
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800aa50:	4b11      	ldr	r3, [pc, #68]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa52:	4a12      	ldr	r2, [pc, #72]	; (800aa9c <HAL_InitTick+0xa8>)
 800aa54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800aa56:	4b10      	ldr	r3, [pc, #64]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa58:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aa5c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800aa5e:	4a0e      	ldr	r2, [pc, #56]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800aa64:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800aa70:	4809      	ldr	r0, [pc, #36]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa72:	f7f9 fd66 	bl	8004542 <HAL_TIM_Base_Init>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800aa7c:	4806      	ldr	r0, [pc, #24]	; (800aa98 <HAL_InitTick+0xa4>)
 800aa7e:	f7f9 fdb7 	bl	80045f0 <HAL_TIM_Base_Start_IT>
 800aa82:	4603      	mov	r3, r0
 800aa84:	e000      	b.n	800aa88 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3730      	adds	r7, #48	; 0x30
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	40021000 	.word	0x40021000
 800aa94:	431bde83 	.word	0x431bde83
 800aa98:	20001c8c 	.word	0x20001c8c
 800aa9c:	40000400 	.word	0x40000400

0800aaa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800aaa4:	f7f8 fc54 	bl	8003350 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800aaa8:	bf00      	nop
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aaac:	b480      	push	{r7}
 800aaae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aab0:	e7fe      	b.n	800aab0 <HardFault_Handler+0x4>

0800aab2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aab2:	b480      	push	{r7}
 800aab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aab6:	e7fe      	b.n	800aab6 <MemManage_Handler+0x4>

0800aab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aabc:	e7fe      	b.n	800aabc <BusFault_Handler+0x4>

0800aabe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aabe:	b480      	push	{r7}
 800aac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aac2:	e7fe      	b.n	800aac2 <UsageFault_Handler+0x4>

0800aac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aac4:	b480      	push	{r7}
 800aac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aac8:	bf00      	nop
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
	...

0800aad4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800aad8:	4802      	ldr	r0, [pc, #8]	; (800aae4 <EXTI0_IRQHandler+0x10>)
 800aada:	f7f7 fb03 	bl	80020e4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800aade:	bf00      	nop
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001c78 	.word	0x20001c78

0800aae8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800aaec:	4802      	ldr	r0, [pc, #8]	; (800aaf8 <TIM3_IRQHandler+0x10>)
 800aaee:	f7f9 fda9 	bl	8004644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800aaf2:	bf00      	nop
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20001c8c 	.word	0x20001c8c

0800aafc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800ab00:	4802      	ldr	r0, [pc, #8]	; (800ab0c <EXTI15_10_IRQHandler+0x10>)
 800ab02:	f7f7 faef 	bl	80020e4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ab06:	bf00      	nop
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000034 	.word	0x20000034

0800ab10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ab14:	4802      	ldr	r0, [pc, #8]	; (800ab20 <TIM7_IRQHandler+0x10>)
 800ab16:	f7f9 fd95 	bl	8004644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ab1a:	bf00      	nop
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	200006d0 	.word	0x200006d0

0800ab24 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 800ab2e:	4a16      	ldr	r2, [pc, #88]	; (800ab88 <BSP_LED_Init+0x64>)
 800ab30:	4b15      	ldr	r3, [pc, #84]	; (800ab88 <BSP_LED_Init+0x64>)
 800ab32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab34:	f043 0301 	orr.w	r3, r3, #1
 800ab38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab3a:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <BSP_LED_Init+0x64>)
 800ab3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	60bb      	str	r3, [r7, #8]
 800ab44:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800ab46:	2320      	movs	r3, #32
 800ab48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800ab52:	2302      	movs	r3, #2
 800ab54:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	4a0c      	ldr	r2, [pc, #48]	; (800ab8c <BSP_LED_Init+0x68>)
 800ab5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5e:	f107 020c 	add.w	r2, r7, #12
 800ab62:	4611      	mov	r1, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7f7 faed 	bl	8002144 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <BSP_LED_Init+0x68>)
 800ab6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab72:	2120      	movs	r1, #32
 800ab74:	2200      	movs	r2, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f7 fd98 	bl	80026ac <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	40021000 	.word	0x40021000
 800ab8c:	2000002c 	.word	0x2000002c

0800ab90 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	4a06      	ldr	r2, [pc, #24]	; (800abb8 <BSP_LED_On+0x28>)
 800ab9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aba2:	2120      	movs	r1, #32
 800aba4:	2201      	movs	r2, #1
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f7 fd80 	bl	80026ac <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	2000002c 	.word	0x2000002c

0800abbc <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800abc6:	79fb      	ldrb	r3, [r7, #7]
 800abc8:	4a06      	ldr	r2, [pc, #24]	; (800abe4 <BSP_LED_Off+0x28>)
 800abca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abce:	2120      	movs	r1, #32
 800abd0:	2200      	movs	r2, #0
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f7 fd6a 	bl	80026ac <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	2000002c 	.word	0x2000002c

0800abe8 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	4a06      	ldr	r2, [pc, #24]	; (800ac10 <BSP_LED_Toggle+0x28>)
 800abf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abfa:	2220      	movs	r2, #32
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f7 fd6c 	bl	80026dc <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	2000002c 	.word	0x2000002c

0800ac14 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	460a      	mov	r2, r1
 800ac1e:	71fb      	strb	r3, [r7, #7]
 800ac20:	4613      	mov	r3, r2
 800ac22:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800ac24:	2300      	movs	r3, #0
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 800ac28:	4a32      	ldr	r2, [pc, #200]	; (800acf4 <BSP_PB_Init+0xe0>)
 800ac2a:	4b32      	ldr	r3, [pc, #200]	; (800acf4 <BSP_PB_Init+0xe0>)
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2e:	f043 0304 	orr.w	r3, r3, #4
 800ac32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac34:	4b2f      	ldr	r3, [pc, #188]	; (800acf4 <BSP_PB_Init+0xe0>)
 800ac36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800ac40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac44:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800ac46:	2302      	movs	r3, #2
 800ac48:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	61fb      	str	r3, [r7, #28]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800ac4e:	79bb      	ldrb	r3, [r7, #6]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	4a27      	ldr	r2, [pc, #156]	; (800acf8 <BSP_PB_Init+0xe4>)
 800ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac60:	f107 0210 	add.w	r2, r7, #16
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f7 fa6c 	bl	8002144 <HAL_GPIO_Init>
 800ac6c:	e03d      	b.n	800acea <BSP_PB_Init+0xd6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800ac6e:	4b23      	ldr	r3, [pc, #140]	; (800acfc <BSP_PB_Init+0xe8>)
 800ac70:	617b      	str	r3, [r7, #20]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	4a20      	ldr	r2, [pc, #128]	; (800acf8 <BSP_PB_Init+0xe4>)
 800ac76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7a:	f107 0210 	add.w	r2, r7, #16
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f7 fa5f 	bl	8002144 <HAL_GPIO_Init>
    
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	4a1d      	ldr	r2, [pc, #116]	; (800ad00 <BSP_PB_Init+0xec>)
 800ac8c:	1898      	adds	r0, r3, r2
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	4a1c      	ldr	r2, [pc, #112]	; (800ad04 <BSP_PB_Init+0xf0>)
 800ac92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac96:	4619      	mov	r1, r3
 800ac98:	f7f7 fa10 	bl	80020bc <HAL_EXTI_GetHandle>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <BSP_PB_Init+0x96>
	{
      ret = BSP_ERROR_PERIPH_FAILURE;
 800aca2:	f06f 0303 	mvn.w	r3, #3
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
 800aca8:	e01f      	b.n	800acea <BSP_PB_Init+0xd6>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4a14      	ldr	r2, [pc, #80]	; (800ad00 <BSP_PB_Init+0xec>)
 800acb0:	1898      	adds	r0, r3, r2
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	4a14      	ldr	r2, [pc, #80]	; (800ad08 <BSP_PB_Init+0xf4>)
 800acb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acba:	461a      	mov	r2, r3
 800acbc:	2100      	movs	r1, #0
 800acbe:	f7f7 f9e3 	bl	8002088 <HAL_EXTI_RegisterCallback>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <BSP_PB_Init+0xbc>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800acc8:	f06f 0303 	mvn.w	r3, #3
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
 800acce:	e00c      	b.n	800acea <BSP_PB_Init+0xd6>
    }
	else
	{
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800acd0:	2028      	movs	r0, #40	; 0x28
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	4a0d      	ldr	r2, [pc, #52]	; (800ad0c <BSP_PB_Init+0xf8>)
 800acd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acda:	2200      	movs	r2, #0
 800acdc:	4619      	mov	r1, r3
 800acde:	f7f7 f9a9 	bl	8002034 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800ace2:	2328      	movs	r3, #40	; 0x28
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f7 f9c1 	bl	800206c <HAL_NVIC_EnableIRQ>
	}
  }
  
  return ret;
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acec:	4618      	mov	r0, r3
 800acee:	3728      	adds	r7, #40	; 0x28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	40021000 	.word	0x40021000
 800acf8:	20000030 	.word	0x20000030
 800acfc:	10110000 	.word	0x10110000
 800ad00:	20000034 	.word	0x20000034
 800ad04:	08010734 	.word	0x08010734
 800ad08:	08010738 	.word	0x08010738
 800ad0c:	0801073c 	.word	0x0801073c

0800ad10 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <BSP_PB_GetState+0x34>)
 800ad1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f7 fca7 	bl	800267c <HAL_GPIO_ReadPin>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bf0c      	ite	eq
 800ad34:	2301      	moveq	r3, #1
 800ad36:	2300      	movne	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000030 	.word	0x20000030

0800ad48 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7fe f985 	bl	800905c <BSP_PB_Callback>
}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
  
  if(COM > COMn)
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d903      	bls.n	800ad74 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ad6c:	f06f 0301 	mvn.w	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	e01c      	b.n	800adae <BSP_COM_Init+0x56>
  }
  else
  {  
     hcom_uart[COM].Instance = COM_USART[COM];
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	79fa      	ldrb	r2, [r7, #7]
 800ad78:	490f      	ldr	r1, [pc, #60]	; (800adb8 <BSP_COM_Init+0x60>)
 800ad7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad7e:	490f      	ldr	r1, [pc, #60]	; (800adbc <BSP_COM_Init+0x64>)
 800ad80:	01db      	lsls	r3, r3, #7
 800ad82:	440b      	add	r3, r1
 800ad84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	01db      	lsls	r3, r3, #7
 800ad8a:	4a0c      	ldr	r2, [pc, #48]	; (800adbc <BSP_COM_Init+0x64>)
 800ad8c:	4413      	add	r3, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f862 	bl	800ae58 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
  
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	01db      	lsls	r3, r3, #7
 800ad98:	4a08      	ldr	r2, [pc, #32]	; (800adbc <BSP_COM_Init+0x64>)
 800ad9a:	4413      	add	r3, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f80f 	bl	800adc0 <MX_USART2_UART_Init>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800ada8:	f06f 0303 	mvn.w	r3, #3
 800adac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	2000003c 	.word	0x2000003c
 800adbc:	20001ccc 	.word	0x20001ccc

0800adc0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */ 

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a15      	ldr	r2, [pc, #84]	; (800ae24 <MX_USART2_UART_Init+0x64>)
 800add0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800add8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	220c      	movs	r2, #12
 800adf0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7f9 fea2 	bl	8004b54 <HAL_UART_Init>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	40004400 	.word	0x40004400

0800ae28 <__io_putchar>:
#ifdef __GNUC__ 
 int __io_putchar (int ch) 
#else 
 int fputc (int ch, FILE *f) 
#endif /* __GNUC__ */ 
{ 
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <__io_putchar+0x28>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	01db      	lsls	r3, r3, #7
 800ae36:	4a07      	ldr	r2, [pc, #28]	; (800ae54 <__io_putchar+0x2c>)
 800ae38:	1898      	adds	r0, r3, r2
 800ae3a:	1d39      	adds	r1, r7, #4
 800ae3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae40:	2201      	movs	r2, #1
 800ae42:	f7f9 fed5 	bl	8004bf0 <HAL_UART_Transmit>
  return ch;
 800ae46:	687b      	ldr	r3, [r7, #4]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001c27 	.word	0x20001c27
 800ae54:	20001ccc 	.word	0x20001ccc

0800ae58 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	; 0x28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ae60:	4a16      	ldr	r2, [pc, #88]	; (800aebc <USART2_MspInit+0x64>)
 800ae62:	4b16      	ldr	r3, [pc, #88]	; (800aebc <USART2_MspInit+0x64>)
 800ae64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae6c:	4b13      	ldr	r3, [pc, #76]	; (800aebc <USART2_MspInit+0x64>)
 800ae6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae74:	613b      	str	r3, [r7, #16]
 800ae76:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae78:	4a10      	ldr	r2, [pc, #64]	; (800aebc <USART2_MspInit+0x64>)
 800ae7a:	4b10      	ldr	r3, [pc, #64]	; (800aebc <USART2_MspInit+0x64>)
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae84:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <USART2_MspInit+0x64>)
 800ae86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ae90:	230c      	movs	r3, #12
 800ae92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae94:	2302      	movs	r3, #2
 800ae96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aea0:	2307      	movs	r3, #7
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aea4:	f107 0314 	add.w	r3, r7, #20
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aeae:	f7f7 f949 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800aeb2:	bf00      	nop
 800aeb4:	3728      	adds	r7, #40	; 0x28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	40021000 	.word	0x40021000

0800aec0 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL. 
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) 
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800aec6:	2300      	movs	r3, #0
 800aec8:	607b      	str	r3, [r7, #4]
  
  hspi1.Instance  = SPI1;
 800aeca:	4b12      	ldr	r3, [pc, #72]	; (800af14 <BSP_SPI1_Init+0x54>)
 800aecc:	4a12      	ldr	r2, [pc, #72]	; (800af18 <BSP_SPI1_Init+0x58>)
 800aece:	601a      	str	r2, [r3, #0]
  
  if(SPI1InitCounter++ == 0)
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <BSP_SPI1_Init+0x5c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	4911      	ldr	r1, [pc, #68]	; (800af1c <BSP_SPI1_Init+0x5c>)
 800aed8:	600a      	str	r2, [r1, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d114      	bne.n	800af08 <BSP_SPI1_Init+0x48>
  {    
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 800aede:	480d      	ldr	r0, [pc, #52]	; (800af14 <BSP_SPI1_Init+0x54>)
 800aee0:	f7f9 fa04 	bl	80042ec <HAL_SPI_GetState>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10e      	bne.n	800af08 <BSP_SPI1_Init+0x48>
	{ 
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 800aeea:	480a      	ldr	r0, [pc, #40]	; (800af14 <BSP_SPI1_Init+0x54>)
 800aeec:	f000 f882 	bl	800aff4 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}	
#endif   
		if(ret == BSP_ERROR_NONE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d108      	bne.n	800af08 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800aef6:	4807      	ldr	r0, [pc, #28]	; (800af14 <BSP_SPI1_Init+0x54>)
 800aef8:	f000 f83a 	bl	800af70 <MX_SPI1_Init>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 800af02:	f06f 0307 	mvn.w	r3, #7
 800af06:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }	

  return ret;
 800af08:	687b      	ldr	r3, [r7, #4]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20001d4c 	.word	0x20001d4c
 800af18:	40013000 	.word	0x40013000
 800af1c:	20001c28 	.word	0x20001c28

0800af20 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800af2e:	2300      	movs	r3, #0
 800af30:	617b      	str	r3, [r7, #20]
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800af32:	88fa      	ldrh	r2, [r7, #6]
 800af34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	4613      	mov	r3, r2
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	68f9      	ldr	r1, [r7, #12]
 800af40:	4806      	ldr	r0, [pc, #24]	; (800af5c <BSP_SPI1_SendRecv+0x3c>)
 800af42:	f7f8 ffc3 	bl	8003ecc <HAL_SPI_TransmitReceive>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800af4c:	f06f 0305 	mvn.w	r3, #5
 800af50:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800af52:	697b      	ldr	r3, [r7, #20]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20001d4c 	.word	0x20001d4c

0800af60 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800af64:	f7f6 ff82 	bl	8001e6c <HAL_GetTick>
 800af68:	4603      	mov	r3, r0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <MX_SPI1_Init>:

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a1c      	ldr	r2, [pc, #112]	; (800aff0 <MX_SPI1_Init+0x80>)
 800af80:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f44f 7282 	mov.w	r2, #260	; 0x104
 800af88:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800af96:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afaa:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2218      	movs	r2, #24
 800afb0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2207      	movs	r2, #7
 800afc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2208      	movs	r2, #8
 800afd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7f8 fee6 	bl	8003da8 <HAL_SPI_Init>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	40013000 	.word	0x40013000

0800aff4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800affc:	4a24      	ldr	r2, [pc, #144]	; (800b090 <SPI1_MspInit+0x9c>)
 800affe:	4b24      	ldr	r3, [pc, #144]	; (800b090 <SPI1_MspInit+0x9c>)
 800b000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b006:	6613      	str	r3, [r2, #96]	; 0x60
 800b008:	4b21      	ldr	r3, [pc, #132]	; (800b090 <SPI1_MspInit+0x9c>)
 800b00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b010:	613b      	str	r3, [r7, #16]
 800b012:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b014:	4a1e      	ldr	r2, [pc, #120]	; (800b090 <SPI1_MspInit+0x9c>)
 800b016:	4b1e      	ldr	r3, [pc, #120]	; (800b090 <SPI1_MspInit+0x9c>)
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	f043 0301 	orr.w	r3, r3, #1
 800b01e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b020:	4b1b      	ldr	r3, [pc, #108]	; (800b090 <SPI1_MspInit+0x9c>)
 800b022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b02c:	4a18      	ldr	r2, [pc, #96]	; (800b090 <SPI1_MspInit+0x9c>)
 800b02e:	4b18      	ldr	r3, [pc, #96]	; (800b090 <SPI1_MspInit+0x9c>)
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	f043 0302 	orr.w	r3, r3, #2
 800b036:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b038:	4b15      	ldr	r3, [pc, #84]	; (800b090 <SPI1_MspInit+0x9c>)
 800b03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03c:	f003 0302 	and.w	r3, r3, #2
 800b040:	60bb      	str	r3, [r7, #8]
 800b042:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b044:	23c0      	movs	r3, #192	; 0xc0
 800b046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b048:	2302      	movs	r3, #2
 800b04a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b050:	2303      	movs	r3, #3
 800b052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b054:	2305      	movs	r3, #5
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b058:	f107 0314 	add.w	r3, r7, #20
 800b05c:	4619      	mov	r1, r3
 800b05e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b062:	f7f7 f86f 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b066:	2308      	movs	r3, #8
 800b068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b06a:	2302      	movs	r3, #2
 800b06c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b072:	2303      	movs	r3, #3
 800b074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b076:	2305      	movs	r3, #5
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b07a:	f107 0314 	add.w	r3, r7, #20
 800b07e:	4619      	mov	r1, r3
 800b080:	4804      	ldr	r0, [pc, #16]	; (800b094 <SPI1_MspInit+0xa0>)
 800b082:	f7f7 f85f 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800b086:	bf00      	nop
 800b088:	3728      	adds	r7, #40	; 0x28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40021000 	.word	0x40021000
 800b094:	48000400 	.word	0x48000400

0800b098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
	return 1;
 800b09c:	2301      	movs	r3, #1
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <_kill>:

int _kill(int pid, int sig)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b0b2:	f000 fa9f 	bl	800b5f4 <__errno>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	2316      	movs	r3, #22
 800b0ba:	6013      	str	r3, [r2, #0]
	return -1;
 800b0bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <_exit>:

void _exit (int status)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b0d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff ffe7 	bl	800b0a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b0da:	e7fe      	b.n	800b0da <_exit+0x12>

0800b0dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e00a      	b.n	800b104 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b0ee:	68bc      	ldr	r4, [r7, #8]
 800b0f0:	1c63      	adds	r3, r4, #1
 800b0f2:	60bb      	str	r3, [r7, #8]
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	3301      	adds	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	dbf0      	blt.n	800b0ee <_read+0x12>
	}

return len;
 800b10c:	687b      	ldr	r3, [r7, #4]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd90      	pop	{r4, r7, pc}

0800b116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b086      	sub	sp, #24
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
 800b126:	e009      	b.n	800b13c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	60ba      	str	r2, [r7, #8]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fe79 	bl	800ae28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	3301      	adds	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	429a      	cmp	r2, r3
 800b142:	dbf1      	blt.n	800b128 <_write+0x12>
	}
	return len;
 800b144:	687b      	ldr	r3, [r7, #4]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <_sbrk+0x50>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <_sbrk+0x16>
		heap_end = &end;
 800b160:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <_sbrk+0x50>)
 800b162:	4a10      	ldr	r2, [pc, #64]	; (800b1a4 <_sbrk+0x54>)
 800b164:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b166:	4b0e      	ldr	r3, [pc, #56]	; (800b1a0 <_sbrk+0x50>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b16c:	4b0c      	ldr	r3, [pc, #48]	; (800b1a0 <_sbrk+0x50>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4413      	add	r3, r2
 800b174:	466a      	mov	r2, sp
 800b176:	4293      	cmp	r3, r2
 800b178:	d907      	bls.n	800b18a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b17a:	f000 fa3b 	bl	800b5f4 <__errno>
 800b17e:	4602      	mov	r2, r0
 800b180:	230c      	movs	r3, #12
 800b182:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	e006      	b.n	800b198 <_sbrk+0x48>
	}

	heap_end += incr;
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_sbrk+0x50>)
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	4a03      	ldr	r2, [pc, #12]	; (800b1a0 <_sbrk+0x50>)
 800b194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20001c2c 	.word	0x20001c2c
 800b1a4:	20001dc0 	.word	0x20001dc0

0800b1a8 <_close>:

int _close(int file)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	return -1;
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1d0:	605a      	str	r2, [r3, #4]
	return 0;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <_isatty>:

int _isatty(int file)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	return 1;
 800b1e8:	2301      	movs	r3, #1
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b085      	sub	sp, #20
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	607a      	str	r2, [r7, #4]
	return 0;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b210:	b480      	push	{r7}
 800b212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b214:	4a17      	ldr	r2, [pc, #92]	; (800b274 <SystemInit+0x64>)
 800b216:	4b17      	ldr	r3, [pc, #92]	; (800b274 <SystemInit+0x64>)
 800b218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b224:	4a14      	ldr	r2, [pc, #80]	; (800b278 <SystemInit+0x68>)
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <SystemInit+0x68>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b230:	4b11      	ldr	r3, [pc, #68]	; (800b278 <SystemInit+0x68>)
 800b232:	2200      	movs	r2, #0
 800b234:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b236:	4a10      	ldr	r2, [pc, #64]	; (800b278 <SystemInit+0x68>)
 800b238:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <SystemInit+0x68>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b240:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b244:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <SystemInit+0x68>)
 800b248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b24c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b24e:	4a0a      	ldr	r2, [pc, #40]	; (800b278 <SystemInit+0x68>)
 800b250:	4b09      	ldr	r3, [pc, #36]	; (800b278 <SystemInit+0x68>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b258:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b25a:	4b07      	ldr	r3, [pc, #28]	; (800b278 <SystemInit+0x68>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b260:	4b04      	ldr	r3, [pc, #16]	; (800b274 <SystemInit+0x64>)
 800b262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b266:	609a      	str	r2, [r3, #8]
#endif
}
 800b268:	bf00      	nop
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	e000ed00 	.word	0xe000ed00
 800b278:	40021000 	.word	0x40021000

0800b27c <_ZN5TimerC1EP17TIM_HandleTypeDef>:
#include <timer.hpp>

Timer::Timer(TIM_HandleTypeDef *htim){
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
	this->handle = htim;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	601a      	str	r2, [r3, #0]
}
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <_ZN5Timer9getHandleEv>:

TIM_HandleTypeDef* Timer::getHandle(void){
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
	return this->handle;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <_ZN5Timer9setDriverEP13GenericDriver>:

void Timer::setDriver(GenericDriver *genericDriver){
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
	this->myDriver = genericDriver;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	605a      	str	r2, [r3, #4]
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <_ZN5Timer9getDriverEv>:

GenericDriver* Timer::getDriver(void){
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
	return this->myDriver;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>:

void Timer::wakeMeUpAfterMicroseconds(uint16_t us){
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	807b      	strh	r3, [r7, #2]
	//bazowa czestotliwosc taktowania 80MHz => 80 taktow na us
	this->handle->Init.Prescaler = 79;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	224f      	movs	r2, #79	; 0x4f
 800b2f8:	605a      	str	r2, [r3, #4]
	this->handle->Init.Period = (us > 0) ? (us - 1) : 0;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	887a      	ldrh	r2, [r7, #2]
 800b300:	2a00      	cmp	r2, #0
 800b302:	dd02      	ble.n	800b30a <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x24>
 800b304:	887a      	ldrh	r2, [r7, #2]
 800b306:	3a01      	subs	r2, #1
 800b308:	e000      	b.n	800b30c <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x26>
 800b30a:	2200      	movs	r2, #0
 800b30c:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(this->handle) == HAL_OK){
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4618      	mov	r0, r3
 800b314:	f7f9 f915 	bl	8004542 <HAL_TIM_Base_Init>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bf0c      	ite	eq
 800b31e:	2301      	moveq	r3, #1
 800b320:	2300      	movne	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x56>
		HAL_TIM_Base_Start_IT(this->handle); //TODO: TIM6, TIM4 fix!
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f9 f95f 	bl	80045f0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop(this->handle);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4618      	mov	r0, r3
 800b338:	f7f9 f92e 	bl	8004598 <HAL_TIM_Base_Stop>
	}
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b37c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b34a:	e003      	b.n	800b354 <LoopCopyDataInit>

0800b34c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b34c:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b34e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b352:	3104      	adds	r1, #4

0800b354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b354:	480b      	ldr	r0, [pc, #44]	; (800b384 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <LoopForever+0xe>)
	adds	r2, r0, r1
 800b358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b35a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b35c:	d3f6      	bcc.n	800b34c <CopyDataInit>
	ldr	r2, =_sbss
 800b35e:	4a0b      	ldr	r2, [pc, #44]	; (800b38c <LoopForever+0x12>)
	b	LoopFillZerobss
 800b360:	e002      	b.n	800b368 <LoopFillZerobss>

0800b362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b364:	f842 3b04 	str.w	r3, [r2], #4

0800b368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <LoopForever+0x16>)
	cmp	r2, r3
 800b36a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b36c:	d3f9      	bcc.n	800b362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b36e:	f7ff ff4f 	bl	800b210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b372:	f000 fc2d 	bl	800bbd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b376:	f7fe f943 	bl	8009600 <main>

0800b37a <LoopForever>:

LoopForever:
    b LoopForever
 800b37a:	e7fe      	b.n	800b37a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b37c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800b380:	08010e68 	.word	0x08010e68
	ldr	r0, =_sdata
 800b384:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b388:	200006b4 	.word	0x200006b4
	ldr	r2, =_sbss
 800b38c:	200006b4 	.word	0x200006b4
	ldr	r3, = _ebss
 800b390:	20001dc0 	.word	0x20001dc0

0800b394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b394:	e7fe      	b.n	800b394 <ADC1_2_IRQHandler>
	...

0800b398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4b03      	ldr	r3, [pc, #12]	; (800b3a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800b39c:	6003      	str	r3, [r0, #0]
 800b39e:	4604      	mov	r4, r0
 800b3a0:	f000 f8b2 	bl	800b508 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	080107c4 	.word	0x080107c4

0800b3ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800b3b0:	6003      	str	r3, [r0, #0]
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	f000 f8a8 	bl	800b508 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	210c      	movs	r1, #12
 800b3bc:	f000 f880 	bl	800b4c0 <_ZdlPvj>
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	bd10      	pop	{r4, pc}
 800b3c4:	080107c4 	.word	0x080107c4

0800b3c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	9c06      	ldr	r4, [sp, #24]
 800b3d0:	4294      	cmp	r4, r2
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	d009      	beq.n	800b3ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800b3d6:	68b0      	ldr	r0, [r6, #8]
 800b3d8:	6806      	ldr	r6, [r0, #0]
 800b3da:	9406      	str	r4, [sp, #24]
 800b3dc:	6a34      	ldr	r4, [r6, #32]
 800b3de:	4629      	mov	r1, r5
 800b3e0:	46a4      	mov	ip, r4
 800b3e2:	b002      	add	sp, #8
 800b3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3e8:	4760      	bx	ip
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	f000 f8e8 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d0ec      	beq.n	800b3d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800b3fc:	2006      	movs	r0, #6
 800b3fe:	b002      	add	sp, #8
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	bf00      	nop

0800b404 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	b081      	sub	sp, #4
 800b40a:	460e      	mov	r6, r1
 800b40c:	4619      	mov	r1, r3
 800b40e:	461f      	mov	r7, r3
 800b410:	4691      	mov	r9, r2
 800b412:	4683      	mov	fp, r0
 800b414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b416:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800b41a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b41e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b420:	f000 f8d0 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b424:	b170      	cbz	r0, 800b444 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800b426:	2e00      	cmp	r6, #0
 800b428:	602c      	str	r4, [r5, #0]
 800b42a:	f885 9004 	strb.w	r9, [r5, #4]
 800b42e:	db1f      	blt.n	800b470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 800b430:	4434      	add	r4, r6
 800b432:	45a0      	cmp	r8, r4
 800b434:	bf0c      	ite	eq
 800b436:	2406      	moveq	r4, #6
 800b438:	2401      	movne	r4, #1
 800b43a:	71ac      	strb	r4, [r5, #6]
 800b43c:	2000      	movs	r0, #0
 800b43e:	b001      	add	sp, #4
 800b440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b444:	4544      	cmp	r4, r8
 800b446:	d018      	beq.n	800b47a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 800b448:	f8db 0008 	ldr.w	r0, [fp, #8]
 800b44c:	f8d0 e000 	ldr.w	lr, [r0]
 800b450:	950d      	str	r5, [sp, #52]	; 0x34
 800b452:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b456:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800b45a:	940a      	str	r4, [sp, #40]	; 0x28
 800b45c:	f8de 401c 	ldr.w	r4, [lr, #28]
 800b460:	463b      	mov	r3, r7
 800b462:	464a      	mov	r2, r9
 800b464:	4631      	mov	r1, r6
 800b466:	46a4      	mov	ip, r4
 800b468:	b001      	add	sp, #4
 800b46a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46e:	4760      	bx	ip
 800b470:	3602      	adds	r6, #2
 800b472:	d1e3      	bne.n	800b43c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800b474:	2301      	movs	r3, #1
 800b476:	71ab      	strb	r3, [r5, #6]
 800b478:	e7e0      	b.n	800b43c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800b47a:	4651      	mov	r1, sl
 800b47c:	4658      	mov	r0, fp
 800b47e:	f000 f8a1 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b482:	2800      	cmp	r0, #0
 800b484:	d0e0      	beq.n	800b448 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 800b486:	2000      	movs	r0, #0
 800b488:	f885 9005 	strb.w	r9, [r5, #5]
 800b48c:	b001      	add	sp, #4
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	bf00      	nop

0800b494 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b498:	4607      	mov	r7, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4615      	mov	r5, r2
 800b49e:	461e      	mov	r6, r3
 800b4a0:	f000 f84a 	bl	800b538 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800b4a4:	b108      	cbz	r0, 800b4aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800b4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4aa:	68b8      	ldr	r0, [r7, #8]
 800b4ac:	6807      	ldr	r7, [r0, #0]
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	69bc      	ldr	r4, [r7, #24]
 800b4b2:	4633      	mov	r3, r6
 800b4b4:	462a      	mov	r2, r5
 800b4b6:	46a4      	mov	ip, r4
 800b4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	4760      	bx	ip
 800b4be:	bf00      	nop

0800b4c0 <_ZdlPvj>:
 800b4c0:	f000 b896 	b.w	800b5f0 <_ZdlPv>

0800b4c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	6803      	ldr	r3, [r0, #0]
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	699e      	ldr	r6, [r3, #24]
 800b4ce:	9400      	str	r4, [sp, #0]
 800b4d0:	2310      	movs	r3, #16
 800b4d2:	4615      	mov	r5, r2
 800b4d4:	9302      	str	r3, [sp, #8]
 800b4d6:	6812      	ldr	r2, [r2, #0]
 800b4d8:	f88d 4004 	strb.w	r4, [sp, #4]
 800b4dc:	466b      	mov	r3, sp
 800b4de:	9403      	str	r4, [sp, #12]
 800b4e0:	47b0      	blx	r6
 800b4e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4e6:	f003 0306 	and.w	r3, r3, #6
 800b4ea:	2b06      	cmp	r3, #6
 800b4ec:	bf03      	ittte	eq
 800b4ee:	9b00      	ldreq	r3, [sp, #0]
 800b4f0:	602b      	streq	r3, [r5, #0]
 800b4f2:	2001      	moveq	r0, #1
 800b4f4:	4620      	movne	r0, r4
 800b4f6:	b004      	add	sp, #16
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	bf00      	nop

0800b4fc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800b4fc:	9800      	ldr	r0, [sp, #0]
 800b4fe:	4290      	cmp	r0, r2
 800b500:	bf0c      	ite	eq
 800b502:	2006      	moveq	r0, #6
 800b504:	2001      	movne	r0, #1
 800b506:	4770      	bx	lr

0800b508 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800b508:	b510      	push	{r4, lr}
 800b50a:	4b03      	ldr	r3, [pc, #12]	; (800b518 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800b50c:	6003      	str	r3, [r0, #0]
 800b50e:	4604      	mov	r4, r0
 800b510:	f000 f854 	bl	800b5bc <_ZNSt9type_infoD1Ev>
 800b514:	4620      	mov	r0, r4
 800b516:	bd10      	pop	{r4, pc}
 800b518:	08010820 	.word	0x08010820

0800b51c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	4604      	mov	r4, r0
 800b524:	f000 f84a 	bl	800b5bc <_ZNSt9type_infoD1Ev>
 800b528:	4620      	mov	r0, r4
 800b52a:	2108      	movs	r1, #8
 800b52c:	f7ff ffc8 	bl	800b4c0 <_ZdlPvj>
 800b530:	4620      	mov	r0, r4
 800b532:	bd10      	pop	{r4, pc}
 800b534:	08010820 	.word	0x08010820

0800b538 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4615      	mov	r5, r2
 800b53c:	461c      	mov	r4, r3
 800b53e:	f000 f841 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b542:	b120      	cbz	r0, 800b54e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800b544:	2208      	movs	r2, #8
 800b546:	2306      	movs	r3, #6
 800b548:	6025      	str	r5, [r4, #0]
 800b54a:	60e2      	str	r2, [r4, #12]
 800b54c:	7123      	strb	r3, [r4, #4]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}

0800b550 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	4617      	mov	r7, r2
 800b556:	461c      	mov	r4, r3
 800b558:	4606      	mov	r6, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	f000 f832 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b560:	b908      	cbnz	r0, 800b566 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800b562:	2c03      	cmp	r4, #3
 800b564:	d901      	bls.n	800b56a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800b566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	463a      	mov	r2, r7
 800b56e:	4631      	mov	r1, r6
 800b570:	4628      	mov	r0, r5
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	4718      	bx	r3
 800b57a:	bf00      	nop

0800b57c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800b57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57e:	b083      	sub	sp, #12
 800b580:	4617      	mov	r7, r2
 800b582:	9d08      	ldr	r5, [sp, #32]
 800b584:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b586:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b588:	428d      	cmp	r5, r1
 800b58a:	4606      	mov	r6, r0
 800b58c:	d00b      	beq.n	800b5a6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800b58e:	4619      	mov	r1, r3
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f817 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b596:	b118      	cbz	r0, 800b5a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800b598:	2301      	movs	r3, #1
 800b59a:	6025      	str	r5, [r4, #0]
 800b59c:	7127      	strb	r7, [r4, #4]
 800b59e:	71a3      	strb	r3, [r4, #6]
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	b003      	add	sp, #12
 800b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5a8:	9301      	str	r3, [sp, #4]
 800b5aa:	f000 f80b 	bl	800b5c4 <_ZNKSt9type_infoeqERKS_>
 800b5ae:	b118      	cbz	r0, 800b5b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	7167      	strb	r7, [r4, #5]
 800b5b4:	b003      	add	sp, #12
 800b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b8:	9b01      	ldr	r3, [sp, #4]
 800b5ba:	e7e8      	b.n	800b58e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800b5bc <_ZNSt9type_infoD1Ev>:
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop

0800b5c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	4770      	bx	lr

0800b5c4 <_ZNKSt9type_infoeqERKS_>:
 800b5c4:	4281      	cmp	r1, r0
 800b5c6:	d011      	beq.n	800b5ec <_ZNKSt9type_infoeqERKS_+0x28>
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	6840      	ldr	r0, [r0, #4]
 800b5cc:	7803      	ldrb	r3, [r0, #0]
 800b5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d0:	d00a      	beq.n	800b5e8 <_ZNKSt9type_infoeqERKS_+0x24>
 800b5d2:	6849      	ldr	r1, [r1, #4]
 800b5d4:	780b      	ldrb	r3, [r1, #0]
 800b5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d8:	bf08      	it	eq
 800b5da:	3101      	addeq	r1, #1
 800b5dc:	f7f4 fdf8 	bl	80001d0 <strcmp>
 800b5e0:	fab0 f080 	clz	r0, r0
 800b5e4:	0940      	lsrs	r0, r0, #5
 800b5e6:	bd08      	pop	{r3, pc}
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	bd08      	pop	{r3, pc}
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	4770      	bx	lr

0800b5f0 <_ZdlPv>:
 800b5f0:	f000 bb1e 	b.w	800bc30 <free>

0800b5f4 <__errno>:
 800b5f4:	4b01      	ldr	r3, [pc, #4]	; (800b5fc <__errno+0x8>)
 800b5f6:	6818      	ldr	r0, [r3, #0]
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000044 	.word	0x20000044

0800b600 <__sflush_r>:
 800b600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b604:	b293      	uxth	r3, r2
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	4605      	mov	r5, r0
 800b60c:	0718      	lsls	r0, r3, #28
 800b60e:	460c      	mov	r4, r1
 800b610:	d461      	bmi.n	800b6d6 <__sflush_r+0xd6>
 800b612:	684b      	ldr	r3, [r1, #4]
 800b614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b618:	2b00      	cmp	r3, #0
 800b61a:	818a      	strh	r2, [r1, #12]
 800b61c:	dc05      	bgt.n	800b62a <__sflush_r+0x2a>
 800b61e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	dc02      	bgt.n	800b62a <__sflush_r+0x2a>
 800b624:	2000      	movs	r0, #0
 800b626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b62c:	2e00      	cmp	r6, #0
 800b62e:	d0f9      	beq.n	800b624 <__sflush_r+0x24>
 800b630:	2300      	movs	r3, #0
 800b632:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b636:	682f      	ldr	r7, [r5, #0]
 800b638:	602b      	str	r3, [r5, #0]
 800b63a:	d037      	beq.n	800b6ac <__sflush_r+0xac>
 800b63c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	075a      	lsls	r2, r3, #29
 800b642:	d505      	bpl.n	800b650 <__sflush_r+0x50>
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	1ac0      	subs	r0, r0, r3
 800b648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b64a:	b10b      	cbz	r3, 800b650 <__sflush_r+0x50>
 800b64c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b64e:	1ac0      	subs	r0, r0, r3
 800b650:	2300      	movs	r3, #0
 800b652:	4602      	mov	r2, r0
 800b654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b656:	6a21      	ldr	r1, [r4, #32]
 800b658:	4628      	mov	r0, r5
 800b65a:	47b0      	blx	r6
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	d106      	bne.n	800b670 <__sflush_r+0x70>
 800b662:	6829      	ldr	r1, [r5, #0]
 800b664:	291d      	cmp	r1, #29
 800b666:	d84f      	bhi.n	800b708 <__sflush_r+0x108>
 800b668:	4a2d      	ldr	r2, [pc, #180]	; (800b720 <__sflush_r+0x120>)
 800b66a:	40ca      	lsrs	r2, r1
 800b66c:	07d6      	lsls	r6, r2, #31
 800b66e:	d54b      	bpl.n	800b708 <__sflush_r+0x108>
 800b670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b674:	b21b      	sxth	r3, r3
 800b676:	2200      	movs	r2, #0
 800b678:	6062      	str	r2, [r4, #4]
 800b67a:	04d9      	lsls	r1, r3, #19
 800b67c:	6922      	ldr	r2, [r4, #16]
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	6022      	str	r2, [r4, #0]
 800b682:	d504      	bpl.n	800b68e <__sflush_r+0x8e>
 800b684:	1c42      	adds	r2, r0, #1
 800b686:	d101      	bne.n	800b68c <__sflush_r+0x8c>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b903      	cbnz	r3, 800b68e <__sflush_r+0x8e>
 800b68c:	6560      	str	r0, [r4, #84]	; 0x54
 800b68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b690:	602f      	str	r7, [r5, #0]
 800b692:	2900      	cmp	r1, #0
 800b694:	d0c6      	beq.n	800b624 <__sflush_r+0x24>
 800b696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d002      	beq.n	800b6a4 <__sflush_r+0xa4>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f000 f9bc 	bl	800ba1c <_free_r>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b0      	blx	r6
 800b6b4:	1c41      	adds	r1, r0, #1
 800b6b6:	d1c2      	bne.n	800b63e <__sflush_r+0x3e>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0bf      	beq.n	800b63e <__sflush_r+0x3e>
 800b6be:	2b1d      	cmp	r3, #29
 800b6c0:	d001      	beq.n	800b6c6 <__sflush_r+0xc6>
 800b6c2:	2b16      	cmp	r3, #22
 800b6c4:	d101      	bne.n	800b6ca <__sflush_r+0xca>
 800b6c6:	602f      	str	r7, [r5, #0]
 800b6c8:	e7ac      	b.n	800b624 <__sflush_r+0x24>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d6:	690f      	ldr	r7, [r1, #16]
 800b6d8:	2f00      	cmp	r7, #0
 800b6da:	d0a3      	beq.n	800b624 <__sflush_r+0x24>
 800b6dc:	079b      	lsls	r3, r3, #30
 800b6de:	680e      	ldr	r6, [r1, #0]
 800b6e0:	bf08      	it	eq
 800b6e2:	694b      	ldreq	r3, [r1, #20]
 800b6e4:	600f      	str	r7, [r1, #0]
 800b6e6:	bf18      	it	ne
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	eba6 0807 	sub.w	r8, r6, r7
 800b6ee:	608b      	str	r3, [r1, #8]
 800b6f0:	f1b8 0f00 	cmp.w	r8, #0
 800b6f4:	dd96      	ble.n	800b624 <__sflush_r+0x24>
 800b6f6:	4643      	mov	r3, r8
 800b6f8:	463a      	mov	r2, r7
 800b6fa:	6a21      	ldr	r1, [r4, #32]
 800b6fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b0      	blx	r6
 800b702:	2800      	cmp	r0, #0
 800b704:	dc07      	bgt.n	800b716 <__sflush_r+0x116>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b716:	4407      	add	r7, r0
 800b718:	eba8 0800 	sub.w	r8, r8, r0
 800b71c:	e7e8      	b.n	800b6f0 <__sflush_r+0xf0>
 800b71e:	bf00      	nop
 800b720:	20400001 	.word	0x20400001

0800b724 <_fflush_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	690b      	ldr	r3, [r1, #16]
 800b728:	4605      	mov	r5, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	b913      	cbnz	r3, 800b734 <_fflush_r+0x10>
 800b72e:	2500      	movs	r5, #0
 800b730:	4628      	mov	r0, r5
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	b118      	cbz	r0, 800b73e <_fflush_r+0x1a>
 800b736:	6983      	ldr	r3, [r0, #24]
 800b738:	b90b      	cbnz	r3, 800b73e <_fflush_r+0x1a>
 800b73a:	f000 f899 	bl	800b870 <__sinit>
 800b73e:	4b14      	ldr	r3, [pc, #80]	; (800b790 <_fflush_r+0x6c>)
 800b740:	429c      	cmp	r4, r3
 800b742:	d11b      	bne.n	800b77c <_fflush_r+0x58>
 800b744:	686c      	ldr	r4, [r5, #4]
 800b746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0ef      	beq.n	800b72e <_fflush_r+0xa>
 800b74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b750:	07d0      	lsls	r0, r2, #31
 800b752:	d404      	bmi.n	800b75e <_fflush_r+0x3a>
 800b754:	0599      	lsls	r1, r3, #22
 800b756:	d402      	bmi.n	800b75e <_fflush_r+0x3a>
 800b758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b75a:	f000 fa5f 	bl	800bc1c <__retarget_lock_acquire_recursive>
 800b75e:	4628      	mov	r0, r5
 800b760:	4621      	mov	r1, r4
 800b762:	f7ff ff4d 	bl	800b600 <__sflush_r>
 800b766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b768:	07da      	lsls	r2, r3, #31
 800b76a:	4605      	mov	r5, r0
 800b76c:	d4e0      	bmi.n	800b730 <_fflush_r+0xc>
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	059b      	lsls	r3, r3, #22
 800b772:	d4dd      	bmi.n	800b730 <_fflush_r+0xc>
 800b774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b776:	f000 fa52 	bl	800bc1e <__retarget_lock_release_recursive>
 800b77a:	e7d9      	b.n	800b730 <_fflush_r+0xc>
 800b77c:	4b05      	ldr	r3, [pc, #20]	; (800b794 <_fflush_r+0x70>)
 800b77e:	429c      	cmp	r4, r3
 800b780:	d101      	bne.n	800b786 <_fflush_r+0x62>
 800b782:	68ac      	ldr	r4, [r5, #8]
 800b784:	e7df      	b.n	800b746 <_fflush_r+0x22>
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <_fflush_r+0x74>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	bf08      	it	eq
 800b78c:	68ec      	ldreq	r4, [r5, #12]
 800b78e:	e7da      	b.n	800b746 <_fflush_r+0x22>
 800b790:	0801087c 	.word	0x0801087c
 800b794:	0801089c 	.word	0x0801089c
 800b798:	0801085c 	.word	0x0801085c

0800b79c <fflush>:
 800b79c:	4601      	mov	r1, r0
 800b79e:	b920      	cbnz	r0, 800b7aa <fflush+0xe>
 800b7a0:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <fflush+0x18>)
 800b7a2:	4905      	ldr	r1, [pc, #20]	; (800b7b8 <fflush+0x1c>)
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	f000 b9f5 	b.w	800bb94 <_fwalk_reent>
 800b7aa:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <fflush+0x20>)
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	f7ff bfb9 	b.w	800b724 <_fflush_r>
 800b7b2:	bf00      	nop
 800b7b4:	080108bc 	.word	0x080108bc
 800b7b8:	0800b725 	.word	0x0800b725
 800b7bc:	20000044 	.word	0x20000044

0800b7c0 <_cleanup_r>:
 800b7c0:	4901      	ldr	r1, [pc, #4]	; (800b7c8 <_cleanup_r+0x8>)
 800b7c2:	f000 b9e7 	b.w	800bb94 <_fwalk_reent>
 800b7c6:	bf00      	nop
 800b7c8:	0800f12d 	.word	0x0800f12d

0800b7cc <std.isra.0>:
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	6003      	str	r3, [r0, #0]
 800b7d4:	6043      	str	r3, [r0, #4]
 800b7d6:	6083      	str	r3, [r0, #8]
 800b7d8:	8181      	strh	r1, [r0, #12]
 800b7da:	6643      	str	r3, [r0, #100]	; 0x64
 800b7dc:	81c2      	strh	r2, [r0, #14]
 800b7de:	6103      	str	r3, [r0, #16]
 800b7e0:	6143      	str	r3, [r0, #20]
 800b7e2:	6183      	str	r3, [r0, #24]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	2208      	movs	r2, #8
 800b7e8:	305c      	adds	r0, #92	; 0x5c
 800b7ea:	f000 fc42 	bl	800c072 <memset>
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <std.isra.0+0x38>)
 800b7f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b7f2:	4b05      	ldr	r3, [pc, #20]	; (800b808 <std.isra.0+0x3c>)
 800b7f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7f6:	4b05      	ldr	r3, [pc, #20]	; (800b80c <std.isra.0+0x40>)
 800b7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <std.isra.0+0x44>)
 800b7fc:	6224      	str	r4, [r4, #32]
 800b7fe:	6323      	str	r3, [r4, #48]	; 0x30
 800b800:	bd10      	pop	{r4, pc}
 800b802:	bf00      	nop
 800b804:	0800c22d 	.word	0x0800c22d
 800b808:	0800c24f 	.word	0x0800c24f
 800b80c:	0800c287 	.word	0x0800c287
 800b810:	0800c2ab 	.word	0x0800c2ab

0800b814 <__sfmoreglue>:
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	1e4a      	subs	r2, r1, #1
 800b818:	2568      	movs	r5, #104	; 0x68
 800b81a:	4355      	muls	r5, r2
 800b81c:	460e      	mov	r6, r1
 800b81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b822:	f000 fa0d 	bl	800bc40 <_malloc_r>
 800b826:	4604      	mov	r4, r0
 800b828:	b140      	cbz	r0, 800b83c <__sfmoreglue+0x28>
 800b82a:	2100      	movs	r1, #0
 800b82c:	e880 0042 	stmia.w	r0, {r1, r6}
 800b830:	300c      	adds	r0, #12
 800b832:	60a0      	str	r0, [r4, #8]
 800b834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b838:	f000 fc1b 	bl	800c072 <memset>
 800b83c:	4620      	mov	r0, r4
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <__sfp_lock_acquire>:
 800b840:	4801      	ldr	r0, [pc, #4]	; (800b848 <__sfp_lock_acquire+0x8>)
 800b842:	f000 b9eb 	b.w	800bc1c <__retarget_lock_acquire_recursive>
 800b846:	bf00      	nop
 800b848:	20001db8 	.word	0x20001db8

0800b84c <__sfp_lock_release>:
 800b84c:	4801      	ldr	r0, [pc, #4]	; (800b854 <__sfp_lock_release+0x8>)
 800b84e:	f000 b9e6 	b.w	800bc1e <__retarget_lock_release_recursive>
 800b852:	bf00      	nop
 800b854:	20001db8 	.word	0x20001db8

0800b858 <__sinit_lock_acquire>:
 800b858:	4801      	ldr	r0, [pc, #4]	; (800b860 <__sinit_lock_acquire+0x8>)
 800b85a:	f000 b9df 	b.w	800bc1c <__retarget_lock_acquire_recursive>
 800b85e:	bf00      	nop
 800b860:	20001db3 	.word	0x20001db3

0800b864 <__sinit_lock_release>:
 800b864:	4801      	ldr	r0, [pc, #4]	; (800b86c <__sinit_lock_release+0x8>)
 800b866:	f000 b9da 	b.w	800bc1e <__retarget_lock_release_recursive>
 800b86a:	bf00      	nop
 800b86c:	20001db3 	.word	0x20001db3

0800b870 <__sinit>:
 800b870:	b510      	push	{r4, lr}
 800b872:	4604      	mov	r4, r0
 800b874:	f7ff fff0 	bl	800b858 <__sinit_lock_acquire>
 800b878:	69a3      	ldr	r3, [r4, #24]
 800b87a:	b11b      	cbz	r3, 800b884 <__sinit+0x14>
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f7ff bff0 	b.w	800b864 <__sinit_lock_release>
 800b884:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800b888:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800b88c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <__sinit+0x6c>)
 800b892:	4a13      	ldr	r2, [pc, #76]	; (800b8e0 <__sinit+0x70>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	62a2      	str	r2, [r4, #40]	; 0x28
 800b898:	429c      	cmp	r4, r3
 800b89a:	bf04      	itt	eq
 800b89c:	2301      	moveq	r3, #1
 800b89e:	61a3      	streq	r3, [r4, #24]
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 f81f 	bl	800b8e4 <__sfp>
 800b8a6:	6060      	str	r0, [r4, #4]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 f81b 	bl	800b8e4 <__sfp>
 800b8ae:	60a0      	str	r0, [r4, #8]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 f817 	bl	800b8e4 <__sfp>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	60e0      	str	r0, [r4, #12]
 800b8ba:	2104      	movs	r1, #4
 800b8bc:	6860      	ldr	r0, [r4, #4]
 800b8be:	f7ff ff85 	bl	800b7cc <std.isra.0>
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	2109      	movs	r1, #9
 800b8c6:	68a0      	ldr	r0, [r4, #8]
 800b8c8:	f7ff ff80 	bl	800b7cc <std.isra.0>
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	2112      	movs	r1, #18
 800b8d0:	68e0      	ldr	r0, [r4, #12]
 800b8d2:	f7ff ff7b 	bl	800b7cc <std.isra.0>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	61a3      	str	r3, [r4, #24]
 800b8da:	e7cf      	b.n	800b87c <__sinit+0xc>
 800b8dc:	080108bc 	.word	0x080108bc
 800b8e0:	0800b7c1 	.word	0x0800b7c1

0800b8e4 <__sfp>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	f7ff ffaa 	bl	800b840 <__sfp_lock_acquire>
 800b8ec:	4b1f      	ldr	r3, [pc, #124]	; (800b96c <__sfp+0x88>)
 800b8ee:	681e      	ldr	r6, [r3, #0]
 800b8f0:	69b3      	ldr	r3, [r6, #24]
 800b8f2:	b913      	cbnz	r3, 800b8fa <__sfp+0x16>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff ffbb 	bl	800b870 <__sinit>
 800b8fa:	36d8      	adds	r6, #216	; 0xd8
 800b8fc:	68b4      	ldr	r4, [r6, #8]
 800b8fe:	6873      	ldr	r3, [r6, #4]
 800b900:	3b01      	subs	r3, #1
 800b902:	d503      	bpl.n	800b90c <__sfp+0x28>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	b133      	cbz	r3, 800b916 <__sfp+0x32>
 800b908:	6836      	ldr	r6, [r6, #0]
 800b90a:	e7f7      	b.n	800b8fc <__sfp+0x18>
 800b90c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b910:	b17d      	cbz	r5, 800b932 <__sfp+0x4e>
 800b912:	3468      	adds	r4, #104	; 0x68
 800b914:	e7f4      	b.n	800b900 <__sfp+0x1c>
 800b916:	2104      	movs	r1, #4
 800b918:	4638      	mov	r0, r7
 800b91a:	f7ff ff7b 	bl	800b814 <__sfmoreglue>
 800b91e:	4604      	mov	r4, r0
 800b920:	6030      	str	r0, [r6, #0]
 800b922:	2800      	cmp	r0, #0
 800b924:	d1f0      	bne.n	800b908 <__sfp+0x24>
 800b926:	f7ff ff91 	bl	800b84c <__sfp_lock_release>
 800b92a:	230c      	movs	r3, #12
 800b92c:	603b      	str	r3, [r7, #0]
 800b92e:	4620      	mov	r0, r4
 800b930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b936:	81e3      	strh	r3, [r4, #14]
 800b938:	2301      	movs	r3, #1
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b940:	6665      	str	r5, [r4, #100]	; 0x64
 800b942:	f000 f969 	bl	800bc18 <__retarget_lock_init_recursive>
 800b946:	f7ff ff81 	bl	800b84c <__sfp_lock_release>
 800b94a:	6025      	str	r5, [r4, #0]
 800b94c:	60a5      	str	r5, [r4, #8]
 800b94e:	6065      	str	r5, [r4, #4]
 800b950:	6125      	str	r5, [r4, #16]
 800b952:	6165      	str	r5, [r4, #20]
 800b954:	61a5      	str	r5, [r4, #24]
 800b956:	2208      	movs	r2, #8
 800b958:	4629      	mov	r1, r5
 800b95a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b95e:	f000 fb88 	bl	800c072 <memset>
 800b962:	6365      	str	r5, [r4, #52]	; 0x34
 800b964:	63a5      	str	r5, [r4, #56]	; 0x38
 800b966:	64a5      	str	r5, [r4, #72]	; 0x48
 800b968:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b96a:	e7e0      	b.n	800b92e <__sfp+0x4a>
 800b96c:	080108bc 	.word	0x080108bc

0800b970 <_malloc_trim_r>:
 800b970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b974:	4f25      	ldr	r7, [pc, #148]	; (800ba0c <_malloc_trim_r+0x9c>)
 800b976:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800ba18 <_malloc_trim_r+0xa8>
 800b97a:	4689      	mov	r9, r1
 800b97c:	4606      	mov	r6, r0
 800b97e:	f000 fb81 	bl	800c084 <__malloc_lock>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	685d      	ldr	r5, [r3, #4]
 800b986:	f1a8 0411 	sub.w	r4, r8, #17
 800b98a:	f025 0503 	bic.w	r5, r5, #3
 800b98e:	eba4 0409 	sub.w	r4, r4, r9
 800b992:	442c      	add	r4, r5
 800b994:	fbb4 f4f8 	udiv	r4, r4, r8
 800b998:	3c01      	subs	r4, #1
 800b99a:	fb08 f404 	mul.w	r4, r8, r4
 800b99e:	4544      	cmp	r4, r8
 800b9a0:	da05      	bge.n	800b9ae <_malloc_trim_r+0x3e>
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 fb74 	bl	800c090 <__malloc_unlock>
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f000 fc07 	bl	800c1c4 <_sbrk_r>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	442b      	add	r3, r5
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	d1f1      	bne.n	800b9a2 <_malloc_trim_r+0x32>
 800b9be:	4261      	negs	r1, r4
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 fbff 	bl	800c1c4 <_sbrk_r>
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	d110      	bne.n	800b9ec <_malloc_trim_r+0x7c>
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f000 fbf9 	bl	800c1c4 <_sbrk_r>
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	1a83      	subs	r3, r0, r2
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	dde3      	ble.n	800b9a2 <_malloc_trim_r+0x32>
 800b9da:	490d      	ldr	r1, [pc, #52]	; (800ba10 <_malloc_trim_r+0xa0>)
 800b9dc:	6809      	ldr	r1, [r1, #0]
 800b9de:	1a40      	subs	r0, r0, r1
 800b9e0:	490c      	ldr	r1, [pc, #48]	; (800ba14 <_malloc_trim_r+0xa4>)
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	6008      	str	r0, [r1, #0]
 800b9e8:	6053      	str	r3, [r2, #4]
 800b9ea:	e7da      	b.n	800b9a2 <_malloc_trim_r+0x32>
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4a09      	ldr	r2, [pc, #36]	; (800ba14 <_malloc_trim_r+0xa4>)
 800b9f0:	1b2d      	subs	r5, r5, r4
 800b9f2:	f045 0501 	orr.w	r5, r5, #1
 800b9f6:	605d      	str	r5, [r3, #4]
 800b9f8:	6813      	ldr	r3, [r2, #0]
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	1b1c      	subs	r4, r3, r4
 800b9fe:	6014      	str	r4, [r2, #0]
 800ba00:	f000 fb46 	bl	800c090 <__malloc_unlock>
 800ba04:	2001      	movs	r0, #1
 800ba06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000138 	.word	0x20000138
 800ba10:	20000540 	.word	0x20000540
 800ba14:	20001c30 	.word	0x20001c30
 800ba18:	00001000 	.word	0x00001000

0800ba1c <_free_r>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	4604      	mov	r4, r0
 800ba22:	4688      	mov	r8, r1
 800ba24:	2900      	cmp	r1, #0
 800ba26:	f000 80ab 	beq.w	800bb80 <_free_r+0x164>
 800ba2a:	f000 fb2b 	bl	800c084 <__malloc_lock>
 800ba2e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ba32:	4d54      	ldr	r5, [pc, #336]	; (800bb84 <_free_r+0x168>)
 800ba34:	f022 0001 	bic.w	r0, r2, #1
 800ba38:	f1a8 0308 	sub.w	r3, r8, #8
 800ba3c:	181f      	adds	r7, r3, r0
 800ba3e:	68a9      	ldr	r1, [r5, #8]
 800ba40:	687e      	ldr	r6, [r7, #4]
 800ba42:	428f      	cmp	r7, r1
 800ba44:	f026 0603 	bic.w	r6, r6, #3
 800ba48:	f002 0201 	and.w	r2, r2, #1
 800ba4c:	d11b      	bne.n	800ba86 <_free_r+0x6a>
 800ba4e:	4430      	add	r0, r6
 800ba50:	b93a      	cbnz	r2, 800ba62 <_free_r+0x46>
 800ba52:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800ba56:	1a9b      	subs	r3, r3, r2
 800ba58:	4410      	add	r0, r2
 800ba5a:	6899      	ldr	r1, [r3, #8]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	60ca      	str	r2, [r1, #12]
 800ba60:	6091      	str	r1, [r2, #8]
 800ba62:	f040 0201 	orr.w	r2, r0, #1
 800ba66:	605a      	str	r2, [r3, #4]
 800ba68:	60ab      	str	r3, [r5, #8]
 800ba6a:	4b47      	ldr	r3, [pc, #284]	; (800bb88 <_free_r+0x16c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	d304      	bcc.n	800ba7c <_free_r+0x60>
 800ba72:	4b46      	ldr	r3, [pc, #280]	; (800bb8c <_free_r+0x170>)
 800ba74:	4620      	mov	r0, r4
 800ba76:	6819      	ldr	r1, [r3, #0]
 800ba78:	f7ff ff7a 	bl	800b970 <_malloc_trim_r>
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba82:	f000 bb05 	b.w	800c090 <__malloc_unlock>
 800ba86:	607e      	str	r6, [r7, #4]
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	d139      	bne.n	800bb00 <_free_r+0xe4>
 800ba8c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ba90:	1a5b      	subs	r3, r3, r1
 800ba92:	4408      	add	r0, r1
 800ba94:	6899      	ldr	r1, [r3, #8]
 800ba96:	f105 0e08 	add.w	lr, r5, #8
 800ba9a:	4571      	cmp	r1, lr
 800ba9c:	d032      	beq.n	800bb04 <_free_r+0xe8>
 800ba9e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800baa2:	f8c1 e00c 	str.w	lr, [r1, #12]
 800baa6:	f8ce 1008 	str.w	r1, [lr, #8]
 800baaa:	19b9      	adds	r1, r7, r6
 800baac:	6849      	ldr	r1, [r1, #4]
 800baae:	07c9      	lsls	r1, r1, #31
 800bab0:	d40a      	bmi.n	800bac8 <_free_r+0xac>
 800bab2:	4430      	add	r0, r6
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	bb3a      	cbnz	r2, 800bb08 <_free_r+0xec>
 800bab8:	4e35      	ldr	r6, [pc, #212]	; (800bb90 <_free_r+0x174>)
 800baba:	42b1      	cmp	r1, r6
 800babc:	d124      	bne.n	800bb08 <_free_r+0xec>
 800babe:	616b      	str	r3, [r5, #20]
 800bac0:	612b      	str	r3, [r5, #16]
 800bac2:	2201      	movs	r2, #1
 800bac4:	60d9      	str	r1, [r3, #12]
 800bac6:	6099      	str	r1, [r3, #8]
 800bac8:	f040 0101 	orr.w	r1, r0, #1
 800bacc:	6059      	str	r1, [r3, #4]
 800bace:	5018      	str	r0, [r3, r0]
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d1d3      	bne.n	800ba7c <_free_r+0x60>
 800bad4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bad8:	d21a      	bcs.n	800bb10 <_free_r+0xf4>
 800bada:	08c0      	lsrs	r0, r0, #3
 800badc:	1081      	asrs	r1, r0, #2
 800bade:	2201      	movs	r2, #1
 800bae0:	408a      	lsls	r2, r1
 800bae2:	6869      	ldr	r1, [r5, #4]
 800bae4:	3001      	adds	r0, #1
 800bae6:	430a      	orrs	r2, r1
 800bae8:	606a      	str	r2, [r5, #4]
 800baea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800baee:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800baf2:	6099      	str	r1, [r3, #8]
 800baf4:	3a08      	subs	r2, #8
 800baf6:	60da      	str	r2, [r3, #12]
 800baf8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800bafc:	60cb      	str	r3, [r1, #12]
 800bafe:	e7bd      	b.n	800ba7c <_free_r+0x60>
 800bb00:	2200      	movs	r2, #0
 800bb02:	e7d2      	b.n	800baaa <_free_r+0x8e>
 800bb04:	2201      	movs	r2, #1
 800bb06:	e7d0      	b.n	800baaa <_free_r+0x8e>
 800bb08:	68fe      	ldr	r6, [r7, #12]
 800bb0a:	60ce      	str	r6, [r1, #12]
 800bb0c:	60b1      	str	r1, [r6, #8]
 800bb0e:	e7db      	b.n	800bac8 <_free_r+0xac>
 800bb10:	0a42      	lsrs	r2, r0, #9
 800bb12:	2a04      	cmp	r2, #4
 800bb14:	d813      	bhi.n	800bb3e <_free_r+0x122>
 800bb16:	0982      	lsrs	r2, r0, #6
 800bb18:	3238      	adds	r2, #56	; 0x38
 800bb1a:	1c51      	adds	r1, r2, #1
 800bb1c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800bb20:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800bb24:	428e      	cmp	r6, r1
 800bb26:	d124      	bne.n	800bb72 <_free_r+0x156>
 800bb28:	2001      	movs	r0, #1
 800bb2a:	1092      	asrs	r2, r2, #2
 800bb2c:	fa00 f202 	lsl.w	r2, r0, r2
 800bb30:	6868      	ldr	r0, [r5, #4]
 800bb32:	4302      	orrs	r2, r0
 800bb34:	606a      	str	r2, [r5, #4]
 800bb36:	60de      	str	r6, [r3, #12]
 800bb38:	6099      	str	r1, [r3, #8]
 800bb3a:	60b3      	str	r3, [r6, #8]
 800bb3c:	e7de      	b.n	800bafc <_free_r+0xe0>
 800bb3e:	2a14      	cmp	r2, #20
 800bb40:	d801      	bhi.n	800bb46 <_free_r+0x12a>
 800bb42:	325b      	adds	r2, #91	; 0x5b
 800bb44:	e7e9      	b.n	800bb1a <_free_r+0xfe>
 800bb46:	2a54      	cmp	r2, #84	; 0x54
 800bb48:	d802      	bhi.n	800bb50 <_free_r+0x134>
 800bb4a:	0b02      	lsrs	r2, r0, #12
 800bb4c:	326e      	adds	r2, #110	; 0x6e
 800bb4e:	e7e4      	b.n	800bb1a <_free_r+0xfe>
 800bb50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bb54:	d802      	bhi.n	800bb5c <_free_r+0x140>
 800bb56:	0bc2      	lsrs	r2, r0, #15
 800bb58:	3277      	adds	r2, #119	; 0x77
 800bb5a:	e7de      	b.n	800bb1a <_free_r+0xfe>
 800bb5c:	f240 5154 	movw	r1, #1364	; 0x554
 800bb60:	428a      	cmp	r2, r1
 800bb62:	bf9a      	itte	ls
 800bb64:	0c82      	lsrls	r2, r0, #18
 800bb66:	327c      	addls	r2, #124	; 0x7c
 800bb68:	227e      	movhi	r2, #126	; 0x7e
 800bb6a:	e7d6      	b.n	800bb1a <_free_r+0xfe>
 800bb6c:	6889      	ldr	r1, [r1, #8]
 800bb6e:	428e      	cmp	r6, r1
 800bb70:	d004      	beq.n	800bb7c <_free_r+0x160>
 800bb72:	684a      	ldr	r2, [r1, #4]
 800bb74:	f022 0203 	bic.w	r2, r2, #3
 800bb78:	4290      	cmp	r0, r2
 800bb7a:	d3f7      	bcc.n	800bb6c <_free_r+0x150>
 800bb7c:	68ce      	ldr	r6, [r1, #12]
 800bb7e:	e7da      	b.n	800bb36 <_free_r+0x11a>
 800bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb84:	20000138 	.word	0x20000138
 800bb88:	20000544 	.word	0x20000544
 800bb8c:	20001c60 	.word	0x20001c60
 800bb90:	20000140 	.word	0x20000140

0800bb94 <_fwalk_reent>:
 800bb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4689      	mov	r9, r1
 800bb9c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800bba0:	2600      	movs	r6, #0
 800bba2:	b914      	cbnz	r4, 800bbaa <_fwalk_reent+0x16>
 800bba4:	4630      	mov	r0, r6
 800bba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbaa:	68a5      	ldr	r5, [r4, #8]
 800bbac:	6867      	ldr	r7, [r4, #4]
 800bbae:	3f01      	subs	r7, #1
 800bbb0:	d501      	bpl.n	800bbb6 <_fwalk_reent+0x22>
 800bbb2:	6824      	ldr	r4, [r4, #0]
 800bbb4:	e7f5      	b.n	800bba2 <_fwalk_reent+0xe>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d907      	bls.n	800bbcc <_fwalk_reent+0x38>
 800bbbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	d003      	beq.n	800bbcc <_fwalk_reent+0x38>
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	47c8      	blx	r9
 800bbca:	4306      	orrs	r6, r0
 800bbcc:	3568      	adds	r5, #104	; 0x68
 800bbce:	e7ee      	b.n	800bbae <_fwalk_reent+0x1a>

0800bbd0 <__libc_init_array>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	4e0d      	ldr	r6, [pc, #52]	; (800bc08 <__libc_init_array+0x38>)
 800bbd4:	4c0d      	ldr	r4, [pc, #52]	; (800bc0c <__libc_init_array+0x3c>)
 800bbd6:	1ba4      	subs	r4, r4, r6
 800bbd8:	10a4      	asrs	r4, r4, #2
 800bbda:	2500      	movs	r5, #0
 800bbdc:	42a5      	cmp	r5, r4
 800bbde:	d109      	bne.n	800bbf4 <__libc_init_array+0x24>
 800bbe0:	4e0b      	ldr	r6, [pc, #44]	; (800bc10 <__libc_init_array+0x40>)
 800bbe2:	4c0c      	ldr	r4, [pc, #48]	; (800bc14 <__libc_init_array+0x44>)
 800bbe4:	f004 fc14 	bl	8010410 <_init>
 800bbe8:	1ba4      	subs	r4, r4, r6
 800bbea:	10a4      	asrs	r4, r4, #2
 800bbec:	2500      	movs	r5, #0
 800bbee:	42a5      	cmp	r5, r4
 800bbf0:	d105      	bne.n	800bbfe <__libc_init_array+0x2e>
 800bbf2:	bd70      	pop	{r4, r5, r6, pc}
 800bbf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbf8:	4798      	blx	r3
 800bbfa:	3501      	adds	r5, #1
 800bbfc:	e7ee      	b.n	800bbdc <__libc_init_array+0xc>
 800bbfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc02:	4798      	blx	r3
 800bc04:	3501      	adds	r5, #1
 800bc06:	e7f2      	b.n	800bbee <__libc_init_array+0x1e>
 800bc08:	08010e58 	.word	0x08010e58
 800bc0c:	08010e58 	.word	0x08010e58
 800bc10:	08010e58 	.word	0x08010e58
 800bc14:	08010e64 	.word	0x08010e64

0800bc18 <__retarget_lock_init_recursive>:
 800bc18:	4770      	bx	lr

0800bc1a <__retarget_lock_close_recursive>:
 800bc1a:	4770      	bx	lr

0800bc1c <__retarget_lock_acquire_recursive>:
 800bc1c:	4770      	bx	lr

0800bc1e <__retarget_lock_release_recursive>:
 800bc1e:	4770      	bx	lr

0800bc20 <malloc>:
 800bc20:	4b02      	ldr	r3, [pc, #8]	; (800bc2c <malloc+0xc>)
 800bc22:	4601      	mov	r1, r0
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	f000 b80b 	b.w	800bc40 <_malloc_r>
 800bc2a:	bf00      	nop
 800bc2c:	20000044 	.word	0x20000044

0800bc30 <free>:
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <free+0xc>)
 800bc32:	4601      	mov	r1, r0
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f7ff bef1 	b.w	800ba1c <_free_r>
 800bc3a:	bf00      	nop
 800bc3c:	20000044 	.word	0x20000044

0800bc40 <_malloc_r>:
 800bc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	f101 040b 	add.w	r4, r1, #11
 800bc48:	2c16      	cmp	r4, #22
 800bc4a:	4681      	mov	r9, r0
 800bc4c:	d907      	bls.n	800bc5e <_malloc_r+0x1e>
 800bc4e:	f034 0407 	bics.w	r4, r4, #7
 800bc52:	d505      	bpl.n	800bc60 <_malloc_r+0x20>
 800bc54:	230c      	movs	r3, #12
 800bc56:	f8c9 3000 	str.w	r3, [r9]
 800bc5a:	2600      	movs	r6, #0
 800bc5c:	e131      	b.n	800bec2 <_malloc_r+0x282>
 800bc5e:	2410      	movs	r4, #16
 800bc60:	428c      	cmp	r4, r1
 800bc62:	d3f7      	bcc.n	800bc54 <_malloc_r+0x14>
 800bc64:	4648      	mov	r0, r9
 800bc66:	f000 fa0d 	bl	800c084 <__malloc_lock>
 800bc6a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800bc6e:	4d9c      	ldr	r5, [pc, #624]	; (800bee0 <_malloc_r+0x2a0>)
 800bc70:	d236      	bcs.n	800bce0 <_malloc_r+0xa0>
 800bc72:	f104 0208 	add.w	r2, r4, #8
 800bc76:	442a      	add	r2, r5
 800bc78:	f1a2 0108 	sub.w	r1, r2, #8
 800bc7c:	6856      	ldr	r6, [r2, #4]
 800bc7e:	428e      	cmp	r6, r1
 800bc80:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800bc84:	d102      	bne.n	800bc8c <_malloc_r+0x4c>
 800bc86:	68d6      	ldr	r6, [r2, #12]
 800bc88:	42b2      	cmp	r2, r6
 800bc8a:	d010      	beq.n	800bcae <_malloc_r+0x6e>
 800bc8c:	6873      	ldr	r3, [r6, #4]
 800bc8e:	68f2      	ldr	r2, [r6, #12]
 800bc90:	68b1      	ldr	r1, [r6, #8]
 800bc92:	f023 0303 	bic.w	r3, r3, #3
 800bc96:	60ca      	str	r2, [r1, #12]
 800bc98:	4433      	add	r3, r6
 800bc9a:	6091      	str	r1, [r2, #8]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	605a      	str	r2, [r3, #4]
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 f9f3 	bl	800c090 <__malloc_unlock>
 800bcaa:	3608      	adds	r6, #8
 800bcac:	e109      	b.n	800bec2 <_malloc_r+0x282>
 800bcae:	3302      	adds	r3, #2
 800bcb0:	4a8c      	ldr	r2, [pc, #560]	; (800bee4 <_malloc_r+0x2a4>)
 800bcb2:	692e      	ldr	r6, [r5, #16]
 800bcb4:	4296      	cmp	r6, r2
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	d06d      	beq.n	800bd96 <_malloc_r+0x156>
 800bcba:	6870      	ldr	r0, [r6, #4]
 800bcbc:	f020 0003 	bic.w	r0, r0, #3
 800bcc0:	1b07      	subs	r7, r0, r4
 800bcc2:	2f0f      	cmp	r7, #15
 800bcc4:	dd47      	ble.n	800bd56 <_malloc_r+0x116>
 800bcc6:	1933      	adds	r3, r6, r4
 800bcc8:	f044 0401 	orr.w	r4, r4, #1
 800bccc:	6074      	str	r4, [r6, #4]
 800bcce:	616b      	str	r3, [r5, #20]
 800bcd0:	612b      	str	r3, [r5, #16]
 800bcd2:	60da      	str	r2, [r3, #12]
 800bcd4:	609a      	str	r2, [r3, #8]
 800bcd6:	f047 0201 	orr.w	r2, r7, #1
 800bcda:	605a      	str	r2, [r3, #4]
 800bcdc:	5037      	str	r7, [r6, r0]
 800bcde:	e7e1      	b.n	800bca4 <_malloc_r+0x64>
 800bce0:	0a63      	lsrs	r3, r4, #9
 800bce2:	d02a      	beq.n	800bd3a <_malloc_r+0xfa>
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d812      	bhi.n	800bd0e <_malloc_r+0xce>
 800bce8:	09a3      	lsrs	r3, r4, #6
 800bcea:	3338      	adds	r3, #56	; 0x38
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800bcf2:	f1a2 0008 	sub.w	r0, r2, #8
 800bcf6:	6856      	ldr	r6, [r2, #4]
 800bcf8:	4286      	cmp	r6, r0
 800bcfa:	d006      	beq.n	800bd0a <_malloc_r+0xca>
 800bcfc:	6872      	ldr	r2, [r6, #4]
 800bcfe:	f022 0203 	bic.w	r2, r2, #3
 800bd02:	1b11      	subs	r1, r2, r4
 800bd04:	290f      	cmp	r1, #15
 800bd06:	dd1c      	ble.n	800bd42 <_malloc_r+0x102>
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	e7d0      	b.n	800bcb0 <_malloc_r+0x70>
 800bd0e:	2b14      	cmp	r3, #20
 800bd10:	d801      	bhi.n	800bd16 <_malloc_r+0xd6>
 800bd12:	335b      	adds	r3, #91	; 0x5b
 800bd14:	e7ea      	b.n	800bcec <_malloc_r+0xac>
 800bd16:	2b54      	cmp	r3, #84	; 0x54
 800bd18:	d802      	bhi.n	800bd20 <_malloc_r+0xe0>
 800bd1a:	0b23      	lsrs	r3, r4, #12
 800bd1c:	336e      	adds	r3, #110	; 0x6e
 800bd1e:	e7e5      	b.n	800bcec <_malloc_r+0xac>
 800bd20:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bd24:	d802      	bhi.n	800bd2c <_malloc_r+0xec>
 800bd26:	0be3      	lsrs	r3, r4, #15
 800bd28:	3377      	adds	r3, #119	; 0x77
 800bd2a:	e7df      	b.n	800bcec <_malloc_r+0xac>
 800bd2c:	f240 5254 	movw	r2, #1364	; 0x554
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d804      	bhi.n	800bd3e <_malloc_r+0xfe>
 800bd34:	0ca3      	lsrs	r3, r4, #18
 800bd36:	337c      	adds	r3, #124	; 0x7c
 800bd38:	e7d8      	b.n	800bcec <_malloc_r+0xac>
 800bd3a:	233f      	movs	r3, #63	; 0x3f
 800bd3c:	e7d6      	b.n	800bcec <_malloc_r+0xac>
 800bd3e:	237e      	movs	r3, #126	; 0x7e
 800bd40:	e7d4      	b.n	800bcec <_malloc_r+0xac>
 800bd42:	2900      	cmp	r1, #0
 800bd44:	68f1      	ldr	r1, [r6, #12]
 800bd46:	db04      	blt.n	800bd52 <_malloc_r+0x112>
 800bd48:	68b3      	ldr	r3, [r6, #8]
 800bd4a:	60d9      	str	r1, [r3, #12]
 800bd4c:	608b      	str	r3, [r1, #8]
 800bd4e:	18b3      	adds	r3, r6, r2
 800bd50:	e7a4      	b.n	800bc9c <_malloc_r+0x5c>
 800bd52:	460e      	mov	r6, r1
 800bd54:	e7d0      	b.n	800bcf8 <_malloc_r+0xb8>
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	616a      	str	r2, [r5, #20]
 800bd5a:	612a      	str	r2, [r5, #16]
 800bd5c:	db05      	blt.n	800bd6a <_malloc_r+0x12a>
 800bd5e:	4430      	add	r0, r6
 800bd60:	6843      	ldr	r3, [r0, #4]
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	6043      	str	r3, [r0, #4]
 800bd68:	e79c      	b.n	800bca4 <_malloc_r+0x64>
 800bd6a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bd6e:	d244      	bcs.n	800bdfa <_malloc_r+0x1ba>
 800bd70:	08c0      	lsrs	r0, r0, #3
 800bd72:	1087      	asrs	r7, r0, #2
 800bd74:	2201      	movs	r2, #1
 800bd76:	fa02 f707 	lsl.w	r7, r2, r7
 800bd7a:	686a      	ldr	r2, [r5, #4]
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	433a      	orrs	r2, r7
 800bd80:	606a      	str	r2, [r5, #4]
 800bd82:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800bd86:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800bd8a:	60b7      	str	r7, [r6, #8]
 800bd8c:	3a08      	subs	r2, #8
 800bd8e:	60f2      	str	r2, [r6, #12]
 800bd90:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800bd94:	60fe      	str	r6, [r7, #12]
 800bd96:	2001      	movs	r0, #1
 800bd98:	109a      	asrs	r2, r3, #2
 800bd9a:	fa00 f202 	lsl.w	r2, r0, r2
 800bd9e:	6868      	ldr	r0, [r5, #4]
 800bda0:	4282      	cmp	r2, r0
 800bda2:	f200 80a1 	bhi.w	800bee8 <_malloc_r+0x2a8>
 800bda6:	4202      	tst	r2, r0
 800bda8:	d106      	bne.n	800bdb8 <_malloc_r+0x178>
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	0052      	lsls	r2, r2, #1
 800bdb0:	4202      	tst	r2, r0
 800bdb2:	f103 0304 	add.w	r3, r3, #4
 800bdb6:	d0fa      	beq.n	800bdae <_malloc_r+0x16e>
 800bdb8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800bdbc:	46e0      	mov	r8, ip
 800bdbe:	469e      	mov	lr, r3
 800bdc0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800bdc4:	4546      	cmp	r6, r8
 800bdc6:	d153      	bne.n	800be70 <_malloc_r+0x230>
 800bdc8:	f10e 0e01 	add.w	lr, lr, #1
 800bdcc:	f01e 0f03 	tst.w	lr, #3
 800bdd0:	f108 0808 	add.w	r8, r8, #8
 800bdd4:	d1f4      	bne.n	800bdc0 <_malloc_r+0x180>
 800bdd6:	0798      	lsls	r0, r3, #30
 800bdd8:	d179      	bne.n	800bece <_malloc_r+0x28e>
 800bdda:	686b      	ldr	r3, [r5, #4]
 800bddc:	ea23 0302 	bic.w	r3, r3, r2
 800bde0:	606b      	str	r3, [r5, #4]
 800bde2:	6868      	ldr	r0, [r5, #4]
 800bde4:	0052      	lsls	r2, r2, #1
 800bde6:	4282      	cmp	r2, r0
 800bde8:	d87e      	bhi.n	800bee8 <_malloc_r+0x2a8>
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	d07c      	beq.n	800bee8 <_malloc_r+0x2a8>
 800bdee:	4673      	mov	r3, lr
 800bdf0:	4202      	tst	r2, r0
 800bdf2:	d1e1      	bne.n	800bdb8 <_malloc_r+0x178>
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	0052      	lsls	r2, r2, #1
 800bdf8:	e7fa      	b.n	800bdf0 <_malloc_r+0x1b0>
 800bdfa:	0a42      	lsrs	r2, r0, #9
 800bdfc:	2a04      	cmp	r2, #4
 800bdfe:	d815      	bhi.n	800be2c <_malloc_r+0x1ec>
 800be00:	0982      	lsrs	r2, r0, #6
 800be02:	3238      	adds	r2, #56	; 0x38
 800be04:	1c57      	adds	r7, r2, #1
 800be06:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800be0a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800be0e:	45be      	cmp	lr, r7
 800be10:	d126      	bne.n	800be60 <_malloc_r+0x220>
 800be12:	2001      	movs	r0, #1
 800be14:	1092      	asrs	r2, r2, #2
 800be16:	fa00 f202 	lsl.w	r2, r0, r2
 800be1a:	6868      	ldr	r0, [r5, #4]
 800be1c:	4310      	orrs	r0, r2
 800be1e:	6068      	str	r0, [r5, #4]
 800be20:	f8c6 e00c 	str.w	lr, [r6, #12]
 800be24:	60b7      	str	r7, [r6, #8]
 800be26:	f8ce 6008 	str.w	r6, [lr, #8]
 800be2a:	e7b3      	b.n	800bd94 <_malloc_r+0x154>
 800be2c:	2a14      	cmp	r2, #20
 800be2e:	d801      	bhi.n	800be34 <_malloc_r+0x1f4>
 800be30:	325b      	adds	r2, #91	; 0x5b
 800be32:	e7e7      	b.n	800be04 <_malloc_r+0x1c4>
 800be34:	2a54      	cmp	r2, #84	; 0x54
 800be36:	d802      	bhi.n	800be3e <_malloc_r+0x1fe>
 800be38:	0b02      	lsrs	r2, r0, #12
 800be3a:	326e      	adds	r2, #110	; 0x6e
 800be3c:	e7e2      	b.n	800be04 <_malloc_r+0x1c4>
 800be3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800be42:	d802      	bhi.n	800be4a <_malloc_r+0x20a>
 800be44:	0bc2      	lsrs	r2, r0, #15
 800be46:	3277      	adds	r2, #119	; 0x77
 800be48:	e7dc      	b.n	800be04 <_malloc_r+0x1c4>
 800be4a:	f240 5754 	movw	r7, #1364	; 0x554
 800be4e:	42ba      	cmp	r2, r7
 800be50:	bf9a      	itte	ls
 800be52:	0c82      	lsrls	r2, r0, #18
 800be54:	327c      	addls	r2, #124	; 0x7c
 800be56:	227e      	movhi	r2, #126	; 0x7e
 800be58:	e7d4      	b.n	800be04 <_malloc_r+0x1c4>
 800be5a:	68bf      	ldr	r7, [r7, #8]
 800be5c:	45be      	cmp	lr, r7
 800be5e:	d004      	beq.n	800be6a <_malloc_r+0x22a>
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	f022 0203 	bic.w	r2, r2, #3
 800be66:	4290      	cmp	r0, r2
 800be68:	d3f7      	bcc.n	800be5a <_malloc_r+0x21a>
 800be6a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800be6e:	e7d7      	b.n	800be20 <_malloc_r+0x1e0>
 800be70:	6870      	ldr	r0, [r6, #4]
 800be72:	68f7      	ldr	r7, [r6, #12]
 800be74:	f020 0003 	bic.w	r0, r0, #3
 800be78:	eba0 0a04 	sub.w	sl, r0, r4
 800be7c:	f1ba 0f0f 	cmp.w	sl, #15
 800be80:	dd10      	ble.n	800bea4 <_malloc_r+0x264>
 800be82:	68b2      	ldr	r2, [r6, #8]
 800be84:	1933      	adds	r3, r6, r4
 800be86:	f044 0401 	orr.w	r4, r4, #1
 800be8a:	6074      	str	r4, [r6, #4]
 800be8c:	60d7      	str	r7, [r2, #12]
 800be8e:	60ba      	str	r2, [r7, #8]
 800be90:	f04a 0201 	orr.w	r2, sl, #1
 800be94:	616b      	str	r3, [r5, #20]
 800be96:	612b      	str	r3, [r5, #16]
 800be98:	60d9      	str	r1, [r3, #12]
 800be9a:	6099      	str	r1, [r3, #8]
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	f846 a000 	str.w	sl, [r6, r0]
 800bea2:	e6ff      	b.n	800bca4 <_malloc_r+0x64>
 800bea4:	f1ba 0f00 	cmp.w	sl, #0
 800bea8:	db0f      	blt.n	800beca <_malloc_r+0x28a>
 800beaa:	4430      	add	r0, r6
 800beac:	6843      	ldr	r3, [r0, #4]
 800beae:	f043 0301 	orr.w	r3, r3, #1
 800beb2:	6043      	str	r3, [r0, #4]
 800beb4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800beb8:	4648      	mov	r0, r9
 800beba:	60df      	str	r7, [r3, #12]
 800bebc:	60bb      	str	r3, [r7, #8]
 800bebe:	f000 f8e7 	bl	800c090 <__malloc_unlock>
 800bec2:	4630      	mov	r0, r6
 800bec4:	b003      	add	sp, #12
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	463e      	mov	r6, r7
 800becc:	e77a      	b.n	800bdc4 <_malloc_r+0x184>
 800bece:	f85c 0908 	ldr.w	r0, [ip], #-8
 800bed2:	4584      	cmp	ip, r0
 800bed4:	f103 33ff 	add.w	r3, r3, #4294967295
 800bed8:	f43f af7d 	beq.w	800bdd6 <_malloc_r+0x196>
 800bedc:	e781      	b.n	800bde2 <_malloc_r+0x1a2>
 800bede:	bf00      	nop
 800bee0:	20000138 	.word	0x20000138
 800bee4:	20000140 	.word	0x20000140
 800bee8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800beec:	f8db 6004 	ldr.w	r6, [fp, #4]
 800bef0:	f026 0603 	bic.w	r6, r6, #3
 800bef4:	42b4      	cmp	r4, r6
 800bef6:	d803      	bhi.n	800bf00 <_malloc_r+0x2c0>
 800bef8:	1b33      	subs	r3, r6, r4
 800befa:	2b0f      	cmp	r3, #15
 800befc:	f300 8096 	bgt.w	800c02c <_malloc_r+0x3ec>
 800bf00:	4a4f      	ldr	r2, [pc, #316]	; (800c040 <_malloc_r+0x400>)
 800bf02:	6817      	ldr	r7, [r2, #0]
 800bf04:	4a4f      	ldr	r2, [pc, #316]	; (800c044 <_malloc_r+0x404>)
 800bf06:	6811      	ldr	r1, [r2, #0]
 800bf08:	3710      	adds	r7, #16
 800bf0a:	3101      	adds	r1, #1
 800bf0c:	eb0b 0306 	add.w	r3, fp, r6
 800bf10:	4427      	add	r7, r4
 800bf12:	d005      	beq.n	800bf20 <_malloc_r+0x2e0>
 800bf14:	494c      	ldr	r1, [pc, #304]	; (800c048 <_malloc_r+0x408>)
 800bf16:	3901      	subs	r1, #1
 800bf18:	440f      	add	r7, r1
 800bf1a:	3101      	adds	r1, #1
 800bf1c:	4249      	negs	r1, r1
 800bf1e:	400f      	ands	r7, r1
 800bf20:	4639      	mov	r1, r7
 800bf22:	4648      	mov	r0, r9
 800bf24:	9201      	str	r2, [sp, #4]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	f000 f94c 	bl	800c1c4 <_sbrk_r>
 800bf2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf30:	4680      	mov	r8, r0
 800bf32:	d056      	beq.n	800bfe2 <_malloc_r+0x3a2>
 800bf34:	9b00      	ldr	r3, [sp, #0]
 800bf36:	9a01      	ldr	r2, [sp, #4]
 800bf38:	4283      	cmp	r3, r0
 800bf3a:	d901      	bls.n	800bf40 <_malloc_r+0x300>
 800bf3c:	45ab      	cmp	fp, r5
 800bf3e:	d150      	bne.n	800bfe2 <_malloc_r+0x3a2>
 800bf40:	4842      	ldr	r0, [pc, #264]	; (800c04c <_malloc_r+0x40c>)
 800bf42:	6801      	ldr	r1, [r0, #0]
 800bf44:	4543      	cmp	r3, r8
 800bf46:	eb07 0e01 	add.w	lr, r7, r1
 800bf4a:	f8c0 e000 	str.w	lr, [r0]
 800bf4e:	4940      	ldr	r1, [pc, #256]	; (800c050 <_malloc_r+0x410>)
 800bf50:	4682      	mov	sl, r0
 800bf52:	d113      	bne.n	800bf7c <_malloc_r+0x33c>
 800bf54:	420b      	tst	r3, r1
 800bf56:	d111      	bne.n	800bf7c <_malloc_r+0x33c>
 800bf58:	68ab      	ldr	r3, [r5, #8]
 800bf5a:	443e      	add	r6, r7
 800bf5c:	f046 0601 	orr.w	r6, r6, #1
 800bf60:	605e      	str	r6, [r3, #4]
 800bf62:	4a3c      	ldr	r2, [pc, #240]	; (800c054 <_malloc_r+0x414>)
 800bf64:	f8da 3000 	ldr.w	r3, [sl]
 800bf68:	6811      	ldr	r1, [r2, #0]
 800bf6a:	428b      	cmp	r3, r1
 800bf6c:	bf88      	it	hi
 800bf6e:	6013      	strhi	r3, [r2, #0]
 800bf70:	4a39      	ldr	r2, [pc, #228]	; (800c058 <_malloc_r+0x418>)
 800bf72:	6811      	ldr	r1, [r2, #0]
 800bf74:	428b      	cmp	r3, r1
 800bf76:	bf88      	it	hi
 800bf78:	6013      	strhi	r3, [r2, #0]
 800bf7a:	e032      	b.n	800bfe2 <_malloc_r+0x3a2>
 800bf7c:	6810      	ldr	r0, [r2, #0]
 800bf7e:	3001      	adds	r0, #1
 800bf80:	bf1b      	ittet	ne
 800bf82:	eba8 0303 	subne.w	r3, r8, r3
 800bf86:	4473      	addne	r3, lr
 800bf88:	f8c2 8000 	streq.w	r8, [r2]
 800bf8c:	f8ca 3000 	strne.w	r3, [sl]
 800bf90:	f018 0007 	ands.w	r0, r8, #7
 800bf94:	bf1c      	itt	ne
 800bf96:	f1c0 0008 	rsbne	r0, r0, #8
 800bf9a:	4480      	addne	r8, r0
 800bf9c:	4b2a      	ldr	r3, [pc, #168]	; (800c048 <_malloc_r+0x408>)
 800bf9e:	4447      	add	r7, r8
 800bfa0:	4418      	add	r0, r3
 800bfa2:	400f      	ands	r7, r1
 800bfa4:	1bc7      	subs	r7, r0, r7
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	4648      	mov	r0, r9
 800bfaa:	f000 f90b 	bl	800c1c4 <_sbrk_r>
 800bfae:	1c43      	adds	r3, r0, #1
 800bfb0:	bf08      	it	eq
 800bfb2:	4640      	moveq	r0, r8
 800bfb4:	f8da 3000 	ldr.w	r3, [sl]
 800bfb8:	f8c5 8008 	str.w	r8, [r5, #8]
 800bfbc:	bf08      	it	eq
 800bfbe:	2700      	moveq	r7, #0
 800bfc0:	eba0 0008 	sub.w	r0, r0, r8
 800bfc4:	443b      	add	r3, r7
 800bfc6:	4407      	add	r7, r0
 800bfc8:	f047 0701 	orr.w	r7, r7, #1
 800bfcc:	45ab      	cmp	fp, r5
 800bfce:	f8ca 3000 	str.w	r3, [sl]
 800bfd2:	f8c8 7004 	str.w	r7, [r8, #4]
 800bfd6:	d0c4      	beq.n	800bf62 <_malloc_r+0x322>
 800bfd8:	2e0f      	cmp	r6, #15
 800bfda:	d810      	bhi.n	800bffe <_malloc_r+0x3be>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f8c8 3004 	str.w	r3, [r8, #4]
 800bfe2:	68ab      	ldr	r3, [r5, #8]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	f022 0203 	bic.w	r2, r2, #3
 800bfea:	4294      	cmp	r4, r2
 800bfec:	eba2 0304 	sub.w	r3, r2, r4
 800bff0:	d801      	bhi.n	800bff6 <_malloc_r+0x3b6>
 800bff2:	2b0f      	cmp	r3, #15
 800bff4:	dc1a      	bgt.n	800c02c <_malloc_r+0x3ec>
 800bff6:	4648      	mov	r0, r9
 800bff8:	f000 f84a 	bl	800c090 <__malloc_unlock>
 800bffc:	e62d      	b.n	800bc5a <_malloc_r+0x1a>
 800bffe:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c002:	3e0c      	subs	r6, #12
 800c004:	f026 0607 	bic.w	r6, r6, #7
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	4333      	orrs	r3, r6
 800c00e:	f8cb 3004 	str.w	r3, [fp, #4]
 800c012:	eb0b 0306 	add.w	r3, fp, r6
 800c016:	2205      	movs	r2, #5
 800c018:	2e0f      	cmp	r6, #15
 800c01a:	605a      	str	r2, [r3, #4]
 800c01c:	609a      	str	r2, [r3, #8]
 800c01e:	d9a0      	bls.n	800bf62 <_malloc_r+0x322>
 800c020:	f10b 0108 	add.w	r1, fp, #8
 800c024:	4648      	mov	r0, r9
 800c026:	f7ff fcf9 	bl	800ba1c <_free_r>
 800c02a:	e79a      	b.n	800bf62 <_malloc_r+0x322>
 800c02c:	68ae      	ldr	r6, [r5, #8]
 800c02e:	f044 0201 	orr.w	r2, r4, #1
 800c032:	4434      	add	r4, r6
 800c034:	f043 0301 	orr.w	r3, r3, #1
 800c038:	6072      	str	r2, [r6, #4]
 800c03a:	60ac      	str	r4, [r5, #8]
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	e631      	b.n	800bca4 <_malloc_r+0x64>
 800c040:	20001c60 	.word	0x20001c60
 800c044:	20000540 	.word	0x20000540
 800c048:	00001000 	.word	0x00001000
 800c04c:	20001c30 	.word	0x20001c30
 800c050:	00000fff 	.word	0x00000fff
 800c054:	20001c58 	.word	0x20001c58
 800c058:	20001c5c 	.word	0x20001c5c

0800c05c <memcpy>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	1e43      	subs	r3, r0, #1
 800c060:	440a      	add	r2, r1
 800c062:	4291      	cmp	r1, r2
 800c064:	d100      	bne.n	800c068 <memcpy+0xc>
 800c066:	bd10      	pop	{r4, pc}
 800c068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c06c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c070:	e7f7      	b.n	800c062 <memcpy+0x6>

0800c072 <memset>:
 800c072:	4402      	add	r2, r0
 800c074:	4603      	mov	r3, r0
 800c076:	4293      	cmp	r3, r2
 800c078:	d100      	bne.n	800c07c <memset+0xa>
 800c07a:	4770      	bx	lr
 800c07c:	f803 1b01 	strb.w	r1, [r3], #1
 800c080:	e7f9      	b.n	800c076 <memset+0x4>
	...

0800c084 <__malloc_lock>:
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__malloc_lock+0x8>)
 800c086:	f7ff bdc9 	b.w	800bc1c <__retarget_lock_acquire_recursive>
 800c08a:	bf00      	nop
 800c08c:	20001db4 	.word	0x20001db4

0800c090 <__malloc_unlock>:
 800c090:	4801      	ldr	r0, [pc, #4]	; (800c098 <__malloc_unlock+0x8>)
 800c092:	f7ff bdc4 	b.w	800bc1e <__retarget_lock_release_recursive>
 800c096:	bf00      	nop
 800c098:	20001db4 	.word	0x20001db4

0800c09c <printf>:
 800c09c:	b40f      	push	{r0, r1, r2, r3}
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <printf+0x2c>)
 800c0a0:	b513      	push	{r0, r1, r4, lr}
 800c0a2:	681c      	ldr	r4, [r3, #0]
 800c0a4:	b124      	cbz	r4, 800c0b0 <printf+0x14>
 800c0a6:	69a3      	ldr	r3, [r4, #24]
 800c0a8:	b913      	cbnz	r3, 800c0b0 <printf+0x14>
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f7ff fbe0 	bl	800b870 <__sinit>
 800c0b0:	ab05      	add	r3, sp, #20
 800c0b2:	9a04      	ldr	r2, [sp, #16]
 800c0b4:	68a1      	ldr	r1, [r4, #8]
 800c0b6:	9301      	str	r3, [sp, #4]
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f001 f8d1 	bl	800d260 <_vfprintf_r>
 800c0be:	b002      	add	sp, #8
 800c0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0c4:	b004      	add	sp, #16
 800c0c6:	4770      	bx	lr
 800c0c8:	20000044 	.word	0x20000044

0800c0cc <putchar>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4b08      	ldr	r3, [pc, #32]	; (800c0f0 <putchar+0x24>)
 800c0d0:	681c      	ldr	r4, [r3, #0]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	b124      	cbz	r4, 800c0e0 <putchar+0x14>
 800c0d6:	69a3      	ldr	r3, [r4, #24]
 800c0d8:	b913      	cbnz	r3, 800c0e0 <putchar+0x14>
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f7ff fbc8 	bl	800b870 <__sinit>
 800c0e0:	68a2      	ldr	r2, [r4, #8]
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ea:	f003 bd4f 	b.w	800fb8c <_putc_r>
 800c0ee:	bf00      	nop
 800c0f0:	20000044 	.word	0x20000044

0800c0f4 <_puts_r>:
 800c0f4:	b530      	push	{r4, r5, lr}
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	b089      	sub	sp, #36	; 0x24
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	f7f4 f871 	bl	80001e4 <strlen>
 800c102:	4b28      	ldr	r3, [pc, #160]	; (800c1a4 <_puts_r+0xb0>)
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	2301      	movs	r3, #1
 800c108:	9005      	str	r0, [sp, #20]
 800c10a:	9307      	str	r3, [sp, #28]
 800c10c:	4418      	add	r0, r3
 800c10e:	ab04      	add	r3, sp, #16
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	2302      	movs	r3, #2
 800c114:	9404      	str	r4, [sp, #16]
 800c116:	9003      	str	r0, [sp, #12]
 800c118:	9302      	str	r3, [sp, #8]
 800c11a:	b125      	cbz	r5, 800c126 <_puts_r+0x32>
 800c11c:	69ab      	ldr	r3, [r5, #24]
 800c11e:	b913      	cbnz	r3, 800c126 <_puts_r+0x32>
 800c120:	4628      	mov	r0, r5
 800c122:	f7ff fba5 	bl	800b870 <__sinit>
 800c126:	69ab      	ldr	r3, [r5, #24]
 800c128:	68ac      	ldr	r4, [r5, #8]
 800c12a:	b913      	cbnz	r3, 800c132 <_puts_r+0x3e>
 800c12c:	4628      	mov	r0, r5
 800c12e:	f7ff fb9f 	bl	800b870 <__sinit>
 800c132:	4b1d      	ldr	r3, [pc, #116]	; (800c1a8 <_puts_r+0xb4>)
 800c134:	429c      	cmp	r4, r3
 800c136:	d12a      	bne.n	800c18e <_puts_r+0x9a>
 800c138:	686c      	ldr	r4, [r5, #4]
 800c13a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c13c:	07db      	lsls	r3, r3, #31
 800c13e:	d405      	bmi.n	800c14c <_puts_r+0x58>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	0598      	lsls	r0, r3, #22
 800c144:	d402      	bmi.n	800c14c <_puts_r+0x58>
 800c146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c148:	f7ff fd68 	bl	800bc1c <__retarget_lock_acquire_recursive>
 800c14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c150:	0499      	lsls	r1, r3, #18
 800c152:	d406      	bmi.n	800c162 <_puts_r+0x6e>
 800c154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c160:	6663      	str	r3, [r4, #100]	; 0x64
 800c162:	4628      	mov	r0, r5
 800c164:	aa01      	add	r2, sp, #4
 800c166:	4621      	mov	r1, r4
 800c168:	f003 f84c 	bl	800f204 <__sfvwrite_r>
 800c16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c16e:	2800      	cmp	r0, #0
 800c170:	bf14      	ite	ne
 800c172:	f04f 35ff 	movne.w	r5, #4294967295
 800c176:	250a      	moveq	r5, #10
 800c178:	07da      	lsls	r2, r3, #31
 800c17a:	d405      	bmi.n	800c188 <_puts_r+0x94>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	059b      	lsls	r3, r3, #22
 800c180:	d402      	bmi.n	800c188 <_puts_r+0x94>
 800c182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c184:	f7ff fd4b 	bl	800bc1e <__retarget_lock_release_recursive>
 800c188:	4628      	mov	r0, r5
 800c18a:	b009      	add	sp, #36	; 0x24
 800c18c:	bd30      	pop	{r4, r5, pc}
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <_puts_r+0xb8>)
 800c190:	429c      	cmp	r4, r3
 800c192:	d101      	bne.n	800c198 <_puts_r+0xa4>
 800c194:	68ac      	ldr	r4, [r5, #8]
 800c196:	e7d0      	b.n	800c13a <_puts_r+0x46>
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <_puts_r+0xbc>)
 800c19a:	429c      	cmp	r4, r3
 800c19c:	bf08      	it	eq
 800c19e:	68ec      	ldreq	r4, [r5, #12]
 800c1a0:	e7cb      	b.n	800c13a <_puts_r+0x46>
 800c1a2:	bf00      	nop
 800c1a4:	080108c0 	.word	0x080108c0
 800c1a8:	0801087c 	.word	0x0801087c
 800c1ac:	0801089c 	.word	0x0801089c
 800c1b0:	0801085c 	.word	0x0801085c

0800c1b4 <puts>:
 800c1b4:	4b02      	ldr	r3, [pc, #8]	; (800c1c0 <puts+0xc>)
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	f7ff bf9b 	b.w	800c0f4 <_puts_r>
 800c1be:	bf00      	nop
 800c1c0:	20000044 	.word	0x20000044

0800c1c4 <_sbrk_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4c06      	ldr	r4, [pc, #24]	; (800c1e0 <_sbrk_r+0x1c>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	6023      	str	r3, [r4, #0]
 800c1d0:	f7fe ffbe 	bl	800b150 <_sbrk>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_sbrk_r+0x1a>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_sbrk_r+0x1a>
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20001dbc 	.word	0x20001dbc

0800c1e4 <sprintf>:
 800c1e4:	b40e      	push	{r1, r2, r3}
 800c1e6:	b500      	push	{lr}
 800c1e8:	b09c      	sub	sp, #112	; 0x70
 800c1ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c1f0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c1f4:	9002      	str	r0, [sp, #8]
 800c1f6:	9006      	str	r0, [sp, #24]
 800c1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1fc:	480a      	ldr	r0, [pc, #40]	; (800c228 <sprintf+0x44>)
 800c1fe:	9104      	str	r1, [sp, #16]
 800c200:	9107      	str	r1, [sp, #28]
 800c202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c206:	f853 2b04 	ldr.w	r2, [r3], #4
 800c20a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c20e:	6800      	ldr	r0, [r0, #0]
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	a902      	add	r1, sp, #8
 800c214:	f000 f850 	bl	800c2b8 <_svfprintf_r>
 800c218:	9b02      	ldr	r3, [sp, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	b01c      	add	sp, #112	; 0x70
 800c220:	f85d eb04 	ldr.w	lr, [sp], #4
 800c224:	b003      	add	sp, #12
 800c226:	4770      	bx	lr
 800c228:	20000044 	.word	0x20000044

0800c22c <__sread>:
 800c22c:	b510      	push	{r4, lr}
 800c22e:	460c      	mov	r4, r1
 800c230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c234:	f003 fcf2 	bl	800fc1c <_read_r>
 800c238:	2800      	cmp	r0, #0
 800c23a:	bfab      	itete	ge
 800c23c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c23e:	89a3      	ldrhlt	r3, [r4, #12]
 800c240:	181b      	addge	r3, r3, r0
 800c242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c246:	bfac      	ite	ge
 800c248:	6563      	strge	r3, [r4, #84]	; 0x54
 800c24a:	81a3      	strhlt	r3, [r4, #12]
 800c24c:	bd10      	pop	{r4, pc}

0800c24e <__swrite>:
 800c24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c252:	461f      	mov	r7, r3
 800c254:	898b      	ldrh	r3, [r1, #12]
 800c256:	05db      	lsls	r3, r3, #23
 800c258:	4605      	mov	r5, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	4616      	mov	r6, r2
 800c25e:	d505      	bpl.n	800c26c <__swrite+0x1e>
 800c260:	2302      	movs	r3, #2
 800c262:	2200      	movs	r2, #0
 800c264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c268:	f003 f928 	bl	800f4bc <_lseek_r>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	4632      	mov	r2, r6
 800c27a:	463b      	mov	r3, r7
 800c27c:	4628      	mov	r0, r5
 800c27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	f002 b869 	b.w	800e358 <_write_r>

0800c286 <__sseek>:
 800c286:	b510      	push	{r4, lr}
 800c288:	460c      	mov	r4, r1
 800c28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28e:	f003 f915 	bl	800f4bc <_lseek_r>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	bf15      	itete	ne
 800c298:	6560      	strne	r0, [r4, #84]	; 0x54
 800c29a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c29e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2a2:	81a3      	strheq	r3, [r4, #12]
 800c2a4:	bf18      	it	ne
 800c2a6:	81a3      	strhne	r3, [r4, #12]
 800c2a8:	bd10      	pop	{r4, pc}

0800c2aa <__sclose>:
 800c2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ae:	f002 b8d3 	b.w	800e458 <_close_r>
 800c2b2:	0000      	movs	r0, r0
 800c2b4:	0000      	movs	r0, r0
	...

0800c2b8 <_svfprintf_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	b0bd      	sub	sp, #244	; 0xf4
 800c2be:	468a      	mov	sl, r1
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	461f      	mov	r7, r3
 800c2c4:	4683      	mov	fp, r0
 800c2c6:	f003 f8eb 	bl	800f4a0 <_localeconv_r>
 800c2ca:	6803      	ldr	r3, [r0, #0]
 800c2cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7f3 ff88 	bl	80001e4 <strlen>
 800c2d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800c2d8:	9008      	str	r0, [sp, #32]
 800c2da:	061b      	lsls	r3, r3, #24
 800c2dc:	d518      	bpl.n	800c310 <_svfprintf_r+0x58>
 800c2de:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c2e2:	b9ab      	cbnz	r3, 800c310 <_svfprintf_r+0x58>
 800c2e4:	2140      	movs	r1, #64	; 0x40
 800c2e6:	4658      	mov	r0, fp
 800c2e8:	f7ff fcaa 	bl	800bc40 <_malloc_r>
 800c2ec:	f8ca 0000 	str.w	r0, [sl]
 800c2f0:	f8ca 0010 	str.w	r0, [sl, #16]
 800c2f4:	b948      	cbnz	r0, 800c30a <_svfprintf_r+0x52>
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	f8cb 3000 	str.w	r3, [fp]
 800c2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c300:	9309      	str	r3, [sp, #36]	; 0x24
 800c302:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c304:	b03d      	add	sp, #244	; 0xf4
 800c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30a:	2340      	movs	r3, #64	; 0x40
 800c30c:	f8ca 3014 	str.w	r3, [sl, #20]
 800c310:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800c578 <_svfprintf_r+0x2c0>
 800c314:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c318:	2300      	movs	r3, #0
 800c31a:	ac2c      	add	r4, sp, #176	; 0xb0
 800c31c:	941f      	str	r4, [sp, #124]	; 0x7c
 800c31e:	9321      	str	r3, [sp, #132]	; 0x84
 800c320:	9320      	str	r3, [sp, #128]	; 0x80
 800c322:	9505      	str	r5, [sp, #20]
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	9311      	str	r3, [sp, #68]	; 0x44
 800c328:	9310      	str	r3, [sp, #64]	; 0x40
 800c32a:	9309      	str	r3, [sp, #36]	; 0x24
 800c32c:	9d05      	ldr	r5, [sp, #20]
 800c32e:	462b      	mov	r3, r5
 800c330:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c334:	b112      	cbz	r2, 800c33c <_svfprintf_r+0x84>
 800c336:	2a25      	cmp	r2, #37	; 0x25
 800c338:	f040 8083 	bne.w	800c442 <_svfprintf_r+0x18a>
 800c33c:	9b05      	ldr	r3, [sp, #20]
 800c33e:	1aee      	subs	r6, r5, r3
 800c340:	d00d      	beq.n	800c35e <_svfprintf_r+0xa6>
 800c342:	e884 0048 	stmia.w	r4, {r3, r6}
 800c346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c348:	4433      	add	r3, r6
 800c34a:	9321      	str	r3, [sp, #132]	; 0x84
 800c34c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c34e:	3301      	adds	r3, #1
 800c350:	2b07      	cmp	r3, #7
 800c352:	9320      	str	r3, [sp, #128]	; 0x80
 800c354:	dc77      	bgt.n	800c446 <_svfprintf_r+0x18e>
 800c356:	3408      	adds	r4, #8
 800c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35a:	4433      	add	r3, r6
 800c35c:	9309      	str	r3, [sp, #36]	; 0x24
 800c35e:	782b      	ldrb	r3, [r5, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 8729 	beq.w	800d1b8 <_svfprintf_r+0xf00>
 800c366:	2300      	movs	r3, #0
 800c368:	1c69      	adds	r1, r5, #1
 800c36a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c36e:	461a      	mov	r2, r3
 800c370:	f04f 39ff 	mov.w	r9, #4294967295
 800c374:	930a      	str	r3, [sp, #40]	; 0x28
 800c376:	461d      	mov	r5, r3
 800c378:	200a      	movs	r0, #10
 800c37a:	1c4e      	adds	r6, r1, #1
 800c37c:	7809      	ldrb	r1, [r1, #0]
 800c37e:	9605      	str	r6, [sp, #20]
 800c380:	9102      	str	r1, [sp, #8]
 800c382:	9902      	ldr	r1, [sp, #8]
 800c384:	3920      	subs	r1, #32
 800c386:	2958      	cmp	r1, #88	; 0x58
 800c388:	f200 8418 	bhi.w	800cbbc <_svfprintf_r+0x904>
 800c38c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c390:	041600a6 	.word	0x041600a6
 800c394:	00ab0416 	.word	0x00ab0416
 800c398:	04160416 	.word	0x04160416
 800c39c:	04160416 	.word	0x04160416
 800c3a0:	04160416 	.word	0x04160416
 800c3a4:	006500ae 	.word	0x006500ae
 800c3a8:	00b70416 	.word	0x00b70416
 800c3ac:	041600ba 	.word	0x041600ba
 800c3b0:	00da00d7 	.word	0x00da00d7
 800c3b4:	00da00da 	.word	0x00da00da
 800c3b8:	00da00da 	.word	0x00da00da
 800c3bc:	00da00da 	.word	0x00da00da
 800c3c0:	00da00da 	.word	0x00da00da
 800c3c4:	04160416 	.word	0x04160416
 800c3c8:	04160416 	.word	0x04160416
 800c3cc:	04160416 	.word	0x04160416
 800c3d0:	04160416 	.word	0x04160416
 800c3d4:	04160416 	.word	0x04160416
 800c3d8:	012b0115 	.word	0x012b0115
 800c3dc:	012b0416 	.word	0x012b0416
 800c3e0:	04160416 	.word	0x04160416
 800c3e4:	04160416 	.word	0x04160416
 800c3e8:	041600ed 	.word	0x041600ed
 800c3ec:	03400416 	.word	0x03400416
 800c3f0:	04160416 	.word	0x04160416
 800c3f4:	04160416 	.word	0x04160416
 800c3f8:	03a80416 	.word	0x03a80416
 800c3fc:	04160416 	.word	0x04160416
 800c400:	04160086 	.word	0x04160086
 800c404:	04160416 	.word	0x04160416
 800c408:	04160416 	.word	0x04160416
 800c40c:	04160416 	.word	0x04160416
 800c410:	04160416 	.word	0x04160416
 800c414:	01070416 	.word	0x01070416
 800c418:	012b006b 	.word	0x012b006b
 800c41c:	012b012b 	.word	0x012b012b
 800c420:	006b00f0 	.word	0x006b00f0
 800c424:	04160416 	.word	0x04160416
 800c428:	041600fa 	.word	0x041600fa
 800c42c:	03420322 	.word	0x03420322
 800c430:	01010376 	.word	0x01010376
 800c434:	03870416 	.word	0x03870416
 800c438:	03aa0416 	.word	0x03aa0416
 800c43c:	04160416 	.word	0x04160416
 800c440:	03c2      	.short	0x03c2
 800c442:	461d      	mov	r5, r3
 800c444:	e773      	b.n	800c32e <_svfprintf_r+0x76>
 800c446:	aa1f      	add	r2, sp, #124	; 0x7c
 800c448:	4651      	mov	r1, sl
 800c44a:	4658      	mov	r0, fp
 800c44c:	f003 fd78 	bl	800ff40 <__ssprint_r>
 800c450:	2800      	cmp	r0, #0
 800c452:	f040 8692 	bne.w	800d17a <_svfprintf_r+0xec2>
 800c456:	ac2c      	add	r4, sp, #176	; 0xb0
 800c458:	e77e      	b.n	800c358 <_svfprintf_r+0xa0>
 800c45a:	2301      	movs	r3, #1
 800c45c:	222b      	movs	r2, #43	; 0x2b
 800c45e:	9905      	ldr	r1, [sp, #20]
 800c460:	e78b      	b.n	800c37a <_svfprintf_r+0xc2>
 800c462:	460f      	mov	r7, r1
 800c464:	e7fb      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c466:	b10b      	cbz	r3, 800c46c <_svfprintf_r+0x1b4>
 800c468:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800c46c:	06ae      	lsls	r6, r5, #26
 800c46e:	f140 80aa 	bpl.w	800c5c6 <_svfprintf_r+0x30e>
 800c472:	3707      	adds	r7, #7
 800c474:	f027 0707 	bic.w	r7, r7, #7
 800c478:	f107 0308 	add.w	r3, r7, #8
 800c47c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c480:	9304      	str	r3, [sp, #16]
 800c482:	2e00      	cmp	r6, #0
 800c484:	f177 0300 	sbcs.w	r3, r7, #0
 800c488:	da06      	bge.n	800c498 <_svfprintf_r+0x1e0>
 800c48a:	4276      	negs	r6, r6
 800c48c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800c490:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800c494:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c498:	2301      	movs	r3, #1
 800c49a:	e2ca      	b.n	800ca32 <_svfprintf_r+0x77a>
 800c49c:	b10b      	cbz	r3, 800c4a2 <_svfprintf_r+0x1ea>
 800c49e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800c4a2:	4b37      	ldr	r3, [pc, #220]	; (800c580 <_svfprintf_r+0x2c8>)
 800c4a4:	9311      	str	r3, [sp, #68]	; 0x44
 800c4a6:	06ab      	lsls	r3, r5, #26
 800c4a8:	f140 8339 	bpl.w	800cb1e <_svfprintf_r+0x866>
 800c4ac:	3707      	adds	r7, #7
 800c4ae:	f027 0707 	bic.w	r7, r7, #7
 800c4b2:	f107 0308 	add.w	r3, r7, #8
 800c4b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	07e8      	lsls	r0, r5, #31
 800c4be:	d50b      	bpl.n	800c4d8 <_svfprintf_r+0x220>
 800c4c0:	ea56 0307 	orrs.w	r3, r6, r7
 800c4c4:	d008      	beq.n	800c4d8 <_svfprintf_r+0x220>
 800c4c6:	2330      	movs	r3, #48	; 0x30
 800c4c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800c4cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c4d0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800c4d4:	f045 0502 	orr.w	r5, r5, #2
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e2a7      	b.n	800ca2c <_svfprintf_r+0x774>
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	d1be      	bne.n	800c45e <_svfprintf_r+0x1a6>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	e7bb      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c4e6:	f045 0501 	orr.w	r5, r5, #1
 800c4ea:	e7b8      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c4ec:	683e      	ldr	r6, [r7, #0]
 800c4ee:	960a      	str	r6, [sp, #40]	; 0x28
 800c4f0:	2e00      	cmp	r6, #0
 800c4f2:	f107 0104 	add.w	r1, r7, #4
 800c4f6:	dab4      	bge.n	800c462 <_svfprintf_r+0x1aa>
 800c4f8:	4276      	negs	r6, r6
 800c4fa:	960a      	str	r6, [sp, #40]	; 0x28
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	f045 0504 	orr.w	r5, r5, #4
 800c502:	e7ac      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c504:	9905      	ldr	r1, [sp, #20]
 800c506:	1c4e      	adds	r6, r1, #1
 800c508:	7809      	ldrb	r1, [r1, #0]
 800c50a:	9102      	str	r1, [sp, #8]
 800c50c:	292a      	cmp	r1, #42	; 0x2a
 800c50e:	d010      	beq.n	800c532 <_svfprintf_r+0x27a>
 800c510:	f04f 0900 	mov.w	r9, #0
 800c514:	9605      	str	r6, [sp, #20]
 800c516:	9902      	ldr	r1, [sp, #8]
 800c518:	3930      	subs	r1, #48	; 0x30
 800c51a:	2909      	cmp	r1, #9
 800c51c:	f63f af31 	bhi.w	800c382 <_svfprintf_r+0xca>
 800c520:	fb00 1909 	mla	r9, r0, r9, r1
 800c524:	9905      	ldr	r1, [sp, #20]
 800c526:	460e      	mov	r6, r1
 800c528:	f816 1b01 	ldrb.w	r1, [r6], #1
 800c52c:	9102      	str	r1, [sp, #8]
 800c52e:	9605      	str	r6, [sp, #20]
 800c530:	e7f1      	b.n	800c516 <_svfprintf_r+0x25e>
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	9605      	str	r6, [sp, #20]
 800c536:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800c53a:	3704      	adds	r7, #4
 800c53c:	e78f      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c53e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800c542:	e78c      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c544:	2100      	movs	r1, #0
 800c546:	910a      	str	r1, [sp, #40]	; 0x28
 800c548:	9902      	ldr	r1, [sp, #8]
 800c54a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c54c:	3930      	subs	r1, #48	; 0x30
 800c54e:	fb00 1106 	mla	r1, r0, r6, r1
 800c552:	910a      	str	r1, [sp, #40]	; 0x28
 800c554:	9905      	ldr	r1, [sp, #20]
 800c556:	460e      	mov	r6, r1
 800c558:	f816 1b01 	ldrb.w	r1, [r6], #1
 800c55c:	9102      	str	r1, [sp, #8]
 800c55e:	9902      	ldr	r1, [sp, #8]
 800c560:	9605      	str	r6, [sp, #20]
 800c562:	3930      	subs	r1, #48	; 0x30
 800c564:	2909      	cmp	r1, #9
 800c566:	d9ef      	bls.n	800c548 <_svfprintf_r+0x290>
 800c568:	e70b      	b.n	800c382 <_svfprintf_r+0xca>
 800c56a:	f045 0508 	orr.w	r5, r5, #8
 800c56e:	e776      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c570:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800c574:	e773      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c576:	bf00      	nop
	...
 800c580:	080108d2 	.word	0x080108d2
 800c584:	9905      	ldr	r1, [sp, #20]
 800c586:	7809      	ldrb	r1, [r1, #0]
 800c588:	296c      	cmp	r1, #108	; 0x6c
 800c58a:	d105      	bne.n	800c598 <_svfprintf_r+0x2e0>
 800c58c:	9905      	ldr	r1, [sp, #20]
 800c58e:	3101      	adds	r1, #1
 800c590:	9105      	str	r1, [sp, #20]
 800c592:	f045 0520 	orr.w	r5, r5, #32
 800c596:	e762      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c598:	f045 0510 	orr.w	r5, r5, #16
 800c59c:	e75f      	b.n	800c45e <_svfprintf_r+0x1a6>
 800c59e:	1d3b      	adds	r3, r7, #4
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800c5aa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800c5ae:	f04f 0901 	mov.w	r9, #1
 800c5b2:	4637      	mov	r7, r6
 800c5b4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800c5b8:	e11b      	b.n	800c7f2 <_svfprintf_r+0x53a>
 800c5ba:	b10b      	cbz	r3, 800c5c0 <_svfprintf_r+0x308>
 800c5bc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800c5c0:	f045 0510 	orr.w	r5, r5, #16
 800c5c4:	e752      	b.n	800c46c <_svfprintf_r+0x1b4>
 800c5c6:	f015 0f10 	tst.w	r5, #16
 800c5ca:	f107 0304 	add.w	r3, r7, #4
 800c5ce:	d003      	beq.n	800c5d8 <_svfprintf_r+0x320>
 800c5d0:	683e      	ldr	r6, [r7, #0]
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	17f7      	asrs	r7, r6, #31
 800c5d6:	e754      	b.n	800c482 <_svfprintf_r+0x1ca>
 800c5d8:	683e      	ldr	r6, [r7, #0]
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c5e0:	bf18      	it	ne
 800c5e2:	b236      	sxthne	r6, r6
 800c5e4:	e7f6      	b.n	800c5d4 <_svfprintf_r+0x31c>
 800c5e6:	b10b      	cbz	r3, 800c5ec <_svfprintf_r+0x334>
 800c5e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800c5ec:	3707      	adds	r7, #7
 800c5ee:	f027 0707 	bic.w	r7, r7, #7
 800c5f2:	f107 0308 	add.w	r3, r7, #8
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	ed97 7b00 	vldr	d7, [r7]
 800c5fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c600:	9b06      	ldr	r3, [sp, #24]
 800c602:	9312      	str	r3, [sp, #72]	; 0x48
 800c604:	9b07      	ldr	r3, [sp, #28]
 800c606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c60a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c60c:	f04f 32ff 	mov.w	r2, #4294967295
 800c610:	4b4a      	ldr	r3, [pc, #296]	; (800c73c <_svfprintf_r+0x484>)
 800c612:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c616:	f7f4 fa95 	bl	8000b44 <__aeabi_dcmpun>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f040 85d5 	bne.w	800d1ca <_svfprintf_r+0xf12>
 800c620:	f04f 32ff 	mov.w	r2, #4294967295
 800c624:	4b45      	ldr	r3, [pc, #276]	; (800c73c <_svfprintf_r+0x484>)
 800c626:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c62a:	f7f4 fa6d 	bl	8000b08 <__aeabi_dcmple>
 800c62e:	2800      	cmp	r0, #0
 800c630:	f040 85cb 	bne.w	800d1ca <_svfprintf_r+0xf12>
 800c634:	2200      	movs	r2, #0
 800c636:	2300      	movs	r3, #0
 800c638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c63c:	f7f4 fa5a 	bl	8000af4 <__aeabi_dcmplt>
 800c640:	b110      	cbz	r0, 800c648 <_svfprintf_r+0x390>
 800c642:	232d      	movs	r3, #45	; 0x2d
 800c644:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c648:	4b3d      	ldr	r3, [pc, #244]	; (800c740 <_svfprintf_r+0x488>)
 800c64a:	4a3e      	ldr	r2, [pc, #248]	; (800c744 <_svfprintf_r+0x48c>)
 800c64c:	9902      	ldr	r1, [sp, #8]
 800c64e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c652:	2947      	cmp	r1, #71	; 0x47
 800c654:	bfcc      	ite	gt
 800c656:	4690      	movgt	r8, r2
 800c658:	4698      	movle	r8, r3
 800c65a:	f04f 0903 	mov.w	r9, #3
 800c65e:	2600      	movs	r6, #0
 800c660:	4637      	mov	r7, r6
 800c662:	e0c6      	b.n	800c7f2 <_svfprintf_r+0x53a>
 800c664:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c668:	d022      	beq.n	800c6b0 <_svfprintf_r+0x3f8>
 800c66a:	9b02      	ldr	r3, [sp, #8]
 800c66c:	f023 0320 	bic.w	r3, r3, #32
 800c670:	2b47      	cmp	r3, #71	; 0x47
 800c672:	d104      	bne.n	800c67e <_svfprintf_r+0x3c6>
 800c674:	f1b9 0f00 	cmp.w	r9, #0
 800c678:	bf08      	it	eq
 800c67a:	f04f 0901 	moveq.w	r9, #1
 800c67e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800c682:	930c      	str	r3, [sp, #48]	; 0x30
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	2b00      	cmp	r3, #0
 800c688:	da15      	bge.n	800c6b6 <_svfprintf_r+0x3fe>
 800c68a:	9b06      	ldr	r3, [sp, #24]
 800c68c:	930e      	str	r3, [sp, #56]	; 0x38
 800c68e:	9b07      	ldr	r3, [sp, #28]
 800c690:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c694:	930f      	str	r3, [sp, #60]	; 0x3c
 800c696:	232d      	movs	r3, #45	; 0x2d
 800c698:	930b      	str	r3, [sp, #44]	; 0x2c
 800c69a:	9b02      	ldr	r3, [sp, #8]
 800c69c:	f023 0720 	bic.w	r7, r3, #32
 800c6a0:	2f46      	cmp	r7, #70	; 0x46
 800c6a2:	d00e      	beq.n	800c6c2 <_svfprintf_r+0x40a>
 800c6a4:	2f45      	cmp	r7, #69	; 0x45
 800c6a6:	d146      	bne.n	800c736 <_svfprintf_r+0x47e>
 800c6a8:	f109 0601 	add.w	r6, r9, #1
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	e00a      	b.n	800c6c6 <_svfprintf_r+0x40e>
 800c6b0:	f04f 0906 	mov.w	r9, #6
 800c6b4:	e7e3      	b.n	800c67e <_svfprintf_r+0x3c6>
 800c6b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c6c0:	e7ea      	b.n	800c698 <_svfprintf_r+0x3e0>
 800c6c2:	464e      	mov	r6, r9
 800c6c4:	2103      	movs	r1, #3
 800c6c6:	ab1d      	add	r3, sp, #116	; 0x74
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	ab1a      	add	r3, sp, #104	; 0x68
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	ab19      	add	r3, sp, #100	; 0x64
 800c6d2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	f001 ff5a 	bl	800e590 <_dtoa_r>
 800c6dc:	2f47      	cmp	r7, #71	; 0x47
 800c6de:	4680      	mov	r8, r0
 800c6e0:	d102      	bne.n	800c6e8 <_svfprintf_r+0x430>
 800c6e2:	07e8      	lsls	r0, r5, #31
 800c6e4:	f140 857e 	bpl.w	800d1e4 <_svfprintf_r+0xf2c>
 800c6e8:	eb08 0306 	add.w	r3, r8, r6
 800c6ec:	2f46      	cmp	r7, #70	; 0x46
 800c6ee:	9303      	str	r3, [sp, #12]
 800c6f0:	d111      	bne.n	800c716 <_svfprintf_r+0x45e>
 800c6f2:	f898 3000 	ldrb.w	r3, [r8]
 800c6f6:	2b30      	cmp	r3, #48	; 0x30
 800c6f8:	d109      	bne.n	800c70e <_svfprintf_r+0x456>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c702:	f7f4 f9ed 	bl	8000ae0 <__aeabi_dcmpeq>
 800c706:	b910      	cbnz	r0, 800c70e <_svfprintf_r+0x456>
 800c708:	f1c6 0601 	rsb	r6, r6, #1
 800c70c:	9619      	str	r6, [sp, #100]	; 0x64
 800c70e:	9a03      	ldr	r2, [sp, #12]
 800c710:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c712:	441a      	add	r2, r3
 800c714:	9203      	str	r2, [sp, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c71e:	f7f4 f9df 	bl	8000ae0 <__aeabi_dcmpeq>
 800c722:	b988      	cbnz	r0, 800c748 <_svfprintf_r+0x490>
 800c724:	2230      	movs	r2, #48	; 0x30
 800c726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c728:	9903      	ldr	r1, [sp, #12]
 800c72a:	4299      	cmp	r1, r3
 800c72c:	d90e      	bls.n	800c74c <_svfprintf_r+0x494>
 800c72e:	1c59      	adds	r1, r3, #1
 800c730:	911d      	str	r1, [sp, #116]	; 0x74
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	e7f7      	b.n	800c726 <_svfprintf_r+0x46e>
 800c736:	464e      	mov	r6, r9
 800c738:	e7b8      	b.n	800c6ac <_svfprintf_r+0x3f4>
 800c73a:	bf00      	nop
 800c73c:	7fefffff 	.word	0x7fefffff
 800c740:	080108c2 	.word	0x080108c2
 800c744:	080108c6 	.word	0x080108c6
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	931d      	str	r3, [sp, #116]	; 0x74
 800c74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c74e:	2f47      	cmp	r7, #71	; 0x47
 800c750:	eba3 0308 	sub.w	r3, r3, r8
 800c754:	9303      	str	r3, [sp, #12]
 800c756:	f040 80fa 	bne.w	800c94e <_svfprintf_r+0x696>
 800c75a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c75c:	1cd9      	adds	r1, r3, #3
 800c75e:	db02      	blt.n	800c766 <_svfprintf_r+0x4ae>
 800c760:	4599      	cmp	r9, r3
 800c762:	f280 8120 	bge.w	800c9a6 <_svfprintf_r+0x6ee>
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	3b02      	subs	r3, #2
 800c76a:	9302      	str	r3, [sp, #8]
 800c76c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c76e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800c772:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800c776:	1e53      	subs	r3, r2, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	9319      	str	r3, [sp, #100]	; 0x64
 800c77c:	bfb6      	itet	lt
 800c77e:	f1c2 0301 	rsblt	r3, r2, #1
 800c782:	222b      	movge	r2, #43	; 0x2b
 800c784:	222d      	movlt	r2, #45	; 0x2d
 800c786:	2b09      	cmp	r3, #9
 800c788:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800c78c:	f340 80fb 	ble.w	800c986 <_svfprintf_r+0x6ce>
 800c790:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800c794:	260a      	movs	r6, #10
 800c796:	fb93 f0f6 	sdiv	r0, r3, r6
 800c79a:	fb06 3310 	mls	r3, r6, r0, r3
 800c79e:	3330      	adds	r3, #48	; 0x30
 800c7a0:	2809      	cmp	r0, #9
 800c7a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7a6:	f102 31ff 	add.w	r1, r2, #4294967295
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f300 80e4 	bgt.w	800c978 <_svfprintf_r+0x6c0>
 800c7b0:	3330      	adds	r3, #48	; 0x30
 800c7b2:	f801 3c01 	strb.w	r3, [r1, #-1]
 800c7b6:	3a02      	subs	r2, #2
 800c7b8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800c7bc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800c7c0:	4282      	cmp	r2, r0
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	f0c0 80da 	bcc.w	800c97c <_svfprintf_r+0x6c4>
 800c7c8:	9a03      	ldr	r2, [sp, #12]
 800c7ca:	ab1b      	add	r3, sp, #108	; 0x6c
 800c7cc:	1acb      	subs	r3, r1, r3
 800c7ce:	2a01      	cmp	r2, #1
 800c7d0:	9310      	str	r3, [sp, #64]	; 0x40
 800c7d2:	eb03 0902 	add.w	r9, r3, r2
 800c7d6:	dc02      	bgt.n	800c7de <_svfprintf_r+0x526>
 800c7d8:	f015 0701 	ands.w	r7, r5, #1
 800c7dc:	d002      	beq.n	800c7e4 <_svfprintf_r+0x52c>
 800c7de:	9b08      	ldr	r3, [sp, #32]
 800c7e0:	2700      	movs	r7, #0
 800c7e2:	4499      	add	r9, r3
 800c7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e6:	b113      	cbz	r3, 800c7ee <_svfprintf_r+0x536>
 800c7e8:	232d      	movs	r3, #45	; 0x2d
 800c7ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800c7ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	454e      	cmp	r6, r9
 800c7f4:	4633      	mov	r3, r6
 800c7f6:	bfb8      	it	lt
 800c7f8:	464b      	movlt	r3, r9
 800c7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800c800:	b113      	cbz	r3, 800c808 <_svfprintf_r+0x550>
 800c802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c804:	3301      	adds	r3, #1
 800c806:	930b      	str	r3, [sp, #44]	; 0x2c
 800c808:	f015 0302 	ands.w	r3, r5, #2
 800c80c:	9314      	str	r3, [sp, #80]	; 0x50
 800c80e:	bf1e      	ittt	ne
 800c810:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800c812:	3302      	addne	r3, #2
 800c814:	930b      	strne	r3, [sp, #44]	; 0x2c
 800c816:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800c81a:	9315      	str	r3, [sp, #84]	; 0x54
 800c81c:	d118      	bne.n	800c850 <_svfprintf_r+0x598>
 800c81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c822:	1a9b      	subs	r3, r3, r2
 800c824:	2b00      	cmp	r3, #0
 800c826:	930c      	str	r3, [sp, #48]	; 0x30
 800c828:	dd12      	ble.n	800c850 <_svfprintf_r+0x598>
 800c82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c82c:	2b10      	cmp	r3, #16
 800c82e:	4ba9      	ldr	r3, [pc, #676]	; (800cad4 <_svfprintf_r+0x81c>)
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	f300 81d5 	bgt.w	800cbe0 <_svfprintf_r+0x928>
 800c836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c838:	6063      	str	r3, [r4, #4]
 800c83a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c83c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c83e:	4413      	add	r3, r2
 800c840:	9321      	str	r3, [sp, #132]	; 0x84
 800c842:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c844:	3301      	adds	r3, #1
 800c846:	2b07      	cmp	r3, #7
 800c848:	9320      	str	r3, [sp, #128]	; 0x80
 800c84a:	f300 81e2 	bgt.w	800cc12 <_svfprintf_r+0x95a>
 800c84e:	3408      	adds	r4, #8
 800c850:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800c854:	b173      	cbz	r3, 800c874 <_svfprintf_r+0x5bc>
 800c856:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800c85a:	6023      	str	r3, [r4, #0]
 800c85c:	2301      	movs	r3, #1
 800c85e:	6063      	str	r3, [r4, #4]
 800c860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c862:	3301      	adds	r3, #1
 800c864:	9321      	str	r3, [sp, #132]	; 0x84
 800c866:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c868:	3301      	adds	r3, #1
 800c86a:	2b07      	cmp	r3, #7
 800c86c:	9320      	str	r3, [sp, #128]	; 0x80
 800c86e:	f300 81da 	bgt.w	800cc26 <_svfprintf_r+0x96e>
 800c872:	3408      	adds	r4, #8
 800c874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c876:	b16b      	cbz	r3, 800c894 <_svfprintf_r+0x5dc>
 800c878:	ab18      	add	r3, sp, #96	; 0x60
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	2302      	movs	r3, #2
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c882:	3302      	adds	r3, #2
 800c884:	9321      	str	r3, [sp, #132]	; 0x84
 800c886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c888:	3301      	adds	r3, #1
 800c88a:	2b07      	cmp	r3, #7
 800c88c:	9320      	str	r3, [sp, #128]	; 0x80
 800c88e:	f300 81d4 	bgt.w	800cc3a <_svfprintf_r+0x982>
 800c892:	3408      	adds	r4, #8
 800c894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c896:	2b80      	cmp	r3, #128	; 0x80
 800c898:	d114      	bne.n	800c8c4 <_svfprintf_r+0x60c>
 800c89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dd0f      	ble.n	800c8c4 <_svfprintf_r+0x60c>
 800c8a4:	4a8c      	ldr	r2, [pc, #560]	; (800cad8 <_svfprintf_r+0x820>)
 800c8a6:	6022      	str	r2, [r4, #0]
 800c8a8:	2b10      	cmp	r3, #16
 800c8aa:	f300 81d0 	bgt.w	800cc4e <_svfprintf_r+0x996>
 800c8ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	9321      	str	r3, [sp, #132]	; 0x84
 800c8b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	2b07      	cmp	r3, #7
 800c8bc:	9320      	str	r3, [sp, #128]	; 0x80
 800c8be:	f300 81df 	bgt.w	800cc80 <_svfprintf_r+0x9c8>
 800c8c2:	3408      	adds	r4, #8
 800c8c4:	eba6 0609 	sub.w	r6, r6, r9
 800c8c8:	2e00      	cmp	r6, #0
 800c8ca:	dd0f      	ble.n	800c8ec <_svfprintf_r+0x634>
 800c8cc:	4b82      	ldr	r3, [pc, #520]	; (800cad8 <_svfprintf_r+0x820>)
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	2e10      	cmp	r6, #16
 800c8d2:	f300 81df 	bgt.w	800cc94 <_svfprintf_r+0x9dc>
 800c8d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8d8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c8da:	6066      	str	r6, [r4, #4]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	4406      	add	r6, r0
 800c8e0:	2b07      	cmp	r3, #7
 800c8e2:	9621      	str	r6, [sp, #132]	; 0x84
 800c8e4:	9320      	str	r3, [sp, #128]	; 0x80
 800c8e6:	f300 81ec 	bgt.w	800ccc2 <_svfprintf_r+0xa0a>
 800c8ea:	3408      	adds	r4, #8
 800c8ec:	05eb      	lsls	r3, r5, #23
 800c8ee:	f100 81f2 	bmi.w	800ccd6 <_svfprintf_r+0xa1e>
 800c8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8f4:	e884 0300 	stmia.w	r4, {r8, r9}
 800c8f8:	444b      	add	r3, r9
 800c8fa:	9321      	str	r3, [sp, #132]	; 0x84
 800c8fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8fe:	3301      	adds	r3, #1
 800c900:	2b07      	cmp	r3, #7
 800c902:	9320      	str	r3, [sp, #128]	; 0x80
 800c904:	f340 8419 	ble.w	800d13a <_svfprintf_r+0xe82>
 800c908:	aa1f      	add	r2, sp, #124	; 0x7c
 800c90a:	4651      	mov	r1, sl
 800c90c:	4658      	mov	r0, fp
 800c90e:	f003 fb17 	bl	800ff40 <__ssprint_r>
 800c912:	2800      	cmp	r0, #0
 800c914:	f040 8431 	bne.w	800d17a <_svfprintf_r+0xec2>
 800c918:	ac2c      	add	r4, sp, #176	; 0xb0
 800c91a:	076b      	lsls	r3, r5, #29
 800c91c:	f100 8410 	bmi.w	800d140 <_svfprintf_r+0xe88>
 800c920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c926:	428a      	cmp	r2, r1
 800c928:	bfac      	ite	ge
 800c92a:	189b      	addge	r3, r3, r2
 800c92c:	185b      	addlt	r3, r3, r1
 800c92e:	9309      	str	r3, [sp, #36]	; 0x24
 800c930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c932:	b13b      	cbz	r3, 800c944 <_svfprintf_r+0x68c>
 800c934:	aa1f      	add	r2, sp, #124	; 0x7c
 800c936:	4651      	mov	r1, sl
 800c938:	4658      	mov	r0, fp
 800c93a:	f003 fb01 	bl	800ff40 <__ssprint_r>
 800c93e:	2800      	cmp	r0, #0
 800c940:	f040 841b 	bne.w	800d17a <_svfprintf_r+0xec2>
 800c944:	2300      	movs	r3, #0
 800c946:	9320      	str	r3, [sp, #128]	; 0x80
 800c948:	9f04      	ldr	r7, [sp, #16]
 800c94a:	ac2c      	add	r4, sp, #176	; 0xb0
 800c94c:	e4ee      	b.n	800c32c <_svfprintf_r+0x74>
 800c94e:	9b02      	ldr	r3, [sp, #8]
 800c950:	2b65      	cmp	r3, #101	; 0x65
 800c952:	f77f af0b 	ble.w	800c76c <_svfprintf_r+0x4b4>
 800c956:	9b02      	ldr	r3, [sp, #8]
 800c958:	2b66      	cmp	r3, #102	; 0x66
 800c95a:	d124      	bne.n	800c9a6 <_svfprintf_r+0x6ee>
 800c95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c95e:	2b00      	cmp	r3, #0
 800c960:	dd19      	ble.n	800c996 <_svfprintf_r+0x6de>
 800c962:	f1b9 0f00 	cmp.w	r9, #0
 800c966:	d101      	bne.n	800c96c <_svfprintf_r+0x6b4>
 800c968:	07ea      	lsls	r2, r5, #31
 800c96a:	d502      	bpl.n	800c972 <_svfprintf_r+0x6ba>
 800c96c:	9a08      	ldr	r2, [sp, #32]
 800c96e:	4413      	add	r3, r2
 800c970:	444b      	add	r3, r9
 800c972:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800c974:	4699      	mov	r9, r3
 800c976:	e735      	b.n	800c7e4 <_svfprintf_r+0x52c>
 800c978:	460a      	mov	r2, r1
 800c97a:	e70c      	b.n	800c796 <_svfprintf_r+0x4de>
 800c97c:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c980:	f803 1b01 	strb.w	r1, [r3], #1
 800c984:	e71c      	b.n	800c7c0 <_svfprintf_r+0x508>
 800c986:	2230      	movs	r2, #48	; 0x30
 800c988:	4413      	add	r3, r2
 800c98a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800c98e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c992:	a91c      	add	r1, sp, #112	; 0x70
 800c994:	e718      	b.n	800c7c8 <_svfprintf_r+0x510>
 800c996:	f1b9 0f00 	cmp.w	r9, #0
 800c99a:	d101      	bne.n	800c9a0 <_svfprintf_r+0x6e8>
 800c99c:	07eb      	lsls	r3, r5, #31
 800c99e:	d515      	bpl.n	800c9cc <_svfprintf_r+0x714>
 800c9a0:	9b08      	ldr	r3, [sp, #32]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	e7e4      	b.n	800c970 <_svfprintf_r+0x6b8>
 800c9a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	db06      	blt.n	800c9bc <_svfprintf_r+0x704>
 800c9ae:	07ef      	lsls	r7, r5, #31
 800c9b0:	d50e      	bpl.n	800c9d0 <_svfprintf_r+0x718>
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	2267      	movs	r2, #103	; 0x67
 800c9b8:	9202      	str	r2, [sp, #8]
 800c9ba:	e7da      	b.n	800c972 <_svfprintf_r+0x6ba>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	9908      	ldr	r1, [sp, #32]
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	440b      	add	r3, r1
 800c9c4:	dcf7      	bgt.n	800c9b6 <_svfprintf_r+0x6fe>
 800c9c6:	f1c2 0201 	rsb	r2, r2, #1
 800c9ca:	e7f3      	b.n	800c9b4 <_svfprintf_r+0x6fc>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e7d0      	b.n	800c972 <_svfprintf_r+0x6ba>
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	e7f0      	b.n	800c9b6 <_svfprintf_r+0x6fe>
 800c9d4:	b10b      	cbz	r3, 800c9da <_svfprintf_r+0x722>
 800c9d6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800c9da:	f015 0f20 	tst.w	r5, #32
 800c9de:	f107 0304 	add.w	r3, r7, #4
 800c9e2:	d008      	beq.n	800c9f6 <_svfprintf_r+0x73e>
 800c9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	17ce      	asrs	r6, r1, #31
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	e9c2 0100 	strd	r0, r1, [r2]
 800c9f2:	461f      	mov	r7, r3
 800c9f4:	e49a      	b.n	800c32c <_svfprintf_r+0x74>
 800c9f6:	06ee      	lsls	r6, r5, #27
 800c9f8:	d503      	bpl.n	800ca02 <_svfprintf_r+0x74a>
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9fe:	6011      	str	r1, [r2, #0]
 800ca00:	e7f7      	b.n	800c9f2 <_svfprintf_r+0x73a>
 800ca02:	0668      	lsls	r0, r5, #25
 800ca04:	d5f9      	bpl.n	800c9fa <_svfprintf_r+0x742>
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800ca0c:	8011      	strh	r1, [r2, #0]
 800ca0e:	e7f0      	b.n	800c9f2 <_svfprintf_r+0x73a>
 800ca10:	f045 0510 	orr.w	r5, r5, #16
 800ca14:	f015 0320 	ands.w	r3, r5, #32
 800ca18:	d022      	beq.n	800ca60 <_svfprintf_r+0x7a8>
 800ca1a:	3707      	adds	r7, #7
 800ca1c:	f027 0707 	bic.w	r7, r7, #7
 800ca20:	f107 0308 	add.w	r3, r7, #8
 800ca24:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800ca32:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ca36:	f000 83db 	beq.w	800d1f0 <_svfprintf_r+0xf38>
 800ca3a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800ca3e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca40:	ea56 0207 	orrs.w	r2, r6, r7
 800ca44:	f040 83d9 	bne.w	800d1fa <_svfprintf_r+0xf42>
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	f000 80aa 	beq.w	800cba4 <_svfprintf_r+0x8ec>
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d076      	beq.n	800cb42 <_svfprintf_r+0x88a>
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	f000 8091 	beq.w	800cb7c <_svfprintf_r+0x8c4>
 800ca5a:	2600      	movs	r6, #0
 800ca5c:	2700      	movs	r7, #0
 800ca5e:	e3d2      	b.n	800d206 <_svfprintf_r+0xf4e>
 800ca60:	1d3a      	adds	r2, r7, #4
 800ca62:	f015 0110 	ands.w	r1, r5, #16
 800ca66:	9204      	str	r2, [sp, #16]
 800ca68:	d002      	beq.n	800ca70 <_svfprintf_r+0x7b8>
 800ca6a:	683e      	ldr	r6, [r7, #0]
 800ca6c:	2700      	movs	r7, #0
 800ca6e:	e7dd      	b.n	800ca2c <_svfprintf_r+0x774>
 800ca70:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800ca74:	d0f9      	beq.n	800ca6a <_svfprintf_r+0x7b2>
 800ca76:	883e      	ldrh	r6, [r7, #0]
 800ca78:	2700      	movs	r7, #0
 800ca7a:	e7d6      	b.n	800ca2a <_svfprintf_r+0x772>
 800ca7c:	1d3b      	adds	r3, r7, #4
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	2330      	movs	r3, #48	; 0x30
 800ca82:	2278      	movs	r2, #120	; 0x78
 800ca84:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ca88:	4b14      	ldr	r3, [pc, #80]	; (800cadc <_svfprintf_r+0x824>)
 800ca8a:	683e      	ldr	r6, [r7, #0]
 800ca8c:	9311      	str	r3, [sp, #68]	; 0x44
 800ca8e:	2700      	movs	r7, #0
 800ca90:	f045 0502 	orr.w	r5, r5, #2
 800ca94:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800ca98:	2302      	movs	r3, #2
 800ca9a:	9202      	str	r2, [sp, #8]
 800ca9c:	e7c6      	b.n	800ca2c <_svfprintf_r+0x774>
 800ca9e:	1d3b      	adds	r3, r7, #4
 800caa0:	2600      	movs	r6, #0
 800caa2:	f1b9 3fff 	cmp.w	r9, #4294967295
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	f8d7 8000 	ldr.w	r8, [r7]
 800caac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800cab0:	d00a      	beq.n	800cac8 <_svfprintf_r+0x810>
 800cab2:	464a      	mov	r2, r9
 800cab4:	4631      	mov	r1, r6
 800cab6:	4640      	mov	r0, r8
 800cab8:	f7f3 fba2 	bl	8000200 <memchr>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f000 808d 	beq.w	800cbdc <_svfprintf_r+0x924>
 800cac2:	eba0 0908 	sub.w	r9, r0, r8
 800cac6:	e5cb      	b.n	800c660 <_svfprintf_r+0x3a8>
 800cac8:	4640      	mov	r0, r8
 800caca:	f7f3 fb8b 	bl	80001e4 <strlen>
 800cace:	4681      	mov	r9, r0
 800cad0:	e5c6      	b.n	800c660 <_svfprintf_r+0x3a8>
 800cad2:	bf00      	nop
 800cad4:	080108f6 	.word	0x080108f6
 800cad8:	08010906 	.word	0x08010906
 800cadc:	080108e3 	.word	0x080108e3
 800cae0:	f045 0510 	orr.w	r5, r5, #16
 800cae4:	06a9      	lsls	r1, r5, #26
 800cae6:	d509      	bpl.n	800cafc <_svfprintf_r+0x844>
 800cae8:	3707      	adds	r7, #7
 800caea:	f027 0707 	bic.w	r7, r7, #7
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	e9d7 6700 	ldrd	r6, r7, [r7]
 800caf6:	9304      	str	r3, [sp, #16]
 800caf8:	2301      	movs	r3, #1
 800cafa:	e797      	b.n	800ca2c <_svfprintf_r+0x774>
 800cafc:	1d3b      	adds	r3, r7, #4
 800cafe:	f015 0f10 	tst.w	r5, #16
 800cb02:	9304      	str	r3, [sp, #16]
 800cb04:	d001      	beq.n	800cb0a <_svfprintf_r+0x852>
 800cb06:	683e      	ldr	r6, [r7, #0]
 800cb08:	e002      	b.n	800cb10 <_svfprintf_r+0x858>
 800cb0a:	066a      	lsls	r2, r5, #25
 800cb0c:	d5fb      	bpl.n	800cb06 <_svfprintf_r+0x84e>
 800cb0e:	883e      	ldrh	r6, [r7, #0]
 800cb10:	2700      	movs	r7, #0
 800cb12:	e7f1      	b.n	800caf8 <_svfprintf_r+0x840>
 800cb14:	b10b      	cbz	r3, 800cb1a <_svfprintf_r+0x862>
 800cb16:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800cb1a:	4ba3      	ldr	r3, [pc, #652]	; (800cda8 <_svfprintf_r+0xaf0>)
 800cb1c:	e4c2      	b.n	800c4a4 <_svfprintf_r+0x1ec>
 800cb1e:	1d3b      	adds	r3, r7, #4
 800cb20:	f015 0f10 	tst.w	r5, #16
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	d001      	beq.n	800cb2c <_svfprintf_r+0x874>
 800cb28:	683e      	ldr	r6, [r7, #0]
 800cb2a:	e002      	b.n	800cb32 <_svfprintf_r+0x87a>
 800cb2c:	066e      	lsls	r6, r5, #25
 800cb2e:	d5fb      	bpl.n	800cb28 <_svfprintf_r+0x870>
 800cb30:	883e      	ldrh	r6, [r7, #0]
 800cb32:	2700      	movs	r7, #0
 800cb34:	e4c2      	b.n	800c4bc <_svfprintf_r+0x204>
 800cb36:	4643      	mov	r3, r8
 800cb38:	e366      	b.n	800d208 <_svfprintf_r+0xf50>
 800cb3a:	2f00      	cmp	r7, #0
 800cb3c:	bf08      	it	eq
 800cb3e:	2e0a      	cmpeq	r6, #10
 800cb40:	d205      	bcs.n	800cb4e <_svfprintf_r+0x896>
 800cb42:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800cb46:	3630      	adds	r6, #48	; 0x30
 800cb48:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800cb4c:	e377      	b.n	800d23e <_svfprintf_r+0xf86>
 800cb4e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800cb52:	4630      	mov	r0, r6
 800cb54:	4639      	mov	r1, r7
 800cb56:	220a      	movs	r2, #10
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f7f4 f851 	bl	8000c00 <__aeabi_uldivmod>
 800cb5e:	3230      	adds	r2, #48	; 0x30
 800cb60:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800cb64:	2300      	movs	r3, #0
 800cb66:	4630      	mov	r0, r6
 800cb68:	4639      	mov	r1, r7
 800cb6a:	220a      	movs	r2, #10
 800cb6c:	f7f4 f848 	bl	8000c00 <__aeabi_uldivmod>
 800cb70:	4606      	mov	r6, r0
 800cb72:	460f      	mov	r7, r1
 800cb74:	ea56 0307 	orrs.w	r3, r6, r7
 800cb78:	d1eb      	bne.n	800cb52 <_svfprintf_r+0x89a>
 800cb7a:	e360      	b.n	800d23e <_svfprintf_r+0xf86>
 800cb7c:	2600      	movs	r6, #0
 800cb7e:	2700      	movs	r7, #0
 800cb80:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800cb84:	f006 030f 	and.w	r3, r6, #15
 800cb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb8a:	5cd3      	ldrb	r3, [r2, r3]
 800cb8c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800cb90:	0933      	lsrs	r3, r6, #4
 800cb92:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800cb96:	093a      	lsrs	r2, r7, #4
 800cb98:	461e      	mov	r6, r3
 800cb9a:	4617      	mov	r7, r2
 800cb9c:	ea56 0307 	orrs.w	r3, r6, r7
 800cba0:	d1f0      	bne.n	800cb84 <_svfprintf_r+0x8cc>
 800cba2:	e34c      	b.n	800d23e <_svfprintf_r+0xf86>
 800cba4:	b93b      	cbnz	r3, 800cbb6 <_svfprintf_r+0x8fe>
 800cba6:	07ea      	lsls	r2, r5, #31
 800cba8:	d505      	bpl.n	800cbb6 <_svfprintf_r+0x8fe>
 800cbaa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800cbae:	2330      	movs	r3, #48	; 0x30
 800cbb0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800cbb4:	e343      	b.n	800d23e <_svfprintf_r+0xf86>
 800cbb6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800cbba:	e340      	b.n	800d23e <_svfprintf_r+0xf86>
 800cbbc:	b10b      	cbz	r3, 800cbc2 <_svfprintf_r+0x90a>
 800cbbe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800cbc2:	9b02      	ldr	r3, [sp, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 82f7 	beq.w	800d1b8 <_svfprintf_r+0xf00>
 800cbca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cbce:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800cbd2:	2600      	movs	r6, #0
 800cbd4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800cbd8:	9704      	str	r7, [sp, #16]
 800cbda:	e4e8      	b.n	800c5ae <_svfprintf_r+0x2f6>
 800cbdc:	4606      	mov	r6, r0
 800cbde:	e53f      	b.n	800c660 <_svfprintf_r+0x3a8>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbe6:	3310      	adds	r3, #16
 800cbe8:	9321      	str	r3, [sp, #132]	; 0x84
 800cbea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cbec:	3301      	adds	r3, #1
 800cbee:	2b07      	cmp	r3, #7
 800cbf0:	9320      	str	r3, [sp, #128]	; 0x80
 800cbf2:	dc04      	bgt.n	800cbfe <_svfprintf_r+0x946>
 800cbf4:	3408      	adds	r4, #8
 800cbf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbf8:	3b10      	subs	r3, #16
 800cbfa:	930c      	str	r3, [sp, #48]	; 0x30
 800cbfc:	e615      	b.n	800c82a <_svfprintf_r+0x572>
 800cbfe:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc00:	4651      	mov	r1, sl
 800cc02:	4658      	mov	r0, fp
 800cc04:	f003 f99c 	bl	800ff40 <__ssprint_r>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f040 82b6 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc0e:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc10:	e7f1      	b.n	800cbf6 <_svfprintf_r+0x93e>
 800cc12:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc14:	4651      	mov	r1, sl
 800cc16:	4658      	mov	r0, fp
 800cc18:	f003 f992 	bl	800ff40 <__ssprint_r>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	f040 82ac 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc22:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc24:	e614      	b.n	800c850 <_svfprintf_r+0x598>
 800cc26:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc28:	4651      	mov	r1, sl
 800cc2a:	4658      	mov	r0, fp
 800cc2c:	f003 f988 	bl	800ff40 <__ssprint_r>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	f040 82a2 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc36:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc38:	e61c      	b.n	800c874 <_svfprintf_r+0x5bc>
 800cc3a:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc3c:	4651      	mov	r1, sl
 800cc3e:	4658      	mov	r0, fp
 800cc40:	f003 f97e 	bl	800ff40 <__ssprint_r>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f040 8298 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc4a:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc4c:	e622      	b.n	800c894 <_svfprintf_r+0x5dc>
 800cc4e:	2210      	movs	r2, #16
 800cc50:	6062      	str	r2, [r4, #4]
 800cc52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc54:	3210      	adds	r2, #16
 800cc56:	9221      	str	r2, [sp, #132]	; 0x84
 800cc58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc5a:	3201      	adds	r2, #1
 800cc5c:	2a07      	cmp	r2, #7
 800cc5e:	9220      	str	r2, [sp, #128]	; 0x80
 800cc60:	dc02      	bgt.n	800cc68 <_svfprintf_r+0x9b0>
 800cc62:	3408      	adds	r4, #8
 800cc64:	3b10      	subs	r3, #16
 800cc66:	e61d      	b.n	800c8a4 <_svfprintf_r+0x5ec>
 800cc68:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc6a:	4651      	mov	r1, sl
 800cc6c:	4658      	mov	r0, fp
 800cc6e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc70:	f003 f966 	bl	800ff40 <__ssprint_r>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	f040 8280 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc7a:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc7e:	e7f1      	b.n	800cc64 <_svfprintf_r+0x9ac>
 800cc80:	aa1f      	add	r2, sp, #124	; 0x7c
 800cc82:	4651      	mov	r1, sl
 800cc84:	4658      	mov	r0, fp
 800cc86:	f003 f95b 	bl	800ff40 <__ssprint_r>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f040 8275 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cc90:	ac2c      	add	r4, sp, #176	; 0xb0
 800cc92:	e617      	b.n	800c8c4 <_svfprintf_r+0x60c>
 800cc94:	2310      	movs	r3, #16
 800cc96:	6063      	str	r3, [r4, #4]
 800cc98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc9a:	3310      	adds	r3, #16
 800cc9c:	9321      	str	r3, [sp, #132]	; 0x84
 800cc9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cca0:	3301      	adds	r3, #1
 800cca2:	2b07      	cmp	r3, #7
 800cca4:	9320      	str	r3, [sp, #128]	; 0x80
 800cca6:	dc02      	bgt.n	800ccae <_svfprintf_r+0x9f6>
 800cca8:	3408      	adds	r4, #8
 800ccaa:	3e10      	subs	r6, #16
 800ccac:	e60e      	b.n	800c8cc <_svfprintf_r+0x614>
 800ccae:	aa1f      	add	r2, sp, #124	; 0x7c
 800ccb0:	4651      	mov	r1, sl
 800ccb2:	4658      	mov	r0, fp
 800ccb4:	f003 f944 	bl	800ff40 <__ssprint_r>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	f040 825e 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ccbe:	ac2c      	add	r4, sp, #176	; 0xb0
 800ccc0:	e7f3      	b.n	800ccaa <_svfprintf_r+0x9f2>
 800ccc2:	aa1f      	add	r2, sp, #124	; 0x7c
 800ccc4:	4651      	mov	r1, sl
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	f003 f93a 	bl	800ff40 <__ssprint_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f040 8254 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ccd2:	ac2c      	add	r4, sp, #176	; 0xb0
 800ccd4:	e60a      	b.n	800c8ec <_svfprintf_r+0x634>
 800ccd6:	9b02      	ldr	r3, [sp, #8]
 800ccd8:	2b65      	cmp	r3, #101	; 0x65
 800ccda:	f340 81a9 	ble.w	800d030 <_svfprintf_r+0xd78>
 800ccde:	2200      	movs	r2, #0
 800cce0:	2300      	movs	r3, #0
 800cce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cce6:	f7f3 fefb 	bl	8000ae0 <__aeabi_dcmpeq>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d062      	beq.n	800cdb4 <_svfprintf_r+0xafc>
 800ccee:	4b2f      	ldr	r3, [pc, #188]	; (800cdac <_svfprintf_r+0xaf4>)
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	9321      	str	r3, [sp, #132]	; 0x84
 800ccfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccfe:	3301      	adds	r3, #1
 800cd00:	2b07      	cmp	r3, #7
 800cd02:	9320      	str	r3, [sp, #128]	; 0x80
 800cd04:	dc25      	bgt.n	800cd52 <_svfprintf_r+0xa9a>
 800cd06:	3408      	adds	r4, #8
 800cd08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd0a:	9a03      	ldr	r2, [sp, #12]
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	db02      	blt.n	800cd16 <_svfprintf_r+0xa5e>
 800cd10:	07ee      	lsls	r6, r5, #31
 800cd12:	f57f ae02 	bpl.w	800c91a <_svfprintf_r+0x662>
 800cd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	9b08      	ldr	r3, [sp, #32]
 800cd1c:	6063      	str	r3, [r4, #4]
 800cd1e:	9a08      	ldr	r2, [sp, #32]
 800cd20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd22:	4413      	add	r3, r2
 800cd24:	9321      	str	r3, [sp, #132]	; 0x84
 800cd26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd28:	3301      	adds	r3, #1
 800cd2a:	2b07      	cmp	r3, #7
 800cd2c:	9320      	str	r3, [sp, #128]	; 0x80
 800cd2e:	dc1a      	bgt.n	800cd66 <_svfprintf_r+0xaae>
 800cd30:	3408      	adds	r4, #8
 800cd32:	9b03      	ldr	r3, [sp, #12]
 800cd34:	1e5e      	subs	r6, r3, #1
 800cd36:	2e00      	cmp	r6, #0
 800cd38:	f77f adef 	ble.w	800c91a <_svfprintf_r+0x662>
 800cd3c:	4f1c      	ldr	r7, [pc, #112]	; (800cdb0 <_svfprintf_r+0xaf8>)
 800cd3e:	f04f 0810 	mov.w	r8, #16
 800cd42:	2e10      	cmp	r6, #16
 800cd44:	6027      	str	r7, [r4, #0]
 800cd46:	dc18      	bgt.n	800cd7a <_svfprintf_r+0xac2>
 800cd48:	6066      	str	r6, [r4, #4]
 800cd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd4c:	441e      	add	r6, r3
 800cd4e:	9621      	str	r6, [sp, #132]	; 0x84
 800cd50:	e5d4      	b.n	800c8fc <_svfprintf_r+0x644>
 800cd52:	aa1f      	add	r2, sp, #124	; 0x7c
 800cd54:	4651      	mov	r1, sl
 800cd56:	4658      	mov	r0, fp
 800cd58:	f003 f8f2 	bl	800ff40 <__ssprint_r>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	f040 820c 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cd62:	ac2c      	add	r4, sp, #176	; 0xb0
 800cd64:	e7d0      	b.n	800cd08 <_svfprintf_r+0xa50>
 800cd66:	aa1f      	add	r2, sp, #124	; 0x7c
 800cd68:	4651      	mov	r1, sl
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f003 f8e8 	bl	800ff40 <__ssprint_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f040 8202 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cd76:	ac2c      	add	r4, sp, #176	; 0xb0
 800cd78:	e7db      	b.n	800cd32 <_svfprintf_r+0xa7a>
 800cd7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd7c:	f8c4 8004 	str.w	r8, [r4, #4]
 800cd80:	3310      	adds	r3, #16
 800cd82:	9321      	str	r3, [sp, #132]	; 0x84
 800cd84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd86:	3301      	adds	r3, #1
 800cd88:	2b07      	cmp	r3, #7
 800cd8a:	9320      	str	r3, [sp, #128]	; 0x80
 800cd8c:	dc02      	bgt.n	800cd94 <_svfprintf_r+0xadc>
 800cd8e:	3408      	adds	r4, #8
 800cd90:	3e10      	subs	r6, #16
 800cd92:	e7d6      	b.n	800cd42 <_svfprintf_r+0xa8a>
 800cd94:	aa1f      	add	r2, sp, #124	; 0x7c
 800cd96:	4651      	mov	r1, sl
 800cd98:	4658      	mov	r0, fp
 800cd9a:	f003 f8d1 	bl	800ff40 <__ssprint_r>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f040 81eb 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cda4:	ac2c      	add	r4, sp, #176	; 0xb0
 800cda6:	e7f3      	b.n	800cd90 <_svfprintf_r+0xad8>
 800cda8:	080108e3 	.word	0x080108e3
 800cdac:	080108f4 	.word	0x080108f4
 800cdb0:	08010906 	.word	0x08010906
 800cdb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	dc7a      	bgt.n	800ceb0 <_svfprintf_r+0xbf8>
 800cdba:	4b9b      	ldr	r3, [pc, #620]	; (800d028 <_svfprintf_r+0xd70>)
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	6063      	str	r3, [r4, #4]
 800cdc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	9321      	str	r3, [sp, #132]	; 0x84
 800cdc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cdca:	3301      	adds	r3, #1
 800cdcc:	2b07      	cmp	r3, #7
 800cdce:	9320      	str	r3, [sp, #128]	; 0x80
 800cdd0:	dc44      	bgt.n	800ce5c <_svfprintf_r+0xba4>
 800cdd2:	3408      	adds	r4, #8
 800cdd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdd6:	b923      	cbnz	r3, 800cde2 <_svfprintf_r+0xb2a>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	b913      	cbnz	r3, 800cde2 <_svfprintf_r+0xb2a>
 800cddc:	07e8      	lsls	r0, r5, #31
 800cdde:	f57f ad9c 	bpl.w	800c91a <_svfprintf_r+0x662>
 800cde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	6063      	str	r3, [r4, #4]
 800cdea:	9a08      	ldr	r2, [sp, #32]
 800cdec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdee:	4413      	add	r3, r2
 800cdf0:	9321      	str	r3, [sp, #132]	; 0x84
 800cdf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	2b07      	cmp	r3, #7
 800cdf8:	9320      	str	r3, [sp, #128]	; 0x80
 800cdfa:	dc39      	bgt.n	800ce70 <_svfprintf_r+0xbb8>
 800cdfc:	f104 0308 	add.w	r3, r4, #8
 800ce00:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ce02:	2e00      	cmp	r6, #0
 800ce04:	da19      	bge.n	800ce3a <_svfprintf_r+0xb82>
 800ce06:	4f89      	ldr	r7, [pc, #548]	; (800d02c <_svfprintf_r+0xd74>)
 800ce08:	4276      	negs	r6, r6
 800ce0a:	2410      	movs	r4, #16
 800ce0c:	2e10      	cmp	r6, #16
 800ce0e:	601f      	str	r7, [r3, #0]
 800ce10:	dc38      	bgt.n	800ce84 <_svfprintf_r+0xbcc>
 800ce12:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce14:	605e      	str	r6, [r3, #4]
 800ce16:	4416      	add	r6, r2
 800ce18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce1a:	9621      	str	r6, [sp, #132]	; 0x84
 800ce1c:	3201      	adds	r2, #1
 800ce1e:	2a07      	cmp	r2, #7
 800ce20:	f103 0308 	add.w	r3, r3, #8
 800ce24:	9220      	str	r2, [sp, #128]	; 0x80
 800ce26:	dd08      	ble.n	800ce3a <_svfprintf_r+0xb82>
 800ce28:	aa1f      	add	r2, sp, #124	; 0x7c
 800ce2a:	4651      	mov	r1, sl
 800ce2c:	4658      	mov	r0, fp
 800ce2e:	f003 f887 	bl	800ff40 <__ssprint_r>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	f040 81a1 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ce38:	ab2c      	add	r3, sp, #176	; 0xb0
 800ce3a:	9a03      	ldr	r2, [sp, #12]
 800ce3c:	605a      	str	r2, [r3, #4]
 800ce3e:	9903      	ldr	r1, [sp, #12]
 800ce40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce42:	f8c3 8000 	str.w	r8, [r3]
 800ce46:	440a      	add	r2, r1
 800ce48:	9221      	str	r2, [sp, #132]	; 0x84
 800ce4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce4c:	3201      	adds	r2, #1
 800ce4e:	2a07      	cmp	r2, #7
 800ce50:	9220      	str	r2, [sp, #128]	; 0x80
 800ce52:	f73f ad59 	bgt.w	800c908 <_svfprintf_r+0x650>
 800ce56:	f103 0408 	add.w	r4, r3, #8
 800ce5a:	e55e      	b.n	800c91a <_svfprintf_r+0x662>
 800ce5c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ce5e:	4651      	mov	r1, sl
 800ce60:	4658      	mov	r0, fp
 800ce62:	f003 f86d 	bl	800ff40 <__ssprint_r>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f040 8187 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ce6c:	ac2c      	add	r4, sp, #176	; 0xb0
 800ce6e:	e7b1      	b.n	800cdd4 <_svfprintf_r+0xb1c>
 800ce70:	aa1f      	add	r2, sp, #124	; 0x7c
 800ce72:	4651      	mov	r1, sl
 800ce74:	4658      	mov	r0, fp
 800ce76:	f003 f863 	bl	800ff40 <__ssprint_r>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	f040 817d 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ce80:	ab2c      	add	r3, sp, #176	; 0xb0
 800ce82:	e7bd      	b.n	800ce00 <_svfprintf_r+0xb48>
 800ce84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce86:	605c      	str	r4, [r3, #4]
 800ce88:	3210      	adds	r2, #16
 800ce8a:	9221      	str	r2, [sp, #132]	; 0x84
 800ce8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce8e:	3201      	adds	r2, #1
 800ce90:	2a07      	cmp	r2, #7
 800ce92:	9220      	str	r2, [sp, #128]	; 0x80
 800ce94:	dc02      	bgt.n	800ce9c <_svfprintf_r+0xbe4>
 800ce96:	3308      	adds	r3, #8
 800ce98:	3e10      	subs	r6, #16
 800ce9a:	e7b7      	b.n	800ce0c <_svfprintf_r+0xb54>
 800ce9c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ce9e:	4651      	mov	r1, sl
 800cea0:	4658      	mov	r0, fp
 800cea2:	f003 f84d 	bl	800ff40 <__ssprint_r>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f040 8167 	bne.w	800d17a <_svfprintf_r+0xec2>
 800ceac:	ab2c      	add	r3, sp, #176	; 0xb0
 800ceae:	e7f3      	b.n	800ce98 <_svfprintf_r+0xbe0>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	bfa8      	it	ge
 800ceb6:	463b      	movge	r3, r7
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	461e      	mov	r6, r3
 800cebc:	dd0b      	ble.n	800ced6 <_svfprintf_r+0xc1e>
 800cebe:	6063      	str	r3, [r4, #4]
 800cec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cec2:	f8c4 8000 	str.w	r8, [r4]
 800cec6:	4433      	add	r3, r6
 800cec8:	9321      	str	r3, [sp, #132]	; 0x84
 800ceca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cecc:	3301      	adds	r3, #1
 800cece:	2b07      	cmp	r3, #7
 800ced0:	9320      	str	r3, [sp, #128]	; 0x80
 800ced2:	dc5f      	bgt.n	800cf94 <_svfprintf_r+0xcdc>
 800ced4:	3408      	adds	r4, #8
 800ced6:	2e00      	cmp	r6, #0
 800ced8:	bfac      	ite	ge
 800ceda:	1bbe      	subge	r6, r7, r6
 800cedc:	463e      	movlt	r6, r7
 800cede:	2e00      	cmp	r6, #0
 800cee0:	dd0f      	ble.n	800cf02 <_svfprintf_r+0xc4a>
 800cee2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800d02c <_svfprintf_r+0xd74>
 800cee6:	f8c4 9000 	str.w	r9, [r4]
 800ceea:	2e10      	cmp	r6, #16
 800ceec:	dc5c      	bgt.n	800cfa8 <_svfprintf_r+0xcf0>
 800ceee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cef0:	6066      	str	r6, [r4, #4]
 800cef2:	441e      	add	r6, r3
 800cef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cef6:	9621      	str	r6, [sp, #132]	; 0x84
 800cef8:	3301      	adds	r3, #1
 800cefa:	2b07      	cmp	r3, #7
 800cefc:	9320      	str	r3, [sp, #128]	; 0x80
 800cefe:	dc6a      	bgt.n	800cfd6 <_svfprintf_r+0xd1e>
 800cf00:	3408      	adds	r4, #8
 800cf02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf04:	9a03      	ldr	r2, [sp, #12]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	db01      	blt.n	800cf0e <_svfprintf_r+0xc56>
 800cf0a:	07e9      	lsls	r1, r5, #31
 800cf0c:	d50d      	bpl.n	800cf2a <_svfprintf_r+0xc72>
 800cf0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	9b08      	ldr	r3, [sp, #32]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	9a08      	ldr	r2, [sp, #32]
 800cf18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf1a:	4413      	add	r3, r2
 800cf1c:	9321      	str	r3, [sp, #132]	; 0x84
 800cf1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf20:	3301      	adds	r3, #1
 800cf22:	2b07      	cmp	r3, #7
 800cf24:	9320      	str	r3, [sp, #128]	; 0x80
 800cf26:	dc60      	bgt.n	800cfea <_svfprintf_r+0xd32>
 800cf28:	3408      	adds	r4, #8
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	9a03      	ldr	r2, [sp, #12]
 800cf2e:	1bde      	subs	r6, r3, r7
 800cf30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	429e      	cmp	r6, r3
 800cf36:	bfa8      	it	ge
 800cf38:	461e      	movge	r6, r3
 800cf3a:	2e00      	cmp	r6, #0
 800cf3c:	dd0b      	ble.n	800cf56 <_svfprintf_r+0xc9e>
 800cf3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf40:	6066      	str	r6, [r4, #4]
 800cf42:	4433      	add	r3, r6
 800cf44:	9321      	str	r3, [sp, #132]	; 0x84
 800cf46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf48:	3301      	adds	r3, #1
 800cf4a:	4447      	add	r7, r8
 800cf4c:	2b07      	cmp	r3, #7
 800cf4e:	6027      	str	r7, [r4, #0]
 800cf50:	9320      	str	r3, [sp, #128]	; 0x80
 800cf52:	dc54      	bgt.n	800cffe <_svfprintf_r+0xd46>
 800cf54:	3408      	adds	r4, #8
 800cf56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf58:	9a03      	ldr	r2, [sp, #12]
 800cf5a:	2e00      	cmp	r6, #0
 800cf5c:	eba2 0303 	sub.w	r3, r2, r3
 800cf60:	bfac      	ite	ge
 800cf62:	1b9e      	subge	r6, r3, r6
 800cf64:	461e      	movlt	r6, r3
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	f77f acd7 	ble.w	800c91a <_svfprintf_r+0x662>
 800cf6c:	4f2f      	ldr	r7, [pc, #188]	; (800d02c <_svfprintf_r+0xd74>)
 800cf6e:	f04f 0810 	mov.w	r8, #16
 800cf72:	2e10      	cmp	r6, #16
 800cf74:	6027      	str	r7, [r4, #0]
 800cf76:	f77f aee7 	ble.w	800cd48 <_svfprintf_r+0xa90>
 800cf7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf7c:	f8c4 8004 	str.w	r8, [r4, #4]
 800cf80:	3310      	adds	r3, #16
 800cf82:	9321      	str	r3, [sp, #132]	; 0x84
 800cf84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf86:	3301      	adds	r3, #1
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	9320      	str	r3, [sp, #128]	; 0x80
 800cf8c:	dc41      	bgt.n	800d012 <_svfprintf_r+0xd5a>
 800cf8e:	3408      	adds	r4, #8
 800cf90:	3e10      	subs	r6, #16
 800cf92:	e7ee      	b.n	800cf72 <_svfprintf_r+0xcba>
 800cf94:	aa1f      	add	r2, sp, #124	; 0x7c
 800cf96:	4651      	mov	r1, sl
 800cf98:	4658      	mov	r0, fp
 800cf9a:	f002 ffd1 	bl	800ff40 <__ssprint_r>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f040 80eb 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cfa4:	ac2c      	add	r4, sp, #176	; 0xb0
 800cfa6:	e796      	b.n	800ced6 <_svfprintf_r+0xc1e>
 800cfa8:	2310      	movs	r3, #16
 800cfaa:	6063      	str	r3, [r4, #4]
 800cfac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfae:	3310      	adds	r3, #16
 800cfb0:	9321      	str	r3, [sp, #132]	; 0x84
 800cfb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	2b07      	cmp	r3, #7
 800cfb8:	9320      	str	r3, [sp, #128]	; 0x80
 800cfba:	dc02      	bgt.n	800cfc2 <_svfprintf_r+0xd0a>
 800cfbc:	3408      	adds	r4, #8
 800cfbe:	3e10      	subs	r6, #16
 800cfc0:	e791      	b.n	800cee6 <_svfprintf_r+0xc2e>
 800cfc2:	aa1f      	add	r2, sp, #124	; 0x7c
 800cfc4:	4651      	mov	r1, sl
 800cfc6:	4658      	mov	r0, fp
 800cfc8:	f002 ffba 	bl	800ff40 <__ssprint_r>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f040 80d4 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cfd2:	ac2c      	add	r4, sp, #176	; 0xb0
 800cfd4:	e7f3      	b.n	800cfbe <_svfprintf_r+0xd06>
 800cfd6:	aa1f      	add	r2, sp, #124	; 0x7c
 800cfd8:	4651      	mov	r1, sl
 800cfda:	4658      	mov	r0, fp
 800cfdc:	f002 ffb0 	bl	800ff40 <__ssprint_r>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	f040 80ca 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cfe6:	ac2c      	add	r4, sp, #176	; 0xb0
 800cfe8:	e78b      	b.n	800cf02 <_svfprintf_r+0xc4a>
 800cfea:	aa1f      	add	r2, sp, #124	; 0x7c
 800cfec:	4651      	mov	r1, sl
 800cfee:	4658      	mov	r0, fp
 800cff0:	f002 ffa6 	bl	800ff40 <__ssprint_r>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	f040 80c0 	bne.w	800d17a <_svfprintf_r+0xec2>
 800cffa:	ac2c      	add	r4, sp, #176	; 0xb0
 800cffc:	e795      	b.n	800cf2a <_svfprintf_r+0xc72>
 800cffe:	aa1f      	add	r2, sp, #124	; 0x7c
 800d000:	4651      	mov	r1, sl
 800d002:	4658      	mov	r0, fp
 800d004:	f002 ff9c 	bl	800ff40 <__ssprint_r>
 800d008:	2800      	cmp	r0, #0
 800d00a:	f040 80b6 	bne.w	800d17a <_svfprintf_r+0xec2>
 800d00e:	ac2c      	add	r4, sp, #176	; 0xb0
 800d010:	e7a1      	b.n	800cf56 <_svfprintf_r+0xc9e>
 800d012:	aa1f      	add	r2, sp, #124	; 0x7c
 800d014:	4651      	mov	r1, sl
 800d016:	4658      	mov	r0, fp
 800d018:	f002 ff92 	bl	800ff40 <__ssprint_r>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f040 80ac 	bne.w	800d17a <_svfprintf_r+0xec2>
 800d022:	ac2c      	add	r4, sp, #176	; 0xb0
 800d024:	e7b4      	b.n	800cf90 <_svfprintf_r+0xcd8>
 800d026:	bf00      	nop
 800d028:	080108f4 	.word	0x080108f4
 800d02c:	08010906 	.word	0x08010906
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	2b01      	cmp	r3, #1
 800d034:	dc01      	bgt.n	800d03a <_svfprintf_r+0xd82>
 800d036:	07ea      	lsls	r2, r5, #31
 800d038:	d576      	bpl.n	800d128 <_svfprintf_r+0xe70>
 800d03a:	2301      	movs	r3, #1
 800d03c:	6063      	str	r3, [r4, #4]
 800d03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d040:	f8c4 8000 	str.w	r8, [r4]
 800d044:	3301      	adds	r3, #1
 800d046:	9321      	str	r3, [sp, #132]	; 0x84
 800d048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d04a:	3301      	adds	r3, #1
 800d04c:	2b07      	cmp	r3, #7
 800d04e:	9320      	str	r3, [sp, #128]	; 0x80
 800d050:	dc36      	bgt.n	800d0c0 <_svfprintf_r+0xe08>
 800d052:	3408      	adds	r4, #8
 800d054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d056:	6023      	str	r3, [r4, #0]
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	9a08      	ldr	r2, [sp, #32]
 800d05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d060:	4413      	add	r3, r2
 800d062:	9321      	str	r3, [sp, #132]	; 0x84
 800d064:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d066:	3301      	adds	r3, #1
 800d068:	2b07      	cmp	r3, #7
 800d06a:	9320      	str	r3, [sp, #128]	; 0x80
 800d06c:	dc31      	bgt.n	800d0d2 <_svfprintf_r+0xe1a>
 800d06e:	3408      	adds	r4, #8
 800d070:	2300      	movs	r3, #0
 800d072:	2200      	movs	r2, #0
 800d074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d078:	f7f3 fd32 	bl	8000ae0 <__aeabi_dcmpeq>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	1e5e      	subs	r6, r3, #1
 800d080:	2800      	cmp	r0, #0
 800d082:	d12f      	bne.n	800d0e4 <_svfprintf_r+0xe2c>
 800d084:	f108 0301 	add.w	r3, r8, #1
 800d088:	e884 0048 	stmia.w	r4, {r3, r6}
 800d08c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d08e:	9a03      	ldr	r2, [sp, #12]
 800d090:	3b01      	subs	r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	9321      	str	r3, [sp, #132]	; 0x84
 800d096:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d098:	3301      	adds	r3, #1
 800d09a:	2b07      	cmp	r3, #7
 800d09c:	9320      	str	r3, [sp, #128]	; 0x80
 800d09e:	dd4a      	ble.n	800d136 <_svfprintf_r+0xe7e>
 800d0a0:	aa1f      	add	r2, sp, #124	; 0x7c
 800d0a2:	4651      	mov	r1, sl
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	f002 ff4b 	bl	800ff40 <__ssprint_r>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d165      	bne.n	800d17a <_svfprintf_r+0xec2>
 800d0ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800d0b0:	ab1b      	add	r3, sp, #108	; 0x6c
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0b6:	6063      	str	r3, [r4, #4]
 800d0b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0bc:	4413      	add	r3, r2
 800d0be:	e41c      	b.n	800c8fa <_svfprintf_r+0x642>
 800d0c0:	aa1f      	add	r2, sp, #124	; 0x7c
 800d0c2:	4651      	mov	r1, sl
 800d0c4:	4658      	mov	r0, fp
 800d0c6:	f002 ff3b 	bl	800ff40 <__ssprint_r>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d155      	bne.n	800d17a <_svfprintf_r+0xec2>
 800d0ce:	ac2c      	add	r4, sp, #176	; 0xb0
 800d0d0:	e7c0      	b.n	800d054 <_svfprintf_r+0xd9c>
 800d0d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800d0d4:	4651      	mov	r1, sl
 800d0d6:	4658      	mov	r0, fp
 800d0d8:	f002 ff32 	bl	800ff40 <__ssprint_r>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d14c      	bne.n	800d17a <_svfprintf_r+0xec2>
 800d0e0:	ac2c      	add	r4, sp, #176	; 0xb0
 800d0e2:	e7c5      	b.n	800d070 <_svfprintf_r+0xdb8>
 800d0e4:	2e00      	cmp	r6, #0
 800d0e6:	dde3      	ble.n	800d0b0 <_svfprintf_r+0xdf8>
 800d0e8:	4f59      	ldr	r7, [pc, #356]	; (800d250 <_svfprintf_r+0xf98>)
 800d0ea:	f04f 0810 	mov.w	r8, #16
 800d0ee:	2e10      	cmp	r6, #16
 800d0f0:	6027      	str	r7, [r4, #0]
 800d0f2:	dc04      	bgt.n	800d0fe <_svfprintf_r+0xe46>
 800d0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f6:	6066      	str	r6, [r4, #4]
 800d0f8:	441e      	add	r6, r3
 800d0fa:	9621      	str	r6, [sp, #132]	; 0x84
 800d0fc:	e7cb      	b.n	800d096 <_svfprintf_r+0xdde>
 800d0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d100:	f8c4 8004 	str.w	r8, [r4, #4]
 800d104:	3310      	adds	r3, #16
 800d106:	9321      	str	r3, [sp, #132]	; 0x84
 800d108:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d10a:	3301      	adds	r3, #1
 800d10c:	2b07      	cmp	r3, #7
 800d10e:	9320      	str	r3, [sp, #128]	; 0x80
 800d110:	dc02      	bgt.n	800d118 <_svfprintf_r+0xe60>
 800d112:	3408      	adds	r4, #8
 800d114:	3e10      	subs	r6, #16
 800d116:	e7ea      	b.n	800d0ee <_svfprintf_r+0xe36>
 800d118:	aa1f      	add	r2, sp, #124	; 0x7c
 800d11a:	4651      	mov	r1, sl
 800d11c:	4658      	mov	r0, fp
 800d11e:	f002 ff0f 	bl	800ff40 <__ssprint_r>
 800d122:	bb50      	cbnz	r0, 800d17a <_svfprintf_r+0xec2>
 800d124:	ac2c      	add	r4, sp, #176	; 0xb0
 800d126:	e7f5      	b.n	800d114 <_svfprintf_r+0xe5c>
 800d128:	2301      	movs	r3, #1
 800d12a:	6063      	str	r3, [r4, #4]
 800d12c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d12e:	f8c4 8000 	str.w	r8, [r4]
 800d132:	3301      	adds	r3, #1
 800d134:	e7ae      	b.n	800d094 <_svfprintf_r+0xddc>
 800d136:	3408      	adds	r4, #8
 800d138:	e7ba      	b.n	800d0b0 <_svfprintf_r+0xdf8>
 800d13a:	3408      	adds	r4, #8
 800d13c:	f7ff bbed 	b.w	800c91a <_svfprintf_r+0x662>
 800d140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d144:	1a9d      	subs	r5, r3, r2
 800d146:	2d00      	cmp	r5, #0
 800d148:	f77f abea 	ble.w	800c920 <_svfprintf_r+0x668>
 800d14c:	2610      	movs	r6, #16
 800d14e:	4b41      	ldr	r3, [pc, #260]	; (800d254 <_svfprintf_r+0xf9c>)
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	2d10      	cmp	r5, #16
 800d154:	dc1b      	bgt.n	800d18e <_svfprintf_r+0xed6>
 800d156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d158:	6065      	str	r5, [r4, #4]
 800d15a:	441d      	add	r5, r3
 800d15c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d15e:	9521      	str	r5, [sp, #132]	; 0x84
 800d160:	3301      	adds	r3, #1
 800d162:	2b07      	cmp	r3, #7
 800d164:	9320      	str	r3, [sp, #128]	; 0x80
 800d166:	f77f abdb 	ble.w	800c920 <_svfprintf_r+0x668>
 800d16a:	aa1f      	add	r2, sp, #124	; 0x7c
 800d16c:	4651      	mov	r1, sl
 800d16e:	4658      	mov	r0, fp
 800d170:	f002 fee6 	bl	800ff40 <__ssprint_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	f43f abd3 	beq.w	800c920 <_svfprintf_r+0x668>
 800d17a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800d17e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d184:	bf18      	it	ne
 800d186:	f04f 33ff 	movne.w	r3, #4294967295
 800d18a:	f7ff b8b9 	b.w	800c300 <_svfprintf_r+0x48>
 800d18e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d190:	6066      	str	r6, [r4, #4]
 800d192:	3310      	adds	r3, #16
 800d194:	9321      	str	r3, [sp, #132]	; 0x84
 800d196:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d198:	3301      	adds	r3, #1
 800d19a:	2b07      	cmp	r3, #7
 800d19c:	9320      	str	r3, [sp, #128]	; 0x80
 800d19e:	dc02      	bgt.n	800d1a6 <_svfprintf_r+0xeee>
 800d1a0:	3408      	adds	r4, #8
 800d1a2:	3d10      	subs	r5, #16
 800d1a4:	e7d3      	b.n	800d14e <_svfprintf_r+0xe96>
 800d1a6:	aa1f      	add	r2, sp, #124	; 0x7c
 800d1a8:	4651      	mov	r1, sl
 800d1aa:	4658      	mov	r0, fp
 800d1ac:	f002 fec8 	bl	800ff40 <__ssprint_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d1e2      	bne.n	800d17a <_svfprintf_r+0xec2>
 800d1b4:	ac2c      	add	r4, sp, #176	; 0xb0
 800d1b6:	e7f4      	b.n	800d1a2 <_svfprintf_r+0xeea>
 800d1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d0dd      	beq.n	800d17a <_svfprintf_r+0xec2>
 800d1be:	aa1f      	add	r2, sp, #124	; 0x7c
 800d1c0:	4651      	mov	r1, sl
 800d1c2:	4658      	mov	r0, fp
 800d1c4:	f002 febc 	bl	800ff40 <__ssprint_r>
 800d1c8:	e7d7      	b.n	800d17a <_svfprintf_r+0xec2>
 800d1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f7f3 fcb7 	bl	8000b44 <__aeabi_dcmpun>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f43f aa44 	beq.w	800c664 <_svfprintf_r+0x3ac>
 800d1dc:	4b1e      	ldr	r3, [pc, #120]	; (800d258 <_svfprintf_r+0xfa0>)
 800d1de:	4a1f      	ldr	r2, [pc, #124]	; (800d25c <_svfprintf_r+0xfa4>)
 800d1e0:	f7ff ba34 	b.w	800c64c <_svfprintf_r+0x394>
 800d1e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1e6:	eba3 0308 	sub.w	r3, r3, r8
 800d1ea:	9303      	str	r3, [sp, #12]
 800d1ec:	f7ff bab5 	b.w	800c75a <_svfprintf_r+0x4a2>
 800d1f0:	ea56 0207 	orrs.w	r2, r6, r7
 800d1f4:	950b      	str	r5, [sp, #44]	; 0x2c
 800d1f6:	f43f ac2b 	beq.w	800ca50 <_svfprintf_r+0x798>
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	f43f ac9d 	beq.w	800cb3a <_svfprintf_r+0x882>
 800d200:	2b02      	cmp	r3, #2
 800d202:	f43f acbd 	beq.w	800cb80 <_svfprintf_r+0x8c8>
 800d206:	ab2c      	add	r3, sp, #176	; 0xb0
 800d208:	08f1      	lsrs	r1, r6, #3
 800d20a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800d20e:	08f8      	lsrs	r0, r7, #3
 800d210:	f006 0207 	and.w	r2, r6, #7
 800d214:	4607      	mov	r7, r0
 800d216:	460e      	mov	r6, r1
 800d218:	3230      	adds	r2, #48	; 0x30
 800d21a:	ea56 0107 	orrs.w	r1, r6, r7
 800d21e:	f103 38ff 	add.w	r8, r3, #4294967295
 800d222:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d226:	f47f ac86 	bne.w	800cb36 <_svfprintf_r+0x87e>
 800d22a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d22c:	07c9      	lsls	r1, r1, #31
 800d22e:	d506      	bpl.n	800d23e <_svfprintf_r+0xf86>
 800d230:	2a30      	cmp	r2, #48	; 0x30
 800d232:	d004      	beq.n	800d23e <_svfprintf_r+0xf86>
 800d234:	2230      	movs	r2, #48	; 0x30
 800d236:	f808 2c01 	strb.w	r2, [r8, #-1]
 800d23a:	f1a3 0802 	sub.w	r8, r3, #2
 800d23e:	464e      	mov	r6, r9
 800d240:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800d244:	eba9 0908 	sub.w	r9, r9, r8
 800d248:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d24a:	2700      	movs	r7, #0
 800d24c:	f7ff bad1 	b.w	800c7f2 <_svfprintf_r+0x53a>
 800d250:	08010906 	.word	0x08010906
 800d254:	080108f6 	.word	0x080108f6
 800d258:	080108ca 	.word	0x080108ca
 800d25c:	080108ce 	.word	0x080108ce

0800d260 <_vfprintf_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	b0bd      	sub	sp, #244	; 0xf4
 800d266:	4688      	mov	r8, r1
 800d268:	4615      	mov	r5, r2
 800d26a:	461c      	mov	r4, r3
 800d26c:	461f      	mov	r7, r3
 800d26e:	4683      	mov	fp, r0
 800d270:	f002 f916 	bl	800f4a0 <_localeconv_r>
 800d274:	6803      	ldr	r3, [r0, #0]
 800d276:	930d      	str	r3, [sp, #52]	; 0x34
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f2 ffb3 	bl	80001e4 <strlen>
 800d27e:	9009      	str	r0, [sp, #36]	; 0x24
 800d280:	f1bb 0f00 	cmp.w	fp, #0
 800d284:	d005      	beq.n	800d292 <_vfprintf_r+0x32>
 800d286:	f8db 3018 	ldr.w	r3, [fp, #24]
 800d28a:	b913      	cbnz	r3, 800d292 <_vfprintf_r+0x32>
 800d28c:	4658      	mov	r0, fp
 800d28e:	f7fe faef 	bl	800b870 <__sinit>
 800d292:	4b99      	ldr	r3, [pc, #612]	; (800d4f8 <_vfprintf_r+0x298>)
 800d294:	4598      	cmp	r8, r3
 800d296:	d137      	bne.n	800d308 <_vfprintf_r+0xa8>
 800d298:	f8db 8004 	ldr.w	r8, [fp, #4]
 800d29c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800d2a0:	07d8      	lsls	r0, r3, #31
 800d2a2:	d407      	bmi.n	800d2b4 <_vfprintf_r+0x54>
 800d2a4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d2a8:	0599      	lsls	r1, r3, #22
 800d2aa:	d403      	bmi.n	800d2b4 <_vfprintf_r+0x54>
 800d2ac:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800d2b0:	f7fe fcb4 	bl	800bc1c <__retarget_lock_acquire_recursive>
 800d2b4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800d2b8:	049a      	lsls	r2, r3, #18
 800d2ba:	d409      	bmi.n	800d2d0 <_vfprintf_r+0x70>
 800d2bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d2c0:	f8a8 300c 	strh.w	r3, [r8, #12]
 800d2c4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800d2c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2cc:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 800d2d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d2d4:	071e      	lsls	r6, r3, #28
 800d2d6:	d502      	bpl.n	800d2de <_vfprintf_r+0x7e>
 800d2d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d2dc:	bb03      	cbnz	r3, 800d320 <_vfprintf_r+0xc0>
 800d2de:	4641      	mov	r1, r8
 800d2e0:	4658      	mov	r0, fp
 800d2e2:	f001 f84b 	bl	800e37c <__swsetup_r>
 800d2e6:	b1d8      	cbz	r0, 800d320 <_vfprintf_r+0xc0>
 800d2e8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800d2ec:	07dd      	lsls	r5, r3, #31
 800d2ee:	d407      	bmi.n	800d300 <_vfprintf_r+0xa0>
 800d2f0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d2f4:	059c      	lsls	r4, r3, #22
 800d2f6:	d403      	bmi.n	800d300 <_vfprintf_r+0xa0>
 800d2f8:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800d2fc:	f7fe fc8f 	bl	800bc1e <__retarget_lock_release_recursive>
 800d300:	f04f 33ff 	mov.w	r3, #4294967295
 800d304:	930a      	str	r3, [sp, #40]	; 0x28
 800d306:	e026      	b.n	800d356 <_vfprintf_r+0xf6>
 800d308:	4b7c      	ldr	r3, [pc, #496]	; (800d4fc <_vfprintf_r+0x29c>)
 800d30a:	4598      	cmp	r8, r3
 800d30c:	d102      	bne.n	800d314 <_vfprintf_r+0xb4>
 800d30e:	f8db 8008 	ldr.w	r8, [fp, #8]
 800d312:	e7c3      	b.n	800d29c <_vfprintf_r+0x3c>
 800d314:	4b7a      	ldr	r3, [pc, #488]	; (800d500 <_vfprintf_r+0x2a0>)
 800d316:	4598      	cmp	r8, r3
 800d318:	bf08      	it	eq
 800d31a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 800d31e:	e7bd      	b.n	800d29c <_vfprintf_r+0x3c>
 800d320:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d324:	f003 021a 	and.w	r2, r3, #26
 800d328:	2a0a      	cmp	r2, #10
 800d32a:	d118      	bne.n	800d35e <_vfprintf_r+0xfe>
 800d32c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800d330:	2a00      	cmp	r2, #0
 800d332:	db14      	blt.n	800d35e <_vfprintf_r+0xfe>
 800d334:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800d338:	07d0      	lsls	r0, r2, #31
 800d33a:	d405      	bmi.n	800d348 <_vfprintf_r+0xe8>
 800d33c:	0599      	lsls	r1, r3, #22
 800d33e:	d403      	bmi.n	800d348 <_vfprintf_r+0xe8>
 800d340:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800d344:	f7fe fc6b 	bl	800bc1e <__retarget_lock_release_recursive>
 800d348:	4623      	mov	r3, r4
 800d34a:	462a      	mov	r2, r5
 800d34c:	4641      	mov	r1, r8
 800d34e:	4658      	mov	r0, fp
 800d350:	f000 ffc2 	bl	800e2d8 <__sbprintf>
 800d354:	900a      	str	r0, [sp, #40]	; 0x28
 800d356:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d358:	b03d      	add	sp, #244	; 0xf4
 800d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 800d4f0 <_vfprintf_r+0x290>
 800d362:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d366:	2300      	movs	r3, #0
 800d368:	ac2c      	add	r4, sp, #176	; 0xb0
 800d36a:	941f      	str	r4, [sp, #124]	; 0x7c
 800d36c:	9321      	str	r3, [sp, #132]	; 0x84
 800d36e:	9320      	str	r3, [sp, #128]	; 0x80
 800d370:	9505      	str	r5, [sp, #20]
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	9311      	str	r3, [sp, #68]	; 0x44
 800d376:	9310      	str	r3, [sp, #64]	; 0x40
 800d378:	930a      	str	r3, [sp, #40]	; 0x28
 800d37a:	9d05      	ldr	r5, [sp, #20]
 800d37c:	462b      	mov	r3, r5
 800d37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d382:	b112      	cbz	r2, 800d38a <_vfprintf_r+0x12a>
 800d384:	2a25      	cmp	r2, #37	; 0x25
 800d386:	f040 8083 	bne.w	800d490 <_vfprintf_r+0x230>
 800d38a:	9b05      	ldr	r3, [sp, #20]
 800d38c:	1aee      	subs	r6, r5, r3
 800d38e:	d00d      	beq.n	800d3ac <_vfprintf_r+0x14c>
 800d390:	e884 0048 	stmia.w	r4, {r3, r6}
 800d394:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d396:	4433      	add	r3, r6
 800d398:	9321      	str	r3, [sp, #132]	; 0x84
 800d39a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d39c:	3301      	adds	r3, #1
 800d39e:	2b07      	cmp	r3, #7
 800d3a0:	9320      	str	r3, [sp, #128]	; 0x80
 800d3a2:	dc77      	bgt.n	800d494 <_vfprintf_r+0x234>
 800d3a4:	3408      	adds	r4, #8
 800d3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a8:	4433      	add	r3, r6
 800d3aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d3ac:	782b      	ldrb	r3, [r5, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f000 8739 	beq.w	800e226 <_vfprintf_r+0xfc6>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	1c69      	adds	r1, r5, #1
 800d3b8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d3bc:	461a      	mov	r2, r3
 800d3be:	f04f 3aff 	mov.w	sl, #4294967295
 800d3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3c4:	461d      	mov	r5, r3
 800d3c6:	200a      	movs	r0, #10
 800d3c8:	1c4e      	adds	r6, r1, #1
 800d3ca:	7809      	ldrb	r1, [r1, #0]
 800d3cc:	9605      	str	r6, [sp, #20]
 800d3ce:	9102      	str	r1, [sp, #8]
 800d3d0:	9902      	ldr	r1, [sp, #8]
 800d3d2:	3920      	subs	r1, #32
 800d3d4:	2958      	cmp	r1, #88	; 0x58
 800d3d6:	f200 841d 	bhi.w	800dc14 <_vfprintf_r+0x9b4>
 800d3da:	e8df f011 	tbh	[pc, r1, lsl #1]
 800d3de:	00b3      	.short	0x00b3
 800d3e0:	041b041b 	.word	0x041b041b
 800d3e4:	041b00b8 	.word	0x041b00b8
 800d3e8:	041b041b 	.word	0x041b041b
 800d3ec:	041b041b 	.word	0x041b041b
 800d3f0:	00bb041b 	.word	0x00bb041b
 800d3f4:	041b0065 	.word	0x041b0065
 800d3f8:	00c700c4 	.word	0x00c700c4
 800d3fc:	00e4041b 	.word	0x00e4041b
 800d400:	00e700e7 	.word	0x00e700e7
 800d404:	00e700e7 	.word	0x00e700e7
 800d408:	00e700e7 	.word	0x00e700e7
 800d40c:	00e700e7 	.word	0x00e700e7
 800d410:	041b00e7 	.word	0x041b00e7
 800d414:	041b041b 	.word	0x041b041b
 800d418:	041b041b 	.word	0x041b041b
 800d41c:	041b041b 	.word	0x041b041b
 800d420:	041b041b 	.word	0x041b041b
 800d424:	011b041b 	.word	0x011b041b
 800d428:	041b0131 	.word	0x041b0131
 800d42c:	041b0131 	.word	0x041b0131
 800d430:	041b041b 	.word	0x041b041b
 800d434:	00fa041b 	.word	0x00fa041b
 800d438:	041b041b 	.word	0x041b041b
 800d43c:	041b0346 	.word	0x041b0346
 800d440:	041b041b 	.word	0x041b041b
 800d444:	041b041b 	.word	0x041b041b
 800d448:	041b03ad 	.word	0x041b03ad
 800d44c:	0093041b 	.word	0x0093041b
 800d450:	041b041b 	.word	0x041b041b
 800d454:	041b041b 	.word	0x041b041b
 800d458:	041b041b 	.word	0x041b041b
 800d45c:	041b041b 	.word	0x041b041b
 800d460:	041b041b 	.word	0x041b041b
 800d464:	006b010d 	.word	0x006b010d
 800d468:	01310131 	.word	0x01310131
 800d46c:	00fd0131 	.word	0x00fd0131
 800d470:	041b006b 	.word	0x041b006b
 800d474:	0100041b 	.word	0x0100041b
 800d478:	0328041b 	.word	0x0328041b
 800d47c:	037c0348 	.word	0x037c0348
 800d480:	041b0107 	.word	0x041b0107
 800d484:	041b038d 	.word	0x041b038d
 800d488:	041b03af 	.word	0x041b03af
 800d48c:	03c7041b 	.word	0x03c7041b
 800d490:	461d      	mov	r5, r3
 800d492:	e773      	b.n	800d37c <_vfprintf_r+0x11c>
 800d494:	aa1f      	add	r2, sp, #124	; 0x7c
 800d496:	4641      	mov	r1, r8
 800d498:	4658      	mov	r0, fp
 800d49a:	f002 fdcb 	bl	8010034 <__sprint_r>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f040 8699 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800d4a4:	ac2c      	add	r4, sp, #176	; 0xb0
 800d4a6:	e77e      	b.n	800d3a6 <_vfprintf_r+0x146>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	222b      	movs	r2, #43	; 0x2b
 800d4ac:	9905      	ldr	r1, [sp, #20]
 800d4ae:	e78b      	b.n	800d3c8 <_vfprintf_r+0x168>
 800d4b0:	460f      	mov	r7, r1
 800d4b2:	e7fb      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d4b4:	b10b      	cbz	r3, 800d4ba <_vfprintf_r+0x25a>
 800d4b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d4ba:	06aa      	lsls	r2, r5, #26
 800d4bc:	f140 80b0 	bpl.w	800d620 <_vfprintf_r+0x3c0>
 800d4c0:	3707      	adds	r7, #7
 800d4c2:	f027 0707 	bic.w	r7, r7, #7
 800d4c6:	f107 0308 	add.w	r3, r7, #8
 800d4ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d4ce:	9304      	str	r3, [sp, #16]
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	f177 0300 	sbcs.w	r3, r7, #0
 800d4d6:	da06      	bge.n	800d4e6 <_vfprintf_r+0x286>
 800d4d8:	4276      	negs	r6, r6
 800d4da:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d4de:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800d4e2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e2d0      	b.n	800da8c <_vfprintf_r+0x82c>
 800d4ea:	bf00      	nop
 800d4ec:	f3af 8000 	nop.w
	...
 800d4f8:	0801087c 	.word	0x0801087c
 800d4fc:	0801089c 	.word	0x0801089c
 800d500:	0801085c 	.word	0x0801085c
 800d504:	b10b      	cbz	r3, 800d50a <_vfprintf_r+0x2aa>
 800d506:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d50a:	4ba2      	ldr	r3, [pc, #648]	; (800d794 <_vfprintf_r+0x534>)
 800d50c:	9311      	str	r3, [sp, #68]	; 0x44
 800d50e:	06a9      	lsls	r1, r5, #26
 800d510:	f140 8331 	bpl.w	800db76 <_vfprintf_r+0x916>
 800d514:	3707      	adds	r7, #7
 800d516:	f027 0707 	bic.w	r7, r7, #7
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800d522:	9304      	str	r3, [sp, #16]
 800d524:	07eb      	lsls	r3, r5, #31
 800d526:	d50b      	bpl.n	800d540 <_vfprintf_r+0x2e0>
 800d528:	ea56 0307 	orrs.w	r3, r6, r7
 800d52c:	d008      	beq.n	800d540 <_vfprintf_r+0x2e0>
 800d52e:	2330      	movs	r3, #48	; 0x30
 800d530:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800d534:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d538:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800d53c:	f045 0502 	orr.w	r5, r5, #2
 800d540:	2302      	movs	r3, #2
 800d542:	e2a0      	b.n	800da86 <_vfprintf_r+0x826>
 800d544:	2a00      	cmp	r2, #0
 800d546:	d1b1      	bne.n	800d4ac <_vfprintf_r+0x24c>
 800d548:	2301      	movs	r3, #1
 800d54a:	2220      	movs	r2, #32
 800d54c:	e7ae      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d54e:	f045 0501 	orr.w	r5, r5, #1
 800d552:	e7ab      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d554:	683e      	ldr	r6, [r7, #0]
 800d556:	960b      	str	r6, [sp, #44]	; 0x2c
 800d558:	2e00      	cmp	r6, #0
 800d55a:	f107 0104 	add.w	r1, r7, #4
 800d55e:	daa7      	bge.n	800d4b0 <_vfprintf_r+0x250>
 800d560:	4276      	negs	r6, r6
 800d562:	960b      	str	r6, [sp, #44]	; 0x2c
 800d564:	460f      	mov	r7, r1
 800d566:	f045 0504 	orr.w	r5, r5, #4
 800d56a:	e79f      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d56c:	9905      	ldr	r1, [sp, #20]
 800d56e:	1c4e      	adds	r6, r1, #1
 800d570:	7809      	ldrb	r1, [r1, #0]
 800d572:	9102      	str	r1, [sp, #8]
 800d574:	292a      	cmp	r1, #42	; 0x2a
 800d576:	d010      	beq.n	800d59a <_vfprintf_r+0x33a>
 800d578:	f04f 0a00 	mov.w	sl, #0
 800d57c:	9605      	str	r6, [sp, #20]
 800d57e:	9902      	ldr	r1, [sp, #8]
 800d580:	3930      	subs	r1, #48	; 0x30
 800d582:	2909      	cmp	r1, #9
 800d584:	f63f af24 	bhi.w	800d3d0 <_vfprintf_r+0x170>
 800d588:	fb00 1a0a 	mla	sl, r0, sl, r1
 800d58c:	9905      	ldr	r1, [sp, #20]
 800d58e:	460e      	mov	r6, r1
 800d590:	f816 1b01 	ldrb.w	r1, [r6], #1
 800d594:	9102      	str	r1, [sp, #8]
 800d596:	9605      	str	r6, [sp, #20]
 800d598:	e7f1      	b.n	800d57e <_vfprintf_r+0x31e>
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	9605      	str	r6, [sp, #20]
 800d59e:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 800d5a2:	3704      	adds	r7, #4
 800d5a4:	e782      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5a6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800d5aa:	e77f      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5b0:	9902      	ldr	r1, [sp, #8]
 800d5b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d5b4:	3930      	subs	r1, #48	; 0x30
 800d5b6:	fb00 1106 	mla	r1, r0, r6, r1
 800d5ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5bc:	9905      	ldr	r1, [sp, #20]
 800d5be:	460e      	mov	r6, r1
 800d5c0:	f816 1b01 	ldrb.w	r1, [r6], #1
 800d5c4:	9102      	str	r1, [sp, #8]
 800d5c6:	9902      	ldr	r1, [sp, #8]
 800d5c8:	9605      	str	r6, [sp, #20]
 800d5ca:	3930      	subs	r1, #48	; 0x30
 800d5cc:	2909      	cmp	r1, #9
 800d5ce:	d9ef      	bls.n	800d5b0 <_vfprintf_r+0x350>
 800d5d0:	e6fe      	b.n	800d3d0 <_vfprintf_r+0x170>
 800d5d2:	f045 0508 	orr.w	r5, r5, #8
 800d5d6:	e769      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800d5dc:	e766      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5de:	9905      	ldr	r1, [sp, #20]
 800d5e0:	7809      	ldrb	r1, [r1, #0]
 800d5e2:	296c      	cmp	r1, #108	; 0x6c
 800d5e4:	d105      	bne.n	800d5f2 <_vfprintf_r+0x392>
 800d5e6:	9905      	ldr	r1, [sp, #20]
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	9105      	str	r1, [sp, #20]
 800d5ec:	f045 0520 	orr.w	r5, r5, #32
 800d5f0:	e75c      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5f2:	f045 0510 	orr.w	r5, r5, #16
 800d5f6:	e759      	b.n	800d4ac <_vfprintf_r+0x24c>
 800d5f8:	1d3b      	adds	r3, r7, #4
 800d5fa:	9304      	str	r3, [sp, #16]
 800d5fc:	2600      	movs	r6, #0
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800d604:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800d608:	f04f 0a01 	mov.w	sl, #1
 800d60c:	9608      	str	r6, [sp, #32]
 800d60e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 800d612:	e11e      	b.n	800d852 <_vfprintf_r+0x5f2>
 800d614:	b10b      	cbz	r3, 800d61a <_vfprintf_r+0x3ba>
 800d616:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d61a:	f045 0510 	orr.w	r5, r5, #16
 800d61e:	e74c      	b.n	800d4ba <_vfprintf_r+0x25a>
 800d620:	f015 0f10 	tst.w	r5, #16
 800d624:	f107 0304 	add.w	r3, r7, #4
 800d628:	d003      	beq.n	800d632 <_vfprintf_r+0x3d2>
 800d62a:	683e      	ldr	r6, [r7, #0]
 800d62c:	9304      	str	r3, [sp, #16]
 800d62e:	17f7      	asrs	r7, r6, #31
 800d630:	e74e      	b.n	800d4d0 <_vfprintf_r+0x270>
 800d632:	683e      	ldr	r6, [r7, #0]
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d63a:	bf18      	it	ne
 800d63c:	b236      	sxthne	r6, r6
 800d63e:	e7f6      	b.n	800d62e <_vfprintf_r+0x3ce>
 800d640:	b10b      	cbz	r3, 800d646 <_vfprintf_r+0x3e6>
 800d642:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800d646:	3707      	adds	r7, #7
 800d648:	f027 0707 	bic.w	r7, r7, #7
 800d64c:	f107 0308 	add.w	r3, r7, #8
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	ed97 7b00 	vldr	d7, [r7]
 800d656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d65a:	9b06      	ldr	r3, [sp, #24]
 800d65c:	9312      	str	r3, [sp, #72]	; 0x48
 800d65e:	9b07      	ldr	r3, [sp, #28]
 800d660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d664:	9313      	str	r3, [sp, #76]	; 0x4c
 800d666:	f04f 32ff 	mov.w	r2, #4294967295
 800d66a:	4b4b      	ldr	r3, [pc, #300]	; (800d798 <_vfprintf_r+0x538>)
 800d66c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d670:	f7f3 fa68 	bl	8000b44 <__aeabi_dcmpun>
 800d674:	2800      	cmp	r0, #0
 800d676:	f040 85e3 	bne.w	800e240 <_vfprintf_r+0xfe0>
 800d67a:	f04f 32ff 	mov.w	r2, #4294967295
 800d67e:	4b46      	ldr	r3, [pc, #280]	; (800d798 <_vfprintf_r+0x538>)
 800d680:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d684:	f7f3 fa40 	bl	8000b08 <__aeabi_dcmple>
 800d688:	2800      	cmp	r0, #0
 800d68a:	f040 85d9 	bne.w	800e240 <_vfprintf_r+0xfe0>
 800d68e:	2200      	movs	r2, #0
 800d690:	2300      	movs	r3, #0
 800d692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d696:	f7f3 fa2d 	bl	8000af4 <__aeabi_dcmplt>
 800d69a:	b110      	cbz	r0, 800d6a2 <_vfprintf_r+0x442>
 800d69c:	232d      	movs	r3, #45	; 0x2d
 800d69e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d6a2:	4b3e      	ldr	r3, [pc, #248]	; (800d79c <_vfprintf_r+0x53c>)
 800d6a4:	4a3e      	ldr	r2, [pc, #248]	; (800d7a0 <_vfprintf_r+0x540>)
 800d6a6:	9902      	ldr	r1, [sp, #8]
 800d6a8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800d6ac:	2947      	cmp	r1, #71	; 0x47
 800d6ae:	bfcc      	ite	gt
 800d6b0:	4691      	movgt	r9, r2
 800d6b2:	4699      	movle	r9, r3
 800d6b4:	f04f 0a03 	mov.w	sl, #3
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	9608      	str	r6, [sp, #32]
 800d6bc:	e0c9      	b.n	800d852 <_vfprintf_r+0x5f2>
 800d6be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d6c2:	d022      	beq.n	800d70a <_vfprintf_r+0x4aa>
 800d6c4:	9b02      	ldr	r3, [sp, #8]
 800d6c6:	f023 0320 	bic.w	r3, r3, #32
 800d6ca:	2b47      	cmp	r3, #71	; 0x47
 800d6cc:	d104      	bne.n	800d6d8 <_vfprintf_r+0x478>
 800d6ce:	f1ba 0f00 	cmp.w	sl, #0
 800d6d2:	bf08      	it	eq
 800d6d4:	f04f 0a01 	moveq.w	sl, #1
 800d6d8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800d6dc:	9314      	str	r3, [sp, #80]	; 0x50
 800d6de:	9b07      	ldr	r3, [sp, #28]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	da15      	bge.n	800d710 <_vfprintf_r+0x4b0>
 800d6e4:	9b06      	ldr	r3, [sp, #24]
 800d6e6:	930e      	str	r3, [sp, #56]	; 0x38
 800d6e8:	9b07      	ldr	r3, [sp, #28]
 800d6ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6f0:	232d      	movs	r3, #45	; 0x2d
 800d6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d6f4:	9b02      	ldr	r3, [sp, #8]
 800d6f6:	f023 0720 	bic.w	r7, r3, #32
 800d6fa:	2f46      	cmp	r7, #70	; 0x46
 800d6fc:	d00e      	beq.n	800d71c <_vfprintf_r+0x4bc>
 800d6fe:	2f45      	cmp	r7, #69	; 0x45
 800d700:	d146      	bne.n	800d790 <_vfprintf_r+0x530>
 800d702:	f10a 0601 	add.w	r6, sl, #1
 800d706:	2102      	movs	r1, #2
 800d708:	e00a      	b.n	800d720 <_vfprintf_r+0x4c0>
 800d70a:	f04f 0a06 	mov.w	sl, #6
 800d70e:	e7e3      	b.n	800d6d8 <_vfprintf_r+0x478>
 800d710:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d714:	2300      	movs	r3, #0
 800d716:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d71a:	e7ea      	b.n	800d6f2 <_vfprintf_r+0x492>
 800d71c:	4656      	mov	r6, sl
 800d71e:	2103      	movs	r1, #3
 800d720:	ab1d      	add	r3, sp, #116	; 0x74
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	ab1a      	add	r3, sp, #104	; 0x68
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	4632      	mov	r2, r6
 800d72a:	ab19      	add	r3, sp, #100	; 0x64
 800d72c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800d730:	4658      	mov	r0, fp
 800d732:	f000 ff2d 	bl	800e590 <_dtoa_r>
 800d736:	2f47      	cmp	r7, #71	; 0x47
 800d738:	4681      	mov	r9, r0
 800d73a:	d102      	bne.n	800d742 <_vfprintf_r+0x4e2>
 800d73c:	07eb      	lsls	r3, r5, #31
 800d73e:	f140 858c 	bpl.w	800e25a <_vfprintf_r+0xffa>
 800d742:	eb09 0306 	add.w	r3, r9, r6
 800d746:	2f46      	cmp	r7, #70	; 0x46
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	d111      	bne.n	800d770 <_vfprintf_r+0x510>
 800d74c:	f899 3000 	ldrb.w	r3, [r9]
 800d750:	2b30      	cmp	r3, #48	; 0x30
 800d752:	d109      	bne.n	800d768 <_vfprintf_r+0x508>
 800d754:	2200      	movs	r2, #0
 800d756:	2300      	movs	r3, #0
 800d758:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d75c:	f7f3 f9c0 	bl	8000ae0 <__aeabi_dcmpeq>
 800d760:	b910      	cbnz	r0, 800d768 <_vfprintf_r+0x508>
 800d762:	f1c6 0601 	rsb	r6, r6, #1
 800d766:	9619      	str	r6, [sp, #100]	; 0x64
 800d768:	9a03      	ldr	r2, [sp, #12]
 800d76a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d76c:	441a      	add	r2, r3
 800d76e:	9203      	str	r2, [sp, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	2300      	movs	r3, #0
 800d774:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d778:	f7f3 f9b2 	bl	8000ae0 <__aeabi_dcmpeq>
 800d77c:	b990      	cbnz	r0, 800d7a4 <_vfprintf_r+0x544>
 800d77e:	2230      	movs	r2, #48	; 0x30
 800d780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d782:	9903      	ldr	r1, [sp, #12]
 800d784:	4299      	cmp	r1, r3
 800d786:	d90f      	bls.n	800d7a8 <_vfprintf_r+0x548>
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	911d      	str	r1, [sp, #116]	; 0x74
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e7f7      	b.n	800d780 <_vfprintf_r+0x520>
 800d790:	4656      	mov	r6, sl
 800d792:	e7b8      	b.n	800d706 <_vfprintf_r+0x4a6>
 800d794:	080108d2 	.word	0x080108d2
 800d798:	7fefffff 	.word	0x7fefffff
 800d79c:	080108c2 	.word	0x080108c2
 800d7a0:	080108c6 	.word	0x080108c6
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	931d      	str	r3, [sp, #116]	; 0x74
 800d7a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7aa:	2f47      	cmp	r7, #71	; 0x47
 800d7ac:	eba3 0309 	sub.w	r3, r3, r9
 800d7b0:	9303      	str	r3, [sp, #12]
 800d7b2:	f040 80f8 	bne.w	800d9a6 <_vfprintf_r+0x746>
 800d7b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7b8:	1cdf      	adds	r7, r3, #3
 800d7ba:	db02      	blt.n	800d7c2 <_vfprintf_r+0x562>
 800d7bc:	459a      	cmp	sl, r3
 800d7be:	f280 811f 	bge.w	800da00 <_vfprintf_r+0x7a0>
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	9302      	str	r3, [sp, #8]
 800d7c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d7ca:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800d7ce:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800d7d2:	1e53      	subs	r3, r2, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	9319      	str	r3, [sp, #100]	; 0x64
 800d7d8:	bfb6      	itet	lt
 800d7da:	f1c2 0301 	rsblt	r3, r2, #1
 800d7de:	222b      	movge	r2, #43	; 0x2b
 800d7e0:	222d      	movlt	r2, #45	; 0x2d
 800d7e2:	2b09      	cmp	r3, #9
 800d7e4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800d7e8:	f340 80fa 	ble.w	800d9e0 <_vfprintf_r+0x780>
 800d7ec:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800d7f0:	260a      	movs	r6, #10
 800d7f2:	fb93 f0f6 	sdiv	r0, r3, r6
 800d7f6:	fb06 3310 	mls	r3, r6, r0, r3
 800d7fa:	3330      	adds	r3, #48	; 0x30
 800d7fc:	2809      	cmp	r0, #9
 800d7fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d802:	f102 31ff 	add.w	r1, r2, #4294967295
 800d806:	4603      	mov	r3, r0
 800d808:	f300 80e3 	bgt.w	800d9d2 <_vfprintf_r+0x772>
 800d80c:	3330      	adds	r3, #48	; 0x30
 800d80e:	f801 3c01 	strb.w	r3, [r1, #-1]
 800d812:	3a02      	subs	r2, #2
 800d814:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800d818:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800d81c:	4282      	cmp	r2, r0
 800d81e:	4619      	mov	r1, r3
 800d820:	f0c0 80d9 	bcc.w	800d9d6 <_vfprintf_r+0x776>
 800d824:	9a03      	ldr	r2, [sp, #12]
 800d826:	ab1b      	add	r3, sp, #108	; 0x6c
 800d828:	1acb      	subs	r3, r1, r3
 800d82a:	2a01      	cmp	r2, #1
 800d82c:	9310      	str	r3, [sp, #64]	; 0x40
 800d82e:	eb03 0a02 	add.w	sl, r3, r2
 800d832:	dc03      	bgt.n	800d83c <_vfprintf_r+0x5dc>
 800d834:	f015 0301 	ands.w	r3, r5, #1
 800d838:	9308      	str	r3, [sp, #32]
 800d83a:	d003      	beq.n	800d844 <_vfprintf_r+0x5e4>
 800d83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83e:	449a      	add	sl, r3
 800d840:	2300      	movs	r3, #0
 800d842:	9308      	str	r3, [sp, #32]
 800d844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d846:	b113      	cbz	r3, 800d84e <_vfprintf_r+0x5ee>
 800d848:	232d      	movs	r3, #45	; 0x2d
 800d84a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800d84e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d850:	2600      	movs	r6, #0
 800d852:	4556      	cmp	r6, sl
 800d854:	4633      	mov	r3, r6
 800d856:	bfb8      	it	lt
 800d858:	4653      	movlt	r3, sl
 800d85a:	930c      	str	r3, [sp, #48]	; 0x30
 800d85c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800d860:	b113      	cbz	r3, 800d868 <_vfprintf_r+0x608>
 800d862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d864:	3301      	adds	r3, #1
 800d866:	930c      	str	r3, [sp, #48]	; 0x30
 800d868:	f015 0302 	ands.w	r3, r5, #2
 800d86c:	9314      	str	r3, [sp, #80]	; 0x50
 800d86e:	bf1e      	ittt	ne
 800d870:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 800d872:	3302      	addne	r3, #2
 800d874:	930c      	strne	r3, [sp, #48]	; 0x30
 800d876:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800d87a:	9315      	str	r3, [sp, #84]	; 0x54
 800d87c:	d114      	bne.n	800d8a8 <_vfprintf_r+0x648>
 800d87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d882:	1a9f      	subs	r7, r3, r2
 800d884:	2f00      	cmp	r7, #0
 800d886:	dd0f      	ble.n	800d8a8 <_vfprintf_r+0x648>
 800d888:	4ba8      	ldr	r3, [pc, #672]	; (800db2c <_vfprintf_r+0x8cc>)
 800d88a:	6023      	str	r3, [r4, #0]
 800d88c:	2f10      	cmp	r7, #16
 800d88e:	f300 81d3 	bgt.w	800dc38 <_vfprintf_r+0x9d8>
 800d892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d894:	6067      	str	r7, [r4, #4]
 800d896:	441f      	add	r7, r3
 800d898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d89a:	9721      	str	r7, [sp, #132]	; 0x84
 800d89c:	3301      	adds	r3, #1
 800d89e:	2b07      	cmp	r3, #7
 800d8a0:	9320      	str	r3, [sp, #128]	; 0x80
 800d8a2:	f300 81e0 	bgt.w	800dc66 <_vfprintf_r+0xa06>
 800d8a6:	3408      	adds	r4, #8
 800d8a8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800d8ac:	b173      	cbz	r3, 800d8cc <_vfprintf_r+0x66c>
 800d8ae:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800d8b2:	6023      	str	r3, [r4, #0]
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	6063      	str	r3, [r4, #4]
 800d8b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	9321      	str	r3, [sp, #132]	; 0x84
 800d8be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	2b07      	cmp	r3, #7
 800d8c4:	9320      	str	r3, [sp, #128]	; 0x80
 800d8c6:	f300 81d8 	bgt.w	800dc7a <_vfprintf_r+0xa1a>
 800d8ca:	3408      	adds	r4, #8
 800d8cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8ce:	b16b      	cbz	r3, 800d8ec <_vfprintf_r+0x68c>
 800d8d0:	ab18      	add	r3, sp, #96	; 0x60
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	6063      	str	r3, [r4, #4]
 800d8d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8da:	3302      	adds	r3, #2
 800d8dc:	9321      	str	r3, [sp, #132]	; 0x84
 800d8de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	2b07      	cmp	r3, #7
 800d8e4:	9320      	str	r3, [sp, #128]	; 0x80
 800d8e6:	f300 81d2 	bgt.w	800dc8e <_vfprintf_r+0xa2e>
 800d8ea:	3408      	adds	r4, #8
 800d8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8ee:	2b80      	cmp	r3, #128	; 0x80
 800d8f0:	d114      	bne.n	800d91c <_vfprintf_r+0x6bc>
 800d8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8f6:	1a9f      	subs	r7, r3, r2
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	dd0f      	ble.n	800d91c <_vfprintf_r+0x6bc>
 800d8fc:	4b8c      	ldr	r3, [pc, #560]	; (800db30 <_vfprintf_r+0x8d0>)
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	2f10      	cmp	r7, #16
 800d902:	f300 81ce 	bgt.w	800dca2 <_vfprintf_r+0xa42>
 800d906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d908:	6067      	str	r7, [r4, #4]
 800d90a:	441f      	add	r7, r3
 800d90c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d90e:	9721      	str	r7, [sp, #132]	; 0x84
 800d910:	3301      	adds	r3, #1
 800d912:	2b07      	cmp	r3, #7
 800d914:	9320      	str	r3, [sp, #128]	; 0x80
 800d916:	f300 81dd 	bgt.w	800dcd4 <_vfprintf_r+0xa74>
 800d91a:	3408      	adds	r4, #8
 800d91c:	eba6 060a 	sub.w	r6, r6, sl
 800d920:	2e00      	cmp	r6, #0
 800d922:	dd0f      	ble.n	800d944 <_vfprintf_r+0x6e4>
 800d924:	4f82      	ldr	r7, [pc, #520]	; (800db30 <_vfprintf_r+0x8d0>)
 800d926:	6027      	str	r7, [r4, #0]
 800d928:	2e10      	cmp	r6, #16
 800d92a:	f300 81dd 	bgt.w	800dce8 <_vfprintf_r+0xa88>
 800d92e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d930:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d932:	6066      	str	r6, [r4, #4]
 800d934:	3301      	adds	r3, #1
 800d936:	4406      	add	r6, r0
 800d938:	2b07      	cmp	r3, #7
 800d93a:	9621      	str	r6, [sp, #132]	; 0x84
 800d93c:	9320      	str	r3, [sp, #128]	; 0x80
 800d93e:	f300 81ea 	bgt.w	800dd16 <_vfprintf_r+0xab6>
 800d942:	3408      	adds	r4, #8
 800d944:	05e9      	lsls	r1, r5, #23
 800d946:	f100 81f0 	bmi.w	800dd2a <_vfprintf_r+0xaca>
 800d94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d94c:	e884 0600 	stmia.w	r4, {r9, sl}
 800d950:	4453      	add	r3, sl
 800d952:	9321      	str	r3, [sp, #132]	; 0x84
 800d954:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d956:	3301      	adds	r3, #1
 800d958:	2b07      	cmp	r3, #7
 800d95a:	9320      	str	r3, [sp, #128]	; 0x80
 800d95c:	f340 841b 	ble.w	800e196 <_vfprintf_r+0xf36>
 800d960:	aa1f      	add	r2, sp, #124	; 0x7c
 800d962:	4641      	mov	r1, r8
 800d964:	4658      	mov	r0, fp
 800d966:	f002 fb65 	bl	8010034 <__sprint_r>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f040 8433 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800d970:	ac2c      	add	r4, sp, #176	; 0xb0
 800d972:	0768      	lsls	r0, r5, #29
 800d974:	f100 8412 	bmi.w	800e19c <_vfprintf_r+0xf3c>
 800d978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d97a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d97c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d97e:	428a      	cmp	r2, r1
 800d980:	bfac      	ite	ge
 800d982:	189b      	addge	r3, r3, r2
 800d984:	185b      	addlt	r3, r3, r1
 800d986:	930a      	str	r3, [sp, #40]	; 0x28
 800d988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d98a:	b13b      	cbz	r3, 800d99c <_vfprintf_r+0x73c>
 800d98c:	aa1f      	add	r2, sp, #124	; 0x7c
 800d98e:	4641      	mov	r1, r8
 800d990:	4658      	mov	r0, fp
 800d992:	f002 fb4f 	bl	8010034 <__sprint_r>
 800d996:	2800      	cmp	r0, #0
 800d998:	f040 841d 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800d99c:	2300      	movs	r3, #0
 800d99e:	9320      	str	r3, [sp, #128]	; 0x80
 800d9a0:	9f04      	ldr	r7, [sp, #16]
 800d9a2:	ac2c      	add	r4, sp, #176	; 0xb0
 800d9a4:	e4e9      	b.n	800d37a <_vfprintf_r+0x11a>
 800d9a6:	9b02      	ldr	r3, [sp, #8]
 800d9a8:	2b65      	cmp	r3, #101	; 0x65
 800d9aa:	f77f af0d 	ble.w	800d7c8 <_vfprintf_r+0x568>
 800d9ae:	9b02      	ldr	r3, [sp, #8]
 800d9b0:	2b66      	cmp	r3, #102	; 0x66
 800d9b2:	d125      	bne.n	800da00 <_vfprintf_r+0x7a0>
 800d9b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	dd1a      	ble.n	800d9f0 <_vfprintf_r+0x790>
 800d9ba:	f1ba 0f00 	cmp.w	sl, #0
 800d9be:	d101      	bne.n	800d9c4 <_vfprintf_r+0x764>
 800d9c0:	07ee      	lsls	r6, r5, #31
 800d9c2:	d502      	bpl.n	800d9ca <_vfprintf_r+0x76a>
 800d9c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c6:	4413      	add	r3, r2
 800d9c8:	4453      	add	r3, sl
 800d9ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d9cc:	9208      	str	r2, [sp, #32]
 800d9ce:	469a      	mov	sl, r3
 800d9d0:	e738      	b.n	800d844 <_vfprintf_r+0x5e4>
 800d9d2:	460a      	mov	r2, r1
 800d9d4:	e70d      	b.n	800d7f2 <_vfprintf_r+0x592>
 800d9d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d9da:	f803 1b01 	strb.w	r1, [r3], #1
 800d9de:	e71d      	b.n	800d81c <_vfprintf_r+0x5bc>
 800d9e0:	2230      	movs	r2, #48	; 0x30
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800d9e8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800d9ec:	a91c      	add	r1, sp, #112	; 0x70
 800d9ee:	e719      	b.n	800d824 <_vfprintf_r+0x5c4>
 800d9f0:	f1ba 0f00 	cmp.w	sl, #0
 800d9f4:	d101      	bne.n	800d9fa <_vfprintf_r+0x79a>
 800d9f6:	07ed      	lsls	r5, r5, #31
 800d9f8:	d515      	bpl.n	800da26 <_vfprintf_r+0x7c6>
 800d9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	e7e3      	b.n	800d9c8 <_vfprintf_r+0x768>
 800da00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	429a      	cmp	r2, r3
 800da06:	db06      	blt.n	800da16 <_vfprintf_r+0x7b6>
 800da08:	07e8      	lsls	r0, r5, #31
 800da0a:	d50e      	bpl.n	800da2a <_vfprintf_r+0x7ca>
 800da0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0e:	4413      	add	r3, r2
 800da10:	2267      	movs	r2, #103	; 0x67
 800da12:	9202      	str	r2, [sp, #8]
 800da14:	e7d9      	b.n	800d9ca <_vfprintf_r+0x76a>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	440b      	add	r3, r1
 800da1e:	dcf7      	bgt.n	800da10 <_vfprintf_r+0x7b0>
 800da20:	f1c2 0201 	rsb	r2, r2, #1
 800da24:	e7f3      	b.n	800da0e <_vfprintf_r+0x7ae>
 800da26:	2301      	movs	r3, #1
 800da28:	e7cf      	b.n	800d9ca <_vfprintf_r+0x76a>
 800da2a:	4613      	mov	r3, r2
 800da2c:	e7f0      	b.n	800da10 <_vfprintf_r+0x7b0>
 800da2e:	b10b      	cbz	r3, 800da34 <_vfprintf_r+0x7d4>
 800da30:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800da34:	f015 0f20 	tst.w	r5, #32
 800da38:	f107 0304 	add.w	r3, r7, #4
 800da3c:	d008      	beq.n	800da50 <_vfprintf_r+0x7f0>
 800da3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	17ce      	asrs	r6, r1, #31
 800da44:	4608      	mov	r0, r1
 800da46:	4631      	mov	r1, r6
 800da48:	e9c2 0100 	strd	r0, r1, [r2]
 800da4c:	461f      	mov	r7, r3
 800da4e:	e494      	b.n	800d37a <_vfprintf_r+0x11a>
 800da50:	06e9      	lsls	r1, r5, #27
 800da52:	d503      	bpl.n	800da5c <_vfprintf_r+0x7fc>
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da58:	6011      	str	r1, [r2, #0]
 800da5a:	e7f7      	b.n	800da4c <_vfprintf_r+0x7ec>
 800da5c:	066a      	lsls	r2, r5, #25
 800da5e:	d5f9      	bpl.n	800da54 <_vfprintf_r+0x7f4>
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800da66:	8011      	strh	r1, [r2, #0]
 800da68:	e7f0      	b.n	800da4c <_vfprintf_r+0x7ec>
 800da6a:	f045 0510 	orr.w	r5, r5, #16
 800da6e:	f015 0320 	ands.w	r3, r5, #32
 800da72:	d022      	beq.n	800daba <_vfprintf_r+0x85a>
 800da74:	3707      	adds	r7, #7
 800da76:	f027 0707 	bic.w	r7, r7, #7
 800da7a:	f107 0308 	add.w	r3, r7, #8
 800da7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	2300      	movs	r3, #0
 800da86:	2200      	movs	r2, #0
 800da88:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800da8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800da90:	f000 83e8 	beq.w	800e264 <_vfprintf_r+0x1004>
 800da94:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800da98:	9208      	str	r2, [sp, #32]
 800da9a:	ea56 0207 	orrs.w	r2, r6, r7
 800da9e:	f040 83e6 	bne.w	800e26e <_vfprintf_r+0x100e>
 800daa2:	f1ba 0f00 	cmp.w	sl, #0
 800daa6:	f000 80a9 	beq.w	800dbfc <_vfprintf_r+0x99c>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d075      	beq.n	800db9a <_vfprintf_r+0x93a>
 800daae:	2b02      	cmp	r3, #2
 800dab0:	f000 8090 	beq.w	800dbd4 <_vfprintf_r+0x974>
 800dab4:	2600      	movs	r6, #0
 800dab6:	2700      	movs	r7, #0
 800dab8:	e3df      	b.n	800e27a <_vfprintf_r+0x101a>
 800daba:	1d3a      	adds	r2, r7, #4
 800dabc:	f015 0110 	ands.w	r1, r5, #16
 800dac0:	9204      	str	r2, [sp, #16]
 800dac2:	d002      	beq.n	800daca <_vfprintf_r+0x86a>
 800dac4:	683e      	ldr	r6, [r7, #0]
 800dac6:	2700      	movs	r7, #0
 800dac8:	e7dd      	b.n	800da86 <_vfprintf_r+0x826>
 800daca:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800dace:	d0f9      	beq.n	800dac4 <_vfprintf_r+0x864>
 800dad0:	883e      	ldrh	r6, [r7, #0]
 800dad2:	2700      	movs	r7, #0
 800dad4:	e7d6      	b.n	800da84 <_vfprintf_r+0x824>
 800dad6:	1d3b      	adds	r3, r7, #4
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	2330      	movs	r3, #48	; 0x30
 800dadc:	2278      	movs	r2, #120	; 0x78
 800dade:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800dae2:	4b14      	ldr	r3, [pc, #80]	; (800db34 <_vfprintf_r+0x8d4>)
 800dae4:	683e      	ldr	r6, [r7, #0]
 800dae6:	9311      	str	r3, [sp, #68]	; 0x44
 800dae8:	2700      	movs	r7, #0
 800daea:	f045 0502 	orr.w	r5, r5, #2
 800daee:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800daf2:	2302      	movs	r3, #2
 800daf4:	9202      	str	r2, [sp, #8]
 800daf6:	e7c6      	b.n	800da86 <_vfprintf_r+0x826>
 800daf8:	1d3b      	adds	r3, r7, #4
 800dafa:	2600      	movs	r6, #0
 800dafc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	f8d7 9000 	ldr.w	r9, [r7]
 800db06:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800db0a:	d00a      	beq.n	800db22 <_vfprintf_r+0x8c2>
 800db0c:	4652      	mov	r2, sl
 800db0e:	4631      	mov	r1, r6
 800db10:	4648      	mov	r0, r9
 800db12:	f7f2 fb75 	bl	8000200 <memchr>
 800db16:	2800      	cmp	r0, #0
 800db18:	f000 808c 	beq.w	800dc34 <_vfprintf_r+0x9d4>
 800db1c:	eba0 0a09 	sub.w	sl, r0, r9
 800db20:	e5cb      	b.n	800d6ba <_vfprintf_r+0x45a>
 800db22:	4648      	mov	r0, r9
 800db24:	f7f2 fb5e 	bl	80001e4 <strlen>
 800db28:	4682      	mov	sl, r0
 800db2a:	e5c6      	b.n	800d6ba <_vfprintf_r+0x45a>
 800db2c:	08010916 	.word	0x08010916
 800db30:	08010926 	.word	0x08010926
 800db34:	080108e3 	.word	0x080108e3
 800db38:	f045 0510 	orr.w	r5, r5, #16
 800db3c:	06ae      	lsls	r6, r5, #26
 800db3e:	d509      	bpl.n	800db54 <_vfprintf_r+0x8f4>
 800db40:	3707      	adds	r7, #7
 800db42:	f027 0707 	bic.w	r7, r7, #7
 800db46:	f107 0308 	add.w	r3, r7, #8
 800db4a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	2301      	movs	r3, #1
 800db52:	e798      	b.n	800da86 <_vfprintf_r+0x826>
 800db54:	1d3b      	adds	r3, r7, #4
 800db56:	f015 0f10 	tst.w	r5, #16
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	d001      	beq.n	800db62 <_vfprintf_r+0x902>
 800db5e:	683e      	ldr	r6, [r7, #0]
 800db60:	e002      	b.n	800db68 <_vfprintf_r+0x908>
 800db62:	0668      	lsls	r0, r5, #25
 800db64:	d5fb      	bpl.n	800db5e <_vfprintf_r+0x8fe>
 800db66:	883e      	ldrh	r6, [r7, #0]
 800db68:	2700      	movs	r7, #0
 800db6a:	e7f1      	b.n	800db50 <_vfprintf_r+0x8f0>
 800db6c:	b10b      	cbz	r3, 800db72 <_vfprintf_r+0x912>
 800db6e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800db72:	4ba2      	ldr	r3, [pc, #648]	; (800ddfc <_vfprintf_r+0xb9c>)
 800db74:	e4ca      	b.n	800d50c <_vfprintf_r+0x2ac>
 800db76:	1d3b      	adds	r3, r7, #4
 800db78:	f015 0f10 	tst.w	r5, #16
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	d001      	beq.n	800db84 <_vfprintf_r+0x924>
 800db80:	683e      	ldr	r6, [r7, #0]
 800db82:	e002      	b.n	800db8a <_vfprintf_r+0x92a>
 800db84:	066a      	lsls	r2, r5, #25
 800db86:	d5fb      	bpl.n	800db80 <_vfprintf_r+0x920>
 800db88:	883e      	ldrh	r6, [r7, #0]
 800db8a:	2700      	movs	r7, #0
 800db8c:	e4ca      	b.n	800d524 <_vfprintf_r+0x2c4>
 800db8e:	464b      	mov	r3, r9
 800db90:	e374      	b.n	800e27c <_vfprintf_r+0x101c>
 800db92:	2f00      	cmp	r7, #0
 800db94:	bf08      	it	eq
 800db96:	2e0a      	cmpeq	r6, #10
 800db98:	d205      	bcs.n	800dba6 <_vfprintf_r+0x946>
 800db9a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800db9e:	3630      	adds	r6, #48	; 0x30
 800dba0:	f809 6d41 	strb.w	r6, [r9, #-65]!
 800dba4:	e385      	b.n	800e2b2 <_vfprintf_r+0x1052>
 800dba6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800dbaa:	4630      	mov	r0, r6
 800dbac:	4639      	mov	r1, r7
 800dbae:	220a      	movs	r2, #10
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f7f3 f825 	bl	8000c00 <__aeabi_uldivmod>
 800dbb6:	3230      	adds	r2, #48	; 0x30
 800dbb8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	220a      	movs	r2, #10
 800dbc4:	f7f3 f81c 	bl	8000c00 <__aeabi_uldivmod>
 800dbc8:	4606      	mov	r6, r0
 800dbca:	460f      	mov	r7, r1
 800dbcc:	ea56 0307 	orrs.w	r3, r6, r7
 800dbd0:	d1eb      	bne.n	800dbaa <_vfprintf_r+0x94a>
 800dbd2:	e36e      	b.n	800e2b2 <_vfprintf_r+0x1052>
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	2700      	movs	r7, #0
 800dbd8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800dbdc:	f006 030f 	and.w	r3, r6, #15
 800dbe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dbe2:	5cd3      	ldrb	r3, [r2, r3]
 800dbe4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800dbe8:	0933      	lsrs	r3, r6, #4
 800dbea:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800dbee:	093a      	lsrs	r2, r7, #4
 800dbf0:	461e      	mov	r6, r3
 800dbf2:	4617      	mov	r7, r2
 800dbf4:	ea56 0307 	orrs.w	r3, r6, r7
 800dbf8:	d1f0      	bne.n	800dbdc <_vfprintf_r+0x97c>
 800dbfa:	e35a      	b.n	800e2b2 <_vfprintf_r+0x1052>
 800dbfc:	b93b      	cbnz	r3, 800dc0e <_vfprintf_r+0x9ae>
 800dbfe:	07e8      	lsls	r0, r5, #31
 800dc00:	d505      	bpl.n	800dc0e <_vfprintf_r+0x9ae>
 800dc02:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800dc06:	2330      	movs	r3, #48	; 0x30
 800dc08:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800dc0c:	e351      	b.n	800e2b2 <_vfprintf_r+0x1052>
 800dc0e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800dc12:	e34e      	b.n	800e2b2 <_vfprintf_r+0x1052>
 800dc14:	b10b      	cbz	r3, 800dc1a <_vfprintf_r+0x9ba>
 800dc16:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800dc1a:	9b02      	ldr	r3, [sp, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 8302 	beq.w	800e226 <_vfprintf_r+0xfc6>
 800dc22:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dc26:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800dc2a:	2600      	movs	r6, #0
 800dc2c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800dc30:	9704      	str	r7, [sp, #16]
 800dc32:	e4e9      	b.n	800d608 <_vfprintf_r+0x3a8>
 800dc34:	4606      	mov	r6, r0
 800dc36:	e540      	b.n	800d6ba <_vfprintf_r+0x45a>
 800dc38:	2310      	movs	r3, #16
 800dc3a:	6063      	str	r3, [r4, #4]
 800dc3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc3e:	3310      	adds	r3, #16
 800dc40:	9321      	str	r3, [sp, #132]	; 0x84
 800dc42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc44:	3301      	adds	r3, #1
 800dc46:	2b07      	cmp	r3, #7
 800dc48:	9320      	str	r3, [sp, #128]	; 0x80
 800dc4a:	dc02      	bgt.n	800dc52 <_vfprintf_r+0x9f2>
 800dc4c:	3408      	adds	r4, #8
 800dc4e:	3f10      	subs	r7, #16
 800dc50:	e61a      	b.n	800d888 <_vfprintf_r+0x628>
 800dc52:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc54:	4641      	mov	r1, r8
 800dc56:	4658      	mov	r0, fp
 800dc58:	f002 f9ec 	bl	8010034 <__sprint_r>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	f040 82ba 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dc62:	ac2c      	add	r4, sp, #176	; 0xb0
 800dc64:	e7f3      	b.n	800dc4e <_vfprintf_r+0x9ee>
 800dc66:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc68:	4641      	mov	r1, r8
 800dc6a:	4658      	mov	r0, fp
 800dc6c:	f002 f9e2 	bl	8010034 <__sprint_r>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	f040 82b0 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dc76:	ac2c      	add	r4, sp, #176	; 0xb0
 800dc78:	e616      	b.n	800d8a8 <_vfprintf_r+0x648>
 800dc7a:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc7c:	4641      	mov	r1, r8
 800dc7e:	4658      	mov	r0, fp
 800dc80:	f002 f9d8 	bl	8010034 <__sprint_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f040 82a6 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dc8a:	ac2c      	add	r4, sp, #176	; 0xb0
 800dc8c:	e61e      	b.n	800d8cc <_vfprintf_r+0x66c>
 800dc8e:	aa1f      	add	r2, sp, #124	; 0x7c
 800dc90:	4641      	mov	r1, r8
 800dc92:	4658      	mov	r0, fp
 800dc94:	f002 f9ce 	bl	8010034 <__sprint_r>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	f040 829c 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dc9e:	ac2c      	add	r4, sp, #176	; 0xb0
 800dca0:	e624      	b.n	800d8ec <_vfprintf_r+0x68c>
 800dca2:	2210      	movs	r2, #16
 800dca4:	6062      	str	r2, [r4, #4]
 800dca6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dca8:	3210      	adds	r2, #16
 800dcaa:	9221      	str	r2, [sp, #132]	; 0x84
 800dcac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dcae:	3201      	adds	r2, #1
 800dcb0:	2a07      	cmp	r2, #7
 800dcb2:	9220      	str	r2, [sp, #128]	; 0x80
 800dcb4:	dc02      	bgt.n	800dcbc <_vfprintf_r+0xa5c>
 800dcb6:	3408      	adds	r4, #8
 800dcb8:	3f10      	subs	r7, #16
 800dcba:	e620      	b.n	800d8fe <_vfprintf_r+0x69e>
 800dcbc:	aa1f      	add	r2, sp, #124	; 0x7c
 800dcbe:	4641      	mov	r1, r8
 800dcc0:	4658      	mov	r0, fp
 800dcc2:	9314      	str	r3, [sp, #80]	; 0x50
 800dcc4:	f002 f9b6 	bl	8010034 <__sprint_r>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	f040 8284 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dcce:	ac2c      	add	r4, sp, #176	; 0xb0
 800dcd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcd2:	e7f1      	b.n	800dcb8 <_vfprintf_r+0xa58>
 800dcd4:	aa1f      	add	r2, sp, #124	; 0x7c
 800dcd6:	4641      	mov	r1, r8
 800dcd8:	4658      	mov	r0, fp
 800dcda:	f002 f9ab 	bl	8010034 <__sprint_r>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	f040 8279 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dce4:	ac2c      	add	r4, sp, #176	; 0xb0
 800dce6:	e619      	b.n	800d91c <_vfprintf_r+0x6bc>
 800dce8:	2310      	movs	r3, #16
 800dcea:	6063      	str	r3, [r4, #4]
 800dcec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcee:	3310      	adds	r3, #16
 800dcf0:	9321      	str	r3, [sp, #132]	; 0x84
 800dcf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	2b07      	cmp	r3, #7
 800dcf8:	9320      	str	r3, [sp, #128]	; 0x80
 800dcfa:	dc02      	bgt.n	800dd02 <_vfprintf_r+0xaa2>
 800dcfc:	3408      	adds	r4, #8
 800dcfe:	3e10      	subs	r6, #16
 800dd00:	e611      	b.n	800d926 <_vfprintf_r+0x6c6>
 800dd02:	aa1f      	add	r2, sp, #124	; 0x7c
 800dd04:	4641      	mov	r1, r8
 800dd06:	4658      	mov	r0, fp
 800dd08:	f002 f994 	bl	8010034 <__sprint_r>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f040 8262 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dd12:	ac2c      	add	r4, sp, #176	; 0xb0
 800dd14:	e7f3      	b.n	800dcfe <_vfprintf_r+0xa9e>
 800dd16:	aa1f      	add	r2, sp, #124	; 0x7c
 800dd18:	4641      	mov	r1, r8
 800dd1a:	4658      	mov	r0, fp
 800dd1c:	f002 f98a 	bl	8010034 <__sprint_r>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f040 8258 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dd26:	ac2c      	add	r4, sp, #176	; 0xb0
 800dd28:	e60c      	b.n	800d944 <_vfprintf_r+0x6e4>
 800dd2a:	9b02      	ldr	r3, [sp, #8]
 800dd2c:	2b65      	cmp	r3, #101	; 0x65
 800dd2e:	f340 81ad 	ble.w	800e08c <_vfprintf_r+0xe2c>
 800dd32:	2200      	movs	r2, #0
 800dd34:	2300      	movs	r3, #0
 800dd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd3a:	f7f2 fed1 	bl	8000ae0 <__aeabi_dcmpeq>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d062      	beq.n	800de08 <_vfprintf_r+0xba8>
 800dd42:	4b2f      	ldr	r3, [pc, #188]	; (800de00 <_vfprintf_r+0xba0>)
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	2301      	movs	r3, #1
 800dd48:	6063      	str	r3, [r4, #4]
 800dd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	9321      	str	r3, [sp, #132]	; 0x84
 800dd50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dd52:	3301      	adds	r3, #1
 800dd54:	2b07      	cmp	r3, #7
 800dd56:	9320      	str	r3, [sp, #128]	; 0x80
 800dd58:	dc25      	bgt.n	800dda6 <_vfprintf_r+0xb46>
 800dd5a:	3408      	adds	r4, #8
 800dd5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd5e:	9a03      	ldr	r2, [sp, #12]
 800dd60:	4293      	cmp	r3, r2
 800dd62:	db02      	blt.n	800dd6a <_vfprintf_r+0xb0a>
 800dd64:	07ea      	lsls	r2, r5, #31
 800dd66:	f57f ae04 	bpl.w	800d972 <_vfprintf_r+0x712>
 800dd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd76:	4413      	add	r3, r2
 800dd78:	9321      	str	r3, [sp, #132]	; 0x84
 800dd7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	2b07      	cmp	r3, #7
 800dd80:	9320      	str	r3, [sp, #128]	; 0x80
 800dd82:	dc1a      	bgt.n	800ddba <_vfprintf_r+0xb5a>
 800dd84:	3408      	adds	r4, #8
 800dd86:	9b03      	ldr	r3, [sp, #12]
 800dd88:	1e5e      	subs	r6, r3, #1
 800dd8a:	2e00      	cmp	r6, #0
 800dd8c:	f77f adf1 	ble.w	800d972 <_vfprintf_r+0x712>
 800dd90:	4f1c      	ldr	r7, [pc, #112]	; (800de04 <_vfprintf_r+0xba4>)
 800dd92:	f04f 0910 	mov.w	r9, #16
 800dd96:	2e10      	cmp	r6, #16
 800dd98:	6027      	str	r7, [r4, #0]
 800dd9a:	dc18      	bgt.n	800ddce <_vfprintf_r+0xb6e>
 800dd9c:	6066      	str	r6, [r4, #4]
 800dd9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dda0:	441e      	add	r6, r3
 800dda2:	9621      	str	r6, [sp, #132]	; 0x84
 800dda4:	e5d6      	b.n	800d954 <_vfprintf_r+0x6f4>
 800dda6:	aa1f      	add	r2, sp, #124	; 0x7c
 800dda8:	4641      	mov	r1, r8
 800ddaa:	4658      	mov	r0, fp
 800ddac:	f002 f942 	bl	8010034 <__sprint_r>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	f040 8210 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800ddb6:	ac2c      	add	r4, sp, #176	; 0xb0
 800ddb8:	e7d0      	b.n	800dd5c <_vfprintf_r+0xafc>
 800ddba:	aa1f      	add	r2, sp, #124	; 0x7c
 800ddbc:	4641      	mov	r1, r8
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f002 f938 	bl	8010034 <__sprint_r>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f040 8206 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800ddca:	ac2c      	add	r4, sp, #176	; 0xb0
 800ddcc:	e7db      	b.n	800dd86 <_vfprintf_r+0xb26>
 800ddce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddd0:	f8c4 9004 	str.w	r9, [r4, #4]
 800ddd4:	3310      	adds	r3, #16
 800ddd6:	9321      	str	r3, [sp, #132]	; 0x84
 800ddd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ddda:	3301      	adds	r3, #1
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	9320      	str	r3, [sp, #128]	; 0x80
 800dde0:	dc02      	bgt.n	800dde8 <_vfprintf_r+0xb88>
 800dde2:	3408      	adds	r4, #8
 800dde4:	3e10      	subs	r6, #16
 800dde6:	e7d6      	b.n	800dd96 <_vfprintf_r+0xb36>
 800dde8:	aa1f      	add	r2, sp, #124	; 0x7c
 800ddea:	4641      	mov	r1, r8
 800ddec:	4658      	mov	r0, fp
 800ddee:	f002 f921 	bl	8010034 <__sprint_r>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f040 81ef 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800ddf8:	ac2c      	add	r4, sp, #176	; 0xb0
 800ddfa:	e7f3      	b.n	800dde4 <_vfprintf_r+0xb84>
 800ddfc:	080108e3 	.word	0x080108e3
 800de00:	080108f4 	.word	0x080108f4
 800de04:	08010926 	.word	0x08010926
 800de08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dc7a      	bgt.n	800df04 <_vfprintf_r+0xca4>
 800de0e:	4b9d      	ldr	r3, [pc, #628]	; (800e084 <_vfprintf_r+0xe24>)
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	2301      	movs	r3, #1
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de18:	3301      	adds	r3, #1
 800de1a:	9321      	str	r3, [sp, #132]	; 0x84
 800de1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de1e:	3301      	adds	r3, #1
 800de20:	2b07      	cmp	r3, #7
 800de22:	9320      	str	r3, [sp, #128]	; 0x80
 800de24:	dc44      	bgt.n	800deb0 <_vfprintf_r+0xc50>
 800de26:	3408      	adds	r4, #8
 800de28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de2a:	b923      	cbnz	r3, 800de36 <_vfprintf_r+0xbd6>
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	b913      	cbnz	r3, 800de36 <_vfprintf_r+0xbd6>
 800de30:	07eb      	lsls	r3, r5, #31
 800de32:	f57f ad9e 	bpl.w	800d972 <_vfprintf_r+0x712>
 800de36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3c:	6063      	str	r3, [r4, #4]
 800de3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de42:	4413      	add	r3, r2
 800de44:	9321      	str	r3, [sp, #132]	; 0x84
 800de46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800de48:	3301      	adds	r3, #1
 800de4a:	2b07      	cmp	r3, #7
 800de4c:	9320      	str	r3, [sp, #128]	; 0x80
 800de4e:	dc39      	bgt.n	800dec4 <_vfprintf_r+0xc64>
 800de50:	f104 0308 	add.w	r3, r4, #8
 800de54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800de56:	2e00      	cmp	r6, #0
 800de58:	da19      	bge.n	800de8e <_vfprintf_r+0xc2e>
 800de5a:	4f8b      	ldr	r7, [pc, #556]	; (800e088 <_vfprintf_r+0xe28>)
 800de5c:	4276      	negs	r6, r6
 800de5e:	2410      	movs	r4, #16
 800de60:	2e10      	cmp	r6, #16
 800de62:	601f      	str	r7, [r3, #0]
 800de64:	dc38      	bgt.n	800ded8 <_vfprintf_r+0xc78>
 800de66:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de68:	605e      	str	r6, [r3, #4]
 800de6a:	4416      	add	r6, r2
 800de6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de6e:	9621      	str	r6, [sp, #132]	; 0x84
 800de70:	3201      	adds	r2, #1
 800de72:	2a07      	cmp	r2, #7
 800de74:	f103 0308 	add.w	r3, r3, #8
 800de78:	9220      	str	r2, [sp, #128]	; 0x80
 800de7a:	dd08      	ble.n	800de8e <_vfprintf_r+0xc2e>
 800de7c:	aa1f      	add	r2, sp, #124	; 0x7c
 800de7e:	4641      	mov	r1, r8
 800de80:	4658      	mov	r0, fp
 800de82:	f002 f8d7 	bl	8010034 <__sprint_r>
 800de86:	2800      	cmp	r0, #0
 800de88:	f040 81a5 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800de8c:	ab2c      	add	r3, sp, #176	; 0xb0
 800de8e:	9a03      	ldr	r2, [sp, #12]
 800de90:	605a      	str	r2, [r3, #4]
 800de92:	9903      	ldr	r1, [sp, #12]
 800de94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de96:	f8c3 9000 	str.w	r9, [r3]
 800de9a:	440a      	add	r2, r1
 800de9c:	9221      	str	r2, [sp, #132]	; 0x84
 800de9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dea0:	3201      	adds	r2, #1
 800dea2:	2a07      	cmp	r2, #7
 800dea4:	9220      	str	r2, [sp, #128]	; 0x80
 800dea6:	f73f ad5b 	bgt.w	800d960 <_vfprintf_r+0x700>
 800deaa:	f103 0408 	add.w	r4, r3, #8
 800deae:	e560      	b.n	800d972 <_vfprintf_r+0x712>
 800deb0:	aa1f      	add	r2, sp, #124	; 0x7c
 800deb2:	4641      	mov	r1, r8
 800deb4:	4658      	mov	r0, fp
 800deb6:	f002 f8bd 	bl	8010034 <__sprint_r>
 800deba:	2800      	cmp	r0, #0
 800debc:	f040 818b 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800dec0:	ac2c      	add	r4, sp, #176	; 0xb0
 800dec2:	e7b1      	b.n	800de28 <_vfprintf_r+0xbc8>
 800dec4:	aa1f      	add	r2, sp, #124	; 0x7c
 800dec6:	4641      	mov	r1, r8
 800dec8:	4658      	mov	r0, fp
 800deca:	f002 f8b3 	bl	8010034 <__sprint_r>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f040 8181 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800ded4:	ab2c      	add	r3, sp, #176	; 0xb0
 800ded6:	e7bd      	b.n	800de54 <_vfprintf_r+0xbf4>
 800ded8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800deda:	605c      	str	r4, [r3, #4]
 800dedc:	3210      	adds	r2, #16
 800dede:	9221      	str	r2, [sp, #132]	; 0x84
 800dee0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dee2:	3201      	adds	r2, #1
 800dee4:	2a07      	cmp	r2, #7
 800dee6:	9220      	str	r2, [sp, #128]	; 0x80
 800dee8:	dc02      	bgt.n	800def0 <_vfprintf_r+0xc90>
 800deea:	3308      	adds	r3, #8
 800deec:	3e10      	subs	r6, #16
 800deee:	e7b7      	b.n	800de60 <_vfprintf_r+0xc00>
 800def0:	aa1f      	add	r2, sp, #124	; 0x7c
 800def2:	4641      	mov	r1, r8
 800def4:	4658      	mov	r0, fp
 800def6:	f002 f89d 	bl	8010034 <__sprint_r>
 800defa:	2800      	cmp	r0, #0
 800defc:	f040 816b 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800df00:	ab2c      	add	r3, sp, #176	; 0xb0
 800df02:	e7f3      	b.n	800deec <_vfprintf_r+0xc8c>
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	9a03      	ldr	r2, [sp, #12]
 800df08:	4293      	cmp	r3, r2
 800df0a:	bfa8      	it	ge
 800df0c:	4613      	movge	r3, r2
 800df0e:	2b00      	cmp	r3, #0
 800df10:	461e      	mov	r6, r3
 800df12:	dd0b      	ble.n	800df2c <_vfprintf_r+0xccc>
 800df14:	6063      	str	r3, [r4, #4]
 800df16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df18:	f8c4 9000 	str.w	r9, [r4]
 800df1c:	4433      	add	r3, r6
 800df1e:	9321      	str	r3, [sp, #132]	; 0x84
 800df20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df22:	3301      	adds	r3, #1
 800df24:	2b07      	cmp	r3, #7
 800df26:	9320      	str	r3, [sp, #128]	; 0x80
 800df28:	dc62      	bgt.n	800dff0 <_vfprintf_r+0xd90>
 800df2a:	3408      	adds	r4, #8
 800df2c:	9b08      	ldr	r3, [sp, #32]
 800df2e:	2e00      	cmp	r6, #0
 800df30:	bfa8      	it	ge
 800df32:	1b9b      	subge	r3, r3, r6
 800df34:	2b00      	cmp	r3, #0
 800df36:	461e      	mov	r6, r3
 800df38:	dd0f      	ble.n	800df5a <_vfprintf_r+0xcfa>
 800df3a:	4f53      	ldr	r7, [pc, #332]	; (800e088 <_vfprintf_r+0xe28>)
 800df3c:	f04f 0a10 	mov.w	sl, #16
 800df40:	2e10      	cmp	r6, #16
 800df42:	6027      	str	r7, [r4, #0]
 800df44:	dc5e      	bgt.n	800e004 <_vfprintf_r+0xda4>
 800df46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df48:	6066      	str	r6, [r4, #4]
 800df4a:	441e      	add	r6, r3
 800df4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df4e:	9621      	str	r6, [sp, #132]	; 0x84
 800df50:	3301      	adds	r3, #1
 800df52:	2b07      	cmp	r3, #7
 800df54:	9320      	str	r3, [sp, #128]	; 0x80
 800df56:	dc6c      	bgt.n	800e032 <_vfprintf_r+0xdd2>
 800df58:	3408      	adds	r4, #8
 800df5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df5c:	9a03      	ldr	r2, [sp, #12]
 800df5e:	4293      	cmp	r3, r2
 800df60:	db01      	blt.n	800df66 <_vfprintf_r+0xd06>
 800df62:	07ef      	lsls	r7, r5, #31
 800df64:	d50d      	bpl.n	800df82 <_vfprintf_r+0xd22>
 800df66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df72:	4413      	add	r3, r2
 800df74:	9321      	str	r3, [sp, #132]	; 0x84
 800df76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df78:	3301      	adds	r3, #1
 800df7a:	2b07      	cmp	r3, #7
 800df7c:	9320      	str	r3, [sp, #128]	; 0x80
 800df7e:	dc62      	bgt.n	800e046 <_vfprintf_r+0xde6>
 800df80:	3408      	adds	r4, #8
 800df82:	9b03      	ldr	r3, [sp, #12]
 800df84:	9a08      	ldr	r2, [sp, #32]
 800df86:	1a9e      	subs	r6, r3, r2
 800df88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df8a:	9a03      	ldr	r2, [sp, #12]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	429e      	cmp	r6, r3
 800df90:	bfa8      	it	ge
 800df92:	461e      	movge	r6, r3
 800df94:	2e00      	cmp	r6, #0
 800df96:	dd0c      	ble.n	800dfb2 <_vfprintf_r+0xd52>
 800df98:	9b08      	ldr	r3, [sp, #32]
 800df9a:	444b      	add	r3, r9
 800df9c:	e884 0048 	stmia.w	r4, {r3, r6}
 800dfa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfa2:	4433      	add	r3, r6
 800dfa4:	9321      	str	r3, [sp, #132]	; 0x84
 800dfa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	2b07      	cmp	r3, #7
 800dfac:	9320      	str	r3, [sp, #128]	; 0x80
 800dfae:	dc54      	bgt.n	800e05a <_vfprintf_r+0xdfa>
 800dfb0:	3408      	adds	r4, #8
 800dfb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfb4:	9a03      	ldr	r2, [sp, #12]
 800dfb6:	2e00      	cmp	r6, #0
 800dfb8:	eba2 0303 	sub.w	r3, r2, r3
 800dfbc:	bfac      	ite	ge
 800dfbe:	1b9e      	subge	r6, r3, r6
 800dfc0:	461e      	movlt	r6, r3
 800dfc2:	2e00      	cmp	r6, #0
 800dfc4:	f77f acd5 	ble.w	800d972 <_vfprintf_r+0x712>
 800dfc8:	4f2f      	ldr	r7, [pc, #188]	; (800e088 <_vfprintf_r+0xe28>)
 800dfca:	f04f 0910 	mov.w	r9, #16
 800dfce:	2e10      	cmp	r6, #16
 800dfd0:	6027      	str	r7, [r4, #0]
 800dfd2:	f77f aee3 	ble.w	800dd9c <_vfprintf_r+0xb3c>
 800dfd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfd8:	f8c4 9004 	str.w	r9, [r4, #4]
 800dfdc:	3310      	adds	r3, #16
 800dfde:	9321      	str	r3, [sp, #132]	; 0x84
 800dfe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	2b07      	cmp	r3, #7
 800dfe6:	9320      	str	r3, [sp, #128]	; 0x80
 800dfe8:	dc41      	bgt.n	800e06e <_vfprintf_r+0xe0e>
 800dfea:	3408      	adds	r4, #8
 800dfec:	3e10      	subs	r6, #16
 800dfee:	e7ee      	b.n	800dfce <_vfprintf_r+0xd6e>
 800dff0:	aa1f      	add	r2, sp, #124	; 0x7c
 800dff2:	4641      	mov	r1, r8
 800dff4:	4658      	mov	r0, fp
 800dff6:	f002 f81d 	bl	8010034 <__sprint_r>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	f040 80eb 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e000:	ac2c      	add	r4, sp, #176	; 0xb0
 800e002:	e793      	b.n	800df2c <_vfprintf_r+0xccc>
 800e004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e006:	f8c4 a004 	str.w	sl, [r4, #4]
 800e00a:	3310      	adds	r3, #16
 800e00c:	9321      	str	r3, [sp, #132]	; 0x84
 800e00e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e010:	3301      	adds	r3, #1
 800e012:	2b07      	cmp	r3, #7
 800e014:	9320      	str	r3, [sp, #128]	; 0x80
 800e016:	dc02      	bgt.n	800e01e <_vfprintf_r+0xdbe>
 800e018:	3408      	adds	r4, #8
 800e01a:	3e10      	subs	r6, #16
 800e01c:	e790      	b.n	800df40 <_vfprintf_r+0xce0>
 800e01e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e020:	4641      	mov	r1, r8
 800e022:	4658      	mov	r0, fp
 800e024:	f002 f806 	bl	8010034 <__sprint_r>
 800e028:	2800      	cmp	r0, #0
 800e02a:	f040 80d4 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e02e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e030:	e7f3      	b.n	800e01a <_vfprintf_r+0xdba>
 800e032:	aa1f      	add	r2, sp, #124	; 0x7c
 800e034:	4641      	mov	r1, r8
 800e036:	4658      	mov	r0, fp
 800e038:	f001 fffc 	bl	8010034 <__sprint_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	f040 80ca 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e042:	ac2c      	add	r4, sp, #176	; 0xb0
 800e044:	e789      	b.n	800df5a <_vfprintf_r+0xcfa>
 800e046:	aa1f      	add	r2, sp, #124	; 0x7c
 800e048:	4641      	mov	r1, r8
 800e04a:	4658      	mov	r0, fp
 800e04c:	f001 fff2 	bl	8010034 <__sprint_r>
 800e050:	2800      	cmp	r0, #0
 800e052:	f040 80c0 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e056:	ac2c      	add	r4, sp, #176	; 0xb0
 800e058:	e793      	b.n	800df82 <_vfprintf_r+0xd22>
 800e05a:	aa1f      	add	r2, sp, #124	; 0x7c
 800e05c:	4641      	mov	r1, r8
 800e05e:	4658      	mov	r0, fp
 800e060:	f001 ffe8 	bl	8010034 <__sprint_r>
 800e064:	2800      	cmp	r0, #0
 800e066:	f040 80b6 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e06a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e06c:	e7a1      	b.n	800dfb2 <_vfprintf_r+0xd52>
 800e06e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e070:	4641      	mov	r1, r8
 800e072:	4658      	mov	r0, fp
 800e074:	f001 ffde 	bl	8010034 <__sprint_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	f040 80ac 	bne.w	800e1d6 <_vfprintf_r+0xf76>
 800e07e:	ac2c      	add	r4, sp, #176	; 0xb0
 800e080:	e7b4      	b.n	800dfec <_vfprintf_r+0xd8c>
 800e082:	bf00      	nop
 800e084:	080108f4 	.word	0x080108f4
 800e088:	08010926 	.word	0x08010926
 800e08c:	9b03      	ldr	r3, [sp, #12]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	dc01      	bgt.n	800e096 <_vfprintf_r+0xe36>
 800e092:	07ee      	lsls	r6, r5, #31
 800e094:	d576      	bpl.n	800e184 <_vfprintf_r+0xf24>
 800e096:	2301      	movs	r3, #1
 800e098:	6063      	str	r3, [r4, #4]
 800e09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e09c:	f8c4 9000 	str.w	r9, [r4]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	9321      	str	r3, [sp, #132]	; 0x84
 800e0a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	2b07      	cmp	r3, #7
 800e0aa:	9320      	str	r3, [sp, #128]	; 0x80
 800e0ac:	dc36      	bgt.n	800e11c <_vfprintf_r+0xebc>
 800e0ae:	3408      	adds	r4, #8
 800e0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0b2:	6023      	str	r3, [r4, #0]
 800e0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b6:	6063      	str	r3, [r4, #4]
 800e0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0bc:	4413      	add	r3, r2
 800e0be:	9321      	str	r3, [sp, #132]	; 0x84
 800e0c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	2b07      	cmp	r3, #7
 800e0c6:	9320      	str	r3, [sp, #128]	; 0x80
 800e0c8:	dc31      	bgt.n	800e12e <_vfprintf_r+0xece>
 800e0ca:	3408      	adds	r4, #8
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0d4:	f7f2 fd04 	bl	8000ae0 <__aeabi_dcmpeq>
 800e0d8:	9b03      	ldr	r3, [sp, #12]
 800e0da:	1e5e      	subs	r6, r3, #1
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d12f      	bne.n	800e140 <_vfprintf_r+0xee0>
 800e0e0:	f109 0301 	add.w	r3, r9, #1
 800e0e4:	e884 0048 	stmia.w	r4, {r3, r6}
 800e0e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ea:	9a03      	ldr	r2, [sp, #12]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	4413      	add	r3, r2
 800e0f0:	9321      	str	r3, [sp, #132]	; 0x84
 800e0f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	2b07      	cmp	r3, #7
 800e0f8:	9320      	str	r3, [sp, #128]	; 0x80
 800e0fa:	dd4a      	ble.n	800e192 <_vfprintf_r+0xf32>
 800e0fc:	aa1f      	add	r2, sp, #124	; 0x7c
 800e0fe:	4641      	mov	r1, r8
 800e100:	4658      	mov	r0, fp
 800e102:	f001 ff97 	bl	8010034 <__sprint_r>
 800e106:	2800      	cmp	r0, #0
 800e108:	d165      	bne.n	800e1d6 <_vfprintf_r+0xf76>
 800e10a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e10c:	ab1b      	add	r3, sp, #108	; 0x6c
 800e10e:	6023      	str	r3, [r4, #0]
 800e110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e112:	6063      	str	r3, [r4, #4]
 800e114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e118:	4413      	add	r3, r2
 800e11a:	e41a      	b.n	800d952 <_vfprintf_r+0x6f2>
 800e11c:	aa1f      	add	r2, sp, #124	; 0x7c
 800e11e:	4641      	mov	r1, r8
 800e120:	4658      	mov	r0, fp
 800e122:	f001 ff87 	bl	8010034 <__sprint_r>
 800e126:	2800      	cmp	r0, #0
 800e128:	d155      	bne.n	800e1d6 <_vfprintf_r+0xf76>
 800e12a:	ac2c      	add	r4, sp, #176	; 0xb0
 800e12c:	e7c0      	b.n	800e0b0 <_vfprintf_r+0xe50>
 800e12e:	aa1f      	add	r2, sp, #124	; 0x7c
 800e130:	4641      	mov	r1, r8
 800e132:	4658      	mov	r0, fp
 800e134:	f001 ff7e 	bl	8010034 <__sprint_r>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d14c      	bne.n	800e1d6 <_vfprintf_r+0xf76>
 800e13c:	ac2c      	add	r4, sp, #176	; 0xb0
 800e13e:	e7c5      	b.n	800e0cc <_vfprintf_r+0xe6c>
 800e140:	2e00      	cmp	r6, #0
 800e142:	dde3      	ble.n	800e10c <_vfprintf_r+0xeac>
 800e144:	4f60      	ldr	r7, [pc, #384]	; (800e2c8 <_vfprintf_r+0x1068>)
 800e146:	f04f 0910 	mov.w	r9, #16
 800e14a:	2e10      	cmp	r6, #16
 800e14c:	6027      	str	r7, [r4, #0]
 800e14e:	dc04      	bgt.n	800e15a <_vfprintf_r+0xefa>
 800e150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e152:	6066      	str	r6, [r4, #4]
 800e154:	441e      	add	r6, r3
 800e156:	9621      	str	r6, [sp, #132]	; 0x84
 800e158:	e7cb      	b.n	800e0f2 <_vfprintf_r+0xe92>
 800e15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e15c:	f8c4 9004 	str.w	r9, [r4, #4]
 800e160:	3310      	adds	r3, #16
 800e162:	9321      	str	r3, [sp, #132]	; 0x84
 800e164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e166:	3301      	adds	r3, #1
 800e168:	2b07      	cmp	r3, #7
 800e16a:	9320      	str	r3, [sp, #128]	; 0x80
 800e16c:	dc02      	bgt.n	800e174 <_vfprintf_r+0xf14>
 800e16e:	3408      	adds	r4, #8
 800e170:	3e10      	subs	r6, #16
 800e172:	e7ea      	b.n	800e14a <_vfprintf_r+0xeea>
 800e174:	aa1f      	add	r2, sp, #124	; 0x7c
 800e176:	4641      	mov	r1, r8
 800e178:	4658      	mov	r0, fp
 800e17a:	f001 ff5b 	bl	8010034 <__sprint_r>
 800e17e:	bb50      	cbnz	r0, 800e1d6 <_vfprintf_r+0xf76>
 800e180:	ac2c      	add	r4, sp, #176	; 0xb0
 800e182:	e7f5      	b.n	800e170 <_vfprintf_r+0xf10>
 800e184:	2301      	movs	r3, #1
 800e186:	6063      	str	r3, [r4, #4]
 800e188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e18a:	f8c4 9000 	str.w	r9, [r4]
 800e18e:	3301      	adds	r3, #1
 800e190:	e7ae      	b.n	800e0f0 <_vfprintf_r+0xe90>
 800e192:	3408      	adds	r4, #8
 800e194:	e7ba      	b.n	800e10c <_vfprintf_r+0xeac>
 800e196:	3408      	adds	r4, #8
 800e198:	f7ff bbeb 	b.w	800d972 <_vfprintf_r+0x712>
 800e19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e19e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1a0:	1a9d      	subs	r5, r3, r2
 800e1a2:	2d00      	cmp	r5, #0
 800e1a4:	f77f abe8 	ble.w	800d978 <_vfprintf_r+0x718>
 800e1a8:	2610      	movs	r6, #16
 800e1aa:	4b48      	ldr	r3, [pc, #288]	; (800e2cc <_vfprintf_r+0x106c>)
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	2d10      	cmp	r5, #16
 800e1b0:	dc24      	bgt.n	800e1fc <_vfprintf_r+0xf9c>
 800e1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b4:	6065      	str	r5, [r4, #4]
 800e1b6:	441d      	add	r5, r3
 800e1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e1ba:	9521      	str	r5, [sp, #132]	; 0x84
 800e1bc:	3301      	adds	r3, #1
 800e1be:	2b07      	cmp	r3, #7
 800e1c0:	9320      	str	r3, [sp, #128]	; 0x80
 800e1c2:	f77f abd9 	ble.w	800d978 <_vfprintf_r+0x718>
 800e1c6:	aa1f      	add	r2, sp, #124	; 0x7c
 800e1c8:	4641      	mov	r1, r8
 800e1ca:	4658      	mov	r0, fp
 800e1cc:	f001 ff32 	bl	8010034 <__sprint_r>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f abd1 	beq.w	800d978 <_vfprintf_r+0x718>
 800e1d6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800e1da:	07d9      	lsls	r1, r3, #31
 800e1dc:	d407      	bmi.n	800e1ee <_vfprintf_r+0xf8e>
 800e1de:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e1e2:	059a      	lsls	r2, r3, #22
 800e1e4:	d403      	bmi.n	800e1ee <_vfprintf_r+0xf8e>
 800e1e6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800e1ea:	f7fd fd18 	bl	800bc1e <__retarget_lock_release_recursive>
 800e1ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e1f2:	065b      	lsls	r3, r3, #25
 800e1f4:	f57f a8af 	bpl.w	800d356 <_vfprintf_r+0xf6>
 800e1f8:	f7ff b882 	b.w	800d300 <_vfprintf_r+0xa0>
 800e1fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1fe:	6066      	str	r6, [r4, #4]
 800e200:	3310      	adds	r3, #16
 800e202:	9321      	str	r3, [sp, #132]	; 0x84
 800e204:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e206:	3301      	adds	r3, #1
 800e208:	2b07      	cmp	r3, #7
 800e20a:	9320      	str	r3, [sp, #128]	; 0x80
 800e20c:	dc02      	bgt.n	800e214 <_vfprintf_r+0xfb4>
 800e20e:	3408      	adds	r4, #8
 800e210:	3d10      	subs	r5, #16
 800e212:	e7ca      	b.n	800e1aa <_vfprintf_r+0xf4a>
 800e214:	aa1f      	add	r2, sp, #124	; 0x7c
 800e216:	4641      	mov	r1, r8
 800e218:	4658      	mov	r0, fp
 800e21a:	f001 ff0b 	bl	8010034 <__sprint_r>
 800e21e:	2800      	cmp	r0, #0
 800e220:	d1d9      	bne.n	800e1d6 <_vfprintf_r+0xf76>
 800e222:	ac2c      	add	r4, sp, #176	; 0xb0
 800e224:	e7f4      	b.n	800e210 <_vfprintf_r+0xfb0>
 800e226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e228:	b913      	cbnz	r3, 800e230 <_vfprintf_r+0xfd0>
 800e22a:	2300      	movs	r3, #0
 800e22c:	9320      	str	r3, [sp, #128]	; 0x80
 800e22e:	e7d2      	b.n	800e1d6 <_vfprintf_r+0xf76>
 800e230:	aa1f      	add	r2, sp, #124	; 0x7c
 800e232:	4641      	mov	r1, r8
 800e234:	4658      	mov	r0, fp
 800e236:	f001 fefd 	bl	8010034 <__sprint_r>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d0f5      	beq.n	800e22a <_vfprintf_r+0xfca>
 800e23e:	e7ca      	b.n	800e1d6 <_vfprintf_r+0xf76>
 800e240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e244:	4610      	mov	r0, r2
 800e246:	4619      	mov	r1, r3
 800e248:	f7f2 fc7c 	bl	8000b44 <__aeabi_dcmpun>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f43f aa36 	beq.w	800d6be <_vfprintf_r+0x45e>
 800e252:	4b1f      	ldr	r3, [pc, #124]	; (800e2d0 <_vfprintf_r+0x1070>)
 800e254:	4a1f      	ldr	r2, [pc, #124]	; (800e2d4 <_vfprintf_r+0x1074>)
 800e256:	f7ff ba26 	b.w	800d6a6 <_vfprintf_r+0x446>
 800e25a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e25c:	1a1b      	subs	r3, r3, r0
 800e25e:	9303      	str	r3, [sp, #12]
 800e260:	f7ff baa9 	b.w	800d7b6 <_vfprintf_r+0x556>
 800e264:	ea56 0207 	orrs.w	r2, r6, r7
 800e268:	9508      	str	r5, [sp, #32]
 800e26a:	f43f ac1e 	beq.w	800daaa <_vfprintf_r+0x84a>
 800e26e:	2b01      	cmp	r3, #1
 800e270:	f43f ac8f 	beq.w	800db92 <_vfprintf_r+0x932>
 800e274:	2b02      	cmp	r3, #2
 800e276:	f43f acaf 	beq.w	800dbd8 <_vfprintf_r+0x978>
 800e27a:	ab2c      	add	r3, sp, #176	; 0xb0
 800e27c:	08f1      	lsrs	r1, r6, #3
 800e27e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800e282:	08f8      	lsrs	r0, r7, #3
 800e284:	f006 0207 	and.w	r2, r6, #7
 800e288:	4607      	mov	r7, r0
 800e28a:	460e      	mov	r6, r1
 800e28c:	3230      	adds	r2, #48	; 0x30
 800e28e:	ea56 0107 	orrs.w	r1, r6, r7
 800e292:	f103 39ff 	add.w	r9, r3, #4294967295
 800e296:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e29a:	f47f ac78 	bne.w	800db8e <_vfprintf_r+0x92e>
 800e29e:	9908      	ldr	r1, [sp, #32]
 800e2a0:	07cd      	lsls	r5, r1, #31
 800e2a2:	d506      	bpl.n	800e2b2 <_vfprintf_r+0x1052>
 800e2a4:	2a30      	cmp	r2, #48	; 0x30
 800e2a6:	d004      	beq.n	800e2b2 <_vfprintf_r+0x1052>
 800e2a8:	2230      	movs	r2, #48	; 0x30
 800e2aa:	f809 2c01 	strb.w	r2, [r9, #-1]
 800e2ae:	f1a3 0902 	sub.w	r9, r3, #2
 800e2b2:	4656      	mov	r6, sl
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800e2ba:	9d08      	ldr	r5, [sp, #32]
 800e2bc:	9308      	str	r3, [sp, #32]
 800e2be:	ebaa 0a09 	sub.w	sl, sl, r9
 800e2c2:	f7ff bac6 	b.w	800d852 <_vfprintf_r+0x5f2>
 800e2c6:	bf00      	nop
 800e2c8:	08010926 	.word	0x08010926
 800e2cc:	08010916 	.word	0x08010916
 800e2d0:	080108ca 	.word	0x080108ca
 800e2d4:	080108ce 	.word	0x080108ce

0800e2d8 <__sbprintf>:
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	460c      	mov	r4, r1
 800e2dc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800e2e0:	461f      	mov	r7, r3
 800e2e2:	8989      	ldrh	r1, [r1, #12]
 800e2e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2e6:	9319      	str	r3, [sp, #100]	; 0x64
 800e2e8:	89e3      	ldrh	r3, [r4, #14]
 800e2ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e2ee:	f021 0102 	bic.w	r1, r1, #2
 800e2f2:	6a23      	ldr	r3, [r4, #32]
 800e2f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 800e2f8:	9308      	str	r3, [sp, #32]
 800e2fa:	a91a      	add	r1, sp, #104	; 0x68
 800e2fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e300:	4615      	mov	r5, r2
 800e302:	2300      	movs	r3, #0
 800e304:	4606      	mov	r6, r0
 800e306:	9100      	str	r1, [sp, #0]
 800e308:	9104      	str	r1, [sp, #16]
 800e30a:	a816      	add	r0, sp, #88	; 0x58
 800e30c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e310:	9102      	str	r1, [sp, #8]
 800e312:	9105      	str	r1, [sp, #20]
 800e314:	9306      	str	r3, [sp, #24]
 800e316:	f7fd fc7f 	bl	800bc18 <__retarget_lock_init_recursive>
 800e31a:	462a      	mov	r2, r5
 800e31c:	463b      	mov	r3, r7
 800e31e:	4669      	mov	r1, sp
 800e320:	4630      	mov	r0, r6
 800e322:	f7fe ff9d 	bl	800d260 <_vfprintf_r>
 800e326:	1e05      	subs	r5, r0, #0
 800e328:	db07      	blt.n	800e33a <__sbprintf+0x62>
 800e32a:	4669      	mov	r1, sp
 800e32c:	4630      	mov	r0, r6
 800e32e:	f7fd f9f9 	bl	800b724 <_fflush_r>
 800e332:	2800      	cmp	r0, #0
 800e334:	bf18      	it	ne
 800e336:	f04f 35ff 	movne.w	r5, #4294967295
 800e33a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e33e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e340:	065b      	lsls	r3, r3, #25
 800e342:	bf42      	ittt	mi
 800e344:	89a3      	ldrhmi	r3, [r4, #12]
 800e346:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800e34a:	81a3      	strhmi	r3, [r4, #12]
 800e34c:	f7fd fc65 	bl	800bc1a <__retarget_lock_close_recursive>
 800e350:	4628      	mov	r0, r5
 800e352:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800e356:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e358 <_write_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4c07      	ldr	r4, [pc, #28]	; (800e378 <_write_r+0x20>)
 800e35c:	4605      	mov	r5, r0
 800e35e:	4608      	mov	r0, r1
 800e360:	4611      	mov	r1, r2
 800e362:	2200      	movs	r2, #0
 800e364:	6022      	str	r2, [r4, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	f7fc fed5 	bl	800b116 <_write>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_write_r+0x1e>
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	b103      	cbz	r3, 800e376 <_write_r+0x1e>
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	20001dbc 	.word	0x20001dbc

0800e37c <__swsetup_r>:
 800e37c:	4b32      	ldr	r3, [pc, #200]	; (800e448 <__swsetup_r+0xcc>)
 800e37e:	b570      	push	{r4, r5, r6, lr}
 800e380:	681d      	ldr	r5, [r3, #0]
 800e382:	4606      	mov	r6, r0
 800e384:	460c      	mov	r4, r1
 800e386:	b125      	cbz	r5, 800e392 <__swsetup_r+0x16>
 800e388:	69ab      	ldr	r3, [r5, #24]
 800e38a:	b913      	cbnz	r3, 800e392 <__swsetup_r+0x16>
 800e38c:	4628      	mov	r0, r5
 800e38e:	f7fd fa6f 	bl	800b870 <__sinit>
 800e392:	4b2e      	ldr	r3, [pc, #184]	; (800e44c <__swsetup_r+0xd0>)
 800e394:	429c      	cmp	r4, r3
 800e396:	d10f      	bne.n	800e3b8 <__swsetup_r+0x3c>
 800e398:	686c      	ldr	r4, [r5, #4]
 800e39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	0715      	lsls	r5, r2, #28
 800e3a2:	d42c      	bmi.n	800e3fe <__swsetup_r+0x82>
 800e3a4:	06d0      	lsls	r0, r2, #27
 800e3a6:	d411      	bmi.n	800e3cc <__swsetup_r+0x50>
 800e3a8:	2209      	movs	r2, #9
 800e3aa:	6032      	str	r2, [r6, #0]
 800e3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b0:	81a3      	strh	r3, [r4, #12]
 800e3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}
 800e3b8:	4b25      	ldr	r3, [pc, #148]	; (800e450 <__swsetup_r+0xd4>)
 800e3ba:	429c      	cmp	r4, r3
 800e3bc:	d101      	bne.n	800e3c2 <__swsetup_r+0x46>
 800e3be:	68ac      	ldr	r4, [r5, #8]
 800e3c0:	e7eb      	b.n	800e39a <__swsetup_r+0x1e>
 800e3c2:	4b24      	ldr	r3, [pc, #144]	; (800e454 <__swsetup_r+0xd8>)
 800e3c4:	429c      	cmp	r4, r3
 800e3c6:	bf08      	it	eq
 800e3c8:	68ec      	ldreq	r4, [r5, #12]
 800e3ca:	e7e6      	b.n	800e39a <__swsetup_r+0x1e>
 800e3cc:	0751      	lsls	r1, r2, #29
 800e3ce:	d512      	bpl.n	800e3f6 <__swsetup_r+0x7a>
 800e3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3d2:	b141      	cbz	r1, 800e3e6 <__swsetup_r+0x6a>
 800e3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3d8:	4299      	cmp	r1, r3
 800e3da:	d002      	beq.n	800e3e2 <__swsetup_r+0x66>
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f7fd fb1d 	bl	800ba1c <_free_r>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3ec:	81a3      	strh	r3, [r4, #12]
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6063      	str	r3, [r4, #4]
 800e3f2:	6923      	ldr	r3, [r4, #16]
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f043 0308 	orr.w	r3, r3, #8
 800e3fc:	81a3      	strh	r3, [r4, #12]
 800e3fe:	6923      	ldr	r3, [r4, #16]
 800e400:	b94b      	cbnz	r3, 800e416 <__swsetup_r+0x9a>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e40c:	d003      	beq.n	800e416 <__swsetup_r+0x9a>
 800e40e:	4621      	mov	r1, r4
 800e410:	4630      	mov	r0, r6
 800e412:	f001 f891 	bl	800f538 <__smakebuf_r>
 800e416:	89a2      	ldrh	r2, [r4, #12]
 800e418:	f012 0301 	ands.w	r3, r2, #1
 800e41c:	d00c      	beq.n	800e438 <__swsetup_r+0xbc>
 800e41e:	2300      	movs	r3, #0
 800e420:	60a3      	str	r3, [r4, #8]
 800e422:	6963      	ldr	r3, [r4, #20]
 800e424:	425b      	negs	r3, r3
 800e426:	61a3      	str	r3, [r4, #24]
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	b953      	cbnz	r3, 800e442 <__swsetup_r+0xc6>
 800e42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e430:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e434:	d1ba      	bne.n	800e3ac <__swsetup_r+0x30>
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	0792      	lsls	r2, r2, #30
 800e43a:	bf58      	it	pl
 800e43c:	6963      	ldrpl	r3, [r4, #20]
 800e43e:	60a3      	str	r3, [r4, #8]
 800e440:	e7f2      	b.n	800e428 <__swsetup_r+0xac>
 800e442:	2000      	movs	r0, #0
 800e444:	e7f7      	b.n	800e436 <__swsetup_r+0xba>
 800e446:	bf00      	nop
 800e448:	20000044 	.word	0x20000044
 800e44c:	0801087c 	.word	0x0801087c
 800e450:	0801089c 	.word	0x0801089c
 800e454:	0801085c 	.word	0x0801085c

0800e458 <_close_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4c06      	ldr	r4, [pc, #24]	; (800e474 <_close_r+0x1c>)
 800e45c:	2300      	movs	r3, #0
 800e45e:	4605      	mov	r5, r0
 800e460:	4608      	mov	r0, r1
 800e462:	6023      	str	r3, [r4, #0]
 800e464:	f7fc fea0 	bl	800b1a8 <_close>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_close_r+0x1a>
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_close_r+0x1a>
 800e470:	602b      	str	r3, [r5, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20001dbc 	.word	0x20001dbc

0800e478 <quorem>:
 800e478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	6903      	ldr	r3, [r0, #16]
 800e47e:	690c      	ldr	r4, [r1, #16]
 800e480:	429c      	cmp	r4, r3
 800e482:	4680      	mov	r8, r0
 800e484:	f300 8082 	bgt.w	800e58c <quorem+0x114>
 800e488:	3c01      	subs	r4, #1
 800e48a:	f101 0714 	add.w	r7, r1, #20
 800e48e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800e492:	f100 0614 	add.w	r6, r0, #20
 800e496:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e49a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e49e:	eb06 030e 	add.w	r3, r6, lr
 800e4a2:	3501      	adds	r5, #1
 800e4a4:	eb07 090e 	add.w	r9, r7, lr
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	fbb0 f5f5 	udiv	r5, r0, r5
 800e4ae:	b395      	cbz	r5, 800e516 <quorem+0x9e>
 800e4b0:	f04f 0a00 	mov.w	sl, #0
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	46b4      	mov	ip, r6
 800e4b8:	46d3      	mov	fp, sl
 800e4ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4be:	b293      	uxth	r3, r2
 800e4c0:	fb05 a303 	mla	r3, r5, r3, sl
 800e4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	ebab 0303 	sub.w	r3, fp, r3
 800e4ce:	0c12      	lsrs	r2, r2, #16
 800e4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800e4d4:	fb05 a202 	mla	r2, r5, r2, sl
 800e4d8:	fa13 f38b 	uxtah	r3, r3, fp
 800e4dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e4e0:	fa1f fb82 	uxth.w	fp, r2
 800e4e4:	f8dc 2000 	ldr.w	r2, [ip]
 800e4e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e4ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f6:	4581      	cmp	r9, r0
 800e4f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e4fc:	f84c 3b04 	str.w	r3, [ip], #4
 800e500:	d2db      	bcs.n	800e4ba <quorem+0x42>
 800e502:	f856 300e 	ldr.w	r3, [r6, lr]
 800e506:	b933      	cbnz	r3, 800e516 <quorem+0x9e>
 800e508:	9b01      	ldr	r3, [sp, #4]
 800e50a:	3b04      	subs	r3, #4
 800e50c:	429e      	cmp	r6, r3
 800e50e:	461a      	mov	r2, r3
 800e510:	d330      	bcc.n	800e574 <quorem+0xfc>
 800e512:	f8c8 4010 	str.w	r4, [r8, #16]
 800e516:	4640      	mov	r0, r8
 800e518:	f001 fa71 	bl	800f9fe <__mcmp>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	db25      	blt.n	800e56c <quorem+0xf4>
 800e520:	3501      	adds	r5, #1
 800e522:	4630      	mov	r0, r6
 800e524:	f04f 0e00 	mov.w	lr, #0
 800e528:	f857 2b04 	ldr.w	r2, [r7], #4
 800e52c:	f8d0 c000 	ldr.w	ip, [r0]
 800e530:	b293      	uxth	r3, r2
 800e532:	ebae 0303 	sub.w	r3, lr, r3
 800e536:	0c12      	lsrs	r2, r2, #16
 800e538:	fa13 f38c 	uxtah	r3, r3, ip
 800e53c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e544:	b29b      	uxth	r3, r3
 800e546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e54a:	45b9      	cmp	r9, r7
 800e54c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e550:	f840 3b04 	str.w	r3, [r0], #4
 800e554:	d2e8      	bcs.n	800e528 <quorem+0xb0>
 800e556:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e55a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e55e:	b92a      	cbnz	r2, 800e56c <quorem+0xf4>
 800e560:	3b04      	subs	r3, #4
 800e562:	429e      	cmp	r6, r3
 800e564:	461a      	mov	r2, r3
 800e566:	d30b      	bcc.n	800e580 <quorem+0x108>
 800e568:	f8c8 4010 	str.w	r4, [r8, #16]
 800e56c:	4628      	mov	r0, r5
 800e56e:	b003      	add	sp, #12
 800e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e574:	6812      	ldr	r2, [r2, #0]
 800e576:	3b04      	subs	r3, #4
 800e578:	2a00      	cmp	r2, #0
 800e57a:	d1ca      	bne.n	800e512 <quorem+0x9a>
 800e57c:	3c01      	subs	r4, #1
 800e57e:	e7c5      	b.n	800e50c <quorem+0x94>
 800e580:	6812      	ldr	r2, [r2, #0]
 800e582:	3b04      	subs	r3, #4
 800e584:	2a00      	cmp	r2, #0
 800e586:	d1ef      	bne.n	800e568 <quorem+0xf0>
 800e588:	3c01      	subs	r4, #1
 800e58a:	e7ea      	b.n	800e562 <quorem+0xea>
 800e58c:	2000      	movs	r0, #0
 800e58e:	e7ee      	b.n	800e56e <quorem+0xf6>

0800e590 <_dtoa_r>:
 800e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e594:	ec57 6b10 	vmov	r6, r7, d0
 800e598:	b097      	sub	sp, #92	; 0x5c
 800e59a:	e9cd 6700 	strd	r6, r7, [sp]
 800e59e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5a0:	9107      	str	r1, [sp, #28]
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	920a      	str	r2, [sp, #40]	; 0x28
 800e5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5a8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e5aa:	b93e      	cbnz	r6, 800e5bc <_dtoa_r+0x2c>
 800e5ac:	2010      	movs	r0, #16
 800e5ae:	f7fd fb37 	bl	800bc20 <malloc>
 800e5b2:	6260      	str	r0, [r4, #36]	; 0x24
 800e5b4:	6046      	str	r6, [r0, #4]
 800e5b6:	6086      	str	r6, [r0, #8]
 800e5b8:	6006      	str	r6, [r0, #0]
 800e5ba:	60c6      	str	r6, [r0, #12]
 800e5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	b151      	cbz	r1, 800e5d8 <_dtoa_r+0x48>
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	604a      	str	r2, [r1, #4]
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4093      	lsls	r3, r2
 800e5ca:	608b      	str	r3, [r1, #8]
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	f001 f841 	bl	800f654 <_Bfree>
 800e5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	9b01      	ldr	r3, [sp, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bfbf      	itttt	lt
 800e5de:	2301      	movlt	r3, #1
 800e5e0:	602b      	strlt	r3, [r5, #0]
 800e5e2:	9b01      	ldrlt	r3, [sp, #4]
 800e5e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e5e8:	bfb2      	itee	lt
 800e5ea:	9301      	strlt	r3, [sp, #4]
 800e5ec:	2300      	movge	r3, #0
 800e5ee:	602b      	strge	r3, [r5, #0]
 800e5f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e5f4:	4ba8      	ldr	r3, [pc, #672]	; (800e898 <_dtoa_r+0x308>)
 800e5f6:	ea33 0308 	bics.w	r3, r3, r8
 800e5fa:	d11b      	bne.n	800e634 <_dtoa_r+0xa4>
 800e5fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800e602:	6013      	str	r3, [r2, #0]
 800e604:	9b00      	ldr	r3, [sp, #0]
 800e606:	b923      	cbnz	r3, 800e612 <_dtoa_r+0x82>
 800e608:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e60c:	2800      	cmp	r0, #0
 800e60e:	f000 8578 	beq.w	800f102 <_dtoa_r+0xb72>
 800e612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e614:	b953      	cbnz	r3, 800e62c <_dtoa_r+0x9c>
 800e616:	4ba1      	ldr	r3, [pc, #644]	; (800e89c <_dtoa_r+0x30c>)
 800e618:	e021      	b.n	800e65e <_dtoa_r+0xce>
 800e61a:	4ba1      	ldr	r3, [pc, #644]	; (800e8a0 <_dtoa_r+0x310>)
 800e61c:	9302      	str	r3, [sp, #8]
 800e61e:	3308      	adds	r3, #8
 800e620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	9802      	ldr	r0, [sp, #8]
 800e626:	b017      	add	sp, #92	; 0x5c
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	4b9b      	ldr	r3, [pc, #620]	; (800e89c <_dtoa_r+0x30c>)
 800e62e:	9302      	str	r3, [sp, #8]
 800e630:	3303      	adds	r3, #3
 800e632:	e7f5      	b.n	800e620 <_dtoa_r+0x90>
 800e634:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e638:	2200      	movs	r2, #0
 800e63a:	2300      	movs	r3, #0
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f7f2 fa4e 	bl	8000ae0 <__aeabi_dcmpeq>
 800e644:	4681      	mov	r9, r0
 800e646:	b160      	cbz	r0, 800e662 <_dtoa_r+0xd2>
 800e648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e64a:	2301      	movs	r3, #1
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 8553 	beq.w	800f0fc <_dtoa_r+0xb6c>
 800e656:	4b93      	ldr	r3, [pc, #588]	; (800e8a4 <_dtoa_r+0x314>)
 800e658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e65a:	6013      	str	r3, [r2, #0]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	9302      	str	r3, [sp, #8]
 800e660:	e7e0      	b.n	800e624 <_dtoa_r+0x94>
 800e662:	aa14      	add	r2, sp, #80	; 0x50
 800e664:	a915      	add	r1, sp, #84	; 0x54
 800e666:	ec47 6b10 	vmov	d0, r6, r7
 800e66a:	4620      	mov	r0, r4
 800e66c:	f001 fa3f 	bl	800faee <__d2b>
 800e670:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e674:	4682      	mov	sl, r0
 800e676:	2d00      	cmp	r5, #0
 800e678:	d07e      	beq.n	800e778 <_dtoa_r+0x1e8>
 800e67a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e67e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e682:	4630      	mov	r0, r6
 800e684:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e688:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e68c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800e690:	2200      	movs	r2, #0
 800e692:	4b85      	ldr	r3, [pc, #532]	; (800e8a8 <_dtoa_r+0x318>)
 800e694:	f7f1 fe08 	bl	80002a8 <__aeabi_dsub>
 800e698:	a379      	add	r3, pc, #484	; (adr r3, 800e880 <_dtoa_r+0x2f0>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f7f1 ffb7 	bl	8000610 <__aeabi_dmul>
 800e6a2:	a379      	add	r3, pc, #484	; (adr r3, 800e888 <_dtoa_r+0x2f8>)
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f7f1 fe00 	bl	80002ac <__adddf3>
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	460f      	mov	r7, r1
 800e6b2:	f7f1 ff47 	bl	8000544 <__aeabi_i2d>
 800e6b6:	a376      	add	r3, pc, #472	; (adr r3, 800e890 <_dtoa_r+0x300>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	f7f1 ffa8 	bl	8000610 <__aeabi_dmul>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f1 fdf0 	bl	80002ac <__adddf3>
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	460f      	mov	r7, r1
 800e6d0:	f7f2 fa4e 	bl	8000b70 <__aeabi_d2iz>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4683      	mov	fp, r0
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4630      	mov	r0, r6
 800e6dc:	4639      	mov	r1, r7
 800e6de:	f7f2 fa09 	bl	8000af4 <__aeabi_dcmplt>
 800e6e2:	b158      	cbz	r0, 800e6fc <_dtoa_r+0x16c>
 800e6e4:	4658      	mov	r0, fp
 800e6e6:	f7f1 ff2d 	bl	8000544 <__aeabi_i2d>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	f7f2 f9f5 	bl	8000ae0 <__aeabi_dcmpeq>
 800e6f6:	b908      	cbnz	r0, 800e6fc <_dtoa_r+0x16c>
 800e6f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e6fc:	f1bb 0f16 	cmp.w	fp, #22
 800e700:	d859      	bhi.n	800e7b6 <_dtoa_r+0x226>
 800e702:	496a      	ldr	r1, [pc, #424]	; (800e8ac <_dtoa_r+0x31c>)
 800e704:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e710:	f7f2 fa0e 	bl	8000b30 <__aeabi_dcmpgt>
 800e714:	2800      	cmp	r0, #0
 800e716:	d050      	beq.n	800e7ba <_dtoa_r+0x22a>
 800e718:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e71c:	2300      	movs	r3, #0
 800e71e:	930e      	str	r3, [sp, #56]	; 0x38
 800e720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e722:	1b5d      	subs	r5, r3, r5
 800e724:	1e6b      	subs	r3, r5, #1
 800e726:	9306      	str	r3, [sp, #24]
 800e728:	bf45      	ittet	mi
 800e72a:	f1c5 0301 	rsbmi	r3, r5, #1
 800e72e:	9305      	strmi	r3, [sp, #20]
 800e730:	2300      	movpl	r3, #0
 800e732:	2300      	movmi	r3, #0
 800e734:	bf4c      	ite	mi
 800e736:	9306      	strmi	r3, [sp, #24]
 800e738:	9305      	strpl	r3, [sp, #20]
 800e73a:	f1bb 0f00 	cmp.w	fp, #0
 800e73e:	db3e      	blt.n	800e7be <_dtoa_r+0x22e>
 800e740:	9b06      	ldr	r3, [sp, #24]
 800e742:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e746:	445b      	add	r3, fp
 800e748:	9306      	str	r3, [sp, #24]
 800e74a:	2300      	movs	r3, #0
 800e74c:	9308      	str	r3, [sp, #32]
 800e74e:	9b07      	ldr	r3, [sp, #28]
 800e750:	2b09      	cmp	r3, #9
 800e752:	f200 80af 	bhi.w	800e8b4 <_dtoa_r+0x324>
 800e756:	2b05      	cmp	r3, #5
 800e758:	bfc4      	itt	gt
 800e75a:	3b04      	subgt	r3, #4
 800e75c:	9307      	strgt	r3, [sp, #28]
 800e75e:	9b07      	ldr	r3, [sp, #28]
 800e760:	f1a3 0302 	sub.w	r3, r3, #2
 800e764:	bfcc      	ite	gt
 800e766:	2600      	movgt	r6, #0
 800e768:	2601      	movle	r6, #1
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	f200 80ae 	bhi.w	800e8cc <_dtoa_r+0x33c>
 800e770:	e8df f003 	tbb	[pc, r3]
 800e774:	772f8482 	.word	0x772f8482
 800e778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e77a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e77c:	441d      	add	r5, r3
 800e77e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e782:	2b20      	cmp	r3, #32
 800e784:	dd11      	ble.n	800e7aa <_dtoa_r+0x21a>
 800e786:	9a00      	ldr	r2, [sp, #0]
 800e788:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e78c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e790:	fa22 f000 	lsr.w	r0, r2, r0
 800e794:	fa08 f303 	lsl.w	r3, r8, r3
 800e798:	4318      	orrs	r0, r3
 800e79a:	f7f1 fec3 	bl	8000524 <__aeabi_ui2d>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e7a4:	3d01      	subs	r5, #1
 800e7a6:	9312      	str	r3, [sp, #72]	; 0x48
 800e7a8:	e772      	b.n	800e690 <_dtoa_r+0x100>
 800e7aa:	f1c3 0020 	rsb	r0, r3, #32
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	fa03 f000 	lsl.w	r0, r3, r0
 800e7b4:	e7f1      	b.n	800e79a <_dtoa_r+0x20a>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7b1      	b.n	800e71e <_dtoa_r+0x18e>
 800e7ba:	900e      	str	r0, [sp, #56]	; 0x38
 800e7bc:	e7b0      	b.n	800e720 <_dtoa_r+0x190>
 800e7be:	9b05      	ldr	r3, [sp, #20]
 800e7c0:	eba3 030b 	sub.w	r3, r3, fp
 800e7c4:	9305      	str	r3, [sp, #20]
 800e7c6:	f1cb 0300 	rsb	r3, fp, #0
 800e7ca:	9308      	str	r3, [sp, #32]
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7d0:	e7bd      	b.n	800e74e <_dtoa_r+0x1be>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dd7a      	ble.n	800e8d2 <_dtoa_r+0x342>
 800e7dc:	9304      	str	r3, [sp, #16]
 800e7de:	9303      	str	r3, [sp, #12]
 800e7e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	606a      	str	r2, [r5, #4]
 800e7e6:	2104      	movs	r1, #4
 800e7e8:	f101 0214 	add.w	r2, r1, #20
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d975      	bls.n	800e8dc <_dtoa_r+0x34c>
 800e7f0:	6869      	ldr	r1, [r5, #4]
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 fefa 	bl	800f5ec <_Balloc>
 800e7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7fa:	6028      	str	r0, [r5, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	2b0e      	cmp	r3, #14
 800e804:	f200 80e5 	bhi.w	800e9d2 <_dtoa_r+0x442>
 800e808:	2e00      	cmp	r6, #0
 800e80a:	f000 80e2 	beq.w	800e9d2 <_dtoa_r+0x442>
 800e80e:	ed9d 7b00 	vldr	d7, [sp]
 800e812:	f1bb 0f00 	cmp.w	fp, #0
 800e816:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e81a:	dd74      	ble.n	800e906 <_dtoa_r+0x376>
 800e81c:	4a23      	ldr	r2, [pc, #140]	; (800e8ac <_dtoa_r+0x31c>)
 800e81e:	f00b 030f 	and.w	r3, fp, #15
 800e822:	ea4f 162b 	mov.w	r6, fp, asr #4
 800e826:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e82a:	06f0      	lsls	r0, r6, #27
 800e82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e830:	d559      	bpl.n	800e8e6 <_dtoa_r+0x356>
 800e832:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <_dtoa_r+0x320>)
 800e834:	ec51 0b17 	vmov	r0, r1, d7
 800e838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e83c:	f7f2 f812 	bl	8000864 <__aeabi_ddiv>
 800e840:	e9cd 0100 	strd	r0, r1, [sp]
 800e844:	f006 060f 	and.w	r6, r6, #15
 800e848:	2503      	movs	r5, #3
 800e84a:	4f19      	ldr	r7, [pc, #100]	; (800e8b0 <_dtoa_r+0x320>)
 800e84c:	2e00      	cmp	r6, #0
 800e84e:	d14c      	bne.n	800e8ea <_dtoa_r+0x35a>
 800e850:	4642      	mov	r2, r8
 800e852:	464b      	mov	r3, r9
 800e854:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e858:	f7f2 f804 	bl	8000864 <__aeabi_ddiv>
 800e85c:	e9cd 0100 	strd	r0, r1, [sp]
 800e860:	e06a      	b.n	800e938 <_dtoa_r+0x3a8>
 800e862:	2301      	movs	r3, #1
 800e864:	9309      	str	r3, [sp, #36]	; 0x24
 800e866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e868:	445b      	add	r3, fp
 800e86a:	9304      	str	r3, [sp, #16]
 800e86c:	3301      	adds	r3, #1
 800e86e:	2b01      	cmp	r3, #1
 800e870:	9303      	str	r3, [sp, #12]
 800e872:	bfb8      	it	lt
 800e874:	2301      	movlt	r3, #1
 800e876:	e7b3      	b.n	800e7e0 <_dtoa_r+0x250>
 800e878:	2300      	movs	r3, #0
 800e87a:	e7ab      	b.n	800e7d4 <_dtoa_r+0x244>
 800e87c:	2300      	movs	r3, #0
 800e87e:	e7f1      	b.n	800e864 <_dtoa_r+0x2d4>
 800e880:	636f4361 	.word	0x636f4361
 800e884:	3fd287a7 	.word	0x3fd287a7
 800e888:	8b60c8b3 	.word	0x8b60c8b3
 800e88c:	3fc68a28 	.word	0x3fc68a28
 800e890:	509f79fb 	.word	0x509f79fb
 800e894:	3fd34413 	.word	0x3fd34413
 800e898:	7ff00000 	.word	0x7ff00000
 800e89c:	0801093f 	.word	0x0801093f
 800e8a0:	08010936 	.word	0x08010936
 800e8a4:	080108f5 	.word	0x080108f5
 800e8a8:	3ff80000 	.word	0x3ff80000
 800e8ac:	08010970 	.word	0x08010970
 800e8b0:	08010948 	.word	0x08010948
 800e8b4:	2601      	movs	r6, #1
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	9609      	str	r6, [sp, #36]	; 0x24
 800e8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	9303      	str	r3, [sp, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2312      	movs	r3, #18
 800e8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800e8ca:	e789      	b.n	800e7e0 <_dtoa_r+0x250>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d0:	e7f4      	b.n	800e8bc <_dtoa_r+0x32c>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	9304      	str	r3, [sp, #16]
 800e8d6:	9303      	str	r3, [sp, #12]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	e7f5      	b.n	800e8c8 <_dtoa_r+0x338>
 800e8dc:	686a      	ldr	r2, [r5, #4]
 800e8de:	3201      	adds	r2, #1
 800e8e0:	606a      	str	r2, [r5, #4]
 800e8e2:	0049      	lsls	r1, r1, #1
 800e8e4:	e780      	b.n	800e7e8 <_dtoa_r+0x258>
 800e8e6:	2502      	movs	r5, #2
 800e8e8:	e7af      	b.n	800e84a <_dtoa_r+0x2ba>
 800e8ea:	07f1      	lsls	r1, r6, #31
 800e8ec:	d508      	bpl.n	800e900 <_dtoa_r+0x370>
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	4649      	mov	r1, r9
 800e8f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8f6:	f7f1 fe8b 	bl	8000610 <__aeabi_dmul>
 800e8fa:	3501      	adds	r5, #1
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	4689      	mov	r9, r1
 800e900:	1076      	asrs	r6, r6, #1
 800e902:	3708      	adds	r7, #8
 800e904:	e7a2      	b.n	800e84c <_dtoa_r+0x2bc>
 800e906:	f000 809d 	beq.w	800ea44 <_dtoa_r+0x4b4>
 800e90a:	f1cb 0600 	rsb	r6, fp, #0
 800e90e:	4b9f      	ldr	r3, [pc, #636]	; (800eb8c <_dtoa_r+0x5fc>)
 800e910:	4f9f      	ldr	r7, [pc, #636]	; (800eb90 <_dtoa_r+0x600>)
 800e912:	f006 020f 	and.w	r2, r6, #15
 800e916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e922:	f7f1 fe75 	bl	8000610 <__aeabi_dmul>
 800e926:	e9cd 0100 	strd	r0, r1, [sp]
 800e92a:	1136      	asrs	r6, r6, #4
 800e92c:	2300      	movs	r3, #0
 800e92e:	2502      	movs	r5, #2
 800e930:	2e00      	cmp	r6, #0
 800e932:	d17c      	bne.n	800ea2e <_dtoa_r+0x49e>
 800e934:	2b00      	cmp	r3, #0
 800e936:	d191      	bne.n	800e85c <_dtoa_r+0x2cc>
 800e938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 8084 	beq.w	800ea48 <_dtoa_r+0x4b8>
 800e940:	e9dd 8900 	ldrd	r8, r9, [sp]
 800e944:	2200      	movs	r2, #0
 800e946:	4b93      	ldr	r3, [pc, #588]	; (800eb94 <_dtoa_r+0x604>)
 800e948:	4640      	mov	r0, r8
 800e94a:	4649      	mov	r1, r9
 800e94c:	f7f2 f8d2 	bl	8000af4 <__aeabi_dcmplt>
 800e950:	2800      	cmp	r0, #0
 800e952:	d079      	beq.n	800ea48 <_dtoa_r+0x4b8>
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d076      	beq.n	800ea48 <_dtoa_r+0x4b8>
 800e95a:	9b04      	ldr	r3, [sp, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dd34      	ble.n	800e9ca <_dtoa_r+0x43a>
 800e960:	2200      	movs	r2, #0
 800e962:	4b8d      	ldr	r3, [pc, #564]	; (800eb98 <_dtoa_r+0x608>)
 800e964:	4640      	mov	r0, r8
 800e966:	4649      	mov	r1, r9
 800e968:	f7f1 fe52 	bl	8000610 <__aeabi_dmul>
 800e96c:	e9cd 0100 	strd	r0, r1, [sp]
 800e970:	9e04      	ldr	r6, [sp, #16]
 800e972:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e976:	3501      	adds	r5, #1
 800e978:	4628      	mov	r0, r5
 800e97a:	f7f1 fde3 	bl	8000544 <__aeabi_i2d>
 800e97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e982:	f7f1 fe45 	bl	8000610 <__aeabi_dmul>
 800e986:	2200      	movs	r2, #0
 800e988:	4b84      	ldr	r3, [pc, #528]	; (800eb9c <_dtoa_r+0x60c>)
 800e98a:	f7f1 fc8f 	bl	80002ac <__adddf3>
 800e98e:	4680      	mov	r8, r0
 800e990:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800e994:	2e00      	cmp	r6, #0
 800e996:	d15a      	bne.n	800ea4e <_dtoa_r+0x4be>
 800e998:	2200      	movs	r2, #0
 800e99a:	4b81      	ldr	r3, [pc, #516]	; (800eba0 <_dtoa_r+0x610>)
 800e99c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9a0:	f7f1 fc82 	bl	80002a8 <__aeabi_dsub>
 800e9a4:	4642      	mov	r2, r8
 800e9a6:	464b      	mov	r3, r9
 800e9a8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9ac:	f7f2 f8c0 	bl	8000b30 <__aeabi_dcmpgt>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f040 829b 	bne.w	800eeec <_dtoa_r+0x95c>
 800e9b6:	4642      	mov	r2, r8
 800e9b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e9bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9c0:	f7f2 f898 	bl	8000af4 <__aeabi_dcmplt>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	f040 828f 	bne.w	800eee8 <_dtoa_r+0x958>
 800e9ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e9ce:	e9cd 2300 	strd	r2, r3, [sp]
 800e9d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f2c0 8150 	blt.w	800ec7a <_dtoa_r+0x6ea>
 800e9da:	f1bb 0f0e 	cmp.w	fp, #14
 800e9de:	f300 814c 	bgt.w	800ec7a <_dtoa_r+0x6ea>
 800e9e2:	4b6a      	ldr	r3, [pc, #424]	; (800eb8c <_dtoa_r+0x5fc>)
 800e9e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e9e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f280 80da 	bge.w	800eba8 <_dtoa_r+0x618>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f300 80d6 	bgt.w	800eba8 <_dtoa_r+0x618>
 800e9fc:	f040 8273 	bne.w	800eee6 <_dtoa_r+0x956>
 800ea00:	2200      	movs	r2, #0
 800ea02:	4b67      	ldr	r3, [pc, #412]	; (800eba0 <_dtoa_r+0x610>)
 800ea04:	4640      	mov	r0, r8
 800ea06:	4649      	mov	r1, r9
 800ea08:	f7f1 fe02 	bl	8000610 <__aeabi_dmul>
 800ea0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea10:	f7f2 f884 	bl	8000b1c <__aeabi_dcmpge>
 800ea14:	9e03      	ldr	r6, [sp, #12]
 800ea16:	4637      	mov	r7, r6
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f040 824a 	bne.w	800eeb2 <_dtoa_r+0x922>
 800ea1e:	9b02      	ldr	r3, [sp, #8]
 800ea20:	9a02      	ldr	r2, [sp, #8]
 800ea22:	1c5d      	adds	r5, r3, #1
 800ea24:	2331      	movs	r3, #49	; 0x31
 800ea26:	7013      	strb	r3, [r2, #0]
 800ea28:	f10b 0b01 	add.w	fp, fp, #1
 800ea2c:	e245      	b.n	800eeba <_dtoa_r+0x92a>
 800ea2e:	07f2      	lsls	r2, r6, #31
 800ea30:	d505      	bpl.n	800ea3e <_dtoa_r+0x4ae>
 800ea32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea36:	f7f1 fdeb 	bl	8000610 <__aeabi_dmul>
 800ea3a:	3501      	adds	r5, #1
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	1076      	asrs	r6, r6, #1
 800ea40:	3708      	adds	r7, #8
 800ea42:	e775      	b.n	800e930 <_dtoa_r+0x3a0>
 800ea44:	2502      	movs	r5, #2
 800ea46:	e777      	b.n	800e938 <_dtoa_r+0x3a8>
 800ea48:	465f      	mov	r7, fp
 800ea4a:	9e03      	ldr	r6, [sp, #12]
 800ea4c:	e794      	b.n	800e978 <_dtoa_r+0x3e8>
 800ea4e:	9a02      	ldr	r2, [sp, #8]
 800ea50:	4b4e      	ldr	r3, [pc, #312]	; (800eb8c <_dtoa_r+0x5fc>)
 800ea52:	4432      	add	r2, r6
 800ea54:	9213      	str	r2, [sp, #76]	; 0x4c
 800ea56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea58:	1e71      	subs	r1, r6, #1
 800ea5a:	2a00      	cmp	r2, #0
 800ea5c:	d048      	beq.n	800eaf0 <_dtoa_r+0x560>
 800ea5e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	2000      	movs	r0, #0
 800ea68:	494e      	ldr	r1, [pc, #312]	; (800eba4 <_dtoa_r+0x614>)
 800ea6a:	f7f1 fefb 	bl	8000864 <__aeabi_ddiv>
 800ea6e:	4642      	mov	r2, r8
 800ea70:	464b      	mov	r3, r9
 800ea72:	f7f1 fc19 	bl	80002a8 <__aeabi_dsub>
 800ea76:	9d02      	ldr	r5, [sp, #8]
 800ea78:	4680      	mov	r8, r0
 800ea7a:	4689      	mov	r9, r1
 800ea7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea80:	f7f2 f876 	bl	8000b70 <__aeabi_d2iz>
 800ea84:	4606      	mov	r6, r0
 800ea86:	f7f1 fd5d 	bl	8000544 <__aeabi_i2d>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea92:	f7f1 fc09 	bl	80002a8 <__aeabi_dsub>
 800ea96:	3630      	adds	r6, #48	; 0x30
 800ea98:	f805 6b01 	strb.w	r6, [r5], #1
 800ea9c:	4642      	mov	r2, r8
 800ea9e:	464b      	mov	r3, r9
 800eaa0:	e9cd 0100 	strd	r0, r1, [sp]
 800eaa4:	f7f2 f826 	bl	8000af4 <__aeabi_dcmplt>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d165      	bne.n	800eb78 <_dtoa_r+0x5e8>
 800eaac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eab0:	2000      	movs	r0, #0
 800eab2:	4938      	ldr	r1, [pc, #224]	; (800eb94 <_dtoa_r+0x604>)
 800eab4:	f7f1 fbf8 	bl	80002a8 <__aeabi_dsub>
 800eab8:	4642      	mov	r2, r8
 800eaba:	464b      	mov	r3, r9
 800eabc:	f7f2 f81a 	bl	8000af4 <__aeabi_dcmplt>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	f040 80ba 	bne.w	800ec3a <_dtoa_r+0x6aa>
 800eac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eac8:	429d      	cmp	r5, r3
 800eaca:	f43f af7e 	beq.w	800e9ca <_dtoa_r+0x43a>
 800eace:	2200      	movs	r2, #0
 800ead0:	4b31      	ldr	r3, [pc, #196]	; (800eb98 <_dtoa_r+0x608>)
 800ead2:	4640      	mov	r0, r8
 800ead4:	4649      	mov	r1, r9
 800ead6:	f7f1 fd9b 	bl	8000610 <__aeabi_dmul>
 800eada:	2200      	movs	r2, #0
 800eadc:	4680      	mov	r8, r0
 800eade:	4689      	mov	r9, r1
 800eae0:	4b2d      	ldr	r3, [pc, #180]	; (800eb98 <_dtoa_r+0x608>)
 800eae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eae6:	f7f1 fd93 	bl	8000610 <__aeabi_dmul>
 800eaea:	e9cd 0100 	strd	r0, r1, [sp]
 800eaee:	e7c5      	b.n	800ea7c <_dtoa_r+0x4ec>
 800eaf0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800eaf4:	4642      	mov	r2, r8
 800eaf6:	464b      	mov	r3, r9
 800eaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eafc:	f7f1 fd88 	bl	8000610 <__aeabi_dmul>
 800eb00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb04:	9d02      	ldr	r5, [sp, #8]
 800eb06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb0a:	f7f2 f831 	bl	8000b70 <__aeabi_d2iz>
 800eb0e:	4606      	mov	r6, r0
 800eb10:	f7f1 fd18 	bl	8000544 <__aeabi_i2d>
 800eb14:	3630      	adds	r6, #48	; 0x30
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb1e:	f7f1 fbc3 	bl	80002a8 <__aeabi_dsub>
 800eb22:	f805 6b01 	strb.w	r6, [r5], #1
 800eb26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb28:	42ab      	cmp	r3, r5
 800eb2a:	4680      	mov	r8, r0
 800eb2c:	4689      	mov	r9, r1
 800eb2e:	f04f 0200 	mov.w	r2, #0
 800eb32:	d125      	bne.n	800eb80 <_dtoa_r+0x5f0>
 800eb34:	4b1b      	ldr	r3, [pc, #108]	; (800eba4 <_dtoa_r+0x614>)
 800eb36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb3a:	f7f1 fbb7 	bl	80002ac <__adddf3>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	460b      	mov	r3, r1
 800eb42:	4640      	mov	r0, r8
 800eb44:	4649      	mov	r1, r9
 800eb46:	f7f1 fff3 	bl	8000b30 <__aeabi_dcmpgt>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d175      	bne.n	800ec3a <_dtoa_r+0x6aa>
 800eb4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb52:	2000      	movs	r0, #0
 800eb54:	4913      	ldr	r1, [pc, #76]	; (800eba4 <_dtoa_r+0x614>)
 800eb56:	f7f1 fba7 	bl	80002a8 <__aeabi_dsub>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 ffc7 	bl	8000af4 <__aeabi_dcmplt>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	f43f af2f 	beq.w	800e9ca <_dtoa_r+0x43a>
 800eb6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb70:	2b30      	cmp	r3, #48	; 0x30
 800eb72:	f105 32ff 	add.w	r2, r5, #4294967295
 800eb76:	d001      	beq.n	800eb7c <_dtoa_r+0x5ec>
 800eb78:	46bb      	mov	fp, r7
 800eb7a:	e04d      	b.n	800ec18 <_dtoa_r+0x688>
 800eb7c:	4615      	mov	r5, r2
 800eb7e:	e7f5      	b.n	800eb6c <_dtoa_r+0x5dc>
 800eb80:	4b05      	ldr	r3, [pc, #20]	; (800eb98 <_dtoa_r+0x608>)
 800eb82:	f7f1 fd45 	bl	8000610 <__aeabi_dmul>
 800eb86:	e9cd 0100 	strd	r0, r1, [sp]
 800eb8a:	e7bc      	b.n	800eb06 <_dtoa_r+0x576>
 800eb8c:	08010970 	.word	0x08010970
 800eb90:	08010948 	.word	0x08010948
 800eb94:	3ff00000 	.word	0x3ff00000
 800eb98:	40240000 	.word	0x40240000
 800eb9c:	401c0000 	.word	0x401c0000
 800eba0:	40140000 	.word	0x40140000
 800eba4:	3fe00000 	.word	0x3fe00000
 800eba8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ebac:	9d02      	ldr	r5, [sp, #8]
 800ebae:	4642      	mov	r2, r8
 800ebb0:	464b      	mov	r3, r9
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7f1 fe55 	bl	8000864 <__aeabi_ddiv>
 800ebba:	f7f1 ffd9 	bl	8000b70 <__aeabi_d2iz>
 800ebbe:	9000      	str	r0, [sp, #0]
 800ebc0:	f7f1 fcc0 	bl	8000544 <__aeabi_i2d>
 800ebc4:	4642      	mov	r2, r8
 800ebc6:	464b      	mov	r3, r9
 800ebc8:	f7f1 fd22 	bl	8000610 <__aeabi_dmul>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	f7f1 fb68 	bl	80002a8 <__aeabi_dsub>
 800ebd8:	9e00      	ldr	r6, [sp, #0]
 800ebda:	9f03      	ldr	r7, [sp, #12]
 800ebdc:	3630      	adds	r6, #48	; 0x30
 800ebde:	f805 6b01 	strb.w	r6, [r5], #1
 800ebe2:	9e02      	ldr	r6, [sp, #8]
 800ebe4:	1bae      	subs	r6, r5, r6
 800ebe6:	42b7      	cmp	r7, r6
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	d138      	bne.n	800ec60 <_dtoa_r+0x6d0>
 800ebee:	f7f1 fb5d 	bl	80002ac <__adddf3>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	f7f1 ff79 	bl	8000af4 <__aeabi_dcmplt>
 800ec02:	b9c8      	cbnz	r0, 800ec38 <_dtoa_r+0x6a8>
 800ec04:	4632      	mov	r2, r6
 800ec06:	463b      	mov	r3, r7
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 ff68 	bl	8000ae0 <__aeabi_dcmpeq>
 800ec10:	b110      	cbz	r0, 800ec18 <_dtoa_r+0x688>
 800ec12:	9b00      	ldr	r3, [sp, #0]
 800ec14:	07db      	lsls	r3, r3, #31
 800ec16:	d40f      	bmi.n	800ec38 <_dtoa_r+0x6a8>
 800ec18:	4651      	mov	r1, sl
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 fd1a 	bl	800f654 <_Bfree>
 800ec20:	2300      	movs	r3, #0
 800ec22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec24:	702b      	strb	r3, [r5, #0]
 800ec26:	f10b 0301 	add.w	r3, fp, #1
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f43f acf8 	beq.w	800e624 <_dtoa_r+0x94>
 800ec34:	601d      	str	r5, [r3, #0]
 800ec36:	e4f5      	b.n	800e624 <_dtoa_r+0x94>
 800ec38:	465f      	mov	r7, fp
 800ec3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec3e:	2a39      	cmp	r2, #57	; 0x39
 800ec40:	f105 33ff 	add.w	r3, r5, #4294967295
 800ec44:	d106      	bne.n	800ec54 <_dtoa_r+0x6c4>
 800ec46:	9a02      	ldr	r2, [sp, #8]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d107      	bne.n	800ec5c <_dtoa_r+0x6cc>
 800ec4c:	2330      	movs	r3, #48	; 0x30
 800ec4e:	7013      	strb	r3, [r2, #0]
 800ec50:	3701      	adds	r7, #1
 800ec52:	4613      	mov	r3, r2
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	3201      	adds	r2, #1
 800ec58:	701a      	strb	r2, [r3, #0]
 800ec5a:	e78d      	b.n	800eb78 <_dtoa_r+0x5e8>
 800ec5c:	461d      	mov	r5, r3
 800ec5e:	e7ec      	b.n	800ec3a <_dtoa_r+0x6aa>
 800ec60:	2200      	movs	r2, #0
 800ec62:	4ba4      	ldr	r3, [pc, #656]	; (800eef4 <_dtoa_r+0x964>)
 800ec64:	f7f1 fcd4 	bl	8000610 <__aeabi_dmul>
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	460f      	mov	r7, r1
 800ec70:	f7f1 ff36 	bl	8000ae0 <__aeabi_dcmpeq>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d09a      	beq.n	800ebae <_dtoa_r+0x61e>
 800ec78:	e7ce      	b.n	800ec18 <_dtoa_r+0x688>
 800ec7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec7c:	2a00      	cmp	r2, #0
 800ec7e:	f000 80cd 	beq.w	800ee1c <_dtoa_r+0x88c>
 800ec82:	9a07      	ldr	r2, [sp, #28]
 800ec84:	2a01      	cmp	r2, #1
 800ec86:	f300 80af 	bgt.w	800ede8 <_dtoa_r+0x858>
 800ec8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	f000 80a7 	beq.w	800ede0 <_dtoa_r+0x850>
 800ec92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec96:	9e08      	ldr	r6, [sp, #32]
 800ec98:	9d05      	ldr	r5, [sp, #20]
 800ec9a:	9a05      	ldr	r2, [sp, #20]
 800ec9c:	441a      	add	r2, r3
 800ec9e:	9205      	str	r2, [sp, #20]
 800eca0:	9a06      	ldr	r2, [sp, #24]
 800eca2:	2101      	movs	r1, #1
 800eca4:	441a      	add	r2, r3
 800eca6:	4620      	mov	r0, r4
 800eca8:	9206      	str	r2, [sp, #24]
 800ecaa:	f000 fd73 	bl	800f794 <__i2b>
 800ecae:	4607      	mov	r7, r0
 800ecb0:	2d00      	cmp	r5, #0
 800ecb2:	dd0c      	ble.n	800ecce <_dtoa_r+0x73e>
 800ecb4:	9b06      	ldr	r3, [sp, #24]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dd09      	ble.n	800ecce <_dtoa_r+0x73e>
 800ecba:	42ab      	cmp	r3, r5
 800ecbc:	9a05      	ldr	r2, [sp, #20]
 800ecbe:	bfa8      	it	ge
 800ecc0:	462b      	movge	r3, r5
 800ecc2:	1ad2      	subs	r2, r2, r3
 800ecc4:	9205      	str	r2, [sp, #20]
 800ecc6:	9a06      	ldr	r2, [sp, #24]
 800ecc8:	1aed      	subs	r5, r5, r3
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	9306      	str	r3, [sp, #24]
 800ecce:	9b08      	ldr	r3, [sp, #32]
 800ecd0:	b1f3      	cbz	r3, 800ed10 <_dtoa_r+0x780>
 800ecd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 80a5 	beq.w	800ee24 <_dtoa_r+0x894>
 800ecda:	2e00      	cmp	r6, #0
 800ecdc:	dd10      	ble.n	800ed00 <_dtoa_r+0x770>
 800ecde:	4639      	mov	r1, r7
 800ece0:	4632      	mov	r2, r6
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 fdec 	bl	800f8c0 <__pow5mult>
 800ece8:	4652      	mov	r2, sl
 800ecea:	4601      	mov	r1, r0
 800ecec:	4607      	mov	r7, r0
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 fd59 	bl	800f7a6 <__multiply>
 800ecf4:	4651      	mov	r1, sl
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fcab 	bl	800f654 <_Bfree>
 800ecfe:	46c2      	mov	sl, r8
 800ed00:	9b08      	ldr	r3, [sp, #32]
 800ed02:	1b9a      	subs	r2, r3, r6
 800ed04:	d004      	beq.n	800ed10 <_dtoa_r+0x780>
 800ed06:	4651      	mov	r1, sl
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f000 fdd9 	bl	800f8c0 <__pow5mult>
 800ed0e:	4682      	mov	sl, r0
 800ed10:	2101      	movs	r1, #1
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 fd3e 	bl	800f794 <__i2b>
 800ed18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	f340 8083 	ble.w	800ee28 <_dtoa_r+0x898>
 800ed22:	461a      	mov	r2, r3
 800ed24:	4601      	mov	r1, r0
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fdca 	bl	800f8c0 <__pow5mult>
 800ed2c:	9b07      	ldr	r3, [sp, #28]
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	4606      	mov	r6, r0
 800ed32:	dd7c      	ble.n	800ee2e <_dtoa_r+0x89e>
 800ed34:	f04f 0800 	mov.w	r8, #0
 800ed38:	6933      	ldr	r3, [r6, #16]
 800ed3a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed3e:	6918      	ldr	r0, [r3, #16]
 800ed40:	f000 fcda 	bl	800f6f8 <__hi0bits>
 800ed44:	f1c0 0020 	rsb	r0, r0, #32
 800ed48:	9b06      	ldr	r3, [sp, #24]
 800ed4a:	4418      	add	r0, r3
 800ed4c:	f010 001f 	ands.w	r0, r0, #31
 800ed50:	f000 8096 	beq.w	800ee80 <_dtoa_r+0x8f0>
 800ed54:	f1c0 0320 	rsb	r3, r0, #32
 800ed58:	2b04      	cmp	r3, #4
 800ed5a:	f340 8087 	ble.w	800ee6c <_dtoa_r+0x8dc>
 800ed5e:	9b05      	ldr	r3, [sp, #20]
 800ed60:	f1c0 001c 	rsb	r0, r0, #28
 800ed64:	4403      	add	r3, r0
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	9b06      	ldr	r3, [sp, #24]
 800ed6a:	4405      	add	r5, r0
 800ed6c:	4403      	add	r3, r0
 800ed6e:	9306      	str	r3, [sp, #24]
 800ed70:	9b05      	ldr	r3, [sp, #20]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	dd05      	ble.n	800ed82 <_dtoa_r+0x7f2>
 800ed76:	4651      	mov	r1, sl
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f000 fdee 	bl	800f95c <__lshift>
 800ed80:	4682      	mov	sl, r0
 800ed82:	9b06      	ldr	r3, [sp, #24]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	dd05      	ble.n	800ed94 <_dtoa_r+0x804>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f000 fde5 	bl	800f95c <__lshift>
 800ed92:	4606      	mov	r6, r0
 800ed94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d074      	beq.n	800ee84 <_dtoa_r+0x8f4>
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	4650      	mov	r0, sl
 800ed9e:	f000 fe2e 	bl	800f9fe <__mcmp>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	da6e      	bge.n	800ee84 <_dtoa_r+0x8f4>
 800eda6:	2300      	movs	r3, #0
 800eda8:	4651      	mov	r1, sl
 800edaa:	220a      	movs	r2, #10
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fc68 	bl	800f682 <__multadd>
 800edb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edb8:	4682      	mov	sl, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f000 81a8 	beq.w	800f110 <_dtoa_r+0xb80>
 800edc0:	2300      	movs	r3, #0
 800edc2:	4639      	mov	r1, r7
 800edc4:	220a      	movs	r2, #10
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fc5b 	bl	800f682 <__multadd>
 800edcc:	9b04      	ldr	r3, [sp, #16]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	4607      	mov	r7, r0
 800edd2:	f300 80c8 	bgt.w	800ef66 <_dtoa_r+0x9d6>
 800edd6:	9b07      	ldr	r3, [sp, #28]
 800edd8:	2b02      	cmp	r3, #2
 800edda:	f340 80c4 	ble.w	800ef66 <_dtoa_r+0x9d6>
 800edde:	e059      	b.n	800ee94 <_dtoa_r+0x904>
 800ede0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ede2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ede6:	e756      	b.n	800ec96 <_dtoa_r+0x706>
 800ede8:	9b03      	ldr	r3, [sp, #12]
 800edea:	1e5e      	subs	r6, r3, #1
 800edec:	9b08      	ldr	r3, [sp, #32]
 800edee:	42b3      	cmp	r3, r6
 800edf0:	bfbf      	itttt	lt
 800edf2:	9b08      	ldrlt	r3, [sp, #32]
 800edf4:	9608      	strlt	r6, [sp, #32]
 800edf6:	1af2      	sublt	r2, r6, r3
 800edf8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800edfa:	bfb6      	itet	lt
 800edfc:	189b      	addlt	r3, r3, r2
 800edfe:	1b9e      	subge	r6, r3, r6
 800ee00:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	bfb8      	it	lt
 800ee06:	2600      	movlt	r6, #0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfb9      	ittee	lt
 800ee0c:	9b05      	ldrlt	r3, [sp, #20]
 800ee0e:	9a03      	ldrlt	r2, [sp, #12]
 800ee10:	9d05      	ldrge	r5, [sp, #20]
 800ee12:	9b03      	ldrge	r3, [sp, #12]
 800ee14:	bfbc      	itt	lt
 800ee16:	1a9d      	sublt	r5, r3, r2
 800ee18:	2300      	movlt	r3, #0
 800ee1a:	e73e      	b.n	800ec9a <_dtoa_r+0x70a>
 800ee1c:	9e08      	ldr	r6, [sp, #32]
 800ee1e:	9d05      	ldr	r5, [sp, #20]
 800ee20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee22:	e745      	b.n	800ecb0 <_dtoa_r+0x720>
 800ee24:	9a08      	ldr	r2, [sp, #32]
 800ee26:	e76e      	b.n	800ed06 <_dtoa_r+0x776>
 800ee28:	9b07      	ldr	r3, [sp, #28]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	dc19      	bgt.n	800ee62 <_dtoa_r+0x8d2>
 800ee2e:	9b00      	ldr	r3, [sp, #0]
 800ee30:	b9bb      	cbnz	r3, 800ee62 <_dtoa_r+0x8d2>
 800ee32:	9b01      	ldr	r3, [sp, #4]
 800ee34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee38:	b99b      	cbnz	r3, 800ee62 <_dtoa_r+0x8d2>
 800ee3a:	9b01      	ldr	r3, [sp, #4]
 800ee3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee40:	0d1b      	lsrs	r3, r3, #20
 800ee42:	051b      	lsls	r3, r3, #20
 800ee44:	b183      	cbz	r3, 800ee68 <_dtoa_r+0x8d8>
 800ee46:	9b05      	ldr	r3, [sp, #20]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	9b06      	ldr	r3, [sp, #24]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	9306      	str	r3, [sp, #24]
 800ee52:	f04f 0801 	mov.w	r8, #1
 800ee56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f47f af6d 	bne.w	800ed38 <_dtoa_r+0x7a8>
 800ee5e:	2001      	movs	r0, #1
 800ee60:	e772      	b.n	800ed48 <_dtoa_r+0x7b8>
 800ee62:	f04f 0800 	mov.w	r8, #0
 800ee66:	e7f6      	b.n	800ee56 <_dtoa_r+0x8c6>
 800ee68:	4698      	mov	r8, r3
 800ee6a:	e7f4      	b.n	800ee56 <_dtoa_r+0x8c6>
 800ee6c:	d080      	beq.n	800ed70 <_dtoa_r+0x7e0>
 800ee6e:	9a05      	ldr	r2, [sp, #20]
 800ee70:	331c      	adds	r3, #28
 800ee72:	441a      	add	r2, r3
 800ee74:	9205      	str	r2, [sp, #20]
 800ee76:	9a06      	ldr	r2, [sp, #24]
 800ee78:	441a      	add	r2, r3
 800ee7a:	441d      	add	r5, r3
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	e776      	b.n	800ed6e <_dtoa_r+0x7de>
 800ee80:	4603      	mov	r3, r0
 800ee82:	e7f4      	b.n	800ee6e <_dtoa_r+0x8de>
 800ee84:	9b03      	ldr	r3, [sp, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	dc36      	bgt.n	800eef8 <_dtoa_r+0x968>
 800ee8a:	9b07      	ldr	r3, [sp, #28]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	dd33      	ble.n	800eef8 <_dtoa_r+0x968>
 800ee90:	9b03      	ldr	r3, [sp, #12]
 800ee92:	9304      	str	r3, [sp, #16]
 800ee94:	9b04      	ldr	r3, [sp, #16]
 800ee96:	b963      	cbnz	r3, 800eeb2 <_dtoa_r+0x922>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	2205      	movs	r2, #5
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 fbf0 	bl	800f682 <__multadd>
 800eea2:	4601      	mov	r1, r0
 800eea4:	4606      	mov	r6, r0
 800eea6:	4650      	mov	r0, sl
 800eea8:	f000 fda9 	bl	800f9fe <__mcmp>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f73f adb6 	bgt.w	800ea1e <_dtoa_r+0x48e>
 800eeb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb4:	9d02      	ldr	r5, [sp, #8]
 800eeb6:	ea6f 0b03 	mvn.w	fp, r3
 800eeba:	2300      	movs	r3, #0
 800eebc:	9303      	str	r3, [sp, #12]
 800eebe:	4631      	mov	r1, r6
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 fbc7 	bl	800f654 <_Bfree>
 800eec6:	2f00      	cmp	r7, #0
 800eec8:	f43f aea6 	beq.w	800ec18 <_dtoa_r+0x688>
 800eecc:	9b03      	ldr	r3, [sp, #12]
 800eece:	b12b      	cbz	r3, 800eedc <_dtoa_r+0x94c>
 800eed0:	42bb      	cmp	r3, r7
 800eed2:	d003      	beq.n	800eedc <_dtoa_r+0x94c>
 800eed4:	4619      	mov	r1, r3
 800eed6:	4620      	mov	r0, r4
 800eed8:	f000 fbbc 	bl	800f654 <_Bfree>
 800eedc:	4639      	mov	r1, r7
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fbb8 	bl	800f654 <_Bfree>
 800eee4:	e698      	b.n	800ec18 <_dtoa_r+0x688>
 800eee6:	2600      	movs	r6, #0
 800eee8:	4637      	mov	r7, r6
 800eeea:	e7e2      	b.n	800eeb2 <_dtoa_r+0x922>
 800eeec:	46bb      	mov	fp, r7
 800eeee:	4637      	mov	r7, r6
 800eef0:	e595      	b.n	800ea1e <_dtoa_r+0x48e>
 800eef2:	bf00      	nop
 800eef4:	40240000 	.word	0x40240000
 800eef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefa:	bb93      	cbnz	r3, 800ef62 <_dtoa_r+0x9d2>
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	9304      	str	r3, [sp, #16]
 800ef00:	9d02      	ldr	r5, [sp, #8]
 800ef02:	4631      	mov	r1, r6
 800ef04:	4650      	mov	r0, sl
 800ef06:	f7ff fab7 	bl	800e478 <quorem>
 800ef0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ef0e:	f805 9b01 	strb.w	r9, [r5], #1
 800ef12:	9b02      	ldr	r3, [sp, #8]
 800ef14:	9a04      	ldr	r2, [sp, #16]
 800ef16:	1aeb      	subs	r3, r5, r3
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	f300 80dc 	bgt.w	800f0d6 <_dtoa_r+0xb46>
 800ef1e:	9b02      	ldr	r3, [sp, #8]
 800ef20:	2a01      	cmp	r2, #1
 800ef22:	bfac      	ite	ge
 800ef24:	189b      	addge	r3, r3, r2
 800ef26:	3301      	addlt	r3, #1
 800ef28:	4698      	mov	r8, r3
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	4651      	mov	r1, sl
 800ef30:	2201      	movs	r2, #1
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 fd12 	bl	800f95c <__lshift>
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4682      	mov	sl, r0
 800ef3c:	f000 fd5f 	bl	800f9fe <__mcmp>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	f300 808d 	bgt.w	800f060 <_dtoa_r+0xad0>
 800ef46:	d103      	bne.n	800ef50 <_dtoa_r+0x9c0>
 800ef48:	f019 0f01 	tst.w	r9, #1
 800ef4c:	f040 8088 	bne.w	800f060 <_dtoa_r+0xad0>
 800ef50:	4645      	mov	r5, r8
 800ef52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef56:	2b30      	cmp	r3, #48	; 0x30
 800ef58:	f105 32ff 	add.w	r2, r5, #4294967295
 800ef5c:	d1af      	bne.n	800eebe <_dtoa_r+0x92e>
 800ef5e:	4615      	mov	r5, r2
 800ef60:	e7f7      	b.n	800ef52 <_dtoa_r+0x9c2>
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	9304      	str	r3, [sp, #16]
 800ef66:	2d00      	cmp	r5, #0
 800ef68:	dd05      	ble.n	800ef76 <_dtoa_r+0x9e6>
 800ef6a:	4639      	mov	r1, r7
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f000 fcf4 	bl	800f95c <__lshift>
 800ef74:	4607      	mov	r7, r0
 800ef76:	f1b8 0f00 	cmp.w	r8, #0
 800ef7a:	d04c      	beq.n	800f016 <_dtoa_r+0xa86>
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f000 fb34 	bl	800f5ec <_Balloc>
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	3202      	adds	r2, #2
 800ef88:	4605      	mov	r5, r0
 800ef8a:	0092      	lsls	r2, r2, #2
 800ef8c:	f107 010c 	add.w	r1, r7, #12
 800ef90:	300c      	adds	r0, #12
 800ef92:	f7fd f863 	bl	800c05c <memcpy>
 800ef96:	2201      	movs	r2, #1
 800ef98:	4629      	mov	r1, r5
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 fcde 	bl	800f95c <__lshift>
 800efa0:	9b00      	ldr	r3, [sp, #0]
 800efa2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800efa6:	9703      	str	r7, [sp, #12]
 800efa8:	f003 0301 	and.w	r3, r3, #1
 800efac:	4607      	mov	r7, r0
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	4631      	mov	r1, r6
 800efb2:	4650      	mov	r0, sl
 800efb4:	f7ff fa60 	bl	800e478 <quorem>
 800efb8:	9903      	ldr	r1, [sp, #12]
 800efba:	4605      	mov	r5, r0
 800efbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800efc0:	4650      	mov	r0, sl
 800efc2:	f000 fd1c 	bl	800f9fe <__mcmp>
 800efc6:	463a      	mov	r2, r7
 800efc8:	9000      	str	r0, [sp, #0]
 800efca:	4631      	mov	r1, r6
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 fd30 	bl	800fa32 <__mdiff>
 800efd2:	68c3      	ldr	r3, [r0, #12]
 800efd4:	4602      	mov	r2, r0
 800efd6:	bb03      	cbnz	r3, 800f01a <_dtoa_r+0xa8a>
 800efd8:	4601      	mov	r1, r0
 800efda:	9006      	str	r0, [sp, #24]
 800efdc:	4650      	mov	r0, sl
 800efde:	f000 fd0e 	bl	800f9fe <__mcmp>
 800efe2:	9a06      	ldr	r2, [sp, #24]
 800efe4:	4603      	mov	r3, r0
 800efe6:	4611      	mov	r1, r2
 800efe8:	4620      	mov	r0, r4
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	f000 fb32 	bl	800f654 <_Bfree>
 800eff0:	9b06      	ldr	r3, [sp, #24]
 800eff2:	b9a3      	cbnz	r3, 800f01e <_dtoa_r+0xa8e>
 800eff4:	9a07      	ldr	r2, [sp, #28]
 800eff6:	b992      	cbnz	r2, 800f01e <_dtoa_r+0xa8e>
 800eff8:	9a05      	ldr	r2, [sp, #20]
 800effa:	b982      	cbnz	r2, 800f01e <_dtoa_r+0xa8e>
 800effc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f000:	d029      	beq.n	800f056 <_dtoa_r+0xac6>
 800f002:	9b00      	ldr	r3, [sp, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	dd01      	ble.n	800f00c <_dtoa_r+0xa7c>
 800f008:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800f00c:	f108 0501 	add.w	r5, r8, #1
 800f010:	f888 9000 	strb.w	r9, [r8]
 800f014:	e753      	b.n	800eebe <_dtoa_r+0x92e>
 800f016:	4638      	mov	r0, r7
 800f018:	e7c2      	b.n	800efa0 <_dtoa_r+0xa10>
 800f01a:	2301      	movs	r3, #1
 800f01c:	e7e3      	b.n	800efe6 <_dtoa_r+0xa56>
 800f01e:	9a00      	ldr	r2, [sp, #0]
 800f020:	2a00      	cmp	r2, #0
 800f022:	db04      	blt.n	800f02e <_dtoa_r+0xa9e>
 800f024:	d125      	bne.n	800f072 <_dtoa_r+0xae2>
 800f026:	9a07      	ldr	r2, [sp, #28]
 800f028:	bb1a      	cbnz	r2, 800f072 <_dtoa_r+0xae2>
 800f02a:	9a05      	ldr	r2, [sp, #20]
 800f02c:	bb0a      	cbnz	r2, 800f072 <_dtoa_r+0xae2>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	ddec      	ble.n	800f00c <_dtoa_r+0xa7c>
 800f032:	4651      	mov	r1, sl
 800f034:	2201      	movs	r2, #1
 800f036:	4620      	mov	r0, r4
 800f038:	f000 fc90 	bl	800f95c <__lshift>
 800f03c:	4631      	mov	r1, r6
 800f03e:	4682      	mov	sl, r0
 800f040:	f000 fcdd 	bl	800f9fe <__mcmp>
 800f044:	2800      	cmp	r0, #0
 800f046:	dc03      	bgt.n	800f050 <_dtoa_r+0xac0>
 800f048:	d1e0      	bne.n	800f00c <_dtoa_r+0xa7c>
 800f04a:	f019 0f01 	tst.w	r9, #1
 800f04e:	d0dd      	beq.n	800f00c <_dtoa_r+0xa7c>
 800f050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f054:	d1d8      	bne.n	800f008 <_dtoa_r+0xa78>
 800f056:	2339      	movs	r3, #57	; 0x39
 800f058:	f888 3000 	strb.w	r3, [r8]
 800f05c:	f108 0801 	add.w	r8, r8, #1
 800f060:	4645      	mov	r5, r8
 800f062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f066:	2b39      	cmp	r3, #57	; 0x39
 800f068:	f105 32ff 	add.w	r2, r5, #4294967295
 800f06c:	d03b      	beq.n	800f0e6 <_dtoa_r+0xb56>
 800f06e:	3301      	adds	r3, #1
 800f070:	e040      	b.n	800f0f4 <_dtoa_r+0xb64>
 800f072:	2b00      	cmp	r3, #0
 800f074:	f108 0501 	add.w	r5, r8, #1
 800f078:	dd05      	ble.n	800f086 <_dtoa_r+0xaf6>
 800f07a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f07e:	d0ea      	beq.n	800f056 <_dtoa_r+0xac6>
 800f080:	f109 0901 	add.w	r9, r9, #1
 800f084:	e7c4      	b.n	800f010 <_dtoa_r+0xa80>
 800f086:	9b02      	ldr	r3, [sp, #8]
 800f088:	9a04      	ldr	r2, [sp, #16]
 800f08a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800f08e:	1aeb      	subs	r3, r5, r3
 800f090:	4293      	cmp	r3, r2
 800f092:	46a8      	mov	r8, r5
 800f094:	f43f af4b 	beq.w	800ef2e <_dtoa_r+0x99e>
 800f098:	4651      	mov	r1, sl
 800f09a:	2300      	movs	r3, #0
 800f09c:	220a      	movs	r2, #10
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f000 faef 	bl	800f682 <__multadd>
 800f0a4:	9b03      	ldr	r3, [sp, #12]
 800f0a6:	9903      	ldr	r1, [sp, #12]
 800f0a8:	42bb      	cmp	r3, r7
 800f0aa:	4682      	mov	sl, r0
 800f0ac:	f04f 0300 	mov.w	r3, #0
 800f0b0:	f04f 020a 	mov.w	r2, #10
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	d104      	bne.n	800f0c2 <_dtoa_r+0xb32>
 800f0b8:	f000 fae3 	bl	800f682 <__multadd>
 800f0bc:	9003      	str	r0, [sp, #12]
 800f0be:	4607      	mov	r7, r0
 800f0c0:	e776      	b.n	800efb0 <_dtoa_r+0xa20>
 800f0c2:	f000 fade 	bl	800f682 <__multadd>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9003      	str	r0, [sp, #12]
 800f0ca:	220a      	movs	r2, #10
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 fad7 	bl	800f682 <__multadd>
 800f0d4:	e7f3      	b.n	800f0be <_dtoa_r+0xb2e>
 800f0d6:	4651      	mov	r1, sl
 800f0d8:	2300      	movs	r3, #0
 800f0da:	220a      	movs	r2, #10
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f000 fad0 	bl	800f682 <__multadd>
 800f0e2:	4682      	mov	sl, r0
 800f0e4:	e70d      	b.n	800ef02 <_dtoa_r+0x972>
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d105      	bne.n	800f0f8 <_dtoa_r+0xb68>
 800f0ec:	9a02      	ldr	r2, [sp, #8]
 800f0ee:	f10b 0b01 	add.w	fp, fp, #1
 800f0f2:	2331      	movs	r3, #49	; 0x31
 800f0f4:	7013      	strb	r3, [r2, #0]
 800f0f6:	e6e2      	b.n	800eebe <_dtoa_r+0x92e>
 800f0f8:	4615      	mov	r5, r2
 800f0fa:	e7b2      	b.n	800f062 <_dtoa_r+0xad2>
 800f0fc:	4b09      	ldr	r3, [pc, #36]	; (800f124 <_dtoa_r+0xb94>)
 800f0fe:	f7ff baae 	b.w	800e65e <_dtoa_r+0xce>
 800f102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f104:	2b00      	cmp	r3, #0
 800f106:	f47f aa88 	bne.w	800e61a <_dtoa_r+0x8a>
 800f10a:	4b07      	ldr	r3, [pc, #28]	; (800f128 <_dtoa_r+0xb98>)
 800f10c:	f7ff baa7 	b.w	800e65e <_dtoa_r+0xce>
 800f110:	9b04      	ldr	r3, [sp, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	f73f aef4 	bgt.w	800ef00 <_dtoa_r+0x970>
 800f118:	9b07      	ldr	r3, [sp, #28]
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	f77f aef0 	ble.w	800ef00 <_dtoa_r+0x970>
 800f120:	e6b8      	b.n	800ee94 <_dtoa_r+0x904>
 800f122:	bf00      	nop
 800f124:	080108f4 	.word	0x080108f4
 800f128:	08010936 	.word	0x08010936

0800f12c <_fclose_r>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	4605      	mov	r5, r0
 800f130:	460c      	mov	r4, r1
 800f132:	b911      	cbnz	r1, 800f13a <_fclose_r+0xe>
 800f134:	2600      	movs	r6, #0
 800f136:	4630      	mov	r0, r6
 800f138:	bd70      	pop	{r4, r5, r6, pc}
 800f13a:	b118      	cbz	r0, 800f144 <_fclose_r+0x18>
 800f13c:	6983      	ldr	r3, [r0, #24]
 800f13e:	b90b      	cbnz	r3, 800f144 <_fclose_r+0x18>
 800f140:	f7fc fb96 	bl	800b870 <__sinit>
 800f144:	4b2c      	ldr	r3, [pc, #176]	; (800f1f8 <_fclose_r+0xcc>)
 800f146:	429c      	cmp	r4, r3
 800f148:	d114      	bne.n	800f174 <_fclose_r+0x48>
 800f14a:	686c      	ldr	r4, [r5, #4]
 800f14c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f14e:	07d8      	lsls	r0, r3, #31
 800f150:	d405      	bmi.n	800f15e <_fclose_r+0x32>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	0599      	lsls	r1, r3, #22
 800f156:	d402      	bmi.n	800f15e <_fclose_r+0x32>
 800f158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f15a:	f7fc fd5f 	bl	800bc1c <__retarget_lock_acquire_recursive>
 800f15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f162:	b98b      	cbnz	r3, 800f188 <_fclose_r+0x5c>
 800f164:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800f166:	f016 0601 	ands.w	r6, r6, #1
 800f16a:	d1e3      	bne.n	800f134 <_fclose_r+0x8>
 800f16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f16e:	f7fc fd56 	bl	800bc1e <__retarget_lock_release_recursive>
 800f172:	e7e0      	b.n	800f136 <_fclose_r+0xa>
 800f174:	4b21      	ldr	r3, [pc, #132]	; (800f1fc <_fclose_r+0xd0>)
 800f176:	429c      	cmp	r4, r3
 800f178:	d101      	bne.n	800f17e <_fclose_r+0x52>
 800f17a:	68ac      	ldr	r4, [r5, #8]
 800f17c:	e7e6      	b.n	800f14c <_fclose_r+0x20>
 800f17e:	4b20      	ldr	r3, [pc, #128]	; (800f200 <_fclose_r+0xd4>)
 800f180:	429c      	cmp	r4, r3
 800f182:	bf08      	it	eq
 800f184:	68ec      	ldreq	r4, [r5, #12]
 800f186:	e7e1      	b.n	800f14c <_fclose_r+0x20>
 800f188:	4621      	mov	r1, r4
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7fc fa38 	bl	800b600 <__sflush_r>
 800f190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f192:	4606      	mov	r6, r0
 800f194:	b133      	cbz	r3, 800f1a4 <_fclose_r+0x78>
 800f196:	6a21      	ldr	r1, [r4, #32]
 800f198:	4628      	mov	r0, r5
 800f19a:	4798      	blx	r3
 800f19c:	2800      	cmp	r0, #0
 800f19e:	bfb8      	it	lt
 800f1a0:	f04f 36ff 	movlt.w	r6, #4294967295
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	061a      	lsls	r2, r3, #24
 800f1a8:	d503      	bpl.n	800f1b2 <_fclose_r+0x86>
 800f1aa:	6921      	ldr	r1, [r4, #16]
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f7fc fc35 	bl	800ba1c <_free_r>
 800f1b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1b4:	b141      	cbz	r1, 800f1c8 <_fclose_r+0x9c>
 800f1b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	d002      	beq.n	800f1c4 <_fclose_r+0x98>
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f7fc fc2c 	bl	800ba1c <_free_r>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6363      	str	r3, [r4, #52]	; 0x34
 800f1c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1ca:	b121      	cbz	r1, 800f1d6 <_fclose_r+0xaa>
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f7fc fc25 	bl	800ba1c <_free_r>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f1d6:	f7fc fb33 	bl	800b840 <__sfp_lock_acquire>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1e0:	07db      	lsls	r3, r3, #31
 800f1e2:	d402      	bmi.n	800f1ea <_fclose_r+0xbe>
 800f1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1e6:	f7fc fd1a 	bl	800bc1e <__retarget_lock_release_recursive>
 800f1ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ec:	f7fc fd15 	bl	800bc1a <__retarget_lock_close_recursive>
 800f1f0:	f7fc fb2c 	bl	800b84c <__sfp_lock_release>
 800f1f4:	e79f      	b.n	800f136 <_fclose_r+0xa>
 800f1f6:	bf00      	nop
 800f1f8:	0801087c 	.word	0x0801087c
 800f1fc:	0801089c 	.word	0x0801089c
 800f200:	0801085c 	.word	0x0801085c

0800f204 <__sfvwrite_r>:
 800f204:	6893      	ldr	r3, [r2, #8]
 800f206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20a:	4607      	mov	r7, r0
 800f20c:	460c      	mov	r4, r1
 800f20e:	4690      	mov	r8, r2
 800f210:	b91b      	cbnz	r3, 800f21a <__sfvwrite_r+0x16>
 800f212:	2000      	movs	r0, #0
 800f214:	b003      	add	sp, #12
 800f216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21a:	898b      	ldrh	r3, [r1, #12]
 800f21c:	0718      	lsls	r0, r3, #28
 800f21e:	d526      	bpl.n	800f26e <__sfvwrite_r+0x6a>
 800f220:	690b      	ldr	r3, [r1, #16]
 800f222:	b323      	cbz	r3, 800f26e <__sfvwrite_r+0x6a>
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	f8d8 6000 	ldr.w	r6, [r8]
 800f22a:	f013 0902 	ands.w	r9, r3, #2
 800f22e:	d02d      	beq.n	800f28c <__sfvwrite_r+0x88>
 800f230:	f04f 0a00 	mov.w	sl, #0
 800f234:	f8df b264 	ldr.w	fp, [pc, #612]	; 800f49c <__sfvwrite_r+0x298>
 800f238:	46d1      	mov	r9, sl
 800f23a:	f1b9 0f00 	cmp.w	r9, #0
 800f23e:	d01f      	beq.n	800f280 <__sfvwrite_r+0x7c>
 800f240:	45d9      	cmp	r9, fp
 800f242:	464b      	mov	r3, r9
 800f244:	4652      	mov	r2, sl
 800f246:	bf28      	it	cs
 800f248:	465b      	movcs	r3, fp
 800f24a:	6a21      	ldr	r1, [r4, #32]
 800f24c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f24e:	4638      	mov	r0, r7
 800f250:	47a8      	blx	r5
 800f252:	2800      	cmp	r0, #0
 800f254:	f340 8089 	ble.w	800f36a <__sfvwrite_r+0x166>
 800f258:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f25c:	4482      	add	sl, r0
 800f25e:	eba9 0900 	sub.w	r9, r9, r0
 800f262:	1a18      	subs	r0, r3, r0
 800f264:	f8c8 0008 	str.w	r0, [r8, #8]
 800f268:	2800      	cmp	r0, #0
 800f26a:	d1e6      	bne.n	800f23a <__sfvwrite_r+0x36>
 800f26c:	e7d1      	b.n	800f212 <__sfvwrite_r+0xe>
 800f26e:	4621      	mov	r1, r4
 800f270:	4638      	mov	r0, r7
 800f272:	f7ff f883 	bl	800e37c <__swsetup_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0d4      	beq.n	800f224 <__sfvwrite_r+0x20>
 800f27a:	f04f 30ff 	mov.w	r0, #4294967295
 800f27e:	e7c9      	b.n	800f214 <__sfvwrite_r+0x10>
 800f280:	f8d6 a000 	ldr.w	sl, [r6]
 800f284:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800f288:	3608      	adds	r6, #8
 800f28a:	e7d6      	b.n	800f23a <__sfvwrite_r+0x36>
 800f28c:	f013 0301 	ands.w	r3, r3, #1
 800f290:	d043      	beq.n	800f31a <__sfvwrite_r+0x116>
 800f292:	4648      	mov	r0, r9
 800f294:	46ca      	mov	sl, r9
 800f296:	46cb      	mov	fp, r9
 800f298:	f1bb 0f00 	cmp.w	fp, #0
 800f29c:	f000 80d9 	beq.w	800f452 <__sfvwrite_r+0x24e>
 800f2a0:	b950      	cbnz	r0, 800f2b8 <__sfvwrite_r+0xb4>
 800f2a2:	465a      	mov	r2, fp
 800f2a4:	210a      	movs	r1, #10
 800f2a6:	4650      	mov	r0, sl
 800f2a8:	f7f0 ffaa 	bl	8000200 <memchr>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f000 80d5 	beq.w	800f45c <__sfvwrite_r+0x258>
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	eba0 090a 	sub.w	r9, r0, sl
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	6921      	ldr	r1, [r4, #16]
 800f2bc:	6962      	ldr	r2, [r4, #20]
 800f2be:	45d9      	cmp	r9, fp
 800f2c0:	464b      	mov	r3, r9
 800f2c2:	bf28      	it	cs
 800f2c4:	465b      	movcs	r3, fp
 800f2c6:	4288      	cmp	r0, r1
 800f2c8:	f240 80cb 	bls.w	800f462 <__sfvwrite_r+0x25e>
 800f2cc:	68a5      	ldr	r5, [r4, #8]
 800f2ce:	4415      	add	r5, r2
 800f2d0:	42ab      	cmp	r3, r5
 800f2d2:	f340 80c6 	ble.w	800f462 <__sfvwrite_r+0x25e>
 800f2d6:	4651      	mov	r1, sl
 800f2d8:	462a      	mov	r2, r5
 800f2da:	f000 f96d 	bl	800f5b8 <memmove>
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	442b      	add	r3, r5
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	4621      	mov	r1, r4
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f7fc fa1c 	bl	800b724 <_fflush_r>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d13c      	bne.n	800f36a <__sfvwrite_r+0x166>
 800f2f0:	ebb9 0905 	subs.w	r9, r9, r5
 800f2f4:	f040 80cf 	bne.w	800f496 <__sfvwrite_r+0x292>
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	f7fc fa12 	bl	800b724 <_fflush_r>
 800f300:	2800      	cmp	r0, #0
 800f302:	d132      	bne.n	800f36a <__sfvwrite_r+0x166>
 800f304:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f308:	44aa      	add	sl, r5
 800f30a:	ebab 0b05 	sub.w	fp, fp, r5
 800f30e:	1b5d      	subs	r5, r3, r5
 800f310:	f8c8 5008 	str.w	r5, [r8, #8]
 800f314:	2d00      	cmp	r5, #0
 800f316:	d1bf      	bne.n	800f298 <__sfvwrite_r+0x94>
 800f318:	e77b      	b.n	800f212 <__sfvwrite_r+0xe>
 800f31a:	4699      	mov	r9, r3
 800f31c:	469a      	mov	sl, r3
 800f31e:	f1ba 0f00 	cmp.w	sl, #0
 800f322:	d027      	beq.n	800f374 <__sfvwrite_r+0x170>
 800f324:	89a2      	ldrh	r2, [r4, #12]
 800f326:	68a5      	ldr	r5, [r4, #8]
 800f328:	0591      	lsls	r1, r2, #22
 800f32a:	d565      	bpl.n	800f3f8 <__sfvwrite_r+0x1f4>
 800f32c:	45aa      	cmp	sl, r5
 800f32e:	d33b      	bcc.n	800f3a8 <__sfvwrite_r+0x1a4>
 800f330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f334:	d036      	beq.n	800f3a4 <__sfvwrite_r+0x1a0>
 800f336:	6921      	ldr	r1, [r4, #16]
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	1a5b      	subs	r3, r3, r1
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	6963      	ldr	r3, [r4, #20]
 800f340:	2002      	movs	r0, #2
 800f342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f346:	fb93 fbf0 	sdiv	fp, r3, r0
 800f34a:	9b01      	ldr	r3, [sp, #4]
 800f34c:	1c58      	adds	r0, r3, #1
 800f34e:	4450      	add	r0, sl
 800f350:	4583      	cmp	fp, r0
 800f352:	bf38      	it	cc
 800f354:	4683      	movcc	fp, r0
 800f356:	0553      	lsls	r3, r2, #21
 800f358:	d53e      	bpl.n	800f3d8 <__sfvwrite_r+0x1d4>
 800f35a:	4659      	mov	r1, fp
 800f35c:	4638      	mov	r0, r7
 800f35e:	f7fc fc6f 	bl	800bc40 <_malloc_r>
 800f362:	4605      	mov	r5, r0
 800f364:	b950      	cbnz	r0, 800f37c <__sfvwrite_r+0x178>
 800f366:	230c      	movs	r3, #12
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	89a3      	ldrh	r3, [r4, #12]
 800f36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f370:	81a3      	strh	r3, [r4, #12]
 800f372:	e782      	b.n	800f27a <__sfvwrite_r+0x76>
 800f374:	e896 0600 	ldmia.w	r6, {r9, sl}
 800f378:	3608      	adds	r6, #8
 800f37a:	e7d0      	b.n	800f31e <__sfvwrite_r+0x11a>
 800f37c:	9a01      	ldr	r2, [sp, #4]
 800f37e:	6921      	ldr	r1, [r4, #16]
 800f380:	f7fc fe6c 	bl	800c05c <memcpy>
 800f384:	89a2      	ldrh	r2, [r4, #12]
 800f386:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f38a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f38e:	81a2      	strh	r2, [r4, #12]
 800f390:	9b01      	ldr	r3, [sp, #4]
 800f392:	6125      	str	r5, [r4, #16]
 800f394:	441d      	add	r5, r3
 800f396:	ebab 0303 	sub.w	r3, fp, r3
 800f39a:	6025      	str	r5, [r4, #0]
 800f39c:	f8c4 b014 	str.w	fp, [r4, #20]
 800f3a0:	4655      	mov	r5, sl
 800f3a2:	60a3      	str	r3, [r4, #8]
 800f3a4:	45aa      	cmp	sl, r5
 800f3a6:	d200      	bcs.n	800f3aa <__sfvwrite_r+0x1a6>
 800f3a8:	4655      	mov	r5, sl
 800f3aa:	462a      	mov	r2, r5
 800f3ac:	4649      	mov	r1, r9
 800f3ae:	6820      	ldr	r0, [r4, #0]
 800f3b0:	f000 f902 	bl	800f5b8 <memmove>
 800f3b4:	68a3      	ldr	r3, [r4, #8]
 800f3b6:	1b5b      	subs	r3, r3, r5
 800f3b8:	60a3      	str	r3, [r4, #8]
 800f3ba:	6823      	ldr	r3, [r4, #0]
 800f3bc:	441d      	add	r5, r3
 800f3be:	6025      	str	r5, [r4, #0]
 800f3c0:	4655      	mov	r5, sl
 800f3c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3c6:	44a9      	add	r9, r5
 800f3c8:	ebaa 0a05 	sub.w	sl, sl, r5
 800f3cc:	1b5d      	subs	r5, r3, r5
 800f3ce:	f8c8 5008 	str.w	r5, [r8, #8]
 800f3d2:	2d00      	cmp	r5, #0
 800f3d4:	d1a3      	bne.n	800f31e <__sfvwrite_r+0x11a>
 800f3d6:	e71c      	b.n	800f212 <__sfvwrite_r+0xe>
 800f3d8:	465a      	mov	r2, fp
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f000 fc30 	bl	800fc40 <_realloc_r>
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1d4      	bne.n	800f390 <__sfvwrite_r+0x18c>
 800f3e6:	6921      	ldr	r1, [r4, #16]
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f7fc fb17 	bl	800ba1c <_free_r>
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3f4:	81a3      	strh	r3, [r4, #12]
 800f3f6:	e7b6      	b.n	800f366 <__sfvwrite_r+0x162>
 800f3f8:	6820      	ldr	r0, [r4, #0]
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	4298      	cmp	r0, r3
 800f3fe:	d802      	bhi.n	800f406 <__sfvwrite_r+0x202>
 800f400:	6962      	ldr	r2, [r4, #20]
 800f402:	4592      	cmp	sl, r2
 800f404:	d215      	bcs.n	800f432 <__sfvwrite_r+0x22e>
 800f406:	4555      	cmp	r5, sl
 800f408:	bf28      	it	cs
 800f40a:	4655      	movcs	r5, sl
 800f40c:	462a      	mov	r2, r5
 800f40e:	4649      	mov	r1, r9
 800f410:	f000 f8d2 	bl	800f5b8 <memmove>
 800f414:	68a3      	ldr	r3, [r4, #8]
 800f416:	6822      	ldr	r2, [r4, #0]
 800f418:	1b5b      	subs	r3, r3, r5
 800f41a:	442a      	add	r2, r5
 800f41c:	60a3      	str	r3, [r4, #8]
 800f41e:	6022      	str	r2, [r4, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1ce      	bne.n	800f3c2 <__sfvwrite_r+0x1be>
 800f424:	4621      	mov	r1, r4
 800f426:	4638      	mov	r0, r7
 800f428:	f7fc f97c 	bl	800b724 <_fflush_r>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d0c8      	beq.n	800f3c2 <__sfvwrite_r+0x1be>
 800f430:	e79b      	b.n	800f36a <__sfvwrite_r+0x166>
 800f432:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f436:	4553      	cmp	r3, sl
 800f438:	bf28      	it	cs
 800f43a:	4653      	movcs	r3, sl
 800f43c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f43e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f442:	6a21      	ldr	r1, [r4, #32]
 800f444:	4353      	muls	r3, r2
 800f446:	4638      	mov	r0, r7
 800f448:	464a      	mov	r2, r9
 800f44a:	47a8      	blx	r5
 800f44c:	1e05      	subs	r5, r0, #0
 800f44e:	dcb8      	bgt.n	800f3c2 <__sfvwrite_r+0x1be>
 800f450:	e78b      	b.n	800f36a <__sfvwrite_r+0x166>
 800f452:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800f456:	2000      	movs	r0, #0
 800f458:	3608      	adds	r6, #8
 800f45a:	e71d      	b.n	800f298 <__sfvwrite_r+0x94>
 800f45c:	f10b 0901 	add.w	r9, fp, #1
 800f460:	e72a      	b.n	800f2b8 <__sfvwrite_r+0xb4>
 800f462:	4293      	cmp	r3, r2
 800f464:	db09      	blt.n	800f47a <__sfvwrite_r+0x276>
 800f466:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f468:	6a21      	ldr	r1, [r4, #32]
 800f46a:	4613      	mov	r3, r2
 800f46c:	4638      	mov	r0, r7
 800f46e:	4652      	mov	r2, sl
 800f470:	47a8      	blx	r5
 800f472:	1e05      	subs	r5, r0, #0
 800f474:	f73f af3c 	bgt.w	800f2f0 <__sfvwrite_r+0xec>
 800f478:	e777      	b.n	800f36a <__sfvwrite_r+0x166>
 800f47a:	461a      	mov	r2, r3
 800f47c:	4651      	mov	r1, sl
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	f000 f89a 	bl	800f5b8 <memmove>
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	68a2      	ldr	r2, [r4, #8]
 800f488:	1ad2      	subs	r2, r2, r3
 800f48a:	60a2      	str	r2, [r4, #8]
 800f48c:	6822      	ldr	r2, [r4, #0]
 800f48e:	441a      	add	r2, r3
 800f490:	6022      	str	r2, [r4, #0]
 800f492:	461d      	mov	r5, r3
 800f494:	e72c      	b.n	800f2f0 <__sfvwrite_r+0xec>
 800f496:	2001      	movs	r0, #1
 800f498:	e734      	b.n	800f304 <__sfvwrite_r+0x100>
 800f49a:	bf00      	nop
 800f49c:	7ffffc00 	.word	0x7ffffc00

0800f4a0 <_localeconv_r>:
 800f4a0:	4b04      	ldr	r3, [pc, #16]	; (800f4b4 <_localeconv_r+0x14>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6a18      	ldr	r0, [r3, #32]
 800f4a6:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <_localeconv_r+0x18>)
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	bf08      	it	eq
 800f4ac:	4618      	moveq	r0, r3
 800f4ae:	30f0      	adds	r0, #240	; 0xf0
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	20000044 	.word	0x20000044
 800f4b8:	20000548 	.word	0x20000548

0800f4bc <_lseek_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	4c07      	ldr	r4, [pc, #28]	; (800f4dc <_lseek_r+0x20>)
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	4608      	mov	r0, r1
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	6022      	str	r2, [r4, #0]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	f7fb fe93 	bl	800b1f6 <_lseek>
 800f4d0:	1c43      	adds	r3, r0, #1
 800f4d2:	d102      	bne.n	800f4da <_lseek_r+0x1e>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	b103      	cbz	r3, 800f4da <_lseek_r+0x1e>
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	20001dbc 	.word	0x20001dbc

0800f4e0 <__swhatbuf_r>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	460e      	mov	r6, r1
 800f4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e8:	2900      	cmp	r1, #0
 800f4ea:	b090      	sub	sp, #64	; 0x40
 800f4ec:	4614      	mov	r4, r2
 800f4ee:	461d      	mov	r5, r3
 800f4f0:	da09      	bge.n	800f506 <__swhatbuf_r+0x26>
 800f4f2:	89b3      	ldrh	r3, [r6, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f4fa:	602a      	str	r2, [r5, #0]
 800f4fc:	d116      	bne.n	800f52c <__swhatbuf_r+0x4c>
 800f4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f502:	6023      	str	r3, [r4, #0]
 800f504:	e015      	b.n	800f532 <__swhatbuf_r+0x52>
 800f506:	aa01      	add	r2, sp, #4
 800f508:	f000 fec0 	bl	801028c <_fstat_r>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	dbf0      	blt.n	800f4f2 <__swhatbuf_r+0x12>
 800f510:	9a02      	ldr	r2, [sp, #8]
 800f512:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f516:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f51a:	425a      	negs	r2, r3
 800f51c:	415a      	adcs	r2, r3
 800f51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f522:	602a      	str	r2, [r5, #0]
 800f524:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	e002      	b.n	800f532 <__swhatbuf_r+0x52>
 800f52c:	2340      	movs	r3, #64	; 0x40
 800f52e:	6023      	str	r3, [r4, #0]
 800f530:	4610      	mov	r0, r2
 800f532:	b010      	add	sp, #64	; 0x40
 800f534:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f538 <__smakebuf_r>:
 800f538:	898b      	ldrh	r3, [r1, #12]
 800f53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f53c:	079d      	lsls	r5, r3, #30
 800f53e:	4606      	mov	r6, r0
 800f540:	460c      	mov	r4, r1
 800f542:	d507      	bpl.n	800f554 <__smakebuf_r+0x1c>
 800f544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	6123      	str	r3, [r4, #16]
 800f54c:	2301      	movs	r3, #1
 800f54e:	6163      	str	r3, [r4, #20]
 800f550:	b002      	add	sp, #8
 800f552:	bd70      	pop	{r4, r5, r6, pc}
 800f554:	ab01      	add	r3, sp, #4
 800f556:	466a      	mov	r2, sp
 800f558:	f7ff ffc2 	bl	800f4e0 <__swhatbuf_r>
 800f55c:	9900      	ldr	r1, [sp, #0]
 800f55e:	4605      	mov	r5, r0
 800f560:	4630      	mov	r0, r6
 800f562:	f7fc fb6d 	bl	800bc40 <_malloc_r>
 800f566:	b948      	cbnz	r0, 800f57c <__smakebuf_r+0x44>
 800f568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f56c:	059a      	lsls	r2, r3, #22
 800f56e:	d4ef      	bmi.n	800f550 <__smakebuf_r+0x18>
 800f570:	f023 0303 	bic.w	r3, r3, #3
 800f574:	f043 0302 	orr.w	r3, r3, #2
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	e7e3      	b.n	800f544 <__smakebuf_r+0xc>
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <__smakebuf_r+0x7c>)
 800f57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	6020      	str	r0, [r4, #0]
 800f584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f588:	81a3      	strh	r3, [r4, #12]
 800f58a:	9b00      	ldr	r3, [sp, #0]
 800f58c:	6163      	str	r3, [r4, #20]
 800f58e:	9b01      	ldr	r3, [sp, #4]
 800f590:	6120      	str	r0, [r4, #16]
 800f592:	b15b      	cbz	r3, 800f5ac <__smakebuf_r+0x74>
 800f594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f598:	4630      	mov	r0, r6
 800f59a:	f000 fe89 	bl	80102b0 <_isatty_r>
 800f59e:	b128      	cbz	r0, 800f5ac <__smakebuf_r+0x74>
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	f023 0303 	bic.w	r3, r3, #3
 800f5a6:	f043 0301 	orr.w	r3, r3, #1
 800f5aa:	81a3      	strh	r3, [r4, #12]
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	431d      	orrs	r5, r3
 800f5b0:	81a5      	strh	r5, [r4, #12]
 800f5b2:	e7cd      	b.n	800f550 <__smakebuf_r+0x18>
 800f5b4:	0800b7c1 	.word	0x0800b7c1

0800f5b8 <memmove>:
 800f5b8:	4288      	cmp	r0, r1
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	eb01 0302 	add.w	r3, r1, r2
 800f5c0:	d803      	bhi.n	800f5ca <memmove+0x12>
 800f5c2:	1e42      	subs	r2, r0, #1
 800f5c4:	4299      	cmp	r1, r3
 800f5c6:	d10c      	bne.n	800f5e2 <memmove+0x2a>
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	4298      	cmp	r0, r3
 800f5cc:	d2f9      	bcs.n	800f5c2 <memmove+0xa>
 800f5ce:	1881      	adds	r1, r0, r2
 800f5d0:	1ad2      	subs	r2, r2, r3
 800f5d2:	42d3      	cmn	r3, r2
 800f5d4:	d100      	bne.n	800f5d8 <memmove+0x20>
 800f5d6:	bd10      	pop	{r4, pc}
 800f5d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f5e0:	e7f7      	b.n	800f5d2 <memmove+0x1a>
 800f5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f5ea:	e7eb      	b.n	800f5c4 <memmove+0xc>

0800f5ec <_Balloc>:
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	460e      	mov	r6, r1
 800f5f4:	b93d      	cbnz	r5, 800f606 <_Balloc+0x1a>
 800f5f6:	2010      	movs	r0, #16
 800f5f8:	f7fc fb12 	bl	800bc20 <malloc>
 800f5fc:	6260      	str	r0, [r4, #36]	; 0x24
 800f5fe:	6045      	str	r5, [r0, #4]
 800f600:	6085      	str	r5, [r0, #8]
 800f602:	6005      	str	r5, [r0, #0]
 800f604:	60c5      	str	r5, [r0, #12]
 800f606:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f608:	68eb      	ldr	r3, [r5, #12]
 800f60a:	b183      	cbz	r3, 800f62e <_Balloc+0x42>
 800f60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f614:	b9b8      	cbnz	r0, 800f646 <_Balloc+0x5a>
 800f616:	2101      	movs	r1, #1
 800f618:	fa01 f506 	lsl.w	r5, r1, r6
 800f61c:	1d6a      	adds	r2, r5, #5
 800f61e:	0092      	lsls	r2, r2, #2
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fd9b 	bl	801015c <_calloc_r>
 800f626:	b160      	cbz	r0, 800f642 <_Balloc+0x56>
 800f628:	6046      	str	r6, [r0, #4]
 800f62a:	6085      	str	r5, [r0, #8]
 800f62c:	e00e      	b.n	800f64c <_Balloc+0x60>
 800f62e:	2221      	movs	r2, #33	; 0x21
 800f630:	2104      	movs	r1, #4
 800f632:	4620      	mov	r0, r4
 800f634:	f000 fd92 	bl	801015c <_calloc_r>
 800f638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f63a:	60e8      	str	r0, [r5, #12]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1e4      	bne.n	800f60c <_Balloc+0x20>
 800f642:	2000      	movs	r0, #0
 800f644:	bd70      	pop	{r4, r5, r6, pc}
 800f646:	6802      	ldr	r2, [r0, #0]
 800f648:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f64c:	2300      	movs	r3, #0
 800f64e:	6103      	str	r3, [r0, #16]
 800f650:	60c3      	str	r3, [r0, #12]
 800f652:	bd70      	pop	{r4, r5, r6, pc}

0800f654 <_Bfree>:
 800f654:	b570      	push	{r4, r5, r6, lr}
 800f656:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f658:	4606      	mov	r6, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	b93c      	cbnz	r4, 800f66e <_Bfree+0x1a>
 800f65e:	2010      	movs	r0, #16
 800f660:	f7fc fade 	bl	800bc20 <malloc>
 800f664:	6270      	str	r0, [r6, #36]	; 0x24
 800f666:	6044      	str	r4, [r0, #4]
 800f668:	6084      	str	r4, [r0, #8]
 800f66a:	6004      	str	r4, [r0, #0]
 800f66c:	60c4      	str	r4, [r0, #12]
 800f66e:	b13d      	cbz	r5, 800f680 <_Bfree+0x2c>
 800f670:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f672:	686a      	ldr	r2, [r5, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f67a:	6029      	str	r1, [r5, #0]
 800f67c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f680:	bd70      	pop	{r4, r5, r6, pc}

0800f682 <__multadd>:
 800f682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f686:	690d      	ldr	r5, [r1, #16]
 800f688:	461f      	mov	r7, r3
 800f68a:	4606      	mov	r6, r0
 800f68c:	460c      	mov	r4, r1
 800f68e:	f101 0e14 	add.w	lr, r1, #20
 800f692:	2300      	movs	r3, #0
 800f694:	f8de 0000 	ldr.w	r0, [lr]
 800f698:	b281      	uxth	r1, r0
 800f69a:	fb02 7101 	mla	r1, r2, r1, r7
 800f69e:	0c0f      	lsrs	r7, r1, #16
 800f6a0:	0c00      	lsrs	r0, r0, #16
 800f6a2:	fb02 7000 	mla	r0, r2, r0, r7
 800f6a6:	b289      	uxth	r1, r1
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f6ae:	429d      	cmp	r5, r3
 800f6b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f6b4:	f84e 1b04 	str.w	r1, [lr], #4
 800f6b8:	dcec      	bgt.n	800f694 <__multadd+0x12>
 800f6ba:	b1d7      	cbz	r7, 800f6f2 <__multadd+0x70>
 800f6bc:	68a3      	ldr	r3, [r4, #8]
 800f6be:	429d      	cmp	r5, r3
 800f6c0:	db12      	blt.n	800f6e8 <__multadd+0x66>
 800f6c2:	6861      	ldr	r1, [r4, #4]
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	3101      	adds	r1, #1
 800f6c8:	f7ff ff90 	bl	800f5ec <_Balloc>
 800f6cc:	6922      	ldr	r2, [r4, #16]
 800f6ce:	3202      	adds	r2, #2
 800f6d0:	f104 010c 	add.w	r1, r4, #12
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	0092      	lsls	r2, r2, #2
 800f6d8:	300c      	adds	r0, #12
 800f6da:	f7fc fcbf 	bl	800c05c <memcpy>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7ff ffb7 	bl	800f654 <_Bfree>
 800f6e6:	4644      	mov	r4, r8
 800f6e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6ec:	3501      	adds	r5, #1
 800f6ee:	615f      	str	r7, [r3, #20]
 800f6f0:	6125      	str	r5, [r4, #16]
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6f8 <__hi0bits>:
 800f6f8:	0c02      	lsrs	r2, r0, #16
 800f6fa:	0412      	lsls	r2, r2, #16
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b9b2      	cbnz	r2, 800f72e <__hi0bits+0x36>
 800f700:	0403      	lsls	r3, r0, #16
 800f702:	2010      	movs	r0, #16
 800f704:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f708:	bf04      	itt	eq
 800f70a:	021b      	lsleq	r3, r3, #8
 800f70c:	3008      	addeq	r0, #8
 800f70e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f712:	bf04      	itt	eq
 800f714:	011b      	lsleq	r3, r3, #4
 800f716:	3004      	addeq	r0, #4
 800f718:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f71c:	bf04      	itt	eq
 800f71e:	009b      	lsleq	r3, r3, #2
 800f720:	3002      	addeq	r0, #2
 800f722:	2b00      	cmp	r3, #0
 800f724:	db06      	blt.n	800f734 <__hi0bits+0x3c>
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	d503      	bpl.n	800f732 <__hi0bits+0x3a>
 800f72a:	3001      	adds	r0, #1
 800f72c:	4770      	bx	lr
 800f72e:	2000      	movs	r0, #0
 800f730:	e7e8      	b.n	800f704 <__hi0bits+0xc>
 800f732:	2020      	movs	r0, #32
 800f734:	4770      	bx	lr

0800f736 <__lo0bits>:
 800f736:	6803      	ldr	r3, [r0, #0]
 800f738:	f013 0207 	ands.w	r2, r3, #7
 800f73c:	4601      	mov	r1, r0
 800f73e:	d00b      	beq.n	800f758 <__lo0bits+0x22>
 800f740:	07da      	lsls	r2, r3, #31
 800f742:	d423      	bmi.n	800f78c <__lo0bits+0x56>
 800f744:	0798      	lsls	r0, r3, #30
 800f746:	bf49      	itett	mi
 800f748:	085b      	lsrmi	r3, r3, #1
 800f74a:	089b      	lsrpl	r3, r3, #2
 800f74c:	2001      	movmi	r0, #1
 800f74e:	600b      	strmi	r3, [r1, #0]
 800f750:	bf5c      	itt	pl
 800f752:	600b      	strpl	r3, [r1, #0]
 800f754:	2002      	movpl	r0, #2
 800f756:	4770      	bx	lr
 800f758:	b298      	uxth	r0, r3
 800f75a:	b9a8      	cbnz	r0, 800f788 <__lo0bits+0x52>
 800f75c:	0c1b      	lsrs	r3, r3, #16
 800f75e:	2010      	movs	r0, #16
 800f760:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f764:	bf04      	itt	eq
 800f766:	0a1b      	lsreq	r3, r3, #8
 800f768:	3008      	addeq	r0, #8
 800f76a:	071a      	lsls	r2, r3, #28
 800f76c:	bf04      	itt	eq
 800f76e:	091b      	lsreq	r3, r3, #4
 800f770:	3004      	addeq	r0, #4
 800f772:	079a      	lsls	r2, r3, #30
 800f774:	bf04      	itt	eq
 800f776:	089b      	lsreq	r3, r3, #2
 800f778:	3002      	addeq	r0, #2
 800f77a:	07da      	lsls	r2, r3, #31
 800f77c:	d402      	bmi.n	800f784 <__lo0bits+0x4e>
 800f77e:	085b      	lsrs	r3, r3, #1
 800f780:	d006      	beq.n	800f790 <__lo0bits+0x5a>
 800f782:	3001      	adds	r0, #1
 800f784:	600b      	str	r3, [r1, #0]
 800f786:	4770      	bx	lr
 800f788:	4610      	mov	r0, r2
 800f78a:	e7e9      	b.n	800f760 <__lo0bits+0x2a>
 800f78c:	2000      	movs	r0, #0
 800f78e:	4770      	bx	lr
 800f790:	2020      	movs	r0, #32
 800f792:	4770      	bx	lr

0800f794 <__i2b>:
 800f794:	b510      	push	{r4, lr}
 800f796:	460c      	mov	r4, r1
 800f798:	2101      	movs	r1, #1
 800f79a:	f7ff ff27 	bl	800f5ec <_Balloc>
 800f79e:	2201      	movs	r2, #1
 800f7a0:	6144      	str	r4, [r0, #20]
 800f7a2:	6102      	str	r2, [r0, #16]
 800f7a4:	bd10      	pop	{r4, pc}

0800f7a6 <__multiply>:
 800f7a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7aa:	4614      	mov	r4, r2
 800f7ac:	690a      	ldr	r2, [r1, #16]
 800f7ae:	6923      	ldr	r3, [r4, #16]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	bfb8      	it	lt
 800f7b4:	460b      	movlt	r3, r1
 800f7b6:	4689      	mov	r9, r1
 800f7b8:	bfbc      	itt	lt
 800f7ba:	46a1      	movlt	r9, r4
 800f7bc:	461c      	movlt	r4, r3
 800f7be:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f7c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f7c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f7ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f7ce:	eb07 060a 	add.w	r6, r7, sl
 800f7d2:	429e      	cmp	r6, r3
 800f7d4:	bfc8      	it	gt
 800f7d6:	3101      	addgt	r1, #1
 800f7d8:	f7ff ff08 	bl	800f5ec <_Balloc>
 800f7dc:	f100 0514 	add.w	r5, r0, #20
 800f7e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7e4:	462b      	mov	r3, r5
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	4543      	cmp	r3, r8
 800f7ea:	d316      	bcc.n	800f81a <__multiply+0x74>
 800f7ec:	f104 0214 	add.w	r2, r4, #20
 800f7f0:	f109 0114 	add.w	r1, r9, #20
 800f7f4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800f7f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	9c01      	ldr	r4, [sp, #4]
 800f800:	4294      	cmp	r4, r2
 800f802:	4613      	mov	r3, r2
 800f804:	d80c      	bhi.n	800f820 <__multiply+0x7a>
 800f806:	2e00      	cmp	r6, #0
 800f808:	dd03      	ble.n	800f812 <__multiply+0x6c>
 800f80a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d054      	beq.n	800f8bc <__multiply+0x116>
 800f812:	6106      	str	r6, [r0, #16]
 800f814:	b003      	add	sp, #12
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81a:	f843 2b04 	str.w	r2, [r3], #4
 800f81e:	e7e3      	b.n	800f7e8 <__multiply+0x42>
 800f820:	f8b3 a000 	ldrh.w	sl, [r3]
 800f824:	3204      	adds	r2, #4
 800f826:	f1ba 0f00 	cmp.w	sl, #0
 800f82a:	d020      	beq.n	800f86e <__multiply+0xc8>
 800f82c:	46ae      	mov	lr, r5
 800f82e:	4689      	mov	r9, r1
 800f830:	f04f 0c00 	mov.w	ip, #0
 800f834:	f859 4b04 	ldr.w	r4, [r9], #4
 800f838:	f8be b000 	ldrh.w	fp, [lr]
 800f83c:	b2a3      	uxth	r3, r4
 800f83e:	fb0a b303 	mla	r3, sl, r3, fp
 800f842:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800f846:	f8de 4000 	ldr.w	r4, [lr]
 800f84a:	4463      	add	r3, ip
 800f84c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800f850:	fb0a c40b 	mla	r4, sl, fp, ip
 800f854:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f858:	b29b      	uxth	r3, r3
 800f85a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f85e:	454f      	cmp	r7, r9
 800f860:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800f864:	f84e 3b04 	str.w	r3, [lr], #4
 800f868:	d8e4      	bhi.n	800f834 <__multiply+0x8e>
 800f86a:	f8ce c000 	str.w	ip, [lr]
 800f86e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800f872:	f1b9 0f00 	cmp.w	r9, #0
 800f876:	d01f      	beq.n	800f8b8 <__multiply+0x112>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	46ae      	mov	lr, r5
 800f87c:	468c      	mov	ip, r1
 800f87e:	f04f 0a00 	mov.w	sl, #0
 800f882:	f8bc 4000 	ldrh.w	r4, [ip]
 800f886:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f88a:	fb09 b404 	mla	r4, r9, r4, fp
 800f88e:	44a2      	add	sl, r4
 800f890:	b29b      	uxth	r3, r3
 800f892:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800f896:	f84e 3b04 	str.w	r3, [lr], #4
 800f89a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f89e:	f8be 4000 	ldrh.w	r4, [lr]
 800f8a2:	0c1b      	lsrs	r3, r3, #16
 800f8a4:	fb09 4303 	mla	r3, r9, r3, r4
 800f8a8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800f8ac:	4567      	cmp	r7, ip
 800f8ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8b2:	d8e6      	bhi.n	800f882 <__multiply+0xdc>
 800f8b4:	f8ce 3000 	str.w	r3, [lr]
 800f8b8:	3504      	adds	r5, #4
 800f8ba:	e7a0      	b.n	800f7fe <__multiply+0x58>
 800f8bc:	3e01      	subs	r6, #1
 800f8be:	e7a2      	b.n	800f806 <__multiply+0x60>

0800f8c0 <__pow5mult>:
 800f8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c4:	4615      	mov	r5, r2
 800f8c6:	f012 0203 	ands.w	r2, r2, #3
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	460f      	mov	r7, r1
 800f8ce:	d007      	beq.n	800f8e0 <__pow5mult+0x20>
 800f8d0:	3a01      	subs	r2, #1
 800f8d2:	4c21      	ldr	r4, [pc, #132]	; (800f958 <__pow5mult+0x98>)
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8da:	f7ff fed2 	bl	800f682 <__multadd>
 800f8de:	4607      	mov	r7, r0
 800f8e0:	10ad      	asrs	r5, r5, #2
 800f8e2:	d035      	beq.n	800f950 <__pow5mult+0x90>
 800f8e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8e6:	b93c      	cbnz	r4, 800f8f8 <__pow5mult+0x38>
 800f8e8:	2010      	movs	r0, #16
 800f8ea:	f7fc f999 	bl	800bc20 <malloc>
 800f8ee:	6270      	str	r0, [r6, #36]	; 0x24
 800f8f0:	6044      	str	r4, [r0, #4]
 800f8f2:	6084      	str	r4, [r0, #8]
 800f8f4:	6004      	str	r4, [r0, #0]
 800f8f6:	60c4      	str	r4, [r0, #12]
 800f8f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f900:	b94c      	cbnz	r4, 800f916 <__pow5mult+0x56>
 800f902:	f240 2171 	movw	r1, #625	; 0x271
 800f906:	4630      	mov	r0, r6
 800f908:	f7ff ff44 	bl	800f794 <__i2b>
 800f90c:	2300      	movs	r3, #0
 800f90e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f912:	4604      	mov	r4, r0
 800f914:	6003      	str	r3, [r0, #0]
 800f916:	f04f 0800 	mov.w	r8, #0
 800f91a:	07eb      	lsls	r3, r5, #31
 800f91c:	d50a      	bpl.n	800f934 <__pow5mult+0x74>
 800f91e:	4639      	mov	r1, r7
 800f920:	4622      	mov	r2, r4
 800f922:	4630      	mov	r0, r6
 800f924:	f7ff ff3f 	bl	800f7a6 <__multiply>
 800f928:	4639      	mov	r1, r7
 800f92a:	4681      	mov	r9, r0
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff fe91 	bl	800f654 <_Bfree>
 800f932:	464f      	mov	r7, r9
 800f934:	106d      	asrs	r5, r5, #1
 800f936:	d00b      	beq.n	800f950 <__pow5mult+0x90>
 800f938:	6820      	ldr	r0, [r4, #0]
 800f93a:	b938      	cbnz	r0, 800f94c <__pow5mult+0x8c>
 800f93c:	4622      	mov	r2, r4
 800f93e:	4621      	mov	r1, r4
 800f940:	4630      	mov	r0, r6
 800f942:	f7ff ff30 	bl	800f7a6 <__multiply>
 800f946:	6020      	str	r0, [r4, #0]
 800f948:	f8c0 8000 	str.w	r8, [r0]
 800f94c:	4604      	mov	r4, r0
 800f94e:	e7e4      	b.n	800f91a <__pow5mult+0x5a>
 800f950:	4638      	mov	r0, r7
 800f952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f956:	bf00      	nop
 800f958:	08010a38 	.word	0x08010a38

0800f95c <__lshift>:
 800f95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f960:	460c      	mov	r4, r1
 800f962:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f966:	6923      	ldr	r3, [r4, #16]
 800f968:	6849      	ldr	r1, [r1, #4]
 800f96a:	eb0a 0903 	add.w	r9, sl, r3
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	4607      	mov	r7, r0
 800f972:	4616      	mov	r6, r2
 800f974:	f109 0501 	add.w	r5, r9, #1
 800f978:	42ab      	cmp	r3, r5
 800f97a:	db31      	blt.n	800f9e0 <__lshift+0x84>
 800f97c:	4638      	mov	r0, r7
 800f97e:	f7ff fe35 	bl	800f5ec <_Balloc>
 800f982:	2200      	movs	r2, #0
 800f984:	4680      	mov	r8, r0
 800f986:	f100 0314 	add.w	r3, r0, #20
 800f98a:	4611      	mov	r1, r2
 800f98c:	4552      	cmp	r2, sl
 800f98e:	db2a      	blt.n	800f9e6 <__lshift+0x8a>
 800f990:	6920      	ldr	r0, [r4, #16]
 800f992:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f996:	f104 0114 	add.w	r1, r4, #20
 800f99a:	f016 021f 	ands.w	r2, r6, #31
 800f99e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f9a2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800f9a6:	d022      	beq.n	800f9ee <__lshift+0x92>
 800f9a8:	f1c2 0c20 	rsb	ip, r2, #32
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	680e      	ldr	r6, [r1, #0]
 800f9b0:	4096      	lsls	r6, r2
 800f9b2:	4330      	orrs	r0, r6
 800f9b4:	f843 0b04 	str.w	r0, [r3], #4
 800f9b8:	f851 0b04 	ldr.w	r0, [r1], #4
 800f9bc:	458e      	cmp	lr, r1
 800f9be:	fa20 f00c 	lsr.w	r0, r0, ip
 800f9c2:	d8f4      	bhi.n	800f9ae <__lshift+0x52>
 800f9c4:	6018      	str	r0, [r3, #0]
 800f9c6:	b108      	cbz	r0, 800f9cc <__lshift+0x70>
 800f9c8:	f109 0502 	add.w	r5, r9, #2
 800f9cc:	3d01      	subs	r5, #1
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f8c8 5010 	str.w	r5, [r8, #16]
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	f7ff fe3d 	bl	800f654 <_Bfree>
 800f9da:	4640      	mov	r0, r8
 800f9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e0:	3101      	adds	r1, #1
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	e7c8      	b.n	800f978 <__lshift+0x1c>
 800f9e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f9ea:	3201      	adds	r2, #1
 800f9ec:	e7ce      	b.n	800f98c <__lshift+0x30>
 800f9ee:	3b04      	subs	r3, #4
 800f9f0:	f851 2b04 	ldr.w	r2, [r1], #4
 800f9f4:	f843 2f04 	str.w	r2, [r3, #4]!
 800f9f8:	458e      	cmp	lr, r1
 800f9fa:	d8f9      	bhi.n	800f9f0 <__lshift+0x94>
 800f9fc:	e7e6      	b.n	800f9cc <__lshift+0x70>

0800f9fe <__mcmp>:
 800f9fe:	6903      	ldr	r3, [r0, #16]
 800fa00:	690a      	ldr	r2, [r1, #16]
 800fa02:	1a9b      	subs	r3, r3, r2
 800fa04:	b530      	push	{r4, r5, lr}
 800fa06:	d10c      	bne.n	800fa22 <__mcmp+0x24>
 800fa08:	0092      	lsls	r2, r2, #2
 800fa0a:	3014      	adds	r0, #20
 800fa0c:	3114      	adds	r1, #20
 800fa0e:	1884      	adds	r4, r0, r2
 800fa10:	4411      	add	r1, r2
 800fa12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fa16:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fa1a:	4295      	cmp	r5, r2
 800fa1c:	d003      	beq.n	800fa26 <__mcmp+0x28>
 800fa1e:	d305      	bcc.n	800fa2c <__mcmp+0x2e>
 800fa20:	2301      	movs	r3, #1
 800fa22:	4618      	mov	r0, r3
 800fa24:	bd30      	pop	{r4, r5, pc}
 800fa26:	42a0      	cmp	r0, r4
 800fa28:	d3f3      	bcc.n	800fa12 <__mcmp+0x14>
 800fa2a:	e7fa      	b.n	800fa22 <__mcmp+0x24>
 800fa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa30:	e7f7      	b.n	800fa22 <__mcmp+0x24>

0800fa32 <__mdiff>:
 800fa32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa36:	460d      	mov	r5, r1
 800fa38:	4607      	mov	r7, r0
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	4614      	mov	r4, r2
 800fa40:	f7ff ffdd 	bl	800f9fe <__mcmp>
 800fa44:	1e06      	subs	r6, r0, #0
 800fa46:	d108      	bne.n	800fa5a <__mdiff+0x28>
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	f7ff fdce 	bl	800f5ec <_Balloc>
 800fa50:	2301      	movs	r3, #1
 800fa52:	6103      	str	r3, [r0, #16]
 800fa54:	6146      	str	r6, [r0, #20]
 800fa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5a:	bfa4      	itt	ge
 800fa5c:	4623      	movge	r3, r4
 800fa5e:	462c      	movge	r4, r5
 800fa60:	4638      	mov	r0, r7
 800fa62:	6861      	ldr	r1, [r4, #4]
 800fa64:	bfa6      	itte	ge
 800fa66:	461d      	movge	r5, r3
 800fa68:	2600      	movge	r6, #0
 800fa6a:	2601      	movlt	r6, #1
 800fa6c:	f7ff fdbe 	bl	800f5ec <_Balloc>
 800fa70:	692b      	ldr	r3, [r5, #16]
 800fa72:	60c6      	str	r6, [r0, #12]
 800fa74:	6926      	ldr	r6, [r4, #16]
 800fa76:	f105 0914 	add.w	r9, r5, #20
 800fa7a:	f104 0214 	add.w	r2, r4, #20
 800fa7e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fa82:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fa86:	f100 0514 	add.w	r5, r0, #20
 800fa8a:	f04f 0c00 	mov.w	ip, #0
 800fa8e:	f852 ab04 	ldr.w	sl, [r2], #4
 800fa92:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa96:	fa1c f18a 	uxtah	r1, ip, sl
 800fa9a:	b2a3      	uxth	r3, r4
 800fa9c:	1ac9      	subs	r1, r1, r3
 800fa9e:	0c23      	lsrs	r3, r4, #16
 800faa0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800faa4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800faa8:	b289      	uxth	r1, r1
 800faaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800faae:	45c8      	cmp	r8, r9
 800fab0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fab4:	4696      	mov	lr, r2
 800fab6:	f845 3b04 	str.w	r3, [r5], #4
 800faba:	d8e8      	bhi.n	800fa8e <__mdiff+0x5c>
 800fabc:	45be      	cmp	lr, r7
 800fabe:	d305      	bcc.n	800facc <__mdiff+0x9a>
 800fac0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fac4:	b18b      	cbz	r3, 800faea <__mdiff+0xb8>
 800fac6:	6106      	str	r6, [r0, #16]
 800fac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800facc:	f85e 1b04 	ldr.w	r1, [lr], #4
 800fad0:	fa1c f381 	uxtah	r3, ip, r1
 800fad4:	141a      	asrs	r2, r3, #16
 800fad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fada:	b29b      	uxth	r3, r3
 800fadc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fae0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fae4:	f845 3b04 	str.w	r3, [r5], #4
 800fae8:	e7e8      	b.n	800fabc <__mdiff+0x8a>
 800faea:	3e01      	subs	r6, #1
 800faec:	e7e8      	b.n	800fac0 <__mdiff+0x8e>

0800faee <__d2b>:
 800faee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800faf2:	460e      	mov	r6, r1
 800faf4:	2101      	movs	r1, #1
 800faf6:	ec59 8b10 	vmov	r8, r9, d0
 800fafa:	4615      	mov	r5, r2
 800fafc:	f7ff fd76 	bl	800f5ec <_Balloc>
 800fb00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fb04:	4607      	mov	r7, r0
 800fb06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb0a:	bb34      	cbnz	r4, 800fb5a <__d2b+0x6c>
 800fb0c:	9301      	str	r3, [sp, #4]
 800fb0e:	f1b8 0f00 	cmp.w	r8, #0
 800fb12:	d027      	beq.n	800fb64 <__d2b+0x76>
 800fb14:	a802      	add	r0, sp, #8
 800fb16:	f840 8d08 	str.w	r8, [r0, #-8]!
 800fb1a:	f7ff fe0c 	bl	800f736 <__lo0bits>
 800fb1e:	9900      	ldr	r1, [sp, #0]
 800fb20:	b1f0      	cbz	r0, 800fb60 <__d2b+0x72>
 800fb22:	9a01      	ldr	r2, [sp, #4]
 800fb24:	f1c0 0320 	rsb	r3, r0, #32
 800fb28:	fa02 f303 	lsl.w	r3, r2, r3
 800fb2c:	430b      	orrs	r3, r1
 800fb2e:	40c2      	lsrs	r2, r0
 800fb30:	617b      	str	r3, [r7, #20]
 800fb32:	9201      	str	r2, [sp, #4]
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	61bb      	str	r3, [r7, #24]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	bf14      	ite	ne
 800fb3c:	2102      	movne	r1, #2
 800fb3e:	2101      	moveq	r1, #1
 800fb40:	6139      	str	r1, [r7, #16]
 800fb42:	b1c4      	cbz	r4, 800fb76 <__d2b+0x88>
 800fb44:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fb48:	4404      	add	r4, r0
 800fb4a:	6034      	str	r4, [r6, #0]
 800fb4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb50:	6028      	str	r0, [r5, #0]
 800fb52:	4638      	mov	r0, r7
 800fb54:	b003      	add	sp, #12
 800fb56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb5e:	e7d5      	b.n	800fb0c <__d2b+0x1e>
 800fb60:	6179      	str	r1, [r7, #20]
 800fb62:	e7e7      	b.n	800fb34 <__d2b+0x46>
 800fb64:	a801      	add	r0, sp, #4
 800fb66:	f7ff fde6 	bl	800f736 <__lo0bits>
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	617b      	str	r3, [r7, #20]
 800fb6e:	2101      	movs	r1, #1
 800fb70:	6139      	str	r1, [r7, #16]
 800fb72:	3020      	adds	r0, #32
 800fb74:	e7e5      	b.n	800fb42 <__d2b+0x54>
 800fb76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fb7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb7e:	6030      	str	r0, [r6, #0]
 800fb80:	6918      	ldr	r0, [r3, #16]
 800fb82:	f7ff fdb9 	bl	800f6f8 <__hi0bits>
 800fb86:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fb8a:	e7e1      	b.n	800fb50 <__d2b+0x62>

0800fb8c <_putc_r>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	460d      	mov	r5, r1
 800fb90:	4614      	mov	r4, r2
 800fb92:	4606      	mov	r6, r0
 800fb94:	b118      	cbz	r0, 800fb9e <_putc_r+0x12>
 800fb96:	6983      	ldr	r3, [r0, #24]
 800fb98:	b90b      	cbnz	r3, 800fb9e <_putc_r+0x12>
 800fb9a:	f7fb fe69 	bl	800b870 <__sinit>
 800fb9e:	4b1c      	ldr	r3, [pc, #112]	; (800fc10 <_putc_r+0x84>)
 800fba0:	429c      	cmp	r4, r3
 800fba2:	d124      	bne.n	800fbee <_putc_r+0x62>
 800fba4:	6874      	ldr	r4, [r6, #4]
 800fba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fba8:	07d8      	lsls	r0, r3, #31
 800fbaa:	d405      	bmi.n	800fbb8 <_putc_r+0x2c>
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	0599      	lsls	r1, r3, #22
 800fbb0:	d402      	bmi.n	800fbb8 <_putc_r+0x2c>
 800fbb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbb4:	f7fc f832 	bl	800bc1c <__retarget_lock_acquire_recursive>
 800fbb8:	68a3      	ldr	r3, [r4, #8]
 800fbba:	3b01      	subs	r3, #1
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	60a3      	str	r3, [r4, #8]
 800fbc0:	da05      	bge.n	800fbce <_putc_r+0x42>
 800fbc2:	69a2      	ldr	r2, [r4, #24]
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	db1c      	blt.n	800fc02 <_putc_r+0x76>
 800fbc8:	b2eb      	uxtb	r3, r5
 800fbca:	2b0a      	cmp	r3, #10
 800fbcc:	d019      	beq.n	800fc02 <_putc_r+0x76>
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	1c5a      	adds	r2, r3, #1
 800fbd2:	6022      	str	r2, [r4, #0]
 800fbd4:	701d      	strb	r5, [r3, #0]
 800fbd6:	b2ed      	uxtb	r5, r5
 800fbd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbda:	07da      	lsls	r2, r3, #31
 800fbdc:	d405      	bmi.n	800fbea <_putc_r+0x5e>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	059b      	lsls	r3, r3, #22
 800fbe2:	d402      	bmi.n	800fbea <_putc_r+0x5e>
 800fbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbe6:	f7fc f81a 	bl	800bc1e <__retarget_lock_release_recursive>
 800fbea:	4628      	mov	r0, r5
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
 800fbee:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <_putc_r+0x88>)
 800fbf0:	429c      	cmp	r4, r3
 800fbf2:	d101      	bne.n	800fbf8 <_putc_r+0x6c>
 800fbf4:	68b4      	ldr	r4, [r6, #8]
 800fbf6:	e7d6      	b.n	800fba6 <_putc_r+0x1a>
 800fbf8:	4b07      	ldr	r3, [pc, #28]	; (800fc18 <_putc_r+0x8c>)
 800fbfa:	429c      	cmp	r4, r3
 800fbfc:	bf08      	it	eq
 800fbfe:	68f4      	ldreq	r4, [r6, #12]
 800fc00:	e7d1      	b.n	800fba6 <_putc_r+0x1a>
 800fc02:	4629      	mov	r1, r5
 800fc04:	4622      	mov	r2, r4
 800fc06:	4630      	mov	r0, r6
 800fc08:	f000 fa4a 	bl	80100a0 <__swbuf_r>
 800fc0c:	4605      	mov	r5, r0
 800fc0e:	e7e3      	b.n	800fbd8 <_putc_r+0x4c>
 800fc10:	0801087c 	.word	0x0801087c
 800fc14:	0801089c 	.word	0x0801089c
 800fc18:	0801085c 	.word	0x0801085c

0800fc1c <_read_r>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	4c07      	ldr	r4, [pc, #28]	; (800fc3c <_read_r+0x20>)
 800fc20:	4605      	mov	r5, r0
 800fc22:	4608      	mov	r0, r1
 800fc24:	4611      	mov	r1, r2
 800fc26:	2200      	movs	r2, #0
 800fc28:	6022      	str	r2, [r4, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	f7fb fa56 	bl	800b0dc <_read>
 800fc30:	1c43      	adds	r3, r0, #1
 800fc32:	d102      	bne.n	800fc3a <_read_r+0x1e>
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	b103      	cbz	r3, 800fc3a <_read_r+0x1e>
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	bd38      	pop	{r3, r4, r5, pc}
 800fc3c:	20001dbc 	.word	0x20001dbc

0800fc40 <_realloc_r>:
 800fc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	4682      	mov	sl, r0
 800fc46:	460c      	mov	r4, r1
 800fc48:	b929      	cbnz	r1, 800fc56 <_realloc_r+0x16>
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	b003      	add	sp, #12
 800fc4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc52:	f7fb bff5 	b.w	800bc40 <_malloc_r>
 800fc56:	9201      	str	r2, [sp, #4]
 800fc58:	f7fc fa14 	bl	800c084 <__malloc_lock>
 800fc5c:	9a01      	ldr	r2, [sp, #4]
 800fc5e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800fc62:	f102 080b 	add.w	r8, r2, #11
 800fc66:	f1b8 0f16 	cmp.w	r8, #22
 800fc6a:	f1a4 0908 	sub.w	r9, r4, #8
 800fc6e:	f025 0603 	bic.w	r6, r5, #3
 800fc72:	d90a      	bls.n	800fc8a <_realloc_r+0x4a>
 800fc74:	f038 0807 	bics.w	r8, r8, #7
 800fc78:	d509      	bpl.n	800fc8e <_realloc_r+0x4e>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	f8ca 3000 	str.w	r3, [sl]
 800fc80:	2700      	movs	r7, #0
 800fc82:	4638      	mov	r0, r7
 800fc84:	b003      	add	sp, #12
 800fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8a:	f04f 0810 	mov.w	r8, #16
 800fc8e:	4590      	cmp	r8, r2
 800fc90:	d3f3      	bcc.n	800fc7a <_realloc_r+0x3a>
 800fc92:	45b0      	cmp	r8, r6
 800fc94:	f340 8145 	ble.w	800ff22 <_realloc_r+0x2e2>
 800fc98:	4ba8      	ldr	r3, [pc, #672]	; (800ff3c <_realloc_r+0x2fc>)
 800fc9a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800fc9e:	eb09 0106 	add.w	r1, r9, r6
 800fca2:	4571      	cmp	r1, lr
 800fca4:	469b      	mov	fp, r3
 800fca6:	684b      	ldr	r3, [r1, #4]
 800fca8:	d005      	beq.n	800fcb6 <_realloc_r+0x76>
 800fcaa:	f023 0001 	bic.w	r0, r3, #1
 800fcae:	4408      	add	r0, r1
 800fcb0:	6840      	ldr	r0, [r0, #4]
 800fcb2:	07c7      	lsls	r7, r0, #31
 800fcb4:	d447      	bmi.n	800fd46 <_realloc_r+0x106>
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
 800fcba:	4571      	cmp	r1, lr
 800fcbc:	eb06 0703 	add.w	r7, r6, r3
 800fcc0:	d119      	bne.n	800fcf6 <_realloc_r+0xb6>
 800fcc2:	f108 0010 	add.w	r0, r8, #16
 800fcc6:	4287      	cmp	r7, r0
 800fcc8:	db3f      	blt.n	800fd4a <_realloc_r+0x10a>
 800fcca:	eb09 0308 	add.w	r3, r9, r8
 800fcce:	eba7 0708 	sub.w	r7, r7, r8
 800fcd2:	f047 0701 	orr.w	r7, r7, #1
 800fcd6:	f8cb 3008 	str.w	r3, [fp, #8]
 800fcda:	605f      	str	r7, [r3, #4]
 800fcdc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fce0:	f003 0301 	and.w	r3, r3, #1
 800fce4:	ea43 0308 	orr.w	r3, r3, r8
 800fce8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fcec:	4650      	mov	r0, sl
 800fcee:	f7fc f9cf 	bl	800c090 <__malloc_unlock>
 800fcf2:	4627      	mov	r7, r4
 800fcf4:	e7c5      	b.n	800fc82 <_realloc_r+0x42>
 800fcf6:	45b8      	cmp	r8, r7
 800fcf8:	dc27      	bgt.n	800fd4a <_realloc_r+0x10a>
 800fcfa:	68cb      	ldr	r3, [r1, #12]
 800fcfc:	688a      	ldr	r2, [r1, #8]
 800fcfe:	60d3      	str	r3, [r2, #12]
 800fd00:	609a      	str	r2, [r3, #8]
 800fd02:	eba7 0008 	sub.w	r0, r7, r8
 800fd06:	280f      	cmp	r0, #15
 800fd08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fd0c:	eb09 0207 	add.w	r2, r9, r7
 800fd10:	f240 8109 	bls.w	800ff26 <_realloc_r+0x2e6>
 800fd14:	eb09 0108 	add.w	r1, r9, r8
 800fd18:	f003 0301 	and.w	r3, r3, #1
 800fd1c:	ea43 0308 	orr.w	r3, r3, r8
 800fd20:	f040 0001 	orr.w	r0, r0, #1
 800fd24:	f8c9 3004 	str.w	r3, [r9, #4]
 800fd28:	6048      	str	r0, [r1, #4]
 800fd2a:	6853      	ldr	r3, [r2, #4]
 800fd2c:	f043 0301 	orr.w	r3, r3, #1
 800fd30:	6053      	str	r3, [r2, #4]
 800fd32:	3108      	adds	r1, #8
 800fd34:	4650      	mov	r0, sl
 800fd36:	f7fb fe71 	bl	800ba1c <_free_r>
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	f7fc f9a8 	bl	800c090 <__malloc_unlock>
 800fd40:	f109 0708 	add.w	r7, r9, #8
 800fd44:	e79d      	b.n	800fc82 <_realloc_r+0x42>
 800fd46:	2300      	movs	r3, #0
 800fd48:	4619      	mov	r1, r3
 800fd4a:	07e8      	lsls	r0, r5, #31
 800fd4c:	f100 8084 	bmi.w	800fe58 <_realloc_r+0x218>
 800fd50:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800fd54:	eba9 0505 	sub.w	r5, r9, r5
 800fd58:	6868      	ldr	r0, [r5, #4]
 800fd5a:	f020 0003 	bic.w	r0, r0, #3
 800fd5e:	4430      	add	r0, r6
 800fd60:	2900      	cmp	r1, #0
 800fd62:	d076      	beq.n	800fe52 <_realloc_r+0x212>
 800fd64:	4571      	cmp	r1, lr
 800fd66:	d150      	bne.n	800fe0a <_realloc_r+0x1ca>
 800fd68:	4403      	add	r3, r0
 800fd6a:	f108 0110 	add.w	r1, r8, #16
 800fd6e:	428b      	cmp	r3, r1
 800fd70:	db6f      	blt.n	800fe52 <_realloc_r+0x212>
 800fd72:	462f      	mov	r7, r5
 800fd74:	68ea      	ldr	r2, [r5, #12]
 800fd76:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800fd7a:	60ca      	str	r2, [r1, #12]
 800fd7c:	6091      	str	r1, [r2, #8]
 800fd7e:	1f32      	subs	r2, r6, #4
 800fd80:	2a24      	cmp	r2, #36	; 0x24
 800fd82:	d83b      	bhi.n	800fdfc <_realloc_r+0x1bc>
 800fd84:	2a13      	cmp	r2, #19
 800fd86:	d936      	bls.n	800fdf6 <_realloc_r+0x1b6>
 800fd88:	6821      	ldr	r1, [r4, #0]
 800fd8a:	60a9      	str	r1, [r5, #8]
 800fd8c:	6861      	ldr	r1, [r4, #4]
 800fd8e:	60e9      	str	r1, [r5, #12]
 800fd90:	2a1b      	cmp	r2, #27
 800fd92:	d81c      	bhi.n	800fdce <_realloc_r+0x18e>
 800fd94:	f105 0210 	add.w	r2, r5, #16
 800fd98:	f104 0108 	add.w	r1, r4, #8
 800fd9c:	6808      	ldr	r0, [r1, #0]
 800fd9e:	6010      	str	r0, [r2, #0]
 800fda0:	6848      	ldr	r0, [r1, #4]
 800fda2:	6050      	str	r0, [r2, #4]
 800fda4:	6889      	ldr	r1, [r1, #8]
 800fda6:	6091      	str	r1, [r2, #8]
 800fda8:	eb05 0208 	add.w	r2, r5, r8
 800fdac:	eba3 0308 	sub.w	r3, r3, r8
 800fdb0:	f043 0301 	orr.w	r3, r3, #1
 800fdb4:	f8cb 2008 	str.w	r2, [fp, #8]
 800fdb8:	6053      	str	r3, [r2, #4]
 800fdba:	686b      	ldr	r3, [r5, #4]
 800fdbc:	f003 0301 	and.w	r3, r3, #1
 800fdc0:	ea43 0308 	orr.w	r3, r3, r8
 800fdc4:	606b      	str	r3, [r5, #4]
 800fdc6:	4650      	mov	r0, sl
 800fdc8:	f7fc f962 	bl	800c090 <__malloc_unlock>
 800fdcc:	e759      	b.n	800fc82 <_realloc_r+0x42>
 800fdce:	68a1      	ldr	r1, [r4, #8]
 800fdd0:	6129      	str	r1, [r5, #16]
 800fdd2:	68e1      	ldr	r1, [r4, #12]
 800fdd4:	6169      	str	r1, [r5, #20]
 800fdd6:	2a24      	cmp	r2, #36	; 0x24
 800fdd8:	bf01      	itttt	eq
 800fdda:	6922      	ldreq	r2, [r4, #16]
 800fddc:	61aa      	streq	r2, [r5, #24]
 800fdde:	6960      	ldreq	r0, [r4, #20]
 800fde0:	61e8      	streq	r0, [r5, #28]
 800fde2:	bf19      	ittee	ne
 800fde4:	f105 0218 	addne.w	r2, r5, #24
 800fde8:	f104 0110 	addne.w	r1, r4, #16
 800fdec:	f105 0220 	addeq.w	r2, r5, #32
 800fdf0:	f104 0118 	addeq.w	r1, r4, #24
 800fdf4:	e7d2      	b.n	800fd9c <_realloc_r+0x15c>
 800fdf6:	463a      	mov	r2, r7
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	e7cf      	b.n	800fd9c <_realloc_r+0x15c>
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4638      	mov	r0, r7
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	f7ff fbd9 	bl	800f5b8 <memmove>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	e7ce      	b.n	800fda8 <_realloc_r+0x168>
 800fe0a:	18c7      	adds	r7, r0, r3
 800fe0c:	45b8      	cmp	r8, r7
 800fe0e:	dc20      	bgt.n	800fe52 <_realloc_r+0x212>
 800fe10:	68cb      	ldr	r3, [r1, #12]
 800fe12:	688a      	ldr	r2, [r1, #8]
 800fe14:	60d3      	str	r3, [r2, #12]
 800fe16:	609a      	str	r2, [r3, #8]
 800fe18:	4628      	mov	r0, r5
 800fe1a:	68eb      	ldr	r3, [r5, #12]
 800fe1c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800fe20:	60d3      	str	r3, [r2, #12]
 800fe22:	609a      	str	r2, [r3, #8]
 800fe24:	1f32      	subs	r2, r6, #4
 800fe26:	2a24      	cmp	r2, #36	; 0x24
 800fe28:	d842      	bhi.n	800feb0 <_realloc_r+0x270>
 800fe2a:	2a13      	cmp	r2, #19
 800fe2c:	d93e      	bls.n	800feac <_realloc_r+0x26c>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	60ab      	str	r3, [r5, #8]
 800fe32:	6863      	ldr	r3, [r4, #4]
 800fe34:	60eb      	str	r3, [r5, #12]
 800fe36:	2a1b      	cmp	r2, #27
 800fe38:	d824      	bhi.n	800fe84 <_realloc_r+0x244>
 800fe3a:	f105 0010 	add.w	r0, r5, #16
 800fe3e:	f104 0308 	add.w	r3, r4, #8
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	6002      	str	r2, [r0, #0]
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	6042      	str	r2, [r0, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	6083      	str	r3, [r0, #8]
 800fe4e:	46a9      	mov	r9, r5
 800fe50:	e757      	b.n	800fd02 <_realloc_r+0xc2>
 800fe52:	4580      	cmp	r8, r0
 800fe54:	4607      	mov	r7, r0
 800fe56:	dddf      	ble.n	800fe18 <_realloc_r+0x1d8>
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4650      	mov	r0, sl
 800fe5c:	f7fb fef0 	bl	800bc40 <_malloc_r>
 800fe60:	4607      	mov	r7, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d0af      	beq.n	800fdc6 <_realloc_r+0x186>
 800fe66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe6a:	f023 0301 	bic.w	r3, r3, #1
 800fe6e:	f1a0 0208 	sub.w	r2, r0, #8
 800fe72:	444b      	add	r3, r9
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d11f      	bne.n	800feb8 <_realloc_r+0x278>
 800fe78:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800fe7c:	f027 0703 	bic.w	r7, r7, #3
 800fe80:	4437      	add	r7, r6
 800fe82:	e73e      	b.n	800fd02 <_realloc_r+0xc2>
 800fe84:	68a3      	ldr	r3, [r4, #8]
 800fe86:	612b      	str	r3, [r5, #16]
 800fe88:	68e3      	ldr	r3, [r4, #12]
 800fe8a:	616b      	str	r3, [r5, #20]
 800fe8c:	2a24      	cmp	r2, #36	; 0x24
 800fe8e:	bf01      	itttt	eq
 800fe90:	6923      	ldreq	r3, [r4, #16]
 800fe92:	61ab      	streq	r3, [r5, #24]
 800fe94:	6962      	ldreq	r2, [r4, #20]
 800fe96:	61ea      	streq	r2, [r5, #28]
 800fe98:	bf19      	ittee	ne
 800fe9a:	f105 0018 	addne.w	r0, r5, #24
 800fe9e:	f104 0310 	addne.w	r3, r4, #16
 800fea2:	f105 0020 	addeq.w	r0, r5, #32
 800fea6:	f104 0318 	addeq.w	r3, r4, #24
 800feaa:	e7ca      	b.n	800fe42 <_realloc_r+0x202>
 800feac:	4623      	mov	r3, r4
 800feae:	e7c8      	b.n	800fe42 <_realloc_r+0x202>
 800feb0:	4621      	mov	r1, r4
 800feb2:	f7ff fb81 	bl	800f5b8 <memmove>
 800feb6:	e7ca      	b.n	800fe4e <_realloc_r+0x20e>
 800feb8:	1f32      	subs	r2, r6, #4
 800feba:	2a24      	cmp	r2, #36	; 0x24
 800febc:	d82d      	bhi.n	800ff1a <_realloc_r+0x2da>
 800febe:	2a13      	cmp	r2, #19
 800fec0:	d928      	bls.n	800ff14 <_realloc_r+0x2d4>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	6863      	ldr	r3, [r4, #4]
 800fec8:	6043      	str	r3, [r0, #4]
 800feca:	2a1b      	cmp	r2, #27
 800fecc:	d80e      	bhi.n	800feec <_realloc_r+0x2ac>
 800fece:	f100 0308 	add.w	r3, r0, #8
 800fed2:	f104 0208 	add.w	r2, r4, #8
 800fed6:	6811      	ldr	r1, [r2, #0]
 800fed8:	6019      	str	r1, [r3, #0]
 800feda:	6851      	ldr	r1, [r2, #4]
 800fedc:	6059      	str	r1, [r3, #4]
 800fede:	6892      	ldr	r2, [r2, #8]
 800fee0:	609a      	str	r2, [r3, #8]
 800fee2:	4621      	mov	r1, r4
 800fee4:	4650      	mov	r0, sl
 800fee6:	f7fb fd99 	bl	800ba1c <_free_r>
 800feea:	e76c      	b.n	800fdc6 <_realloc_r+0x186>
 800feec:	68a3      	ldr	r3, [r4, #8]
 800feee:	6083      	str	r3, [r0, #8]
 800fef0:	68e3      	ldr	r3, [r4, #12]
 800fef2:	60c3      	str	r3, [r0, #12]
 800fef4:	2a24      	cmp	r2, #36	; 0x24
 800fef6:	bf01      	itttt	eq
 800fef8:	6923      	ldreq	r3, [r4, #16]
 800fefa:	6103      	streq	r3, [r0, #16]
 800fefc:	6961      	ldreq	r1, [r4, #20]
 800fefe:	6141      	streq	r1, [r0, #20]
 800ff00:	bf19      	ittee	ne
 800ff02:	f100 0310 	addne.w	r3, r0, #16
 800ff06:	f104 0210 	addne.w	r2, r4, #16
 800ff0a:	f100 0318 	addeq.w	r3, r0, #24
 800ff0e:	f104 0218 	addeq.w	r2, r4, #24
 800ff12:	e7e0      	b.n	800fed6 <_realloc_r+0x296>
 800ff14:	4603      	mov	r3, r0
 800ff16:	4622      	mov	r2, r4
 800ff18:	e7dd      	b.n	800fed6 <_realloc_r+0x296>
 800ff1a:	4621      	mov	r1, r4
 800ff1c:	f7ff fb4c 	bl	800f5b8 <memmove>
 800ff20:	e7df      	b.n	800fee2 <_realloc_r+0x2a2>
 800ff22:	4637      	mov	r7, r6
 800ff24:	e6ed      	b.n	800fd02 <_realloc_r+0xc2>
 800ff26:	f003 0301 	and.w	r3, r3, #1
 800ff2a:	431f      	orrs	r7, r3
 800ff2c:	f8c9 7004 	str.w	r7, [r9, #4]
 800ff30:	6853      	ldr	r3, [r2, #4]
 800ff32:	f043 0301 	orr.w	r3, r3, #1
 800ff36:	6053      	str	r3, [r2, #4]
 800ff38:	e6ff      	b.n	800fd3a <_realloc_r+0xfa>
 800ff3a:	bf00      	nop
 800ff3c:	20000138 	.word	0x20000138

0800ff40 <__ssprint_r>:
 800ff40:	6893      	ldr	r3, [r2, #8]
 800ff42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff46:	4681      	mov	r9, r0
 800ff48:	460c      	mov	r4, r1
 800ff4a:	4617      	mov	r7, r2
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d060      	beq.n	8010012 <__ssprint_r+0xd2>
 800ff50:	f04f 0b00 	mov.w	fp, #0
 800ff54:	f8d2 a000 	ldr.w	sl, [r2]
 800ff58:	465e      	mov	r6, fp
 800ff5a:	b356      	cbz	r6, 800ffb2 <__ssprint_r+0x72>
 800ff5c:	68a3      	ldr	r3, [r4, #8]
 800ff5e:	429e      	cmp	r6, r3
 800ff60:	d344      	bcc.n	800ffec <__ssprint_r+0xac>
 800ff62:	89a2      	ldrh	r2, [r4, #12]
 800ff64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff68:	d03e      	beq.n	800ffe8 <__ssprint_r+0xa8>
 800ff6a:	6825      	ldr	r5, [r4, #0]
 800ff6c:	6921      	ldr	r1, [r4, #16]
 800ff6e:	eba5 0801 	sub.w	r8, r5, r1
 800ff72:	6965      	ldr	r5, [r4, #20]
 800ff74:	2302      	movs	r3, #2
 800ff76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff7a:	fb95 f5f3 	sdiv	r5, r5, r3
 800ff7e:	f108 0301 	add.w	r3, r8, #1
 800ff82:	4433      	add	r3, r6
 800ff84:	429d      	cmp	r5, r3
 800ff86:	bf38      	it	cc
 800ff88:	461d      	movcc	r5, r3
 800ff8a:	0553      	lsls	r3, r2, #21
 800ff8c:	d546      	bpl.n	801001c <__ssprint_r+0xdc>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4648      	mov	r0, r9
 800ff92:	f7fb fe55 	bl	800bc40 <_malloc_r>
 800ff96:	b998      	cbnz	r0, 800ffc0 <__ssprint_r+0x80>
 800ff98:	230c      	movs	r3, #12
 800ff9a:	f8c9 3000 	str.w	r3, [r9]
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa4:	81a3      	strh	r3, [r4, #12]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60bb      	str	r3, [r7, #8]
 800ffaa:	607b      	str	r3, [r7, #4]
 800ffac:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb0:	e031      	b.n	8010016 <__ssprint_r+0xd6>
 800ffb2:	f8da b000 	ldr.w	fp, [sl]
 800ffb6:	f8da 6004 	ldr.w	r6, [sl, #4]
 800ffba:	f10a 0a08 	add.w	sl, sl, #8
 800ffbe:	e7cc      	b.n	800ff5a <__ssprint_r+0x1a>
 800ffc0:	4642      	mov	r2, r8
 800ffc2:	6921      	ldr	r1, [r4, #16]
 800ffc4:	9001      	str	r0, [sp, #4]
 800ffc6:	f7fc f849 	bl	800c05c <memcpy>
 800ffca:	89a2      	ldrh	r2, [r4, #12]
 800ffcc:	9b01      	ldr	r3, [sp, #4]
 800ffce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ffd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ffd6:	81a2      	strh	r2, [r4, #12]
 800ffd8:	6123      	str	r3, [r4, #16]
 800ffda:	6165      	str	r5, [r4, #20]
 800ffdc:	4443      	add	r3, r8
 800ffde:	eba5 0508 	sub.w	r5, r5, r8
 800ffe2:	6023      	str	r3, [r4, #0]
 800ffe4:	60a5      	str	r5, [r4, #8]
 800ffe6:	4633      	mov	r3, r6
 800ffe8:	429e      	cmp	r6, r3
 800ffea:	d200      	bcs.n	800ffee <__ssprint_r+0xae>
 800ffec:	4633      	mov	r3, r6
 800ffee:	461a      	mov	r2, r3
 800fff0:	4659      	mov	r1, fp
 800fff2:	6820      	ldr	r0, [r4, #0]
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	f7ff fadf 	bl	800f5b8 <memmove>
 800fffa:	68a2      	ldr	r2, [r4, #8]
 800fffc:	9b01      	ldr	r3, [sp, #4]
 800fffe:	1ad2      	subs	r2, r2, r3
 8010000:	60a2      	str	r2, [r4, #8]
 8010002:	6822      	ldr	r2, [r4, #0]
 8010004:	4413      	add	r3, r2
 8010006:	6023      	str	r3, [r4, #0]
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	1b9e      	subs	r6, r3, r6
 801000c:	60be      	str	r6, [r7, #8]
 801000e:	2e00      	cmp	r6, #0
 8010010:	d1cf      	bne.n	800ffb2 <__ssprint_r+0x72>
 8010012:	2000      	movs	r0, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	b003      	add	sp, #12
 8010018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801001c:	462a      	mov	r2, r5
 801001e:	4648      	mov	r0, r9
 8010020:	f7ff fe0e 	bl	800fc40 <_realloc_r>
 8010024:	4603      	mov	r3, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	d1d6      	bne.n	800ffd8 <__ssprint_r+0x98>
 801002a:	6921      	ldr	r1, [r4, #16]
 801002c:	4648      	mov	r0, r9
 801002e:	f7fb fcf5 	bl	800ba1c <_free_r>
 8010032:	e7b1      	b.n	800ff98 <__ssprint_r+0x58>

08010034 <__sprint_r>:
 8010034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	6893      	ldr	r3, [r2, #8]
 801003a:	4680      	mov	r8, r0
 801003c:	460f      	mov	r7, r1
 801003e:	4614      	mov	r4, r2
 8010040:	b91b      	cbnz	r3, 801004a <__sprint_r+0x16>
 8010042:	6053      	str	r3, [r2, #4]
 8010044:	4618      	mov	r0, r3
 8010046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801004c:	049d      	lsls	r5, r3, #18
 801004e:	d523      	bpl.n	8010098 <__sprint_r+0x64>
 8010050:	6815      	ldr	r5, [r2, #0]
 8010052:	68a0      	ldr	r0, [r4, #8]
 8010054:	3508      	adds	r5, #8
 8010056:	b920      	cbnz	r0, 8010062 <__sprint_r+0x2e>
 8010058:	2300      	movs	r3, #0
 801005a:	60a3      	str	r3, [r4, #8]
 801005c:	6063      	str	r3, [r4, #4]
 801005e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010062:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8010066:	f855 bc08 	ldr.w	fp, [r5, #-8]
 801006a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801006e:	f04f 0900 	mov.w	r9, #0
 8010072:	45ca      	cmp	sl, r9
 8010074:	dc05      	bgt.n	8010082 <__sprint_r+0x4e>
 8010076:	68a3      	ldr	r3, [r4, #8]
 8010078:	f026 0603 	bic.w	r6, r6, #3
 801007c:	1b9e      	subs	r6, r3, r6
 801007e:	60a6      	str	r6, [r4, #8]
 8010080:	e7e7      	b.n	8010052 <__sprint_r+0x1e>
 8010082:	463a      	mov	r2, r7
 8010084:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8010088:	4640      	mov	r0, r8
 801008a:	f000 f8d5 	bl	8010238 <_fputwc_r>
 801008e:	1c43      	adds	r3, r0, #1
 8010090:	d0e2      	beq.n	8010058 <__sprint_r+0x24>
 8010092:	f109 0901 	add.w	r9, r9, #1
 8010096:	e7ec      	b.n	8010072 <__sprint_r+0x3e>
 8010098:	f7ff f8b4 	bl	800f204 <__sfvwrite_r>
 801009c:	e7dc      	b.n	8010058 <__sprint_r+0x24>
	...

080100a0 <__swbuf_r>:
 80100a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a2:	460e      	mov	r6, r1
 80100a4:	4614      	mov	r4, r2
 80100a6:	4605      	mov	r5, r0
 80100a8:	b118      	cbz	r0, 80100b2 <__swbuf_r+0x12>
 80100aa:	6983      	ldr	r3, [r0, #24]
 80100ac:	b90b      	cbnz	r3, 80100b2 <__swbuf_r+0x12>
 80100ae:	f7fb fbdf 	bl	800b870 <__sinit>
 80100b2:	4b27      	ldr	r3, [pc, #156]	; (8010150 <__swbuf_r+0xb0>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d12f      	bne.n	8010118 <__swbuf_r+0x78>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	69a3      	ldr	r3, [r4, #24]
 80100bc:	60a3      	str	r3, [r4, #8]
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	0719      	lsls	r1, r3, #28
 80100c2:	d533      	bpl.n	801012c <__swbuf_r+0x8c>
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d030      	beq.n	801012c <__swbuf_r+0x8c>
 80100ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ce:	b2f6      	uxtb	r6, r6
 80100d0:	049a      	lsls	r2, r3, #18
 80100d2:	4637      	mov	r7, r6
 80100d4:	d534      	bpl.n	8010140 <__swbuf_r+0xa0>
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	6820      	ldr	r0, [r4, #0]
 80100da:	1ac0      	subs	r0, r0, r3
 80100dc:	6963      	ldr	r3, [r4, #20]
 80100de:	4298      	cmp	r0, r3
 80100e0:	db04      	blt.n	80100ec <__swbuf_r+0x4c>
 80100e2:	4621      	mov	r1, r4
 80100e4:	4628      	mov	r0, r5
 80100e6:	f7fb fb1d 	bl	800b724 <_fflush_r>
 80100ea:	bb28      	cbnz	r0, 8010138 <__swbuf_r+0x98>
 80100ec:	68a3      	ldr	r3, [r4, #8]
 80100ee:	3b01      	subs	r3, #1
 80100f0:	60a3      	str	r3, [r4, #8]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	6022      	str	r2, [r4, #0]
 80100f8:	701e      	strb	r6, [r3, #0]
 80100fa:	6963      	ldr	r3, [r4, #20]
 80100fc:	3001      	adds	r0, #1
 80100fe:	4298      	cmp	r0, r3
 8010100:	d004      	beq.n	801010c <__swbuf_r+0x6c>
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	07db      	lsls	r3, r3, #31
 8010106:	d519      	bpl.n	801013c <__swbuf_r+0x9c>
 8010108:	2e0a      	cmp	r6, #10
 801010a:	d117      	bne.n	801013c <__swbuf_r+0x9c>
 801010c:	4621      	mov	r1, r4
 801010e:	4628      	mov	r0, r5
 8010110:	f7fb fb08 	bl	800b724 <_fflush_r>
 8010114:	b190      	cbz	r0, 801013c <__swbuf_r+0x9c>
 8010116:	e00f      	b.n	8010138 <__swbuf_r+0x98>
 8010118:	4b0e      	ldr	r3, [pc, #56]	; (8010154 <__swbuf_r+0xb4>)
 801011a:	429c      	cmp	r4, r3
 801011c:	d101      	bne.n	8010122 <__swbuf_r+0x82>
 801011e:	68ac      	ldr	r4, [r5, #8]
 8010120:	e7cb      	b.n	80100ba <__swbuf_r+0x1a>
 8010122:	4b0d      	ldr	r3, [pc, #52]	; (8010158 <__swbuf_r+0xb8>)
 8010124:	429c      	cmp	r4, r3
 8010126:	bf08      	it	eq
 8010128:	68ec      	ldreq	r4, [r5, #12]
 801012a:	e7c6      	b.n	80100ba <__swbuf_r+0x1a>
 801012c:	4621      	mov	r1, r4
 801012e:	4628      	mov	r0, r5
 8010130:	f7fe f924 	bl	800e37c <__swsetup_r>
 8010134:	2800      	cmp	r0, #0
 8010136:	d0c8      	beq.n	80100ca <__swbuf_r+0x2a>
 8010138:	f04f 37ff 	mov.w	r7, #4294967295
 801013c:	4638      	mov	r0, r7
 801013e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010144:	81a3      	strh	r3, [r4, #12]
 8010146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801014c:	6663      	str	r3, [r4, #100]	; 0x64
 801014e:	e7c2      	b.n	80100d6 <__swbuf_r+0x36>
 8010150:	0801087c 	.word	0x0801087c
 8010154:	0801089c 	.word	0x0801089c
 8010158:	0801085c 	.word	0x0801085c

0801015c <_calloc_r>:
 801015c:	b510      	push	{r4, lr}
 801015e:	4351      	muls	r1, r2
 8010160:	f7fb fd6e 	bl	800bc40 <_malloc_r>
 8010164:	4604      	mov	r4, r0
 8010166:	b198      	cbz	r0, 8010190 <_calloc_r+0x34>
 8010168:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801016c:	f022 0203 	bic.w	r2, r2, #3
 8010170:	3a04      	subs	r2, #4
 8010172:	2a24      	cmp	r2, #36	; 0x24
 8010174:	d81b      	bhi.n	80101ae <_calloc_r+0x52>
 8010176:	2a13      	cmp	r2, #19
 8010178:	d917      	bls.n	80101aa <_calloc_r+0x4e>
 801017a:	2100      	movs	r1, #0
 801017c:	2a1b      	cmp	r2, #27
 801017e:	6001      	str	r1, [r0, #0]
 8010180:	6041      	str	r1, [r0, #4]
 8010182:	d807      	bhi.n	8010194 <_calloc_r+0x38>
 8010184:	f100 0308 	add.w	r3, r0, #8
 8010188:	2200      	movs	r2, #0
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	605a      	str	r2, [r3, #4]
 801018e:	609a      	str	r2, [r3, #8]
 8010190:	4620      	mov	r0, r4
 8010192:	bd10      	pop	{r4, pc}
 8010194:	2a24      	cmp	r2, #36	; 0x24
 8010196:	6081      	str	r1, [r0, #8]
 8010198:	60c1      	str	r1, [r0, #12]
 801019a:	bf11      	iteee	ne
 801019c:	f100 0310 	addne.w	r3, r0, #16
 80101a0:	6101      	streq	r1, [r0, #16]
 80101a2:	f100 0318 	addeq.w	r3, r0, #24
 80101a6:	6141      	streq	r1, [r0, #20]
 80101a8:	e7ee      	b.n	8010188 <_calloc_r+0x2c>
 80101aa:	4603      	mov	r3, r0
 80101ac:	e7ec      	b.n	8010188 <_calloc_r+0x2c>
 80101ae:	2100      	movs	r1, #0
 80101b0:	f7fb ff5f 	bl	800c072 <memset>
 80101b4:	e7ec      	b.n	8010190 <_calloc_r+0x34>

080101b6 <__fputwc>:
 80101b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101ba:	4680      	mov	r8, r0
 80101bc:	460e      	mov	r6, r1
 80101be:	4614      	mov	r4, r2
 80101c0:	f000 f886 	bl	80102d0 <__locale_mb_cur_max>
 80101c4:	2801      	cmp	r0, #1
 80101c6:	d11c      	bne.n	8010202 <__fputwc+0x4c>
 80101c8:	1e73      	subs	r3, r6, #1
 80101ca:	2bfe      	cmp	r3, #254	; 0xfe
 80101cc:	d819      	bhi.n	8010202 <__fputwc+0x4c>
 80101ce:	f88d 6004 	strb.w	r6, [sp, #4]
 80101d2:	4605      	mov	r5, r0
 80101d4:	2700      	movs	r7, #0
 80101d6:	f10d 0904 	add.w	r9, sp, #4
 80101da:	42af      	cmp	r7, r5
 80101dc:	d020      	beq.n	8010220 <__fputwc+0x6a>
 80101de:	68a3      	ldr	r3, [r4, #8]
 80101e0:	f817 1009 	ldrb.w	r1, [r7, r9]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	60a3      	str	r3, [r4, #8]
 80101ea:	da04      	bge.n	80101f6 <__fputwc+0x40>
 80101ec:	69a2      	ldr	r2, [r4, #24]
 80101ee:	4293      	cmp	r3, r2
 80101f0:	db1a      	blt.n	8010228 <__fputwc+0x72>
 80101f2:	290a      	cmp	r1, #10
 80101f4:	d018      	beq.n	8010228 <__fputwc+0x72>
 80101f6:	6823      	ldr	r3, [r4, #0]
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	6022      	str	r2, [r4, #0]
 80101fc:	7019      	strb	r1, [r3, #0]
 80101fe:	3701      	adds	r7, #1
 8010200:	e7eb      	b.n	80101da <__fputwc+0x24>
 8010202:	4632      	mov	r2, r6
 8010204:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8010208:	a901      	add	r1, sp, #4
 801020a:	4640      	mov	r0, r8
 801020c:	f000 f880 	bl	8010310 <_wcrtomb_r>
 8010210:	1c42      	adds	r2, r0, #1
 8010212:	4605      	mov	r5, r0
 8010214:	d1de      	bne.n	80101d4 <__fputwc+0x1e>
 8010216:	89a3      	ldrh	r3, [r4, #12]
 8010218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801021c:	81a3      	strh	r3, [r4, #12]
 801021e:	4606      	mov	r6, r0
 8010220:	4630      	mov	r0, r6
 8010222:	b003      	add	sp, #12
 8010224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010228:	4622      	mov	r2, r4
 801022a:	4640      	mov	r0, r8
 801022c:	f7ff ff38 	bl	80100a0 <__swbuf_r>
 8010230:	1c43      	adds	r3, r0, #1
 8010232:	d1e4      	bne.n	80101fe <__fputwc+0x48>
 8010234:	4606      	mov	r6, r0
 8010236:	e7f3      	b.n	8010220 <__fputwc+0x6a>

08010238 <_fputwc_r>:
 8010238:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801023a:	07db      	lsls	r3, r3, #31
 801023c:	b570      	push	{r4, r5, r6, lr}
 801023e:	4605      	mov	r5, r0
 8010240:	460e      	mov	r6, r1
 8010242:	4614      	mov	r4, r2
 8010244:	d405      	bmi.n	8010252 <_fputwc_r+0x1a>
 8010246:	8993      	ldrh	r3, [r2, #12]
 8010248:	0598      	lsls	r0, r3, #22
 801024a:	d402      	bmi.n	8010252 <_fputwc_r+0x1a>
 801024c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801024e:	f7fb fce5 	bl	800bc1c <__retarget_lock_acquire_recursive>
 8010252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010256:	0499      	lsls	r1, r3, #18
 8010258:	d406      	bmi.n	8010268 <_fputwc_r+0x30>
 801025a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801025e:	81a3      	strh	r3, [r4, #12]
 8010260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010266:	6663      	str	r3, [r4, #100]	; 0x64
 8010268:	4622      	mov	r2, r4
 801026a:	4628      	mov	r0, r5
 801026c:	4631      	mov	r1, r6
 801026e:	f7ff ffa2 	bl	80101b6 <__fputwc>
 8010272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010274:	07da      	lsls	r2, r3, #31
 8010276:	4605      	mov	r5, r0
 8010278:	d405      	bmi.n	8010286 <_fputwc_r+0x4e>
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	059b      	lsls	r3, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fputwc_r+0x4e>
 8010280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010282:	f7fb fccc 	bl	800bc1e <__retarget_lock_release_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	bd70      	pop	{r4, r5, r6, pc}
	...

0801028c <_fstat_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4c07      	ldr	r4, [pc, #28]	; (80102ac <_fstat_r+0x20>)
 8010290:	2300      	movs	r3, #0
 8010292:	4605      	mov	r5, r0
 8010294:	4608      	mov	r0, r1
 8010296:	4611      	mov	r1, r2
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	f7fa ff91 	bl	800b1c0 <_fstat>
 801029e:	1c43      	adds	r3, r0, #1
 80102a0:	d102      	bne.n	80102a8 <_fstat_r+0x1c>
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	b103      	cbz	r3, 80102a8 <_fstat_r+0x1c>
 80102a6:	602b      	str	r3, [r5, #0]
 80102a8:	bd38      	pop	{r3, r4, r5, pc}
 80102aa:	bf00      	nop
 80102ac:	20001dbc 	.word	0x20001dbc

080102b0 <_isatty_r>:
 80102b0:	b538      	push	{r3, r4, r5, lr}
 80102b2:	4c06      	ldr	r4, [pc, #24]	; (80102cc <_isatty_r+0x1c>)
 80102b4:	2300      	movs	r3, #0
 80102b6:	4605      	mov	r5, r0
 80102b8:	4608      	mov	r0, r1
 80102ba:	6023      	str	r3, [r4, #0]
 80102bc:	f7fa ff90 	bl	800b1e0 <_isatty>
 80102c0:	1c43      	adds	r3, r0, #1
 80102c2:	d102      	bne.n	80102ca <_isatty_r+0x1a>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	b103      	cbz	r3, 80102ca <_isatty_r+0x1a>
 80102c8:	602b      	str	r3, [r5, #0]
 80102ca:	bd38      	pop	{r3, r4, r5, pc}
 80102cc:	20001dbc 	.word	0x20001dbc

080102d0 <__locale_mb_cur_max>:
 80102d0:	4b04      	ldr	r3, [pc, #16]	; (80102e4 <__locale_mb_cur_max+0x14>)
 80102d2:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <__locale_mb_cur_max+0x18>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bf08      	it	eq
 80102dc:	4613      	moveq	r3, r2
 80102de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80102e2:	4770      	bx	lr
 80102e4:	20000044 	.word	0x20000044
 80102e8:	20000548 	.word	0x20000548

080102ec <__ascii_mbtowc>:
 80102ec:	b082      	sub	sp, #8
 80102ee:	b901      	cbnz	r1, 80102f2 <__ascii_mbtowc+0x6>
 80102f0:	a901      	add	r1, sp, #4
 80102f2:	b142      	cbz	r2, 8010306 <__ascii_mbtowc+0x1a>
 80102f4:	b14b      	cbz	r3, 801030a <__ascii_mbtowc+0x1e>
 80102f6:	7813      	ldrb	r3, [r2, #0]
 80102f8:	600b      	str	r3, [r1, #0]
 80102fa:	7812      	ldrb	r2, [r2, #0]
 80102fc:	1c10      	adds	r0, r2, #0
 80102fe:	bf18      	it	ne
 8010300:	2001      	movne	r0, #1
 8010302:	b002      	add	sp, #8
 8010304:	4770      	bx	lr
 8010306:	4610      	mov	r0, r2
 8010308:	e7fb      	b.n	8010302 <__ascii_mbtowc+0x16>
 801030a:	f06f 0001 	mvn.w	r0, #1
 801030e:	e7f8      	b.n	8010302 <__ascii_mbtowc+0x16>

08010310 <_wcrtomb_r>:
 8010310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010312:	4605      	mov	r5, r0
 8010314:	b085      	sub	sp, #20
 8010316:	461e      	mov	r6, r3
 8010318:	460f      	mov	r7, r1
 801031a:	4c0f      	ldr	r4, [pc, #60]	; (8010358 <_wcrtomb_r+0x48>)
 801031c:	b991      	cbnz	r1, 8010344 <_wcrtomb_r+0x34>
 801031e:	6822      	ldr	r2, [r4, #0]
 8010320:	490e      	ldr	r1, [pc, #56]	; (801035c <_wcrtomb_r+0x4c>)
 8010322:	6a12      	ldr	r2, [r2, #32]
 8010324:	2a00      	cmp	r2, #0
 8010326:	bf08      	it	eq
 8010328:	460a      	moveq	r2, r1
 801032a:	a901      	add	r1, sp, #4
 801032c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8010330:	463a      	mov	r2, r7
 8010332:	47a0      	blx	r4
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	bf01      	itttt	eq
 8010338:	2300      	moveq	r3, #0
 801033a:	6033      	streq	r3, [r6, #0]
 801033c:	238a      	moveq	r3, #138	; 0x8a
 801033e:	602b      	streq	r3, [r5, #0]
 8010340:	b005      	add	sp, #20
 8010342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010344:	6824      	ldr	r4, [r4, #0]
 8010346:	4f05      	ldr	r7, [pc, #20]	; (801035c <_wcrtomb_r+0x4c>)
 8010348:	6a24      	ldr	r4, [r4, #32]
 801034a:	2c00      	cmp	r4, #0
 801034c:	bf08      	it	eq
 801034e:	463c      	moveq	r4, r7
 8010350:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8010354:	e7ed      	b.n	8010332 <_wcrtomb_r+0x22>
 8010356:	bf00      	nop
 8010358:	20000044 	.word	0x20000044
 801035c:	20000548 	.word	0x20000548

08010360 <__ascii_wctomb>:
 8010360:	b149      	cbz	r1, 8010376 <__ascii_wctomb+0x16>
 8010362:	2aff      	cmp	r2, #255	; 0xff
 8010364:	bf85      	ittet	hi
 8010366:	238a      	movhi	r3, #138	; 0x8a
 8010368:	6003      	strhi	r3, [r0, #0]
 801036a:	700a      	strbls	r2, [r1, #0]
 801036c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010370:	bf98      	it	ls
 8010372:	2001      	movls	r0, #1
 8010374:	4770      	bx	lr
 8010376:	4608      	mov	r0, r1
 8010378:	4770      	bx	lr

0801037a <abort>:
 801037a:	b508      	push	{r3, lr}
 801037c:	2006      	movs	r0, #6
 801037e:	f000 f82b 	bl	80103d8 <raise>
 8010382:	2001      	movs	r0, #1
 8010384:	f7fa fea0 	bl	800b0c8 <_exit>

08010388 <_raise_r>:
 8010388:	291f      	cmp	r1, #31
 801038a:	b538      	push	{r3, r4, r5, lr}
 801038c:	4604      	mov	r4, r0
 801038e:	460d      	mov	r5, r1
 8010390:	d904      	bls.n	801039c <_raise_r+0x14>
 8010392:	2316      	movs	r3, #22
 8010394:	6003      	str	r3, [r0, #0]
 8010396:	f04f 30ff 	mov.w	r0, #4294967295
 801039a:	bd38      	pop	{r3, r4, r5, pc}
 801039c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801039e:	b112      	cbz	r2, 80103a6 <_raise_r+0x1e>
 80103a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103a4:	b94b      	cbnz	r3, 80103ba <_raise_r+0x32>
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 f830 	bl	801040c <_getpid_r>
 80103ac:	462a      	mov	r2, r5
 80103ae:	4601      	mov	r1, r0
 80103b0:	4620      	mov	r0, r4
 80103b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103b6:	f000 b817 	b.w	80103e8 <_kill_r>
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d00a      	beq.n	80103d4 <_raise_r+0x4c>
 80103be:	1c59      	adds	r1, r3, #1
 80103c0:	d103      	bne.n	80103ca <_raise_r+0x42>
 80103c2:	2316      	movs	r3, #22
 80103c4:	6003      	str	r3, [r0, #0]
 80103c6:	2001      	movs	r0, #1
 80103c8:	bd38      	pop	{r3, r4, r5, pc}
 80103ca:	2400      	movs	r4, #0
 80103cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103d0:	4628      	mov	r0, r5
 80103d2:	4798      	blx	r3
 80103d4:	2000      	movs	r0, #0
 80103d6:	bd38      	pop	{r3, r4, r5, pc}

080103d8 <raise>:
 80103d8:	4b02      	ldr	r3, [pc, #8]	; (80103e4 <raise+0xc>)
 80103da:	4601      	mov	r1, r0
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	f7ff bfd3 	b.w	8010388 <_raise_r>
 80103e2:	bf00      	nop
 80103e4:	20000044 	.word	0x20000044

080103e8 <_kill_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4c07      	ldr	r4, [pc, #28]	; (8010408 <_kill_r+0x20>)
 80103ec:	2300      	movs	r3, #0
 80103ee:	4605      	mov	r5, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	4611      	mov	r1, r2
 80103f4:	6023      	str	r3, [r4, #0]
 80103f6:	f7fa fe57 	bl	800b0a8 <_kill>
 80103fa:	1c43      	adds	r3, r0, #1
 80103fc:	d102      	bne.n	8010404 <_kill_r+0x1c>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	b103      	cbz	r3, 8010404 <_kill_r+0x1c>
 8010402:	602b      	str	r3, [r5, #0]
 8010404:	bd38      	pop	{r3, r4, r5, pc}
 8010406:	bf00      	nop
 8010408:	20001dbc 	.word	0x20001dbc

0801040c <_getpid_r>:
 801040c:	f7fa be44 	b.w	800b098 <_getpid>

08010410 <_init>:
 8010410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010412:	bf00      	nop
 8010414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010416:	bc08      	pop	{r3}
 8010418:	469e      	mov	lr, r3
 801041a:	4770      	bx	lr

0801041c <_fini>:
 801041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041e:	bf00      	nop
 8010420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010422:	bc08      	pop	{r3}
 8010424:	469e      	mov	lr, r3
 8010426:	4770      	bx	lr
