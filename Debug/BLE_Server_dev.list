
BLE_Server_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002284  08015c80  08015c80  00025c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000388  08017f04  08017f04  00027f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000400  0801828c  0801828c  0002828c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000024  0801868c  0801868c  0002868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080186b0  080186b0  000286b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000006c4  20000000  080186b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001908  200006c4  08018d78  000306c4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001fcc  08018d78  00031fcc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000306c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004be97  00000000  00000000  000306f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008473  00000000  00000000  0007c58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001447d  00000000  00000000  000849fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e88  00000000  00000000  00098e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002360  00000000  00000000  0009ad08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013ccf  00000000  00000000  0009d068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000fa43  00000000  00000000  000b0d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c077a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000130ec  00000000  00000000  000c07f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c4 	.word	0x200006c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015c64 	.word	0x08015c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006c8 	.word	0x200006c8
 80001cc:	08015c64 	.word	0x08015c64

080001d0 <d_make_comp>:
 80001d0:	b470      	push	{r4, r5, r6}
 80001d2:	1e4c      	subs	r4, r1, #1
 80001d4:	2c4c      	cmp	r4, #76	; 0x4c
 80001d6:	d82d      	bhi.n	8000234 <d_make_comp+0x64>
 80001d8:	e8df f004 	tbb	[pc, r4]
 80001dc:	3c3c3c3c 	.word	0x3c3c3c3c
 80001e0:	2c2c2c2c 	.word	0x2c2c2c2c
 80001e4:	273c2727 	.word	0x273c2727
 80001e8:	27272727 	.word	0x27272727
 80001ec:	27272727 	.word	0x27272727
 80001f0:	2c272727 	.word	0x2c272727
 80001f4:	28282828 	.word	0x28282828
 80001f8:	28282828 	.word	0x28282828
 80001fc:	2727273c 	.word	0x2727273c
 8000200:	272c2727 	.word	0x272c2727
 8000204:	2c3c3e28 	.word	0x2c3c3e28
 8000208:	3e28283c 	.word	0x3e28283c
 800020c:	27272c2c 	.word	0x27272c2c
 8000210:	3c3c3c27 	.word	0x3c3c3c27
 8000214:	3c273c3c 	.word	0x3c273c3c
 8000218:	2c3c273c 	.word	0x2c3c273c
 800021c:	2727272c 	.word	0x2727272c
 8000220:	272c2c2c 	.word	0x272c2c2c
 8000224:	283c2727 	.word	0x283c2727
 8000228:	3c          	.byte	0x3c
 8000229:	00          	.byte	0x00
 800022a:	b11a      	cbz	r2, 8000234 <d_make_comp+0x64>
 800022c:	6944      	ldr	r4, [r0, #20]
 800022e:	6985      	ldr	r5, [r0, #24]
 8000230:	42ac      	cmp	r4, r5
 8000232:	db02      	blt.n	800023a <d_make_comp+0x6a>
 8000234:	2000      	movs	r0, #0
 8000236:	bc70      	pop	{r4, r5, r6}
 8000238:	4770      	bx	lr
 800023a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800023e:	6906      	ldr	r6, [r0, #16]
 8000240:	00ad      	lsls	r5, r5, #2
 8000242:	3401      	adds	r4, #1
 8000244:	6144      	str	r4, [r0, #20]
 8000246:	1970      	adds	r0, r6, r5
 8000248:	d0f5      	beq.n	8000236 <d_make_comp+0x66>
 800024a:	5571      	strb	r1, [r6, r5]
 800024c:	6042      	str	r2, [r0, #4]
 800024e:	6083      	str	r3, [r0, #8]
 8000250:	bc70      	pop	{r4, r5, r6}
 8000252:	4770      	bx	lr
 8000254:	2a00      	cmp	r2, #0
 8000256:	d0ed      	beq.n	8000234 <d_make_comp+0x64>
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0eb      	beq.n	8000234 <d_make_comp+0x64>
 800025c:	6944      	ldr	r4, [r0, #20]
 800025e:	6985      	ldr	r5, [r0, #24]
 8000260:	42ac      	cmp	r4, r5
 8000262:	dae7      	bge.n	8000234 <d_make_comp+0x64>
 8000264:	e7e9      	b.n	800023a <d_make_comp+0x6a>
 8000266:	bf00      	nop

08000268 <d_cv_qualifiers>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	68c3      	ldr	r3, [r0, #12]
 800026e:	f1b2 0a00 	subs.w	sl, r2, #0
 8000272:	4604      	mov	r4, r0
 8000274:	460e      	mov	r6, r1
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	bf15      	itete	ne
 800027a:	f04f 091e 	movne.w	r9, #30
 800027e:	f04f 091b 	moveq.w	r9, #27
 8000282:	f04f 081d 	movne.w	r8, #29
 8000286:	f04f 081a 	moveq.w	r8, #26
 800028a:	bf14      	ite	ne
 800028c:	271c      	movne	r7, #28
 800028e:	2719      	moveq	r7, #25
 8000290:	460d      	mov	r5, r1
 8000292:	e018      	b.n	80002c6 <d_cv_qualifiers+0x5e>
 8000294:	2a56      	cmp	r2, #86	; 0x56
 8000296:	d01f      	beq.n	80002d8 <d_cv_qualifiers+0x70>
 8000298:	2a4b      	cmp	r2, #75	; 0x4b
 800029a:	d024      	beq.n	80002e6 <d_cv_qualifiers+0x7e>
 800029c:	2a44      	cmp	r2, #68	; 0x44
 800029e:	d12d      	bne.n	80002fc <d_cv_qualifiers+0x94>
 80002a0:	785a      	ldrb	r2, [r3, #1]
 80002a2:	2a78      	cmp	r2, #120	; 0x78
 80002a4:	d127      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 80002a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002a8:	3302      	adds	r3, #2
 80002aa:	3211      	adds	r2, #17
 80002ac:	60e3      	str	r3, [r4, #12]
 80002ae:	6322      	str	r2, [r4, #48]	; 0x30
 80002b0:	214c      	movs	r1, #76	; 0x4c
 80002b2:	2300      	movs	r3, #0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4620      	mov	r0, r4
 80002b8:	f7ff ff8a 	bl	80001d0 <d_make_comp>
 80002bc:	6028      	str	r0, [r5, #0]
 80002be:	b1c8      	cbz	r0, 80002f4 <d_cv_qualifiers+0x8c>
 80002c0:	68e3      	ldr	r3, [r4, #12]
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	1d05      	adds	r5, r0, #4
 80002c6:	2a72      	cmp	r2, #114	; 0x72
 80002c8:	d1e4      	bne.n	8000294 <d_cv_qualifiers+0x2c>
 80002ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002cc:	3301      	adds	r3, #1
 80002ce:	3209      	adds	r2, #9
 80002d0:	60e3      	str	r3, [r4, #12]
 80002d2:	6322      	str	r2, [r4, #48]	; 0x30
 80002d4:	4639      	mov	r1, r7
 80002d6:	e7ec      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002da:	3301      	adds	r3, #1
 80002dc:	3209      	adds	r2, #9
 80002de:	60e3      	str	r3, [r4, #12]
 80002e0:	6322      	str	r2, [r4, #48]	; 0x30
 80002e2:	4641      	mov	r1, r8
 80002e4:	e7e5      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002e8:	3301      	adds	r3, #1
 80002ea:	3206      	adds	r2, #6
 80002ec:	60e3      	str	r3, [r4, #12]
 80002ee:	6322      	str	r2, [r4, #48]	; 0x30
 80002f0:	4649      	mov	r1, r9
 80002f2:	e7de      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002f4:	4605      	mov	r5, r0
 80002f6:	4628      	mov	r0, r5
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	f1ba 0f00 	cmp.w	sl, #0
 8000300:	d1f9      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000302:	2a46      	cmp	r2, #70	; 0x46
 8000304:	d1f7      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000306:	42b5      	cmp	r5, r6
 8000308:	d0f5      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 800030a:	201d      	movs	r0, #29
 800030c:	211e      	movs	r1, #30
 800030e:	221c      	movs	r2, #28
 8000310:	e007      	b.n	8000322 <d_cv_qualifiers+0xba>
 8000312:	2b1b      	cmp	r3, #27
 8000314:	d00b      	beq.n	800032e <d_cv_qualifiers+0xc6>
 8000316:	2b19      	cmp	r3, #25
 8000318:	d100      	bne.n	800031c <d_cv_qualifiers+0xb4>
 800031a:	7032      	strb	r2, [r6, #0]
 800031c:	3604      	adds	r6, #4
 800031e:	42b5      	cmp	r5, r6
 8000320:	d0e9      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 8000322:	6836      	ldr	r6, [r6, #0]
 8000324:	7833      	ldrb	r3, [r6, #0]
 8000326:	2b1a      	cmp	r3, #26
 8000328:	d1f3      	bne.n	8000312 <d_cv_qualifiers+0xaa>
 800032a:	7030      	strb	r0, [r6, #0]
 800032c:	e7f6      	b.n	800031c <d_cv_qualifiers+0xb4>
 800032e:	7031      	strb	r1, [r6, #0]
 8000330:	e7f4      	b.n	800031c <d_cv_qualifiers+0xb4>
 8000332:	bf00      	nop

08000334 <d_ref_qualifier>:
 8000334:	b410      	push	{r4}
 8000336:	68c3      	ldr	r3, [r0, #12]
 8000338:	781c      	ldrb	r4, [r3, #0]
 800033a:	2c52      	cmp	r4, #82	; 0x52
 800033c:	460a      	mov	r2, r1
 800033e:	d00f      	beq.n	8000360 <d_ref_qualifier+0x2c>
 8000340:	2c4f      	cmp	r4, #79	; 0x4f
 8000342:	d003      	beq.n	800034c <d_ref_qualifier+0x18>
 8000344:	4608      	mov	r0, r1
 8000346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800034e:	3103      	adds	r1, #3
 8000350:	6301      	str	r1, [r0, #48]	; 0x30
 8000352:	2120      	movs	r1, #32
 8000354:	3301      	adds	r3, #1
 8000356:	60c3      	str	r3, [r0, #12]
 8000358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035c:	2300      	movs	r3, #0
 800035e:	e737      	b.n	80001d0 <d_make_comp>
 8000360:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000362:	3102      	adds	r1, #2
 8000364:	6301      	str	r1, [r0, #48]	; 0x30
 8000366:	211f      	movs	r1, #31
 8000368:	e7f4      	b.n	8000354 <d_ref_qualifier+0x20>
 800036a:	bf00      	nop

0800036c <d_count_templates_scopes>:
 800036c:	2a00      	cmp	r2, #0
 800036e:	d04d      	beq.n	800040c <d_count_templates_scopes+0xa0>
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4605      	mov	r5, r0
 8000374:	460e      	mov	r6, r1
 8000376:	4614      	mov	r4, r2
 8000378:	7823      	ldrb	r3, [r4, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	2b4c      	cmp	r3, #76	; 0x4c
 800037e:	d82b      	bhi.n	80003d8 <d_count_templates_scopes+0x6c>
 8000380:	e8df f003 	tbb	[pc, r3]
 8000384:	3f363636 	.word	0x3f363636
 8000388:	27272a2a 	.word	0x27272a2a
 800038c:	36363636 	.word	0x36363636
 8000390:	36363636 	.word	0x36363636
 8000394:	36363636 	.word	0x36363636
 8000398:	2a363636 	.word	0x2a363636
 800039c:	36363636 	.word	0x36363636
 80003a0:	36363636 	.word	0x36363636
 80003a4:	2f2f3636 	.word	0x2f2f3636
 80003a8:	362a3636 	.word	0x362a3636
 80003ac:	2b363636 	.word	0x2b363636
 80003b0:	36363636 	.word	0x36363636
 80003b4:	3636272a 	.word	0x3636272a
 80003b8:	36363636 	.word	0x36363636
 80003bc:	36363636 	.word	0x36363636
 80003c0:	2a363636 	.word	0x2a363636
 80003c4:	2b2b362a 	.word	0x2b2b362a
 80003c8:	362a2b2b 	.word	0x362a2b2b
 80003cc:	36363636 	.word	0x36363636
 80003d0:	36          	.byte	0x36
 80003d1:	00          	.byte	0x00
 80003d2:	68a4      	ldr	r4, [r4, #8]
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d1cf      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	6864      	ldr	r4, [r4, #4]
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d1cb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003e0:	e7fa      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 80003e2:	6862      	ldr	r2, [r4, #4]
 80003e4:	7813      	ldrb	r3, [r2, #0]
 80003e6:	2b05      	cmp	r3, #5
 80003e8:	d103      	bne.n	80003f2 <d_count_templates_scopes+0x86>
 80003ea:	6833      	ldr	r3, [r6, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	6033      	str	r3, [r6, #0]
 80003f0:	6862      	ldr	r2, [r4, #4]
 80003f2:	4631      	mov	r1, r6
 80003f4:	4628      	mov	r0, r5
 80003f6:	f7ff ffb9 	bl	800036c <d_count_templates_scopes>
 80003fa:	68a4      	ldr	r4, [r4, #8]
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d1bb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 8000400:	e7ea      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 8000402:	682b      	ldr	r3, [r5, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	602b      	str	r3, [r5, #0]
 8000408:	6862      	ldr	r2, [r4, #4]
 800040a:	e7f2      	b.n	80003f2 <d_count_templates_scopes+0x86>
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <d_append_buffer>:
 8000410:	b37a      	cbz	r2, 8000472 <d_append_buffer+0x62>
 8000412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800041e:	18af      	adds	r7, r5, r2
 8000420:	f04f 0800 	mov.w	r8, #0
 8000424:	e009      	b.n	800043a <d_append_buffer+0x2a>
 8000426:	460b      	mov	r3, r1
 8000428:	42bd      	cmp	r5, r7
 800042a:	f101 0101 	add.w	r1, r1, #1
 800042e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000432:	54e6      	strb	r6, [r4, r3]
 8000434:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000438:	d019      	beq.n	800046e <d_append_buffer+0x5e>
 800043a:	29ff      	cmp	r1, #255	; 0xff
 800043c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000440:	d1f1      	bne.n	8000426 <d_append_buffer+0x16>
 8000442:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000446:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800044a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800044e:	4620      	mov	r0, r4
 8000450:	4798      	blx	r3
 8000452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000456:	3301      	adds	r3, #1
 8000458:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800045c:	2300      	movs	r3, #0
 800045e:	2101      	movs	r1, #1
 8000460:	42bd      	cmp	r5, r7
 8000462:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000466:	54e6      	strb	r6, [r4, r3]
 8000468:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800046c:	d1e5      	bne.n	800043a <d_append_buffer+0x2a>
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000472:	4770      	bx	lr

08000474 <d_number.isra.0>:
 8000474:	b470      	push	{r4, r5, r6}
 8000476:	6802      	ldr	r2, [r0, #0]
 8000478:	7811      	ldrb	r1, [r2, #0]
 800047a:	296e      	cmp	r1, #110	; 0x6e
 800047c:	d018      	beq.n	80004b0 <d_number.isra.0+0x3c>
 800047e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000482:	2b09      	cmp	r3, #9
 8000484:	d81e      	bhi.n	80004c4 <d_number.isra.0+0x50>
 8000486:	2600      	movs	r6, #0
 8000488:	2300      	movs	r3, #0
 800048a:	3201      	adds	r2, #1
 800048c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000490:	6002      	str	r2, [r0, #0]
 8000492:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000496:	7811      	ldrb	r1, [r2, #0]
 8000498:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800049c:	2d09      	cmp	r5, #9
 800049e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80004a2:	d9f2      	bls.n	800048a <d_number.isra.0+0x16>
 80004a4:	b10e      	cbz	r6, 80004aa <d_number.isra.0+0x36>
 80004a6:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 80004aa:	4618      	mov	r0, r3
 80004ac:	bc70      	pop	{r4, r5, r6}
 80004ae:	4770      	bx	lr
 80004b0:	1c53      	adds	r3, r2, #1
 80004b2:	6003      	str	r3, [r0, #0]
 80004b4:	7851      	ldrb	r1, [r2, #1]
 80004b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80004ba:	2a09      	cmp	r2, #9
 80004bc:	d802      	bhi.n	80004c4 <d_number.isra.0+0x50>
 80004be:	461a      	mov	r2, r3
 80004c0:	2601      	movs	r6, #1
 80004c2:	e7e1      	b.n	8000488 <d_number.isra.0+0x14>
 80004c4:	2300      	movs	r3, #0
 80004c6:	e7f0      	b.n	80004aa <d_number.isra.0+0x36>

080004c8 <d_number_component>:
 80004c8:	6943      	ldr	r3, [r0, #20]
 80004ca:	6982      	ldr	r2, [r0, #24]
 80004cc:	4293      	cmp	r3, r2
 80004ce:	b510      	push	{r4, lr}
 80004d0:	da0f      	bge.n	80004f2 <d_number_component+0x2a>
 80004d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004d6:	6901      	ldr	r1, [r0, #16]
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	3301      	adds	r3, #1
 80004dc:	188c      	adds	r4, r1, r2
 80004de:	6143      	str	r3, [r0, #20]
 80004e0:	d005      	beq.n	80004ee <d_number_component+0x26>
 80004e2:	2341      	movs	r3, #65	; 0x41
 80004e4:	300c      	adds	r0, #12
 80004e6:	548b      	strb	r3, [r1, r2]
 80004e8:	f7ff ffc4 	bl	8000474 <d_number.isra.0>
 80004ec:	6060      	str	r0, [r4, #4]
 80004ee:	4620      	mov	r0, r4
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	4620      	mov	r0, r4
 80004f6:	bd10      	pop	{r4, pc}

080004f8 <d_compact_number>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	68c3      	ldr	r3, [r0, #12]
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2a5f      	cmp	r2, #95	; 0x5f
 8000500:	4604      	mov	r4, r0
 8000502:	d00d      	beq.n	8000520 <d_compact_number+0x28>
 8000504:	2a6e      	cmp	r2, #110	; 0x6e
 8000506:	d00f      	beq.n	8000528 <d_compact_number+0x30>
 8000508:	300c      	adds	r0, #12
 800050a:	f7ff ffb3 	bl	8000474 <d_number.isra.0>
 800050e:	3001      	adds	r0, #1
 8000510:	d40a      	bmi.n	8000528 <d_compact_number+0x30>
 8000512:	68e3      	ldr	r3, [r4, #12]
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	2a5f      	cmp	r2, #95	; 0x5f
 8000518:	d106      	bne.n	8000528 <d_compact_number+0x30>
 800051a:	3301      	adds	r3, #1
 800051c:	60e3      	str	r3, [r4, #12]
 800051e:	bd10      	pop	{r4, pc}
 8000520:	3301      	adds	r3, #1
 8000522:	2000      	movs	r0, #0
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	bd10      	pop	{r4, pc}
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	bd10      	pop	{r4, pc}
 800052e:	bf00      	nop

08000530 <d_template_param>:
 8000530:	b538      	push	{r3, r4, r5, lr}
 8000532:	68c3      	ldr	r3, [r0, #12]
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	2a54      	cmp	r2, #84	; 0x54
 8000538:	d001      	beq.n	800053e <d_template_param+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd38      	pop	{r3, r4, r5, pc}
 800053e:	3301      	adds	r3, #1
 8000540:	60c3      	str	r3, [r0, #12]
 8000542:	4604      	mov	r4, r0
 8000544:	f7ff ffd8 	bl	80004f8 <d_compact_number>
 8000548:	1e05      	subs	r5, r0, #0
 800054a:	dbf6      	blt.n	800053a <d_template_param+0xa>
 800054c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800054e:	6963      	ldr	r3, [r4, #20]
 8000550:	69a1      	ldr	r1, [r4, #24]
 8000552:	3201      	adds	r2, #1
 8000554:	428b      	cmp	r3, r1
 8000556:	62a2      	str	r2, [r4, #40]	; 0x28
 8000558:	daef      	bge.n	800053a <d_template_param+0xa>
 800055a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800055e:	6921      	ldr	r1, [r4, #16]
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	3301      	adds	r3, #1
 8000564:	1888      	adds	r0, r1, r2
 8000566:	6163      	str	r3, [r4, #20]
 8000568:	d002      	beq.n	8000570 <d_template_param+0x40>
 800056a:	2305      	movs	r3, #5
 800056c:	548b      	strb	r3, [r1, r2]
 800056e:	6045      	str	r5, [r0, #4]
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop

08000574 <d_source_name>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	300c      	adds	r0, #12
 800057a:	f7ff ff7b 	bl	8000474 <d_number.isra.0>
 800057e:	1e06      	subs	r6, r0, #0
 8000580:	dd4d      	ble.n	800061e <d_source_name+0xaa>
 8000582:	68e5      	ldr	r5, [r4, #12]
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	1b5b      	subs	r3, r3, r5
 8000588:	429e      	cmp	r6, r3
 800058a:	dc2b      	bgt.n	80005e4 <d_source_name+0x70>
 800058c:	68a2      	ldr	r2, [r4, #8]
 800058e:	19ab      	adds	r3, r5, r6
 8000590:	0752      	lsls	r2, r2, #29
 8000592:	60e3      	str	r3, [r4, #12]
 8000594:	d504      	bpl.n	80005a0 <d_source_name+0x2c>
 8000596:	5daa      	ldrb	r2, [r5, r6]
 8000598:	2a24      	cmp	r2, #36	; 0x24
 800059a:	bf04      	itt	eq
 800059c:	3301      	addeq	r3, #1
 800059e:	60e3      	streq	r3, [r4, #12]
 80005a0:	2e09      	cmp	r6, #9
 80005a2:	dd0c      	ble.n	80005be <d_source_name+0x4a>
 80005a4:	2208      	movs	r2, #8
 80005a6:	491f      	ldr	r1, [pc, #124]	; (8000624 <d_source_name+0xb0>)
 80005a8:	4628      	mov	r0, r5
 80005aa:	f011 f8e3 	bl	8011774 <memcmp>
 80005ae:	b930      	cbnz	r0, 80005be <d_source_name+0x4a>
 80005b0:	7a2b      	ldrb	r3, [r5, #8]
 80005b2:	2b2e      	cmp	r3, #46	; 0x2e
 80005b4:	d019      	beq.n	80005ea <d_source_name+0x76>
 80005b6:	2b5f      	cmp	r3, #95	; 0x5f
 80005b8:	d017      	beq.n	80005ea <d_source_name+0x76>
 80005ba:	2b24      	cmp	r3, #36	; 0x24
 80005bc:	d015      	beq.n	80005ea <d_source_name+0x76>
 80005be:	6963      	ldr	r3, [r4, #20]
 80005c0:	69a2      	ldr	r2, [r4, #24]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	da0e      	bge.n	80005e4 <d_source_name+0x70>
 80005c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005ca:	6921      	ldr	r1, [r4, #16]
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	3301      	adds	r3, #1
 80005d0:	1888      	adds	r0, r1, r2
 80005d2:	6163      	str	r3, [r4, #20]
 80005d4:	d006      	beq.n	80005e4 <d_source_name+0x70>
 80005d6:	b12d      	cbz	r5, 80005e4 <d_source_name+0x70>
 80005d8:	2300      	movs	r3, #0
 80005da:	548b      	strb	r3, [r1, r2]
 80005dc:	6045      	str	r5, [r0, #4]
 80005de:	6086      	str	r6, [r0, #8]
 80005e0:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2000      	movs	r0, #0
 80005e6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	7a6b      	ldrb	r3, [r5, #9]
 80005ec:	2b4e      	cmp	r3, #78	; 0x4e
 80005ee:	d1e6      	bne.n	80005be <d_source_name+0x4a>
 80005f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005f2:	6962      	ldr	r2, [r4, #20]
 80005f4:	69a1      	ldr	r1, [r4, #24]
 80005f6:	3316      	adds	r3, #22
 80005f8:	1b9e      	subs	r6, r3, r6
 80005fa:	428a      	cmp	r2, r1
 80005fc:	6326      	str	r6, [r4, #48]	; 0x30
 80005fe:	daf1      	bge.n	80005e4 <d_source_name+0x70>
 8000600:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000604:	6921      	ldr	r1, [r4, #16]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3201      	adds	r2, #1
 800060a:	18c8      	adds	r0, r1, r3
 800060c:	6162      	str	r2, [r4, #20]
 800060e:	d0ea      	beq.n	80005e6 <d_source_name+0x72>
 8000610:	2500      	movs	r5, #0
 8000612:	54cd      	strb	r5, [r1, r3]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <d_source_name+0xb4>)
 8000616:	6042      	str	r2, [r0, #4]
 8000618:	2315      	movs	r3, #21
 800061a:	6083      	str	r3, [r0, #8]
 800061c:	e7e3      	b.n	80005e6 <d_source_name+0x72>
 800061e:	2000      	movs	r0, #0
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	bf00      	nop
 8000624:	08016d2c 	.word	0x08016d2c
 8000628:	08016d38 	.word	0x08016d38

0800062c <d_abi_tags>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	68c3      	ldr	r3, [r0, #12]
 8000630:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	2a42      	cmp	r2, #66	; 0x42
 8000636:	4604      	mov	r4, r0
 8000638:	460d      	mov	r5, r1
 800063a:	d10f      	bne.n	800065c <d_abi_tags+0x30>
 800063c:	3301      	adds	r3, #1
 800063e:	60e3      	str	r3, [r4, #12]
 8000640:	4620      	mov	r0, r4
 8000642:	f7ff ff97 	bl	8000574 <d_source_name>
 8000646:	462a      	mov	r2, r5
 8000648:	4603      	mov	r3, r0
 800064a:	214b      	movs	r1, #75	; 0x4b
 800064c:	4620      	mov	r0, r4
 800064e:	f7ff fdbf 	bl	80001d0 <d_make_comp>
 8000652:	68e3      	ldr	r3, [r4, #12]
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	2a42      	cmp	r2, #66	; 0x42
 8000658:	4605      	mov	r5, r0
 800065a:	d0ef      	beq.n	800063c <d_abi_tags+0x10>
 800065c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800065e:	4628      	mov	r0, r5
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	bf00      	nop

08000664 <d_substitution>:
 8000664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000668:	4605      	mov	r5, r0
 800066a:	68c0      	ldr	r0, [r0, #12]
 800066c:	7803      	ldrb	r3, [r0, #0]
 800066e:	2b53      	cmp	r3, #83	; 0x53
 8000670:	d002      	beq.n	8000678 <d_substitution+0x14>
 8000672:	2000      	movs	r0, #0
 8000674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000678:	1c43      	adds	r3, r0, #1
 800067a:	60eb      	str	r3, [r5, #12]
 800067c:	7842      	ldrb	r2, [r0, #1]
 800067e:	b1a2      	cbz	r2, 80006aa <d_substitution+0x46>
 8000680:	1c83      	adds	r3, r0, #2
 8000682:	60eb      	str	r3, [r5, #12]
 8000684:	7842      	ldrb	r2, [r0, #1]
 8000686:	2a5f      	cmp	r2, #95	; 0x5f
 8000688:	d15a      	bne.n	8000740 <d_substitution+0xdc>
 800068a:	2300      	movs	r3, #0
 800068c:	6a2a      	ldr	r2, [r5, #32]
 800068e:	4293      	cmp	r3, r2
 8000690:	d2ef      	bcs.n	8000672 <d_substitution+0xe>
 8000692:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000694:	69e9      	ldr	r1, [r5, #28]
 8000696:	3201      	adds	r2, #1
 8000698:	62aa      	str	r2, [r5, #40]	; 0x28
 800069a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80006a6:	2b19      	cmp	r3, #25
 80006a8:	d94f      	bls.n	800074a <d_substitution+0xe6>
 80006aa:	68ab      	ldr	r3, [r5, #8]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2401      	movne	r4, #1
 80006b6:	2400      	moveq	r4, #0
 80006b8:	d101      	bne.n	80006be <d_substitution+0x5a>
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d169      	bne.n	8000792 <d_substitution+0x12e>
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <d_substitution+0x174>)
 80006c0:	2174      	movs	r1, #116	; 0x74
 80006c2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80006c6:	e003      	b.n	80006d0 <d_substitution+0x6c>
 80006c8:	331c      	adds	r3, #28
 80006ca:	4283      	cmp	r3, r0
 80006cc:	d2d1      	bcs.n	8000672 <d_substitution+0xe>
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	428a      	cmp	r2, r1
 80006d2:	d1f9      	bne.n	80006c8 <d_substitution+0x64>
 80006d4:	695e      	ldr	r6, [r3, #20]
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d07b      	beq.n	80007d2 <d_substitution+0x16e>
 80006da:	696a      	ldr	r2, [r5, #20]
 80006dc:	69a9      	ldr	r1, [r5, #24]
 80006de:	428a      	cmp	r2, r1
 80006e0:	da63      	bge.n	80007aa <d_substitution+0x146>
 80006e2:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 80006e6:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80006ea:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80006ee:	00bf      	lsls	r7, r7, #2
 80006f0:	3201      	adds	r2, #1
 80006f2:	eb1e 0007 	adds.w	r0, lr, r7
 80006f6:	616a      	str	r2, [r5, #20]
 80006f8:	d006      	beq.n	8000708 <d_substitution+0xa4>
 80006fa:	f04f 0c18 	mov.w	ip, #24
 80006fe:	f80e c007 	strb.w	ip, [lr, r7]
 8000702:	6046      	str	r6, [r0, #4]
 8000704:	f8c0 8008 	str.w	r8, [r0, #8]
 8000708:	62e8      	str	r0, [r5, #44]	; 0x2c
 800070a:	2c00      	cmp	r4, #0
 800070c:	d04a      	beq.n	80007a4 <d_substitution+0x140>
 800070e:	68de      	ldr	r6, [r3, #12]
 8000710:	691c      	ldr	r4, [r3, #16]
 8000712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000714:	4291      	cmp	r1, r2
 8000716:	4423      	add	r3, r4
 8000718:	632b      	str	r3, [r5, #48]	; 0x30
 800071a:	dd41      	ble.n	80007a0 <d_substitution+0x13c>
 800071c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000720:	6929      	ldr	r1, [r5, #16]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3201      	adds	r2, #1
 8000726:	18c8      	adds	r0, r1, r3
 8000728:	616a      	str	r2, [r5, #20]
 800072a:	d003      	beq.n	8000734 <d_substitution+0xd0>
 800072c:	2218      	movs	r2, #24
 800072e:	54ca      	strb	r2, [r1, r3]
 8000730:	6046      	str	r6, [r0, #4]
 8000732:	6084      	str	r4, [r0, #8]
 8000734:	68eb      	ldr	r3, [r5, #12]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b42      	cmp	r3, #66	; 0x42
 800073a:	d038      	beq.n	80007ae <d_substitution+0x14a>
 800073c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000740:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000744:	b2e3      	uxtb	r3, r4
 8000746:	2b09      	cmp	r3, #9
 8000748:	d8ab      	bhi.n	80006a2 <d_substitution+0x3e>
 800074a:	2100      	movs	r1, #0
 800074c:	e00d      	b.n	800076a <d_substitution+0x106>
 800074e:	3b30      	subs	r3, #48	; 0x30
 8000750:	4299      	cmp	r1, r3
 8000752:	d88e      	bhi.n	8000672 <d_substitution+0xe>
 8000754:	68e9      	ldr	r1, [r5, #12]
 8000756:	780a      	ldrb	r2, [r1, #0]
 8000758:	1c48      	adds	r0, r1, #1
 800075a:	b11a      	cbz	r2, 8000764 <d_substitution+0x100>
 800075c:	60e8      	str	r0, [r5, #12]
 800075e:	780a      	ldrb	r2, [r1, #0]
 8000760:	2a5f      	cmp	r2, #95	; 0x5f
 8000762:	d014      	beq.n	800078e <d_substitution+0x12a>
 8000764:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000768:	4619      	mov	r1, r3
 800076a:	b2e4      	uxtb	r4, r4
 800076c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000770:	2c09      	cmp	r4, #9
 8000772:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8000776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800077a:	d9e8      	bls.n	800074e <d_substitution+0xea>
 800077c:	2819      	cmp	r0, #25
 800077e:	f63f af78 	bhi.w	8000672 <d_substitution+0xe>
 8000782:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800078a:	3b37      	subs	r3, #55	; 0x37
 800078c:	e7e0      	b.n	8000750 <d_substitution+0xec>
 800078e:	3301      	adds	r3, #1
 8000790:	e77c      	b.n	800068c <d_substitution+0x28>
 8000792:	68eb      	ldr	r3, [r5, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b43      	subs	r3, #67	; 0x43
 8000798:	2b01      	cmp	r3, #1
 800079a:	bf98      	it	ls
 800079c:	2401      	movls	r4, #1
 800079e:	e78e      	b.n	80006be <d_substitution+0x5a>
 80007a0:	2000      	movs	r0, #0
 80007a2:	e7c7      	b.n	8000734 <d_substitution+0xd0>
 80007a4:	685e      	ldr	r6, [r3, #4]
 80007a6:	689c      	ldr	r4, [r3, #8]
 80007a8:	e7b3      	b.n	8000712 <d_substitution+0xae>
 80007aa:	2000      	movs	r0, #0
 80007ac:	e7ac      	b.n	8000708 <d_substitution+0xa4>
 80007ae:	4601      	mov	r1, r0
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff3b 	bl	800062c <d_abi_tags>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	f43f af5b 	beq.w	8000672 <d_substitution+0xe>
 80007bc:	6a2b      	ldr	r3, [r5, #32]
 80007be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007c0:	4293      	cmp	r3, r2
 80007c2:	dabb      	bge.n	800073c <d_substitution+0xd8>
 80007c4:	69e9      	ldr	r1, [r5, #28]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80007cc:	622a      	str	r2, [r5, #32]
 80007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007d2:	69a9      	ldr	r1, [r5, #24]
 80007d4:	696a      	ldr	r2, [r5, #20]
 80007d6:	e798      	b.n	800070a <d_substitution+0xa6>
 80007d8:	08015df0 	.word	0x08015df0

080007dc <d_call_offset>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	b929      	cbnz	r1, 80007ee <d_call_offset+0x12>
 80007e2:	68c3      	ldr	r3, [r0, #12]
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	b132      	cbz	r2, 80007f6 <d_call_offset+0x1a>
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	60c2      	str	r2, [r0, #12]
 80007ec:	7819      	ldrb	r1, [r3, #0]
 80007ee:	2968      	cmp	r1, #104	; 0x68
 80007f0:	d019      	beq.n	8000826 <d_call_offset+0x4a>
 80007f2:	2976      	cmp	r1, #118	; 0x76
 80007f4:	d001      	beq.n	80007fa <d_call_offset+0x1e>
 80007f6:	2000      	movs	r0, #0
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 80007fa:	f104 050c 	add.w	r5, r4, #12
 80007fe:	4628      	mov	r0, r5
 8000800:	f7ff fe38 	bl	8000474 <d_number.isra.0>
 8000804:	68e3      	ldr	r3, [r4, #12]
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	2a5f      	cmp	r2, #95	; 0x5f
 800080a:	d1f4      	bne.n	80007f6 <d_call_offset+0x1a>
 800080c:	3301      	adds	r3, #1
 800080e:	60e3      	str	r3, [r4, #12]
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff fe2f 	bl	8000474 <d_number.isra.0>
 8000816:	68e3      	ldr	r3, [r4, #12]
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	2a5f      	cmp	r2, #95	; 0x5f
 800081c:	d1eb      	bne.n	80007f6 <d_call_offset+0x1a>
 800081e:	3301      	adds	r3, #1
 8000820:	60e3      	str	r3, [r4, #12]
 8000822:	2001      	movs	r0, #1
 8000824:	bd38      	pop	{r3, r4, r5, pc}
 8000826:	f104 000c 	add.w	r0, r4, #12
 800082a:	f7ff fe23 	bl	8000474 <d_number.isra.0>
 800082e:	e7f2      	b.n	8000816 <d_call_offset+0x3a>

08000830 <d_lookup_template_argument.isra.6>:
 8000830:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8000834:	b19b      	cbz	r3, 800085e <d_lookup_template_argument.isra.6+0x2e>
 8000836:	680a      	ldr	r2, [r1, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2a00      	cmp	r2, #0
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	db09      	blt.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000840:	b923      	cbnz	r3, 800084c <d_lookup_template_argument.isra.6+0x1c>
 8000842:	e007      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000844:	b142      	cbz	r2, 8000858 <d_lookup_template_argument.isra.6+0x28>
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3a01      	subs	r2, #1
 800084a:	b11b      	cbz	r3, 8000854 <d_lookup_template_argument.isra.6+0x24>
 800084c:	7819      	ldrb	r1, [r3, #0]
 800084e:	292f      	cmp	r1, #47	; 0x2f
 8000850:	d0f8      	beq.n	8000844 <d_lookup_template_argument.isra.6+0x14>
 8000852:	2300      	movs	r3, #0
 8000854:	4618      	mov	r0, r3
 8000856:	4770      	bx	lr
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4618      	mov	r0, r3
 800085c:	4770      	bx	lr
 800085e:	2201      	movs	r2, #1
 8000860:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000864:	e7f6      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000866:	bf00      	nop

08000868 <d_find_pack>:
 8000868:	2900      	cmp	r1, #0
 800086a:	d041      	beq.n	80008f0 <d_find_pack+0x88>
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4605      	mov	r5, r0
 8000870:	460c      	mov	r4, r1
 8000872:	7823      	ldrb	r3, [r4, #0]
 8000874:	2b4b      	cmp	r3, #75	; 0x4b
 8000876:	d827      	bhi.n	80008c8 <d_find_pack+0x60>
 8000878:	e8df f003 	tbb	[pc, r3]
 800087c:	2626262e 	.word	0x2626262e
 8000880:	2b2e3026 	.word	0x2b2e3026
 8000884:	2626262b 	.word	0x2626262b
 8000888:	26262626 	.word	0x26262626
 800088c:	26262626 	.word	0x26262626
 8000890:	26262626 	.word	0x26262626
 8000894:	2626262e 	.word	0x2626262e
 8000898:	26262626 	.word	0x26262626
 800089c:	26262626 	.word	0x26262626
 80008a0:	2e262626 	.word	0x2e262626
 80008a4:	26262626 	.word	0x26262626
 80008a8:	2626262e 	.word	0x2626262e
 80008ac:	262b2e26 	.word	0x262b2e26
 80008b0:	26262626 	.word	0x26262626
 80008b4:	26262626 	.word	0x26262626
 80008b8:	26262626 	.word	0x26262626
 80008bc:	26262e2e 	.word	0x26262e2e
 80008c0:	2e2e2e26 	.word	0x2e2e2e26
 80008c4:	2e2e2626 	.word	0x2e2e2626
 80008c8:	6861      	ldr	r1, [r4, #4]
 80008ca:	4628      	mov	r0, r5
 80008cc:	f7ff ffcc 	bl	8000868 <d_find_pack>
 80008d0:	b918      	cbnz	r0, 80008da <d_find_pack+0x72>
 80008d2:	68a4      	ldr	r4, [r4, #8]
 80008d4:	2c00      	cmp	r4, #0
 80008d6:	d1cc      	bne.n	8000872 <d_find_pack+0xa>
 80008d8:	2000      	movs	r0, #0
 80008da:	bd38      	pop	{r3, r4, r5, pc}
 80008dc:	1d21      	adds	r1, r4, #4
 80008de:	4628      	mov	r0, r5
 80008e0:	f7ff ffa6 	bl	8000830 <d_lookup_template_argument.isra.6>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0f7      	beq.n	80008d8 <d_find_pack+0x70>
 80008e8:	7803      	ldrb	r3, [r0, #0]
 80008ea:	2b2f      	cmp	r3, #47	; 0x2f
 80008ec:	d1f4      	bne.n	80008d8 <d_find_pack+0x70>
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <d_growable_string_callback_adapter>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4615      	mov	r5, r2
 80008f8:	6852      	ldr	r2, [r2, #4]
 80008fa:	68ac      	ldr	r4, [r5, #8]
 80008fc:	1c4b      	adds	r3, r1, #1
 80008fe:	4413      	add	r3, r2
 8000900:	42a3      	cmp	r3, r4
 8000902:	b083      	sub	sp, #12
 8000904:	460e      	mov	r6, r1
 8000906:	4607      	mov	r7, r0
 8000908:	d813      	bhi.n	8000932 <d_growable_string_callback_adapter+0x3e>
 800090a:	68ec      	ldr	r4, [r5, #12]
 800090c:	b10c      	cbz	r4, 8000912 <d_growable_string_callback_adapter+0x1e>
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000912:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000916:	4632      	mov	r2, r6
 8000918:	4639      	mov	r1, r7
 800091a:	4418      	add	r0, r3
 800091c:	f010 ff39 	bl	8011792 <memcpy>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	686a      	ldr	r2, [r5, #4]
 8000924:	4433      	add	r3, r6
 8000926:	549c      	strb	r4, [r3, r2]
 8000928:	686b      	ldr	r3, [r5, #4]
 800092a:	441e      	add	r6, r3
 800092c:	606e      	str	r6, [r5, #4]
 800092e:	b003      	add	sp, #12
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	68ea      	ldr	r2, [r5, #12]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1ea      	bne.n	800090e <d_growable_string_callback_adapter+0x1a>
 8000938:	b91c      	cbnz	r4, 8000942 <d_growable_string_callback_adapter+0x4e>
 800093a:	2b02      	cmp	r3, #2
 800093c:	f04f 0402 	mov.w	r4, #2
 8000940:	d902      	bls.n	8000948 <d_growable_string_callback_adapter+0x54>
 8000942:	0064      	lsls	r4, r4, #1
 8000944:	42a3      	cmp	r3, r4
 8000946:	d8fc      	bhi.n	8000942 <d_growable_string_callback_adapter+0x4e>
 8000948:	4621      	mov	r1, r4
 800094a:	6828      	ldr	r0, [r5, #0]
 800094c:	f011 f836 	bl	80119bc <realloc>
 8000950:	b110      	cbz	r0, 8000958 <d_growable_string_callback_adapter+0x64>
 8000952:	6028      	str	r0, [r5, #0]
 8000954:	60ac      	str	r4, [r5, #8]
 8000956:	e7d8      	b.n	800090a <d_growable_string_callback_adapter+0x16>
 8000958:	9001      	str	r0, [sp, #4]
 800095a:	6828      	ldr	r0, [r5, #0]
 800095c:	f010 fce2 	bl	8011324 <free>
 8000960:	9b01      	ldr	r3, [sp, #4]
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	606b      	str	r3, [r5, #4]
 8000968:	60ab      	str	r3, [r5, #8]
 800096a:	60ea      	str	r2, [r5, #12]
 800096c:	e7cf      	b.n	800090e <d_growable_string_callback_adapter+0x1a>
 800096e:	bf00      	nop

08000970 <d_append_num>:
 8000970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000974:	b088      	sub	sp, #32
 8000976:	460a      	mov	r2, r1
 8000978:	4604      	mov	r4, r0
 800097a:	491b      	ldr	r1, [pc, #108]	; (80009e8 <d_append_num+0x78>)
 800097c:	a801      	add	r0, sp, #4
 800097e:	f011 f9f9 	bl	8011d74 <sprintf>
 8000982:	a801      	add	r0, sp, #4
 8000984:	f005 ffd6 	bl	8006934 <strlen>
 8000988:	b350      	cbz	r0, 80009e0 <d_append_num+0x70>
 800098a:	ad01      	add	r5, sp, #4
 800098c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000990:	182f      	adds	r7, r5, r0
 8000992:	f04f 0800 	mov.w	r8, #0
 8000996:	e009      	b.n	80009ac <d_append_num+0x3c>
 8000998:	460b      	mov	r3, r1
 800099a:	42bd      	cmp	r5, r7
 800099c:	f101 0101 	add.w	r1, r1, #1
 80009a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009a4:	54e6      	strb	r6, [r4, r3]
 80009a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009aa:	d019      	beq.n	80009e0 <d_append_num+0x70>
 80009ac:	29ff      	cmp	r1, #255	; 0xff
 80009ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80009b2:	d1f1      	bne.n	8000998 <d_append_num+0x28>
 80009b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80009b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80009bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80009c0:	4620      	mov	r0, r4
 80009c2:	4798      	blx	r3
 80009c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80009c8:	3301      	adds	r3, #1
 80009ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009ce:	2300      	movs	r3, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	42bd      	cmp	r5, r7
 80009d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009d8:	54e6      	strb	r6, [r4, r3]
 80009da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009de:	d1e5      	bne.n	80009ac <d_append_num+0x3c>
 80009e0:	b008      	add	sp, #32
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e6:	bf00      	nop
 80009e8:	08016d50 	.word	0x08016d50

080009ec <d_exprlist>:
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	68c3      	ldr	r3, [r0, #12]
 80009f2:	781d      	ldrb	r5, [r3, #0]
 80009f4:	b083      	sub	sp, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	428d      	cmp	r5, r1
 80009fa:	4604      	mov	r4, r0
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	f000 81c6 	beq.w	8000d8e <d_exprlist+0x3a2>
 8000a02:	4688      	mov	r8, r1
 8000a04:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000ea4 <d_exprlist+0x4b8>
 8000a08:	ae01      	add	r6, sp, #4
 8000a0a:	e023      	b.n	8000a54 <d_exprlist+0x68>
 8000a0c:	2a66      	cmp	r2, #102	; 0x66
 8000a0e:	d04c      	beq.n	8000aaa <d_exprlist+0xbe>
 8000a10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a14:	2909      	cmp	r1, #9
 8000a16:	f200 8217 	bhi.w	8000e48 <d_exprlist+0x45c>
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f001 fb10 	bl	8002040 <d_unqualified_name>
 8000a20:	4605      	mov	r5, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f000 8170 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a28:	68e3      	ldr	r3, [r4, #12]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b49      	cmp	r3, #73	; 0x49
 8000a2e:	f000 8092 	beq.w	8000b56 <d_exprlist+0x16a>
 8000a32:	6367      	str	r7, [r4, #52]	; 0x34
 8000a34:	462a      	mov	r2, r5
 8000a36:	2300      	movs	r3, #0
 8000a38:	212e      	movs	r1, #46	; 0x2e
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fbc8 	bl	80001d0 <d_make_comp>
 8000a40:	6030      	str	r0, [r6, #0]
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d05b      	beq.n	8000afe <d_exprlist+0x112>
 8000a46:	68e3      	ldr	r3, [r4, #12]
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4542      	cmp	r2, r8
 8000a4c:	f100 0608 	add.w	r6, r0, #8
 8000a50:	f000 8107 	beq.w	8000c62 <d_exprlist+0x276>
 8000a54:	2501      	movs	r5, #1
 8000a56:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a58:	6365      	str	r5, [r4, #52]	; 0x34
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	2a4c      	cmp	r2, #76	; 0x4c
 8000a5e:	d047      	beq.n	8000af0 <d_exprlist+0x104>
 8000a60:	2a54      	cmp	r2, #84	; 0x54
 8000a62:	d051      	beq.n	8000b08 <d_exprlist+0x11c>
 8000a64:	2a73      	cmp	r2, #115	; 0x73
 8000a66:	d1d1      	bne.n	8000a0c <d_exprlist+0x20>
 8000a68:	785a      	ldrb	r2, [r3, #1]
 8000a6a:	2a72      	cmp	r2, #114	; 0x72
 8000a6c:	f000 80e2 	beq.w	8000c34 <d_exprlist+0x248>
 8000a70:	2a70      	cmp	r2, #112	; 0x70
 8000a72:	f000 80fd 	beq.w	8000c70 <d_exprlist+0x284>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f001 fa22 	bl	8001ec0 <d_operator_name>
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f000 8142 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a84:	782b      	ldrb	r3, [r5, #0]
 8000a86:	2b31      	cmp	r3, #49	; 0x31
 8000a88:	d043      	beq.n	8000b12 <d_exprlist+0x126>
 8000a8a:	2b32      	cmp	r3, #50	; 0x32
 8000a8c:	d05c      	beq.n	8000b48 <d_exprlist+0x15c>
 8000a8e:	2b33      	cmp	r3, #51	; 0x33
 8000a90:	d17b      	bne.n	8000b8a <d_exprlist+0x19e>
 8000a92:	68e3      	ldr	r3, [r4, #12]
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	2a5f      	cmp	r2, #95	; 0x5f
 8000a98:	f040 80c1 	bne.w	8000c1e <d_exprlist+0x232>
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60e3      	str	r3, [r4, #12]
 8000aa0:	2145      	movs	r1, #69	; 0x45
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff ffa2 	bl	80009ec <d_exprlist>
 8000aa8:	e0bc      	b.n	8000c24 <d_exprlist+0x238>
 8000aaa:	785a      	ldrb	r2, [r3, #1]
 8000aac:	2a70      	cmp	r2, #112	; 0x70
 8000aae:	d1e2      	bne.n	8000a76 <d_exprlist+0x8a>
 8000ab0:	1c9a      	adds	r2, r3, #2
 8000ab2:	60e2      	str	r2, [r4, #12]
 8000ab4:	789a      	ldrb	r2, [r3, #2]
 8000ab6:	2a54      	cmp	r2, #84	; 0x54
 8000ab8:	d069      	beq.n	8000b8e <d_exprlist+0x1a2>
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fd1c 	bl	80004f8 <d_compact_number>
 8000ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d060      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d05e      	beq.n	8000b8a <d_exprlist+0x19e>
 8000acc:	3001      	adds	r0, #1
 8000ace:	6963      	ldr	r3, [r4, #20]
 8000ad0:	69a2      	ldr	r2, [r4, #24]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	da59      	bge.n	8000b8a <d_exprlist+0x19e>
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ade:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000ae2:	6161      	str	r1, [r4, #20]
 8000ae4:	d051      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000aec:	6068      	str	r0, [r5, #4]
 8000aee:	e7a0      	b.n	8000a32 <d_exprlist+0x46>
 8000af0:	4620      	mov	r0, r4
 8000af2:	f001 fef3 	bl	80028dc <d_expr_primary>
 8000af6:	4605      	mov	r5, r0
 8000af8:	6367      	str	r7, [r4, #52]	; 0x34
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d19a      	bne.n	8000a34 <d_exprlist+0x48>
 8000afe:	2500      	movs	r5, #0
 8000b00:	4628      	mov	r0, r5
 8000b02:	b003      	add	sp, #12
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fd11 	bl	8000530 <d_template_param>
 8000b0e:	4605      	mov	r5, r0
 8000b10:	e7f2      	b.n	8000af8 <d_exprlist+0x10c>
 8000b12:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b18:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b1c:	f8db a000 	ldr.w	sl, [fp]
 8000b20:	3a02      	subs	r2, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	6323      	str	r3, [r4, #48]	; 0x30
 8000b26:	4650      	mov	r0, sl
 8000b28:	4649      	mov	r1, r9
 8000b2a:	f005 fef9 	bl	8006920 <strcmp>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f000 80e6 	beq.w	8000d00 <d_exprlist+0x314>
 8000b34:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d826      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b40:	0135002b 	.word	0x0135002b
 8000b44:	00a50033 	.word	0x00a50033
 8000b48:	686b      	ldr	r3, [r5, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d81d      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b4e:	e8df f003 	tbb	[pc, r3]
 8000b52:	6622      	.short	0x6622
 8000b54:	1c1c      	.short	0x1c1c
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 fc04 	bl	8001364 <d_template_args>
 8000b5c:	462a      	mov	r2, r5
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff fb34 	bl	80001d0 <d_make_comp>
 8000b68:	4605      	mov	r5, r0
 8000b6a:	e7c5      	b.n	8000af8 <d_exprlist+0x10c>
 8000b6c:	2a74      	cmp	r2, #116	; 0x74
 8000b6e:	d182      	bne.n	8000a76 <d_exprlist+0x8a>
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b6c      	cmp	r3, #108	; 0x6c
 8000b74:	f47f af7f 	bne.w	8000a76 <d_exprlist+0x8a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f000 fdb9 	bl	80016f0 <d_type>
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	785a      	ldrb	r2, [r3, #1]
 8000b82:	4605      	mov	r5, r0
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	f040 8169 	bne.w	8000e5c <d_exprlist+0x470>
 8000b8a:	6367      	str	r7, [r4, #52]	; 0x34
 8000b8c:	e7b7      	b.n	8000afe <d_exprlist+0x112>
 8000b8e:	3303      	adds	r3, #3
 8000b90:	60e3      	str	r3, [r4, #12]
 8000b92:	2000      	movs	r0, #0
 8000b94:	e79b      	b.n	8000ace <d_exprlist+0xe2>
 8000b96:	462a      	mov	r2, r5
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2135      	movs	r1, #53	; 0x35
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fb17 	bl	80001d0 <d_make_comp>
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	e7a8      	b.n	8000af8 <d_exprlist+0x10c>
 8000ba6:	f1ba 0f00 	cmp.w	sl, #0
 8000baa:	d0ee      	beq.n	8000b8a <d_exprlist+0x19e>
 8000bac:	686b      	ldr	r3, [r5, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	785a      	ldrb	r2, [r3, #1]
 8000bb2:	2a63      	cmp	r2, #99	; 0x63
 8000bb4:	f000 80d2 	beq.w	8000d5c <d_exprlist+0x370>
 8000bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbc:	2b66      	cmp	r3, #102	; 0x66
 8000bbe:	f000 80ef 	beq.w	8000da0 <d_exprlist+0x3b4>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f000 f970 	bl	8000ea8 <d_expression_1>
 8000bc8:	4683      	mov	fp, r0
 8000bca:	49b1      	ldr	r1, [pc, #708]	; (8000e90 <d_exprlist+0x4a4>)
 8000bcc:	4650      	mov	r0, sl
 8000bce:	f005 fea7 	bl	8006920 <strcmp>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f000 809d 	beq.w	8000d12 <d_exprlist+0x326>
 8000bd8:	49ae      	ldr	r1, [pc, #696]	; (8000e94 <d_exprlist+0x4a8>)
 8000bda:	4650      	mov	r0, sl
 8000bdc:	f005 fea0 	bl	8006920 <strcmp>
 8000be0:	b130      	cbz	r0, 8000bf0 <d_exprlist+0x204>
 8000be2:	4650      	mov	r0, sl
 8000be4:	49ac      	ldr	r1, [pc, #688]	; (8000e98 <d_exprlist+0x4ac>)
 8000be6:	f005 fe9b 	bl	8006920 <strcmp>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	f040 8083 	bne.w	8000cf6 <d_exprlist+0x30a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f001 fa25 	bl	8002040 <d_unqualified_name>
 8000bf6:	68e3      	ldr	r3, [r4, #12]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b49      	cmp	r3, #73	; 0x49
 8000bfc:	4682      	mov	sl, r0
 8000bfe:	f000 80e9 	beq.w	8000dd4 <d_exprlist+0x3e8>
 8000c02:	4653      	mov	r3, sl
 8000c04:	465a      	mov	r2, fp
 8000c06:	2138      	movs	r1, #56	; 0x38
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fae1 	bl	80001d0 <d_make_comp>
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4603      	mov	r3, r0
 8000c12:	2137      	movs	r1, #55	; 0x37
 8000c14:	4620      	mov	r0, r4
 8000c16:	f7ff fadb 	bl	80001d0 <d_make_comp>
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	e76c      	b.n	8000af8 <d_exprlist+0x10c>
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 f942 	bl	8000ea8 <d_expression_1>
 8000c24:	4603      	mov	r3, r0
 8000c26:	462a      	mov	r2, r5
 8000c28:	2136      	movs	r1, #54	; 0x36
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fad0 	bl	80001d0 <d_make_comp>
 8000c30:	4605      	mov	r5, r0
 8000c32:	e761      	b.n	8000af8 <d_exprlist+0x10c>
 8000c34:	3302      	adds	r3, #2
 8000c36:	60e3      	str	r3, [r4, #12]
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f000 fd59 	bl	80016f0 <d_type>
 8000c3e:	4682      	mov	sl, r0
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 f9fd 	bl	8002040 <d_unqualified_name>
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b49      	cmp	r3, #73	; 0x49
 8000c4c:	4683      	mov	fp, r0
 8000c4e:	f000 8093 	beq.w	8000d78 <d_exprlist+0x38c>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4629      	mov	r1, r5
 8000c56:	4652      	mov	r2, sl
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fab9 	bl	80001d0 <d_make_comp>
 8000c5e:	4605      	mov	r5, r0
 8000c60:	e74a      	b.n	8000af8 <d_exprlist+0x10c>
 8000c62:	9d01      	ldr	r5, [sp, #4]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4628      	mov	r0, r5
 8000c68:	60e3      	str	r3, [r4, #12]
 8000c6a:	b003      	add	sp, #12
 8000c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c70:	3302      	adds	r3, #2
 8000c72:	60e3      	str	r3, [r4, #12]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f000 f917 	bl	8000ea8 <d_expression_1>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	214a      	movs	r1, #74	; 0x4a
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff faa5 	bl	80001d0 <d_make_comp>
 8000c86:	4605      	mov	r5, r0
 8000c88:	e736      	b.n	8000af8 <d_exprlist+0x10c>
 8000c8a:	f1ba 0f00 	cmp.w	sl, #0
 8000c8e:	f43f af7c 	beq.w	8000b8a <d_exprlist+0x19e>
 8000c92:	4982      	ldr	r1, [pc, #520]	; (8000e9c <d_exprlist+0x4b0>)
 8000c94:	4650      	mov	r0, sl
 8000c96:	f005 fe43 	bl	8006920 <strcmp>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d03f      	beq.n	8000d1e <d_exprlist+0x332>
 8000c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ca2:	2b66      	cmp	r3, #102	; 0x66
 8000ca4:	f000 80bd 	beq.w	8000e22 <d_exprlist+0x436>
 8000ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8000caa:	f47f af6e 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cae:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cb2:	2b77      	cmp	r3, #119	; 0x77
 8000cb4:	d002      	beq.n	8000cbc <d_exprlist+0x2d0>
 8000cb6:	2b61      	cmp	r3, #97	; 0x61
 8000cb8:	f47f af67 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cbc:	215f      	movs	r1, #95	; 0x5f
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fe94 	bl	80009ec <d_exprlist>
 8000cc4:	4682      	mov	sl, r0
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 fd12 	bl	80016f0 <d_type>
 8000ccc:	68e3      	ldr	r3, [r4, #12]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	2a45      	cmp	r2, #69	; 0x45
 8000cd2:	4683      	mov	fp, r0
 8000cd4:	f000 80a1 	beq.w	8000e1a <d_exprlist+0x42e>
 8000cd8:	2a70      	cmp	r2, #112	; 0x70
 8000cda:	f000 80a6 	beq.w	8000e2a <d_exprlist+0x43e>
 8000cde:	2a69      	cmp	r2, #105	; 0x69
 8000ce0:	f47f af53 	bne.w	8000b8a <d_exprlist+0x19e>
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ce8:	f47f af4f 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cec:	4620      	mov	r0, r4
 8000cee:	f000 f8db 	bl	8000ea8 <d_expression_1>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e01f      	b.n	8000d36 <d_exprlist+0x34a>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f000 f8d6 	bl	8000ea8 <d_expression_1>
 8000cfc:	4682      	mov	sl, r0
 8000cfe:	e780      	b.n	8000c02 <d_exprlist+0x216>
 8000d00:	4620      	mov	r0, r4
 8000d02:	f000 fcf5 	bl	80016f0 <d_type>
 8000d06:	e78d      	b.n	8000c24 <d_exprlist+0x238>
 8000d08:	4628      	mov	r0, r5
 8000d0a:	6367      	str	r7, [r4, #52]	; 0x34
 8000d0c:	b003      	add	sp, #12
 8000d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	2145      	movs	r1, #69	; 0x45
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fe69 	bl	80009ec <d_exprlist>
 8000d1a:	4682      	mov	sl, r0
 8000d1c:	e771      	b.n	8000c02 <d_exprlist+0x216>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f000 f8c2 	bl	8000ea8 <d_expression_1>
 8000d24:	4682      	mov	sl, r0
 8000d26:	4620      	mov	r0, r4
 8000d28:	f000 f8be 	bl	8000ea8 <d_expression_1>
 8000d2c:	4683      	mov	fp, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f8ba 	bl	8000ea8 <d_expression_1>
 8000d34:	4603      	mov	r3, r0
 8000d36:	465a      	mov	r2, fp
 8000d38:	213b      	movs	r1, #59	; 0x3b
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f7ff fa48 	bl	80001d0 <d_make_comp>
 8000d40:	4652      	mov	r2, sl
 8000d42:	4603      	mov	r3, r0
 8000d44:	213a      	movs	r1, #58	; 0x3a
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fa42 	bl	80001d0 <d_make_comp>
 8000d4c:	462a      	mov	r2, r5
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2139      	movs	r1, #57	; 0x39
 8000d52:	4620      	mov	r0, r4
 8000d54:	f7ff fa3c 	bl	80001d0 <d_make_comp>
 8000d58:	4605      	mov	r5, r0
 8000d5a:	e6cd      	b.n	8000af8 <d_exprlist+0x10c>
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d903      	bls.n	8000d6e <d_exprlist+0x382>
 8000d66:	3b72      	subs	r3, #114	; 0x72
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	f63f af25 	bhi.w	8000bb8 <d_exprlist+0x1cc>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f000 fcbe 	bl	80016f0 <d_type>
 8000d74:	4683      	mov	fp, r0
 8000d76:	e728      	b.n	8000bca <d_exprlist+0x1de>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f000 faf3 	bl	8001364 <d_template_args>
 8000d7e:	465a      	mov	r2, fp
 8000d80:	4603      	mov	r3, r0
 8000d82:	2104      	movs	r1, #4
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fa23 	bl	80001d0 <d_make_comp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e762      	b.n	8000c54 <d_exprlist+0x268>
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60c3      	str	r3, [r0, #12]
 8000d92:	212e      	movs	r1, #46	; 0x2e
 8000d94:	4613      	mov	r3, r2
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	f7ff ba18 	b.w	80001d0 <d_make_comp>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f001 f88d 	bl	8001ec0 <d_operator_name>
 8000da6:	4683      	mov	fp, r0
 8000da8:	e70f      	b.n	8000bca <d_exprlist+0x1de>
 8000daa:	f1ba 0f00 	cmp.w	sl, #0
 8000dae:	f43f af36 	beq.w	8000c1e <d_exprlist+0x232>
 8000db2:	f89a 3000 	ldrb.w	r3, [sl]
 8000db6:	2b70      	cmp	r3, #112	; 0x70
 8000db8:	d017      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dba:	2b6d      	cmp	r3, #109	; 0x6d
 8000dbc:	d015      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dbe:	4650      	mov	r0, sl
 8000dc0:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dc2:	f005 fdad 	bl	8006920 <strcmp>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	f47f af29 	bne.w	8000c1e <d_exprlist+0x232>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 fa65 	bl	800129c <d_template_args_1>
 8000dd2:	e727      	b.n	8000c24 <d_exprlist+0x238>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f000 fac5 	bl	8001364 <d_template_args>
 8000dda:	4652      	mov	r2, sl
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2104      	movs	r1, #4
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff f9f5 	bl	80001d0 <d_make_comp>
 8000de6:	4682      	mov	sl, r0
 8000de8:	e70b      	b.n	8000c02 <d_exprlist+0x216>
 8000dea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d1e5      	bne.n	8000dbe <d_exprlist+0x3d2>
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	2a5f      	cmp	r2, #95	; 0x5f
 8000df8:	d023      	beq.n	8000e42 <d_exprlist+0x456>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dfe:	f005 fd8f 	bl	8006920 <strcmp>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d03f      	beq.n	8000e86 <d_exprlist+0x49a>
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 f84e 	bl	8000ea8 <d_expression_1>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2138      	movs	r1, #56	; 0x38
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff f9dc 	bl	80001d0 <d_make_comp>
 8000e18:	e704      	b.n	8000c24 <d_exprlist+0x238>
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60e3      	str	r3, [r4, #12]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e789      	b.n	8000d36 <d_exprlist+0x34a>
 8000e22:	4620      	mov	r0, r4
 8000e24:	f001 f84c 	bl	8001ec0 <d_operator_name>
 8000e28:	e77c      	b.n	8000d24 <d_exprlist+0x338>
 8000e2a:	785a      	ldrb	r2, [r3, #1]
 8000e2c:	2a69      	cmp	r2, #105	; 0x69
 8000e2e:	f47f aeac 	bne.w	8000b8a <d_exprlist+0x19e>
 8000e32:	3302      	adds	r3, #2
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	2145      	movs	r1, #69	; 0x45
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff fdd7 	bl	80009ec <d_exprlist>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e779      	b.n	8000d36 <d_exprlist+0x34a>
 8000e42:	3301      	adds	r3, #1
 8000e44:	60e3      	str	r3, [r4, #12]
 8000e46:	e7ba      	b.n	8000dbe <d_exprlist+0x3d2>
 8000e48:	2a6f      	cmp	r2, #111	; 0x6f
 8000e4a:	d015      	beq.n	8000e78 <d_exprlist+0x48c>
 8000e4c:	2a69      	cmp	r2, #105	; 0x69
 8000e4e:	f47f ae8d 	bne.w	8000b6c <d_exprlist+0x180>
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	2a6c      	cmp	r2, #108	; 0x6c
 8000e56:	f47f ae0e 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	60e3      	str	r3, [r4, #12]
 8000e60:	2145      	movs	r1, #69	; 0x45
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fdc2 	bl	80009ec <d_exprlist>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2130      	movs	r1, #48	; 0x30
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ae 	bl	80001d0 <d_make_comp>
 8000e74:	4605      	mov	r5, r0
 8000e76:	e63f      	b.n	8000af8 <d_exprlist+0x10c>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a6e      	cmp	r2, #110	; 0x6e
 8000e7c:	f47f adfb 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	e5c9      	b.n	8000a1a <d_exprlist+0x2e>
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 fa08 	bl	800129c <d_template_args_1>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e7be      	b.n	8000e0e <d_exprlist+0x422>
 8000e90:	08016d58 	.word	0x08016d58
 8000e94:	08016d5c 	.word	0x08016d5c
 8000e98:	08016d60 	.word	0x08016d60
 8000e9c:	08016d64 	.word	0x08016d64
 8000ea0:	08016d54 	.word	0x08016d54
 8000ea4:	0801725c 	.word	0x0801725c

08000ea8 <d_expression_1>:
 8000ea8:	68c1      	ldr	r1, [r0, #12]
 8000eaa:	780b      	ldrb	r3, [r1, #0]
 8000eac:	2b4c      	cmp	r3, #76	; 0x4c
 8000eae:	f000 8087 	beq.w	8000fc0 <d_expression_1+0x118>
 8000eb2:	2b54      	cmp	r3, #84	; 0x54
 8000eb4:	f000 8086 	beq.w	8000fc4 <d_expression_1+0x11c>
 8000eb8:	2b73      	cmp	r3, #115	; 0x73
 8000eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	d037      	beq.n	8000f32 <d_expression_1+0x8a>
 8000ec2:	2b66      	cmp	r3, #102	; 0x66
 8000ec4:	d012      	beq.n	8000eec <d_expression_1+0x44>
 8000ec6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000eca:	2a09      	cmp	r2, #9
 8000ecc:	f200 81b8 	bhi.w	8001240 <d_expression_1+0x398>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f001 f8b5 	bl	8002040 <d_unqualified_name>
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d06d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000edc:	68e3      	ldr	r3, [r4, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b49      	cmp	r3, #73	; 0x49
 8000ee2:	f000 8088 	beq.w	8000ff6 <d_expression_1+0x14e>
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eec:	784b      	ldrb	r3, [r1, #1]
 8000eee:	2b70      	cmp	r3, #112	; 0x70
 8000ef0:	d039      	beq.n	8000f66 <d_expression_1+0xbe>
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 ffe4 	bl	8001ec0 <d_operator_name>
 8000ef8:	4605      	mov	r5, r0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d05c      	beq.n	8000fb8 <d_expression_1+0x110>
 8000efe:	7803      	ldrb	r3, [r0, #0]
 8000f00:	2b31      	cmp	r3, #49	; 0x31
 8000f02:	d061      	beq.n	8000fc8 <d_expression_1+0x120>
 8000f04:	2b32      	cmp	r3, #50	; 0x32
 8000f06:	d025      	beq.n	8000f54 <d_expression_1+0xac>
 8000f08:	2b33      	cmp	r3, #51	; 0x33
 8000f0a:	d155      	bne.n	8000fb8 <d_expression_1+0x110>
 8000f0c:	68e3      	ldr	r3, [r4, #12]
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	2a5f      	cmp	r2, #95	; 0x5f
 8000f12:	f040 81b4 	bne.w	800127e <d_expression_1+0x3d6>
 8000f16:	3301      	adds	r3, #1
 8000f18:	60e3      	str	r3, [r4, #12]
 8000f1a:	2145      	movs	r1, #69	; 0x45
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fd65 	bl	80009ec <d_exprlist>
 8000f22:	4603      	mov	r3, r0
 8000f24:	462a      	mov	r2, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	2136      	movs	r1, #54	; 0x36
 8000f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	f7ff b94f 	b.w	80001d0 <d_make_comp>
 8000f32:	784b      	ldrb	r3, [r1, #1]
 8000f34:	2b72      	cmp	r3, #114	; 0x72
 8000f36:	d069      	beq.n	800100c <d_expression_1+0x164>
 8000f38:	2b70      	cmp	r3, #112	; 0x70
 8000f3a:	d1da      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000f3c:	3102      	adds	r1, #2
 8000f3e:	60c1      	str	r1, [r0, #12]
 8000f40:	f7ff ffb2 	bl	8000ea8 <d_expression_1>
 8000f44:	2300      	movs	r3, #0
 8000f46:	4602      	mov	r2, r0
 8000f48:	214a      	movs	r1, #74	; 0x4a
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	f7ff b93e 	b.w	80001d0 <d_make_comp>
 8000f54:	6843      	ldr	r3, [r0, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d82e      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000f5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000f5e:	0071      	.short	0x0071
 8000f60:	002d0190 	.word	0x002d0190
 8000f64:	002d      	.short	0x002d
 8000f66:	1c8b      	adds	r3, r1, #2
 8000f68:	60c3      	str	r3, [r0, #12]
 8000f6a:	788b      	ldrb	r3, [r1, #2]
 8000f6c:	2b54      	cmp	r3, #84	; 0x54
 8000f6e:	d063      	beq.n	8001038 <d_expression_1+0x190>
 8000f70:	f7ff fac2 	bl	80004f8 <d_compact_number>
 8000f74:	43c3      	mvns	r3, r0
 8000f76:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000f7a:	d01d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000f7c:	3001      	adds	r0, #1
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	69a2      	ldr	r2, [r4, #24]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	da18      	bge.n	8000fb8 <d_expression_1+0x110>
 8000f86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000f8a:	6921      	ldr	r1, [r4, #16]
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	188d      	adds	r5, r1, r2
 8000f92:	6163      	str	r3, [r4, #20]
 8000f94:	d0a7      	beq.n	8000ee6 <d_expression_1+0x3e>
 8000f96:	2306      	movs	r3, #6
 8000f98:	548b      	strb	r3, [r1, r2]
 8000f9a:	6068      	str	r0, [r5, #4]
 8000f9c:	e7a3      	b.n	8000ee6 <d_expression_1+0x3e>
 8000f9e:	2b74      	cmp	r3, #116	; 0x74
 8000fa0:	d1a7      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa2:	784b      	ldrb	r3, [r1, #1]
 8000fa4:	2b6c      	cmp	r3, #108	; 0x6c
 8000fa6:	d1a4      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa8:	f000 fba2 	bl	80016f0 <d_type>
 8000fac:	68e1      	ldr	r1, [r4, #12]
 8000fae:	784b      	ldrb	r3, [r1, #1]
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 814e 	bne.w	8001254 <d_expression_1+0x3ac>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc0:	f001 bc8c 	b.w	80028dc <d_expr_primary>
 8000fc4:	f7ff bab4 	b.w	8000530 <d_template_param>
 8000fc8:	6847      	ldr	r7, [r0, #4]
 8000fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	683e      	ldr	r6, [r7, #0]
 8000fd0:	49ac      	ldr	r1, [pc, #688]	; (8001284 <d_expression_1+0x3dc>)
 8000fd2:	3a02      	subs	r2, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f005 fca1 	bl	8006920 <strcmp>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	f000 80ab 	beq.w	800113a <d_expression_1+0x292>
 8000fe4:	68ff      	ldr	r7, [r7, #12]
 8000fe6:	2f03      	cmp	r7, #3
 8000fe8:	d8e6      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000fea:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000fee:	0029      	.short	0x0029
 8000ff0:	007100ff 	.word	0x007100ff
 8000ff4:	0031      	.short	0x0031
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 f9b4 	bl	8001364 <d_template_args>
 8000ffc:	462a      	mov	r2, r5
 8000ffe:	4603      	mov	r3, r0
 8001000:	2104      	movs	r1, #4
 8001002:	4620      	mov	r0, r4
 8001004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	f7ff b8e2 	b.w	80001d0 <d_make_comp>
 800100c:	3102      	adds	r1, #2
 800100e:	60c1      	str	r1, [r0, #12]
 8001010:	f000 fb6e 	bl	80016f0 <d_type>
 8001014:	4605      	mov	r5, r0
 8001016:	4620      	mov	r0, r4
 8001018:	f001 f812 	bl	8002040 <d_unqualified_name>
 800101c:	68e3      	ldr	r3, [r4, #12]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b49      	cmp	r3, #73	; 0x49
 8001022:	4606      	mov	r6, r0
 8001024:	f000 80ae 	beq.w	8001184 <d_expression_1+0x2dc>
 8001028:	4603      	mov	r3, r0
 800102a:	462a      	mov	r2, r5
 800102c:	4620      	mov	r0, r4
 800102e:	2101      	movs	r1, #1
 8001030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	f7ff b8cc 	b.w	80001d0 <d_make_comp>
 8001038:	3103      	adds	r1, #3
 800103a:	60c1      	str	r1, [r0, #12]
 800103c:	2000      	movs	r0, #0
 800103e:	e79e      	b.n	8000f7e <d_expression_1+0xd6>
 8001040:	462a      	mov	r2, r5
 8001042:	4620      	mov	r0, r4
 8001044:	2300      	movs	r3, #0
 8001046:	2135      	movs	r1, #53	; 0x35
 8001048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	f7ff b8c0 	b.w	80001d0 <d_make_comp>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d0b1      	beq.n	8000fb8 <d_expression_1+0x110>
 8001054:	498c      	ldr	r1, [pc, #560]	; (8001288 <d_expression_1+0x3e0>)
 8001056:	4630      	mov	r0, r6
 8001058:	f005 fc62 	bl	8006920 <strcmp>
 800105c:	2800      	cmp	r0, #0
 800105e:	d071      	beq.n	8001144 <d_expression_1+0x29c>
 8001060:	7833      	ldrb	r3, [r6, #0]
 8001062:	2b66      	cmp	r3, #102	; 0x66
 8001064:	f000 80b2 	beq.w	80011cc <d_expression_1+0x324>
 8001068:	2b6e      	cmp	r3, #110	; 0x6e
 800106a:	d1a5      	bne.n	8000fb8 <d_expression_1+0x110>
 800106c:	7873      	ldrb	r3, [r6, #1]
 800106e:	2b77      	cmp	r3, #119	; 0x77
 8001070:	d001      	beq.n	8001076 <d_expression_1+0x1ce>
 8001072:	2b61      	cmp	r3, #97	; 0x61
 8001074:	d1a0      	bne.n	8000fb8 <d_expression_1+0x110>
 8001076:	215f      	movs	r1, #95	; 0x5f
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fcb7 	bl	80009ec <d_exprlist>
 800107e:	4606      	mov	r6, r0
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fb35 	bl	80016f0 <d_type>
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	2a45      	cmp	r2, #69	; 0x45
 800108c:	4607      	mov	r7, r0
 800108e:	f000 8099 	beq.w	80011c4 <d_expression_1+0x31c>
 8001092:	2a70      	cmp	r2, #112	; 0x70
 8001094:	f000 809e 	beq.w	80011d4 <d_expression_1+0x32c>
 8001098:	2a69      	cmp	r2, #105	; 0x69
 800109a:	d18d      	bne.n	8000fb8 <d_expression_1+0x110>
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b6c      	cmp	r3, #108	; 0x6c
 80010a0:	d18a      	bne.n	8000fb8 <d_expression_1+0x110>
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ff00 	bl	8000ea8 <d_expression_1>
 80010a8:	4603      	mov	r3, r0
 80010aa:	463a      	mov	r2, r7
 80010ac:	213b      	movs	r1, #59	; 0x3b
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff f88e 	bl	80001d0 <d_make_comp>
 80010b4:	4632      	mov	r2, r6
 80010b6:	4603      	mov	r3, r0
 80010b8:	213a      	movs	r1, #58	; 0x3a
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff f888 	bl	80001d0 <d_make_comp>
 80010c0:	462a      	mov	r2, r5
 80010c2:	4603      	mov	r3, r0
 80010c4:	2139      	movs	r1, #57	; 0x39
 80010c6:	4620      	mov	r0, r4
 80010c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	f7ff b880 	b.w	80001d0 <d_make_comp>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	f43f af71 	beq.w	8000fb8 <d_expression_1+0x110>
 80010d6:	686b      	ldr	r3, [r5, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	785a      	ldrb	r2, [r3, #1]
 80010dc:	2a63      	cmp	r2, #99	; 0x63
 80010de:	d044      	beq.n	800116a <d_expression_1+0x2c2>
 80010e0:	7833      	ldrb	r3, [r6, #0]
 80010e2:	2b66      	cmp	r3, #102	; 0x66
 80010e4:	d059      	beq.n	800119a <d_expression_1+0x2f2>
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fede 	bl	8000ea8 <d_expression_1>
 80010ec:	4607      	mov	r7, r0
 80010ee:	4967      	ldr	r1, [pc, #412]	; (800128c <d_expression_1+0x3e4>)
 80010f0:	4630      	mov	r0, r6
 80010f2:	f005 fc15 	bl	8006920 <strcmp>
 80010f6:	b390      	cbz	r0, 800115e <d_expression_1+0x2b6>
 80010f8:	4965      	ldr	r1, [pc, #404]	; (8001290 <d_expression_1+0x3e8>)
 80010fa:	4630      	mov	r0, r6
 80010fc:	f005 fc10 	bl	8006920 <strcmp>
 8001100:	b128      	cbz	r0, 800110e <d_expression_1+0x266>
 8001102:	4630      	mov	r0, r6
 8001104:	4963      	ldr	r1, [pc, #396]	; (8001294 <d_expression_1+0x3ec>)
 8001106:	f005 fc0b 	bl	8006920 <strcmp>
 800110a:	2800      	cmp	r0, #0
 800110c:	d14a      	bne.n	80011a4 <d_expression_1+0x2fc>
 800110e:	4620      	mov	r0, r4
 8001110:	f000 ff96 	bl	8002040 <d_unqualified_name>
 8001114:	68e3      	ldr	r3, [r4, #12]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b49      	cmp	r3, #73	; 0x49
 800111a:	4606      	mov	r6, r0
 800111c:	d047      	beq.n	80011ae <d_expression_1+0x306>
 800111e:	4633      	mov	r3, r6
 8001120:	463a      	mov	r2, r7
 8001122:	2138      	movs	r1, #56	; 0x38
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff f853 	bl	80001d0 <d_make_comp>
 800112a:	462a      	mov	r2, r5
 800112c:	4603      	mov	r3, r0
 800112e:	2137      	movs	r1, #55	; 0x37
 8001130:	4620      	mov	r0, r4
 8001132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	f7ff b84b 	b.w	80001d0 <d_make_comp>
 800113a:	4620      	mov	r0, r4
 800113c:	f000 fad8 	bl	80016f0 <d_type>
 8001140:	4603      	mov	r3, r0
 8001142:	e6ef      	b.n	8000f24 <d_expression_1+0x7c>
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff feaf 	bl	8000ea8 <d_expression_1>
 800114a:	4606      	mov	r6, r0
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff feab 	bl	8000ea8 <d_expression_1>
 8001152:	4607      	mov	r7, r0
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fea7 	bl	8000ea8 <d_expression_1>
 800115a:	4603      	mov	r3, r0
 800115c:	e7a5      	b.n	80010aa <d_expression_1+0x202>
 800115e:	2145      	movs	r1, #69	; 0x45
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fc43 	bl	80009ec <d_exprlist>
 8001166:	4606      	mov	r6, r0
 8001168:	e7d9      	b.n	800111e <d_expression_1+0x276>
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8001170:	2a01      	cmp	r2, #1
 8001172:	d902      	bls.n	800117a <d_expression_1+0x2d2>
 8001174:	3b72      	subs	r3, #114	; 0x72
 8001176:	2b01      	cmp	r3, #1
 8001178:	d8b2      	bhi.n	80010e0 <d_expression_1+0x238>
 800117a:	4620      	mov	r0, r4
 800117c:	f000 fab8 	bl	80016f0 <d_type>
 8001180:	4607      	mov	r7, r0
 8001182:	e7b4      	b.n	80010ee <d_expression_1+0x246>
 8001184:	4620      	mov	r0, r4
 8001186:	f000 f8ed 	bl	8001364 <d_template_args>
 800118a:	4632      	mov	r2, r6
 800118c:	4603      	mov	r3, r0
 800118e:	2104      	movs	r1, #4
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f81d 	bl	80001d0 <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e747      	b.n	800102a <d_expression_1+0x182>
 800119a:	4620      	mov	r0, r4
 800119c:	f000 fe90 	bl	8001ec0 <d_operator_name>
 80011a0:	4607      	mov	r7, r0
 80011a2:	e7a4      	b.n	80010ee <d_expression_1+0x246>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fe7f 	bl	8000ea8 <d_expression_1>
 80011aa:	4606      	mov	r6, r0
 80011ac:	e7b7      	b.n	800111e <d_expression_1+0x276>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f8d8 	bl	8001364 <d_template_args>
 80011b4:	4632      	mov	r2, r6
 80011b6:	4603      	mov	r3, r0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff f808 	bl	80001d0 <d_make_comp>
 80011c0:	4606      	mov	r6, r0
 80011c2:	e7ac      	b.n	800111e <d_expression_1+0x276>
 80011c4:	3301      	adds	r3, #1
 80011c6:	60e3      	str	r3, [r4, #12]
 80011c8:	2300      	movs	r3, #0
 80011ca:	e76e      	b.n	80010aa <d_expression_1+0x202>
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fe77 	bl	8001ec0 <d_operator_name>
 80011d2:	e7ba      	b.n	800114a <d_expression_1+0x2a2>
 80011d4:	785a      	ldrb	r2, [r3, #1]
 80011d6:	2a69      	cmp	r2, #105	; 0x69
 80011d8:	f47f aeee 	bne.w	8000fb8 <d_expression_1+0x110>
 80011dc:	3302      	adds	r3, #2
 80011de:	60e3      	str	r3, [r4, #12]
 80011e0:	2145      	movs	r1, #69	; 0x45
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fc02 	bl	80009ec <d_exprlist>
 80011e8:	4603      	mov	r3, r0
 80011ea:	e75e      	b.n	80010aa <d_expression_1+0x202>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d046      	beq.n	800127e <d_expression_1+0x3d6>
 80011f0:	7833      	ldrb	r3, [r6, #0]
 80011f2:	2b70      	cmp	r3, #112	; 0x70
 80011f4:	d015      	beq.n	8001222 <d_expression_1+0x37a>
 80011f6:	2b6d      	cmp	r3, #109	; 0x6d
 80011f8:	d013      	beq.n	8001222 <d_expression_1+0x37a>
 80011fa:	2700      	movs	r7, #0
 80011fc:	4630      	mov	r0, r6
 80011fe:	4926      	ldr	r1, [pc, #152]	; (8001298 <d_expression_1+0x3f0>)
 8001200:	f005 fb8e 	bl	8006920 <strcmp>
 8001204:	b1b8      	cbz	r0, 8001236 <d_expression_1+0x38e>
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fe4e 	bl	8000ea8 <d_expression_1>
 800120c:	4603      	mov	r3, r0
 800120e:	2f00      	cmp	r7, #0
 8001210:	f43f ae88 	beq.w	8000f24 <d_expression_1+0x7c>
 8001214:	461a      	mov	r2, r3
 8001216:	2138      	movs	r1, #56	; 0x38
 8001218:	4620      	mov	r0, r4
 800121a:	f7fe ffd9 	bl	80001d0 <d_make_comp>
 800121e:	4603      	mov	r3, r0
 8001220:	e680      	b.n	8000f24 <d_expression_1+0x7c>
 8001222:	7872      	ldrb	r2, [r6, #1]
 8001224:	429a      	cmp	r2, r3
 8001226:	d1e8      	bne.n	80011fa <d_expression_1+0x352>
 8001228:	68e3      	ldr	r3, [r4, #12]
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	2a5f      	cmp	r2, #95	; 0x5f
 800122e:	d1e5      	bne.n	80011fc <d_expression_1+0x354>
 8001230:	3301      	adds	r3, #1
 8001232:	60e3      	str	r3, [r4, #12]
 8001234:	e7e1      	b.n	80011fa <d_expression_1+0x352>
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f830 	bl	800129c <d_template_args_1>
 800123c:	4603      	mov	r3, r0
 800123e:	e7e6      	b.n	800120e <d_expression_1+0x366>
 8001240:	2b6f      	cmp	r3, #111	; 0x6f
 8001242:	d015      	beq.n	8001270 <d_expression_1+0x3c8>
 8001244:	2b69      	cmp	r3, #105	; 0x69
 8001246:	f47f aeaa 	bne.w	8000f9e <d_expression_1+0xf6>
 800124a:	784b      	ldrb	r3, [r1, #1]
 800124c:	2b6c      	cmp	r3, #108	; 0x6c
 800124e:	f47f ae50 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001252:	2500      	movs	r5, #0
 8001254:	3102      	adds	r1, #2
 8001256:	60e1      	str	r1, [r4, #12]
 8001258:	4620      	mov	r0, r4
 800125a:	2145      	movs	r1, #69	; 0x45
 800125c:	f7ff fbc6 	bl	80009ec <d_exprlist>
 8001260:	462a      	mov	r2, r5
 8001262:	4603      	mov	r3, r0
 8001264:	2130      	movs	r1, #48	; 0x30
 8001266:	4620      	mov	r0, r4
 8001268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800126c:	f7fe bfb0 	b.w	80001d0 <d_make_comp>
 8001270:	784b      	ldrb	r3, [r1, #1]
 8001272:	2b6e      	cmp	r3, #110	; 0x6e
 8001274:	f47f ae3d 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001278:	3102      	adds	r1, #2
 800127a:	60c1      	str	r1, [r0, #12]
 800127c:	e628      	b.n	8000ed0 <d_expression_1+0x28>
 800127e:	2700      	movs	r7, #0
 8001280:	e7c1      	b.n	8001206 <d_expression_1+0x35e>
 8001282:	bf00      	nop
 8001284:	0801725c 	.word	0x0801725c
 8001288:	08016d64 	.word	0x08016d64
 800128c:	08016d58 	.word	0x08016d58
 8001290:	08016d5c 	.word	0x08016d5c
 8001294:	08016d60 	.word	0x08016d60
 8001298:	08016d54 	.word	0x08016d54

0800129c <d_template_args_1>:
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	68c2      	ldr	r2, [r0, #12]
 80012a2:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	2b45      	cmp	r3, #69	; 0x45
 80012aa:	b083      	sub	sp, #12
 80012ac:	4604      	mov	r4, r0
 80012ae:	d04e      	beq.n	800134e <d_template_args_1+0xb2>
 80012b0:	ae02      	add	r6, sp, #8
 80012b2:	2100      	movs	r1, #0
 80012b4:	f846 1d04 	str.w	r1, [r6, #-4]!
 80012b8:	2701      	movs	r7, #1
 80012ba:	3b49      	subs	r3, #73	; 0x49
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d83e      	bhi.n	800133e <d_template_args_1+0xa2>
 80012c0:	e8df f003 	tbb	[pc, r3]
 80012c4:	1b3d3838 	.word	0x1b3d3838
 80012c8:	3d3d3d3d 	.word	0x3d3d3d3d
 80012cc:	3d3d3d3d 	.word	0x3d3d3d3d
 80012d0:	083d3d3d 	.word	0x083d3d3d
 80012d4:	3201      	adds	r2, #1
 80012d6:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 80012da:	60e2      	str	r2, [r4, #12]
 80012dc:	6367      	str	r7, [r4, #52]	; 0x34
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fde2 	bl	8000ea8 <d_expression_1>
 80012e4:	68e3      	ldr	r3, [r4, #12]
 80012e6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	2a45      	cmp	r2, #69	; 0x45
 80012ee:	4605      	mov	r5, r0
 80012f0:	d02a      	beq.n	8001348 <d_template_args_1+0xac>
 80012f2:	2000      	movs	r0, #0
 80012f4:	b003      	add	sp, #12
 80012f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012fa:	4620      	mov	r0, r4
 80012fc:	f001 faee 	bl	80028dc <d_expr_primary>
 8001300:	4605      	mov	r5, r0
 8001302:	2300      	movs	r3, #0
 8001304:	212f      	movs	r1, #47	; 0x2f
 8001306:	462a      	mov	r2, r5
 8001308:	4620      	mov	r0, r4
 800130a:	2d00      	cmp	r5, #0
 800130c:	d0f1      	beq.n	80012f2 <d_template_args_1+0x56>
 800130e:	f7fe ff5f 	bl	80001d0 <d_make_comp>
 8001312:	6030      	str	r0, [r6, #0]
 8001314:	f100 0608 	add.w	r6, r0, #8
 8001318:	2800      	cmp	r0, #0
 800131a:	d0ea      	beq.n	80012f2 <d_template_args_1+0x56>
 800131c:	68e2      	ldr	r2, [r4, #12]
 800131e:	7813      	ldrb	r3, [r2, #0]
 8001320:	2b45      	cmp	r3, #69	; 0x45
 8001322:	d1ca      	bne.n	80012ba <d_template_args_1+0x1e>
 8001324:	9801      	ldr	r0, [sp, #4]
 8001326:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800132a:	3201      	adds	r2, #1
 800132c:	60e2      	str	r2, [r4, #12]
 800132e:	b003      	add	sp, #12
 8001330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001334:	4620      	mov	r0, r4
 8001336:	f000 f815 	bl	8001364 <d_template_args>
 800133a:	4605      	mov	r5, r0
 800133c:	e7e1      	b.n	8001302 <d_template_args_1+0x66>
 800133e:	4620      	mov	r0, r4
 8001340:	f000 f9d6 	bl	80016f0 <d_type>
 8001344:	4605      	mov	r5, r0
 8001346:	e7dc      	b.n	8001302 <d_template_args_1+0x66>
 8001348:	3301      	adds	r3, #1
 800134a:	60e3      	str	r3, [r4, #12]
 800134c:	e7d9      	b.n	8001302 <d_template_args_1+0x66>
 800134e:	3201      	adds	r2, #1
 8001350:	2300      	movs	r3, #0
 8001352:	60c2      	str	r2, [r0, #12]
 8001354:	212f      	movs	r1, #47	; 0x2f
 8001356:	461a      	mov	r2, r3
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800135e:	f7fe bf37 	b.w	80001d0 <d_make_comp>
 8001362:	bf00      	nop

08001364 <d_template_args>:
 8001364:	68c2      	ldr	r2, [r0, #12]
 8001366:	7813      	ldrb	r3, [r2, #0]
 8001368:	3b49      	subs	r3, #73	; 0x49
 800136a:	2b01      	cmp	r3, #1
 800136c:	d802      	bhi.n	8001374 <d_template_args+0x10>
 800136e:	3201      	adds	r2, #1
 8001370:	60c2      	str	r2, [r0, #12]
 8001372:	e793      	b.n	800129c <d_template_args_1>
 8001374:	2000      	movs	r0, #0
 8001376:	4770      	bx	lr

08001378 <d_name>:
 8001378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800137c:	68c2      	ldr	r2, [r0, #12]
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	3b4e      	subs	r3, #78	; 0x4e
 8001382:	b085      	sub	sp, #20
 8001384:	4605      	mov	r5, r0
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d870      	bhi.n	800146c <d_name+0xf4>
 800138a:	e8df f003 	tbb	[pc, r3]
 800138e:	6f1e      	.short	0x6f1e
 8001390:	5b6f6f6f 	.word	0x5b6f6f6f
 8001394:	6f6f176f 	.word	0x6f6f176f
 8001398:	6f6f      	.short	0x6f6f
 800139a:	07          	.byte	0x07
 800139b:	00          	.byte	0x00
 800139c:	3201      	adds	r2, #1
 800139e:	2100      	movs	r1, #0
 80013a0:	60c2      	str	r2, [r0, #12]
 80013a2:	f000 ffbd 	bl	8002320 <d_encoding>
 80013a6:	68eb      	ldr	r3, [r5, #12]
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	2945      	cmp	r1, #69	; 0x45
 80013ac:	4606      	mov	r6, r0
 80013ae:	f000 8099 	beq.w	80014e4 <d_name+0x16c>
 80013b2:	2200      	movs	r2, #0
 80013b4:	4610      	mov	r0, r2
 80013b6:	b005      	add	sp, #20
 80013b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013bc:	f000 fe40 	bl	8002040 <d_unqualified_name>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4610      	mov	r0, r2
 80013c4:	b005      	add	sp, #20
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ca:	3201      	adds	r2, #1
 80013cc:	60c2      	str	r2, [r0, #12]
 80013ce:	a903      	add	r1, sp, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7fe ff49 	bl	8000268 <d_cv_qualifiers>
 80013d6:	4681      	mov	r9, r0
 80013d8:	2800      	cmp	r0, #0
 80013da:	d0ea      	beq.n	80013b2 <d_name+0x3a>
 80013dc:	2100      	movs	r1, #0
 80013de:	4628      	mov	r0, r5
 80013e0:	f7fe ffa8 	bl	8000334 <d_ref_qualifier>
 80013e4:	68ea      	ldr	r2, [r5, #12]
 80013e6:	4eb4      	ldr	r6, [pc, #720]	; (80016b8 <d_name+0x340>)
 80013e8:	7814      	ldrb	r4, [r2, #0]
 80013ea:	4680      	mov	r8, r0
 80013ec:	2700      	movs	r7, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	f000 80e8 	beq.w	80015c4 <d_name+0x24c>
 80013f4:	2c44      	cmp	r4, #68	; 0x44
 80013f6:	f000 80d1 	beq.w	800159c <d_name+0x224>
 80013fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b1c      	cmp	r3, #28
 8001402:	f240 80a8 	bls.w	8001556 <d_name+0x1de>
 8001406:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800140a:	2b19      	cmp	r3, #25
 800140c:	f240 80a8 	bls.w	8001560 <d_name+0x1e8>
 8001410:	2c55      	cmp	r4, #85	; 0x55
 8001412:	f000 80de 	beq.w	80015d2 <d_name+0x25a>
 8001416:	2c53      	cmp	r4, #83	; 0x53
 8001418:	f000 80f1 	beq.w	80015fe <d_name+0x286>
 800141c:	2c49      	cmp	r4, #73	; 0x49
 800141e:	f000 80da 	beq.w	80015d6 <d_name+0x25e>
 8001422:	2c54      	cmp	r4, #84	; 0x54
 8001424:	f000 811f 	beq.w	8001666 <d_name+0x2ee>
 8001428:	2c45      	cmp	r4, #69	; 0x45
 800142a:	f000 814b 	beq.w	80016c4 <d_name+0x34c>
 800142e:	2c4d      	cmp	r4, #77	; 0x4d
 8001430:	f040 80c8 	bne.w	80015c4 <d_name+0x24c>
 8001434:	2f00      	cmp	r7, #0
 8001436:	f000 80c5 	beq.w	80015c4 <d_name+0x24c>
 800143a:	1c53      	adds	r3, r2, #1
 800143c:	60eb      	str	r3, [r5, #12]
 800143e:	7854      	ldrb	r4, [r2, #1]
 8001440:	461a      	mov	r2, r3
 8001442:	e7d4      	b.n	80013ee <d_name+0x76>
 8001444:	7853      	ldrb	r3, [r2, #1]
 8001446:	2b74      	cmp	r3, #116	; 0x74
 8001448:	d031      	beq.n	80014ae <d_name+0x136>
 800144a:	2100      	movs	r1, #0
 800144c:	f7ff f90a 	bl	8000664 <d_substitution>
 8001450:	68eb      	ldr	r3, [r5, #12]
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	2949      	cmp	r1, #73	; 0x49
 8001456:	4602      	mov	r2, r0
 8001458:	d1b3      	bne.n	80013c2 <d_name+0x4a>
 800145a:	3301      	adds	r3, #1
 800145c:	60eb      	str	r3, [r5, #12]
 800145e:	4628      	mov	r0, r5
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	f7ff ff1b 	bl	800129c <d_template_args_1>
 8001466:	9a01      	ldr	r2, [sp, #4]
 8001468:	4603      	mov	r3, r0
 800146a:	e017      	b.n	800149c <d_name+0x124>
 800146c:	f000 fde8 	bl	8002040 <d_unqualified_name>
 8001470:	68eb      	ldr	r3, [r5, #12]
 8001472:	7819      	ldrb	r1, [r3, #0]
 8001474:	2949      	cmp	r1, #73	; 0x49
 8001476:	4602      	mov	r2, r0
 8001478:	d1a3      	bne.n	80013c2 <d_name+0x4a>
 800147a:	2a00      	cmp	r2, #0
 800147c:	d099      	beq.n	80013b2 <d_name+0x3a>
 800147e:	6a29      	ldr	r1, [r5, #32]
 8001480:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001482:	4281      	cmp	r1, r0
 8001484:	da95      	bge.n	80013b2 <d_name+0x3a>
 8001486:	69ec      	ldr	r4, [r5, #28]
 8001488:	1c48      	adds	r0, r1, #1
 800148a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 800148e:	6228      	str	r0, [r5, #32]
 8001490:	7819      	ldrb	r1, [r3, #0]
 8001492:	3949      	subs	r1, #73	; 0x49
 8001494:	2901      	cmp	r1, #1
 8001496:	bf88      	it	hi
 8001498:	2300      	movhi	r3, #0
 800149a:	d9de      	bls.n	800145a <d_name+0xe2>
 800149c:	4628      	mov	r0, r5
 800149e:	2104      	movs	r1, #4
 80014a0:	f7fe fe96 	bl	80001d0 <d_make_comp>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4610      	mov	r0, r2
 80014a8:	b005      	add	sp, #20
 80014aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ae:	6943      	ldr	r3, [r0, #20]
 80014b0:	6981      	ldr	r1, [r0, #24]
 80014b2:	3202      	adds	r2, #2
 80014b4:	428b      	cmp	r3, r1
 80014b6:	60c2      	str	r2, [r0, #12]
 80014b8:	f2c0 80ab 	blt.w	8001612 <d_name+0x29a>
 80014bc:	2400      	movs	r4, #0
 80014be:	4628      	mov	r0, r5
 80014c0:	f000 fdbe 	bl	8002040 <d_unqualified_name>
 80014c4:	4622      	mov	r2, r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7fe fe80 	bl	80001d0 <d_make_comp>
 80014d0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	3103      	adds	r1, #3
 80014d6:	6329      	str	r1, [r5, #48]	; 0x30
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	2949      	cmp	r1, #73	; 0x49
 80014dc:	4602      	mov	r2, r0
 80014de:	f47f af70 	bne.w	80013c2 <d_name+0x4a>
 80014e2:	e7ca      	b.n	800147a <d_name+0x102>
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ea      	str	r2, [r5, #12]
 80014e8:	7859      	ldrb	r1, [r3, #1]
 80014ea:	2973      	cmp	r1, #115	; 0x73
 80014ec:	f000 80a3 	beq.w	8001636 <d_name+0x2be>
 80014f0:	2964      	cmp	r1, #100	; 0x64
 80014f2:	f000 80bc 	beq.w	800166e <d_name+0x2f6>
 80014f6:	4628      	mov	r0, r5
 80014f8:	f7ff ff3e 	bl	8001378 <d_name>
 80014fc:	4604      	mov	r4, r0
 80014fe:	2800      	cmp	r0, #0
 8001500:	d072      	beq.n	80015e8 <d_name+0x270>
 8001502:	7803      	ldrb	r3, [r0, #0]
 8001504:	2b45      	cmp	r3, #69	; 0x45
 8001506:	f000 8094 	beq.w	8001632 <d_name+0x2ba>
 800150a:	2b47      	cmp	r3, #71	; 0x47
 800150c:	f000 8091 	beq.w	8001632 <d_name+0x2ba>
 8001510:	68eb      	ldr	r3, [r5, #12]
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	2a5f      	cmp	r2, #95	; 0x5f
 8001516:	f040 808c 	bne.w	8001632 <d_name+0x2ba>
 800151a:	f04f 37ff 	mov.w	r7, #4294967295
 800151e:	4628      	mov	r0, r5
 8001520:	3301      	adds	r3, #1
 8001522:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001526:	f7fe ffa5 	bl	8000474 <d_number.isra.0>
 800152a:	2800      	cmp	r0, #0
 800152c:	f6ff af41 	blt.w	80013b2 <d_name+0x3a>
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	d07e      	beq.n	8001632 <d_name+0x2ba>
 8001534:	696b      	ldr	r3, [r5, #20]
 8001536:	69aa      	ldr	r2, [r5, #24]
 8001538:	4293      	cmp	r3, r2
 800153a:	da55      	bge.n	80015e8 <d_name+0x270>
 800153c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001540:	6929      	ldr	r1, [r5, #16]
 8001542:	3301      	adds	r3, #1
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	616b      	str	r3, [r5, #20]
 8001548:	188b      	adds	r3, r1, r2
 800154a:	d04e      	beq.n	80015ea <d_name+0x272>
 800154c:	2046      	movs	r0, #70	; 0x46
 800154e:	5488      	strb	r0, [r1, r2]
 8001550:	609f      	str	r7, [r3, #8]
 8001552:	605c      	str	r4, [r3, #4]
 8001554:	e049      	b.n	80015ea <d_name+0x272>
 8001556:	fa26 f303 	lsr.w	r3, r6, r3
 800155a:	07d9      	lsls	r1, r3, #31
 800155c:	f57f af53 	bpl.w	8001406 <d_name+0x8e>
 8001560:	4628      	mov	r0, r5
 8001562:	f000 fd6d 	bl	8002040 <d_unqualified_name>
 8001566:	b347      	cbz	r7, 80015ba <d_name+0x242>
 8001568:	2101      	movs	r1, #1
 800156a:	4603      	mov	r3, r0
 800156c:	463a      	mov	r2, r7
 800156e:	4628      	mov	r0, r5
 8001570:	f7fe fe2e 	bl	80001d0 <d_make_comp>
 8001574:	4607      	mov	r7, r0
 8001576:	2c53      	cmp	r4, #83	; 0x53
 8001578:	d01c      	beq.n	80015b4 <d_name+0x23c>
 800157a:	68ea      	ldr	r2, [r5, #12]
 800157c:	7814      	ldrb	r4, [r2, #0]
 800157e:	2c45      	cmp	r4, #69	; 0x45
 8001580:	f43f af3b 	beq.w	80013fa <d_name+0x82>
 8001584:	b1f7      	cbz	r7, 80015c4 <d_name+0x24c>
 8001586:	6a2b      	ldr	r3, [r5, #32]
 8001588:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800158a:	428b      	cmp	r3, r1
 800158c:	da1a      	bge.n	80015c4 <d_name+0x24c>
 800158e:	69e9      	ldr	r1, [r5, #28]
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001596:	6228      	str	r0, [r5, #32]
 8001598:	7814      	ldrb	r4, [r2, #0]
 800159a:	e728      	b.n	80013ee <d_name+0x76>
 800159c:	7853      	ldrb	r3, [r2, #1]
 800159e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015a2:	2b54      	cmp	r3, #84	; 0x54
 80015a4:	4628      	mov	r0, r5
 80015a6:	d00a      	beq.n	80015be <d_name+0x246>
 80015a8:	f000 fd4a 	bl	8002040 <d_unqualified_name>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	d1db      	bne.n	8001568 <d_name+0x1f0>
 80015b0:	4607      	mov	r7, r0
 80015b2:	e7e2      	b.n	800157a <d_name+0x202>
 80015b4:	68ea      	ldr	r2, [r5, #12]
 80015b6:	7814      	ldrb	r4, [r2, #0]
 80015b8:	e719      	b.n	80013ee <d_name+0x76>
 80015ba:	4607      	mov	r7, r0
 80015bc:	e7db      	b.n	8001576 <d_name+0x1fe>
 80015be:	f000 f897 	bl	80016f0 <d_type>
 80015c2:	e7f3      	b.n	80015ac <d_name+0x234>
 80015c4:	2200      	movs	r2, #0
 80015c6:	4610      	mov	r0, r2
 80015c8:	f8c9 2000 	str.w	r2, [r9]
 80015cc:	b005      	add	sp, #20
 80015ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d2:	4628      	mov	r0, r5
 80015d4:	e7e8      	b.n	80015a8 <d_name+0x230>
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d0f4      	beq.n	80015c4 <d_name+0x24c>
 80015da:	3201      	adds	r2, #1
 80015dc:	60ea      	str	r2, [r5, #12]
 80015de:	4628      	mov	r0, r5
 80015e0:	f7ff fe5c 	bl	800129c <d_template_args_1>
 80015e4:	2104      	movs	r1, #4
 80015e6:	e7c0      	b.n	800156a <d_name+0x1f2>
 80015e8:	2300      	movs	r3, #0
 80015ea:	4632      	mov	r2, r6
 80015ec:	4628      	mov	r0, r5
 80015ee:	2102      	movs	r1, #2
 80015f0:	f7fe fdee 	bl	80001d0 <d_make_comp>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4610      	mov	r0, r2
 80015f8:	b005      	add	sp, #20
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	2101      	movs	r1, #1
 8001600:	4628      	mov	r0, r5
 8001602:	f7ff f82f 	bl	8000664 <d_substitution>
 8001606:	2f00      	cmp	r7, #0
 8001608:	d1ae      	bne.n	8001568 <d_name+0x1f0>
 800160a:	68ea      	ldr	r2, [r5, #12]
 800160c:	4607      	mov	r7, r0
 800160e:	7814      	ldrb	r4, [r2, #0]
 8001610:	e6ed      	b.n	80013ee <d_name+0x76>
 8001612:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001616:	6901      	ldr	r1, [r0, #16]
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	3301      	adds	r3, #1
 800161c:	188c      	adds	r4, r1, r2
 800161e:	6143      	str	r3, [r0, #20]
 8001620:	f43f af4d 	beq.w	80014be <d_name+0x146>
 8001624:	2300      	movs	r3, #0
 8001626:	548b      	strb	r3, [r1, r2]
 8001628:	4824      	ldr	r0, [pc, #144]	; (80016bc <d_name+0x344>)
 800162a:	6060      	str	r0, [r4, #4]
 800162c:	2303      	movs	r3, #3
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	e745      	b.n	80014be <d_name+0x146>
 8001632:	4623      	mov	r3, r4
 8001634:	e7d9      	b.n	80015ea <d_name+0x272>
 8001636:	1c9a      	adds	r2, r3, #2
 8001638:	60ea      	str	r2, [r5, #12]
 800163a:	789a      	ldrb	r2, [r3, #2]
 800163c:	2a5f      	cmp	r2, #95	; 0x5f
 800163e:	d032      	beq.n	80016a6 <d_name+0x32e>
 8001640:	696b      	ldr	r3, [r5, #20]
 8001642:	69aa      	ldr	r2, [r5, #24]
 8001644:	4293      	cmp	r3, r2
 8001646:	dacf      	bge.n	80015e8 <d_name+0x270>
 8001648:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800164c:	6929      	ldr	r1, [r5, #16]
 800164e:	3301      	adds	r3, #1
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	616b      	str	r3, [r5, #20]
 8001654:	188b      	adds	r3, r1, r2
 8001656:	d0c8      	beq.n	80015ea <d_name+0x272>
 8001658:	2400      	movs	r4, #0
 800165a:	548c      	strb	r4, [r1, r2]
 800165c:	4818      	ldr	r0, [pc, #96]	; (80016c0 <d_name+0x348>)
 800165e:	6058      	str	r0, [r3, #4]
 8001660:	220e      	movs	r2, #14
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e7c1      	b.n	80015ea <d_name+0x272>
 8001666:	4628      	mov	r0, r5
 8001668:	f7fe ff62 	bl	8000530 <d_template_param>
 800166c:	e79e      	b.n	80015ac <d_name+0x234>
 800166e:	3302      	adds	r3, #2
 8001670:	60eb      	str	r3, [r5, #12]
 8001672:	4628      	mov	r0, r5
 8001674:	f7fe ff40 	bl	80004f8 <d_compact_number>
 8001678:	1e07      	subs	r7, r0, #0
 800167a:	f6ff ae9a 	blt.w	80013b2 <d_name+0x3a>
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fe7a 	bl	8001378 <d_name>
 8001684:	4604      	mov	r4, r0
 8001686:	2800      	cmp	r0, #0
 8001688:	f43f af54 	beq.w	8001534 <d_name+0x1bc>
 800168c:	7803      	ldrb	r3, [r0, #0]
 800168e:	2b45      	cmp	r3, #69	; 0x45
 8001690:	f43f af50 	beq.w	8001534 <d_name+0x1bc>
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	f43f af4d 	beq.w	8001534 <d_name+0x1bc>
 800169a:	68eb      	ldr	r3, [r5, #12]
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	2a5f      	cmp	r2, #95	; 0x5f
 80016a0:	f47f af48 	bne.w	8001534 <d_name+0x1bc>
 80016a4:	e73b      	b.n	800151e <d_name+0x1a6>
 80016a6:	4628      	mov	r0, r5
 80016a8:	3303      	adds	r3, #3
 80016aa:	f840 3f0c 	str.w	r3, [r0, #12]!
 80016ae:	f7fe fee1 	bl	8000474 <d_number.isra.0>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	dac4      	bge.n	8001640 <d_name+0x2c8>
 80016b6:	e67c      	b.n	80013b2 <d_name+0x3a>
 80016b8:	100803ff 	.word	0x100803ff
 80016bc:	08016d78 	.word	0x08016d78
 80016c0:	08016d68 	.word	0x08016d68
 80016c4:	f8c9 7000 	str.w	r7, [r9]
 80016c8:	2f00      	cmp	r7, #0
 80016ca:	f43f ae72 	beq.w	80013b2 <d_name+0x3a>
 80016ce:	f1b8 0f00 	cmp.w	r8, #0
 80016d2:	d004      	beq.n	80016de <d_name+0x366>
 80016d4:	9b03      	ldr	r3, [sp, #12]
 80016d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80016da:	f8cd 800c 	str.w	r8, [sp, #12]
 80016de:	7813      	ldrb	r3, [r2, #0]
 80016e0:	2b45      	cmp	r3, #69	; 0x45
 80016e2:	f47f ae66 	bne.w	80013b2 <d_name+0x3a>
 80016e6:	3201      	adds	r2, #1
 80016e8:	60ea      	str	r2, [r5, #12]
 80016ea:	9a03      	ldr	r2, [sp, #12]
 80016ec:	e669      	b.n	80013c2 <d_name+0x4a>
 80016ee:	bf00      	nop

080016f0 <d_type>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b72      	cmp	r3, #114	; 0x72
 80016fa:	b083      	sub	sp, #12
 80016fc:	4604      	mov	r4, r0
 80016fe:	d058      	beq.n	80017b2 <d_type+0xc2>
 8001700:	2b56      	cmp	r3, #86	; 0x56
 8001702:	d056      	beq.n	80017b2 <d_type+0xc2>
 8001704:	2b4b      	cmp	r3, #75	; 0x4b
 8001706:	d054      	beq.n	80017b2 <d_type+0xc2>
 8001708:	2b44      	cmp	r3, #68	; 0x44
 800170a:	f000 809f 	beq.w	800184c <d_type+0x15c>
 800170e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001712:	294a      	cmp	r1, #74	; 0x4a
 8001714:	f200 808a 	bhi.w	800182c <d_type+0x13c>
 8001718:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171c:	012a012a 	.word	0x012a012a
 8001720:	012a012a 	.word	0x012a012a
 8001724:	012a012a 	.word	0x012a012a
 8001728:	012a012a 	.word	0x012a012a
 800172c:	012a012a 	.word	0x012a012a
 8001730:	00880088 	.word	0x00880088
 8001734:	00880088 	.word	0x00880088
 8001738:	00880088 	.word	0x00880088
 800173c:	020b0088 	.word	0x020b0088
 8001740:	01520088 	.word	0x01520088
 8001744:	00880088 	.word	0x00880088
 8001748:	0160014c 	.word	0x0160014c
 800174c:	00880088 	.word	0x00880088
 8001750:	00880088 	.word	0x00880088
 8001754:	016e0088 	.word	0x016e0088
 8001758:	0186012a 	.word	0x0186012a
 800175c:	008801c3 	.word	0x008801c3
 8001760:	01a20194 	.word	0x01a20194
 8001764:	01f301d1 	.word	0x01f301d1
 8001768:	00880088 	.word	0x00880088
 800176c:	00880088 	.word	0x00880088
 8001770:	0088012a 	.word	0x0088012a
 8001774:	00880088 	.word	0x00880088
 8001778:	00880088 	.word	0x00880088
 800177c:	010c0088 	.word	0x010c0088
 8001780:	010c010c 	.word	0x010c010c
 8001784:	010c010c 	.word	0x010c010c
 8001788:	010c010c 	.word	0x010c010c
 800178c:	010c010c 	.word	0x010c010c
 8001790:	0088010c 	.word	0x0088010c
 8001794:	010c010c 	.word	0x010c010c
 8001798:	010c010c 	.word	0x010c010c
 800179c:	00880088 	.word	0x00880088
 80017a0:	010c0088 	.word	0x010c0088
 80017a4:	013e010c 	.word	0x013e010c
 80017a8:	010c010c 	.word	0x010c010c
 80017ac:	010c010c 	.word	0x010c010c
 80017b0:	010c      	.short	0x010c
 80017b2:	2200      	movs	r2, #0
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7fe fd56 	bl	8000268 <d_cv_qualifiers>
 80017bc:	4605      	mov	r5, r0
 80017be:	2800      	cmp	r0, #0
 80017c0:	d034      	beq.n	800182c <d_type+0x13c>
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b46      	cmp	r3, #70	; 0x46
 80017c8:	4620      	mov	r0, r4
 80017ca:	d034      	beq.n	8001836 <d_type+0x146>
 80017cc:	f7ff ff90 	bl	80016f0 <d_type>
 80017d0:	6028      	str	r0, [r5, #0]
 80017d2:	b358      	cbz	r0, 800182c <d_type+0x13c>
 80017d4:	7803      	ldrb	r3, [r0, #0]
 80017d6:	3b1f      	subs	r3, #31
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d930      	bls.n	800183e <d_type+0x14e>
 80017dc:	9a01      	ldr	r2, [sp, #4]
 80017de:	b32a      	cbz	r2, 800182c <d_type+0x13c>
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017e4:	428b      	cmp	r3, r1
 80017e6:	da21      	bge.n	800182c <d_type+0x13c>
 80017e8:	69e0      	ldr	r0, [r4, #28]
 80017ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80017ee:	9d01      	ldr	r5, [sp, #4]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	4628      	mov	r0, r5
 80017f4:	6221      	str	r1, [r4, #32]
 80017f6:	b003      	add	sp, #12
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	2301      	movs	r3, #1
 80017fe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001800:	6343      	str	r3, [r0, #52]	; 0x34
 8001802:	f7ff fb51 	bl	8000ea8 <d_expression_1>
 8001806:	6365      	str	r5, [r4, #52]	; 0x34
 8001808:	4602      	mov	r2, r0
 800180a:	2300      	movs	r3, #0
 800180c:	2142      	movs	r1, #66	; 0x42
 800180e:	4620      	mov	r0, r4
 8001810:	f7fe fcde 	bl	80001d0 <d_make_comp>
 8001814:	4605      	mov	r5, r0
 8001816:	9001      	str	r0, [sp, #4]
 8001818:	b140      	cbz	r0, 800182c <d_type+0x13c>
 800181a:	68e3      	ldr	r3, [r4, #12]
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	b12a      	cbz	r2, 800182c <d_type+0x13c>
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60e2      	str	r2, [r4, #12]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b45      	cmp	r3, #69	; 0x45
 8001828:	f000 80aa 	beq.w	8001980 <d_type+0x290>
 800182c:	2500      	movs	r5, #0
 800182e:	4628      	mov	r0, r5
 8001830:	b003      	add	sp, #12
 8001832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001836:	f000 fd53 	bl	80022e0 <d_function_type>
 800183a:	6028      	str	r0, [r5, #0]
 800183c:	e7c9      	b.n	80017d2 <d_type+0xe2>
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	6042      	str	r2, [r0, #4]
 8001844:	682a      	ldr	r2, [r5, #0]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	e7c7      	b.n	80017dc <d_type+0xec>
 800184c:	7853      	ldrb	r3, [r2, #1]
 800184e:	2b78      	cmp	r3, #120	; 0x78
 8001850:	d0af      	beq.n	80017b2 <d_type+0xc2>
 8001852:	1c53      	adds	r3, r2, #1
 8001854:	60c3      	str	r3, [r0, #12]
 8001856:	7853      	ldrb	r3, [r2, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e7      	beq.n	800182c <d_type+0x13c>
 800185c:	1c93      	adds	r3, r2, #2
 800185e:	60c3      	str	r3, [r0, #12]
 8001860:	7853      	ldrb	r3, [r2, #1]
 8001862:	3b46      	subs	r3, #70	; 0x46
 8001864:	2b30      	cmp	r3, #48	; 0x30
 8001866:	d8e1      	bhi.n	800182c <d_type+0x13c>
 8001868:	a101      	add	r1, pc, #4	; (adr r1, 8001870 <d_type+0x180>)
 800186a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001d5b 	.word	0x08001d5b
 8001874:	0800182d 	.word	0x0800182d
 8001878:	0800182d 	.word	0x0800182d
 800187c:	0800182d 	.word	0x0800182d
 8001880:	0800182d 	.word	0x0800182d
 8001884:	0800182d 	.word	0x0800182d
 8001888:	0800182d 	.word	0x0800182d
 800188c:	0800182d 	.word	0x0800182d
 8001890:	0800182d 	.word	0x0800182d
 8001894:	0800182d 	.word	0x0800182d
 8001898:	0800182d 	.word	0x0800182d
 800189c:	0800182d 	.word	0x0800182d
 80018a0:	0800182d 	.word	0x0800182d
 80018a4:	0800182d 	.word	0x0800182d
 80018a8:	080017fd 	.word	0x080017fd
 80018ac:	0800182d 	.word	0x0800182d
 80018b0:	0800182d 	.word	0x0800182d
 80018b4:	0800182d 	.word	0x0800182d
 80018b8:	0800182d 	.word	0x0800182d
 80018bc:	0800182d 	.word	0x0800182d
 80018c0:	0800182d 	.word	0x0800182d
 80018c4:	0800182d 	.word	0x0800182d
 80018c8:	0800182d 	.word	0x0800182d
 80018cc:	0800182d 	.word	0x0800182d
 80018d0:	0800182d 	.word	0x0800182d
 80018d4:	0800182d 	.word	0x0800182d
 80018d8:	0800182d 	.word	0x0800182d
 80018dc:	08001d2f 	.word	0x08001d2f
 80018e0:	0800182d 	.word	0x0800182d
 80018e4:	08001d03 	.word	0x08001d03
 80018e8:	08001ce3 	.word	0x08001ce3
 80018ec:	08001cb9 	.word	0x08001cb9
 80018f0:	08001c8b 	.word	0x08001c8b
 80018f4:	0800182d 	.word	0x0800182d
 80018f8:	08001c5d 	.word	0x08001c5d
 80018fc:	08001c39 	.word	0x08001c39
 8001900:	0800182d 	.word	0x0800182d
 8001904:	0800182d 	.word	0x0800182d
 8001908:	0800182d 	.word	0x0800182d
 800190c:	0800182d 	.word	0x0800182d
 8001910:	08001bff 	.word	0x08001bff
 8001914:	0800182d 	.word	0x0800182d
 8001918:	08001be9 	.word	0x08001be9
 800191c:	0800182d 	.word	0x0800182d
 8001920:	0800182d 	.word	0x0800182d
 8001924:	08001bbb 	.word	0x08001bbb
 8001928:	080017fd 	.word	0x080017fd
 800192c:	0800182d 	.word	0x0800182d
 8001930:	08001b85 	.word	0x08001b85
 8001934:	6960      	ldr	r0, [r4, #20]
 8001936:	69a5      	ldr	r5, [r4, #24]
 8001938:	49bc      	ldr	r1, [pc, #752]	; (8001c2c <d_type+0x53c>)
 800193a:	3b61      	subs	r3, #97	; 0x61
 800193c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001940:	42a8      	cmp	r0, r5
 8001942:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001946:	f280 823a 	bge.w	8001dbe <d_type+0x6ce>
 800194a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800194e:	6926      	ldr	r6, [r4, #16]
 8001950:	0089      	lsls	r1, r1, #2
 8001952:	3001      	adds	r0, #1
 8001954:	1875      	adds	r5, r6, r1
 8001956:	6160      	str	r0, [r4, #20]
 8001958:	f000 8231 	beq.w	8001dbe <d_type+0x6ce>
 800195c:	2027      	movs	r0, #39	; 0x27
 800195e:	5470      	strb	r0, [r6, r1]
 8001960:	606b      	str	r3, [r5, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001966:	3201      	adds	r2, #1
 8001968:	440b      	add	r3, r1
 800196a:	60e2      	str	r2, [r4, #12]
 800196c:	6323      	str	r3, [r4, #48]	; 0x30
 800196e:	e75e      	b.n	800182e <d_type+0x13e>
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fd01 	bl	8001378 <d_name>
 8001976:	4605      	mov	r5, r0
 8001978:	9001      	str	r0, [sp, #4]
 800197a:	2d00      	cmp	r5, #0
 800197c:	f43f af56 	beq.w	800182c <d_type+0x13c>
 8001980:	6a23      	ldr	r3, [r4, #32]
 8001982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001984:	4293      	cmp	r3, r2
 8001986:	f6bf af51 	bge.w	800182c <d_type+0x13c>
 800198a:	69e1      	ldr	r1, [r4, #28]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001992:	9d01      	ldr	r5, [sp, #4]
 8001994:	6222      	str	r2, [r4, #32]
 8001996:	e74a      	b.n	800182e <d_type+0x13e>
 8001998:	3201      	adds	r2, #1
 800199a:	60e2      	str	r2, [r4, #12]
 800199c:	4620      	mov	r0, r4
 800199e:	f7fe fde9 	bl	8000574 <d_source_name>
 80019a2:	2300      	movs	r3, #0
 80019a4:	4602      	mov	r2, r0
 80019a6:	2128      	movs	r1, #40	; 0x28
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7fe fc11 	bl	80001d0 <d_make_comp>
 80019ae:	4605      	mov	r5, r0
 80019b0:	9001      	str	r0, [sp, #4]
 80019b2:	e7e2      	b.n	800197a <d_type+0x28a>
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 fc93 	bl	80022e0 <d_function_type>
 80019ba:	4605      	mov	r5, r0
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	e7dc      	b.n	800197a <d_type+0x28a>
 80019c0:	3201      	adds	r2, #1
 80019c2:	60e2      	str	r2, [r4, #12]
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fe93 	bl	80016f0 <d_type>
 80019ca:	2300      	movs	r3, #0
 80019cc:	4602      	mov	r2, r0
 80019ce:	2125      	movs	r1, #37	; 0x25
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7fe fbfd 	bl	80001d0 <d_make_comp>
 80019d6:	4605      	mov	r5, r0
 80019d8:	9001      	str	r0, [sp, #4]
 80019da:	e7ce      	b.n	800197a <d_type+0x28a>
 80019dc:	3201      	adds	r2, #1
 80019de:	60e2      	str	r2, [r4, #12]
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fe85 	bl	80016f0 <d_type>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4602      	mov	r2, r0
 80019ea:	2126      	movs	r1, #38	; 0x26
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7fe fbef 	bl	80001d0 <d_make_comp>
 80019f2:	4605      	mov	r5, r0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	e7c0      	b.n	800197a <d_type+0x28a>
 80019f8:	3201      	adds	r2, #1
 80019fa:	60e2      	str	r2, [r4, #12]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fe77 	bl	80016f0 <d_type>
 8001a02:	4605      	mov	r5, r0
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f000 80bb 	beq.w	8001b80 <d_type+0x490>
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fe70 	bl	80016f0 <d_type>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f000 80b5 	beq.w	8001b80 <d_type+0x490>
 8001a16:	4603      	mov	r3, r0
 8001a18:	462a      	mov	r2, r5
 8001a1a:	212b      	movs	r1, #43	; 0x2b
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7fe fbd7 	bl	80001d0 <d_make_comp>
 8001a22:	4605      	mov	r5, r0
 8001a24:	9501      	str	r5, [sp, #4]
 8001a26:	e7a8      	b.n	800197a <d_type+0x28a>
 8001a28:	3201      	adds	r2, #1
 8001a2a:	60e2      	str	r2, [r4, #12]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe5f 	bl	80016f0 <d_type>
 8001a32:	2300      	movs	r3, #0
 8001a34:	4602      	mov	r2, r0
 8001a36:	2124      	movs	r1, #36	; 0x24
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fbc9 	bl	80001d0 <d_make_comp>
 8001a3e:	4605      	mov	r5, r0
 8001a40:	9001      	str	r0, [sp, #4]
 8001a42:	e79a      	b.n	800197a <d_type+0x28a>
 8001a44:	3201      	adds	r2, #1
 8001a46:	60e2      	str	r2, [r4, #12]
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fe51 	bl	80016f0 <d_type>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4602      	mov	r2, r0
 8001a52:	2123      	movs	r1, #35	; 0x23
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fbbb 	bl	80001d0 <d_make_comp>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	e78c      	b.n	800197a <d_type+0x28a>
 8001a60:	7853      	ldrb	r3, [r2, #1]
 8001a62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a66:	2a09      	cmp	r2, #9
 8001a68:	d905      	bls.n	8001a76 <d_type+0x386>
 8001a6a:	2b5f      	cmp	r3, #95	; 0x5f
 8001a6c:	d003      	beq.n	8001a76 <d_type+0x386>
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	2b19      	cmp	r3, #25
 8001a72:	f200 81c3 	bhi.w	8001dfc <d_type+0x70c>
 8001a76:	2100      	movs	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fdf3 	bl	8000664 <d_substitution>
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b49      	cmp	r3, #73	; 0x49
 8001a86:	4605      	mov	r5, r0
 8001a88:	f47f aed1 	bne.w	800182e <d_type+0x13e>
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fc69 	bl	8001364 <d_template_args>
 8001a92:	462a      	mov	r2, r5
 8001a94:	4603      	mov	r3, r0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7fe fb99 	bl	80001d0 <d_make_comp>
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	e7c0      	b.n	8001a24 <d_type+0x334>
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	60e2      	str	r2, [r4, #12]
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fe22 	bl	80016f0 <d_type>
 8001aac:	2300      	movs	r3, #0
 8001aae:	4602      	mov	r2, r0
 8001ab0:	2122      	movs	r1, #34	; 0x22
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7fe fb8c 	bl	80001d0 <d_make_comp>
 8001ab8:	4605      	mov	r5, r0
 8001aba:	9001      	str	r0, [sp, #4]
 8001abc:	e75d      	b.n	800197a <d_type+0x28a>
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7fe fd36 	bl	8000530 <d_template_param>
 8001ac4:	68e6      	ldr	r6, [r4, #12]
 8001ac6:	9001      	str	r0, [sp, #4]
 8001ac8:	7833      	ldrb	r3, [r6, #0]
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	4605      	mov	r5, r0
 8001ace:	f47f af54 	bne.w	800197a <d_type+0x28a>
 8001ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 81a9 	bne.w	8001e2c <d_type+0x73c>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	f43f aea6 	beq.w	800182c <d_type+0x13c>
 8001ae0:	6a23      	ldr	r3, [r4, #32]
 8001ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f6bf aea1 	bge.w	800182c <d_type+0x13c>
 8001aea:	69e1      	ldr	r1, [r4, #28]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001af2:	6222      	str	r2, [r4, #32]
 8001af4:	4620      	mov	r0, r4
 8001af6:	9d01      	ldr	r5, [sp, #4]
 8001af8:	f7ff fc34 	bl	8001364 <d_template_args>
 8001afc:	462a      	mov	r2, r5
 8001afe:	4603      	mov	r3, r0
 8001b00:	e7c9      	b.n	8001a96 <d_type+0x3a6>
 8001b02:	3201      	adds	r2, #1
 8001b04:	60e2      	str	r2, [r4, #12]
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7fe fd34 	bl	8000574 <d_source_name>
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	9001      	str	r0, [sp, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b49      	cmp	r3, #73	; 0x49
 8001b14:	4605      	mov	r5, r0
 8001b16:	f000 817e 	beq.w	8001e16 <d_type+0x726>
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fde8 	bl	80016f0 <d_type>
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	4602      	mov	r2, r0
 8001b24:	2121      	movs	r1, #33	; 0x21
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7fe fb52 	bl	80001d0 <d_make_comp>
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	e723      	b.n	800197a <d_type+0x28a>
 8001b32:	1c51      	adds	r1, r2, #1
 8001b34:	60e1      	str	r1, [r4, #12]
 8001b36:	7853      	ldrb	r3, [r2, #1]
 8001b38:	2b5f      	cmp	r3, #95	; 0x5f
 8001b3a:	f000 8144 	beq.w	8001dc6 <d_type+0x6d6>
 8001b3e:	3b30      	subs	r3, #48	; 0x30
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	f200 814e 	bhi.w	8001de2 <d_type+0x6f2>
 8001b46:	460b      	mov	r3, r1
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60e3      	str	r3, [r4, #12]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	3a30      	subs	r2, #48	; 0x30
 8001b50:	2a09      	cmp	r2, #9
 8001b52:	d9f9      	bls.n	8001b48 <d_type+0x458>
 8001b54:	6962      	ldr	r2, [r4, #20]
 8001b56:	69a0      	ldr	r0, [r4, #24]
 8001b58:	4282      	cmp	r2, r0
 8001b5a:	da11      	bge.n	8001b80 <d_type+0x490>
 8001b5c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001b60:	6926      	ldr	r6, [r4, #16]
 8001b62:	0080      	lsls	r0, r0, #2
 8001b64:	3201      	adds	r2, #1
 8001b66:	1835      	adds	r5, r6, r0
 8001b68:	6162      	str	r2, [r4, #20]
 8001b6a:	d009      	beq.n	8001b80 <d_type+0x490>
 8001b6c:	1a5a      	subs	r2, r3, r1
 8001b6e:	d007      	beq.n	8001b80 <d_type+0x490>
 8001b70:	2700      	movs	r7, #0
 8001b72:	5437      	strb	r7, [r6, r0]
 8001b74:	6069      	str	r1, [r5, #4]
 8001b76:	60aa      	str	r2, [r5, #8]
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	2a5f      	cmp	r2, #95	; 0x5f
 8001b7c:	f000 8190 	beq.w	8001ea0 <d_type+0x7b0>
 8001b80:	2500      	movs	r5, #0
 8001b82:	e74f      	b.n	8001a24 <d_type+0x334>
 8001b84:	7893      	ldrb	r3, [r2, #2]
 8001b86:	2b5f      	cmp	r3, #95	; 0x5f
 8001b88:	f000 8180 	beq.w	8001e8c <d_type+0x79c>
 8001b8c:	f7fe fc9c 	bl	80004c8 <d_number_component>
 8001b90:	4605      	mov	r5, r0
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	f43f af46 	beq.w	8001a24 <d_type+0x334>
 8001b98:	68e3      	ldr	r3, [r4, #12]
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	2a5f      	cmp	r2, #95	; 0x5f
 8001b9e:	d1ef      	bne.n	8001b80 <d_type+0x490>
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60e3      	str	r3, [r4, #12]
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff fda3 	bl	80016f0 <d_type>
 8001baa:	462a      	mov	r2, r5
 8001bac:	4603      	mov	r3, r0
 8001bae:	212d      	movs	r1, #45	; 0x2d
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe fb0d 	bl	80001d0 <d_make_comp>
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	e734      	b.n	8001a24 <d_type+0x334>
 8001bba:	6942      	ldr	r2, [r0, #20]
 8001bbc:	6983      	ldr	r3, [r0, #24]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f280 80fd 	bge.w	8001dbe <d_type+0x6ce>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6901      	ldr	r1, [r0, #16]
 8001bc8:	fb03 f302 	mul.w	r3, r3, r2
 8001bcc:	18cd      	adds	r5, r1, r3
 8001bce:	f102 0201 	add.w	r2, r2, #1
 8001bd2:	6142      	str	r2, [r0, #20]
 8001bd4:	f000 80f3 	beq.w	8001dbe <d_type+0x6ce>
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <d_type+0x540>)
 8001bda:	2027      	movs	r0, #39	; 0x27
 8001bdc:	54c8      	strb	r0, [r1, r3]
 8001bde:	606a      	str	r2, [r5, #4]
 8001be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be2:	3308      	adds	r3, #8
 8001be4:	6323      	str	r3, [r4, #48]	; 0x30
 8001be6:	e622      	b.n	800182e <d_type+0x13e>
 8001be8:	f7ff fd82 	bl	80016f0 <d_type>
 8001bec:	2300      	movs	r3, #0
 8001bee:	4602      	mov	r2, r0
 8001bf0:	214a      	movs	r1, #74	; 0x4a
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe faec 	bl	80001d0 <d_make_comp>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	9001      	str	r0, [sp, #4]
 8001bfc:	e6bd      	b.n	800197a <d_type+0x28a>
 8001bfe:	6942      	ldr	r2, [r0, #20]
 8001c00:	6983      	ldr	r3, [r0, #24]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f280 80db 	bge.w	8001dbe <d_type+0x6ce>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	6901      	ldr	r1, [r0, #16]
 8001c0c:	fb03 f302 	mul.w	r3, r3, r2
 8001c10:	18cd      	adds	r5, r1, r3
 8001c12:	f102 0201 	add.w	r2, r2, #1
 8001c16:	6142      	str	r2, [r0, #20]
 8001c18:	f000 80d1 	beq.w	8001dbe <d_type+0x6ce>
 8001c1c:	2027      	movs	r0, #39	; 0x27
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <d_type+0x544>)
 8001c20:	54c8      	strb	r0, [r1, r3]
 8001c22:	606a      	str	r2, [r5, #4]
 8001c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c26:	3311      	adds	r3, #17
 8001c28:	6323      	str	r3, [r4, #48]	; 0x30
 8001c2a:	e600      	b.n	800182e <d_type+0x13e>
 8001c2c:	08015eb4 	.word	0x08015eb4
 8001c30:	0801610c 	.word	0x0801610c
 8001c34:	08016134 	.word	0x08016134
 8001c38:	6942      	ldr	r2, [r0, #20]
 8001c3a:	6983      	ldr	r3, [r0, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f280 80be 	bge.w	8001dbe <d_type+0x6ce>
 8001c42:	230c      	movs	r3, #12
 8001c44:	6901      	ldr	r1, [r0, #16]
 8001c46:	fb03 f302 	mul.w	r3, r3, r2
 8001c4a:	18cd      	adds	r5, r1, r3
 8001c4c:	f102 0201 	add.w	r2, r2, #1
 8001c50:	6142      	str	r2, [r0, #20]
 8001c52:	f000 80b4 	beq.w	8001dbe <d_type+0x6ce>
 8001c56:	2027      	movs	r0, #39	; 0x27
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <d_type+0x7b4>)
 8001c5a:	e7bf      	b.n	8001bdc <d_type+0x4ec>
 8001c5c:	6942      	ldr	r2, [r0, #20]
 8001c5e:	6983      	ldr	r3, [r0, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f280 80ac 	bge.w	8001dbe <d_type+0x6ce>
 8001c66:	230c      	movs	r3, #12
 8001c68:	6901      	ldr	r1, [r0, #16]
 8001c6a:	fb03 f302 	mul.w	r3, r3, r2
 8001c6e:	18cd      	adds	r5, r1, r3
 8001c70:	f102 0201 	add.w	r2, r2, #1
 8001c74:	6142      	str	r2, [r0, #20]
 8001c76:	f000 80a2 	beq.w	8001dbe <d_type+0x6ce>
 8001c7a:	2027      	movs	r0, #39	; 0x27
 8001c7c:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <d_type+0x7b8>)
 8001c7e:	54c8      	strb	r0, [r1, r3]
 8001c80:	606a      	str	r2, [r5, #4]
 8001c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c84:	3304      	adds	r3, #4
 8001c86:	6323      	str	r3, [r4, #48]	; 0x30
 8001c88:	e5d1      	b.n	800182e <d_type+0x13e>
 8001c8a:	6942      	ldr	r2, [r0, #20]
 8001c8c:	6983      	ldr	r3, [r0, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f280 8095 	bge.w	8001dbe <d_type+0x6ce>
 8001c94:	230c      	movs	r3, #12
 8001c96:	6901      	ldr	r1, [r0, #16]
 8001c98:	fb03 f302 	mul.w	r3, r3, r2
 8001c9c:	18cd      	adds	r5, r1, r3
 8001c9e:	f102 0201 	add.w	r2, r2, #1
 8001ca2:	6142      	str	r2, [r0, #20]
 8001ca4:	f000 808b 	beq.w	8001dbe <d_type+0x6ce>
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <d_type+0x7bc>)
 8001caa:	2027      	movs	r0, #39	; 0x27
 8001cac:	54c8      	strb	r0, [r1, r3]
 8001cae:	606a      	str	r2, [r5, #4]
 8001cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cb2:	3309      	adds	r3, #9
 8001cb4:	6323      	str	r3, [r4, #48]	; 0x30
 8001cb6:	e5ba      	b.n	800182e <d_type+0x13e>
 8001cb8:	6942      	ldr	r2, [r0, #20]
 8001cba:	6983      	ldr	r3, [r0, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	da7e      	bge.n	8001dbe <d_type+0x6ce>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	6901      	ldr	r1, [r0, #16]
 8001cc4:	fb03 f302 	mul.w	r3, r3, r2
 8001cc8:	18cd      	adds	r5, r1, r3
 8001cca:	f102 0201 	add.w	r2, r2, #1
 8001cce:	6142      	str	r2, [r0, #20]
 8001cd0:	d075      	beq.n	8001dbe <d_type+0x6ce>
 8001cd2:	2027      	movs	r0, #39	; 0x27
 8001cd4:	4a76      	ldr	r2, [pc, #472]	; (8001eb0 <d_type+0x7c0>)
 8001cd6:	54c8      	strb	r0, [r1, r3]
 8001cd8:	606a      	str	r2, [r5, #4]
 8001cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cdc:	330a      	adds	r3, #10
 8001cde:	6323      	str	r3, [r4, #48]	; 0x30
 8001ce0:	e5a5      	b.n	800182e <d_type+0x13e>
 8001ce2:	6942      	ldr	r2, [r0, #20]
 8001ce4:	6983      	ldr	r3, [r0, #24]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	da69      	bge.n	8001dbe <d_type+0x6ce>
 8001cea:	230c      	movs	r3, #12
 8001cec:	6901      	ldr	r1, [r0, #16]
 8001cee:	fb03 f302 	mul.w	r3, r3, r2
 8001cf2:	18cd      	adds	r5, r1, r3
 8001cf4:	f102 0201 	add.w	r2, r2, #1
 8001cf8:	6142      	str	r2, [r0, #20]
 8001cfa:	d060      	beq.n	8001dbe <d_type+0x6ce>
 8001cfc:	2027      	movs	r0, #39	; 0x27
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <d_type+0x7c4>)
 8001d00:	e7d4      	b.n	8001cac <d_type+0x5bc>
 8001d02:	6942      	ldr	r2, [r0, #20]
 8001d04:	6983      	ldr	r3, [r0, #24]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f6bf ad90 	bge.w	800182c <d_type+0x13c>
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	6901      	ldr	r1, [r0, #16]
 8001d10:	fb03 f302 	mul.w	r3, r3, r2
 8001d14:	18cd      	adds	r5, r1, r3
 8001d16:	f102 0201 	add.w	r2, r2, #1
 8001d1a:	6142      	str	r2, [r0, #20]
 8001d1c:	f43f ad87 	beq.w	800182e <d_type+0x13e>
 8001d20:	2000      	movs	r0, #0
 8001d22:	54c8      	strb	r0, [r1, r3]
 8001d24:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <d_type+0x7c8>)
 8001d26:	606a      	str	r2, [r5, #4]
 8001d28:	230e      	movs	r3, #14
 8001d2a:	60ab      	str	r3, [r5, #8]
 8001d2c:	e57f      	b.n	800182e <d_type+0x13e>
 8001d2e:	6942      	ldr	r2, [r0, #20]
 8001d30:	6983      	ldr	r3, [r0, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f6bf ad7a 	bge.w	800182c <d_type+0x13c>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	fb03 f302 	mul.w	r3, r3, r2
 8001d40:	18cd      	adds	r5, r1, r3
 8001d42:	f102 0201 	add.w	r2, r2, #1
 8001d46:	6142      	str	r2, [r0, #20]
 8001d48:	f43f ad71 	beq.w	800182e <d_type+0x13e>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	54c8      	strb	r0, [r1, r3]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <d_type+0x7cc>)
 8001d52:	606a      	str	r2, [r5, #4]
 8001d54:	2304      	movs	r3, #4
 8001d56:	60ab      	str	r3, [r5, #8]
 8001d58:	e569      	b.n	800182e <d_type+0x13e>
 8001d5a:	6943      	ldr	r3, [r0, #20]
 8001d5c:	6981      	ldr	r1, [r0, #24]
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	da7a      	bge.n	8001e58 <d_type+0x768>
 8001d62:	6900      	ldr	r0, [r0, #16]
 8001d64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d68:	0089      	lsls	r1, r1, #2
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	1845      	adds	r5, r0, r1
 8001d6e:	262c      	movs	r6, #44	; 0x2c
 8001d70:	6163      	str	r3, [r4, #20]
 8001d72:	9501      	str	r5, [sp, #4]
 8001d74:	5446      	strb	r6, [r0, r1]
 8001d76:	7893      	ldrb	r3, [r2, #2]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	812b      	strh	r3, [r5, #8]
 8001d86:	d97b      	bls.n	8001e80 <d_type+0x790>
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fcb1 	bl	80016f0 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	6068      	str	r0, [r5, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad49 	beq.w	800182c <d_type+0x13c>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb69 	bl	8000474 <d_number.isra.0>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x6be>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	816b      	strh	r3, [r5, #10]
 8001dbc:	e537      	b.n	800182e <d_type+0x13e>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	deff      	udf	#255	; 0xff
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	3101      	adds	r1, #1
 8001dca:	60e1      	str	r1, [r4, #12]
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fc8f 	bl	80016f0 <d_type>
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	212a      	movs	r1, #42	; 0x2a
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe f9f9 	bl	80001d0 <d_make_comp>
 8001dde:	4605      	mov	r5, r0
 8001de0:	e620      	b.n	8001a24 <d_type+0x334>
 8001de2:	2301      	movs	r3, #1
 8001de4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001de6:	6363      	str	r3, [r4, #52]	; 0x34
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff f85d 	bl	8000ea8 <d_expression_1>
 8001dee:	6365      	str	r5, [r4, #52]	; 0x34
 8001df0:	4605      	mov	r5, r0
 8001df2:	2800      	cmp	r0, #0
 8001df4:	f43f aec4 	beq.w	8001b80 <d_type+0x490>
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	e6bd      	b.n	8001b78 <d_type+0x488>
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fabb 	bl	8001378 <d_name>
 8001e02:	4605      	mov	r5, r0
 8001e04:	9001      	str	r0, [sp, #4]
 8001e06:	2800      	cmp	r0, #0
 8001e08:	f43f ad10 	beq.w	800182c <d_type+0x13c>
 8001e0c:	7803      	ldrb	r3, [r0, #0]
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f47f adb6 	bne.w	8001980 <d_type+0x290>
 8001e14:	e50b      	b.n	800182e <d_type+0x13e>
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff faa4 	bl	8001364 <d_template_args>
 8001e1c:	462a      	mov	r2, r5
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2104      	movs	r1, #4
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe f9d4 	bl	80001d0 <d_make_comp>
 8001e28:	9001      	str	r0, [sp, #4]
 8001e2a:	e676      	b.n	8001b1a <d_type+0x42a>
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e32:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e3a:	f7ff fa93 	bl	8001364 <d_template_args>
 8001e3e:	68e2      	ldr	r2, [r4, #12]
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	2a49      	cmp	r2, #73	; 0x49
 8001e44:	d00b      	beq.n	8001e5e <d_type+0x76e>
 8001e46:	6325      	str	r5, [r4, #48]	; 0x30
 8001e48:	60e6      	str	r6, [r4, #12]
 8001e4a:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e4e:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e52:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e54:	9d01      	ldr	r5, [sp, #4]
 8001e56:	e590      	b.n	800197a <d_type+0x28a>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	701b      	strb	r3, [r3, #0]
 8001e5c:	deff      	udf	#255	; 0xff
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f43f ace3 	beq.w	800182c <d_type+0x13c>
 8001e66:	6a22      	ldr	r2, [r4, #32]
 8001e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e6a:	428a      	cmp	r2, r1
 8001e6c:	f6bf acde 	bge.w	800182c <d_type+0x13c>
 8001e70:	69e5      	ldr	r5, [r4, #28]
 8001e72:	1c51      	adds	r1, r2, #1
 8001e74:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001e78:	9a01      	ldr	r2, [sp, #4]
 8001e7a:	6221      	str	r1, [r4, #32]
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	e60a      	b.n	8001a96 <d_type+0x3a6>
 8001e80:	f104 000c 	add.w	r0, r4, #12
 8001e84:	f7fe faf6 	bl	8000474 <d_number.isra.0>
 8001e88:	9d01      	ldr	r5, [sp, #4]
 8001e8a:	e77d      	b.n	8001d88 <d_type+0x698>
 8001e8c:	3203      	adds	r2, #3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001e92:	60c2      	str	r2, [r0, #12]
 8001e94:	6343      	str	r3, [r0, #52]	; 0x34
 8001e96:	f7ff f807 	bl	8000ea8 <d_expression_1>
 8001e9a:	6366      	str	r6, [r4, #52]	; 0x34
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	e678      	b.n	8001b92 <d_type+0x4a2>
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	e791      	b.n	8001dc8 <d_type+0x6d8>
 8001ea4:	08016120 	.word	0x08016120
 8001ea8:	080160f8 	.word	0x080160f8
 8001eac:	080160bc 	.word	0x080160bc
 8001eb0:	080160e4 	.word	0x080160e4
 8001eb4:	080160d0 	.word	0x080160d0
 8001eb8:	08016d84 	.word	0x08016d84
 8001ebc:	08016d7c 	.word	0x08016d7c

08001ec0 <d_operator_name>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	68c3      	ldr	r3, [r0, #12]
 8001ec4:	781e      	ldrb	r6, [r3, #0]
 8001ec6:	4684      	mov	ip, r0
 8001ec8:	b326      	cbz	r6, 8001f14 <d_operator_name+0x54>
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60c2      	str	r2, [r0, #12]
 8001ece:	785a      	ldrb	r2, [r3, #1]
 8001ed0:	781e      	ldrb	r6, [r3, #0]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d058      	beq.n	8001f88 <d_operator_name+0xc8>
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	60c2      	str	r2, [r0, #12]
 8001eda:	2e76      	cmp	r6, #118	; 0x76
 8001edc:	4604      	mov	r4, r0
 8001ede:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001ee2:	d043      	beq.n	8001f6c <d_operator_name+0xac>
 8001ee4:	2e63      	cmp	r6, #99	; 0x63
 8001ee6:	d116      	bne.n	8001f16 <d_operator_name+0x56>
 8001ee8:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001eec:	d113      	bne.n	8001f16 <d_operator_name+0x56>
 8001eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ef0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	6383      	str	r3, [r0, #56]	; 0x38
 8001efa:	f7ff fbf9 	bl	80016f0 <d_type>
 8001efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f00:	4602      	mov	r2, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d052      	beq.n	8001fac <d_operator_name+0xec>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2134      	movs	r1, #52	; 0x34
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7fe f960 	bl	80001d0 <d_make_comp>
 8001f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f14:	46b6      	mov	lr, r6
 8001f16:	4c28      	ldr	r4, [pc, #160]	; (8001fb8 <d_operator_name+0xf8>)
 8001f18:	2043      	movs	r0, #67	; 0x43
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e004      	b.n	8001f28 <d_operator_name+0x68>
 8001f1e:	bf94      	ite	ls
 8001f20:	1c5a      	addls	r2, r3, #1
 8001f22:	4618      	movhi	r0, r3
 8001f24:	4282      	cmp	r2, r0
 8001f26:	d02d      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f28:	1a83      	subs	r3, r0, r2
 8001f2a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f2e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f32:	0119      	lsls	r1, r3, #4
 8001f34:	1867      	adds	r7, r4, r1
 8001f36:	5861      	ldr	r1, [r4, r1]
 8001f38:	780d      	ldrb	r5, [r1, #0]
 8001f3a:	42b5      	cmp	r5, r6
 8001f3c:	d1ef      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f3e:	7849      	ldrb	r1, [r1, #1]
 8001f40:	4571      	cmp	r1, lr
 8001f42:	d1ec      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f44:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001f48:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	da19      	bge.n	8001f84 <d_operator_name+0xc4>
 8001f50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f54:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	1888      	adds	r0, r1, r2
 8001f5e:	f8cc 3014 	str.w	r3, [ip, #20]
 8001f62:	d013      	beq.n	8001f8c <d_operator_name+0xcc>
 8001f64:	2331      	movs	r3, #49	; 0x31
 8001f66:	548b      	strb	r3, [r1, r2]
 8001f68:	6047      	str	r7, [r0, #4]
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001f70:	b2eb      	uxtb	r3, r5
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d8cf      	bhi.n	8001f16 <d_operator_name+0x56>
 8001f76:	f7fe fafd 	bl	8000574 <d_source_name>
 8001f7a:	6963      	ldr	r3, [r4, #20]
 8001f7c:	69a2      	ldr	r2, [r4, #24]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	4601      	mov	r1, r0
 8001f82:	db04      	blt.n	8001f8e <d_operator_name+0xce>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	4696      	mov	lr, r2
 8001f8a:	e7c4      	b.n	8001f16 <d_operator_name+0x56>
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f92:	6926      	ldr	r6, [r4, #16]
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	3301      	adds	r3, #1
 8001f98:	18b0      	adds	r0, r6, r2
 8001f9a:	6163      	str	r3, [r4, #20]
 8001f9c:	d0f2      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d0f0      	beq.n	8001f84 <d_operator_name+0xc4>
 8001fa2:	2332      	movs	r3, #50	; 0x32
 8001fa4:	54b3      	strb	r3, [r6, r2]
 8001fa6:	6045      	str	r5, [r0, #4]
 8001fa8:	6081      	str	r1, [r0, #8]
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fac:	2133      	movs	r1, #51	; 0x33
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe f90e 	bl	80001d0 <d_make_comp>
 8001fb4:	e7ac      	b.n	8001f10 <d_operator_name+0x50>
 8001fb6:	bf00      	nop
 8001fb8:	08016148 	.word	0x08016148

08001fbc <d_parmlist>:
 8001fbc:	b530      	push	{r4, r5, lr}
 8001fbe:	68c2      	ldr	r2, [r0, #12]
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	7813      	ldrb	r3, [r2, #0]
 8001fc8:	b343      	cbz	r3, 800201c <d_parmlist+0x60>
 8001fca:	2b45      	cmp	r3, #69	; 0x45
 8001fcc:	d026      	beq.n	800201c <d_parmlist+0x60>
 8001fce:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd0:	d024      	beq.n	800201c <d_parmlist+0x60>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	ad01      	add	r5, sp, #4
 8001fd6:	e015      	b.n	8002004 <d_parmlist+0x48>
 8001fd8:	2b4f      	cmp	r3, #79	; 0x4f
 8001fda:	d016      	beq.n	800200a <d_parmlist+0x4e>
 8001fdc:	f7ff fb88 	bl	80016f0 <d_type>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	212e      	movs	r1, #46	; 0x2e
 8001fe6:	b1c8      	cbz	r0, 800201c <d_parmlist+0x60>
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe f8f1 	bl	80001d0 <d_make_comp>
 8001fee:	6028      	str	r0, [r5, #0]
 8001ff0:	b1a0      	cbz	r0, 800201c <d_parmlist+0x60>
 8001ff2:	68e2      	ldr	r2, [r4, #12]
 8001ff4:	7813      	ldrb	r3, [r2, #0]
 8001ff6:	f100 0508 	add.w	r5, r0, #8
 8001ffa:	b14b      	cbz	r3, 8002010 <d_parmlist+0x54>
 8001ffc:	2b45      	cmp	r3, #69	; 0x45
 8001ffe:	d007      	beq.n	8002010 <d_parmlist+0x54>
 8002000:	2b2e      	cmp	r3, #46	; 0x2e
 8002002:	d005      	beq.n	8002010 <d_parmlist+0x54>
 8002004:	2b52      	cmp	r3, #82	; 0x52
 8002006:	4620      	mov	r0, r4
 8002008:	d1e6      	bne.n	8001fd8 <d_parmlist+0x1c>
 800200a:	7853      	ldrb	r3, [r2, #1]
 800200c:	2b45      	cmp	r3, #69	; 0x45
 800200e:	d1e5      	bne.n	8001fdc <d_parmlist+0x20>
 8002010:	9801      	ldr	r0, [sp, #4]
 8002012:	b118      	cbz	r0, 800201c <d_parmlist+0x60>
 8002014:	6883      	ldr	r3, [r0, #8]
 8002016:	b123      	cbz	r3, 8002022 <d_parmlist+0x66>
 8002018:	b003      	add	sp, #12
 800201a:	bd30      	pop	{r4, r5, pc}
 800201c:	2000      	movs	r0, #0
 800201e:	b003      	add	sp, #12
 8002020:	bd30      	pop	{r4, r5, pc}
 8002022:	6842      	ldr	r2, [r0, #4]
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	2927      	cmp	r1, #39	; 0x27
 8002028:	d1f6      	bne.n	8002018 <d_parmlist+0x5c>
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	7c11      	ldrb	r1, [r2, #16]
 800202e:	2909      	cmp	r1, #9
 8002030:	d1f2      	bne.n	8002018 <d_parmlist+0x5c>
 8002032:	6851      	ldr	r1, [r2, #4]
 8002034:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002036:	1a52      	subs	r2, r2, r1
 8002038:	6322      	str	r2, [r4, #48]	; 0x30
 800203a:	6043      	str	r3, [r0, #4]
 800203c:	e7ec      	b.n	8002018 <d_parmlist+0x5c>
 800203e:	bf00      	nop

08002040 <d_unqualified_name>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	68c1      	ldr	r1, [r0, #12]
 8002044:	780b      	ldrb	r3, [r1, #0]
 8002046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800204a:	2a09      	cmp	r2, #9
 800204c:	4604      	mov	r4, r0
 800204e:	d920      	bls.n	8002092 <d_unqualified_name+0x52>
 8002050:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002054:	2a19      	cmp	r2, #25
 8002056:	d925      	bls.n	80020a4 <d_unqualified_name+0x64>
 8002058:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800205c:	2a01      	cmp	r2, #1
 800205e:	d92c      	bls.n	80020ba <d_unqualified_name+0x7a>
 8002060:	2b4c      	cmp	r3, #76	; 0x4c
 8002062:	f000 8088 	beq.w	8002176 <d_unqualified_name+0x136>
 8002066:	2b55      	cmp	r3, #85	; 0x55
 8002068:	d133      	bne.n	80020d2 <d_unqualified_name+0x92>
 800206a:	784b      	ldrb	r3, [r1, #1]
 800206c:	2b6c      	cmp	r3, #108	; 0x6c
 800206e:	d033      	beq.n	80020d8 <d_unqualified_name+0x98>
 8002070:	2b74      	cmp	r3, #116	; 0x74
 8002072:	d12e      	bne.n	80020d2 <d_unqualified_name+0x92>
 8002074:	1c4b      	adds	r3, r1, #1
 8002076:	60c3      	str	r3, [r0, #12]
 8002078:	784b      	ldrb	r3, [r1, #1]
 800207a:	2b74      	cmp	r3, #116	; 0x74
 800207c:	d05a      	beq.n	8002134 <d_unqualified_name+0xf4>
 800207e:	2b42      	cmp	r3, #66	; 0x42
 8002080:	f04f 0500 	mov.w	r5, #0
 8002084:	d10c      	bne.n	80020a0 <d_unqualified_name+0x60>
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800208e:	f7fe bacd 	b.w	800062c <d_abi_tags>
 8002092:	f7fe fa6f 	bl	8000574 <d_source_name>
 8002096:	68e3      	ldr	r3, [r4, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4605      	mov	r5, r0
 800209c:	2b42      	cmp	r3, #66	; 0x42
 800209e:	d0f2      	beq.n	8002086 <d_unqualified_name+0x46>
 80020a0:	4628      	mov	r0, r5
 80020a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a4:	f7ff ff0c 	bl	8001ec0 <d_operator_name>
 80020a8:	4605      	mov	r5, r0
 80020aa:	b118      	cbz	r0, 80020b4 <d_unqualified_name+0x74>
 80020ac:	7803      	ldrb	r3, [r0, #0]
 80020ae:	2b31      	cmp	r3, #49	; 0x31
 80020b0:	f000 80b2 	beq.w	8002218 <d_unqualified_name+0x1d8>
 80020b4:	68e3      	ldr	r3, [r4, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	e7f0      	b.n	800209c <d_unqualified_name+0x5c>
 80020ba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80020bc:	b125      	cbz	r5, 80020c8 <d_unqualified_name+0x88>
 80020be:	782a      	ldrb	r2, [r5, #0]
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d06c      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c4:	2a18      	cmp	r2, #24
 80020c6:	d06a      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c8:	2b43      	cmp	r3, #67	; 0x43
 80020ca:	f000 80bf 	beq.w	800224c <d_unqualified_name+0x20c>
 80020ce:	2b44      	cmp	r3, #68	; 0x44
 80020d0:	d06f      	beq.n	80021b2 <d_unqualified_name+0x172>
 80020d2:	2500      	movs	r5, #0
 80020d4:	4628      	mov	r0, r5
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	1c4b      	adds	r3, r1, #1
 80020da:	60c3      	str	r3, [r0, #12]
 80020dc:	784b      	ldrb	r3, [r1, #1]
 80020de:	2b6c      	cmp	r3, #108	; 0x6c
 80020e0:	d1cd      	bne.n	800207e <d_unqualified_name+0x3e>
 80020e2:	3102      	adds	r1, #2
 80020e4:	60c1      	str	r1, [r0, #12]
 80020e6:	f7ff ff69 	bl	8001fbc <d_parmlist>
 80020ea:	4606      	mov	r6, r0
 80020ec:	b1f0      	cbz	r0, 800212c <d_unqualified_name+0xec>
 80020ee:	68e2      	ldr	r2, [r4, #12]
 80020f0:	7813      	ldrb	r3, [r2, #0]
 80020f2:	2b45      	cmp	r3, #69	; 0x45
 80020f4:	d1c3      	bne.n	800207e <d_unqualified_name+0x3e>
 80020f6:	3201      	adds	r2, #1
 80020f8:	60e2      	str	r2, [r4, #12]
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe f9fc 	bl	80004f8 <d_compact_number>
 8002100:	2800      	cmp	r0, #0
 8002102:	db13      	blt.n	800212c <d_unqualified_name+0xec>
 8002104:	6963      	ldr	r3, [r4, #20]
 8002106:	69a2      	ldr	r2, [r4, #24]
 8002108:	4293      	cmp	r3, r2
 800210a:	da0f      	bge.n	800212c <d_unqualified_name+0xec>
 800210c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002110:	6921      	ldr	r1, [r4, #16]
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	3301      	adds	r3, #1
 8002116:	188d      	adds	r5, r1, r2
 8002118:	6163      	str	r3, [r4, #20]
 800211a:	d0cb      	beq.n	80020b4 <d_unqualified_name+0x74>
 800211c:	2345      	movs	r3, #69	; 0x45
 800211e:	548b      	strb	r3, [r1, r2]
 8002120:	606e      	str	r6, [r5, #4]
 8002122:	60a8      	str	r0, [r5, #8]
 8002124:	6a23      	ldr	r3, [r4, #32]
 8002126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002128:	4293      	cmp	r3, r2
 800212a:	db1c      	blt.n	8002166 <d_unqualified_name+0x126>
 800212c:	68e3      	ldr	r3, [r4, #12]
 800212e:	2500      	movs	r5, #0
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	e7b3      	b.n	800209c <d_unqualified_name+0x5c>
 8002134:	3102      	adds	r1, #2
 8002136:	60c1      	str	r1, [r0, #12]
 8002138:	f7fe f9de 	bl	80004f8 <d_compact_number>
 800213c:	2800      	cmp	r0, #0
 800213e:	dbf5      	blt.n	800212c <d_unqualified_name+0xec>
 8002140:	6963      	ldr	r3, [r4, #20]
 8002142:	69a2      	ldr	r2, [r4, #24]
 8002144:	4293      	cmp	r3, r2
 8002146:	daf1      	bge.n	800212c <d_unqualified_name+0xec>
 8002148:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800214c:	6921      	ldr	r1, [r4, #16]
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	3301      	adds	r3, #1
 8002152:	188d      	adds	r5, r1, r2
 8002154:	6163      	str	r3, [r4, #20]
 8002156:	d0ad      	beq.n	80020b4 <d_unqualified_name+0x74>
 8002158:	2347      	movs	r3, #71	; 0x47
 800215a:	548b      	strb	r3, [r1, r2]
 800215c:	6068      	str	r0, [r5, #4]
 800215e:	6a23      	ldr	r3, [r4, #32]
 8002160:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002162:	4293      	cmp	r3, r2
 8002164:	dae2      	bge.n	800212c <d_unqualified_name+0xec>
 8002166:	69e1      	ldr	r1, [r4, #28]
 8002168:	68e2      	ldr	r2, [r4, #12]
 800216a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800216e:	3301      	adds	r3, #1
 8002170:	6223      	str	r3, [r4, #32]
 8002172:	7813      	ldrb	r3, [r2, #0]
 8002174:	e792      	b.n	800209c <d_unqualified_name+0x5c>
 8002176:	3101      	adds	r1, #1
 8002178:	60c1      	str	r1, [r0, #12]
 800217a:	f7fe f9fb 	bl	8000574 <d_source_name>
 800217e:	4605      	mov	r5, r0
 8002180:	2800      	cmp	r0, #0
 8002182:	d0a6      	beq.n	80020d2 <d_unqualified_name+0x92>
 8002184:	68e2      	ldr	r2, [r4, #12]
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	2b5f      	cmp	r3, #95	; 0x5f
 800218a:	d187      	bne.n	800209c <d_unqualified_name+0x5c>
 800218c:	4620      	mov	r0, r4
 800218e:	3201      	adds	r2, #1
 8002190:	f840 2f0c 	str.w	r2, [r0, #12]!
 8002194:	f7fe f96e 	bl	8000474 <d_number.isra.0>
 8002198:	2800      	cmp	r0, #0
 800219a:	da8b      	bge.n	80020b4 <d_unqualified_name+0x74>
 800219c:	e799      	b.n	80020d2 <d_unqualified_name+0x92>
 800219e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021a0:	68aa      	ldr	r2, [r5, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	6323      	str	r3, [r4, #48]	; 0x30
 80021a6:	780b      	ldrb	r3, [r1, #0]
 80021a8:	2b43      	cmp	r3, #67	; 0x43
 80021aa:	d04f      	beq.n	800224c <d_unqualified_name+0x20c>
 80021ac:	2b44      	cmp	r3, #68	; 0x44
 80021ae:	f47f af66 	bne.w	800207e <d_unqualified_name+0x3e>
 80021b2:	784b      	ldrb	r3, [r1, #1]
 80021b4:	3b30      	subs	r3, #48	; 0x30
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d88b      	bhi.n	80020d2 <d_unqualified_name+0x92>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <d_unqualified_name+0x180>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	08002215 	.word	0x08002215
 80021c4:	080021d9 	.word	0x080021d9
 80021c8:	08002211 	.word	0x08002211
 80021cc:	080020d3 	.word	0x080020d3
 80021d0:	0800220d 	.word	0x0800220d
 80021d4:	08002209 	.word	0x08002209
 80021d8:	2702      	movs	r7, #2
 80021da:	6963      	ldr	r3, [r4, #20]
 80021dc:	69a2      	ldr	r2, [r4, #24]
 80021de:	1c88      	adds	r0, r1, #2
 80021e0:	4293      	cmp	r3, r2
 80021e2:	60e0      	str	r0, [r4, #12]
 80021e4:	da56      	bge.n	8002294 <d_unqualified_name+0x254>
 80021e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80021ea:	6920      	ldr	r0, [r4, #16]
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	3301      	adds	r3, #1
 80021f0:	1886      	adds	r6, r0, r2
 80021f2:	6163      	str	r3, [r4, #20]
 80021f4:	d005      	beq.n	8002202 <d_unqualified_name+0x1c2>
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d04f      	beq.n	800229a <d_unqualified_name+0x25a>
 80021fa:	2308      	movs	r3, #8
 80021fc:	5483      	strb	r3, [r0, r2]
 80021fe:	7137      	strb	r7, [r6, #4]
 8002200:	60b5      	str	r5, [r6, #8]
 8002202:	788b      	ldrb	r3, [r1, #2]
 8002204:	4635      	mov	r5, r6
 8002206:	e749      	b.n	800209c <d_unqualified_name+0x5c>
 8002208:	2705      	movs	r7, #5
 800220a:	e7e6      	b.n	80021da <d_unqualified_name+0x19a>
 800220c:	2704      	movs	r7, #4
 800220e:	e7e4      	b.n	80021da <d_unqualified_name+0x19a>
 8002210:	2703      	movs	r7, #3
 8002212:	e7e2      	b.n	80021da <d_unqualified_name+0x19a>
 8002214:	2701      	movs	r7, #1
 8002216:	e7e0      	b.n	80021da <d_unqualified_name+0x19a>
 8002218:	6842      	ldr	r2, [r0, #4]
 800221a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800221c:	6896      	ldr	r6, [r2, #8]
 800221e:	6810      	ldr	r0, [r2, #0]
 8002220:	491f      	ldr	r1, [pc, #124]	; (80022a0 <d_unqualified_name+0x260>)
 8002222:	3307      	adds	r3, #7
 8002224:	4433      	add	r3, r6
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
 8002228:	f004 fb7a 	bl	8006920 <strcmp>
 800222c:	2800      	cmp	r0, #0
 800222e:	f47f af41 	bne.w	80020b4 <d_unqualified_name+0x74>
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe f99e 	bl	8000574 <d_source_name>
 8002238:	462a      	mov	r2, r5
 800223a:	4603      	mov	r3, r0
 800223c:	2136      	movs	r1, #54	; 0x36
 800223e:	4620      	mov	r0, r4
 8002240:	f7fd ffc6 	bl	80001d0 <d_make_comp>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	4605      	mov	r5, r0
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	e727      	b.n	800209c <d_unqualified_name+0x5c>
 800224c:	784b      	ldrb	r3, [r1, #1]
 800224e:	3b31      	subs	r3, #49	; 0x31
 8002250:	2b04      	cmp	r3, #4
 8002252:	f63f af3e 	bhi.w	80020d2 <d_unqualified_name+0x92>
 8002256:	e8df f003 	tbb	[pc, r3]
 800225a:	0315      	.short	0x0315
 800225c:	191b      	.short	0x191b
 800225e:	17          	.byte	0x17
 800225f:	00          	.byte	0x00
 8002260:	2702      	movs	r7, #2
 8002262:	6963      	ldr	r3, [r4, #20]
 8002264:	69a2      	ldr	r2, [r4, #24]
 8002266:	1c88      	adds	r0, r1, #2
 8002268:	4293      	cmp	r3, r2
 800226a:	60e0      	str	r0, [r4, #12]
 800226c:	da12      	bge.n	8002294 <d_unqualified_name+0x254>
 800226e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002272:	6920      	ldr	r0, [r4, #16]
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	3301      	adds	r3, #1
 8002278:	1886      	adds	r6, r0, r2
 800227a:	6163      	str	r3, [r4, #20]
 800227c:	d0c1      	beq.n	8002202 <d_unqualified_name+0x1c2>
 800227e:	b165      	cbz	r5, 800229a <d_unqualified_name+0x25a>
 8002280:	2307      	movs	r3, #7
 8002282:	e7bb      	b.n	80021fc <d_unqualified_name+0x1bc>
 8002284:	2701      	movs	r7, #1
 8002286:	e7ec      	b.n	8002262 <d_unqualified_name+0x222>
 8002288:	2705      	movs	r7, #5
 800228a:	e7ea      	b.n	8002262 <d_unqualified_name+0x222>
 800228c:	2704      	movs	r7, #4
 800228e:	e7e8      	b.n	8002262 <d_unqualified_name+0x222>
 8002290:	2703      	movs	r7, #3
 8002292:	e7e6      	b.n	8002262 <d_unqualified_name+0x222>
 8002294:	788b      	ldrb	r3, [r1, #2]
 8002296:	2500      	movs	r5, #0
 8002298:	e700      	b.n	800209c <d_unqualified_name+0x5c>
 800229a:	788b      	ldrb	r3, [r1, #2]
 800229c:	e6fe      	b.n	800209c <d_unqualified_name+0x5c>
 800229e:	bf00      	nop
 80022a0:	08016d94 	.word	0x08016d94

080022a4 <d_bare_function_type>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	68c3      	ldr	r3, [r0, #12]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	2a4a      	cmp	r2, #74	; 0x4a
 80022ac:	4604      	mov	r4, r0
 80022ae:	d00d      	beq.n	80022cc <d_bare_function_type+0x28>
 80022b0:	b971      	cbnz	r1, 80022d0 <d_bare_function_type+0x2c>
 80022b2:	460d      	mov	r5, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fe81 	bl	8001fbc <d_parmlist>
 80022ba:	b178      	cbz	r0, 80022dc <d_bare_function_type+0x38>
 80022bc:	4603      	mov	r3, r0
 80022be:	462a      	mov	r2, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	2129      	movs	r1, #41	; 0x29
 80022c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022c8:	f7fd bf82 	b.w	80001d0 <d_make_comp>
 80022cc:	3301      	adds	r3, #1
 80022ce:	60c3      	str	r3, [r0, #12]
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fa0d 	bl	80016f0 <d_type>
 80022d6:	4605      	mov	r5, r0
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1eb      	bne.n	80022b4 <d_bare_function_type+0x10>
 80022dc:	2000      	movs	r0, #0
 80022de:	bd70      	pop	{r4, r5, r6, pc}

080022e0 <d_function_type>:
 80022e0:	68c3      	ldr	r3, [r0, #12]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2a46      	cmp	r2, #70	; 0x46
 80022e6:	d001      	beq.n	80022ec <d_function_type+0xc>
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr
 80022ec:	b510      	push	{r4, lr}
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60c2      	str	r2, [r0, #12]
 80022f2:	785a      	ldrb	r2, [r3, #1]
 80022f4:	2a59      	cmp	r2, #89	; 0x59
 80022f6:	bf04      	itt	eq
 80022f8:	3302      	addeq	r3, #2
 80022fa:	60c3      	streq	r3, [r0, #12]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff ffd0 	bl	80022a4 <d_bare_function_type>
 8002304:	4601      	mov	r1, r0
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe f814 	bl	8000334 <d_ref_qualifier>
 800230c:	68e3      	ldr	r3, [r4, #12]
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	2a45      	cmp	r2, #69	; 0x45
 8002312:	d001      	beq.n	8002318 <d_function_type+0x38>
 8002314:	2000      	movs	r0, #0
 8002316:	bd10      	pop	{r4, pc}
 8002318:	3301      	adds	r3, #1
 800231a:	60e3      	str	r3, [r4, #12]
 800231c:	bd10      	pop	{r4, pc}
 800231e:	bf00      	nop

08002320 <d_encoding>:
 8002320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002324:	68c3      	ldr	r3, [r0, #12]
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	2a47      	cmp	r2, #71	; 0x47
 800232a:	4605      	mov	r5, r0
 800232c:	d01f      	beq.n	800236e <d_encoding+0x4e>
 800232e:	2a54      	cmp	r2, #84	; 0x54
 8002330:	d01d      	beq.n	800236e <d_encoding+0x4e>
 8002332:	460e      	mov	r6, r1
 8002334:	f7ff f820 	bl	8001378 <d_name>
 8002338:	4604      	mov	r4, r0
 800233a:	b310      	cbz	r0, 8002382 <d_encoding+0x62>
 800233c:	b32e      	cbz	r6, 800238a <d_encoding+0x6a>
 800233e:	68ab      	ldr	r3, [r5, #8]
 8002340:	07db      	lsls	r3, r3, #31
 8002342:	d422      	bmi.n	800238a <d_encoding+0x6a>
 8002344:	7823      	ldrb	r3, [r4, #0]
 8002346:	f1a3 021c 	sub.w	r2, r3, #28
 800234a:	2a04      	cmp	r2, #4
 800234c:	d940      	bls.n	80023d0 <d_encoding+0xb0>
 800234e:	2b4c      	cmp	r3, #76	; 0x4c
 8002350:	d03e      	beq.n	80023d0 <d_encoding+0xb0>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d116      	bne.n	8002384 <d_encoding+0x64>
 8002356:	68a3      	ldr	r3, [r4, #8]
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	f1a2 011c 	sub.w	r1, r2, #28
 800235e:	2904      	cmp	r1, #4
 8002360:	f240 8283 	bls.w	800286a <d_encoding+0x54a>
 8002364:	2a4c      	cmp	r2, #76	; 0x4c
 8002366:	f000 8280 	beq.w	800286a <d_encoding+0x54a>
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	e00a      	b.n	8002384 <d_encoding+0x64>
 800236e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002370:	f101 0214 	add.w	r2, r1, #20
 8002374:	632a      	str	r2, [r5, #48]	; 0x30
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	2a54      	cmp	r2, #84	; 0x54
 800237a:	d02b      	beq.n	80023d4 <d_encoding+0xb4>
 800237c:	2a47      	cmp	r2, #71	; 0x47
 800237e:	f000 809f 	beq.w	80024c0 <d_encoding+0x1a0>
 8002382:	2400      	movs	r4, #0
 8002384:	4620      	mov	r0, r4
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238a:	68eb      	ldr	r3, [r5, #12]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f8      	beq.n	8002384 <d_encoding+0x64>
 8002392:	2b45      	cmp	r3, #69	; 0x45
 8002394:	d0f6      	beq.n	8002384 <d_encoding+0x64>
 8002396:	4621      	mov	r1, r4
 8002398:	780a      	ldrb	r2, [r1, #0]
 800239a:	2a20      	cmp	r2, #32
 800239c:	f200 8113 	bhi.w	80025c6 <d_encoding+0x2a6>
 80023a0:	2a1c      	cmp	r2, #28
 80023a2:	f080 8112 	bcs.w	80025ca <d_encoding+0x2aa>
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	f040 8101 	bne.w	80025ae <d_encoding+0x28e>
 80023ac:	684a      	ldr	r2, [r1, #4]
 80023ae:	b16a      	cbz	r2, 80023cc <d_encoding+0xac>
 80023b0:	7813      	ldrb	r3, [r2, #0]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	f103 31ff 	add.w	r1, r3, #4294967295
 80023b8:	f200 80f6 	bhi.w	80025a8 <d_encoding+0x288>
 80023bc:	2b07      	cmp	r3, #7
 80023be:	f080 80f6 	bcs.w	80025ae <d_encoding+0x28e>
 80023c2:	2901      	cmp	r1, #1
 80023c4:	d802      	bhi.n	80023cc <d_encoding+0xac>
 80023c6:	6892      	ldr	r2, [r2, #8]
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d1f1      	bne.n	80023b0 <d_encoding+0x90>
 80023cc:	2101      	movs	r1, #1
 80023ce:	e0ef      	b.n	80025b0 <d_encoding+0x290>
 80023d0:	6864      	ldr	r4, [r4, #4]
 80023d2:	e7b7      	b.n	8002344 <d_encoding+0x24>
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	60ea      	str	r2, [r5, #12]
 80023d8:	785a      	ldrb	r2, [r3, #1]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d0d1      	beq.n	8002382 <d_encoding+0x62>
 80023de:	1c9a      	adds	r2, r3, #2
 80023e0:	60ea      	str	r2, [r5, #12]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	3b43      	subs	r3, #67	; 0x43
 80023e6:	2b33      	cmp	r3, #51	; 0x33
 80023e8:	d8cb      	bhi.n	8002382 <d_encoding+0x62>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <d_encoding+0xd0>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800282b 	.word	0x0800282b
 80023f4:	08002383 	.word	0x08002383
 80023f8:	08002383 	.word	0x08002383
 80023fc:	08002815 	.word	0x08002815
 8002400:	08002383 	.word	0x08002383
 8002404:	080027ff 	.word	0x080027ff
 8002408:	080027e9 	.word	0x080027e9
 800240c:	080027d3 	.word	0x080027d3
 8002410:	08002383 	.word	0x08002383
 8002414:	08002383 	.word	0x08002383
 8002418:	08002383 	.word	0x08002383
 800241c:	08002383 	.word	0x08002383
 8002420:	08002383 	.word	0x08002383
 8002424:	08002383 	.word	0x08002383
 8002428:	08002383 	.word	0x08002383
 800242c:	08002383 	.word	0x08002383
 8002430:	080027bd 	.word	0x080027bd
 8002434:	080027a3 	.word	0x080027a3
 8002438:	08002383 	.word	0x08002383
 800243c:	08002789 	.word	0x08002789
 8002440:	08002773 	.word	0x08002773
 8002444:	08002383 	.word	0x08002383
 8002448:	08002383 	.word	0x08002383
 800244c:	08002383 	.word	0x08002383
 8002450:	08002383 	.word	0x08002383
 8002454:	08002383 	.word	0x08002383
 8002458:	08002383 	.word	0x08002383
 800245c:	08002383 	.word	0x08002383
 8002460:	08002383 	.word	0x08002383
 8002464:	08002383 	.word	0x08002383
 8002468:	08002383 	.word	0x08002383
 800246c:	08002383 	.word	0x08002383
 8002470:	0800273f 	.word	0x0800273f
 8002474:	08002383 	.word	0x08002383
 8002478:	08002383 	.word	0x08002383
 800247c:	08002383 	.word	0x08002383
 8002480:	08002383 	.word	0x08002383
 8002484:	08002719 	.word	0x08002719
 8002488:	08002383 	.word	0x08002383
 800248c:	08002383 	.word	0x08002383
 8002490:	08002383 	.word	0x08002383
 8002494:	08002383 	.word	0x08002383
 8002498:	08002383 	.word	0x08002383
 800249c:	08002383 	.word	0x08002383
 80024a0:	08002383 	.word	0x08002383
 80024a4:	08002383 	.word	0x08002383
 80024a8:	08002383 	.word	0x08002383
 80024ac:	08002383 	.word	0x08002383
 80024b0:	08002383 	.word	0x08002383
 80024b4:	08002383 	.word	0x08002383
 80024b8:	08002383 	.word	0x08002383
 80024bc:	080026f3 	.word	0x080026f3
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	60ea      	str	r2, [r5, #12]
 80024c4:	785a      	ldrb	r2, [r3, #1]
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	f43f af5b 	beq.w	8002382 <d_encoding+0x62>
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	60ea      	str	r2, [r5, #12]
 80024d0:	785a      	ldrb	r2, [r3, #1]
 80024d2:	3a41      	subs	r2, #65	; 0x41
 80024d4:	2a31      	cmp	r2, #49	; 0x31
 80024d6:	f63f af54 	bhi.w	8002382 <d_encoding+0x62>
 80024da:	a101      	add	r1, pc, #4	; (adr r1, 80024e0 <d_encoding+0x1c0>)
 80024dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80024e0:	080025d5 	.word	0x080025d5
 80024e4:	08002383 	.word	0x08002383
 80024e8:	08002383 	.word	0x08002383
 80024ec:	08002383 	.word	0x08002383
 80024f0:	08002383 	.word	0x08002383
 80024f4:	08002383 	.word	0x08002383
 80024f8:	08002383 	.word	0x08002383
 80024fc:	08002383 	.word	0x08002383
 8002500:	08002383 	.word	0x08002383
 8002504:	08002383 	.word	0x08002383
 8002508:	08002383 	.word	0x08002383
 800250c:	08002383 	.word	0x08002383
 8002510:	08002383 	.word	0x08002383
 8002514:	08002383 	.word	0x08002383
 8002518:	08002383 	.word	0x08002383
 800251c:	08002383 	.word	0x08002383
 8002520:	08002383 	.word	0x08002383
 8002524:	080026d5 	.word	0x080026d5
 8002528:	08002383 	.word	0x08002383
 800252c:	080026a9 	.word	0x080026a9
 8002530:	08002383 	.word	0x08002383
 8002534:	08002693 	.word	0x08002693
 8002538:	08002383 	.word	0x08002383
 800253c:	08002383 	.word	0x08002383
 8002540:	08002383 	.word	0x08002383
 8002544:	08002383 	.word	0x08002383
 8002548:	08002383 	.word	0x08002383
 800254c:	08002383 	.word	0x08002383
 8002550:	08002383 	.word	0x08002383
 8002554:	08002383 	.word	0x08002383
 8002558:	08002383 	.word	0x08002383
 800255c:	08002383 	.word	0x08002383
 8002560:	08002383 	.word	0x08002383
 8002564:	08002383 	.word	0x08002383
 8002568:	08002383 	.word	0x08002383
 800256c:	08002383 	.word	0x08002383
 8002570:	08002383 	.word	0x08002383
 8002574:	08002383 	.word	0x08002383
 8002578:	08002383 	.word	0x08002383
 800257c:	08002383 	.word	0x08002383
 8002580:	08002383 	.word	0x08002383
 8002584:	08002383 	.word	0x08002383
 8002588:	08002383 	.word	0x08002383
 800258c:	08002383 	.word	0x08002383
 8002590:	08002383 	.word	0x08002383
 8002594:	08002383 	.word	0x08002383
 8002598:	08002383 	.word	0x08002383
 800259c:	08002383 	.word	0x08002383
 80025a0:	08002383 	.word	0x08002383
 80025a4:	080025ed 	.word	0x080025ed
 80025a8:	2b34      	cmp	r3, #52	; 0x34
 80025aa:	f47f af0f 	bne.w	80023cc <d_encoding+0xac>
 80025ae:	2100      	movs	r1, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	f7ff fe77 	bl	80022a4 <d_bare_function_type>
 80025b6:	4622      	mov	r2, r4
 80025b8:	4603      	mov	r3, r0
 80025ba:	2103      	movs	r1, #3
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c2:	f7fd be05 	b.w	80001d0 <d_make_comp>
 80025c6:	2a4c      	cmp	r2, #76	; 0x4c
 80025c8:	d1f1      	bne.n	80025ae <d_encoding+0x28e>
 80025ca:	6849      	ldr	r1, [r1, #4]
 80025cc:	2900      	cmp	r1, #0
 80025ce:	f47f aee3 	bne.w	8002398 <d_encoding+0x78>
 80025d2:	e7ed      	b.n	80025b0 <d_encoding+0x290>
 80025d4:	2100      	movs	r1, #0
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff fea2 	bl	8002320 <d_encoding>
 80025dc:	2300      	movs	r3, #0
 80025de:	4602      	mov	r2, r0
 80025e0:	2117      	movs	r1, #23
 80025e2:	4628      	mov	r0, r5
 80025e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e8:	f7fd bdf2 	b.w	80001d0 <d_make_comp>
 80025ec:	f105 000c 	add.w	r0, r5, #12
 80025f0:	f7fd ff40 	bl	8000474 <d_number.isra.0>
 80025f4:	2801      	cmp	r0, #1
 80025f6:	f77f aec4 	ble.w	8002382 <d_encoding+0x62>
 80025fa:	68eb      	ldr	r3, [r5, #12]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	f43f aebf 	beq.w	8002382 <d_encoding+0x62>
 8002604:	1c5f      	adds	r7, r3, #1
 8002606:	60ef      	str	r7, [r5, #12]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b5f      	cmp	r3, #95	; 0x5f
 800260c:	f47f aeb9 	bne.w	8002382 <d_encoding+0x62>
 8002610:	2200      	movs	r2, #0
 8002612:	1e46      	subs	r6, r0, #1
 8002614:	4690      	mov	r8, r2
 8002616:	f04f 0940 	mov.w	r9, #64	; 0x40
 800261a:	783b      	ldrb	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f43f aeb0 	beq.w	8002382 <d_encoding+0x62>
 8002622:	2b24      	cmp	r3, #36	; 0x24
 8002624:	f000 8128 	beq.w	8002878 <d_encoding+0x558>
 8002628:	463c      	mov	r4, r7
 800262a:	2100      	movs	r1, #0
 800262c:	e004      	b.n	8002638 <d_encoding+0x318>
 800262e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002632:	b123      	cbz	r3, 800263e <d_encoding+0x31e>
 8002634:	2b24      	cmp	r3, #36	; 0x24
 8002636:	d002      	beq.n	800263e <d_encoding+0x31e>
 8002638:	3101      	adds	r1, #1
 800263a:	42b1      	cmp	r1, r6
 800263c:	dbf7      	blt.n	800262e <d_encoding+0x30e>
 800263e:	696c      	ldr	r4, [r5, #20]
 8002640:	69a8      	ldr	r0, [r5, #24]
 8002642:	4284      	cmp	r4, r0
 8002644:	f280 8113 	bge.w	800286e <d_encoding+0x54e>
 8002648:	6928      	ldr	r0, [r5, #16]
 800264a:	1c63      	adds	r3, r4, #1
 800264c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002650:	616b      	str	r3, [r5, #20]
 8002652:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 8002656:	f000 810a 	beq.w	800286e <d_encoding+0x54e>
 800265a:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800265e:	605f      	str	r7, [r3, #4]
 8002660:	6099      	str	r1, [r3, #8]
 8002662:	68ef      	ldr	r7, [r5, #12]
 8002664:	440f      	add	r7, r1
 8002666:	1a76      	subs	r6, r6, r1
 8002668:	60ef      	str	r7, [r5, #12]
 800266a:	2a00      	cmp	r2, #0
 800266c:	f000 8121 	beq.w	80028b2 <d_encoding+0x592>
 8002670:	213f      	movs	r1, #63	; 0x3f
 8002672:	4628      	mov	r0, r5
 8002674:	f7fd fdac 	bl	80001d0 <d_make_comp>
 8002678:	4602      	mov	r2, r0
 800267a:	2800      	cmp	r0, #0
 800267c:	f43f ae81 	beq.w	8002382 <d_encoding+0x62>
 8002680:	2e00      	cmp	r6, #0
 8002682:	dcca      	bgt.n	800261a <d_encoding+0x2fa>
 8002684:	4628      	mov	r0, r5
 8002686:	2300      	movs	r3, #0
 8002688:	213e      	movs	r1, #62	; 0x3e
 800268a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268e:	f7fd bd9f 	b.w	80001d0 <d_make_comp>
 8002692:	4628      	mov	r0, r5
 8002694:	f7fe fe70 	bl	8001378 <d_name>
 8002698:	2300      	movs	r3, #0
 800269a:	4602      	mov	r2, r0
 800269c:	2113      	movs	r1, #19
 800269e:	4628      	mov	r0, r5
 80026a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	f7fd bd94 	b.w	80001d0 <d_make_comp>
 80026a8:	789a      	ldrb	r2, [r3, #2]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4628      	mov	r0, r5
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	f000 8101 	beq.w	80028b6 <d_encoding+0x596>
 80026b4:	1cda      	adds	r2, r3, #3
 80026b6:	60ea      	str	r2, [r5, #12]
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	2b6e      	cmp	r3, #110	; 0x6e
 80026bc:	f040 80fb 	bne.w	80028b6 <d_encoding+0x596>
 80026c0:	f7ff fe2e 	bl	8002320 <d_encoding>
 80026c4:	2300      	movs	r3, #0
 80026c6:	4602      	mov	r2, r0
 80026c8:	2149      	movs	r1, #73	; 0x49
 80026ca:	4628      	mov	r0, r5
 80026cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d0:	f7fd bd7e 	b.w	80001d0 <d_make_comp>
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7fe fe4f 	bl	8001378 <d_name>
 80026da:	4604      	mov	r4, r0
 80026dc:	4628      	mov	r0, r5
 80026de:	f7fd fef3 	bl	80004c8 <d_number_component>
 80026e2:	4622      	mov	r2, r4
 80026e4:	4603      	mov	r3, r0
 80026e6:	2116      	movs	r1, #22
 80026e8:	4628      	mov	r0, r5
 80026ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ee:	f7fd bd6f 	b.w	80001d0 <d_make_comp>
 80026f2:	2176      	movs	r1, #118	; 0x76
 80026f4:	4628      	mov	r0, r5
 80026f6:	f7fe f871 	bl	80007dc <d_call_offset>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f43f ae41 	beq.w	8002382 <d_encoding+0x62>
 8002700:	2100      	movs	r1, #0
 8002702:	4628      	mov	r0, r5
 8002704:	f7ff fe0c 	bl	8002320 <d_encoding>
 8002708:	2300      	movs	r3, #0
 800270a:	4602      	mov	r2, r0
 800270c:	2110      	movs	r1, #16
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	f7fd bd5c 	b.w	80001d0 <d_make_comp>
 8002718:	2168      	movs	r1, #104	; 0x68
 800271a:	4628      	mov	r0, r5
 800271c:	f7fe f85e 	bl	80007dc <d_call_offset>
 8002720:	2800      	cmp	r0, #0
 8002722:	f43f ae2e 	beq.w	8002382 <d_encoding+0x62>
 8002726:	2100      	movs	r1, #0
 8002728:	4628      	mov	r0, r5
 800272a:	f7ff fdf9 	bl	8002320 <d_encoding>
 800272e:	2300      	movs	r3, #0
 8002730:	4602      	mov	r2, r0
 8002732:	210f      	movs	r1, #15
 8002734:	4628      	mov	r0, r5
 8002736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273a:	f7fd bd49 	b.w	80001d0 <d_make_comp>
 800273e:	2100      	movs	r1, #0
 8002740:	4628      	mov	r0, r5
 8002742:	f7fe f84b 	bl	80007dc <d_call_offset>
 8002746:	2800      	cmp	r0, #0
 8002748:	f43f ae1b 	beq.w	8002382 <d_encoding+0x62>
 800274c:	2100      	movs	r1, #0
 800274e:	4628      	mov	r0, r5
 8002750:	f7fe f844 	bl	80007dc <d_call_offset>
 8002754:	2800      	cmp	r0, #0
 8002756:	f43f ae14 	beq.w	8002382 <d_encoding+0x62>
 800275a:	2100      	movs	r1, #0
 800275c:	4628      	mov	r0, r5
 800275e:	f7ff fddf 	bl	8002320 <d_encoding>
 8002762:	2300      	movs	r3, #0
 8002764:	4602      	mov	r2, r0
 8002766:	2111      	movs	r1, #17
 8002768:	4628      	mov	r0, r5
 800276a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276e:	f7fd bd2f 	b.w	80001d0 <d_make_comp>
 8002772:	4628      	mov	r0, r5
 8002774:	f7fe fe00 	bl	8001378 <d_name>
 8002778:	2300      	movs	r3, #0
 800277a:	4602      	mov	r2, r0
 800277c:	2115      	movs	r1, #21
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	f7fd bd24 	b.w	80001d0 <d_make_comp>
 8002788:	310f      	adds	r1, #15
 800278a:	6329      	str	r1, [r5, #48]	; 0x30
 800278c:	4628      	mov	r0, r5
 800278e:	f7fe ffaf 	bl	80016f0 <d_type>
 8002792:	2300      	movs	r3, #0
 8002794:	4602      	mov	r2, r0
 8002796:	2109      	movs	r1, #9
 8002798:	4628      	mov	r0, r5
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279e:	f7fd bd17 	b.w	80001d0 <d_make_comp>
 80027a2:	310a      	adds	r1, #10
 80027a4:	6329      	str	r1, [r5, #48]	; 0x30
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe ffa2 	bl	80016f0 <d_type>
 80027ac:	2300      	movs	r3, #0
 80027ae:	4602      	mov	r2, r0
 80027b0:	210a      	movs	r1, #10
 80027b2:	4628      	mov	r0, r5
 80027b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	f7fd bd0a 	b.w	80001d0 <d_make_comp>
 80027bc:	4628      	mov	r0, r5
 80027be:	f7fe ff97 	bl	80016f0 <d_type>
 80027c2:	2300      	movs	r3, #0
 80027c4:	4602      	mov	r2, r0
 80027c6:	210d      	movs	r1, #13
 80027c8:	4628      	mov	r0, r5
 80027ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ce:	f7fd bcff 	b.w	80001d0 <d_make_comp>
 80027d2:	4628      	mov	r0, r5
 80027d4:	f7fe ff8c 	bl	80016f0 <d_type>
 80027d8:	2300      	movs	r3, #0
 80027da:	4602      	mov	r2, r0
 80027dc:	2112      	movs	r1, #18
 80027de:	4628      	mov	r0, r5
 80027e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	f7fd bcf4 	b.w	80001d0 <d_make_comp>
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe ff81 	bl	80016f0 <d_type>
 80027ee:	2300      	movs	r3, #0
 80027f0:	4602      	mov	r2, r0
 80027f2:	210c      	movs	r1, #12
 80027f4:	4628      	mov	r0, r5
 80027f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027fa:	f7fd bce9 	b.w	80001d0 <d_make_comp>
 80027fe:	4628      	mov	r0, r5
 8002800:	f7fe fdba 	bl	8001378 <d_name>
 8002804:	2300      	movs	r3, #0
 8002806:	4602      	mov	r2, r0
 8002808:	2114      	movs	r1, #20
 800280a:	4628      	mov	r0, r5
 800280c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002810:	f7fd bcde 	b.w	80001d0 <d_make_comp>
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe ff6b 	bl	80016f0 <d_type>
 800281a:	2300      	movs	r3, #0
 800281c:	4602      	mov	r2, r0
 800281e:	210e      	movs	r1, #14
 8002820:	4628      	mov	r0, r5
 8002822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002826:	f7fd bcd3 	b.w	80001d0 <d_make_comp>
 800282a:	4628      	mov	r0, r5
 800282c:	f7fe ff60 	bl	80016f0 <d_type>
 8002830:	4604      	mov	r4, r0
 8002832:	f105 000c 	add.w	r0, r5, #12
 8002836:	f7fd fe1d 	bl	8000474 <d_number.isra.0>
 800283a:	2800      	cmp	r0, #0
 800283c:	f6ff ada1 	blt.w	8002382 <d_encoding+0x62>
 8002840:	68eb      	ldr	r3, [r5, #12]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	2a5f      	cmp	r2, #95	; 0x5f
 8002846:	f47f ad9c 	bne.w	8002382 <d_encoding+0x62>
 800284a:	3301      	adds	r3, #1
 800284c:	60eb      	str	r3, [r5, #12]
 800284e:	4628      	mov	r0, r5
 8002850:	f7fe ff4e 	bl	80016f0 <d_type>
 8002854:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002856:	1d59      	adds	r1, r3, #5
 8002858:	6329      	str	r1, [r5, #48]	; 0x30
 800285a:	4602      	mov	r2, r0
 800285c:	4623      	mov	r3, r4
 800285e:	4628      	mov	r0, r5
 8002860:	210b      	movs	r1, #11
 8002862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002866:	f7fd bcb3 	b.w	80001d0 <d_make_comp>
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	e574      	b.n	8002358 <d_encoding+0x38>
 800286e:	68eb      	ldr	r3, [r5, #12]
 8002870:	440b      	add	r3, r1
 8002872:	60eb      	str	r3, [r5, #12]
 8002874:	2400      	movs	r4, #0
 8002876:	e585      	b.n	8002384 <d_encoding+0x64>
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b53      	cmp	r3, #83	; 0x53
 800287c:	d027      	beq.n	80028ce <d_encoding+0x5ae>
 800287e:	2b5f      	cmp	r3, #95	; 0x5f
 8002880:	d023      	beq.n	80028ca <d_encoding+0x5aa>
 8002882:	2b24      	cmp	r3, #36	; 0x24
 8002884:	f47f ad7d 	bne.w	8002382 <d_encoding+0x62>
 8002888:	4618      	mov	r0, r3
 800288a:	6969      	ldr	r1, [r5, #20]
 800288c:	69ab      	ldr	r3, [r5, #24]
 800288e:	4299      	cmp	r1, r3
 8002890:	da1f      	bge.n	80028d2 <d_encoding+0x5b2>
 8002892:	692c      	ldr	r4, [r5, #16]
 8002894:	1c4f      	adds	r7, r1, #1
 8002896:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800289a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800289e:	616f      	str	r7, [r5, #20]
 80028a0:	d017      	beq.n	80028d2 <d_encoding+0x5b2>
 80028a2:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 80028a6:	6058      	str	r0, [r3, #4]
 80028a8:	68ef      	ldr	r7, [r5, #12]
 80028aa:	3702      	adds	r7, #2
 80028ac:	3e02      	subs	r6, #2
 80028ae:	60ef      	str	r7, [r5, #12]
 80028b0:	e6db      	b.n	800266a <d_encoding+0x34a>
 80028b2:	461a      	mov	r2, r3
 80028b4:	e6e4      	b.n	8002680 <d_encoding+0x360>
 80028b6:	f7ff fd33 	bl	8002320 <d_encoding>
 80028ba:	2300      	movs	r3, #0
 80028bc:	4602      	mov	r2, r0
 80028be:	2148      	movs	r1, #72	; 0x48
 80028c0:	4628      	mov	r0, r5
 80028c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c6:	f7fd bc83 	b.w	80001d0 <d_make_comp>
 80028ca:	202e      	movs	r0, #46	; 0x2e
 80028cc:	e7dd      	b.n	800288a <d_encoding+0x56a>
 80028ce:	202f      	movs	r0, #47	; 0x2f
 80028d0:	e7db      	b.n	800288a <d_encoding+0x56a>
 80028d2:	68eb      	ldr	r3, [r5, #12]
 80028d4:	3302      	adds	r3, #2
 80028d6:	60eb      	str	r3, [r5, #12]
 80028d8:	2400      	movs	r4, #0
 80028da:	e553      	b.n	8002384 <d_encoding+0x64>

080028dc <d_expr_primary>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	68c2      	ldr	r2, [r0, #12]
 80028e0:	7813      	ldrb	r3, [r2, #0]
 80028e2:	2b4c      	cmp	r3, #76	; 0x4c
 80028e4:	d001      	beq.n	80028ea <d_expr_primary+0xe>
 80028e6:	2000      	movs	r0, #0
 80028e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ea:	1c53      	adds	r3, r2, #1
 80028ec:	60c3      	str	r3, [r0, #12]
 80028ee:	7851      	ldrb	r1, [r2, #1]
 80028f0:	295f      	cmp	r1, #95	; 0x5f
 80028f2:	4605      	mov	r5, r0
 80028f4:	d03a      	beq.n	800296c <d_expr_primary+0x90>
 80028f6:	295a      	cmp	r1, #90	; 0x5a
 80028f8:	d03f      	beq.n	800297a <d_expr_primary+0x9e>
 80028fa:	f7fe fef9 	bl	80016f0 <d_type>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0f1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002902:	7803      	ldrb	r3, [r0, #0]
 8002904:	2b27      	cmp	r3, #39	; 0x27
 8002906:	d046      	beq.n	8002996 <d_expr_primary+0xba>
 8002908:	68ee      	ldr	r6, [r5, #12]
 800290a:	7833      	ldrb	r3, [r6, #0]
 800290c:	2b6e      	cmp	r3, #110	; 0x6e
 800290e:	d04b      	beq.n	80029a8 <d_expr_primary+0xcc>
 8002910:	213c      	movs	r1, #60	; 0x3c
 8002912:	2b45      	cmp	r3, #69	; 0x45
 8002914:	d04e      	beq.n	80029b4 <d_expr_primary+0xd8>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e5      	beq.n	80028e6 <d_expr_primary+0xa>
 800291a:	4633      	mov	r3, r6
 800291c:	e001      	b.n	8002922 <d_expr_primary+0x46>
 800291e:	2c00      	cmp	r4, #0
 8002920:	d0e1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002922:	3301      	adds	r3, #1
 8002924:	60eb      	str	r3, [r5, #12]
 8002926:	781c      	ldrb	r4, [r3, #0]
 8002928:	2c45      	cmp	r4, #69	; 0x45
 800292a:	d1f8      	bne.n	800291e <d_expr_primary+0x42>
 800292c:	1b9c      	subs	r4, r3, r6
 800292e:	696b      	ldr	r3, [r5, #20]
 8002930:	69aa      	ldr	r2, [r5, #24]
 8002932:	4293      	cmp	r3, r2
 8002934:	da2d      	bge.n	8002992 <d_expr_primary+0xb6>
 8002936:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800293a:	692f      	ldr	r7, [r5, #16]
 800293c:	3301      	adds	r3, #1
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	616b      	str	r3, [r5, #20]
 8002942:	18bb      	adds	r3, r7, r2
 8002944:	d025      	beq.n	8002992 <d_expr_primary+0xb6>
 8002946:	b326      	cbz	r6, 8002992 <d_expr_primary+0xb6>
 8002948:	b31c      	cbz	r4, 8002992 <d_expr_primary+0xb6>
 800294a:	f04f 0e00 	mov.w	lr, #0
 800294e:	f807 e002 	strb.w	lr, [r7, r2]
 8002952:	605e      	str	r6, [r3, #4]
 8002954:	609c      	str	r4, [r3, #8]
 8002956:	4602      	mov	r2, r0
 8002958:	4628      	mov	r0, r5
 800295a:	f7fd fc39 	bl	80001d0 <d_make_comp>
 800295e:	68eb      	ldr	r3, [r5, #12]
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	2a45      	cmp	r2, #69	; 0x45
 8002964:	d1bf      	bne.n	80028e6 <d_expr_primary+0xa>
 8002966:	3301      	adds	r3, #1
 8002968:	60eb      	str	r3, [r5, #12]
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296c:	1c93      	adds	r3, r2, #2
 800296e:	60c3      	str	r3, [r0, #12]
 8002970:	7892      	ldrb	r2, [r2, #2]
 8002972:	2a5a      	cmp	r2, #90	; 0x5a
 8002974:	bf18      	it	ne
 8002976:	2000      	movne	r0, #0
 8002978:	d107      	bne.n	800298a <d_expr_primary+0xae>
 800297a:	3301      	adds	r3, #1
 800297c:	60eb      	str	r3, [r5, #12]
 800297e:	2100      	movs	r1, #0
 8002980:	4628      	mov	r0, r5
 8002982:	f7ff fccd 	bl	8002320 <d_encoding>
 8002986:	68eb      	ldr	r3, [r5, #12]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	2a45      	cmp	r2, #69	; 0x45
 800298c:	d0eb      	beq.n	8002966 <d_expr_primary+0x8a>
 800298e:	2000      	movs	r0, #0
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002992:	2300      	movs	r3, #0
 8002994:	e7df      	b.n	8002956 <d_expr_primary+0x7a>
 8002996:	6843      	ldr	r3, [r0, #4]
 8002998:	7c1a      	ldrb	r2, [r3, #16]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d0b4      	beq.n	8002908 <d_expr_primary+0x2c>
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	632b      	str	r3, [r5, #48]	; 0x30
 80029a6:	e7af      	b.n	8002908 <d_expr_primary+0x2c>
 80029a8:	1c72      	adds	r2, r6, #1
 80029aa:	60ea      	str	r2, [r5, #12]
 80029ac:	7873      	ldrb	r3, [r6, #1]
 80029ae:	213d      	movs	r1, #61	; 0x3d
 80029b0:	4616      	mov	r6, r2
 80029b2:	e7ae      	b.n	8002912 <d_expr_primary+0x36>
 80029b4:	2400      	movs	r4, #0
 80029b6:	e7ba      	b.n	800292e <d_expr_primary+0x52>

080029b8 <d_print_comp_inner>:
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	4604      	mov	r4, r0
 80029be:	b095      	sub	sp, #84	; 0x54
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	f000 80db 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 80029c6:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	f040 80c2 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80029d0:	7813      	ldrb	r3, [r2, #0]
 80029d2:	4688      	mov	r8, r1
 80029d4:	4615      	mov	r5, r2
 80029d6:	2b4d      	cmp	r3, #77	; 0x4d
 80029d8:	f201 81e6 	bhi.w	8003da8 <d_print_comp_inner+0x13f0>
 80029dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029e0:	043c045a 	.word	0x043c045a
 80029e4:	03a4043c 	.word	0x03a4043c
 80029e8:	048904a5 	.word	0x048904a5
 80029ec:	038e04ea 	.word	0x038e04ea
 80029f0:	0330037c 	.word	0x0330037c
 80029f4:	030a0356 	.word	0x030a0356
 80029f8:	029802e4 	.word	0x029802e4
 80029fc:	027202be 	.word	0x027202be
 8002a00:	01f0024c 	.word	0x01f0024c
 8002a04:	01ca0226 	.word	0x01ca0226
 8002a08:	015801a4 	.word	0x015801a4
 8002a0c:	0132017e 	.word	0x0132017e
 8002a10:	00f2010b 	.word	0x00f2010b
 8002a14:	00f200f2 	.word	0x00f200f2
 8002a18:	00d400d4 	.word	0x00d400d4
 8002a1c:	00d400d4 	.word	0x00d400d4
 8002a20:	00d400d4 	.word	0x00d400d4
 8002a24:	06d500d4 	.word	0x06d500d4
 8002a28:	00d406d5 	.word	0x00d406d5
 8002a2c:	06a900d4 	.word	0x06a900d4
 8002a30:	069306fc 	.word	0x069306fc
 8002a34:	0701071d 	.word	0x0701071d
 8002a38:	07010788 	.word	0x07010788
 8002a3c:	057b057b 	.word	0x057b057b
 8002a40:	06060630 	.word	0x06060630
 8002a44:	09e405e0 	.word	0x09e405e0
 8002a48:	068e05ad 	.word	0x068e05ad
 8002a4c:	004e0654 	.word	0x004e0654
 8002a50:	094c0485 	.word	0x094c0485
 8002a54:	08df08df 	.word	0x08df08df
 8002a58:	08ae08ae 	.word	0x08ae08ae
 8002a5c:	05480888 	.word	0x05480888
 8002a60:	08e4053a 	.word	0x08e4053a
 8002a64:	09be0514 	.word	0x09be0514
 8002a68:	09980914 	.word	0x09980914
 8002a6c:	07cb09e4 	.word	0x07cb09e4
 8002a70:	07f10862 	.word	0x07f10862
 8002a74:	04130817 	.word	0x04130817
 8002a78:	055200d4 	.word	0x055200d4
 8002a7c:	68ab      	ldr	r3, [r5, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b38      	cmp	r3, #56	; 0x38
 8002a82:	d17b      	bne.n	8002b7c <d_print_comp_inner+0x1c4>
 8002a84:	686a      	ldr	r2, [r5, #4]
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	7859      	ldrb	r1, [r3, #1]
 8002a8c:	2963      	cmp	r1, #99	; 0x63
 8002a8e:	f002 814a 	beq.w	8004d26 <d_print_comp_inner+0x236e>
 8002a92:	f105 0308 	add.w	r3, r5, #8
 8002a96:	4641      	mov	r1, r8
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f003 fbbb 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d157      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002aa4:	686b      	ldr	r3, [r5, #4]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	2a31      	cmp	r2, #49	; 0x31
 8002aaa:	f002 836b 	beq.w	8005184 <d_print_comp_inner+0x27cc>
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	49c7      	ldr	r1, [pc, #796]	; (8002dd0 <d_print_comp_inner+0x418>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f003 ff34 	bl	8006920 <strcmp>
 8002ab8:	68ab      	ldr	r3, [r5, #8]
 8002aba:	b920      	cbnz	r0, 8002ac6 <d_print_comp_inner+0x10e>
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	7811      	ldrb	r1, [r2, #0]
 8002ac0:	2903      	cmp	r1, #3
 8002ac2:	f002 83a5 	beq.w	8005210 <d_print_comp_inner+0x2858>
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4620      	mov	r0, r4
 8002acc:	f003 fb3e 	bl	800614c <d_print_subexpr>
 8002ad0:	686f      	ldr	r7, [r5, #4]
 8002ad2:	49c0      	ldr	r1, [pc, #768]	; (8002dd4 <d_print_comp_inner+0x41c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 9000 	ldr.w	r9, [r3]
 8002ada:	4648      	mov	r0, r9
 8002adc:	f003 ff20 	bl	8006920 <strcmp>
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	f042 826f 	bne.w	8004fc6 <d_print_comp_inner+0x260e>
 8002ae8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002aec:	29ff      	cmp	r1, #255	; 0xff
 8002aee:	f002 844a 	beq.w	8005386 <d_print_comp_inner+0x29ce>
 8002af2:	1c4a      	adds	r2, r1, #1
 8002af4:	235b      	movs	r3, #91	; 0x5b
 8002af6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002afa:	5463      	strb	r3, [r4, r1]
 8002afc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b00:	68ab      	ldr	r3, [r5, #8]
 8002b02:	4641      	mov	r1, r8
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f002 fcfa 	bl	8005500 <d_print_comp>
 8002b0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b10:	29ff      	cmp	r1, #255	; 0xff
 8002b12:	f002 8425 	beq.w	8005360 <d_print_comp_inner+0x29a8>
 8002b16:	235d      	movs	r3, #93	; 0x5d
 8002b18:	1c4a      	adds	r2, r1, #1
 8002b1a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b1e:	5463      	strb	r3, [r4, r1]
 8002b20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b24:	686b      	ldr	r3, [r5, #4]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	2a31      	cmp	r2, #49	; 0x31
 8002b2a:	d113      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d10f      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3a:	d10b      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b40:	29ff      	cmp	r1, #255	; 0xff
 8002b42:	f002 8482 	beq.w	800544a <d_print_comp_inner+0x2a92>
 8002b46:	2329      	movs	r3, #41	; 0x29
 8002b48:	1c4a      	adds	r2, r1, #1
 8002b4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b4e:	5463      	strb	r3, [r4, r1]
 8002b50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b54:	b015      	add	sp, #84	; 0x54
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f2c1 84a4 	blt.w	80044ac <d_print_comp_inner+0x1af4>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f002 8432 	beq.w	80053ce <d_print_comp_inner+0x2a16>
 8002b6a:	6880      	ldr	r0, [r0, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b110      	cbz	r0, 8002b76 <d_print_comp_inner+0x1be>
 8002b70:	7802      	ldrb	r2, [r0, #0]
 8002b72:	2a2f      	cmp	r2, #47	; 0x2f
 8002b74:	d0f6      	beq.n	8002b64 <d_print_comp_inner+0x1ac>
 8002b76:	b10f      	cbz	r7, 8002b7c <d_print_comp_inner+0x1c4>
 8002b78:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002b82:	b015      	add	sp, #84	; 0x54
 8002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b88:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002b8c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002b90:	9505      	str	r5, [sp, #20]
 8002b92:	ab14      	add	r3, sp, #80	; 0x50
 8002b94:	2100      	movs	r1, #0
 8002b96:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002b9a:	9106      	str	r1, [sp, #24]
 8002b9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ba0:	9207      	str	r2, [sp, #28]
 8002ba2:	686a      	ldr	r2, [r5, #4]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f002 fcaa 	bl	8005500 <d_print_comp>
 8002bac:	9b06      	ldr	r3, [sp, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f001 8389 	beq.w	80042c6 <d_print_comp_inner+0x190e>
 8002bb4:	9b04      	ldr	r3, [sp, #16]
 8002bb6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bba:	2f00      	cmp	r7, #0
 8002bbc:	d0ca      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bbe:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bc2:	e7c7      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8002bc4:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002bc8:	f1bc 0f00 	cmp.w	ip, #0
 8002bcc:	d0de      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	e005      	b.n	8002bde <d_print_comp_inner+0x226>
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	f001 86b8 	beq.w	8004948 <d_print_comp_inner+0x1f90>
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d0d6      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bde:	6890      	ldr	r0, [r2, #8]
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1f9      	bne.n	8002bd8 <d_print_comp_inner+0x220>
 8002be4:	6851      	ldr	r1, [r2, #4]
 8002be6:	7809      	ldrb	r1, [r1, #0]
 8002be8:	f1a1 0e19 	sub.w	lr, r1, #25
 8002bec:	f1be 0f02 	cmp.w	lr, #2
 8002bf0:	d9ef      	bls.n	8002bd2 <d_print_comp_inner+0x21a>
 8002bf2:	4607      	mov	r7, r0
 8002bf4:	e7ca      	b.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bf6:	68af      	ldr	r7, [r5, #8]
 8002bf8:	686d      	ldr	r5, [r5, #4]
 8002bfa:	2f00      	cmp	r7, #0
 8002bfc:	d0aa      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c02:	442f      	add	r7, r5
 8002c04:	f04f 0800 	mov.w	r8, #0
 8002c08:	e008      	b.n	8002c1c <d_print_comp_inner+0x264>
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	3101      	adds	r1, #1
 8002c0e:	42bd      	cmp	r5, r7
 8002c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c14:	54e6      	strb	r6, [r4, r3]
 8002c16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002c1a:	d09b      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002c1c:	29ff      	cmp	r1, #255	; 0xff
 8002c1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002c22:	d1f2      	bne.n	8002c0a <d_print_comp_inner+0x252>
 8002c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c30:	4620      	mov	r0, r4
 8002c32:	4798      	blx	r3
 8002c34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2300      	movs	r3, #0
 8002c42:	e7e4      	b.n	8002c0e <d_print_comp_inner+0x256>
 8002c44:	4e64      	ldr	r6, [pc, #400]	; (8002dd8 <d_print_comp_inner+0x420>)
 8002c46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c4a:	f106 0a11 	add.w	sl, r6, #17
 8002c4e:	f04f 0900 	mov.w	r9, #0
 8002c52:	e009      	b.n	8002c68 <d_print_comp_inner+0x2b0>
 8002c54:	460b      	mov	r3, r1
 8002c56:	3101      	adds	r1, #1
 8002c58:	4556      	cmp	r6, sl
 8002c5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c5e:	54e7      	strb	r7, [r4, r3]
 8002c60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c64:	f001 8296 	beq.w	8004194 <d_print_comp_inner+0x17dc>
 8002c68:	29ff      	cmp	r1, #255	; 0xff
 8002c6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002c6e:	d1f1      	bne.n	8002c54 <d_print_comp_inner+0x29c>
 8002c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4798      	blx	r3
 8002c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e7e3      	b.n	8002c58 <d_print_comp_inner+0x2a0>
 8002c90:	4e52      	ldr	r6, [pc, #328]	; (8002ddc <d_print_comp_inner+0x424>)
 8002c92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c96:	f106 0a19 	add.w	sl, r6, #25
 8002c9a:	f04f 0900 	mov.w	r9, #0
 8002c9e:	e009      	b.n	8002cb4 <d_print_comp_inner+0x2fc>
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	3101      	adds	r1, #1
 8002ca4:	4556      	cmp	r6, sl
 8002ca6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002caa:	54e7      	strb	r7, [r4, r3]
 8002cac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cb0:	f001 82a8 	beq.w	8004204 <d_print_comp_inner+0x184c>
 8002cb4:	29ff      	cmp	r1, #255	; 0xff
 8002cb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cba:	d1f1      	bne.n	8002ca0 <d_print_comp_inner+0x2e8>
 8002cbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cc0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4798      	blx	r3
 8002ccc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e7e3      	b.n	8002ca4 <d_print_comp_inner+0x2ec>
 8002cdc:	4e40      	ldr	r6, [pc, #256]	; (8002de0 <d_print_comp_inner+0x428>)
 8002cde:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ce2:	f106 0a15 	add.w	sl, r6, #21
 8002ce6:	f04f 0900 	mov.w	r9, #0
 8002cea:	e009      	b.n	8002d00 <d_print_comp_inner+0x348>
 8002cec:	460b      	mov	r3, r1
 8002cee:	3101      	adds	r1, #1
 8002cf0:	4556      	cmp	r6, sl
 8002cf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cf6:	54e7      	strb	r7, [r4, r3]
 8002cf8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cfc:	f001 8251 	beq.w	80041a2 <d_print_comp_inner+0x17ea>
 8002d00:	29ff      	cmp	r1, #255	; 0xff
 8002d02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d06:	d1f1      	bne.n	8002cec <d_print_comp_inner+0x334>
 8002d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d22:	2101      	movs	r1, #1
 8002d24:	2300      	movs	r3, #0
 8002d26:	e7e3      	b.n	8002cf0 <d_print_comp_inner+0x338>
 8002d28:	4e2e      	ldr	r6, [pc, #184]	; (8002de4 <d_print_comp_inner+0x42c>)
 8002d2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d2e:	f106 0a16 	add.w	sl, r6, #22
 8002d32:	f04f 0900 	mov.w	r9, #0
 8002d36:	e009      	b.n	8002d4c <d_print_comp_inner+0x394>
 8002d38:	460b      	mov	r3, r1
 8002d3a:	3101      	adds	r1, #1
 8002d3c:	4556      	cmp	r6, sl
 8002d3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d42:	54e7      	strb	r7, [r4, r3]
 8002d44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d48:	f001 8263 	beq.w	8004212 <d_print_comp_inner+0x185a>
 8002d4c:	29ff      	cmp	r1, #255	; 0xff
 8002d4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d52:	d1f1      	bne.n	8002d38 <d_print_comp_inner+0x380>
 8002d54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d60:	4620      	mov	r0, r4
 8002d62:	4798      	blx	r3
 8002d64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2300      	movs	r3, #0
 8002d72:	e7e3      	b.n	8002d3c <d_print_comp_inner+0x384>
 8002d74:	4e1c      	ldr	r6, [pc, #112]	; (8002de8 <d_print_comp_inner+0x430>)
 8002d76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d7a:	f106 0a13 	add.w	sl, r6, #19
 8002d7e:	f04f 0900 	mov.w	r9, #0
 8002d82:	e009      	b.n	8002d98 <d_print_comp_inner+0x3e0>
 8002d84:	460b      	mov	r3, r1
 8002d86:	3101      	adds	r1, #1
 8002d88:	45b2      	cmp	sl, r6
 8002d8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d8e:	54e7      	strb	r7, [r4, r3]
 8002d90:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d94:	f001 8077 	beq.w	8003e86 <d_print_comp_inner+0x14ce>
 8002d98:	29ff      	cmp	r1, #255	; 0xff
 8002d9a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d9e:	d1f1      	bne.n	8002d84 <d_print_comp_inner+0x3cc>
 8002da0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002da4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002da8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dac:	4620      	mov	r0, r4
 8002dae:	4798      	blx	r3
 8002db0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e7e3      	b.n	8002d88 <d_print_comp_inner+0x3d0>
 8002dc0:	4e0a      	ldr	r6, [pc, #40]	; (8002dec <d_print_comp_inner+0x434>)
 8002dc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dc6:	f106 0a1a 	add.w	sl, r6, #26
 8002dca:	f04f 0900 	mov.w	r9, #0
 8002dce:	e019      	b.n	8002e04 <d_print_comp_inner+0x44c>
 8002dd0:	08016d58 	.word	0x08016d58
 8002dd4:	08016f54 	.word	0x08016f54
 8002dd8:	08016ee3 	.word	0x08016ee3
 8002ddc:	08016eaf 	.word	0x08016eaf
 8002de0:	08016ecb 	.word	0x08016ecb
 8002de4:	08016e97 	.word	0x08016e97
 8002de8:	08016e83 	.word	0x08016e83
 8002dec:	08016e57 	.word	0x08016e57
 8002df0:	460b      	mov	r3, r1
 8002df2:	3101      	adds	r1, #1
 8002df4:	4556      	cmp	r6, sl
 8002df6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dfa:	54e7      	strb	r7, [r4, r3]
 8002dfc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e00:	f001 804f 	beq.w	8003ea2 <d_print_comp_inner+0x14ea>
 8002e04:	29ff      	cmp	r1, #255	; 0xff
 8002e06:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e0a:	d1f1      	bne.n	8002df0 <d_print_comp_inner+0x438>
 8002e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e10:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4798      	blx	r3
 8002e1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e26:	2101      	movs	r1, #1
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7e3      	b.n	8002df4 <d_print_comp_inner+0x43c>
 8002e2c:	4eb5      	ldr	r6, [pc, #724]	; (8003104 <d_print_comp_inner+0x74c>)
 8002e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e32:	f106 0a0f 	add.w	sl, r6, #15
 8002e36:	f04f 0900 	mov.w	r9, #0
 8002e3a:	e009      	b.n	8002e50 <d_print_comp_inner+0x498>
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	3101      	adds	r1, #1
 8002e40:	4556      	cmp	r6, sl
 8002e42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e46:	54e7      	strb	r7, [r4, r3]
 8002e48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e4c:	f001 8022 	beq.w	8003e94 <d_print_comp_inner+0x14dc>
 8002e50:	29ff      	cmp	r1, #255	; 0xff
 8002e52:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e56:	d1f1      	bne.n	8002e3c <d_print_comp_inner+0x484>
 8002e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e64:	4620      	mov	r0, r4
 8002e66:	4798      	blx	r3
 8002e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e72:	2101      	movs	r1, #1
 8002e74:	2300      	movs	r3, #0
 8002e76:	e7e3      	b.n	8002e40 <d_print_comp_inner+0x488>
 8002e78:	4ea3      	ldr	r6, [pc, #652]	; (8003108 <d_print_comp_inner+0x750>)
 8002e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e7e:	f106 0a11 	add.w	sl, r6, #17
 8002e82:	f04f 0900 	mov.w	r9, #0
 8002e86:	e009      	b.n	8002e9c <d_print_comp_inner+0x4e4>
 8002e88:	460b      	mov	r3, r1
 8002e8a:	3101      	adds	r1, #1
 8002e8c:	4556      	cmp	r6, sl
 8002e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e92:	54e7      	strb	r7, [r4, r3]
 8002e94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e98:	f001 800a 	beq.w	8003eb0 <d_print_comp_inner+0x14f8>
 8002e9c:	29ff      	cmp	r1, #255	; 0xff
 8002e9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ea2:	d1f1      	bne.n	8002e88 <d_print_comp_inner+0x4d0>
 8002ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4798      	blx	r3
 8002eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e7e3      	b.n	8002e8c <d_print_comp_inner+0x4d4>
 8002ec4:	4e91      	ldr	r6, [pc, #580]	; (800310c <d_print_comp_inner+0x754>)
 8002ec6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eca:	f106 0a15 	add.w	sl, r6, #21
 8002ece:	f04f 0900 	mov.w	r9, #0
 8002ed2:	e009      	b.n	8002ee8 <d_print_comp_inner+0x530>
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	3101      	adds	r1, #1
 8002ed8:	4556      	cmp	r6, sl
 8002eda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ede:	54e7      	strb	r7, [r4, r3]
 8002ee0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ee4:	f000 87b3 	beq.w	8003e4e <d_print_comp_inner+0x1496>
 8002ee8:	29ff      	cmp	r1, #255	; 0xff
 8002eea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002eee:	d1f1      	bne.n	8002ed4 <d_print_comp_inner+0x51c>
 8002ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002efc:	4620      	mov	r0, r4
 8002efe:	4798      	blx	r3
 8002f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e7e3      	b.n	8002ed8 <d_print_comp_inner+0x520>
 8002f10:	4e7f      	ldr	r6, [pc, #508]	; (8003110 <d_print_comp_inner+0x758>)
 8002f12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f16:	f106 0a12 	add.w	sl, r6, #18
 8002f1a:	f04f 0900 	mov.w	r9, #0
 8002f1e:	e009      	b.n	8002f34 <d_print_comp_inner+0x57c>
 8002f20:	460b      	mov	r3, r1
 8002f22:	3101      	adds	r1, #1
 8002f24:	45b2      	cmp	sl, r6
 8002f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f2a:	54e7      	strb	r7, [r4, r3]
 8002f2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f30:	f000 879b 	beq.w	8003e6a <d_print_comp_inner+0x14b2>
 8002f34:	29ff      	cmp	r1, #255	; 0xff
 8002f36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f3a:	d1f1      	bne.n	8002f20 <d_print_comp_inner+0x568>
 8002f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4798      	blx	r3
 8002f4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f50:	3301      	adds	r3, #1
 8002f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f56:	2101      	movs	r1, #1
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7e3      	b.n	8002f24 <d_print_comp_inner+0x56c>
 8002f5c:	4e6d      	ldr	r6, [pc, #436]	; (8003114 <d_print_comp_inner+0x75c>)
 8002f5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f62:	f106 0a10 	add.w	sl, r6, #16
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	e009      	b.n	8002f80 <d_print_comp_inner+0x5c8>
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	3101      	adds	r1, #1
 8002f70:	4556      	cmp	r6, sl
 8002f72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f76:	54e7      	strb	r7, [r4, r3]
 8002f78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f7c:	f000 876e 	beq.w	8003e5c <d_print_comp_inner+0x14a4>
 8002f80:	29ff      	cmp	r1, #255	; 0xff
 8002f82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f86:	d1f1      	bne.n	8002f6c <d_print_comp_inner+0x5b4>
 8002f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f94:	4620      	mov	r0, r4
 8002f96:	4798      	blx	r3
 8002f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e7e3      	b.n	8002f70 <d_print_comp_inner+0x5b8>
 8002fa8:	4e5b      	ldr	r6, [pc, #364]	; (8003118 <d_print_comp_inner+0x760>)
 8002faa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fae:	f106 0a0d 	add.w	sl, r6, #13
 8002fb2:	f04f 0900 	mov.w	r9, #0
 8002fb6:	e009      	b.n	8002fcc <d_print_comp_inner+0x614>
 8002fb8:	460b      	mov	r3, r1
 8002fba:	3101      	adds	r1, #1
 8002fbc:	4556      	cmp	r6, sl
 8002fbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fc2:	54e7      	strb	r7, [r4, r3]
 8002fc4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fc8:	f000 8756 	beq.w	8003e78 <d_print_comp_inner+0x14c0>
 8002fcc:	29ff      	cmp	r1, #255	; 0xff
 8002fce:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002fd2:	d1f1      	bne.n	8002fb8 <d_print_comp_inner+0x600>
 8002fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fd8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4798      	blx	r3
 8002fe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e7e3      	b.n	8002fbc <d_print_comp_inner+0x604>
 8002ff4:	4e49      	ldr	r6, [pc, #292]	; (800311c <d_print_comp_inner+0x764>)
 8002ff6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ffa:	f106 0a18 	add.w	sl, r6, #24
 8002ffe:	f04f 0900 	mov.w	r9, #0
 8003002:	e009      	b.n	8003018 <d_print_comp_inner+0x660>
 8003004:	460b      	mov	r3, r1
 8003006:	3101      	adds	r1, #1
 8003008:	45b2      	cmp	sl, r6
 800300a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800300e:	54e7      	strb	r7, [r4, r3]
 8003010:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003014:	f000 86e3 	beq.w	8003dde <d_print_comp_inner+0x1426>
 8003018:	29ff      	cmp	r1, #255	; 0xff
 800301a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800301e:	d1f1      	bne.n	8003004 <d_print_comp_inner+0x64c>
 8003020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003024:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003028:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800302c:	4620      	mov	r0, r4
 800302e:	4798      	blx	r3
 8003030:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003034:	3301      	adds	r3, #1
 8003036:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800303a:	2101      	movs	r1, #1
 800303c:	2300      	movs	r3, #0
 800303e:	e7e3      	b.n	8003008 <d_print_comp_inner+0x650>
 8003040:	4e37      	ldr	r6, [pc, #220]	; (8003120 <d_print_comp_inner+0x768>)
 8003042:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003046:	f106 0a0b 	add.w	sl, r6, #11
 800304a:	f04f 0900 	mov.w	r9, #0
 800304e:	e009      	b.n	8003064 <d_print_comp_inner+0x6ac>
 8003050:	460b      	mov	r3, r1
 8003052:	3101      	adds	r1, #1
 8003054:	45b2      	cmp	sl, r6
 8003056:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800305a:	54e7      	strb	r7, [r4, r3]
 800305c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003060:	f000 87ca 	beq.w	8003ff8 <d_print_comp_inner+0x1640>
 8003064:	29ff      	cmp	r1, #255	; 0xff
 8003066:	f816 7b01 	ldrb.w	r7, [r6], #1
 800306a:	d1f1      	bne.n	8003050 <d_print_comp_inner+0x698>
 800306c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003074:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003078:	4620      	mov	r0, r4
 800307a:	4798      	blx	r3
 800307c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003080:	3301      	adds	r3, #1
 8003082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003086:	2101      	movs	r1, #1
 8003088:	2300      	movs	r3, #0
 800308a:	e7e3      	b.n	8003054 <d_print_comp_inner+0x69c>
 800308c:	4e25      	ldr	r6, [pc, #148]	; (8003124 <d_print_comp_inner+0x76c>)
 800308e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003092:	f106 0a08 	add.w	sl, r6, #8
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	e009      	b.n	80030b0 <d_print_comp_inner+0x6f8>
 800309c:	460b      	mov	r3, r1
 800309e:	3101      	adds	r1, #1
 80030a0:	45b2      	cmp	sl, r6
 80030a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030a6:	54e7      	strb	r7, [r4, r3]
 80030a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80030ac:	f000 86c8 	beq.w	8003e40 <d_print_comp_inner+0x1488>
 80030b0:	29ff      	cmp	r1, #255	; 0xff
 80030b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80030b6:	d1f1      	bne.n	800309c <d_print_comp_inner+0x6e4>
 80030b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030c4:	4620      	mov	r0, r4
 80030c6:	4798      	blx	r3
 80030c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030d2:	2101      	movs	r1, #1
 80030d4:	2300      	movs	r3, #0
 80030d6:	e7e3      	b.n	80030a0 <d_print_comp_inner+0x6e8>
 80030d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030dc:	29ff      	cmp	r1, #255	; 0xff
 80030de:	f001 847c 	beq.w	80049da <d_print_comp_inner+0x2022>
 80030e2:	1c4a      	adds	r2, r1, #1
 80030e4:	237e      	movs	r3, #126	; 0x7e
 80030e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030ea:	5463      	strb	r3, [r4, r1]
 80030ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030f0:	4641      	mov	r1, r8
 80030f2:	68aa      	ldr	r2, [r5, #8]
 80030f4:	4620      	mov	r0, r4
 80030f6:	f002 fa03 	bl	8005500 <d_print_comp>
 80030fa:	e52b      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80030fc:	68aa      	ldr	r2, [r5, #8]
 80030fe:	f002 f9ff 	bl	8005500 <d_print_comp>
 8003102:	e527      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003104:	08016e73 	.word	0x08016e73
 8003108:	08016e43 	.word	0x08016e43
 800310c:	08016e3f 	.word	0x08016e3f
 8003110:	08016e17 	.word	0x08016e17
 8003114:	08016e2b 	.word	0x08016e2b
 8003118:	08016e08 	.word	0x08016e08
 800311c:	08016de3 	.word	0x08016de3
 8003120:	08016dcc 	.word	0x08016dcc
 8003124:	08016dd7 	.word	0x08016dd7
 8003128:	2200      	movs	r2, #0
 800312a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800312e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003132:	686e      	ldr	r6, [r5, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2e00      	cmp	r6, #0
 8003138:	f000 864c 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 800313c:	f10d 0910 	add.w	r9, sp, #16
 8003140:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8003144:	4617      	mov	r7, r2
 8003146:	4696      	mov	lr, r2
 8003148:	464b      	mov	r3, r9
 800314a:	7831      	ldrb	r1, [r6, #0]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f1a1 021c 	sub.w	r2, r1, #28
 8003152:	2a04      	cmp	r2, #4
 8003154:	605e      	str	r6, [r3, #4]
 8003156:	f8c3 e008 	str.w	lr, [r3, #8]
 800315a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800315e:	f107 0701 	add.w	r7, r7, #1
 8003162:	4618      	mov	r0, r3
 8003164:	461a      	mov	r2, r3
 8003166:	f240 862a 	bls.w	8003dbe <d_print_comp_inner+0x1406>
 800316a:	294c      	cmp	r1, #76	; 0x4c
 800316c:	f000 8627 	beq.w	8003dbe <d_print_comp_inner+0x1406>
 8003170:	2904      	cmp	r1, #4
 8003172:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003176:	f001 87bb 	beq.w	80050f0 <d_print_comp_inner+0x2738>
 800317a:	2902      	cmp	r1, #2
 800317c:	d11a      	bne.n	80031b4 <d_print_comp_inner+0x7fc>
 800317e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8003182:	f89b 3000 	ldrb.w	r3, [fp]
 8003186:	2b46      	cmp	r3, #70	; 0x46
 8003188:	f002 8035 	beq.w	80051f6 <d_print_comp_inner+0x283e>
 800318c:	462b      	mov	r3, r5
 800318e:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 8003192:	9601      	str	r6, [sp, #4]
 8003194:	465d      	mov	r5, fp
 8003196:	4676      	mov	r6, lr
 8003198:	46a2      	mov	sl, r4
 800319a:	469b      	mov	fp, r3
 800319c:	782b      	ldrb	r3, [r5, #0]
 800319e:	f1a3 021c 	sub.w	r2, r3, #28
 80031a2:	2a04      	cmp	r2, #4
 80031a4:	f241 805d 	bls.w	8004262 <d_print_comp_inner+0x18aa>
 80031a8:	2b4c      	cmp	r3, #76	; 0x4c
 80031aa:	f001 805a 	beq.w	8004262 <d_print_comp_inner+0x18aa>
 80031ae:	9e01      	ldr	r6, [sp, #4]
 80031b0:	4654      	mov	r4, sl
 80031b2:	465d      	mov	r5, fp
 80031b4:	68aa      	ldr	r2, [r5, #8]
 80031b6:	4641      	mov	r1, r8
 80031b8:	4620      	mov	r0, r4
 80031ba:	f002 f9a1 	bl	8005500 <d_print_comp>
 80031be:	7833      	ldrb	r3, [r6, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	f002 8020 	beq.w	8005206 <d_print_comp_inner+0x284e>
 80031c6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80031ca:	2620      	movs	r6, #32
 80031cc:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80031d0:	3f01      	subs	r7, #1
 80031d2:	b985      	cbnz	r5, 80031f6 <d_print_comp_inner+0x83e>
 80031d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031d8:	29ff      	cmp	r1, #255	; 0xff
 80031da:	f002 8043 	beq.w	8005264 <d_print_comp_inner+0x28ac>
 80031de:	1c4b      	adds	r3, r1, #1
 80031e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031e4:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80031e8:	5466      	strb	r6, [r4, r1]
 80031ea:	4620      	mov	r0, r4
 80031ec:	4641      	mov	r1, r8
 80031ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80031f2:	f002 f995 	bl	8005520 <d_print_mod>
 80031f6:	f1a9 0910 	sub.w	r9, r9, #16
 80031fa:	2f00      	cmp	r7, #0
 80031fc:	d1e6      	bne.n	80031cc <d_print_comp_inner+0x814>
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003204:	e4a6      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003206:	4ed1      	ldr	r6, [pc, #836]	; (800354c <d_print_comp_inner+0xb94>)
 8003208:	686a      	ldr	r2, [r5, #4]
 800320a:	f002 f979 	bl	8005500 <d_print_comp>
 800320e:	f106 0a05 	add.w	sl, r6, #5
 8003212:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003216:	f04f 0900 	mov.w	r9, #0
 800321a:	e009      	b.n	8003230 <d_print_comp_inner+0x878>
 800321c:	460b      	mov	r3, r1
 800321e:	3101      	adds	r1, #1
 8003220:	45b2      	cmp	sl, r6
 8003222:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003226:	54e7      	strb	r7, [r4, r3]
 8003228:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800322c:	f000 86d1 	beq.w	8003fd2 <d_print_comp_inner+0x161a>
 8003230:	29ff      	cmp	r1, #255	; 0xff
 8003232:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003236:	d1f1      	bne.n	800321c <d_print_comp_inner+0x864>
 8003238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800323c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003244:	4620      	mov	r0, r4
 8003246:	4798      	blx	r3
 8003248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800324c:	3301      	adds	r3, #1
 800324e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003252:	2101      	movs	r1, #1
 8003254:	2300      	movs	r3, #0
 8003256:	e7e3      	b.n	8003220 <d_print_comp_inner+0x868>
 8003258:	686a      	ldr	r2, [r5, #4]
 800325a:	f002 f951 	bl	8005500 <d_print_comp>
 800325e:	f018 0904 	ands.w	r9, r8, #4
 8003262:	f001 82aa 	beq.w	80047ba <d_print_comp_inner+0x1e02>
 8003266:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800326a:	29ff      	cmp	r1, #255	; 0xff
 800326c:	f001 859a 	beq.w	8004da4 <d_print_comp_inner+0x23ec>
 8003270:	1c4a      	adds	r2, r1, #1
 8003272:	232e      	movs	r3, #46	; 0x2e
 8003274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003278:	5463      	strb	r3, [r4, r1]
 800327a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800327e:	68ad      	ldr	r5, [r5, #8]
 8003280:	782b      	ldrb	r3, [r5, #0]
 8003282:	2b46      	cmp	r3, #70	; 0x46
 8003284:	f001 83cc 	beq.w	8004a20 <d_print_comp_inner+0x2068>
 8003288:	462a      	mov	r2, r5
 800328a:	4641      	mov	r1, r8
 800328c:	4620      	mov	r0, r4
 800328e:	f002 f937 	bl	8005500 <d_print_comp>
 8003292:	e45f      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003294:	f011 0804 	ands.w	r8, r1, #4
 8003298:	f041 808b 	bne.w	80043b2 <d_print_comp_inner+0x19fa>
 800329c:	68af      	ldr	r7, [r5, #8]
 800329e:	686d      	ldr	r5, [r5, #4]
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f43f ac57 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032aa:	442f      	add	r7, r5
 80032ac:	e009      	b.n	80032c2 <d_print_comp_inner+0x90a>
 80032ae:	460b      	mov	r3, r1
 80032b0:	3101      	adds	r1, #1
 80032b2:	42bd      	cmp	r5, r7
 80032b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032b8:	54e6      	strb	r6, [r4, r3]
 80032ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80032be:	f43f ac49 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032c2:	29ff      	cmp	r1, #255	; 0xff
 80032c4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80032c8:	d1f1      	bne.n	80032ae <d_print_comp_inner+0x8f6>
 80032ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032d6:	4620      	mov	r0, r4
 80032d8:	4798      	blx	r3
 80032da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032de:	3301      	adds	r3, #1
 80032e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032e4:	2101      	movs	r1, #1
 80032e6:	2300      	movs	r3, #0
 80032e8:	e7e3      	b.n	80032b2 <d_print_comp_inner+0x8fa>
 80032ea:	2301      	movs	r3, #1
 80032ec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80032f0:	e430      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80032f2:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f041 8106 	bne.w	8004508 <d_print_comp_inner+0x1b50>
 80032fc:	1d29      	adds	r1, r5, #4
 80032fe:	f7fd fa97 	bl	8000830 <d_lookup_template_argument.isra.6>
 8003302:	2800      	cmp	r0, #0
 8003304:	f43f ac3a 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8003308:	7803      	ldrb	r3, [r0, #0]
 800330a:	2b2f      	cmp	r3, #47	; 0x2f
 800330c:	f001 83fc 	beq.w	8004b08 <d_print_comp_inner+0x2150>
 8003310:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800331a:	4602      	mov	r2, r0
 800331c:	4641      	mov	r1, r8
 800331e:	4620      	mov	r0, r4
 8003320:	f002 f8ee 	bl	8005500 <d_print_comp>
 8003324:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003328:	e414      	b.n	8002b54 <d_print_comp_inner+0x19c>
 800332a:	2300      	movs	r3, #0
 800332c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003330:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 8003334:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003338:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 800333c:	f011 0f04 	tst.w	r1, #4
 8003340:	686e      	ldr	r6, [r5, #4]
 8003342:	d005      	beq.n	8003350 <d_print_comp_inner+0x998>
 8003344:	7833      	ldrb	r3, [r6, #0]
 8003346:	b91b      	cbnz	r3, 8003350 <d_print_comp_inner+0x998>
 8003348:	68b2      	ldr	r2, [r6, #8]
 800334a:	2a06      	cmp	r2, #6
 800334c:	f001 853c 	beq.w	8004dc8 <d_print_comp_inner+0x2410>
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	4620      	mov	r0, r4
 8003356:	f002 f8d3 	bl	8005500 <d_print_comp>
 800335a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800335e:	2b3c      	cmp	r3, #60	; 0x3c
 8003360:	f001 8274 	beq.w	800484c <d_print_comp_inner+0x1e94>
 8003364:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	f001 8489 	beq.w	8004c80 <d_print_comp_inner+0x22c8>
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	223c      	movs	r2, #60	; 0x3c
 8003372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003376:	54e2      	strb	r2, [r4, r3]
 8003378:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800337c:	4641      	mov	r1, r8
 800337e:	68aa      	ldr	r2, [r5, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f002 f8bd 	bl	8005500 <d_print_comp>
 8003386:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800338a:	2b3e      	cmp	r3, #62	; 0x3e
 800338c:	f001 8239 	beq.w	8004802 <d_print_comp_inner+0x1e4a>
 8003390:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	f001 8460 	beq.w	8004c5a <d_print_comp_inner+0x22a2>
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	223e      	movs	r2, #62	; 0x3e
 800339e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033a2:	54e2      	strb	r2, [r4, r3]
 80033a4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033a8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80033ac:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 80033b0:	f7ff bbd0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80033b4:	686f      	ldr	r7, [r5, #4]
 80033b6:	2f00      	cmp	r7, #0
 80033b8:	f001 8082 	beq.w	80044c0 <d_print_comp_inner+0x1b08>
 80033bc:	4d64      	ldr	r5, [pc, #400]	; (8003550 <d_print_comp_inner+0xb98>)
 80033be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033c2:	f105 0906 	add.w	r9, r5, #6
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	e009      	b.n	80033e0 <d_print_comp_inner+0xa28>
 80033cc:	460b      	mov	r3, r1
 80033ce:	3101      	adds	r1, #1
 80033d0:	45a9      	cmp	r9, r5
 80033d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033d6:	54e6      	strb	r6, [r4, r3]
 80033d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80033dc:	f000 8782 	beq.w	80042e4 <d_print_comp_inner+0x192c>
 80033e0:	29ff      	cmp	r1, #255	; 0xff
 80033e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80033e6:	d1f1      	bne.n	80033cc <d_print_comp_inner+0xa14>
 80033e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033f4:	4620      	mov	r0, r4
 80033f6:	4798      	blx	r3
 80033f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003402:	2101      	movs	r1, #1
 8003404:	2300      	movs	r3, #0
 8003406:	e7e3      	b.n	80033d0 <d_print_comp_inner+0xa18>
 8003408:	4e52      	ldr	r6, [pc, #328]	; (8003554 <d_print_comp_inner+0xb9c>)
 800340a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800340e:	f106 0a0a 	add.w	sl, r6, #10
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	e009      	b.n	800342c <d_print_comp_inner+0xa74>
 8003418:	460b      	mov	r3, r1
 800341a:	3101      	adds	r1, #1
 800341c:	4556      	cmp	r6, sl
 800341e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003422:	54e7      	strb	r7, [r4, r3]
 8003424:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003428:	f000 8701 	beq.w	800422e <d_print_comp_inner+0x1876>
 800342c:	29ff      	cmp	r1, #255	; 0xff
 800342e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003432:	d1f1      	bne.n	8003418 <d_print_comp_inner+0xa60>
 8003434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003440:	4620      	mov	r0, r4
 8003442:	4798      	blx	r3
 8003444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003448:	3301      	adds	r3, #1
 800344a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800344e:	2101      	movs	r1, #1
 8003450:	2300      	movs	r3, #0
 8003452:	e7e3      	b.n	800341c <d_print_comp_inner+0xa64>
 8003454:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003458:	792d      	ldrb	r5, [r5, #4]
 800345a:	29ff      	cmp	r1, #255	; 0xff
 800345c:	f001 82ab 	beq.w	80049b6 <d_print_comp_inner+0x1ffe>
 8003460:	1c4b      	adds	r3, r1, #1
 8003462:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003466:	5465      	strb	r5, [r4, r1]
 8003468:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800346c:	f7ff bb72 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003470:	686a      	ldr	r2, [r5, #4]
 8003472:	f002 f845 	bl	8005500 <d_print_comp>
 8003476:	68aa      	ldr	r2, [r5, #8]
 8003478:	4641      	mov	r1, r8
 800347a:	4620      	mov	r0, r4
 800347c:	f002 f840 	bl	8005500 <d_print_comp>
 8003480:	f7ff bb68 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003484:	4e34      	ldr	r6, [pc, #208]	; (8003558 <d_print_comp_inner+0xba0>)
 8003486:	686a      	ldr	r2, [r5, #4]
 8003488:	f002 f83a 	bl	8005500 <d_print_comp>
 800348c:	f106 0a08 	add.w	sl, r6, #8
 8003490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	e009      	b.n	80034ae <d_print_comp_inner+0xaf6>
 800349a:	460b      	mov	r3, r1
 800349c:	3101      	adds	r1, #1
 800349e:	4556      	cmp	r6, sl
 80034a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034a4:	54e7      	strb	r7, [r4, r3]
 80034a6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80034aa:	f000 8508 	beq.w	8003ebe <d_print_comp_inner+0x1506>
 80034ae:	29ff      	cmp	r1, #255	; 0xff
 80034b0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034b4:	d1f1      	bne.n	800349a <d_print_comp_inner+0xae2>
 80034b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034c2:	4620      	mov	r0, r4
 80034c4:	4798      	blx	r3
 80034c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034d0:	2101      	movs	r1, #1
 80034d2:	2300      	movs	r3, #0
 80034d4:	e7e3      	b.n	800349e <d_print_comp_inner+0xae6>
 80034d6:	686a      	ldr	r2, [r5, #4]
 80034d8:	b10a      	cbz	r2, 80034de <d_print_comp_inner+0xb26>
 80034da:	f002 f811 	bl	8005500 <d_print_comp>
 80034de:	68ab      	ldr	r3, [r5, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f43f ab37 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80034e6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80034ea:	2efd      	cmp	r6, #253	; 0xfd
 80034ec:	f201 81bc 	bhi.w	8004868 <d_print_comp_inner+0x1eb0>
 80034f0:	4f1a      	ldr	r7, [pc, #104]	; (800355c <d_print_comp_inner+0xba4>)
 80034f2:	f04f 0a00 	mov.w	sl, #0
 80034f6:	f107 0b02 	add.w	fp, r7, #2
 80034fa:	4631      	mov	r1, r6
 80034fc:	e009      	b.n	8003512 <d_print_comp_inner+0xb5a>
 80034fe:	460b      	mov	r3, r1
 8003500:	3101      	adds	r1, #1
 8003502:	455f      	cmp	r7, fp
 8003504:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003508:	54e6      	strb	r6, [r4, r3]
 800350a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800350e:	f000 86c1 	beq.w	8004294 <d_print_comp_inner+0x18dc>
 8003512:	29ff      	cmp	r1, #255	; 0xff
 8003514:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003518:	d1f1      	bne.n	80034fe <d_print_comp_inner+0xb46>
 800351a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800351e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003526:	4620      	mov	r0, r4
 8003528:	4798      	blx	r3
 800352a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800352e:	3301      	adds	r3, #1
 8003530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003534:	2101      	movs	r1, #1
 8003536:	2300      	movs	r3, #0
 8003538:	e7e3      	b.n	8003502 <d_print_comp_inner+0xb4a>
 800353a:	4e09      	ldr	r6, [pc, #36]	; (8003560 <d_print_comp_inner+0xba8>)
 800353c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003540:	f106 0a09 	add.w	sl, r6, #9
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	e016      	b.n	8003578 <d_print_comp_inner+0xbc0>
 800354a:	bf00      	nop
 800354c:	08016d98 	.word	0x08016d98
 8003550:	08016fa8 	.word	0x08016fa8
 8003554:	08016f90 	.word	0x08016f90
 8003558:	0801700f 	.word	0x0801700f
 800355c:	08016f2c 	.word	0x08016f2c
 8003560:	08016f3b 	.word	0x08016f3b
 8003564:	460b      	mov	r3, r1
 8003566:	3101      	adds	r1, #1
 8003568:	4556      	cmp	r6, sl
 800356a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800356e:	54e7      	strb	r7, [r4, r3]
 8003570:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003574:	f000 8594 	beq.w	80040a0 <d_print_comp_inner+0x16e8>
 8003578:	29ff      	cmp	r1, #255	; 0xff
 800357a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800357e:	d1f1      	bne.n	8003564 <d_print_comp_inner+0xbac>
 8003580:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003584:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800358c:	4620      	mov	r0, r4
 800358e:	4798      	blx	r3
 8003590:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003594:	3301      	adds	r3, #1
 8003596:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800359a:	2101      	movs	r1, #1
 800359c:	2300      	movs	r3, #0
 800359e:	e7e3      	b.n	8003568 <d_print_comp_inner+0xbb0>
 80035a0:	4ed1      	ldr	r6, [pc, #836]	; (80038e8 <d_print_comp_inner+0xf30>)
 80035a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035a6:	f106 0a09 	add.w	sl, r6, #9
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	e009      	b.n	80035c4 <d_print_comp_inner+0xc0c>
 80035b0:	460b      	mov	r3, r1
 80035b2:	3101      	adds	r1, #1
 80035b4:	4556      	cmp	r6, sl
 80035b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035ba:	54e7      	strb	r7, [r4, r3]
 80035bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035c0:	f000 8597 	beq.w	80040f2 <d_print_comp_inner+0x173a>
 80035c4:	29ff      	cmp	r1, #255	; 0xff
 80035c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80035ca:	d1f1      	bne.n	80035b0 <d_print_comp_inner+0xbf8>
 80035cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80035d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035d8:	4620      	mov	r0, r4
 80035da:	4798      	blx	r3
 80035dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035e6:	2101      	movs	r1, #1
 80035e8:	2300      	movs	r3, #0
 80035ea:	e7e3      	b.n	80035b4 <d_print_comp_inner+0xbfc>
 80035ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80035f0:	4dbe      	ldr	r5, [pc, #760]	; (80038ec <d_print_comp_inner+0xf34>)
 80035f2:	f8da 7008 	ldr.w	r7, [sl, #8]
 80035f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035fa:	f105 0808 	add.w	r8, r5, #8
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	e009      	b.n	8003618 <d_print_comp_inner+0xc60>
 8003604:	460b      	mov	r3, r1
 8003606:	3101      	adds	r1, #1
 8003608:	45a8      	cmp	r8, r5
 800360a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800360e:	54e6      	strb	r6, [r4, r3]
 8003610:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003614:	f000 8506 	beq.w	8004024 <d_print_comp_inner+0x166c>
 8003618:	29ff      	cmp	r1, #255	; 0xff
 800361a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800361e:	d1f1      	bne.n	8003604 <d_print_comp_inner+0xc4c>
 8003620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003624:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800362c:	4620      	mov	r0, r4
 800362e:	4798      	blx	r3
 8003630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003634:	3301      	adds	r3, #1
 8003636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800363a:	2101      	movs	r1, #1
 800363c:	2300      	movs	r3, #0
 800363e:	e7e3      	b.n	8003608 <d_print_comp_inner+0xc50>
 8003640:	686a      	ldr	r2, [r5, #4]
 8003642:	68ae      	ldr	r6, [r5, #8]
 8003644:	b10a      	cbz	r2, 800364a <d_print_comp_inner+0xc92>
 8003646:	f001 ff5b 	bl	8005500 <d_print_comp>
 800364a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	f001 82b1 	beq.w	8004bb6 <d_print_comp_inner+0x21fe>
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	257b      	movs	r5, #123	; 0x7b
 8003658:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800365c:	4641      	mov	r1, r8
 800365e:	54e5      	strb	r5, [r4, r3]
 8003660:	4632      	mov	r2, r6
 8003662:	4620      	mov	r0, r4
 8003664:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003668:	f001 ff4a 	bl	8005500 <d_print_comp>
 800366c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003670:	29ff      	cmp	r1, #255	; 0xff
 8003672:	f001 81e7 	beq.w	8004a44 <d_print_comp_inner+0x208c>
 8003676:	1c4a      	adds	r2, r1, #1
 8003678:	237d      	movs	r3, #125	; 0x7d
 800367a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800367e:	5463      	strb	r3, [r4, r1]
 8003680:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003684:	f7ff ba66 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003688:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800368c:	68ae      	ldr	r6, [r5, #8]
 800368e:	f899 3000 	ldrb.w	r3, [r9]
 8003692:	2b31      	cmp	r3, #49	; 0x31
 8003694:	f000 87cb 	beq.w	800462e <d_print_comp_inner+0x1c76>
 8003698:	2b33      	cmp	r3, #51	; 0x33
 800369a:	f041 86d3 	bne.w	8005444 <d_print_comp_inner+0x2a8c>
 800369e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036a2:	29ff      	cmp	r1, #255	; 0xff
 80036a4:	f001 84c3 	beq.w	800502e <d_print_comp_inner+0x2676>
 80036a8:	1c4a      	adds	r2, r1, #1
 80036aa:	2328      	movs	r3, #40	; 0x28
 80036ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036b0:	5463      	strb	r3, [r4, r1]
 80036b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036b6:	a904      	add	r1, sp, #16
 80036b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80036bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80036c0:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 80036c4:	4620      	mov	r0, r4
 80036c6:	4641      	mov	r1, r8
 80036c8:	9305      	str	r3, [sp, #20]
 80036ca:	9204      	str	r2, [sp, #16]
 80036cc:	f7ff f974 	bl	80029b8 <d_print_comp_inner>
 80036d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036d4:	9b05      	ldr	r3, [sp, #20]
 80036d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80036da:	29ff      	cmp	r1, #255	; 0xff
 80036dc:	f001 8496 	beq.w	800500c <d_print_comp_inner+0x2654>
 80036e0:	2329      	movs	r3, #41	; 0x29
 80036e2:	1c4a      	adds	r2, r1, #1
 80036e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036e8:	5463      	strb	r3, [r4, r1]
 80036ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036ee:	4632      	mov	r2, r6
 80036f0:	4641      	mov	r1, r8
 80036f2:	4620      	mov	r0, r4
 80036f4:	f002 fd2a 	bl	800614c <d_print_subexpr>
 80036f8:	f7ff ba2c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80036fc:	686a      	ldr	r2, [r5, #4]
 80036fe:	f002 fce7 	bl	80060d0 <d_print_expr_op>
 8003702:	f7ff ba27 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003706:	f011 0f20 	tst.w	r1, #32
 800370a:	f040 8753 	bne.w	80045b4 <d_print_comp_inner+0x1bfc>
 800370e:	686a      	ldr	r2, [r5, #4]
 8003710:	b11a      	cbz	r2, 800371a <d_print_comp_inner+0xd62>
 8003712:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8003716:	f001 81d0 	beq.w	8004aba <d_print_comp_inner+0x2102>
 800371a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 800371e:	f105 0208 	add.w	r2, r5, #8
 8003722:	4641      	mov	r1, r8
 8003724:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003728:	4620      	mov	r0, r4
 800372a:	f002 fbdd 	bl	8005ee8 <d_print_function_type.isra.11>
 800372e:	f7ff ba11 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003732:	f011 0804 	ands.w	r8, r1, #4
 8003736:	686b      	ldr	r3, [r5, #4]
 8003738:	f040 8612 	bne.w	8004360 <d_print_comp_inner+0x19a8>
 800373c:	e893 00a0 	ldmia.w	r3, {r5, r7}
 8003740:	2f00      	cmp	r7, #0
 8003742:	f43f aa07 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003746:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800374a:	442f      	add	r7, r5
 800374c:	e009      	b.n	8003762 <d_print_comp_inner+0xdaa>
 800374e:	460b      	mov	r3, r1
 8003750:	3101      	adds	r1, #1
 8003752:	42bd      	cmp	r5, r7
 8003754:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003758:	54e6      	strb	r6, [r4, r3]
 800375a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800375e:	f43f a9f9 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003762:	29ff      	cmp	r1, #255	; 0xff
 8003764:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003768:	d1f1      	bne.n	800374e <d_print_comp_inner+0xd96>
 800376a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800376e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003772:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003776:	4620      	mov	r0, r4
 8003778:	4798      	blx	r3
 800377a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800377e:	3301      	adds	r3, #1
 8003780:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003784:	2101      	movs	r1, #1
 8003786:	2300      	movs	r3, #0
 8003788:	e7e3      	b.n	8003752 <d_print_comp_inner+0xd9a>
 800378a:	6869      	ldr	r1, [r5, #4]
 800378c:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 8003790:	780b      	ldrb	r3, [r1, #0]
 8003792:	2f00      	cmp	r7, #0
 8003794:	f040 85e1 	bne.w	800435a <d_print_comp_inner+0x19a2>
 8003798:	2b05      	cmp	r3, #5
 800379a:	f001 81c7 	beq.w	8004b2c <d_print_comp_inner+0x2174>
 800379e:	2b23      	cmp	r3, #35	; 0x23
 80037a0:	f000 8689 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037a4:	782a      	ldrb	r2, [r5, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f000 8685 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037ac:	2b24      	cmp	r3, #36	; 0x24
 80037ae:	f47f a9eb 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80037b2:	a814      	add	r0, sp, #80	; 0x50
 80037b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037b8:	684a      	ldr	r2, [r1, #4]
 80037ba:	f840 3d40 	str.w	r3, [r0, #-64]!
 80037be:	2100      	movs	r1, #0
 80037c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80037c4:	9505      	str	r5, [sp, #20]
 80037c6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80037ca:	9106      	str	r1, [sp, #24]
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	f47f a9e8 	bne.w	8002ba4 <d_print_comp_inner+0x1ec>
 80037d4:	f7ff b9e5 	b.w	8002ba2 <d_print_comp_inner+0x1ea>
 80037d8:	686a      	ldr	r2, [r5, #4]
 80037da:	f001 fe91 	bl	8005500 <d_print_comp>
 80037de:	f7ff b9b9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80037e2:	ab14      	add	r3, sp, #80	; 0x50
 80037e4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80037e8:	f843 2d40 	str.w	r2, [r3, #-64]!
 80037ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80037f0:	68aa      	ldr	r2, [r5, #8]
 80037f2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	2600      	movs	r6, #0
 80037fa:	9505      	str	r5, [sp, #20]
 80037fc:	9606      	str	r6, [sp, #24]
 80037fe:	f001 fe7f 	bl	8005500 <d_print_comp>
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	b923      	cbnz	r3, 8003810 <d_print_comp_inner+0xe58>
 8003806:	462a      	mov	r2, r5
 8003808:	4641      	mov	r1, r8
 800380a:	4620      	mov	r0, r4
 800380c:	f001 fe88 	bl	8005520 <d_print_mod>
 8003810:	9b04      	ldr	r3, [sp, #16]
 8003812:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003816:	f7ff b99d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800381a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800381e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8003822:	f849 bd40 	str.w	fp, [r9, #-64]!
 8003826:	2200      	movs	r2, #0
 8003828:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800382c:	f8cd b000 	str.w	fp, [sp]
 8003830:	4659      	mov	r1, fp
 8003832:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8003836:	9505      	str	r5, [sp, #20]
 8003838:	9206      	str	r2, [sp, #24]
 800383a:	9307      	str	r3, [sp, #28]
 800383c:	2900      	cmp	r1, #0
 800383e:	f001 83a0 	beq.w	8004f82 <d_print_comp_inner+0x25ca>
 8003842:	684b      	ldr	r3, [r1, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3b19      	subs	r3, #25
 8003848:	2b02      	cmp	r3, #2
 800384a:	f201 839a 	bhi.w	8004f82 <d_print_comp_inner+0x25ca>
 800384e:	46ac      	mov	ip, r5
 8003850:	2701      	movs	r7, #1
 8003852:	460e      	mov	r6, r1
 8003854:	464d      	mov	r5, r9
 8003856:	e004      	b.n	8003862 <d_print_comp_inner+0xeaa>
 8003858:	6873      	ldr	r3, [r6, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b19      	subs	r3, #25
 800385e:	2b02      	cmp	r3, #2
 8003860:	d81b      	bhi.n	800389a <d_print_comp_inner+0xee2>
 8003862:	68b3      	ldr	r3, [r6, #8]
 8003864:	ea4f 1e07 	mov.w	lr, r7, lsl #4
 8003868:	aa14      	add	r2, sp, #80	; 0x50
 800386a:	eb02 0b0e 	add.w	fp, r2, lr
 800386e:	b98b      	cbnz	r3, 8003894 <d_print_comp_inner+0xedc>
 8003870:	2f03      	cmp	r7, #3
 8003872:	f201 80f9 	bhi.w	8004a68 <d_print_comp_inner+0x20b0>
 8003876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800387a:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 800387e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8003882:	f84b 5c40 	str.w	r5, [fp, #-64]
 8003886:	2301      	movs	r3, #1
 8003888:	eb09 050e 	add.w	r5, r9, lr
 800388c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8003890:	3701      	adds	r7, #1
 8003892:	60b3      	str	r3, [r6, #8]
 8003894:	6836      	ldr	r6, [r6, #0]
 8003896:	2e00      	cmp	r6, #0
 8003898:	d1de      	bne.n	8003858 <d_print_comp_inner+0xea0>
 800389a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800389e:	4641      	mov	r1, r8
 80038a0:	4620      	mov	r0, r4
 80038a2:	4665      	mov	r5, ip
 80038a4:	f001 fe2c 	bl	8005500 <d_print_comp>
 80038a8:	9b06      	ldr	r3, [sp, #24]
 80038aa:	9a00      	ldr	r2, [sp, #0]
 80038ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f a94f 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80038b6:	2f01      	cmp	r7, #1
 80038b8:	d00c      	beq.n	80038d4 <d_print_comp_inner+0xf1c>
 80038ba:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80038be:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80038c2:	3f01      	subs	r7, #1
 80038c4:	4641      	mov	r1, r8
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 fe2a 	bl	8005520 <d_print_mod>
 80038cc:	2f01      	cmp	r7, #1
 80038ce:	f1a9 0910 	sub.w	r9, r9, #16
 80038d2:	d1f4      	bne.n	80038be <d_print_comp_inner+0xf06>
 80038d4:	1d2a      	adds	r2, r5, #4
 80038d6:	4641      	mov	r1, r8
 80038d8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80038dc:	4620      	mov	r0, r4
 80038de:	f002 fa27 	bl	8005d30 <d_print_array_type.isra.10>
 80038e2:	f7ff b937 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80038e6:	bf00      	nop
 80038e8:	08016f3b 	.word	0x08016f3b
 80038ec:	08016f2f 	.word	0x08016f2f
 80038f0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 8674 	bne.w	80045e2 <d_print_comp_inner+0x1c2a>
 80038fa:	686a      	ldr	r2, [r5, #4]
 80038fc:	4bd5      	ldr	r3, [pc, #852]	; (8003c54 <d_print_comp_inner+0x129c>)
 80038fe:	6851      	ldr	r1, [r2, #4]
 8003900:	4299      	cmp	r1, r3
 8003902:	f000 866a 	beq.w	80045da <d_print_comp_inner+0x1c22>
 8003906:	4641      	mov	r1, r8
 8003908:	4620      	mov	r0, r4
 800390a:	f001 fdf9 	bl	8005500 <d_print_comp>
 800390e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003912:	2bff      	cmp	r3, #255	; 0xff
 8003914:	f001 82b2 	beq.w	8004e7c <d_print_comp_inner+0x24c4>
 8003918:	1c59      	adds	r1, r3, #1
 800391a:	2220      	movs	r2, #32
 800391c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003920:	54e2      	strb	r2, [r4, r3]
 8003922:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003926:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8595 	beq.w	800445a <d_print_comp_inner+0x1aa2>
 8003930:	4dc9      	ldr	r5, [pc, #804]	; (8003c58 <d_print_comp_inner+0x12a0>)
 8003932:	f04f 0800 	mov.w	r8, #0
 8003936:	1daf      	adds	r7, r5, #6
 8003938:	e009      	b.n	800394e <d_print_comp_inner+0xf96>
 800393a:	460b      	mov	r3, r1
 800393c:	3101      	adds	r1, #1
 800393e:	42bd      	cmp	r5, r7
 8003940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003944:	54e6      	strb	r6, [r4, r3]
 8003946:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800394a:	f43f a903 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800394e:	29ff      	cmp	r1, #255	; 0xff
 8003950:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003954:	d1f1      	bne.n	800393a <d_print_comp_inner+0xf82>
 8003956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800395a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800395e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003962:	4620      	mov	r0, r4
 8003964:	4798      	blx	r3
 8003966:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800396a:	3301      	adds	r3, #1
 800396c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003970:	2101      	movs	r1, #1
 8003972:	2300      	movs	r3, #0
 8003974:	e7e3      	b.n	800393e <d_print_comp_inner+0xf86>
 8003976:	4eb9      	ldr	r6, [pc, #740]	; (8003c5c <d_print_comp_inner+0x12a4>)
 8003978:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800397c:	f106 090e 	add.w	r9, r6, #14
 8003980:	f04f 0800 	mov.w	r8, #0
 8003984:	e009      	b.n	800399a <d_print_comp_inner+0xfe2>
 8003986:	460b      	mov	r3, r1
 8003988:	3101      	adds	r1, #1
 800398a:	45b1      	cmp	r9, r6
 800398c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003990:	54e7      	strb	r7, [r4, r3]
 8003992:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003996:	f000 83b3 	beq.w	8004100 <d_print_comp_inner+0x1748>
 800399a:	29ff      	cmp	r1, #255	; 0xff
 800399c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039a0:	d1f1      	bne.n	8003986 <d_print_comp_inner+0xfce>
 80039a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ae:	4620      	mov	r0, r4
 80039b0:	4798      	blx	r3
 80039b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039bc:	2101      	movs	r1, #1
 80039be:	2300      	movs	r3, #0
 80039c0:	e7e3      	b.n	800398a <d_print_comp_inner+0xfd2>
 80039c2:	4ea7      	ldr	r6, [pc, #668]	; (8003c60 <d_print_comp_inner+0x12a8>)
 80039c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039c8:	f106 0a1a 	add.w	sl, r6, #26
 80039cc:	f04f 0900 	mov.w	r9, #0
 80039d0:	e009      	b.n	80039e6 <d_print_comp_inner+0x102e>
 80039d2:	460b      	mov	r3, r1
 80039d4:	3101      	adds	r1, #1
 80039d6:	4556      	cmp	r6, sl
 80039d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039dc:	54e7      	strb	r7, [r4, r3]
 80039de:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80039e2:	f000 82ef 	beq.w	8003fc4 <d_print_comp_inner+0x160c>
 80039e6:	29ff      	cmp	r1, #255	; 0xff
 80039e8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039ec:	d1f1      	bne.n	80039d2 <d_print_comp_inner+0x101a>
 80039ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039fa:	4620      	mov	r0, r4
 80039fc:	4798      	blx	r3
 80039fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a02:	3301      	adds	r3, #1
 8003a04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e7e3      	b.n	80039d6 <d_print_comp_inner+0x101e>
 8003a0e:	6869      	ldr	r1, [r5, #4]
 8003a10:	f7fc ff2a 	bl	8000868 <d_find_pack>
 8003a14:	f04f 0900 	mov.w	r9, #0
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f001 835d 	beq.w	80050d8 <d_print_comp_inner+0x2720>
 8003a1e:	7803      	ldrb	r3, [r0, #0]
 8003a20:	2b2f      	cmp	r3, #47	; 0x2f
 8003a22:	f040 8457 	bne.w	80042d4 <d_print_comp_inner+0x191c>
 8003a26:	6843      	ldr	r3, [r0, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8453 	beq.w	80042d4 <d_print_comp_inner+0x191c>
 8003a2e:	6880      	ldr	r0, [r0, #8]
 8003a30:	f109 0901 	add.w	r9, r9, #1
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d1f2      	bne.n	8003a1e <d_print_comp_inner+0x1066>
 8003a38:	686b      	ldr	r3, [r5, #4]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f109 33ff 	add.w	r3, r9, #4294967295
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f04f 0a00 	mov.w	sl, #0
 8003a46:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8003a4a:	9a00      	ldr	r2, [sp, #0]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f001 fd56 	bl	8005500 <d_print_comp>
 8003a54:	9b01      	ldr	r3, [sp, #4]
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	f340 81ab 	ble.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a5c:	4d81      	ldr	r5, [pc, #516]	; (8003c64 <d_print_comp_inner+0x12ac>)
 8003a5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a62:	f105 0b02 	add.w	fp, r5, #2
 8003a66:	e009      	b.n	8003a7c <d_print_comp_inner+0x10c4>
 8003a68:	460b      	mov	r3, r1
 8003a6a:	3101      	adds	r1, #1
 8003a6c:	45ab      	cmp	fp, r5
 8003a6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a72:	54e6      	strb	r6, [r4, r3]
 8003a74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003a78:	f000 819b 	beq.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a7c:	29ff      	cmp	r1, #255	; 0xff
 8003a7e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003a82:	d1f1      	bne.n	8003a68 <d_print_comp_inner+0x10b0>
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e7e3      	b.n	8003a6c <d_print_comp_inner+0x10b4>
 8003aa4:	4e70      	ldr	r6, [pc, #448]	; (8003c68 <d_print_comp_inner+0x12b0>)
 8003aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aaa:	f106 0a16 	add.w	sl, r6, #22
 8003aae:	f04f 0900 	mov.w	r9, #0
 8003ab2:	e009      	b.n	8003ac8 <d_print_comp_inner+0x1110>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	3101      	adds	r1, #1
 8003ab8:	45b2      	cmp	sl, r6
 8003aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003abe:	54e7      	strb	r7, [r4, r3]
 8003ac0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003ac4:	f000 835f 	beq.w	8004186 <d_print_comp_inner+0x17ce>
 8003ac8:	29ff      	cmp	r1, #255	; 0xff
 8003aca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003ace:	d1f1      	bne.n	8003ab4 <d_print_comp_inner+0x10fc>
 8003ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003adc:	4620      	mov	r0, r4
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aea:	2101      	movs	r1, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	e7e3      	b.n	8003ab8 <d_print_comp_inner+0x1100>
 8003af0:	4e5e      	ldr	r6, [pc, #376]	; (8003c6c <d_print_comp_inner+0x12b4>)
 8003af2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003af6:	f106 0a0e 	add.w	sl, r6, #14
 8003afa:	f04f 0900 	mov.w	r9, #0
 8003afe:	e009      	b.n	8003b14 <d_print_comp_inner+0x115c>
 8003b00:	460b      	mov	r3, r1
 8003b02:	3101      	adds	r1, #1
 8003b04:	4556      	cmp	r6, sl
 8003b06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b0a:	54e7      	strb	r7, [r4, r3]
 8003b0c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b10:	f000 83a0 	beq.w	8004254 <d_print_comp_inner+0x189c>
 8003b14:	29ff      	cmp	r1, #255	; 0xff
 8003b16:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b1a:	d1f1      	bne.n	8003b00 <d_print_comp_inner+0x1148>
 8003b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4798      	blx	r3
 8003b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b30:	3301      	adds	r3, #1
 8003b32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b36:	2101      	movs	r1, #1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e7e3      	b.n	8003b04 <d_print_comp_inner+0x114c>
 8003b3c:	686a      	ldr	r2, [r5, #4]
 8003b3e:	7811      	ldrb	r1, [r2, #0]
 8003b40:	2927      	cmp	r1, #39	; 0x27
 8003b42:	f000 8615 	beq.w	8004770 <d_print_comp_inner+0x1db8>
 8003b46:	2600      	movs	r6, #0
 8003b48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b4c:	29ff      	cmp	r1, #255	; 0xff
 8003b4e:	f001 80c5 	beq.w	8004cdc <d_print_comp_inner+0x2324>
 8003b52:	2328      	movs	r3, #40	; 0x28
 8003b54:	1c4a      	adds	r2, r1, #1
 8003b56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b5a:	5463      	strb	r3, [r4, r1]
 8003b5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003b60:	686a      	ldr	r2, [r5, #4]
 8003b62:	4641      	mov	r1, r8
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fccb 	bl	8005500 <d_print_comp>
 8003b6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	f001 8099 	beq.w	8004ca6 <d_print_comp_inner+0x22ee>
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	2229      	movs	r2, #41	; 0x29
 8003b78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b7c:	54e2      	strb	r2, [r4, r3]
 8003b7e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003b82:	782b      	ldrb	r3, [r5, #0]
 8003b84:	2b3d      	cmp	r3, #61	; 0x3d
 8003b86:	f000 86e6 	beq.w	8004956 <d_print_comp_inner+0x1f9e>
 8003b8a:	2e08      	cmp	r6, #8
 8003b8c:	f000 867f 	beq.w	800488e <d_print_comp_inner+0x1ed6>
 8003b90:	68aa      	ldr	r2, [r5, #8]
 8003b92:	4641      	mov	r1, r8
 8003b94:	4620      	mov	r0, r4
 8003b96:	f001 fcb3 	bl	8005500 <d_print_comp>
 8003b9a:	f7fe bfdb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003ba4:	f7fe bfd6 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ba8:	686a      	ldr	r2, [r5, #4]
 8003baa:	4931      	ldr	r1, [pc, #196]	; (8003c70 <d_print_comp_inner+0x12b8>)
 8003bac:	a804      	add	r0, sp, #16
 8003bae:	f00e f8e1 	bl	8011d74 <sprintf>
 8003bb2:	a804      	add	r0, sp, #16
 8003bb4:	f002 febe 	bl	8006934 <strlen>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f43e afcb 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003bbe:	ad04      	add	r5, sp, #16
 8003bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bc4:	182f      	adds	r7, r5, r0
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	e009      	b.n	8003be0 <d_print_comp_inner+0x1228>
 8003bcc:	460b      	mov	r3, r1
 8003bce:	3101      	adds	r1, #1
 8003bd0:	42bd      	cmp	r5, r7
 8003bd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bd6:	54e6      	strb	r6, [r4, r3]
 8003bd8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003bdc:	f43e afba 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003be0:	29ff      	cmp	r1, #255	; 0xff
 8003be2:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003be6:	d1f1      	bne.n	8003bcc <d_print_comp_inner+0x1214>
 8003be8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003bf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4798      	blx	r3
 8003bf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c02:	2101      	movs	r1, #1
 8003c04:	2300      	movs	r3, #0
 8003c06:	e7e3      	b.n	8003bd0 <d_print_comp_inner+0x1218>
 8003c08:	4e1a      	ldr	r6, [pc, #104]	; (8003c74 <d_print_comp_inner+0x12bc>)
 8003c0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c0e:	f106 0a1c 	add.w	sl, r6, #28
 8003c12:	f04f 0900 	mov.w	r9, #0
 8003c16:	e009      	b.n	8003c2c <d_print_comp_inner+0x1274>
 8003c18:	460b      	mov	r3, r1
 8003c1a:	3101      	adds	r1, #1
 8003c1c:	4556      	cmp	r6, sl
 8003c1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c22:	54e7      	strb	r7, [r4, r3]
 8003c24:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c28:	f000 82fa 	beq.w	8004220 <d_print_comp_inner+0x1868>
 8003c2c:	29ff      	cmp	r1, #255	; 0xff
 8003c2e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c32:	d1f1      	bne.n	8003c18 <d_print_comp_inner+0x1260>
 8003c34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c40:	4620      	mov	r0, r4
 8003c42:	4798      	blx	r3
 8003c44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2300      	movs	r3, #0
 8003c52:	e7e3      	b.n	8003c1c <d_print_comp_inner+0x1264>
 8003c54:	08015f54 	.word	0x08015f54
 8003c58:	08016f1c 	.word	0x08016f1c
 8003c5c:	08016fff 	.word	0x08016fff
 8003c60:	08016ef7 	.word	0x08016ef7
 8003c64:	08016f2c 	.word	0x08016f2c
 8003c68:	08016efb 	.word	0x08016efb
 8003c6c:	08016f7f 	.word	0x08016f7f
 8003c70:	08016d50 	.word	0x08016d50
 8003c74:	08016fcf 	.word	0x08016fcf
 8003c78:	68ab      	ldr	r3, [r5, #8]
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	2a3a      	cmp	r2, #58	; 0x3a
 8003c7e:	f47e af7d 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b3b      	cmp	r3, #59	; 0x3b
 8003c88:	f47e af78 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c8c:	f105 0308 	add.w	r3, r5, #8
 8003c90:	686a      	ldr	r2, [r5, #4]
 8003c92:	f002 fabf 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8003c96:	4606      	mov	r6, r0
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f47e af5b 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8003c9e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003ca2:	68aa      	ldr	r2, [r5, #8]
 8003ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003ca8:	6893      	ldr	r3, [r2, #8]
 8003caa:	6808      	ldr	r0, [r1, #0]
 8003cac:	49d6      	ldr	r1, [pc, #856]	; (8004008 <d_print_comp_inner+0x1650>)
 8003cae:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003cb2:	685f      	ldr	r7, [r3, #4]
 8003cb4:	689d      	ldr	r5, [r3, #8]
 8003cb6:	f002 fe33 	bl	8006920 <strcmp>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	f001 82e2 	beq.w	8005284 <d_print_comp_inner+0x28cc>
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	49d2      	ldr	r1, [pc, #840]	; (800400c <d_print_comp_inner+0x1654>)
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fc fba3 	bl	8000410 <d_append_buffer>
 8003cca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003cce:	b183      	cbz	r3, 8003cf2 <d_print_comp_inner+0x133a>
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	464a      	mov	r2, r9
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f002 fa39 	bl	800614c <d_print_subexpr>
 8003cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003cde:	29ff      	cmp	r1, #255	; 0xff
 8003ce0:	f001 83ec 	beq.w	80054bc <d_print_comp_inner+0x2b04>
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	1c4a      	adds	r2, r1, #1
 8003ce8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003cec:	5463      	strb	r3, [r4, r1]
 8003cee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003cf2:	463a      	mov	r2, r7
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f001 fc02 	bl	8005500 <d_print_comp>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f43e af29 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003d02:	462a      	mov	r2, r5
 8003d04:	4641      	mov	r1, r8
 8003d06:	4620      	mov	r0, r4
 8003d08:	f002 fa20 	bl	800614c <d_print_subexpr>
 8003d0c:	f7fe bf22 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003d10:	4ebf      	ldr	r6, [pc, #764]	; (8004010 <d_print_comp_inner+0x1658>)
 8003d12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d16:	f106 0a08 	add.w	sl, r6, #8
 8003d1a:	f04f 0900 	mov.w	r9, #0
 8003d1e:	e009      	b.n	8003d34 <d_print_comp_inner+0x137c>
 8003d20:	460b      	mov	r3, r1
 8003d22:	3101      	adds	r1, #1
 8003d24:	4556      	cmp	r6, sl
 8003d26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d2a:	54e7      	strb	r7, [r4, r3]
 8003d2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d30:	f000 80d8 	beq.w	8003ee4 <d_print_comp_inner+0x152c>
 8003d34:	29ff      	cmp	r1, #255	; 0xff
 8003d36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d3a:	d1f1      	bne.n	8003d20 <d_print_comp_inner+0x1368>
 8003d3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4798      	blx	r3
 8003d4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d50:	3301      	adds	r3, #1
 8003d52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d56:	2101      	movs	r1, #1
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e7e3      	b.n	8003d24 <d_print_comp_inner+0x136c>
 8003d5c:	4ead      	ldr	r6, [pc, #692]	; (8004014 <d_print_comp_inner+0x165c>)
 8003d5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d62:	f106 0a1d 	add.w	sl, r6, #29
 8003d66:	f04f 0900 	mov.w	r9, #0
 8003d6a:	e009      	b.n	8003d80 <d_print_comp_inner+0x13c8>
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	3101      	adds	r1, #1
 8003d70:	45b2      	cmp	sl, r6
 8003d72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d76:	54e7      	strb	r7, [r4, r3]
 8003d78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d7c:	f000 81fc 	beq.w	8004178 <d_print_comp_inner+0x17c0>
 8003d80:	29ff      	cmp	r1, #255	; 0xff
 8003d82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d86:	d1f1      	bne.n	8003d6c <d_print_comp_inner+0x13b4>
 8003d88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d94:	4620      	mov	r0, r4
 8003d96:	4798      	blx	r3
 8003d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003da2:	2101      	movs	r1, #1
 8003da4:	2300      	movs	r3, #0
 8003da6:	e7e3      	b.n	8003d70 <d_print_comp_inner+0x13b8>
 8003da8:	2301      	movs	r3, #1
 8003daa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003dae:	f7fe bed1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003db2:	3701      	adds	r7, #1
 8003db4:	454f      	cmp	r7, r9
 8003db6:	f47f ae46 	bne.w	8003a46 <d_print_comp_inner+0x108e>
 8003dba:	f7fe becb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dbe:	6876      	ldr	r6, [r6, #4]
 8003dc0:	2e00      	cmp	r6, #0
 8003dc2:	f001 806e 	beq.w	8004ea2 <d_print_comp_inner+0x24ea>
 8003dc6:	2f04      	cmp	r7, #4
 8003dc8:	f103 0310 	add.w	r3, r3, #16
 8003dcc:	f47f a9bd 	bne.w	800314a <d_print_comp_inner+0x792>
 8003dd0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003dda:	f7fe bebb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dde:	4e8e      	ldr	r6, [pc, #568]	; (8004018 <d_print_comp_inner+0x1660>)
 8003de0:	686a      	ldr	r2, [r5, #4]
 8003de2:	4641      	mov	r1, r8
 8003de4:	4620      	mov	r0, r4
 8003de6:	f001 fb8b 	bl	8005500 <d_print_comp>
 8003dea:	f106 0a04 	add.w	sl, r6, #4
 8003dee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	e008      	b.n	8003e0a <d_print_comp_inner+0x1452>
 8003df8:	460b      	mov	r3, r1
 8003dfa:	3101      	adds	r1, #1
 8003dfc:	45b2      	cmp	sl, r6
 8003dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e02:	54e7      	strb	r7, [r4, r3]
 8003e04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e08:	d013      	beq.n	8003e32 <d_print_comp_inner+0x147a>
 8003e0a:	29ff      	cmp	r1, #255	; 0xff
 8003e0c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e10:	d1f2      	bne.n	8003df8 <d_print_comp_inner+0x1440>
 8003e12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e16:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4798      	blx	r3
 8003e22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e26:	3301      	adds	r3, #1
 8003e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e7e4      	b.n	8003dfc <d_print_comp_inner+0x1444>
 8003e32:	68aa      	ldr	r2, [r5, #8]
 8003e34:	4641      	mov	r1, r8
 8003e36:	4620      	mov	r0, r4
 8003e38:	f001 fb62 	bl	8005500 <d_print_comp>
 8003e3c:	f7fe be8a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e40:	686a      	ldr	r2, [r5, #4]
 8003e42:	4641      	mov	r1, r8
 8003e44:	4620      	mov	r0, r4
 8003e46:	f001 fb5b 	bl	8005500 <d_print_comp>
 8003e4a:	f7fe be83 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e4e:	686a      	ldr	r2, [r5, #4]
 8003e50:	4641      	mov	r1, r8
 8003e52:	4620      	mov	r0, r4
 8003e54:	f001 fb54 	bl	8005500 <d_print_comp>
 8003e58:	f7fe be7c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e5c:	686a      	ldr	r2, [r5, #4]
 8003e5e:	4641      	mov	r1, r8
 8003e60:	4620      	mov	r0, r4
 8003e62:	f001 fb4d 	bl	8005500 <d_print_comp>
 8003e66:	f7fe be75 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e6a:	686a      	ldr	r2, [r5, #4]
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f001 fb46 	bl	8005500 <d_print_comp>
 8003e74:	f7fe be6e 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e78:	686a      	ldr	r2, [r5, #4]
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f001 fb3f 	bl	8005500 <d_print_comp>
 8003e82:	f7fe be67 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e86:	686a      	ldr	r2, [r5, #4]
 8003e88:	4641      	mov	r1, r8
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f001 fb38 	bl	8005500 <d_print_comp>
 8003e90:	f7fe be60 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	4641      	mov	r1, r8
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f001 fb31 	bl	8005500 <d_print_comp>
 8003e9e:	f7fe be59 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ea2:	686a      	ldr	r2, [r5, #4]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f001 fb2a 	bl	8005500 <d_print_comp>
 8003eac:	f7fe be52 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003eb0:	686a      	ldr	r2, [r5, #4]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fb23 	bl	8005500 <d_print_comp>
 8003eba:	f7fe be4b 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	68aa      	ldr	r2, [r5, #8]
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f001 fb1c 	bl	8005500 <d_print_comp>
 8003ec8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ecc:	29ff      	cmp	r1, #255	; 0xff
 8003ece:	f000 8560 	beq.w	8004992 <d_print_comp_inner+0x1fda>
 8003ed2:	1c4a      	adds	r2, r1, #1
 8003ed4:	235d      	movs	r3, #93	; 0x5d
 8003ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003eda:	5463      	strb	r3, [r4, r1]
 8003edc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ee0:	f7fe be38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ee4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003ee8:	4e4c      	ldr	r6, [pc, #304]	; (800401c <d_print_comp_inner+0x1664>)
 8003eea:	3301      	adds	r3, #1
 8003eec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	686a      	ldr	r2, [r5, #4]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f001 fb03 	bl	8005500 <d_print_comp>
 8003efa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003efe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f08:	f106 0902 	add.w	r9, r6, #2
 8003f0c:	f04f 0800 	mov.w	r8, #0
 8003f10:	e008      	b.n	8003f24 <d_print_comp_inner+0x156c>
 8003f12:	460b      	mov	r3, r1
 8003f14:	3101      	adds	r1, #1
 8003f16:	454e      	cmp	r6, r9
 8003f18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f1c:	54e7      	strb	r7, [r4, r3]
 8003f1e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003f22:	d013      	beq.n	8003f4c <d_print_comp_inner+0x1594>
 8003f24:	29ff      	cmp	r1, #255	; 0xff
 8003f26:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f2a:	d1f2      	bne.n	8003f12 <d_print_comp_inner+0x155a>
 8003f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4798      	blx	r3
 8003f3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003f46:	2101      	movs	r1, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7e4      	b.n	8003f16 <d_print_comp_inner+0x155e>
 8003f4c:	68aa      	ldr	r2, [r5, #8]
 8003f4e:	4934      	ldr	r1, [pc, #208]	; (8004020 <d_print_comp_inner+0x1668>)
 8003f50:	3201      	adds	r2, #1
 8003f52:	a804      	add	r0, sp, #16
 8003f54:	f00d ff0e 	bl	8011d74 <sprintf>
 8003f58:	a804      	add	r0, sp, #16
 8003f5a:	f002 fceb 	bl	8006934 <strlen>
 8003f5e:	b318      	cbz	r0, 8003fa8 <d_print_comp_inner+0x15f0>
 8003f60:	ad04      	add	r5, sp, #16
 8003f62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f66:	182f      	adds	r7, r5, r0
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	e008      	b.n	8003f80 <d_print_comp_inner+0x15c8>
 8003f6e:	460b      	mov	r3, r1
 8003f70:	3101      	adds	r1, #1
 8003f72:	42af      	cmp	r7, r5
 8003f74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f78:	54e6      	strb	r6, [r4, r3]
 8003f7a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f7e:	d015      	beq.n	8003fac <d_print_comp_inner+0x15f4>
 8003f80:	29ff      	cmp	r1, #255	; 0xff
 8003f82:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003f86:	d1f2      	bne.n	8003f6e <d_print_comp_inner+0x15b6>
 8003f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f94:	4620      	mov	r0, r4
 8003f96:	4798      	blx	r3
 8003f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e7e4      	b.n	8003f72 <d_print_comp_inner+0x15ba>
 8003fa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fac:	29ff      	cmp	r1, #255	; 0xff
 8003fae:	f000 8560 	beq.w	8004a72 <d_print_comp_inner+0x20ba>
 8003fb2:	1c4a      	adds	r2, r1, #1
 8003fb4:	237d      	movs	r3, #125	; 0x7d
 8003fb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fba:	5463      	strb	r3, [r4, r1]
 8003fbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003fc0:	f7fe bdc8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fc4:	686a      	ldr	r2, [r5, #4]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f001 fa99 	bl	8005500 <d_print_comp>
 8003fce:	f7fe bdc1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	68aa      	ldr	r2, [r5, #8]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f001 fa92 	bl	8005500 <d_print_comp>
 8003fdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fe0:	29ff      	cmp	r1, #255	; 0xff
 8003fe2:	f000 850b 	beq.w	80049fc <d_print_comp_inner+0x2044>
 8003fe6:	1c4a      	adds	r2, r1, #1
 8003fe8:	235d      	movs	r3, #93	; 0x5d
 8003fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fee:	5463      	strb	r3, [r4, r1]
 8003ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ff4:	f7fe bdae 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ff8:	686a      	ldr	r2, [r5, #4]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f001 fa7f 	bl	8005500 <d_print_comp>
 8004002:	f7fe bda7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004006:	bf00      	nop
 8004008:	08016d64 	.word	0x08016d64
 800400c:	08016f5c 	.word	0x08016f5c
 8004010:	08016fef 	.word	0x08016fef
 8004014:	08016faf 	.word	0x08016faf
 8004018:	08016e00 	.word	0x08016e00
 800401c:	08016ffc 	.word	0x08016ffc
 8004020:	08016d50 	.word	0x08016d50
 8004024:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004028:	782b      	ldrb	r3, [r5, #0]
 800402a:	3b61      	subs	r3, #97	; 0x61
 800402c:	2b19      	cmp	r3, #25
 800402e:	d809      	bhi.n	8004044 <d_print_comp_inner+0x168c>
 8004030:	29ff      	cmp	r1, #255	; 0xff
 8004032:	f000 8793 	beq.w	8004f5c <d_print_comp_inner+0x25a4>
 8004036:	2320      	movs	r3, #32
 8004038:	1c4a      	adds	r2, r1, #1
 800403a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800403e:	5463      	strb	r3, [r4, r1]
 8004040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004044:	19eb      	adds	r3, r5, r7
 8004046:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800404a:	2b20      	cmp	r3, #32
 800404c:	bf08      	it	eq
 800404e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004052:	2f00      	cmp	r7, #0
 8004054:	f43e ad7e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004058:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800405c:	442f      	add	r7, r5
 800405e:	f04f 0800 	mov.w	r8, #0
 8004062:	e009      	b.n	8004078 <d_print_comp_inner+0x16c0>
 8004064:	460b      	mov	r3, r1
 8004066:	3101      	adds	r1, #1
 8004068:	42af      	cmp	r7, r5
 800406a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800406e:	54e6      	strb	r6, [r4, r3]
 8004070:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004074:	f43e ad6e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004078:	29ff      	cmp	r1, #255	; 0xff
 800407a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800407e:	d1f1      	bne.n	8004064 <d_print_comp_inner+0x16ac>
 8004080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004084:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800408c:	4620      	mov	r0, r4
 800408e:	4798      	blx	r3
 8004090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004094:	3301      	adds	r3, #1
 8004096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800409a:	2101      	movs	r1, #1
 800409c:	2300      	movs	r3, #0
 800409e:	e7e3      	b.n	8004068 <d_print_comp_inner+0x16b0>
 80040a0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80040a4:	b13a      	cbz	r2, 80040b6 <d_print_comp_inner+0x16fe>
 80040a6:	ab14      	add	r3, sp, #80	; 0x50
 80040a8:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80040ac:	f843 1d48 	str.w	r1, [r3, #-72]!
 80040b0:	9203      	str	r2, [sp, #12]
 80040b2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040b6:	686b      	ldr	r3, [r5, #4]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	2a04      	cmp	r2, #4
 80040bc:	f000 830e 	beq.w	80046dc <d_print_comp_inner+0x1d24>
 80040c0:	a804      	add	r0, sp, #16
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80040c8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80040cc:	4641      	mov	r1, r8
 80040ce:	4620      	mov	r0, r4
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9505      	str	r5, [sp, #20]
 80040d4:	f7fe fc70 	bl	80029b8 <d_print_comp_inner>
 80040d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80040dc:	9a05      	ldr	r2, [sp, #20]
 80040de:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43e ad36 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80040e8:	9b02      	ldr	r3, [sp, #8]
 80040ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040ee:	f7fe bd31 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80040f2:	68aa      	ldr	r2, [r5, #8]
 80040f4:	4641      	mov	r1, r8
 80040f6:	4620      	mov	r0, r4
 80040f8:	f001 fa02 	bl	8005500 <d_print_comp>
 80040fc:	f7fe bd2a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004100:	686a      	ldr	r2, [r5, #4]
 8004102:	49d8      	ldr	r1, [pc, #864]	; (8004464 <d_print_comp_inner+0x1aac>)
 8004104:	3201      	adds	r2, #1
 8004106:	a804      	add	r0, sp, #16
 8004108:	f00d fe34 	bl	8011d74 <sprintf>
 800410c:	a804      	add	r0, sp, #16
 800410e:	f002 fc11 	bl	8006934 <strlen>
 8004112:	b318      	cbz	r0, 800415c <d_print_comp_inner+0x17a4>
 8004114:	ad04      	add	r5, sp, #16
 8004116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800411a:	182f      	adds	r7, r5, r0
 800411c:	f04f 0800 	mov.w	r8, #0
 8004120:	e008      	b.n	8004134 <d_print_comp_inner+0x177c>
 8004122:	460b      	mov	r3, r1
 8004124:	3101      	adds	r1, #1
 8004126:	42bd      	cmp	r5, r7
 8004128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800412c:	54e6      	strb	r6, [r4, r3]
 800412e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004132:	d015      	beq.n	8004160 <d_print_comp_inner+0x17a8>
 8004134:	29ff      	cmp	r1, #255	; 0xff
 8004136:	f815 6b01 	ldrb.w	r6, [r5], #1
 800413a:	d1f2      	bne.n	8004122 <d_print_comp_inner+0x176a>
 800413c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004140:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004148:	4620      	mov	r0, r4
 800414a:	4798      	blx	r3
 800414c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004150:	3301      	adds	r3, #1
 8004152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004156:	2101      	movs	r1, #1
 8004158:	2300      	movs	r3, #0
 800415a:	e7e4      	b.n	8004126 <d_print_comp_inner+0x176e>
 800415c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004160:	29ff      	cmp	r1, #255	; 0xff
 8004162:	f000 8404 	beq.w	800496e <d_print_comp_inner+0x1fb6>
 8004166:	1c4a      	adds	r2, r1, #1
 8004168:	237d      	movs	r3, #125	; 0x7d
 800416a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800416e:	5463      	strb	r3, [r4, r1]
 8004170:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004174:	f7fe bcee 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004178:	686a      	ldr	r2, [r5, #4]
 800417a:	4641      	mov	r1, r8
 800417c:	4620      	mov	r0, r4
 800417e:	f001 f9bf 	bl	8005500 <d_print_comp>
 8004182:	f7fe bce7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004186:	686a      	ldr	r2, [r5, #4]
 8004188:	4641      	mov	r1, r8
 800418a:	4620      	mov	r0, r4
 800418c:	f001 f9b8 	bl	8005500 <d_print_comp>
 8004190:	f7fe bce0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004194:	686a      	ldr	r2, [r5, #4]
 8004196:	4641      	mov	r1, r8
 8004198:	4620      	mov	r0, r4
 800419a:	f001 f9b1 	bl	8005500 <d_print_comp>
 800419e:	f7fe bcd9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80041a2:	4eb1      	ldr	r6, [pc, #708]	; (8004468 <d_print_comp_inner+0x1ab0>)
 80041a4:	68aa      	ldr	r2, [r5, #8]
 80041a6:	4641      	mov	r1, r8
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 f9a9 	bl	8005500 <d_print_comp>
 80041ae:	f106 0a05 	add.w	sl, r6, #5
 80041b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	e008      	b.n	80041ce <d_print_comp_inner+0x1816>
 80041bc:	460b      	mov	r3, r1
 80041be:	3101      	adds	r1, #1
 80041c0:	4556      	cmp	r6, sl
 80041c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041c6:	54e7      	strb	r7, [r4, r3]
 80041c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80041cc:	d013      	beq.n	80041f6 <d_print_comp_inner+0x183e>
 80041ce:	29ff      	cmp	r1, #255	; 0xff
 80041d0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80041d4:	d1f2      	bne.n	80041bc <d_print_comp_inner+0x1804>
 80041d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041da:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80041de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041e2:	4620      	mov	r0, r4
 80041e4:	4798      	blx	r3
 80041e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ea:	3301      	adds	r3, #1
 80041ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041f0:	2101      	movs	r1, #1
 80041f2:	2300      	movs	r3, #0
 80041f4:	e7e4      	b.n	80041c0 <d_print_comp_inner+0x1808>
 80041f6:	686a      	ldr	r2, [r5, #4]
 80041f8:	4641      	mov	r1, r8
 80041fa:	4620      	mov	r0, r4
 80041fc:	f001 f980 	bl	8005500 <d_print_comp>
 8004200:	f7fe bca8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004204:	686a      	ldr	r2, [r5, #4]
 8004206:	4641      	mov	r1, r8
 8004208:	4620      	mov	r0, r4
 800420a:	f001 f979 	bl	8005500 <d_print_comp>
 800420e:	f7fe bca1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004212:	686a      	ldr	r2, [r5, #4]
 8004214:	4641      	mov	r1, r8
 8004216:	4620      	mov	r0, r4
 8004218:	f001 f972 	bl	8005500 <d_print_comp>
 800421c:	f7fe bc9a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004220:	686a      	ldr	r2, [r5, #4]
 8004222:	4641      	mov	r1, r8
 8004224:	4620      	mov	r0, r4
 8004226:	f001 f96b 	bl	8005500 <d_print_comp>
 800422a:	f7fe bc93 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800422e:	4641      	mov	r1, r8
 8004230:	686a      	ldr	r2, [r5, #4]
 8004232:	4620      	mov	r0, r4
 8004234:	f001 f964 	bl	8005500 <d_print_comp>
 8004238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800423c:	29ff      	cmp	r1, #255	; 0xff
 800423e:	f000 842a 	beq.w	8004a96 <d_print_comp_inner+0x20de>
 8004242:	1c4a      	adds	r2, r1, #1
 8004244:	2329      	movs	r3, #41	; 0x29
 8004246:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800424a:	5463      	strb	r3, [r4, r1]
 800424c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004250:	f7fe bc80 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004254:	686a      	ldr	r2, [r5, #4]
 8004256:	4641      	mov	r1, r8
 8004258:	4620      	mov	r0, r4
 800425a:	f001 f951 	bl	8005500 <d_print_comp>
 800425e:	f7fe bc79 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004262:	2f04      	cmp	r7, #4
 8004264:	f1a6 0410 	sub.w	r4, r6, #16
 8004268:	f106 0e10 	add.w	lr, r6, #16
 800426c:	f000 8722 	beq.w	80050b4 <d_print_comp_inner+0x26fc>
 8004270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004274:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004278:	2300      	movs	r3, #0
 800427a:	f84e 4c10 	str.w	r4, [lr, #-16]
 800427e:	e906 1008 	stmdb	r6, {r3, ip}
 8004282:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 8004286:	f846 5c0c 	str.w	r5, [r6, #-12]
 800428a:	686d      	ldr	r5, [r5, #4]
 800428c:	3701      	adds	r7, #1
 800428e:	4676      	mov	r6, lr
 8004290:	f7fe bf84 	b.w	800319c <d_print_comp_inner+0x7e4>
 8004294:	68aa      	ldr	r2, [r5, #8]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	460e      	mov	r6, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4641      	mov	r1, r8
 800429e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80042a2:	f001 f92d 	bl	8005500 <d_print_comp>
 80042a6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	4295      	cmp	r5, r2
 80042ae:	f47e ac51 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80042b6:	42b2      	cmp	r2, r6
 80042b8:	f47e ac4c 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042bc:	3b01      	subs	r3, #1
 80042be:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042c2:	f7fe bc47 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042c6:	462a      	mov	r2, r5
 80042c8:	4641      	mov	r1, r8
 80042ca:	4620      	mov	r0, r4
 80042cc:	f001 f928 	bl	8005520 <d_print_mod>
 80042d0:	f7fe bc70 	b.w	8002bb4 <d_print_comp_inner+0x1fc>
 80042d4:	686b      	ldr	r3, [r5, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	f47f abae 	bne.w	8003a3c <d_print_comp_inner+0x1084>
 80042e0:	f7fe bc38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042e4:	463a      	mov	r2, r7
 80042e6:	a804      	add	r0, sp, #16
 80042e8:	495e      	ldr	r1, [pc, #376]	; (8004464 <d_print_comp_inner+0x1aac>)
 80042ea:	f00d fd43 	bl	8011d74 <sprintf>
 80042ee:	a804      	add	r0, sp, #16
 80042f0:	f002 fb20 	bl	8006934 <strlen>
 80042f4:	b318      	cbz	r0, 800433e <d_print_comp_inner+0x1986>
 80042f6:	ad04      	add	r5, sp, #16
 80042f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042fc:	182f      	adds	r7, r5, r0
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	e008      	b.n	8004316 <d_print_comp_inner+0x195e>
 8004304:	460b      	mov	r3, r1
 8004306:	3101      	adds	r1, #1
 8004308:	42af      	cmp	r7, r5
 800430a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800430e:	54e6      	strb	r6, [r4, r3]
 8004310:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004314:	d015      	beq.n	8004342 <d_print_comp_inner+0x198a>
 8004316:	29ff      	cmp	r1, #255	; 0xff
 8004318:	f815 6b01 	ldrb.w	r6, [r5], #1
 800431c:	d1f2      	bne.n	8004304 <d_print_comp_inner+0x194c>
 800431e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004322:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800432a:	4620      	mov	r0, r4
 800432c:	4798      	blx	r3
 800432e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004332:	3301      	adds	r3, #1
 8004334:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004338:	2101      	movs	r1, #1
 800433a:	2300      	movs	r3, #0
 800433c:	e7e4      	b.n	8004308 <d_print_comp_inner+0x1950>
 800433e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004342:	29ff      	cmp	r1, #255	; 0xff
 8004344:	f000 84dd 	beq.w	8004d02 <d_print_comp_inner+0x234a>
 8004348:	1c4a      	adds	r2, r1, #1
 800434a:	237d      	movs	r3, #125	; 0x7d
 800434c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004350:	5463      	strb	r3, [r4, r1]
 8004352:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004356:	f7fe bbfd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800435a:	2700      	movs	r7, #0
 800435c:	f7ff ba1f 	b.w	800379e <d_print_comp_inner+0xde6>
 8004360:	68df      	ldr	r7, [r3, #12]
 8004362:	689d      	ldr	r5, [r3, #8]
 8004364:	2f00      	cmp	r7, #0
 8004366:	f43e abf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800436a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800436e:	442f      	add	r7, r5
 8004370:	f04f 0800 	mov.w	r8, #0
 8004374:	e009      	b.n	800438a <d_print_comp_inner+0x19d2>
 8004376:	460b      	mov	r3, r1
 8004378:	3101      	adds	r1, #1
 800437a:	42bd      	cmp	r5, r7
 800437c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004380:	54e6      	strb	r6, [r4, r3]
 8004382:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004386:	f43e abe5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800438a:	29ff      	cmp	r1, #255	; 0xff
 800438c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004390:	d1f1      	bne.n	8004376 <d_print_comp_inner+0x19be>
 8004392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004396:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800439a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439e:	4620      	mov	r0, r4
 80043a0:	4798      	blx	r3
 80043a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043ac:	2101      	movs	r1, #1
 80043ae:	2300      	movs	r3, #0
 80043b0:	e7e3      	b.n	800437a <d_print_comp_inner+0x19c2>
 80043b2:	686e      	ldr	r6, [r5, #4]
 80043b4:	68af      	ldr	r7, [r5, #8]
 80043b6:	4437      	add	r7, r6
 80043b8:	42be      	cmp	r6, r7
 80043ba:	f4be abcb 	bcs.w	8002b54 <d_print_comp_inner+0x19c>
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	e00d      	b.n	80043e0 <d_print_comp_inner+0x1a28>
 80043c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043c8:	29ff      	cmp	r1, #255	; 0xff
 80043ca:	d036      	beq.n	800443a <d_print_comp_inner+0x1a82>
 80043cc:	1c4b      	adds	r3, r1, #1
 80043ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d2:	5465      	strb	r5, [r4, r1]
 80043d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80043d8:	3601      	adds	r6, #1
 80043da:	42b7      	cmp	r7, r6
 80043dc:	f67e abba 	bls.w	8002b54 <d_print_comp_inner+0x19c>
 80043e0:	1bbb      	subs	r3, r7, r6
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	7835      	ldrb	r5, [r6, #0]
 80043e6:	dded      	ble.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043e8:	2d5f      	cmp	r5, #95	; 0x5f
 80043ea:	d1eb      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043ec:	7873      	ldrb	r3, [r6, #1]
 80043ee:	2b5f      	cmp	r3, #95	; 0x5f
 80043f0:	d1e8      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f2:	78b3      	ldrb	r3, [r6, #2]
 80043f4:	2b55      	cmp	r3, #85	; 0x55
 80043f6:	d1e5      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f8:	1cf3      	adds	r3, r6, #3
 80043fa:	429f      	cmp	r7, r3
 80043fc:	d9e2      	bls.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043fe:	2000      	movs	r0, #0
 8004400:	e006      	b.n	8004410 <d_print_comp_inner+0x1a58>
 8004402:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004406:	429f      	cmp	r7, r3
 8004408:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800440c:	f000 85c7 	beq.w	8004f9e <d_print_comp_inner+0x25e6>
 8004410:	4699      	mov	r9, r3
 8004412:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004416:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800441a:	b2d1      	uxtb	r1, r2
 800441c:	2909      	cmp	r1, #9
 800441e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8004422:	d9f0      	bls.n	8004406 <d_print_comp_inner+0x1a4e>
 8004424:	f1be 0f05 	cmp.w	lr, #5
 8004428:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 800442c:	d9e9      	bls.n	8004402 <d_print_comp_inner+0x1a4a>
 800442e:	2a05      	cmp	r2, #5
 8004430:	f200 8743 	bhi.w	80052ba <d_print_comp_inner+0x2902>
 8004434:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8004438:	e7e5      	b.n	8004406 <d_print_comp_inner+0x1a4e>
 800443a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800443e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004446:	4620      	mov	r0, r4
 8004448:	4798      	blx	r3
 800444a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800444e:	3301      	adds	r3, #1
 8004450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004454:	2100      	movs	r1, #0
 8004456:	2301      	movs	r3, #1
 8004458:	e7b9      	b.n	80043ce <d_print_comp_inner+0x1a16>
 800445a:	4d04      	ldr	r5, [pc, #16]	; (800446c <d_print_comp_inner+0x1ab4>)
 800445c:	4698      	mov	r8, r3
 800445e:	1daf      	adds	r7, r5, #6
 8004460:	e010      	b.n	8004484 <d_print_comp_inner+0x1acc>
 8004462:	bf00      	nop
 8004464:	08016d50 	.word	0x08016d50
 8004468:	08016ec4 	.word	0x08016ec4
 800446c:	08016f24 	.word	0x08016f24
 8004470:	460b      	mov	r3, r1
 8004472:	3101      	adds	r1, #1
 8004474:	42bd      	cmp	r5, r7
 8004476:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800447a:	54e6      	strb	r6, [r4, r3]
 800447c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004480:	f43e ab68 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004484:	29ff      	cmp	r1, #255	; 0xff
 8004486:	f815 6b01 	ldrb.w	r6, [r5], #1
 800448a:	d1f1      	bne.n	8004470 <d_print_comp_inner+0x1ab8>
 800448c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004490:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004494:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004498:	4620      	mov	r0, r4
 800449a:	4798      	blx	r3
 800449c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044a6:	2101      	movs	r1, #1
 80044a8:	2300      	movs	r3, #0
 80044aa:	e7e3      	b.n	8004474 <d_print_comp_inner+0x1abc>
 80044ac:	782b      	ldrb	r3, [r5, #0]
 80044ae:	2b2f      	cmp	r3, #47	; 0x2f
 80044b0:	f47e ab6a 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80044b4:	4601      	mov	r1, r0
 80044b6:	460d      	mov	r5, r1
 80044b8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 80044bc:	f7fe bb66 	b.w	8002b8c <d_print_comp_inner+0x1d4>
 80044c0:	4dd7      	ldr	r5, [pc, #860]	; (8004820 <d_print_comp_inner+0x1e68>)
 80044c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80044c6:	f105 0804 	add.w	r8, r5, #4
 80044ca:	e009      	b.n	80044e0 <d_print_comp_inner+0x1b28>
 80044cc:	460b      	mov	r3, r1
 80044ce:	3101      	adds	r1, #1
 80044d0:	45a8      	cmp	r8, r5
 80044d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044d6:	54e6      	strb	r6, [r4, r3]
 80044d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044dc:	f43e ab3a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80044e0:	29ff      	cmp	r1, #255	; 0xff
 80044e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044e6:	d1f1      	bne.n	80044cc <d_print_comp_inner+0x1b14>
 80044e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80044f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044f4:	4620      	mov	r0, r4
 80044f6:	4798      	blx	r3
 80044f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004502:	2101      	movs	r1, #1
 8004504:	2300      	movs	r3, #0
 8004506:	e7e3      	b.n	80044d0 <d_print_comp_inner+0x1b18>
 8004508:	4ec6      	ldr	r6, [pc, #792]	; (8004824 <d_print_comp_inner+0x1e6c>)
 800450a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800450e:	f106 0905 	add.w	r9, r6, #5
 8004512:	f04f 0800 	mov.w	r8, #0
 8004516:	e008      	b.n	800452a <d_print_comp_inner+0x1b72>
 8004518:	460b      	mov	r3, r1
 800451a:	3101      	adds	r1, #1
 800451c:	45b1      	cmp	r9, r6
 800451e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004522:	54e7      	strb	r7, [r4, r3]
 8004524:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004528:	d013      	beq.n	8004552 <d_print_comp_inner+0x1b9a>
 800452a:	29ff      	cmp	r1, #255	; 0xff
 800452c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004530:	d1f2      	bne.n	8004518 <d_print_comp_inner+0x1b60>
 8004532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004536:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800453a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800453e:	4620      	mov	r0, r4
 8004540:	4798      	blx	r3
 8004542:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004546:	3301      	adds	r3, #1
 8004548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800454c:	2101      	movs	r1, #1
 800454e:	2300      	movs	r3, #0
 8004550:	e7e4      	b.n	800451c <d_print_comp_inner+0x1b64>
 8004552:	686a      	ldr	r2, [r5, #4]
 8004554:	49b4      	ldr	r1, [pc, #720]	; (8004828 <d_print_comp_inner+0x1e70>)
 8004556:	3201      	adds	r2, #1
 8004558:	a804      	add	r0, sp, #16
 800455a:	f00d fc0b 	bl	8011d74 <sprintf>
 800455e:	a804      	add	r0, sp, #16
 8004560:	f002 f9e8 	bl	8006934 <strlen>
 8004564:	2800      	cmp	r0, #0
 8004566:	f43e aaf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800456a:	ad04      	add	r5, sp, #16
 800456c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004570:	182f      	adds	r7, r5, r0
 8004572:	f04f 0800 	mov.w	r8, #0
 8004576:	e009      	b.n	800458c <d_print_comp_inner+0x1bd4>
 8004578:	460b      	mov	r3, r1
 800457a:	3101      	adds	r1, #1
 800457c:	42af      	cmp	r7, r5
 800457e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004582:	54e6      	strb	r6, [r4, r3]
 8004584:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004588:	f43e aae4 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800458c:	29ff      	cmp	r1, #255	; 0xff
 800458e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004592:	d1f1      	bne.n	8004578 <d_print_comp_inner+0x1bc0>
 8004594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004598:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800459c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a0:	4620      	mov	r0, r4
 80045a2:	4798      	blx	r3
 80045a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045ae:	2101      	movs	r1, #1
 80045b0:	2300      	movs	r3, #0
 80045b2:	e7e3      	b.n	800457c <d_print_comp_inner+0x1bc4>
 80045b4:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 80045b8:	f105 0208 	add.w	r2, r5, #8
 80045bc:	4641      	mov	r1, r8
 80045be:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80045c2:	f001 fc91 	bl	8005ee8 <d_print_function_type.isra.11>
 80045c6:	686a      	ldr	r2, [r5, #4]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	f43e aac3 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80045ce:	4641      	mov	r1, r8
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 ff95 	bl	8005500 <d_print_comp>
 80045d6:	f7fe babd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80045da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045de:	f7ff b9a2 	b.w	8003926 <d_print_comp_inner+0xf6e>
 80045e2:	4e92      	ldr	r6, [pc, #584]	; (800482c <d_print_comp_inner+0x1e74>)
 80045e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80045e8:	f106 0a05 	add.w	sl, r6, #5
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	e009      	b.n	8004606 <d_print_comp_inner+0x1c4e>
 80045f2:	460b      	mov	r3, r1
 80045f4:	3101      	adds	r1, #1
 80045f6:	45b2      	cmp	sl, r6
 80045f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045fc:	54e7      	strb	r7, [r4, r3]
 80045fe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004602:	f43f a97a 	beq.w	80038fa <d_print_comp_inner+0xf42>
 8004606:	29ff      	cmp	r1, #255	; 0xff
 8004608:	f816 7b01 	ldrb.w	r7, [r6], #1
 800460c:	d1f1      	bne.n	80045f2 <d_print_comp_inner+0x1c3a>
 800460e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004612:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004616:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800461a:	4620      	mov	r0, r4
 800461c:	4798      	blx	r3
 800461e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004622:	3301      	adds	r3, #1
 8004624:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004628:	2101      	movs	r1, #1
 800462a:	2300      	movs	r3, #0
 800462c:	e7e3      	b.n	80045f6 <d_print_comp_inner+0x1c3e>
 800462e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004632:	497f      	ldr	r1, [pc, #508]	; (8004830 <d_print_comp_inner+0x1e78>)
 8004634:	681f      	ldr	r7, [r3, #0]
 8004636:	4638      	mov	r0, r7
 8004638:	f002 f972 	bl	8006920 <strcmp>
 800463c:	f896 a000 	ldrb.w	sl, [r6]
 8004640:	b918      	cbnz	r0, 800464a <d_print_comp_inner+0x1c92>
 8004642:	f1ba 0f03 	cmp.w	sl, #3
 8004646:	f000 851b 	beq.w	8005080 <d_print_comp_inner+0x26c8>
 800464a:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 800464e:	f000 85fd 	beq.w	800524c <d_print_comp_inner+0x2894>
 8004652:	4978      	ldr	r1, [pc, #480]	; (8004834 <d_print_comp_inner+0x1e7c>)
 8004654:	4638      	mov	r0, r7
 8004656:	f002 f963 	bl	8006920 <strcmp>
 800465a:	4605      	mov	r5, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	f000 8135 	beq.w	80048cc <d_print_comp_inner+0x1f14>
 8004662:	4975      	ldr	r1, [pc, #468]	; (8004838 <d_print_comp_inner+0x1e80>)
 8004664:	4638      	mov	r0, r7
 8004666:	f002 f95b 	bl	8006920 <strcmp>
 800466a:	2800      	cmp	r0, #0
 800466c:	f000 82b6 	beq.w	8004bdc <d_print_comp_inner+0x2224>
 8004670:	464a      	mov	r2, r9
 8004672:	4641      	mov	r1, r8
 8004674:	4620      	mov	r0, r4
 8004676:	f001 fd2b 	bl	80060d0 <d_print_expr_op>
 800467a:	2f00      	cmp	r7, #0
 800467c:	f43f a837 	beq.w	80036ee <d_print_comp_inner+0xd36>
 8004680:	496e      	ldr	r1, [pc, #440]	; (800483c <d_print_comp_inner+0x1e84>)
 8004682:	4638      	mov	r0, r7
 8004684:	f002 f94c 	bl	8006920 <strcmp>
 8004688:	2800      	cmp	r0, #0
 800468a:	f000 8384 	beq.w	8004d96 <d_print_comp_inner+0x23de>
 800468e:	4638      	mov	r0, r7
 8004690:	496b      	ldr	r1, [pc, #428]	; (8004840 <d_print_comp_inner+0x1e88>)
 8004692:	f002 f945 	bl	8006920 <strcmp>
 8004696:	4605      	mov	r5, r0
 8004698:	2800      	cmp	r0, #0
 800469a:	f47f a828 	bne.w	80036ee <d_print_comp_inner+0xd36>
 800469e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	f000 84db 	beq.w	800505e <d_print_comp_inner+0x26a6>
 80046a8:	1c58      	adds	r0, r3, #1
 80046aa:	2528      	movs	r5, #40	; 0x28
 80046ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80046b0:	4641      	mov	r1, r8
 80046b2:	54e5      	strb	r5, [r4, r3]
 80046b4:	4632      	mov	r2, r6
 80046b6:	4620      	mov	r0, r4
 80046b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80046bc:	f000 ff20 	bl	8005500 <d_print_comp>
 80046c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80046c4:	29ff      	cmp	r1, #255	; 0xff
 80046c6:	f000 846d 	beq.w	8004fa4 <d_print_comp_inner+0x25ec>
 80046ca:	2329      	movs	r3, #41	; 0x29
 80046cc:	1c4a      	adds	r2, r1, #1
 80046ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80046d2:	5463      	strb	r3, [r4, r1]
 80046d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80046d8:	f7fe ba3c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80046dc:	f10d 0910 	add.w	r9, sp, #16
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80046ea:	4641      	mov	r1, r8
 80046ec:	4620      	mov	r0, r4
 80046ee:	9204      	str	r2, [sp, #16]
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	f7fe f961 	bl	80029b8 <d_print_comp_inner>
 80046f6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80046fa:	9a05      	ldr	r2, [sp, #20]
 80046fc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004700:	b113      	cbz	r3, 8004708 <d_print_comp_inner+0x1d50>
 8004702:	9b02      	ldr	r3, [sp, #8]
 8004704:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004708:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800470c:	2b3c      	cmp	r3, #60	; 0x3c
 800470e:	f000 83d9 	beq.w	8004ec4 <d_print_comp_inner+0x250c>
 8004712:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004716:	29ff      	cmp	r1, #255	; 0xff
 8004718:	f000 8467 	beq.w	8004fea <d_print_comp_inner+0x2632>
 800471c:	1c4a      	adds	r2, r1, #1
 800471e:	233c      	movs	r3, #60	; 0x3c
 8004720:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004724:	5463      	strb	r3, [r4, r1]
 8004726:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800472a:	686b      	ldr	r3, [r5, #4]
 800472c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004736:	461a      	mov	r2, r3
 8004738:	4641      	mov	r1, r8
 800473a:	4620      	mov	r0, r4
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	9505      	str	r5, [sp, #20]
 8004740:	f7fe f93a 	bl	80029b8 <d_print_comp_inner>
 8004744:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004748:	9a05      	ldr	r2, [sp, #20]
 800474a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800474e:	2b3e      	cmp	r3, #62	; 0x3e
 8004750:	f000 83ab 	beq.w	8004eaa <d_print_comp_inner+0x24f2>
 8004754:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004758:	29ff      	cmp	r1, #255	; 0xff
 800475a:	f000 849a 	beq.w	8005092 <d_print_comp_inner+0x26da>
 800475e:	233e      	movs	r3, #62	; 0x3e
 8004760:	1c4a      	adds	r2, r1, #1
 8004762:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004766:	5463      	strb	r3, [r4, r1]
 8004768:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800476c:	f7fe b9f2 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	7c16      	ldrb	r6, [r2, #16]
 8004774:	2e00      	cmp	r6, #0
 8004776:	f43f a9e7 	beq.w	8003b48 <d_print_comp_inner+0x1190>
 800477a:	2e06      	cmp	r6, #6
 800477c:	f240 8337 	bls.w	8004dee <d_print_comp_inner+0x2436>
 8004780:	2e07      	cmp	r6, #7
 8004782:	f47f a9e1 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	7811      	ldrb	r1, [r2, #0]
 800478a:	2900      	cmp	r1, #0
 800478c:	f47f a9dc 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004790:	6891      	ldr	r1, [r2, #8]
 8004792:	2901      	cmp	r1, #1
 8004794:	f47f a9d8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004798:	2b3c      	cmp	r3, #60	; 0x3c
 800479a:	f47f a9d5 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 800479e:	6853      	ldr	r3, [r2, #4]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	f000 8626 	beq.w	80053f4 <d_print_comp_inner+0x2a3c>
 80047a8:	2b31      	cmp	r3, #49	; 0x31
 80047aa:	f47f a9cd 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 80047ae:	2204      	movs	r2, #4
 80047b0:	4924      	ldr	r1, [pc, #144]	; (8004844 <d_print_comp_inner+0x1e8c>)
 80047b2:	f7fb fe2d 	bl	8000410 <d_append_buffer>
 80047b6:	f7fe b9cd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80047ba:	4e23      	ldr	r6, [pc, #140]	; (8004848 <d_print_comp_inner+0x1e90>)
 80047bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047c0:	f106 0a02 	add.w	sl, r6, #2
 80047c4:	e009      	b.n	80047da <d_print_comp_inner+0x1e22>
 80047c6:	460b      	mov	r3, r1
 80047c8:	3101      	adds	r1, #1
 80047ca:	45b2      	cmp	sl, r6
 80047cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80047d0:	54e7      	strb	r7, [r4, r3]
 80047d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80047d6:	f43e ad52 	beq.w	800327e <d_print_comp_inner+0x8c6>
 80047da:	29ff      	cmp	r1, #255	; 0xff
 80047dc:	f816 7b01 	ldrb.w	r7, [r6], #1
 80047e0:	d1f1      	bne.n	80047c6 <d_print_comp_inner+0x1e0e>
 80047e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80047ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047ee:	4620      	mov	r0, r4
 80047f0:	4798      	blx	r3
 80047f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047fc:	2101      	movs	r1, #1
 80047fe:	2300      	movs	r3, #0
 8004800:	e7e3      	b.n	80047ca <d_print_comp_inner+0x1e12>
 8004802:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004806:	29ff      	cmp	r1, #255	; 0xff
 8004808:	f000 84e4 	beq.w	80051d4 <d_print_comp_inner+0x281c>
 800480c:	2220      	movs	r2, #32
 800480e:	1c4b      	adds	r3, r1, #1
 8004810:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004814:	5462      	strb	r2, [r4, r1]
 8004816:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800481a:	f7fe bdbb 	b.w	8003394 <d_print_comp_inner+0x9dc>
 800481e:	bf00      	nop
 8004820:	08016fa0 	.word	0x08016fa0
 8004824:	08016dc4 	.word	0x08016dc4
 8004828:	08016d50 	.word	0x08016d50
 800482c:	08016f14 	.word	0x08016f14
 8004830:	08016f48 	.word	0x08016f48
 8004834:	0801701c 	.word	0x0801701c
 8004838:	08016d54 	.word	0x08016d54
 800483c:	08016f4c 	.word	0x08016f4c
 8004840:	0801725c 	.word	0x0801725c
 8004844:	08016f78 	.word	0x08016f78
 8004848:	08016da0 	.word	0x08016da0
 800484c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004850:	29ff      	cmp	r1, #255	; 0xff
 8004852:	f000 8465 	beq.w	8005120 <d_print_comp_inner+0x2768>
 8004856:	2220      	movs	r2, #32
 8004858:	1c4b      	adds	r3, r1, #1
 800485a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800485e:	5462      	strb	r2, [r4, r1]
 8004860:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004864:	f7fe bd80 	b.w	8003368 <d_print_comp_inner+0x9b0>
 8004868:	2700      	movs	r7, #0
 800486a:	55a7      	strb	r7, [r4, r6]
 800486c:	4631      	mov	r1, r6
 800486e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004876:	4620      	mov	r0, r4
 8004878:	4798      	blx	r3
 800487a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800487e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004882:	3301      	adds	r3, #1
 8004884:	463e      	mov	r6, r7
 8004886:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800488a:	f7fe be31 	b.w	80034f0 <d_print_comp_inner+0xb38>
 800488e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004892:	29ff      	cmp	r1, #255	; 0xff
 8004894:	f000 8465 	beq.w	8005162 <d_print_comp_inner+0x27aa>
 8004898:	1c4a      	adds	r2, r1, #1
 800489a:	235b      	movs	r3, #91	; 0x5b
 800489c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048a0:	5463      	strb	r3, [r4, r1]
 80048a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048a6:	4641      	mov	r1, r8
 80048a8:	68aa      	ldr	r2, [r5, #8]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fe28 	bl	8005500 <d_print_comp>
 80048b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048b4:	29ff      	cmp	r1, #255	; 0xff
 80048b6:	f000 8312 	beq.w	8004ede <d_print_comp_inner+0x2526>
 80048ba:	235d      	movs	r3, #93	; 0x5d
 80048bc:	1c4a      	adds	r2, r1, #1
 80048be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048c2:	5463      	strb	r3, [r4, r1]
 80048c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048c8:	f7fe b944 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80048cc:	4631      	mov	r1, r6
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fb ffca 	bl	8000868 <d_find_pack>
 80048d4:	b928      	cbnz	r0, 80048e2 <d_print_comp_inner+0x1f2a>
 80048d6:	e007      	b.n	80048e8 <d_print_comp_inner+0x1f30>
 80048d8:	6843      	ldr	r3, [r0, #4]
 80048da:	b12b      	cbz	r3, 80048e8 <d_print_comp_inner+0x1f30>
 80048dc:	6880      	ldr	r0, [r0, #8]
 80048de:	3501      	adds	r5, #1
 80048e0:	b110      	cbz	r0, 80048e8 <d_print_comp_inner+0x1f30>
 80048e2:	7803      	ldrb	r3, [r0, #0]
 80048e4:	2b2f      	cmp	r3, #47	; 0x2f
 80048e6:	d0f7      	beq.n	80048d8 <d_print_comp_inner+0x1f20>
 80048e8:	462a      	mov	r2, r5
 80048ea:	a804      	add	r0, sp, #16
 80048ec:	49d4      	ldr	r1, [pc, #848]	; (8004c40 <d_print_comp_inner+0x2288>)
 80048ee:	f00d fa41 	bl	8011d74 <sprintf>
 80048f2:	a804      	add	r0, sp, #16
 80048f4:	f002 f81e 	bl	8006934 <strlen>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f43e a92b 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80048fe:	ad04      	add	r5, sp, #16
 8004900:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004904:	182f      	adds	r7, r5, r0
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	e009      	b.n	8004920 <d_print_comp_inner+0x1f68>
 800490c:	460b      	mov	r3, r1
 800490e:	3101      	adds	r1, #1
 8004910:	42bd      	cmp	r5, r7
 8004912:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004916:	54e6      	strb	r6, [r4, r3]
 8004918:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800491c:	f43e a91a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004920:	29ff      	cmp	r1, #255	; 0xff
 8004922:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004926:	d1f1      	bne.n	800490c <d_print_comp_inner+0x1f54>
 8004928:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800492c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
 8004938:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800493c:	3301      	adds	r3, #1
 800493e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004942:	2101      	movs	r1, #1
 8004944:	2300      	movs	r3, #0
 8004946:	e7e3      	b.n	8004910 <d_print_comp_inner+0x1f58>
 8004948:	686a      	ldr	r2, [r5, #4]
 800494a:	4641      	mov	r1, r8
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fdd7 	bl	8005500 <d_print_comp>
 8004952:	f7fe b8ff 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004956:	29ff      	cmp	r1, #255	; 0xff
 8004958:	f000 83d2 	beq.w	8005100 <d_print_comp_inner+0x2748>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	1c4a      	adds	r2, r1, #1
 8004960:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004964:	5463      	strb	r3, [r4, r1]
 8004966:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800496a:	f7ff b90e 	b.w	8003b8a <d_print_comp_inner+0x11d2>
 800496e:	2500      	movs	r5, #0
 8004970:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004974:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004978:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800497c:	4620      	mov	r0, r4
 800497e:	4798      	blx	r3
 8004980:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004984:	3301      	adds	r3, #1
 8004986:	4629      	mov	r1, r5
 8004988:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800498c:	2201      	movs	r2, #1
 800498e:	f7ff bbeb 	b.w	8004168 <d_print_comp_inner+0x17b0>
 8004992:	2500      	movs	r5, #0
 8004994:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004998:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800499c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049a0:	4620      	mov	r0, r4
 80049a2:	4798      	blx	r3
 80049a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049a8:	3301      	adds	r3, #1
 80049aa:	4629      	mov	r1, r5
 80049ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049b0:	2201      	movs	r2, #1
 80049b2:	f7ff ba8f 	b.w	8003ed4 <d_print_comp_inner+0x151c>
 80049b6:	2600      	movs	r6, #0
 80049b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049bc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049c4:	4798      	blx	r3
 80049c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ca:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80049ce:	3301      	adds	r3, #1
 80049d0:	4631      	mov	r1, r6
 80049d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049d6:	f7fe bd43 	b.w	8003460 <d_print_comp_inner+0xaa8>
 80049da:	2600      	movs	r6, #0
 80049dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049e4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049e8:	4798      	blx	r3
 80049ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ee:	3301      	adds	r3, #1
 80049f0:	4631      	mov	r1, r6
 80049f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049f6:	2201      	movs	r2, #1
 80049f8:	f7fe bb74 	b.w	80030e4 <d_print_comp_inner+0x72c>
 80049fc:	2500      	movs	r5, #0
 80049fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a06:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4798      	blx	r3
 8004a0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a12:	3301      	adds	r3, #1
 8004a14:	4629      	mov	r1, r5
 8004a16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f7ff bae4 	b.w	8003fe8 <d_print_comp_inner+0x1630>
 8004a20:	220d      	movs	r2, #13
 8004a22:	4988      	ldr	r1, [pc, #544]	; (8004c44 <d_print_comp_inner+0x228c>)
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7fb fcf3 	bl	8000410 <d_append_buffer>
 8004a2a:	68a9      	ldr	r1, [r5, #8]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	3101      	adds	r1, #1
 8004a30:	f7fb ff9e 	bl	8000970 <d_append_num>
 8004a34:	2203      	movs	r2, #3
 8004a36:	4984      	ldr	r1, [pc, #528]	; (8004c48 <d_print_comp_inner+0x2290>)
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7fb fce9 	bl	8000410 <d_append_buffer>
 8004a3e:	686d      	ldr	r5, [r5, #4]
 8004a40:	f7fe bc22 	b.w	8003288 <d_print_comp_inner+0x8d0>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a4e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a52:	4620      	mov	r0, r4
 8004a54:	4798      	blx	r3
 8004a56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a62:	2201      	movs	r2, #1
 8004a64:	f7fe be08 	b.w	8003678 <d_print_comp_inner+0xcc0>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004a6e:	f7fe b871 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a80:	4620      	mov	r0, r4
 8004a82:	4798      	blx	r3
 8004a84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a90:	2201      	movs	r2, #1
 8004a92:	f7ff ba8f 	b.w	8003fb4 <d_print_comp_inner+0x15fc>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aa0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4798      	blx	r3
 8004aa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aac:	3301      	adds	r3, #1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f7ff bbc5 	b.w	8004244 <d_print_comp_inner+0x188c>
 8004aba:	a914      	add	r1, sp, #80	; 0x50
 8004abc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8004ac0:	f841 0d40 	str.w	r0, [r1, #-64]!
 8004ac4:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004ac8:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004acc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	9306      	str	r3, [sp, #24]
 8004ad6:	9607      	str	r6, [sp, #28]
 8004ad8:	9505      	str	r5, [sp, #20]
 8004ada:	f000 fd11 	bl	8005500 <d_print_comp>
 8004ade:	9e06      	ldr	r6, [sp, #24]
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	f47e a834 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8004aec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004af0:	29ff      	cmp	r1, #255	; 0xff
 8004af2:	f000 8409 	beq.w	8005308 <d_print_comp_inner+0x2950>
 8004af6:	2320      	movs	r3, #32
 8004af8:	1c4a      	adds	r2, r1, #1
 8004afa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004afe:	5463      	strb	r3, [r4, r1]
 8004b00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b04:	f7fe be0b 	b.w	800371e <d_print_comp_inner+0xd66>
 8004b08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f6fe abff 	blt.w	8003310 <d_print_comp_inner+0x958>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 829d 	beq.w	8005052 <d_print_comp_inner+0x269a>
 8004b18:	6880      	ldr	r0, [r0, #8]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43e a82d 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b22:	7802      	ldrb	r2, [r0, #0]
 8004b24:	2a2f      	cmp	r2, #47	; 0x2f
 8004b26:	d0f4      	beq.n	8004b12 <d_print_comp_inner+0x215a>
 8004b28:	f7fe b828 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b2c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004b30:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004b34:	f1be 0f00 	cmp.w	lr, #0
 8004b38:	dd14      	ble.n	8004b64 <d_print_comp_inner+0x21ac>
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	f000 83f5 	beq.w	800532c <d_print_comp_inner+0x2974>
 8004b42:	f102 0008 	add.w	r0, r2, #8
 8004b46:	463b      	mov	r3, r7
 8004b48:	46a4      	mov	ip, r4
 8004b4a:	e004      	b.n	8004b56 <d_print_comp_inner+0x219e>
 8004b4c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004b50:	42a1      	cmp	r1, r4
 8004b52:	f000 81d4 	beq.w	8004efe <d_print_comp_inner+0x2546>
 8004b56:	3301      	adds	r3, #1
 8004b58:	459e      	cmp	lr, r3
 8004b5a:	4681      	mov	r9, r0
 8004b5c:	f100 0008 	add.w	r0, r0, #8
 8004b60:	d1f4      	bne.n	8004b4c <d_print_comp_inner+0x2194>
 8004b62:	4664      	mov	r4, ip
 8004b64:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004b68:	459e      	cmp	lr, r3
 8004b6a:	f280 84b9 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b6e:	f10e 0301 	add.w	r3, lr, #1
 8004b72:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
 8004b76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004b7a:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004b7e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8004b82:	3004      	adds	r0, #4
 8004b84:	468e      	mov	lr, r1
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	f000 848d 	beq.w	80054a6 <d_print_comp_inner+0x2aee>
 8004b8c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004b90:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8004b94:	428b      	cmp	r3, r1
 8004b96:	f103 0c01 	add.w	ip, r3, #1
 8004b9a:	f280 84a1 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b9e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8004ba2:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
 8004ba6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8004baa:	6851      	ldr	r1, [r2, #4]
 8004bac:	6059      	str	r1, [r3, #4]
 8004bae:	6003      	str	r3, [r0, #0]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	e7e7      	b.n	8004b86 <d_print_comp_inner+0x21ce>
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4798      	blx	r3
 8004bca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f7fe bd3d 	b.w	8003656 <d_print_comp_inner+0xc9e>
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	f000 844d 	beq.w	800547c <d_print_comp_inner+0x2ac4>
 8004be2:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004be6:	f040 8488 	bne.w	80054fa <d_print_comp_inner+0x2b42>
 8004bea:	6873      	ldr	r3, [r6, #4]
 8004bec:	b373      	cbz	r3, 8004c4c <d_print_comp_inner+0x2294>
 8004bee:	4607      	mov	r7, r0
 8004bf0:	e007      	b.n	8004c02 <d_print_comp_inner+0x224a>
 8004bf2:	3701      	adds	r7, #1
 8004bf4:	68b6      	ldr	r6, [r6, #8]
 8004bf6:	b356      	cbz	r6, 8004c4e <d_print_comp_inner+0x2296>
 8004bf8:	7833      	ldrb	r3, [r6, #0]
 8004bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8004bfc:	d127      	bne.n	8004c4e <d_print_comp_inner+0x2296>
 8004bfe:	6873      	ldr	r3, [r6, #4]
 8004c00:	b32b      	cbz	r3, 8004c4e <d_print_comp_inner+0x2296>
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	2a4a      	cmp	r2, #74	; 0x4a
 8004c06:	d1f4      	bne.n	8004bf2 <d_print_comp_inner+0x223a>
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fb fe2c 	bl	8000868 <d_find_pack>
 8004c10:	b198      	cbz	r0, 8004c3a <d_print_comp_inner+0x2282>
 8004c12:	7803      	ldrb	r3, [r0, #0]
 8004c14:	2b2f      	cmp	r3, #47	; 0x2f
 8004c16:	f040 846c 	bne.w	80054f2 <d_print_comp_inner+0x2b3a>
 8004c1a:	6843      	ldr	r3, [r0, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8464 	beq.w	80054ea <d_print_comp_inner+0x2b32>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2000      	movs	r0, #0
 8004c26:	e004      	b.n	8004c32 <d_print_comp_inner+0x227a>
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	2a2f      	cmp	r2, #47	; 0x2f
 8004c2c:	d105      	bne.n	8004c3a <d_print_comp_inner+0x2282>
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	b11a      	cbz	r2, 8004c3a <d_print_comp_inner+0x2282>
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	3001      	adds	r0, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f6      	bne.n	8004c28 <d_print_comp_inner+0x2270>
 8004c3a:	4407      	add	r7, r0
 8004c3c:	e7da      	b.n	8004bf4 <d_print_comp_inner+0x223c>
 8004c3e:	bf00      	nop
 8004c40:	08016d50 	.word	0x08016d50
 8004c44:	08016da4 	.word	0x08016da4
 8004c48:	08016db4 	.word	0x08016db4
 8004c4c:	461f      	mov	r7, r3
 8004c4e:	4639      	mov	r1, r7
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7fb fe8d 	bl	8000970 <d_append_num>
 8004c56:	f7fd bf7d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4798      	blx	r3
 8004c6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c78:	462b      	mov	r3, r5
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	f7fe bb8e 	b.w	800339c <d_print_comp_inner+0x9e4>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4619      	mov	r1, r3
 8004c84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c90:	4620      	mov	r0, r4
 8004c92:	4798      	blx	r3
 8004c94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c9e:	4633      	mov	r3, r6
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	f7fe bb65 	b.w	8003370 <d_print_comp_inner+0x9b8>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004cae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4798      	blx	r3
 8004cba:	2329      	movs	r3, #41	; 0x29
 8004cbc:	7023      	strb	r3, [r4, #0]
 8004cbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cc2:	782a      	ldrb	r2, [r5, #0]
 8004cc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cc8:	2101      	movs	r1, #1
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2a3d      	cmp	r2, #61	; 0x3d
 8004cce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cd6:	f47e af58 	bne.w	8003b8a <d_print_comp_inner+0x11d2>
 8004cda:	e63f      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8004cdc:	2700      	movs	r7, #0
 8004cde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ce2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cea:	4620      	mov	r0, r4
 8004cec:	4798      	blx	r3
 8004cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cf2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cfe:	f7fe bf28 	b.w	8003b52 <d_print_comp_inner+0x119a>
 8004d02:	2500      	movs	r5, #0
 8004d04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d0c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d10:	4620      	mov	r0, r4
 8004d12:	4798      	blx	r3
 8004d14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d20:	2201      	movs	r2, #1
 8004d22:	f7ff bb12 	b.w	800434a <d_print_comp_inner+0x1992>
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004d2c:	2901      	cmp	r1, #1
 8004d2e:	d903      	bls.n	8004d38 <d_print_comp_inner+0x2380>
 8004d30:	3b72      	subs	r3, #114	; 0x72
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f63d aead 	bhi.w	8002a92 <d_print_comp_inner+0xda>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f001 f9c8 	bl	80060d0 <d_print_expr_op>
 8004d40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d44:	29ff      	cmp	r1, #255	; 0xff
 8004d46:	f000 8271 	beq.w	800522c <d_print_comp_inner+0x2874>
 8004d4a:	1c4a      	adds	r2, r1, #1
 8004d4c:	233c      	movs	r3, #60	; 0x3c
 8004d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d52:	5463      	strb	r3, [r4, r1]
 8004d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d58:	68ab      	ldr	r3, [r5, #8]
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fbce 	bl	8005500 <d_print_comp>
 8004d64:	2202      	movs	r2, #2
 8004d66:	49d5      	ldr	r1, [pc, #852]	; (80050bc <d_print_comp_inner+0x2704>)
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7fb fb51 	bl	8000410 <d_append_buffer>
 8004d6e:	68ab      	ldr	r3, [r5, #8]
 8004d70:	4641      	mov	r1, r8
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fbc3 	bl	8005500 <d_print_comp>
 8004d7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d7e:	29ff      	cmp	r1, #255	; 0xff
 8004d80:	f000 81df 	beq.w	8005142 <d_print_comp_inner+0x278a>
 8004d84:	2329      	movs	r3, #41	; 0x29
 8004d86:	1c4a      	adds	r2, r1, #1
 8004d88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d8c:	5463      	strb	r3, [r4, r1]
 8004d8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d92:	f7fd bedf 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004d96:	4632      	mov	r2, r6
 8004d98:	4641      	mov	r1, r8
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 fbb0 	bl	8005500 <d_print_comp>
 8004da0:	f7fd bed8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004da4:	2600      	movs	r6, #0
 8004da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004db2:	4620      	mov	r0, r4
 8004db4:	4798      	blx	r3
 8004db6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f7fe ba55 	b.w	8003272 <d_print_comp_inner+0x8ba>
 8004dc8:	49bd      	ldr	r1, [pc, #756]	; (80050c0 <d_print_comp_inner+0x2708>)
 8004dca:	6870      	ldr	r0, [r6, #4]
 8004dcc:	f00d fa2a 	bl	8012224 <strncmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f47e aabd 	bne.w	8003350 <d_print_comp_inner+0x998>
 8004dd6:	68aa      	ldr	r2, [r5, #8]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fb90 	bl	8005500 <d_print_comp>
 8004de0:	2202      	movs	r2, #2
 8004de2:	49b8      	ldr	r1, [pc, #736]	; (80050c4 <d_print_comp_inner+0x270c>)
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fb fb13 	bl	8000410 <d_append_buffer>
 8004dea:	f7fe badd 	b.w	80033a8 <d_print_comp_inner+0x9f0>
 8004dee:	68aa      	ldr	r2, [r5, #8]
 8004df0:	7817      	ldrb	r7, [r2, #0]
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	f47e aea8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004df8:	2b3d      	cmp	r3, #61	; 0x3d
 8004dfa:	f000 82ef 	beq.w	80053dc <d_print_comp_inner+0x2a24>
 8004dfe:	68aa      	ldr	r2, [r5, #8]
 8004e00:	4641      	mov	r1, r8
 8004e02:	4620      	mov	r0, r4
 8004e04:	3e02      	subs	r6, #2
 8004e06:	f000 fb7b 	bl	8005500 <d_print_comp>
 8004e0a:	2e04      	cmp	r6, #4
 8004e0c:	f63d aea2 	bhi.w	8002b54 <d_print_comp_inner+0x19c>
 8004e10:	e8df f006 	tbb	[pc, r6]
 8004e14:	0a111826 	.word	0x0a111826
 8004e18:	03          	.byte	0x03
 8004e19:	00          	.byte	0x00
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	49aa      	ldr	r1, [pc, #680]	; (80050c8 <d_print_comp_inner+0x2710>)
 8004e20:	f7fb faf6 	bl	8000410 <d_append_buffer>
 8004e24:	f7fd be96 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	49a7      	ldr	r1, [pc, #668]	; (80050cc <d_print_comp_inner+0x2714>)
 8004e2e:	f7fb faef 	bl	8000410 <d_append_buffer>
 8004e32:	f7fd be8f 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e36:	4620      	mov	r0, r4
 8004e38:	2202      	movs	r2, #2
 8004e3a:	49a5      	ldr	r1, [pc, #660]	; (80050d0 <d_print_comp_inner+0x2718>)
 8004e3c:	f7fb fae8 	bl	8000410 <d_append_buffer>
 8004e40:	f7fd be88 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e48:	29ff      	cmp	r1, #255	; 0xff
 8004e4a:	f000 831a 	beq.w	8005482 <d_print_comp_inner+0x2aca>
 8004e4e:	236c      	movs	r3, #108	; 0x6c
 8004e50:	1c4a      	adds	r2, r1, #1
 8004e52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e56:	5463      	strb	r3, [r4, r1]
 8004e58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e5c:	f7fd be7a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e64:	29ff      	cmp	r1, #255	; 0xff
 8004e66:	f000 82db 	beq.w	8005420 <d_print_comp_inner+0x2a68>
 8004e6a:	2375      	movs	r3, #117	; 0x75
 8004e6c:	1c4a      	adds	r2, r1, #1
 8004e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e72:	5463      	strb	r3, [r4, r1]
 8004e74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e78:	f7fd be6c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e88:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4798      	blx	r3
 8004e90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004e9a:	4633      	mov	r3, r6
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	f7fe bd3c 	b.w	800391a <d_print_comp_inner+0xf62>
 8004ea2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ea6:	f7fe bf95 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 8004eaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eae:	29ff      	cmp	r1, #255	; 0xff
 8004eb0:	f000 8244 	beq.w	800533c <d_print_comp_inner+0x2984>
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	1c4a      	adds	r2, r1, #1
 8004eb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ebc:	5463      	strb	r3, [r4, r1]
 8004ebe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ec2:	e447      	b.n	8004754 <d_print_comp_inner+0x1d9c>
 8004ec4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ec8:	29ff      	cmp	r1, #255	; 0xff
 8004eca:	f000 826e 	beq.w	80053aa <d_print_comp_inner+0x29f2>
 8004ece:	2320      	movs	r3, #32
 8004ed0:	1c4a      	adds	r2, r1, #1
 8004ed2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ed6:	5463      	strb	r3, [r4, r1]
 8004ed8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004edc:	e419      	b.n	8004712 <d_print_comp_inner+0x1d5a>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ee4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ee8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eec:	4620      	mov	r0, r4
 8004eee:	4798      	blx	r3
 8004ef0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004efc:	e4dd      	b.n	80048ba <d_print_comp_inner+0x1f02>
 8004efe:	4664      	mov	r4, ip
 8004f00:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004f04:	b1d8      	cbz	r0, 8004f3e <d_print_comp_inner+0x2586>
 8004f06:	6802      	ldr	r2, [r0, #0]
 8004f08:	4291      	cmp	r1, r2
 8004f0a:	d00a      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	e004      	b.n	8004f1a <d_print_comp_inner+0x2562>
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b1a3      	cbz	r3, 8004f3e <d_print_comp_inner+0x2586>
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4291      	cmp	r1, r2
 8004f18:	d003      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f1a:	4295      	cmp	r5, r2
 8004f1c:	d1f8      	bne.n	8004f10 <d_print_comp_inner+0x2558>
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	d0f6      	beq.n	8004f10 <d_print_comp_inner+0x2558>
 8004f22:	3104      	adds	r1, #4
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fb fc83 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f43d ae26 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004f30:	7803      	ldrb	r3, [r0, #0]
 8004f32:	2b2f      	cmp	r3, #47	; 0x2f
 8004f34:	f43d ae11 	beq.w	8002b5a <d_print_comp_inner+0x1a2>
 8004f38:	4601      	mov	r1, r0
 8004f3a:	f7fe bc30 	b.w	800379e <d_print_comp_inner+0xde6>
 8004f3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f42:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004f46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004f4a:	3104      	adds	r1, #4
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7fb fc6f 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f43d ae10 	beq.w	8002b78 <d_print_comp_inner+0x1c0>
 8004f58:	2701      	movs	r7, #1
 8004f5a:	e7e9      	b.n	8004f30 <d_print_comp_inner+0x2578>
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f62:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4798      	blx	r3
 8004f6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f72:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4631      	mov	r1, r6
 8004f7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f7e:	f7ff b85a 	b.w	8004036 <d_print_comp_inner+0x167e>
 8004f82:	68aa      	ldr	r2, [r5, #8]
 8004f84:	4641      	mov	r1, r8
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 faba 	bl	8005500 <d_print_comp>
 8004f8c:	9b06      	ldr	r3, [sp, #24]
 8004f8e:	9a00      	ldr	r2, [sp, #0]
 8004f90:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f43e ac9d 	beq.w	80038d4 <d_print_comp_inner+0xf1c>
 8004f9a:	f7fd bddb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004f9e:	255f      	movs	r5, #95	; 0x5f
 8004fa0:	f7ff ba10 	b.w	80043c4 <d_print_comp_inner+0x1a0c>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004faa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4798      	blx	r3
 8004fb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fc2:	f7ff bb82 	b.w	80046ca <d_print_comp_inner+0x1d12>
 8004fc6:	4648      	mov	r0, r9
 8004fc8:	4942      	ldr	r1, [pc, #264]	; (80050d4 <d_print_comp_inner+0x271c>)
 8004fca:	f001 fca9 	bl	8006920 <strcmp>
 8004fce:	b120      	cbz	r0, 8004fda <d_print_comp_inner+0x2622>
 8004fd0:	463a      	mov	r2, r7
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f001 f87b 	bl	80060d0 <d_print_expr_op>
 8004fda:	68ab      	ldr	r3, [r5, #8]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 f8b3 	bl	800614c <d_print_subexpr>
 8004fe6:	f7fd bd9d 	b.w	8002b24 <d_print_comp_inner+0x16c>
 8004fea:	2600      	movs	r6, #0
 8004fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ff0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005000:	3301      	adds	r3, #1
 8005002:	4631      	mov	r1, r6
 8005004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005008:	f7ff bb88 	b.w	800471c <d_print_comp_inner+0x1d64>
 800500c:	2500      	movs	r5, #0
 800500e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005012:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005016:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501a:	4620      	mov	r0, r4
 800501c:	4798      	blx	r3
 800501e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005022:	3301      	adds	r3, #1
 8005024:	4629      	mov	r1, r5
 8005026:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800502a:	f7fe bb59 	b.w	80036e0 <d_print_comp_inner+0xd28>
 800502e:	2500      	movs	r5, #0
 8005030:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005034:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005038:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800503c:	4798      	blx	r3
 800503e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005042:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005046:	3301      	adds	r3, #1
 8005048:	4629      	mov	r1, r5
 800504a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800504e:	f7fe bb2b 	b.w	80036a8 <d_print_comp_inner+0xcf0>
 8005052:	6840      	ldr	r0, [r0, #4]
 8005054:	2800      	cmp	r0, #0
 8005056:	f43d ad91 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 800505a:	f7fe b959 	b.w	8003310 <d_print_comp_inner+0x958>
 800505e:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8005062:	4619      	mov	r1, r3
 8005064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
 8005070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800507a:	462b      	mov	r3, r5
 800507c:	f7ff bb14 	b.w	80046a8 <d_print_comp_inner+0x1cf0>
 8005080:	6873      	ldr	r3, [r6, #4]
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	2a01      	cmp	r2, #1
 8005086:	f000 8153 	beq.w	8005330 <d_print_comp_inner+0x2978>
 800508a:	f896 a000 	ldrb.w	sl, [r6]
 800508e:	f7ff bae0 	b.w	8004652 <d_print_comp_inner+0x1c9a>
 8005092:	2500      	movs	r5, #0
 8005094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005098:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800509c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050a0:	4620      	mov	r0, r4
 80050a2:	4798      	blx	r3
 80050a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050a8:	3301      	adds	r3, #1
 80050aa:	4629      	mov	r1, r5
 80050ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050b0:	f7ff bb55 	b.w	800475e <d_print_comp_inner+0x1da6>
 80050b4:	4654      	mov	r4, sl
 80050b6:	f7fe be8d 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 80050ba:	bf00      	nop
 80050bc:	08016f50 	.word	0x08016f50
 80050c0:	08016db8 	.word	0x08016db8
 80050c4:	08016dc0 	.word	0x08016dc0
 80050c8:	08016f6c 	.word	0x08016f6c
 80050cc:	08016f68 	.word	0x08016f68
 80050d0:	08016f64 	.word	0x08016f64
 80050d4:	08016d58 	.word	0x08016d58
 80050d8:	686a      	ldr	r2, [r5, #4]
 80050da:	4641      	mov	r1, r8
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 f835 	bl	800614c <d_print_subexpr>
 80050e2:	4620      	mov	r0, r4
 80050e4:	2203      	movs	r2, #3
 80050e6:	49e2      	ldr	r1, [pc, #904]	; (8005470 <d_print_comp_inner+0x2ab8>)
 80050e8:	f7fb f992 	bl	8000410 <d_append_buffer>
 80050ec:	f7fd bd32 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80050f0:	ab14      	add	r3, sp, #80	; 0x50
 80050f2:	9603      	str	r6, [sp, #12]
 80050f4:	f843 cd48 	str.w	ip, [r3, #-72]!
 80050f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80050fc:	f7fe b85a 	b.w	80031b4 <d_print_comp_inner+0x7fc>
 8005100:	2700      	movs	r7, #0
 8005102:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005106:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800510a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800510e:	4620      	mov	r0, r4
 8005110:	4798      	blx	r3
 8005112:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005116:	3301      	adds	r3, #1
 8005118:	4639      	mov	r1, r7
 800511a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800511e:	e41d      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8005120:	2600      	movs	r6, #0
 8005122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005126:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800512a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512e:	4620      	mov	r0, r4
 8005130:	4798      	blx	r3
 8005132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005136:	3301      	adds	r3, #1
 8005138:	4631      	mov	r1, r6
 800513a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800513e:	f7ff bb8a 	b.w	8004856 <d_print_comp_inner+0x1e9e>
 8005142:	2500      	movs	r5, #0
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800514c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005158:	3301      	adds	r3, #1
 800515a:	4629      	mov	r1, r5
 800515c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005160:	e610      	b.n	8004d84 <d_print_comp_inner+0x23cc>
 8005162:	2600      	movs	r6, #0
 8005164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005168:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800516c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005170:	4620      	mov	r0, r4
 8005172:	4798      	blx	r3
 8005174:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005178:	3301      	adds	r3, #1
 800517a:	4631      	mov	r1, r6
 800517c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005180:	f7ff bb8a 	b.w	8004898 <d_print_comp_inner+0x1ee0>
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	6891      	ldr	r1, [r2, #8]
 8005188:	2901      	cmp	r1, #1
 800518a:	f47d ac90 	bne.w	8002aae <d_print_comp_inner+0xf6>
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	2a3e      	cmp	r2, #62	; 0x3e
 8005194:	f47d ac8b 	bne.w	8002aae <d_print_comp_inner+0xf6>
 8005198:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800519c:	29ff      	cmp	r1, #255	; 0xff
 800519e:	d10f      	bne.n	80051c0 <d_print_comp_inner+0x2808>
 80051a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051a4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051ac:	4620      	mov	r0, r4
 80051ae:	4798      	blx	r3
 80051b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051b4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80051b8:	3301      	adds	r3, #1
 80051ba:	4631      	mov	r1, r6
 80051bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051c0:	2328      	movs	r3, #40	; 0x28
 80051c2:	1c4a      	adds	r2, r1, #1
 80051c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80051c8:	5463      	strb	r3, [r4, r1]
 80051ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80051ce:	686b      	ldr	r3, [r5, #4]
 80051d0:	f7fd bc6d 	b.w	8002aae <d_print_comp_inner+0xf6>
 80051d4:	2500      	movs	r5, #0
 80051d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80051de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051e2:	4620      	mov	r0, r4
 80051e4:	4798      	blx	r3
 80051e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051ea:	3301      	adds	r3, #1
 80051ec:	4629      	mov	r1, r5
 80051ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051f2:	f7ff bb0b 	b.w	800480c <d_print_comp_inner+0x1e54>
 80051f6:	f8db b004 	ldr.w	fp, [fp, #4]
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	f43e ade9 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 8005202:	f7fd bfc3 	b.w	800318c <d_print_comp_inner+0x7d4>
 8005206:	9b02      	ldr	r3, [sp, #8]
 8005208:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800520c:	f7fd bfdb 	b.w	80031c6 <d_print_comp_inner+0x80e>
 8005210:	6893      	ldr	r3, [r2, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b29      	cmp	r3, #41	; 0x29
 8005216:	bf1c      	itt	ne
 8005218:	2301      	movne	r3, #1
 800521a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	4641      	mov	r1, r8
 8005222:	4620      	mov	r0, r4
 8005224:	f000 ff92 	bl	800614c <d_print_subexpr>
 8005228:	f7fd bc52 	b.w	8002ad0 <d_print_comp_inner+0x118>
 800522c:	2600      	movs	r6, #0
 800522e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005232:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005236:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800523a:	4620      	mov	r0, r4
 800523c:	4798      	blx	r3
 800523e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005242:	3301      	adds	r3, #1
 8005244:	4631      	mov	r1, r6
 8005246:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800524a:	e57e      	b.n	8004d4a <d_print_comp_inner+0x2392>
 800524c:	6872      	ldr	r2, [r6, #4]
 800524e:	4641      	mov	r1, r8
 8005250:	4620      	mov	r0, r4
 8005252:	f000 ff7b 	bl	800614c <d_print_subexpr>
 8005256:	464a      	mov	r2, r9
 8005258:	4641      	mov	r1, r8
 800525a:	4620      	mov	r0, r4
 800525c:	f000 ff38 	bl	80060d0 <d_print_expr_op>
 8005260:	f7fd bc78 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005268:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800526c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005270:	4620      	mov	r0, r4
 8005272:	4798      	blx	r3
 8005274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005278:	3301      	adds	r3, #1
 800527a:	4629      	mov	r1, r5
 800527c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005280:	f7fd bfad 	b.w	80031de <d_print_comp_inner+0x826>
 8005284:	464a      	mov	r2, r9
 8005286:	4641      	mov	r1, r8
 8005288:	4620      	mov	r0, r4
 800528a:	f000 ff5f 	bl	800614c <d_print_subexpr>
 800528e:	4652      	mov	r2, sl
 8005290:	4641      	mov	r1, r8
 8005292:	4620      	mov	r0, r4
 8005294:	f000 ff1c 	bl	80060d0 <d_print_expr_op>
 8005298:	463a      	mov	r2, r7
 800529a:	4641      	mov	r1, r8
 800529c:	4620      	mov	r0, r4
 800529e:	f000 ff55 	bl	800614c <d_print_subexpr>
 80052a2:	4620      	mov	r0, r4
 80052a4:	2203      	movs	r2, #3
 80052a6:	4973      	ldr	r1, [pc, #460]	; (8005474 <d_print_comp_inner+0x2abc>)
 80052a8:	f7fb f8b2 	bl	8000410 <d_append_buffer>
 80052ac:	462a      	mov	r2, r5
 80052ae:	4641      	mov	r1, r8
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 ff4b 	bl	800614c <d_print_subexpr>
 80052b6:	f7fd bc4d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80052ba:	454f      	cmp	r7, r9
 80052bc:	f67f ae6f 	bls.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c0:	2d5f      	cmp	r5, #95	; 0x5f
 80052c2:	f47f ae6c 	bne.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c6:	28ff      	cmp	r0, #255	; 0xff
 80052c8:	f63f a87c 	bhi.w	80043c4 <d_print_comp_inner+0x1a0c>
 80052cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80052d0:	29ff      	cmp	r1, #255	; 0xff
 80052d2:	b2c5      	uxtb	r5, r0
 80052d4:	d10f      	bne.n	80052f6 <d_print_comp_inner+0x293e>
 80052d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052e2:	4620      	mov	r0, r4
 80052e4:	4798      	blx	r3
 80052e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052ea:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80052ee:	3301      	adds	r3, #1
 80052f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052f4:	2100      	movs	r1, #0
 80052f6:	1c4b      	adds	r3, r1, #1
 80052f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80052fc:	464e      	mov	r6, r9
 80052fe:	5465      	strb	r5, [r4, r1]
 8005300:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005304:	f7ff b868 	b.w	80043d8 <d_print_comp_inner+0x1a20>
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4631      	mov	r1, r6
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	f7ff bbe5 	b.w	8004af6 <d_print_comp_inner+0x213e>
 800532c:	4691      	mov	r9, r2
 800532e:	e5e7      	b.n	8004f00 <d_print_comp_inner+0x2548>
 8005330:	68b2      	ldr	r2, [r6, #8]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	2a29      	cmp	r2, #41	; 0x29
 8005336:	bf08      	it	eq
 8005338:	461e      	moveq	r6, r3
 800533a:	e6a6      	b.n	800508a <d_print_comp_inner+0x26d2>
 800533c:	2500      	movs	r5, #0
 800533e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005342:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005346:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800534a:	4620      	mov	r0, r4
 800534c:	4798      	blx	r3
 800534e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005352:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005356:	3301      	adds	r3, #1
 8005358:	4629      	mov	r1, r5
 800535a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800535e:	e5a9      	b.n	8004eb4 <d_print_comp_inner+0x24fc>
 8005360:	2600      	movs	r6, #0
 8005362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005366:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800536e:	4620      	mov	r0, r4
 8005370:	4798      	blx	r3
 8005372:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005376:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537a:	3301      	adds	r3, #1
 800537c:	4631      	mov	r1, r6
 800537e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005382:	f7fd bbc8 	b.w	8002b16 <d_print_comp_inner+0x15e>
 8005386:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800538a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800538e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005392:	4620      	mov	r0, r4
 8005394:	4798      	blx	r3
 8005396:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800539a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800539e:	3301      	adds	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053a6:	f7fd bba4 	b.w	8002af2 <d_print_comp_inner+0x13a>
 80053aa:	2600      	movs	r6, #0
 80053ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053b8:	4620      	mov	r0, r4
 80053ba:	4798      	blx	r3
 80053bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053c4:	3301      	adds	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053cc:	e57f      	b.n	8004ece <d_print_comp_inner+0x2516>
 80053ce:	6841      	ldr	r1, [r0, #4]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	f43d abd0 	beq.w	8002b76 <d_print_comp_inner+0x1be>
 80053d6:	780b      	ldrb	r3, [r1, #0]
 80053d8:	f7fe b9e1 	b.w	800379e <d_print_comp_inner+0xde6>
 80053dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053e0:	29ff      	cmp	r1, #255	; 0xff
 80053e2:	d00d      	beq.n	8005400 <d_print_comp_inner+0x2a48>
 80053e4:	232d      	movs	r3, #45	; 0x2d
 80053e6:	1c4a      	adds	r2, r1, #1
 80053e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053ec:	5463      	strb	r3, [r4, r1]
 80053ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053f2:	e504      	b.n	8004dfe <d_print_comp_inner+0x2446>
 80053f4:	2205      	movs	r2, #5
 80053f6:	4920      	ldr	r1, [pc, #128]	; (8005478 <d_print_comp_inner+0x2ac0>)
 80053f8:	f7fb f80a 	bl	8000410 <d_append_buffer>
 80053fc:	f7fd bbaa 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005400:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005404:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005408:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800540c:	4798      	blx	r3
 800540e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005412:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005416:	3301      	adds	r3, #1
 8005418:	4639      	mov	r1, r7
 800541a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800541e:	e7e1      	b.n	80053e4 <d_print_comp_inner+0x2a2c>
 8005420:	2500      	movs	r5, #0
 8005422:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005426:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800542a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005436:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800543a:	3301      	adds	r3, #1
 800543c:	4629      	mov	r1, r5
 800543e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005442:	e512      	b.n	8004e6a <d_print_comp_inner+0x24b2>
 8005444:	2700      	movs	r7, #0
 8005446:	f7ff b913 	b.w	8004670 <d_print_comp_inner+0x1cb8>
 800544a:	2500      	movs	r5, #0
 800544c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005450:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005458:	4620      	mov	r0, r4
 800545a:	4798      	blx	r3
 800545c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005460:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005464:	3301      	adds	r3, #1
 8005466:	4629      	mov	r1, r5
 8005468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800546c:	f7fd bb6b 	b.w	8002b46 <d_print_comp_inner+0x18e>
 8005470:	08016f9c 	.word	0x08016f9c
 8005474:	08016f58 	.word	0x08016f58
 8005478:	08016f70 	.word	0x08016f70
 800547c:	4637      	mov	r7, r6
 800547e:	f7ff bbe6 	b.w	8004c4e <d_print_comp_inner+0x2296>
 8005482:	2500      	movs	r5, #0
 8005484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005488:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800548c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005490:	4620      	mov	r0, r4
 8005492:	4798      	blx	r3
 8005494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005498:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800549c:	3301      	adds	r3, #1
 800549e:	4629      	mov	r1, r5
 80054a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054a4:	e4d3      	b.n	8004e4e <d_print_comp_inner+0x2496>
 80054a6:	4671      	mov	r1, lr
 80054a8:	6002      	str	r2, [r0, #0]
 80054aa:	3104      	adds	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fb f9bf 	bl	8000830 <d_lookup_template_argument.isra.6>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f ad3c 	bne.w	8004f30 <d_print_comp_inner+0x2578>
 80054b8:	f7fd bb60 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 80054bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80054c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80054d4:	3301      	adds	r3, #1
 80054d6:	4631      	mov	r1, r6
 80054d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054dc:	f7fe bc02 	b.w	8003ce4 <d_print_comp_inner+0x132c>
 80054e0:	2301      	movs	r3, #1
 80054e2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80054e6:	f7fd bb35 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80054ea:	4618      	mov	r0, r3
 80054ec:	4407      	add	r7, r0
 80054ee:	f7ff bb81 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054f2:	2000      	movs	r0, #0
 80054f4:	4407      	add	r7, r0
 80054f6:	f7ff bb7d 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054fa:	4607      	mov	r7, r0
 80054fc:	f7ff bba7 	b.w	8004c4e <d_print_comp_inner+0x2296>

08005500 <d_print_comp>:
 8005500:	b510      	push	{r4, lr}
 8005502:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005506:	b082      	sub	sp, #8
 8005508:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800550c:	4604      	mov	r4, r0
 800550e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005512:	f7fd fa51 	bl	80029b8 <d_print_comp_inner>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800551c:	b002      	add	sp, #8
 800551e:	bd10      	pop	{r4, pc}

08005520 <d_print_mod>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	3b03      	subs	r3, #3
 8005528:	b082      	sub	sp, #8
 800552a:	4615      	mov	r5, r2
 800552c:	4604      	mov	r4, r0
 800552e:	4688      	mov	r8, r1
 8005530:	2b49      	cmp	r3, #73	; 0x49
 8005532:	f200 8223 	bhi.w	800597c <d_print_mod+0x45c>
 8005536:	e8df f013 	tbh	[pc, r3, lsl #1]
 800553a:	01e7      	.short	0x01e7
 800553c:	02210221 	.word	0x02210221
 8005540:	02210221 	.word	0x02210221
 8005544:	02210221 	.word	0x02210221
 8005548:	02210221 	.word	0x02210221
 800554c:	02210221 	.word	0x02210221
 8005550:	02210221 	.word	0x02210221
 8005554:	02210221 	.word	0x02210221
 8005558:	02210221 	.word	0x02210221
 800555c:	02210221 	.word	0x02210221
 8005560:	02210221 	.word	0x02210221
 8005564:	01e90221 	.word	0x01e90221
 8005568:	01a80182 	.word	0x01a80182
 800556c:	018201e9 	.word	0x018201e9
 8005570:	01cd01a8 	.word	0x01cd01a8
 8005574:	006f01da 	.word	0x006f01da
 8005578:	009c008c 	.word	0x009c008c
 800557c:	00cf00ab 	.word	0x00cf00ab
 8005580:	022100f4 	.word	0x022100f4
 8005584:	02210221 	.word	0x02210221
 8005588:	01190221 	.word	0x01190221
 800558c:	015c0221 	.word	0x015c0221
 8005590:	02210221 	.word	0x02210221
 8005594:	02210221 	.word	0x02210221
 8005598:	02210221 	.word	0x02210221
 800559c:	02210221 	.word	0x02210221
 80055a0:	02210221 	.word	0x02210221
 80055a4:	02210221 	.word	0x02210221
 80055a8:	02210221 	.word	0x02210221
 80055ac:	02210221 	.word	0x02210221
 80055b0:	02210221 	.word	0x02210221
 80055b4:	02210221 	.word	0x02210221
 80055b8:	02210221 	.word	0x02210221
 80055bc:	02210221 	.word	0x02210221
 80055c0:	02210221 	.word	0x02210221
 80055c4:	02210221 	.word	0x02210221
 80055c8:	02210221 	.word	0x02210221
 80055cc:	004a      	.short	0x004a
 80055ce:	4dd3      	ldr	r5, [pc, #844]	; (800591c <d_print_mod+0x3fc>)
 80055d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055d4:	f105 0711 	add.w	r7, r5, #17
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	e008      	b.n	80055f0 <d_print_mod+0xd0>
 80055de:	460b      	mov	r3, r1
 80055e0:	3101      	adds	r1, #1
 80055e2:	42bd      	cmp	r5, r7
 80055e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055e8:	54e6      	strb	r6, [r4, r3]
 80055ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80055ee:	d02d      	beq.n	800564c <d_print_mod+0x12c>
 80055f0:	29ff      	cmp	r1, #255	; 0xff
 80055f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80055f6:	d1f2      	bne.n	80055de <d_print_mod+0xbe>
 80055f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80055fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005604:	4620      	mov	r0, r4
 8005606:	4798      	blx	r3
 8005608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800560c:	3301      	adds	r3, #1
 800560e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005612:	2101      	movs	r1, #1
 8005614:	2300      	movs	r3, #0
 8005616:	e7e4      	b.n	80055e2 <d_print_mod+0xc2>
 8005618:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800561c:	29ff      	cmp	r1, #255	; 0xff
 800561e:	f000 81f7 	beq.w	8005a10 <d_print_mod+0x4f0>
 8005622:	1c4a      	adds	r2, r1, #1
 8005624:	2320      	movs	r3, #32
 8005626:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800562a:	5463      	strb	r3, [r4, r1]
 800562c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005630:	68aa      	ldr	r2, [r5, #8]
 8005632:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005636:	9200      	str	r2, [sp, #0]
 8005638:	4641      	mov	r1, r8
 800563a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800563e:	4620      	mov	r0, r4
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f7fd f9b9 	bl	80029b8 <d_print_comp_inner>
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800564c:	b002      	add	sp, #8
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	f011 0504 	ands.w	r5, r1, #4
 8005656:	d1f9      	bne.n	800564c <d_print_mod+0x12c>
 8005658:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	f000 821c 	beq.w	8005a9a <d_print_mod+0x57a>
 8005662:	222a      	movs	r2, #42	; 0x2a
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800566a:	54e2      	strb	r2, [r4, r3]
 800566c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005670:	e7ec      	b.n	800564c <d_print_mod+0x12c>
 8005672:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005676:	29ff      	cmp	r1, #255	; 0xff
 8005678:	f000 81b9 	beq.w	80059ee <d_print_mod+0x4ce>
 800567c:	1c4a      	adds	r2, r1, #1
 800567e:	2326      	movs	r3, #38	; 0x26
 8005680:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005684:	5463      	strb	r3, [r4, r1]
 8005686:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800568a:	b002      	add	sp, #8
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005694:	4da2      	ldr	r5, [pc, #648]	; (8005920 <d_print_mod+0x400>)
 8005696:	f04f 0800 	mov.w	r8, #0
 800569a:	1caf      	adds	r7, r5, #2
 800569c:	e008      	b.n	80056b0 <d_print_mod+0x190>
 800569e:	460b      	mov	r3, r1
 80056a0:	3101      	adds	r1, #1
 80056a2:	42bd      	cmp	r5, r7
 80056a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056a8:	54e6      	strb	r6, [r4, r3]
 80056aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056ae:	d0cd      	beq.n	800564c <d_print_mod+0x12c>
 80056b0:	29ff      	cmp	r1, #255	; 0xff
 80056b2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056b6:	d1f2      	bne.n	800569e <d_print_mod+0x17e>
 80056b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056c4:	4620      	mov	r0, r4
 80056c6:	4798      	blx	r3
 80056c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056d2:	2101      	movs	r1, #1
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7e4      	b.n	80056a2 <d_print_mod+0x182>
 80056d8:	4d92      	ldr	r5, [pc, #584]	; (8005924 <d_print_mod+0x404>)
 80056da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056de:	f105 0708 	add.w	r7, r5, #8
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	e008      	b.n	80056fa <d_print_mod+0x1da>
 80056e8:	460b      	mov	r3, r1
 80056ea:	3101      	adds	r1, #1
 80056ec:	42bd      	cmp	r5, r7
 80056ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056f2:	54e6      	strb	r6, [r4, r3]
 80056f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056f8:	d0a8      	beq.n	800564c <d_print_mod+0x12c>
 80056fa:	29ff      	cmp	r1, #255	; 0xff
 80056fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005700:	d1f2      	bne.n	80056e8 <d_print_mod+0x1c8>
 8005702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005706:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800570a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800570e:	4620      	mov	r0, r4
 8005710:	4798      	blx	r3
 8005712:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005716:	3301      	adds	r3, #1
 8005718:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800571c:	2101      	movs	r1, #1
 800571e:	2300      	movs	r3, #0
 8005720:	e7e4      	b.n	80056ec <d_print_mod+0x1cc>
 8005722:	4d81      	ldr	r5, [pc, #516]	; (8005928 <d_print_mod+0x408>)
 8005724:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005728:	f105 070a 	add.w	r7, r5, #10
 800572c:	f04f 0800 	mov.w	r8, #0
 8005730:	e008      	b.n	8005744 <d_print_mod+0x224>
 8005732:	460b      	mov	r3, r1
 8005734:	3101      	adds	r1, #1
 8005736:	42bd      	cmp	r5, r7
 8005738:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800573c:	54e6      	strb	r6, [r4, r3]
 800573e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005742:	d083      	beq.n	800564c <d_print_mod+0x12c>
 8005744:	29ff      	cmp	r1, #255	; 0xff
 8005746:	f815 6b01 	ldrb.w	r6, [r5], #1
 800574a:	d1f2      	bne.n	8005732 <d_print_mod+0x212>
 800574c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005750:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005758:	4620      	mov	r0, r4
 800575a:	4798      	blx	r3
 800575c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005760:	3301      	adds	r3, #1
 8005762:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005766:	2101      	movs	r1, #1
 8005768:	2300      	movs	r3, #0
 800576a:	e7e4      	b.n	8005736 <d_print_mod+0x216>
 800576c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d00b      	beq.n	800578c <d_print_mod+0x26c>
 8005774:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005778:	2bff      	cmp	r3, #255	; 0xff
 800577a:	f000 8126 	beq.w	80059ca <d_print_mod+0x4aa>
 800577e:	2220      	movs	r2, #32
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005786:	54e2      	strb	r2, [r4, r3]
 8005788:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800578c:	686a      	ldr	r2, [r5, #4]
 800578e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005792:	4d66      	ldr	r5, [pc, #408]	; (800592c <d_print_mod+0x40c>)
 8005794:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005798:	4641      	mov	r1, r8
 800579a:	4620      	mov	r0, r4
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	9200      	str	r2, [sp, #0]
 80057a0:	f7fd f90a 	bl	80029b8 <d_print_comp_inner>
 80057a4:	9b01      	ldr	r3, [sp, #4]
 80057a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80057aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057ae:	1cef      	adds	r7, r5, #3
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	e009      	b.n	80057ca <d_print_mod+0x2aa>
 80057b6:	460b      	mov	r3, r1
 80057b8:	3101      	adds	r1, #1
 80057ba:	42bd      	cmp	r5, r7
 80057bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c0:	54e6      	strb	r6, [r4, r3]
 80057c2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c6:	f43f af41 	beq.w	800564c <d_print_mod+0x12c>
 80057ca:	29ff      	cmp	r1, #255	; 0xff
 80057cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80057d0:	d1f1      	bne.n	80057b6 <d_print_mod+0x296>
 80057d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057de:	4620      	mov	r0, r4
 80057e0:	4798      	blx	r3
 80057e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057ec:	2101      	movs	r1, #1
 80057ee:	2300      	movs	r3, #0
 80057f0:	e7e3      	b.n	80057ba <d_print_mod+0x29a>
 80057f2:	4e4f      	ldr	r6, [pc, #316]	; (8005930 <d_print_mod+0x410>)
 80057f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057f8:	f106 0a0a 	add.w	sl, r6, #10
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	e009      	b.n	8005816 <d_print_mod+0x2f6>
 8005802:	460b      	mov	r3, r1
 8005804:	3101      	adds	r1, #1
 8005806:	4556      	cmp	r6, sl
 8005808:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800580c:	54e7      	strb	r7, [r4, r3]
 800580e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005812:	f000 80c0 	beq.w	8005996 <d_print_mod+0x476>
 8005816:	29ff      	cmp	r1, #255	; 0xff
 8005818:	f816 7b01 	ldrb.w	r7, [r6], #1
 800581c:	d1f1      	bne.n	8005802 <d_print_mod+0x2e2>
 800581e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005822:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005826:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800582a:	4620      	mov	r0, r4
 800582c:	4798      	blx	r3
 800582e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005832:	3301      	adds	r3, #1
 8005834:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005838:	2101      	movs	r1, #1
 800583a:	2300      	movs	r3, #0
 800583c:	e7e3      	b.n	8005806 <d_print_mod+0x2e6>
 800583e:	4d3d      	ldr	r5, [pc, #244]	; (8005934 <d_print_mod+0x414>)
 8005840:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005844:	f105 0709 	add.w	r7, r5, #9
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	e009      	b.n	8005862 <d_print_mod+0x342>
 800584e:	460b      	mov	r3, r1
 8005850:	3101      	adds	r1, #1
 8005852:	42bd      	cmp	r5, r7
 8005854:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005858:	54e6      	strb	r6, [r4, r3]
 800585a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800585e:	f43f aef5 	beq.w	800564c <d_print_mod+0x12c>
 8005862:	29ff      	cmp	r1, #255	; 0xff
 8005864:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005868:	d1f1      	bne.n	800584e <d_print_mod+0x32e>
 800586a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800586e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005876:	4620      	mov	r0, r4
 8005878:	4798      	blx	r3
 800587a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800587e:	3301      	adds	r3, #1
 8005880:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005884:	2101      	movs	r1, #1
 8005886:	2300      	movs	r3, #0
 8005888:	e7e3      	b.n	8005852 <d_print_mod+0x332>
 800588a:	4d2b      	ldr	r5, [pc, #172]	; (8005938 <d_print_mod+0x418>)
 800588c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005890:	1daf      	adds	r7, r5, #6
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	e009      	b.n	80058ac <d_print_mod+0x38c>
 8005898:	460b      	mov	r3, r1
 800589a:	3101      	adds	r1, #1
 800589c:	42bd      	cmp	r5, r7
 800589e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058a2:	54e6      	strb	r6, [r4, r3]
 80058a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058a8:	f43f aed0 	beq.w	800564c <d_print_mod+0x12c>
 80058ac:	29ff      	cmp	r1, #255	; 0xff
 80058ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80058b2:	d1f1      	bne.n	8005898 <d_print_mod+0x378>
 80058b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058c0:	4620      	mov	r0, r4
 80058c2:	4798      	blx	r3
 80058c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80058c8:	3301      	adds	r3, #1
 80058ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80058ce:	2101      	movs	r1, #1
 80058d0:	2300      	movs	r3, #0
 80058d2:	e7e3      	b.n	800589c <d_print_mod+0x37c>
 80058d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058d8:	2bff      	cmp	r3, #255	; 0xff
 80058da:	f000 80cc 	beq.w	8005a76 <d_print_mod+0x556>
 80058de:	2220      	movs	r2, #32
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058e6:	54e2      	strb	r2, [r4, r3]
 80058e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80058ec:	e6c3      	b.n	8005676 <d_print_mod+0x156>
 80058ee:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058f2:	2bff      	cmp	r3, #255	; 0xff
 80058f4:	f000 80ad 	beq.w	8005a52 <d_print_mod+0x532>
 80058f8:	2220      	movs	r2, #32
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005900:	54e2      	strb	r2, [r4, r3]
 8005902:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005906:	e6c5      	b.n	8005694 <d_print_mod+0x174>
 8005908:	686a      	ldr	r2, [r5, #4]
 800590a:	e692      	b.n	8005632 <d_print_mod+0x112>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <d_print_mod+0x41c>)
 800590e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005912:	f105 0709 	add.w	r7, r5, #9
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	e01b      	b.n	8005954 <d_print_mod+0x434>
 800591c:	0801703f 	.word	0x0801703f
 8005920:	08017054 	.word	0x08017054
 8005924:	08017057 	.word	0x08017057
 8005928:	08017064 	.word	0x08017064
 800592c:	08017070 	.word	0x08017070
 8005930:	08017074 	.word	0x08017074
 8005934:	0801702b 	.word	0x0801702b
 8005938:	08017038 	.word	0x08017038
 800593c:	0801701f 	.word	0x0801701f
 8005940:	460b      	mov	r3, r1
 8005942:	3101      	adds	r1, #1
 8005944:	42af      	cmp	r7, r5
 8005946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800594a:	54e6      	strb	r6, [r4, r3]
 800594c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005950:	f43f ae7c 	beq.w	800564c <d_print_mod+0x12c>
 8005954:	29ff      	cmp	r1, #255	; 0xff
 8005956:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800595a:	d1f1      	bne.n	8005940 <d_print_mod+0x420>
 800595c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005960:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005964:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005968:	4620      	mov	r0, r4
 800596a:	4798      	blx	r3
 800596c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005970:	3301      	adds	r3, #1
 8005972:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005976:	2101      	movs	r1, #1
 8005978:	2300      	movs	r3, #0
 800597a:	e7e3      	b.n	8005944 <d_print_mod+0x424>
 800597c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005980:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8005984:	462a      	mov	r2, r5
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	9500      	str	r5, [sp, #0]
 800598a:	f7fd f815 	bl	80029b8 <d_print_comp_inner>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005994:	e65a      	b.n	800564c <d_print_mod+0x12c>
 8005996:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800599a:	686a      	ldr	r2, [r5, #4]
 800599c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80059a0:	4641      	mov	r1, r8
 80059a2:	4620      	mov	r0, r4
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	f7fd f806 	bl	80029b8 <d_print_comp_inner>
 80059ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80059b6:	29ff      	cmp	r1, #255	; 0xff
 80059b8:	d03a      	beq.n	8005a30 <d_print_mod+0x510>
 80059ba:	1c4a      	adds	r2, r1, #1
 80059bc:	2329      	movs	r3, #41	; 0x29
 80059be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80059c2:	5463      	strb	r3, [r4, r1]
 80059c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80059c8:	e640      	b.n	800564c <d_print_mod+0x12c>
 80059ca:	2600      	movs	r6, #0
 80059cc:	4619      	mov	r1, r3
 80059ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80059d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80059d6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80059da:	4798      	blx	r3
 80059dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059e0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80059ea:	4633      	mov	r3, r6
 80059ec:	e6c7      	b.n	800577e <d_print_mod+0x25e>
 80059ee:	2500      	movs	r5, #0
 80059f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80059fc:	4620      	mov	r0, r4
 80059fe:	4798      	blx	r3
 8005a00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a04:	3301      	adds	r3, #1
 8005a06:	4629      	mov	r1, r5
 8005a08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	e636      	b.n	800567e <d_print_mod+0x15e>
 8005a10:	2600      	movs	r6, #0
 8005a12:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a16:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a1a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a1e:	4798      	blx	r3
 8005a20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a24:	3301      	adds	r3, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e5f9      	b.n	8005624 <d_print_mod+0x104>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a3a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4798      	blx	r3
 8005a42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a46:	3301      	adds	r3, #1
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a4e:	2201      	movs	r2, #1
 8005a50:	e7b4      	b.n	80059bc <d_print_mod+0x49c>
 8005a52:	2500      	movs	r5, #0
 8005a54:	4619      	mov	r1, r3
 8005a56:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a5a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a5e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a62:	4798      	blx	r3
 8005a64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a72:	462b      	mov	r3, r5
 8005a74:	e740      	b.n	80058f8 <d_print_mod+0x3d8>
 8005a76:	2500      	movs	r5, #0
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a7e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a82:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a86:	4798      	blx	r3
 8005a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a8c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a96:	462b      	mov	r3, r5
 8005a98:	e721      	b.n	80058de <d_print_mod+0x3be>
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aa0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005aa4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005aa8:	4798      	blx	r3
 8005aaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005aae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ab8:	462b      	mov	r3, r5
 8005aba:	e5d2      	b.n	8005662 <d_print_mod+0x142>

08005abc <d_print_mod_list>:
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	f000 80a1 	beq.w	8005c04 <d_print_mod_list+0x148>
 8005ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	461e      	mov	r6, r3
 8005ac8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005acc:	b089      	sub	sp, #36	; 0x24
 8005ace:	4605      	mov	r5, r0
 8005ad0:	bb43      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	f04f 0801 	mov.w	r8, #1
 8005ada:	e002      	b.n	8005ae2 <d_print_mod_list+0x26>
 8005adc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005ae0:	bb03      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	b9db      	cbnz	r3, 8005b1e <d_print_mod_list+0x62>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	7813      	ldrb	r3, [r2, #0]
 8005aea:	b92e      	cbnz	r6, 8005af8 <d_print_mod_list+0x3c>
 8005aec:	f1a3 011c 	sub.w	r1, r3, #28
 8005af0:	2904      	cmp	r1, #4
 8005af2:	d914      	bls.n	8005b1e <d_print_mod_list+0x62>
 8005af4:	2b4c      	cmp	r3, #76	; 0x4c
 8005af6:	d012      	beq.n	8005b1e <d_print_mod_list+0x62>
 8005af8:	68e1      	ldr	r1, [r4, #12]
 8005afa:	f8c4 8008 	str.w	r8, [r4, #8]
 8005afe:	2b29      	cmp	r3, #41	; 0x29
 8005b00:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005b04:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005b08:	d00f      	beq.n	8005b2a <d_print_mod_list+0x6e>
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d018      	beq.n	8005b40 <d_print_mod_list+0x84>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d021      	beq.n	8005b56 <d_print_mod_list+0x9a>
 8005b12:	4639      	mov	r1, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff fd03 	bl	8005520 <d_print_mod>
 8005b1a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b1e:	6824      	ldr	r4, [r4, #0]
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	d1db      	bne.n	8005adc <d_print_mod_list+0x20>
 8005b24:	b009      	add	sp, #36	; 0x24
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	3208      	adds	r2, #8
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f9d9 	bl	8005ee8 <d_print_function_type.isra.11>
 8005b36:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b3a:	b009      	add	sp, #36	; 0x24
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	3204      	adds	r2, #4
 8005b44:	4639      	mov	r1, r7
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f8f2 	bl	8005d30 <d_print_array_type.isra.10>
 8005b4c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b50:	b009      	add	sp, #36	; 0x24
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2600      	movs	r6, #0
 8005b58:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005b5c:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	4639      	mov	r1, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff fccb 	bl	8005500 <d_print_comp>
 8005b6a:	f017 0a04 	ands.w	sl, r7, #4
 8005b6e:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005b72:	d023      	beq.n	8005bbc <d_print_mod_list+0x100>
 8005b74:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b78:	29ff      	cmp	r1, #255	; 0xff
 8005b7a:	f000 80c1 	beq.w	8005d00 <d_print_mod_list+0x244>
 8005b7e:	1c4a      	adds	r2, r1, #1
 8005b80:	232e      	movs	r3, #46	; 0x2e
 8005b82:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005b86:	546b      	strb	r3, [r5, r1]
 8005b88:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	689c      	ldr	r4, [r3, #8]
 8005b90:	7823      	ldrb	r3, [r4, #0]
 8005b92:	2b46      	cmp	r3, #70	; 0x46
 8005b94:	d037      	beq.n	8005c06 <d_print_mod_list+0x14a>
 8005b96:	f1a3 021c 	sub.w	r2, r3, #28
 8005b9a:	2a04      	cmp	r2, #4
 8005b9c:	d90b      	bls.n	8005bb6 <d_print_mod_list+0xfa>
 8005b9e:	2b4c      	cmp	r3, #76	; 0x4c
 8005ba0:	d009      	beq.n	8005bb6 <d_print_mod_list+0xfa>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fcaa 	bl	8005500 <d_print_comp>
 8005bac:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005bb0:	b009      	add	sp, #36	; 0x24
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	6864      	ldr	r4, [r4, #4]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	e7ec      	b.n	8005b96 <d_print_mod_list+0xda>
 8005bbc:	4e58      	ldr	r6, [pc, #352]	; (8005d20 <d_print_mod_list+0x264>)
 8005bbe:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005bc2:	f106 0b02 	add.w	fp, r6, #2
 8005bc6:	e009      	b.n	8005bdc <d_print_mod_list+0x120>
 8005bc8:	460b      	mov	r3, r1
 8005bca:	3101      	adds	r1, #1
 8005bcc:	455e      	cmp	r6, fp
 8005bce:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005bd2:	f805 8003 	strb.w	r8, [r5, r3]
 8005bd6:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005bda:	d0d7      	beq.n	8005b8c <d_print_mod_list+0xd0>
 8005bdc:	29ff      	cmp	r1, #255	; 0xff
 8005bde:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005be2:	d1f1      	bne.n	8005bc8 <d_print_mod_list+0x10c>
 8005be4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005be8:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005bec:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	4798      	blx	r3
 8005bf4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2300      	movs	r3, #0
 8005c02:	e7e3      	b.n	8005bcc <d_print_mod_list+0x110>
 8005c04:	4770      	bx	lr
 8005c06:	4e47      	ldr	r6, [pc, #284]	; (8005d24 <d_print_mod_list+0x268>)
 8005c08:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c0c:	f106 0a0d 	add.w	sl, r6, #13
 8005c10:	f04f 0b00 	mov.w	fp, #0
 8005c14:	e009      	b.n	8005c2a <d_print_mod_list+0x16e>
 8005c16:	460b      	mov	r3, r1
 8005c18:	3101      	adds	r1, #1
 8005c1a:	45b2      	cmp	sl, r6
 8005c1c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c20:	f805 8003 	strb.w	r8, [r5, r3]
 8005c24:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c28:	d013      	beq.n	8005c52 <d_print_mod_list+0x196>
 8005c2a:	29ff      	cmp	r1, #255	; 0xff
 8005c2c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c30:	d1f1      	bne.n	8005c16 <d_print_mod_list+0x15a>
 8005c32:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c36:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c3a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4798      	blx	r3
 8005c42:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e7e3      	b.n	8005c1a <d_print_mod_list+0x15e>
 8005c52:	68a2      	ldr	r2, [r4, #8]
 8005c54:	4934      	ldr	r1, [pc, #208]	; (8005d28 <d_print_mod_list+0x26c>)
 8005c56:	3201      	adds	r2, #1
 8005c58:	a801      	add	r0, sp, #4
 8005c5a:	f00c f88b 	bl	8011d74 <sprintf>
 8005c5e:	a801      	add	r0, sp, #4
 8005c60:	f000 fe68 	bl	8006934 <strlen>
 8005c64:	b328      	cbz	r0, 8005cb2 <d_print_mod_list+0x1f6>
 8005c66:	ae01      	add	r6, sp, #4
 8005c68:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c6c:	eb06 0a00 	add.w	sl, r6, r0
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	e009      	b.n	8005c8a <d_print_mod_list+0x1ce>
 8005c76:	460b      	mov	r3, r1
 8005c78:	3101      	adds	r1, #1
 8005c7a:	45b2      	cmp	sl, r6
 8005c7c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c80:	f805 8003 	strb.w	r8, [r5, r3]
 8005c84:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c88:	d015      	beq.n	8005cb6 <d_print_mod_list+0x1fa>
 8005c8a:	29ff      	cmp	r1, #255	; 0xff
 8005c8c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c90:	d1f1      	bne.n	8005c76 <d_print_mod_list+0x1ba>
 8005c92:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c96:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c9a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	4798      	blx	r3
 8005ca2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cac:	2101      	movs	r1, #1
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e7e3      	b.n	8005c7a <d_print_mod_list+0x1be>
 8005cb2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005cb6:	4e1d      	ldr	r6, [pc, #116]	; (8005d2c <d_print_mod_list+0x270>)
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	f106 0a03 	add.w	sl, r6, #3
 8005cc0:	e00a      	b.n	8005cd8 <d_print_mod_list+0x21c>
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	45b2      	cmp	sl, r6
 8005cc8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005ccc:	f805 8003 	strb.w	r8, [r5, r3]
 8005cd0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005cd4:	f43f af6f 	beq.w	8005bb6 <d_print_mod_list+0xfa>
 8005cd8:	29ff      	cmp	r1, #255	; 0xff
 8005cda:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005cde:	d1f0      	bne.n	8005cc2 <d_print_mod_list+0x206>
 8005ce0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ce4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005ce8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005cec:	4628      	mov	r0, r5
 8005cee:	4798      	blx	r3
 8005cf0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e7e2      	b.n	8005cc6 <d_print_mod_list+0x20a>
 8005d00:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d04:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d08:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d14:	3301      	adds	r3, #1
 8005d16:	4631      	mov	r1, r6
 8005d18:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	e72f      	b.n	8005b80 <d_print_mod_list+0xc4>
 8005d20:	08016da0 	.word	0x08016da0
 8005d24:	08016da4 	.word	0x08016da4
 8005d28:	08016d50 	.word	0x08016d50
 8005d2c:	08016db4 	.word	0x08016db4

08005d30 <d_print_array_type.isra.10>:
 8005d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4690      	mov	r8, r2
 8005d3a:	b163      	cbz	r3, 8005d56 <d_print_array_type.isra.10+0x26>
 8005d3c:	461e      	mov	r6, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	b393      	cbz	r3, 8005daa <d_print_array_type.isra.10+0x7a>
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1fa      	bne.n	8005d40 <d_print_array_type.isra.10+0x10>
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff feb3 	bl	8005abc <d_print_mod_list>
 8005d56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d5a:	29ff      	cmp	r1, #255	; 0xff
 8005d5c:	f000 808d 	beq.w	8005e7a <d_print_array_type.isra.10+0x14a>
 8005d60:	1c4b      	adds	r3, r1, #1
 8005d62:	2220      	movs	r2, #32
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6a:	5462      	strb	r2, [r4, r1]
 8005d6c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d70:	d068      	beq.n	8005e44 <d_print_array_type.isra.10+0x114>
 8005d72:	225b      	movs	r2, #91	; 0x5b
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d7a:	54e2      	strb	r2, [r4, r3]
 8005d7c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d80:	f8d8 2000 	ldr.w	r2, [r8]
 8005d84:	b12a      	cbz	r2, 8005d92 <d_print_array_type.isra.10+0x62>
 8005d86:	4639      	mov	r1, r7
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff fbb9 	bl	8005500 <d_print_comp>
 8005d8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d92:	29ff      	cmp	r1, #255	; 0xff
 8005d94:	f000 8082 	beq.w	8005e9c <d_print_array_type.isra.10+0x16c>
 8005d98:	1c4a      	adds	r2, r1, #1
 8005d9a:	235d      	movs	r3, #93	; 0x5d
 8005d9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005da0:	5463      	strb	r3, [r4, r1]
 8005da2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	2a2a      	cmp	r2, #42	; 0x2a
 8005db0:	d03f      	beq.n	8005e32 <d_print_array_type.isra.10+0x102>
 8005db2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005ee4 <d_print_array_type.isra.10+0x1b4>
 8005db6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005dba:	461d      	mov	r5, r3
 8005dbc:	f109 0b02 	add.w	fp, r9, #2
 8005dc0:	e00a      	b.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	45cb      	cmp	fp, r9
 8005dc6:	f101 0101 	add.w	r1, r1, #1
 8005dca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dce:	f804 a003 	strb.w	sl, [r4, r3]
 8005dd2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005dd6:	d01a      	beq.n	8005e0e <d_print_array_type.isra.10+0xde>
 8005dd8:	29ff      	cmp	r1, #255	; 0xff
 8005dda:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005dde:	d1f0      	bne.n	8005dc2 <d_print_array_type.isra.10+0x92>
 8005de0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005de4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005de8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dec:	4620      	mov	r0, r4
 8005dee:	4798      	blx	r3
 8005df0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005df4:	3301      	adds	r3, #1
 8005df6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	45cb      	cmp	fp, r9
 8005e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e04:	f804 a003 	strb.w	sl, [r4, r3]
 8005e08:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e0c:	d1e4      	bne.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4632      	mov	r2, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff fe51 	bl	8005abc <d_print_mod_list>
 8005e1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d04d      	beq.n	8005ebe <d_print_array_type.isra.10+0x18e>
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	2229      	movs	r2, #41	; 0x29
 8005e26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e2a:	54e2      	strb	r2, [r4, r3]
 8005e2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005e30:	e793      	b.n	8005d5a <d_print_array_type.isra.10+0x2a>
 8005e32:	4632      	mov	r2, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff fe40 	bl	8005abc <d_print_mod_list>
 8005e3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	d196      	bne.n	8005d72 <d_print_array_type.isra.10+0x42>
 8005e44:	2200      	movs	r2, #0
 8005e46:	4619      	mov	r1, r3
 8005e48:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005e4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e54:	4620      	mov	r0, r4
 8005e56:	4798      	blx	r3
 8005e58:	235b      	movs	r3, #91	; 0x5b
 8005e5a:	7023      	strb	r3, [r4, #0]
 8005e5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005e60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e64:	f8d8 2000 	ldr.w	r2, [r8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d186      	bne.n	8005d86 <d_print_array_type.isra.10+0x56>
 8005e78:	e78e      	b.n	8005d98 <d_print_array_type.isra.10+0x68>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e80:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4798      	blx	r3
 8005e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e90:	3301      	adds	r3, #1
 8005e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e96:	4629      	mov	r1, r5
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e762      	b.n	8005d62 <d_print_array_type.isra.10+0x32>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ea6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4798      	blx	r3
 8005eae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005eba:	2201      	movs	r2, #1
 8005ebc:	e76d      	b.n	8005d9a <d_print_array_type.isra.10+0x6a>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4798      	blx	r3
 8005ed2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005edc:	462b      	mov	r3, r5
 8005ede:	2101      	movs	r1, #1
 8005ee0:	e7a0      	b.n	8005e24 <d_print_array_type.isra.10+0xf4>
 8005ee2:	bf00      	nop
 8005ee4:	08016f98 	.word	0x08016f98

08005ee8 <d_print_function_type.isra.11>:
 8005ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	b083      	sub	sp, #12
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	4617      	mov	r7, r2
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	b34b      	cbz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	bb3b      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005efc:	462a      	mov	r2, r5
 8005efe:	2001      	movs	r0, #1
 8005f00:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 80060cc <d_print_function_type.isra.11+0x1e4>
 8005f04:	e006      	b.n	8005f14 <d_print_function_type.isra.11+0x2c>
 8005f06:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f0a:	d15a      	bne.n	8005fc2 <d_print_function_type.isra.11+0xda>
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	b1ea      	cbz	r2, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f10:	6893      	ldr	r3, [r2, #8]
 8005f12:	b9db      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f14:	6853      	ldr	r3, [r2, #4]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b19      	subs	r3, #25
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b12      	cmp	r3, #18
 8005f1e:	fa00 f103 	lsl.w	r1, r0, r3
 8005f22:	d8f3      	bhi.n	8005f0c <d_print_function_type.isra.11+0x24>
 8005f24:	ea11 0f0e 	tst.w	r1, lr
 8005f28:	d0ed      	beq.n	8005f06 <d_print_function_type.isra.11+0x1e>
 8005f2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d04d      	beq.n	8005fce <d_print_function_type.isra.11+0xe6>
 8005f32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f36:	2bff      	cmp	r3, #255	; 0xff
 8005f38:	f000 80b4 	beq.w	80060a4 <d_print_function_type.isra.11+0x1bc>
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f44:	54e2      	strb	r2, [r4, r3]
 8005f46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f4a:	e042      	b.n	8005fd2 <d_print_function_type.isra.11+0xea>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f56:	4631      	mov	r1, r6
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fdae 	bl	8005abc <d_print_mod_list>
 8005f60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f64:	29ff      	cmp	r1, #255	; 0xff
 8005f66:	d056      	beq.n	8006016 <d_print_function_type.isra.11+0x12e>
 8005f68:	1c4b      	adds	r3, r1, #1
 8005f6a:	2228      	movs	r2, #40	; 0x28
 8005f6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f70:	5462      	strb	r2, [r4, r1]
 8005f72:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	b178      	cbz	r0, 8005f9a <d_print_function_type.isra.11+0xb2>
 8005f7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	4602      	mov	r2, r0
 8005f82:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005f86:	4631      	mov	r1, r6
 8005f88:	4620      	mov	r0, r4
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	f7fc fd14 	bl	80029b8 <d_print_comp_inner>
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f96:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d04d      	beq.n	800603a <d_print_function_type.isra.11+0x152>
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2029      	movs	r0, #41	; 0x29
 8005fa2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	54e0      	strb	r0, [r4, r3]
 8005faa:	462a      	mov	r2, r5
 8005fac:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff fd82 	bl	8005abc <d_print_mod_list>
 8005fb8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8005fbc:	b003      	add	sp, #12
 8005fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005fc6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005fca:	2a28      	cmp	r2, #40	; 0x28
 8005fcc:	d1af      	bne.n	8005f2e <d_print_function_type.isra.11+0x46>
 8005fce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fd2:	29ff      	cmp	r1, #255	; 0xff
 8005fd4:	d054      	beq.n	8006080 <d_print_function_type.isra.11+0x198>
 8005fd6:	1c4a      	adds	r2, r1, #1
 8005fd8:	2328      	movs	r3, #40	; 0x28
 8005fda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fde:	5463      	strb	r3, [r4, r1]
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fe8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fec:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff fd60 	bl	8005abc <d_print_mod_list>
 8005ffc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006000:	2bff      	cmp	r3, #255	; 0xff
 8006002:	d02c      	beq.n	800605e <d_print_function_type.isra.11+0x176>
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	2229      	movs	r2, #41	; 0x29
 8006008:	29ff      	cmp	r1, #255	; 0xff
 800600a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800600e:	54e2      	strb	r2, [r4, r3]
 8006010:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006014:	d1a8      	bne.n	8005f68 <d_print_function_type.isra.11+0x80>
 8006016:	f04f 0900 	mov.w	r9, #0
 800601a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800601e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006026:	4620      	mov	r0, r4
 8006028:	4798      	blx	r3
 800602a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800602e:	3301      	adds	r3, #1
 8006030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006034:	4649      	mov	r1, r9
 8006036:	2301      	movs	r3, #1
 8006038:	e797      	b.n	8005f6a <d_print_function_type.isra.11+0x82>
 800603a:	2700      	movs	r7, #0
 800603c:	4619      	mov	r1, r3
 800603e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006042:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006046:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800604a:	4620      	mov	r0, r4
 800604c:	4798      	blx	r3
 800604e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006058:	463b      	mov	r3, r7
 800605a:	2201      	movs	r2, #1
 800605c:	e7a0      	b.n	8005fa0 <d_print_function_type.isra.11+0xb8>
 800605e:	4619      	mov	r1, r3
 8006060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006064:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006068:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800606c:	4620      	mov	r0, r4
 800606e:	4798      	blx	r3
 8006070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800607a:	464b      	mov	r3, r9
 800607c:	2101      	movs	r1, #1
 800607e:	e7c2      	b.n	8006006 <d_print_function_type.isra.11+0x11e>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800608c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006090:	4620      	mov	r0, r4
 8006092:	4798      	blx	r3
 8006094:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006098:	3301      	adds	r3, #1
 800609a:	4641      	mov	r1, r8
 800609c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a0:	2201      	movs	r2, #1
 80060a2:	e799      	b.n	8005fd8 <d_print_function_type.isra.11+0xf0>
 80060a4:	f04f 0800 	mov.w	r8, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060b6:	4620      	mov	r0, r4
 80060b8:	4798      	blx	r3
 80060ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060c4:	4643      	mov	r3, r8
 80060c6:	2101      	movs	r1, #1
 80060c8:	e739      	b.n	8005f3e <d_print_function_type.isra.11+0x56>
 80060ca:	bf00      	nop
 80060cc:	00043107 	.word	0x00043107

080060d0 <d_print_expr_op>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	7815      	ldrb	r5, [r2, #0]
 80060d6:	2d31      	cmp	r5, #49	; 0x31
 80060d8:	b082      	sub	sp, #8
 80060da:	4613      	mov	r3, r2
 80060dc:	4604      	mov	r4, r0
 80060de:	d00d      	beq.n	80060fc <d_print_expr_op+0x2c>
 80060e0:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 80060e4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80060e8:	e88d 0028 	stmia.w	sp, {r3, r5}
 80060ec:	f7fc fc64 	bl	80029b8 <d_print_comp_inner>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	6853      	ldr	r3, [r2, #4]
 80060fe:	689f      	ldr	r7, [r3, #8]
 8006100:	685d      	ldr	r5, [r3, #4]
 8006102:	2f00      	cmp	r7, #0
 8006104:	d0f7      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800610a:	442f      	add	r7, r5
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	e008      	b.n	8006124 <d_print_expr_op+0x54>
 8006112:	460b      	mov	r3, r1
 8006114:	3101      	adds	r1, #1
 8006116:	42bd      	cmp	r5, r7
 8006118:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800611c:	54e6      	strb	r6, [r4, r3]
 800611e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006122:	d0e8      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006124:	29ff      	cmp	r1, #255	; 0xff
 8006126:	f815 6b01 	ldrb.w	r6, [r5], #1
 800612a:	d1f2      	bne.n	8006112 <d_print_expr_op+0x42>
 800612c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006130:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006138:	4620      	mov	r0, r4
 800613a:	4798      	blx	r3
 800613c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006140:	3301      	adds	r3, #1
 8006142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006146:	2101      	movs	r1, #1
 8006148:	2300      	movs	r3, #0
 800614a:	e7e4      	b.n	8006116 <d_print_expr_op+0x46>

0800614c <d_print_subexpr>:
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	7813      	ldrb	r3, [r2, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	b083      	sub	sp, #12
 8006154:	4615      	mov	r5, r2
 8006156:	460e      	mov	r6, r1
 8006158:	4604      	mov	r4, r0
 800615a:	d929      	bls.n	80061b0 <d_print_subexpr+0x64>
 800615c:	2b30      	cmp	r3, #48	; 0x30
 800615e:	d027      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006160:	2b06      	cmp	r3, #6
 8006162:	d025      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006164:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006168:	29ff      	cmp	r1, #255	; 0xff
 800616a:	d031      	beq.n	80061d0 <d_print_subexpr+0x84>
 800616c:	1c4a      	adds	r2, r1, #1
 800616e:	2328      	movs	r3, #40	; 0x28
 8006170:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006174:	5463      	strb	r3, [r4, r1]
 8006176:	462a      	mov	r2, r5
 8006178:	4631      	mov	r1, r6
 800617a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800617e:	4620      	mov	r0, r4
 8006180:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006184:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	9500      	str	r5, [sp, #0]
 800618c:	f7fc fc14 	bl	80029b8 <d_print_comp_inner>
 8006190:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800619a:	29ff      	cmp	r1, #255	; 0xff
 800619c:	d028      	beq.n	80061f0 <d_print_subexpr+0xa4>
 800619e:	1c4a      	adds	r2, r1, #1
 80061a0:	2329      	movs	r3, #41	; 0x29
 80061a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061a6:	5463      	strb	r3, [r4, r1]
 80061a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061ac:	b003      	add	sp, #12
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80061b4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80061b8:	4631      	mov	r1, r6
 80061ba:	462a      	mov	r2, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9500      	str	r5, [sp, #0]
 80061c2:	f7fc fbf9 	bl	80029b8 <d_print_comp_inner>
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	2700      	movs	r7, #0
 80061d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061da:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80061de:	4798      	blx	r3
 80061e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061e4:	3301      	adds	r3, #1
 80061e6:	4639      	mov	r1, r7
 80061e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7be      	b.n	800616e <d_print_subexpr+0x22>
 80061f0:	2500      	movs	r5, #0
 80061f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061fa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80061fe:	4620      	mov	r0, r4
 8006200:	4798      	blx	r3
 8006202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006206:	3301      	adds	r3, #1
 8006208:	4629      	mov	r1, r5
 800620a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800620e:	2201      	movs	r2, #1
 8006210:	e7c6      	b.n	80061a0 <d_print_subexpr+0x54>
 8006212:	bf00      	nop

08006214 <d_maybe_print_fold_expression.isra.15>:
 8006214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	7815      	ldrb	r5, [r2, #0]
 800621e:	2d66      	cmp	r5, #102	; 0x66
 8006220:	d002      	beq.n	8006228 <d_maybe_print_fold_expression.isra.15+0x14>
 8006222:	2000      	movs	r0, #0
 8006224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800622e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006232:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006236:	f899 3000 	ldrb.w	r3, [r9]
 800623a:	2b3b      	cmp	r3, #59	; 0x3b
 800623c:	f04f 33ff 	mov.w	r3, #4294967295
 8006240:	bf04      	itt	eq
 8006242:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 8006246:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 800624a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800624e:	7853      	ldrb	r3, [r2, #1]
 8006250:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8006254:	bf18      	it	ne
 8006256:	2500      	movne	r5, #0
 8006258:	460e      	mov	r6, r1
 800625a:	4604      	mov	r4, r0
 800625c:	2b26      	cmp	r3, #38	; 0x26
 800625e:	d82b      	bhi.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006260:	e8df f003 	tbb	[pc, r3]
 8006264:	2a2a2a90 	.word	0x2a2a2a90
 8006268:	2a902a2a 	.word	0x2a902a2a
 800626c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006270:	2a2a2a2a 	.word	0x2a2a2a2a
 8006274:	2a2a2a2a 	.word	0x2a2a2a2a
 8006278:	2a2a2a2a 	.word	0x2a2a2a2a
 800627c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006280:	2a2a2a2a 	.word	0x2a2a2a2a
 8006284:	2a2a2a6a 	.word	0x2a2a2a6a
 8006288:	2a2a      	.short	0x2a2a
 800628a:	2f          	.byte	0x2f
 800628b:	00          	.byte	0x00
 800628c:	4642      	mov	r2, r8
 800628e:	4631      	mov	r1, r6
 8006290:	4620      	mov	r0, r4
 8006292:	f7ff ff1d 	bl	80060d0 <d_print_expr_op>
 8006296:	464a      	mov	r2, r9
 8006298:	4631      	mov	r1, r6
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff ff56 	bl	800614c <d_print_subexpr>
 80062a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062a4:	29ff      	cmp	r1, #255	; 0xff
 80062a6:	f000 80b2 	beq.w	800640e <d_maybe_print_fold_expression.isra.15+0x1fa>
 80062aa:	1c4a      	adds	r2, r1, #1
 80062ac:	2329      	movs	r3, #41	; 0x29
 80062ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062b2:	5463      	strb	r3, [r4, r1]
 80062b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062b8:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 80062bc:	2001      	movs	r0, #1
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80062c6:	29ff      	cmp	r1, #255	; 0xff
 80062c8:	f000 80c5 	beq.w	8006456 <d_maybe_print_fold_expression.isra.15+0x242>
 80062cc:	1c4a      	adds	r2, r1, #1
 80062ce:	2328      	movs	r3, #40	; 0x28
 80062d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062d4:	4620      	mov	r0, r4
 80062d6:	5463      	strb	r3, [r4, r1]
 80062d8:	464a      	mov	r2, r9
 80062da:	4631      	mov	r1, r6
 80062dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062e0:	4d65      	ldr	r5, [pc, #404]	; (8006478 <d_maybe_print_fold_expression.isra.15+0x264>)
 80062e2:	f7ff ff33 	bl	800614c <d_print_subexpr>
 80062e6:	4642      	mov	r2, r8
 80062e8:	4631      	mov	r1, r6
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fef0 	bl	80060d0 <d_print_expr_op>
 80062f0:	f105 0904 	add.w	r9, r5, #4
 80062f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062f8:	f04f 0800 	mov.w	r8, #0
 80062fc:	e008      	b.n	8006310 <d_maybe_print_fold_expression.isra.15+0xfc>
 80062fe:	460b      	mov	r3, r1
 8006300:	3101      	adds	r1, #1
 8006302:	45a9      	cmp	r9, r5
 8006304:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006308:	54e6      	strb	r6, [r4, r3]
 800630a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800630e:	d0d3      	beq.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006310:	29ff      	cmp	r1, #255	; 0xff
 8006312:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006316:	d1f2      	bne.n	80062fe <d_maybe_print_fold_expression.isra.15+0xea>
 8006318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800631c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006324:	4620      	mov	r0, r4
 8006326:	4798      	blx	r3
 8006328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800632c:	3301      	adds	r3, #1
 800632e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006332:	2101      	movs	r1, #1
 8006334:	2300      	movs	r3, #0
 8006336:	e7e4      	b.n	8006302 <d_maybe_print_fold_expression.isra.15+0xee>
 8006338:	4d50      	ldr	r5, [pc, #320]	; (800647c <d_maybe_print_fold_expression.isra.15+0x268>)
 800633a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800633e:	f105 0b04 	add.w	fp, r5, #4
 8006342:	e009      	b.n	8006358 <d_maybe_print_fold_expression.isra.15+0x144>
 8006344:	460b      	mov	r3, r1
 8006346:	3101      	adds	r1, #1
 8006348:	455d      	cmp	r5, fp
 800634a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800634e:	f804 a003 	strb.w	sl, [r4, r3]
 8006352:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006356:	d099      	beq.n	800628c <d_maybe_print_fold_expression.isra.15+0x78>
 8006358:	29ff      	cmp	r1, #255	; 0xff
 800635a:	f815 ab01 	ldrb.w	sl, [r5], #1
 800635e:	d1f1      	bne.n	8006344 <d_maybe_print_fold_expression.isra.15+0x130>
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800636c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006370:	4620      	mov	r0, r4
 8006372:	4798      	blx	r3
 8006374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006378:	3301      	adds	r3, #1
 800637a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800637e:	2101      	movs	r1, #1
 8006380:	2300      	movs	r3, #0
 8006382:	e7e1      	b.n	8006348 <d_maybe_print_fold_expression.isra.15+0x134>
 8006384:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006388:	2bff      	cmp	r3, #255	; 0xff
 800638a:	d051      	beq.n	8006430 <d_maybe_print_fold_expression.isra.15+0x21c>
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8006392:	464a      	mov	r2, r9
 8006394:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006398:	4620      	mov	r0, r4
 800639a:	f804 e003 	strb.w	lr, [r4, r3]
 800639e:	4631      	mov	r1, r6
 80063a0:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 80063a4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006480 <d_maybe_print_fold_expression.isra.15+0x26c>
 80063a8:	f7ff fed0 	bl	800614c <d_print_subexpr>
 80063ac:	4631      	mov	r1, r6
 80063ae:	4642      	mov	r2, r8
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fe8d 	bl	80060d0 <d_print_expr_op>
 80063b6:	f109 0b03 	add.w	fp, r9, #3
 80063ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063be:	e009      	b.n	80063d4 <d_maybe_print_fold_expression.isra.15+0x1c0>
 80063c0:	460b      	mov	r3, r1
 80063c2:	3101      	adds	r1, #1
 80063c4:	45cb      	cmp	fp, r9
 80063c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063ca:	f804 a003 	strb.w	sl, [r4, r3]
 80063ce:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80063d2:	d015      	beq.n	8006400 <d_maybe_print_fold_expression.isra.15+0x1ec>
 80063d4:	29ff      	cmp	r1, #255	; 0xff
 80063d6:	f819 ab01 	ldrb.w	sl, [r9], #1
 80063da:	d1f1      	bne.n	80063c0 <d_maybe_print_fold_expression.isra.15+0x1ac>
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063ec:	4620      	mov	r0, r4
 80063ee:	4798      	blx	r3
 80063f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063fa:	2101      	movs	r1, #1
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7e1      	b.n	80063c4 <d_maybe_print_fold_expression.isra.15+0x1b0>
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff fe63 	bl	80060d0 <d_print_expr_op>
 800640a:	462a      	mov	r2, r5
 800640c:	e744      	b.n	8006298 <d_maybe_print_fold_expression.isra.15+0x84>
 800640e:	2500      	movs	r5, #0
 8006410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006418:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
 8006420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006424:	3301      	adds	r3, #1
 8006426:	4629      	mov	r1, r5
 8006428:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800642c:	2201      	movs	r2, #1
 800642e:	e73d      	b.n	80062ac <d_maybe_print_fold_expression.isra.15+0x98>
 8006430:	f04f 0a00 	mov.w	sl, #0
 8006434:	4619      	mov	r1, r3
 8006436:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800643a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800643e:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 8006442:	4798      	blx	r3
 8006444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006448:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006452:	4653      	mov	r3, sl
 8006454:	e79a      	b.n	800638c <d_maybe_print_fold_expression.isra.15+0x178>
 8006456:	2500      	movs	r5, #0
 8006458:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800645c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006460:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8006464:	4798      	blx	r3
 8006466:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800646a:	3301      	adds	r3, #1
 800646c:	4629      	mov	r1, r5
 800646e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006472:	2201      	movs	r2, #1
 8006474:	e72b      	b.n	80062ce <d_maybe_print_fold_expression.isra.15+0xba>
 8006476:	bf00      	nop
 8006478:	08017088 	.word	0x08017088
 800647c:	08017080 	.word	0x08017080
 8006480:	08016f9c 	.word	0x08016f9c

08006484 <d_demangle_callback.constprop.17>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	b0e7      	sub	sp, #412	; 0x19c
 800648a:	f890 9000 	ldrb.w	r9, [r0]
 800648e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006492:	af00      	add	r7, sp, #0
 8006494:	4605      	mov	r5, r0
 8006496:	4688      	mov	r8, r1
 8006498:	4616      	mov	r6, r2
 800649a:	f000 80f1 	beq.w	8006680 <d_demangle_callback.constprop.17+0x1fc>
 800649e:	2208      	movs	r2, #8
 80064a0:	49bd      	ldr	r1, [pc, #756]	; (8006798 <d_demangle_callback.constprop.17+0x314>)
 80064a2:	4628      	mov	r0, r5
 80064a4:	f00b febe 	bl	8012224 <strncmp>
 80064a8:	b948      	cbnz	r0, 80064be <d_demangle_callback.constprop.17+0x3a>
 80064aa:	7a2b      	ldrb	r3, [r5, #8]
 80064ac:	2b2e      	cmp	r3, #46	; 0x2e
 80064ae:	f000 80d6 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b2:	2b5f      	cmp	r3, #95	; 0x5f
 80064b4:	f000 80d3 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b8:	2b24      	cmp	r3, #36	; 0x24
 80064ba:	f000 80d0 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 fa36 	bl	8006934 <strlen>
 80064c8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80064cc:	0083      	lsls	r3, r0, #2
 80064ce:	eb03 020b 	add.w	r2, r3, fp
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	3208      	adds	r2, #8
 80064d6:	330a      	adds	r3, #10
 80064d8:	ebad 0d02 	sub.w	sp, sp, r2
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	2400      	movs	r4, #0
 80064e2:	466a      	mov	r2, sp
 80064e4:	1829      	adds	r1, r5, r0
 80064e6:	ebad 0d03 	sub.w	sp, sp, r3
 80064ea:	f1ba 0f01 	cmp.w	sl, #1
 80064ee:	f04f 0311 	mov.w	r3, #17
 80064f2:	627a      	str	r2, [r7, #36]	; 0x24
 80064f4:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 80064f8:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80064fc:	617d      	str	r5, [r7, #20]
 80064fe:	623d      	str	r5, [r7, #32]
 8006500:	63b8      	str	r0, [r7, #56]	; 0x38
 8006502:	61b9      	str	r1, [r7, #24]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	62bc      	str	r4, [r7, #40]	; 0x28
 8006508:	637c      	str	r4, [r7, #52]	; 0x34
 800650a:	63fc      	str	r4, [r7, #60]	; 0x3c
 800650c:	643c      	str	r4, [r7, #64]	; 0x40
 800650e:	647c      	str	r4, [r7, #68]	; 0x44
 8006510:	64bc      	str	r4, [r7, #72]	; 0x48
 8006512:	64fc      	str	r4, [r7, #76]	; 0x4c
 8006514:	f000 80bb 	beq.w	800668e <d_demangle_callback.constprop.17+0x20a>
 8006518:	f0c0 80cf 	bcc.w	80066ba <d_demangle_callback.constprop.17+0x236>
 800651c:	7aeb      	ldrb	r3, [r5, #11]
 800651e:	f1ba 0f02 	cmp.w	sl, #2
 8006522:	bf18      	it	ne
 8006524:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006528:	f105 0a0b 	add.w	sl, r5, #11
 800652c:	bf08      	it	eq
 800652e:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006532:	2b5f      	cmp	r3, #95	; 0x5f
 8006534:	f8c7 a020 	str.w	sl, [r7, #32]
 8006538:	f000 80b2 	beq.w	80066a0 <d_demangle_callback.constprop.17+0x21c>
 800653c:	4650      	mov	r0, sl
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	f000 f9f8 	bl	8006934 <strlen>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f340 80bf 	ble.w	80066cc <d_demangle_callback.constprop.17+0x248>
 800654e:	2301      	movs	r3, #1
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
 8006552:	2800      	cmp	r0, #0
 8006554:	f000 80ba 	beq.w	80066cc <d_demangle_callback.constprop.17+0x248>
 8006558:	2300      	movs	r3, #0
 800655a:	f8c2 a004 	str.w	sl, [r2, #4]
 800655e:	6090      	str	r0, [r2, #8]
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	4649      	mov	r1, r9
 8006564:	2300      	movs	r3, #0
 8006566:	f107 0014 	add.w	r0, r7, #20
 800656a:	f7f9 fe31 	bl	80001d0 <d_make_comp>
 800656e:	6a3c      	ldr	r4, [r7, #32]
 8006570:	4605      	mov	r5, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f9de 	bl	8006934 <strlen>
 8006578:	1823      	adds	r3, r4, r0
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	f814 9000 	ldrb.w	r9, [r4, r0]
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	f040 8086 	bne.w	8006694 <d_demangle_callback.constprop.17+0x210>
 8006588:	2d00      	cmp	r5, #0
 800658a:	f000 8083 	beq.w	8006694 <d_demangle_callback.constprop.17+0x210>
 800658e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006592:	462a      	mov	r2, r5
 8006594:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006598:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800659c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80065a0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80065a4:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80065a8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80065ac:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80065b0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80065b4:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80065b8:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80065bc:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80065c0:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80065c4:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80065c8:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80065cc:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 80065d0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 80065d4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 80065d8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 80065dc:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 80065e0:	f7f9 fec4 	bl	800036c <d_count_templates_scopes>
 80065e4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80065e8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 80065ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	00d0      	lsls	r0, r2, #3
 80065f4:	fb01 f102 	mul.w	r1, r1, r2
 80065f8:	3008      	adds	r0, #8
 80065fa:	46e8      	mov	r8, sp
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	ebad 0d00 	sub.w	sp, sp, r0
 8006602:	4668      	mov	r0, sp
 8006604:	3208      	adds	r2, #8
 8006606:	ebad 0d02 	sub.w	sp, sp, r2
 800660a:	f107 060c 	add.w	r6, r7, #12
 800660e:	462a      	mov	r2, r5
 8006610:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8006614:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006618:	4620      	mov	r0, r4
 800661a:	2111      	movs	r1, #17
 800661c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006620:	60fd      	str	r5, [r7, #12]
 8006622:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006626:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800662a:	f7fc f9c5 	bl	80029b8 <d_print_comp_inner>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006634:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006638:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663c:	f804 9001 	strb.w	r9, [r4, r1]
 8006640:	4620      	mov	r0, r4
 8006642:	46c5      	mov	sp, r8
 8006644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006648:	4798      	blx	r3
 800664a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800664e:	fab0 f080 	clz	r0, r0
 8006652:	0940      	lsrs	r0, r0, #5
 8006654:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8006658:	46bd      	mov	sp, r7
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	7a6b      	ldrb	r3, [r5, #9]
 8006660:	2b44      	cmp	r3, #68	; 0x44
 8006662:	d002      	beq.n	800666a <d_demangle_callback.constprop.17+0x1e6>
 8006664:	2b49      	cmp	r3, #73	; 0x49
 8006666:	f47f af2a 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 800666a:	7aaa      	ldrb	r2, [r5, #10]
 800666c:	2a5f      	cmp	r2, #95	; 0x5f
 800666e:	f47f af26 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 8006672:	2b49      	cmp	r3, #73	; 0x49
 8006674:	bf14      	ite	ne
 8006676:	f04f 0a03 	movne.w	sl, #3
 800667a:	f04f 0a02 	moveq.w	sl, #2
 800667e:	e720      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 8006680:	7843      	ldrb	r3, [r0, #1]
 8006682:	2b5a      	cmp	r3, #90	; 0x5a
 8006684:	f47f af0b 	bne.w	800649e <d_demangle_callback.constprop.17+0x1a>
 8006688:	f04f 0a01 	mov.w	sl, #1
 800668c:	e719      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 800668e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006692:	d01d      	beq.n	80066d0 <d_demangle_callback.constprop.17+0x24c>
 8006694:	2000      	movs	r0, #0
 8006696:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	7b2b      	ldrb	r3, [r5, #12]
 80066a2:	2b5a      	cmp	r3, #90	; 0x5a
 80066a4:	f47f af4a 	bne.w	800653c <d_demangle_callback.constprop.17+0xb8>
 80066a8:	350d      	adds	r5, #13
 80066aa:	4621      	mov	r1, r4
 80066ac:	f107 0014 	add.w	r0, r7, #20
 80066b0:	623d      	str	r5, [r7, #32]
 80066b2:	f7fb fe35 	bl	8002320 <d_encoding>
 80066b6:	4602      	mov	r2, r0
 80066b8:	e753      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066ba:	f107 0014 	add.w	r0, r7, #20
 80066be:	f7fb f817 	bl	80016f0 <d_type>
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	4605      	mov	r5, r0
 80066c6:	f893 9000 	ldrb.w	r9, [r3]
 80066ca:	e759      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066cc:	2200      	movs	r2, #0
 80066ce:	e748      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066d0:	786b      	ldrb	r3, [r5, #1]
 80066d2:	2b5a      	cmp	r3, #90	; 0x5a
 80066d4:	d1de      	bne.n	8006694 <d_demangle_callback.constprop.17+0x210>
 80066d6:	3502      	adds	r5, #2
 80066d8:	4651      	mov	r1, sl
 80066da:	f107 0014 	add.w	r0, r7, #20
 80066de:	623d      	str	r5, [r7, #32]
 80066e0:	f7fb fe1e 	bl	8002320 <d_encoding>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	4605      	mov	r5, r0
 80066ea:	d551      	bpl.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 80066ec:	6a38      	ldr	r0, [r7, #32]
 80066ee:	f890 9000 	ldrb.w	r9, [r0]
 80066f2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80066f6:	f47f af43 	bne.w	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066fa:	7843      	ldrb	r3, [r0, #1]
 80066fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006700:	2a19      	cmp	r2, #25
 8006702:	d939      	bls.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006704:	2b5f      	cmp	r3, #95	; 0x5f
 8006706:	d037      	beq.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006708:	3b30      	subs	r3, #48	; 0x30
 800670a:	2b09      	cmp	r3, #9
 800670c:	d840      	bhi.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 800670e:	7803      	ldrb	r3, [r0, #0]
 8006710:	4602      	mov	r2, r0
 8006712:	2b2e      	cmp	r3, #46	; 0x2e
 8006714:	d112      	bne.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 8006716:	7853      	ldrb	r3, [r2, #1]
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d80e      	bhi.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 800671e:	7893      	ldrb	r3, [r2, #2]
 8006720:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006724:	2909      	cmp	r1, #9
 8006726:	f102 0202 	add.w	r2, r2, #2
 800672a:	d8f2      	bhi.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 800672c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006730:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006734:	2909      	cmp	r1, #9
 8006736:	d9f9      	bls.n	800672c <d_demangle_callback.constprop.17+0x2a8>
 8006738:	2b2e      	cmp	r3, #46	; 0x2e
 800673a:	d0ec      	beq.n	8006716 <d_demangle_callback.constprop.17+0x292>
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	4299      	cmp	r1, r3
 8006744:	da16      	bge.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006746:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 800674a:	1c4b      	adds	r3, r1, #1
 800674c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 8006756:	d00d      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006758:	1a12      	subs	r2, r2, r0
 800675a:	d00b      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 800675c:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 8006760:	6058      	str	r0, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	462a      	mov	r2, r5
 8006766:	214d      	movs	r1, #77	; 0x4d
 8006768:	f107 0014 	add.w	r0, r7, #20
 800676c:	f7f9 fd30 	bl	80001d0 <d_make_comp>
 8006770:	4605      	mov	r5, r0
 8006772:	e7bb      	b.n	80066ec <d_demangle_callback.constprop.17+0x268>
 8006774:	2300      	movs	r3, #0
 8006776:	e7f5      	b.n	8006764 <d_demangle_callback.constprop.17+0x2e0>
 8006778:	1c81      	adds	r1, r0, #2
 800677a:	460a      	mov	r2, r1
 800677c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006780:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 8006784:	f1be 0f19 	cmp.w	lr, #25
 8006788:	d9f7      	bls.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678a:	2b5f      	cmp	r3, #95	; 0x5f
 800678c:	d0f5      	beq.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678e:	e7c0      	b.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f893 9000 	ldrb.w	r9, [r3]
 8006796:	e6f3      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 8006798:	08016d2c 	.word	0x08016d2c

0800679c <__cxa_demangle>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	b378      	cbz	r0, 8006804 <__cxa_demangle+0x68>
 80067a4:	b101      	cbz	r1, 80067a8 <__cxa_demangle+0xc>
 80067a6:	b36a      	cbz	r2, 8006804 <__cxa_demangle+0x68>
 80067a8:	2400      	movs	r4, #0
 80067aa:	4616      	mov	r6, r2
 80067ac:	460d      	mov	r5, r1
 80067ae:	466a      	mov	r2, sp
 80067b0:	4927      	ldr	r1, [pc, #156]	; (8006850 <__cxa_demangle+0xb4>)
 80067b2:	9400      	str	r4, [sp, #0]
 80067b4:	461f      	mov	r7, r3
 80067b6:	9401      	str	r4, [sp, #4]
 80067b8:	9402      	str	r4, [sp, #8]
 80067ba:	9403      	str	r4, [sp, #12]
 80067bc:	f7ff fe62 	bl	8006484 <d_demangle_callback.constprop.17>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d03f      	beq.n	8006844 <__cxa_demangle+0xa8>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	b1d3      	cbz	r3, 80067fe <__cxa_demangle+0x62>
 80067c8:	f04f 0801 	mov.w	r8, #1
 80067cc:	9c00      	ldr	r4, [sp, #0]
 80067ce:	b35c      	cbz	r4, 8006828 <__cxa_demangle+0x8c>
 80067d0:	b33d      	cbz	r5, 8006822 <__cxa_demangle+0x86>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 f8ae 	bl	8006934 <strlen>
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	4298      	cmp	r0, r3
 80067dc:	d21b      	bcs.n	8006816 <__cxa_demangle+0x7a>
 80067de:	1c42      	adds	r2, r0, #1
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f00a ffd5 	bl	8011792 <memcpy>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f00a fd9b 	bl	8011324 <free>
 80067ee:	462c      	mov	r4, r5
 80067f0:	b10f      	cbz	r7, 80067f6 <__cxa_demangle+0x5a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006802:	e7e3      	b.n	80067cc <__cxa_demangle+0x30>
 8006804:	b113      	cbz	r3, 800680c <__cxa_demangle+0x70>
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	2400      	movs	r4, #0
 800680e:	4620      	mov	r0, r4
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	4628      	mov	r0, r5
 8006818:	f00a fd84 	bl	8011324 <free>
 800681c:	f8c6 8000 	str.w	r8, [r6]
 8006820:	e7e6      	b.n	80067f0 <__cxa_demangle+0x54>
 8006822:	2e00      	cmp	r6, #0
 8006824:	d1fa      	bne.n	800681c <__cxa_demangle+0x80>
 8006826:	e7e3      	b.n	80067f0 <__cxa_demangle+0x54>
 8006828:	2f00      	cmp	r7, #0
 800682a:	d0ef      	beq.n	800680c <__cxa_demangle+0x70>
 800682c:	f1b8 0f01 	cmp.w	r8, #1
 8006830:	d004      	beq.n	800683c <__cxa_demangle+0xa0>
 8006832:	f06f 0301 	mvn.w	r3, #1
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	2400      	movs	r4, #0
 800683a:	e7dc      	b.n	80067f6 <__cxa_demangle+0x5a>
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	e7d8      	b.n	80067f6 <__cxa_demangle+0x5a>
 8006844:	9800      	ldr	r0, [sp, #0]
 8006846:	f00a fd6d 	bl	8011324 <free>
 800684a:	2f00      	cmp	r7, #0
 800684c:	d1f1      	bne.n	8006832 <__cxa_demangle+0x96>
 800684e:	e7dd      	b.n	800680c <__cxa_demangle+0x70>
 8006850:	080008f5 	.word	0x080008f5

08006854 <__gcclibcxx_demangle_callback>:
 8006854:	b160      	cbz	r0, 8006870 <__gcclibcxx_demangle_callback+0x1c>
 8006856:	b508      	push	{r3, lr}
 8006858:	b139      	cbz	r1, 800686a <__gcclibcxx_demangle_callback+0x16>
 800685a:	f7ff fe13 	bl	8006484 <d_demangle_callback.constprop.17>
 800685e:	2800      	cmp	r0, #0
 8006860:	bf0c      	ite	eq
 8006862:	f06f 0001 	mvneq.w	r0, #1
 8006866:	2000      	movne	r0, #0
 8006868:	bd08      	pop	{r3, pc}
 800686a:	f06f 0002 	mvn.w	r0, #2
 800686e:	bd08      	pop	{r3, pc}
 8006870:	f06f 0002 	mvn.w	r0, #2
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
	...

08006880 <memchr>:
 8006880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006884:	2a10      	cmp	r2, #16
 8006886:	db2b      	blt.n	80068e0 <memchr+0x60>
 8006888:	f010 0f07 	tst.w	r0, #7
 800688c:	d008      	beq.n	80068a0 <memchr+0x20>
 800688e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006892:	3a01      	subs	r2, #1
 8006894:	428b      	cmp	r3, r1
 8006896:	d02d      	beq.n	80068f4 <memchr+0x74>
 8006898:	f010 0f07 	tst.w	r0, #7
 800689c:	b342      	cbz	r2, 80068f0 <memchr+0x70>
 800689e:	d1f6      	bne.n	800688e <memchr+0xe>
 80068a0:	b4f0      	push	{r4, r5, r6, r7}
 80068a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80068a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80068aa:	f022 0407 	bic.w	r4, r2, #7
 80068ae:	f07f 0700 	mvns.w	r7, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80068b8:	3c08      	subs	r4, #8
 80068ba:	ea85 0501 	eor.w	r5, r5, r1
 80068be:	ea86 0601 	eor.w	r6, r6, r1
 80068c2:	fa85 f547 	uadd8	r5, r5, r7
 80068c6:	faa3 f587 	sel	r5, r3, r7
 80068ca:	fa86 f647 	uadd8	r6, r6, r7
 80068ce:	faa5 f687 	sel	r6, r5, r7
 80068d2:	b98e      	cbnz	r6, 80068f8 <memchr+0x78>
 80068d4:	d1ee      	bne.n	80068b4 <memchr+0x34>
 80068d6:	bcf0      	pop	{r4, r5, r6, r7}
 80068d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80068dc:	f002 0207 	and.w	r2, r2, #7
 80068e0:	b132      	cbz	r2, 80068f0 <memchr+0x70>
 80068e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068e6:	3a01      	subs	r2, #1
 80068e8:	ea83 0301 	eor.w	r3, r3, r1
 80068ec:	b113      	cbz	r3, 80068f4 <memchr+0x74>
 80068ee:	d1f8      	bne.n	80068e2 <memchr+0x62>
 80068f0:	2000      	movs	r0, #0
 80068f2:	4770      	bx	lr
 80068f4:	3801      	subs	r0, #1
 80068f6:	4770      	bx	lr
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	bf06      	itte	eq
 80068fc:	4635      	moveq	r5, r6
 80068fe:	3803      	subeq	r0, #3
 8006900:	3807      	subne	r0, #7
 8006902:	f015 0f01 	tst.w	r5, #1
 8006906:	d107      	bne.n	8006918 <memchr+0x98>
 8006908:	3001      	adds	r0, #1
 800690a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800690e:	bf02      	ittt	eq
 8006910:	3001      	addeq	r0, #1
 8006912:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006916:	3001      	addeq	r0, #1
 8006918:	bcf0      	pop	{r4, r5, r6, r7}
 800691a:	3801      	subs	r0, #1
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <strcmp>:
 8006920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006928:	2a01      	cmp	r2, #1
 800692a:	bf28      	it	cs
 800692c:	429a      	cmpcs	r2, r3
 800692e:	d0f7      	beq.n	8006920 <strcmp>
 8006930:	1ad0      	subs	r0, r2, r3
 8006932:	4770      	bx	lr

08006934 <strlen>:
 8006934:	4603      	mov	r3, r0
 8006936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693a:	2a00      	cmp	r2, #0
 800693c:	d1fb      	bne.n	8006936 <strlen+0x2>
 800693e:	1a18      	subs	r0, r3, r0
 8006940:	3801      	subs	r0, #1
 8006942:	4770      	bx	lr

08006944 <__aeabi_drsub>:
 8006944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006948:	e002      	b.n	8006950 <__adddf3>
 800694a:	bf00      	nop

0800694c <__aeabi_dsub>:
 800694c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006950 <__adddf3>:
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006956:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800695a:	ea94 0f05 	teq	r4, r5
 800695e:	bf08      	it	eq
 8006960:	ea90 0f02 	teqeq	r0, r2
 8006964:	bf1f      	itttt	ne
 8006966:	ea54 0c00 	orrsne.w	ip, r4, r0
 800696a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800696e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006972:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006976:	f000 80e2 	beq.w	8006b3e <__adddf3+0x1ee>
 800697a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800697e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006982:	bfb8      	it	lt
 8006984:	426d      	neglt	r5, r5
 8006986:	dd0c      	ble.n	80069a2 <__adddf3+0x52>
 8006988:	442c      	add	r4, r5
 800698a:	ea80 0202 	eor.w	r2, r0, r2
 800698e:	ea81 0303 	eor.w	r3, r1, r3
 8006992:	ea82 0000 	eor.w	r0, r2, r0
 8006996:	ea83 0101 	eor.w	r1, r3, r1
 800699a:	ea80 0202 	eor.w	r2, r0, r2
 800699e:	ea81 0303 	eor.w	r3, r1, r3
 80069a2:	2d36      	cmp	r5, #54	; 0x36
 80069a4:	bf88      	it	hi
 80069a6:	bd30      	pophi	{r4, r5, pc}
 80069a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80069ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80069b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80069b8:	d002      	beq.n	80069c0 <__adddf3+0x70>
 80069ba:	4240      	negs	r0, r0
 80069bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80069c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80069cc:	d002      	beq.n	80069d4 <__adddf3+0x84>
 80069ce:	4252      	negs	r2, r2
 80069d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80069d4:	ea94 0f05 	teq	r4, r5
 80069d8:	f000 80a7 	beq.w	8006b2a <__adddf3+0x1da>
 80069dc:	f1a4 0401 	sub.w	r4, r4, #1
 80069e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80069e4:	db0d      	blt.n	8006a02 <__adddf3+0xb2>
 80069e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80069ea:	fa22 f205 	lsr.w	r2, r2, r5
 80069ee:	1880      	adds	r0, r0, r2
 80069f0:	f141 0100 	adc.w	r1, r1, #0
 80069f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80069f8:	1880      	adds	r0, r0, r2
 80069fa:	fa43 f305 	asr.w	r3, r3, r5
 80069fe:	4159      	adcs	r1, r3
 8006a00:	e00e      	b.n	8006a20 <__adddf3+0xd0>
 8006a02:	f1a5 0520 	sub.w	r5, r5, #32
 8006a06:	f10e 0e20 	add.w	lr, lr, #32
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006a10:	bf28      	it	cs
 8006a12:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006a16:	fa43 f305 	asr.w	r3, r3, r5
 8006a1a:	18c0      	adds	r0, r0, r3
 8006a1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006a24:	d507      	bpl.n	8006a36 <__adddf3+0xe6>
 8006a26:	f04f 0e00 	mov.w	lr, #0
 8006a2a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006a2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006a32:	eb6e 0101 	sbc.w	r1, lr, r1
 8006a36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a3a:	d31b      	bcc.n	8006a74 <__adddf3+0x124>
 8006a3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006a40:	d30c      	bcc.n	8006a5c <__adddf3+0x10c>
 8006a42:	0849      	lsrs	r1, r1, #1
 8006a44:	ea5f 0030 	movs.w	r0, r0, rrx
 8006a48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006a4c:	f104 0401 	add.w	r4, r4, #1
 8006a50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006a54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006a58:	f080 809a 	bcs.w	8006b90 <__adddf3+0x240>
 8006a5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006a60:	bf08      	it	eq
 8006a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a66:	f150 0000 	adcs.w	r0, r0, #0
 8006a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a6e:	ea41 0105 	orr.w	r1, r1, r5
 8006a72:	bd30      	pop	{r4, r5, pc}
 8006a74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a78:	4140      	adcs	r0, r0
 8006a7a:	eb41 0101 	adc.w	r1, r1, r1
 8006a7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a82:	f1a4 0401 	sub.w	r4, r4, #1
 8006a86:	d1e9      	bne.n	8006a5c <__adddf3+0x10c>
 8006a88:	f091 0f00 	teq	r1, #0
 8006a8c:	bf04      	itt	eq
 8006a8e:	4601      	moveq	r1, r0
 8006a90:	2000      	moveq	r0, #0
 8006a92:	fab1 f381 	clz	r3, r1
 8006a96:	bf08      	it	eq
 8006a98:	3320      	addeq	r3, #32
 8006a9a:	f1a3 030b 	sub.w	r3, r3, #11
 8006a9e:	f1b3 0220 	subs.w	r2, r3, #32
 8006aa2:	da0c      	bge.n	8006abe <__adddf3+0x16e>
 8006aa4:	320c      	adds	r2, #12
 8006aa6:	dd08      	ble.n	8006aba <__adddf3+0x16a>
 8006aa8:	f102 0c14 	add.w	ip, r2, #20
 8006aac:	f1c2 020c 	rsb	r2, r2, #12
 8006ab0:	fa01 f00c 	lsl.w	r0, r1, ip
 8006ab4:	fa21 f102 	lsr.w	r1, r1, r2
 8006ab8:	e00c      	b.n	8006ad4 <__adddf3+0x184>
 8006aba:	f102 0214 	add.w	r2, r2, #20
 8006abe:	bfd8      	it	le
 8006ac0:	f1c2 0c20 	rsble	ip, r2, #32
 8006ac4:	fa01 f102 	lsl.w	r1, r1, r2
 8006ac8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006acc:	bfdc      	itt	le
 8006ace:	ea41 010c 	orrle.w	r1, r1, ip
 8006ad2:	4090      	lslle	r0, r2
 8006ad4:	1ae4      	subs	r4, r4, r3
 8006ad6:	bfa2      	ittt	ge
 8006ad8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006adc:	4329      	orrge	r1, r5
 8006ade:	bd30      	popge	{r4, r5, pc}
 8006ae0:	ea6f 0404 	mvn.w	r4, r4
 8006ae4:	3c1f      	subs	r4, #31
 8006ae6:	da1c      	bge.n	8006b22 <__adddf3+0x1d2>
 8006ae8:	340c      	adds	r4, #12
 8006aea:	dc0e      	bgt.n	8006b0a <__adddf3+0x1ba>
 8006aec:	f104 0414 	add.w	r4, r4, #20
 8006af0:	f1c4 0220 	rsb	r2, r4, #32
 8006af4:	fa20 f004 	lsr.w	r0, r0, r4
 8006af8:	fa01 f302 	lsl.w	r3, r1, r2
 8006afc:	ea40 0003 	orr.w	r0, r0, r3
 8006b00:	fa21 f304 	lsr.w	r3, r1, r4
 8006b04:	ea45 0103 	orr.w	r1, r5, r3
 8006b08:	bd30      	pop	{r4, r5, pc}
 8006b0a:	f1c4 040c 	rsb	r4, r4, #12
 8006b0e:	f1c4 0220 	rsb	r2, r4, #32
 8006b12:	fa20 f002 	lsr.w	r0, r0, r2
 8006b16:	fa01 f304 	lsl.w	r3, r1, r4
 8006b1a:	ea40 0003 	orr.w	r0, r0, r3
 8006b1e:	4629      	mov	r1, r5
 8006b20:	bd30      	pop	{r4, r5, pc}
 8006b22:	fa21 f004 	lsr.w	r0, r1, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	bd30      	pop	{r4, r5, pc}
 8006b2a:	f094 0f00 	teq	r4, #0
 8006b2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006b32:	bf06      	itte	eq
 8006b34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006b38:	3401      	addeq	r4, #1
 8006b3a:	3d01      	subne	r5, #1
 8006b3c:	e74e      	b.n	80069dc <__adddf3+0x8c>
 8006b3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b42:	bf18      	it	ne
 8006b44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006b48:	d029      	beq.n	8006b9e <__adddf3+0x24e>
 8006b4a:	ea94 0f05 	teq	r4, r5
 8006b4e:	bf08      	it	eq
 8006b50:	ea90 0f02 	teqeq	r0, r2
 8006b54:	d005      	beq.n	8006b62 <__adddf3+0x212>
 8006b56:	ea54 0c00 	orrs.w	ip, r4, r0
 8006b5a:	bf04      	itt	eq
 8006b5c:	4619      	moveq	r1, r3
 8006b5e:	4610      	moveq	r0, r2
 8006b60:	bd30      	pop	{r4, r5, pc}
 8006b62:	ea91 0f03 	teq	r1, r3
 8006b66:	bf1e      	ittt	ne
 8006b68:	2100      	movne	r1, #0
 8006b6a:	2000      	movne	r0, #0
 8006b6c:	bd30      	popne	{r4, r5, pc}
 8006b6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b72:	d105      	bne.n	8006b80 <__adddf3+0x230>
 8006b74:	0040      	lsls	r0, r0, #1
 8006b76:	4149      	adcs	r1, r1
 8006b78:	bf28      	it	cs
 8006b7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b84:	bf3c      	itt	cc
 8006b86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b8a:	bd30      	popcc	{r4, r5, pc}
 8006b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b98:	f04f 0000 	mov.w	r0, #0
 8006b9c:	bd30      	pop	{r4, r5, pc}
 8006b9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006ba2:	bf1a      	itte	ne
 8006ba4:	4619      	movne	r1, r3
 8006ba6:	4610      	movne	r0, r2
 8006ba8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006bac:	bf1c      	itt	ne
 8006bae:	460b      	movne	r3, r1
 8006bb0:	4602      	movne	r2, r0
 8006bb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006bb6:	bf06      	itte	eq
 8006bb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006bbc:	ea91 0f03 	teqeq	r1, r3
 8006bc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006bc4:	bd30      	pop	{r4, r5, pc}
 8006bc6:	bf00      	nop

08006bc8 <__aeabi_ui2d>:
 8006bc8:	f090 0f00 	teq	r0, #0
 8006bcc:	bf04      	itt	eq
 8006bce:	2100      	moveq	r1, #0
 8006bd0:	4770      	bxeq	lr
 8006bd2:	b530      	push	{r4, r5, lr}
 8006bd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bdc:	f04f 0500 	mov.w	r5, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	e750      	b.n	8006a88 <__adddf3+0x138>
 8006be6:	bf00      	nop

08006be8 <__aeabi_i2d>:
 8006be8:	f090 0f00 	teq	r0, #0
 8006bec:	bf04      	itt	eq
 8006bee:	2100      	moveq	r1, #0
 8006bf0:	4770      	bxeq	lr
 8006bf2:	b530      	push	{r4, r5, lr}
 8006bf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006c00:	bf48      	it	mi
 8006c02:	4240      	negmi	r0, r0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	e73e      	b.n	8006a88 <__adddf3+0x138>
 8006c0a:	bf00      	nop

08006c0c <__aeabi_f2d>:
 8006c0c:	0042      	lsls	r2, r0, #1
 8006c0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8006c16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006c1a:	bf1f      	itttt	ne
 8006c1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006c28:	4770      	bxne	lr
 8006c2a:	f092 0f00 	teq	r2, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c34:	4770      	bxeq	lr
 8006c36:	b530      	push	{r4, r5, lr}
 8006c38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c44:	e720      	b.n	8006a88 <__adddf3+0x138>
 8006c46:	bf00      	nop

08006c48 <__aeabi_ul2d>:
 8006c48:	ea50 0201 	orrs.w	r2, r0, r1
 8006c4c:	bf08      	it	eq
 8006c4e:	4770      	bxeq	lr
 8006c50:	b530      	push	{r4, r5, lr}
 8006c52:	f04f 0500 	mov.w	r5, #0
 8006c56:	e00a      	b.n	8006c6e <__aeabi_l2d+0x16>

08006c58 <__aeabi_l2d>:
 8006c58:	ea50 0201 	orrs.w	r2, r0, r1
 8006c5c:	bf08      	it	eq
 8006c5e:	4770      	bxeq	lr
 8006c60:	b530      	push	{r4, r5, lr}
 8006c62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006c66:	d502      	bpl.n	8006c6e <__aeabi_l2d+0x16>
 8006c68:	4240      	negs	r0, r0
 8006c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c7a:	f43f aedc 	beq.w	8006a36 <__adddf3+0xe6>
 8006c7e:	f04f 0203 	mov.w	r2, #3
 8006c82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c86:	bf18      	it	ne
 8006c88:	3203      	addne	r2, #3
 8006c8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c8e:	bf18      	it	ne
 8006c90:	3203      	addne	r2, #3
 8006c92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c96:	f1c2 0320 	rsb	r3, r2, #32
 8006c9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8006ca2:	fa01 fe03 	lsl.w	lr, r1, r3
 8006ca6:	ea40 000e 	orr.w	r0, r0, lr
 8006caa:	fa21 f102 	lsr.w	r1, r1, r2
 8006cae:	4414      	add	r4, r2
 8006cb0:	e6c1      	b.n	8006a36 <__adddf3+0xe6>
 8006cb2:	bf00      	nop

08006cb4 <__aeabi_dmul>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006cc2:	bf1d      	ittte	ne
 8006cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006cc8:	ea94 0f0c 	teqne	r4, ip
 8006ccc:	ea95 0f0c 	teqne	r5, ip
 8006cd0:	f000 f8de 	bleq	8006e90 <__aeabi_dmul+0x1dc>
 8006cd4:	442c      	add	r4, r5
 8006cd6:	ea81 0603 	eor.w	r6, r1, r3
 8006cda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006cde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006ce2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006ce6:	bf18      	it	ne
 8006ce8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf4:	d038      	beq.n	8006d68 <__aeabi_dmul+0xb4>
 8006cf6:	fba0 ce02 	umull	ip, lr, r0, r2
 8006cfa:	f04f 0500 	mov.w	r5, #0
 8006cfe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006d02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006d06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006d0a:	f04f 0600 	mov.w	r6, #0
 8006d0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006d12:	f09c 0f00 	teq	ip, #0
 8006d16:	bf18      	it	ne
 8006d18:	f04e 0e01 	orrne.w	lr, lr, #1
 8006d1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006d20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006d24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006d28:	d204      	bcs.n	8006d34 <__aeabi_dmul+0x80>
 8006d2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006d2e:	416d      	adcs	r5, r5
 8006d30:	eb46 0606 	adc.w	r6, r6, r6
 8006d34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006d38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006d3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006d40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006d44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006d48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006d4c:	bf88      	it	hi
 8006d4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006d52:	d81e      	bhi.n	8006d92 <__aeabi_dmul+0xde>
 8006d54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006d58:	bf08      	it	eq
 8006d5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006d5e:	f150 0000 	adcs.w	r0, r0, #0
 8006d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d6c:	ea46 0101 	orr.w	r1, r6, r1
 8006d70:	ea40 0002 	orr.w	r0, r0, r2
 8006d74:	ea81 0103 	eor.w	r1, r1, r3
 8006d78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d7c:	bfc2      	ittt	gt
 8006d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d86:	bd70      	popgt	{r4, r5, r6, pc}
 8006d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d8c:	f04f 0e00 	mov.w	lr, #0
 8006d90:	3c01      	subs	r4, #1
 8006d92:	f300 80ab 	bgt.w	8006eec <__aeabi_dmul+0x238>
 8006d96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d9a:	bfde      	ittt	le
 8006d9c:	2000      	movle	r0, #0
 8006d9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006da2:	bd70      	pople	{r4, r5, r6, pc}
 8006da4:	f1c4 0400 	rsb	r4, r4, #0
 8006da8:	3c20      	subs	r4, #32
 8006daa:	da35      	bge.n	8006e18 <__aeabi_dmul+0x164>
 8006dac:	340c      	adds	r4, #12
 8006dae:	dc1b      	bgt.n	8006de8 <__aeabi_dmul+0x134>
 8006db0:	f104 0414 	add.w	r4, r4, #20
 8006db4:	f1c4 0520 	rsb	r5, r4, #32
 8006db8:	fa00 f305 	lsl.w	r3, r0, r5
 8006dbc:	fa20 f004 	lsr.w	r0, r0, r4
 8006dc0:	fa01 f205 	lsl.w	r2, r1, r5
 8006dc4:	ea40 0002 	orr.w	r0, r0, r2
 8006dc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006dd4:	fa21 f604 	lsr.w	r6, r1, r4
 8006dd8:	eb42 0106 	adc.w	r1, r2, r6
 8006ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006de0:	bf08      	it	eq
 8006de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f1c4 040c 	rsb	r4, r4, #12
 8006dec:	f1c4 0520 	rsb	r5, r4, #32
 8006df0:	fa00 f304 	lsl.w	r3, r0, r4
 8006df4:	fa20 f005 	lsr.w	r0, r0, r5
 8006df8:	fa01 f204 	lsl.w	r2, r1, r4
 8006dfc:	ea40 0002 	orr.w	r0, r0, r2
 8006e00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006e08:	f141 0100 	adc.w	r1, r1, #0
 8006e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e10:	bf08      	it	eq
 8006e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f1c4 0520 	rsb	r5, r4, #32
 8006e1c:	fa00 f205 	lsl.w	r2, r0, r5
 8006e20:	ea4e 0e02 	orr.w	lr, lr, r2
 8006e24:	fa20 f304 	lsr.w	r3, r0, r4
 8006e28:	fa01 f205 	lsl.w	r2, r1, r5
 8006e2c:	ea43 0302 	orr.w	r3, r3, r2
 8006e30:	fa21 f004 	lsr.w	r0, r1, r4
 8006e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e38:	fa21 f204 	lsr.w	r2, r1, r4
 8006e3c:	ea20 0002 	bic.w	r0, r0, r2
 8006e40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e48:	bf08      	it	eq
 8006e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f094 0f00 	teq	r4, #0
 8006e54:	d10f      	bne.n	8006e76 <__aeabi_dmul+0x1c2>
 8006e56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006e5a:	0040      	lsls	r0, r0, #1
 8006e5c:	eb41 0101 	adc.w	r1, r1, r1
 8006e60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e64:	bf08      	it	eq
 8006e66:	3c01      	subeq	r4, #1
 8006e68:	d0f7      	beq.n	8006e5a <__aeabi_dmul+0x1a6>
 8006e6a:	ea41 0106 	orr.w	r1, r1, r6
 8006e6e:	f095 0f00 	teq	r5, #0
 8006e72:	bf18      	it	ne
 8006e74:	4770      	bxne	lr
 8006e76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	eb43 0303 	adc.w	r3, r3, r3
 8006e80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e84:	bf08      	it	eq
 8006e86:	3d01      	subeq	r5, #1
 8006e88:	d0f7      	beq.n	8006e7a <__aeabi_dmul+0x1c6>
 8006e8a:	ea43 0306 	orr.w	r3, r3, r6
 8006e8e:	4770      	bx	lr
 8006e90:	ea94 0f0c 	teq	r4, ip
 8006e94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e98:	bf18      	it	ne
 8006e9a:	ea95 0f0c 	teqne	r5, ip
 8006e9e:	d00c      	beq.n	8006eba <__aeabi_dmul+0x206>
 8006ea0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ea4:	bf18      	it	ne
 8006ea6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006eaa:	d1d1      	bne.n	8006e50 <__aeabi_dmul+0x19c>
 8006eac:	ea81 0103 	eor.w	r1, r1, r3
 8006eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
 8006eba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ebe:	bf06      	itte	eq
 8006ec0:	4610      	moveq	r0, r2
 8006ec2:	4619      	moveq	r1, r3
 8006ec4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ec8:	d019      	beq.n	8006efe <__aeabi_dmul+0x24a>
 8006eca:	ea94 0f0c 	teq	r4, ip
 8006ece:	d102      	bne.n	8006ed6 <__aeabi_dmul+0x222>
 8006ed0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006ed4:	d113      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ed6:	ea95 0f0c 	teq	r5, ip
 8006eda:	d105      	bne.n	8006ee8 <__aeabi_dmul+0x234>
 8006edc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006ee0:	bf1c      	itt	ne
 8006ee2:	4610      	movne	r0, r2
 8006ee4:	4619      	movne	r1, r3
 8006ee6:	d10a      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ee8:	ea81 0103 	eor.w	r1, r1, r3
 8006eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ef0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006f02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <__aeabi_ddiv>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f16:	bf1d      	ittte	ne
 8006f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f1c:	ea94 0f0c 	teqne	r4, ip
 8006f20:	ea95 0f0c 	teqne	r5, ip
 8006f24:	f000 f8a7 	bleq	8007076 <__aeabi_ddiv+0x16e>
 8006f28:	eba4 0405 	sub.w	r4, r4, r5
 8006f2c:	ea81 0e03 	eor.w	lr, r1, r3
 8006f30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006f34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f38:	f000 8088 	beq.w	800704c <__aeabi_ddiv+0x144>
 8006f3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006f40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006f44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006f48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006f4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006f50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006f54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006f58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006f5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006f60:	429d      	cmp	r5, r3
 8006f62:	bf08      	it	eq
 8006f64:	4296      	cmpeq	r6, r2
 8006f66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006f6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f6e:	d202      	bcs.n	8006f76 <__aeabi_ddiv+0x6e>
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f76:	1ab6      	subs	r6, r6, r2
 8006f78:	eb65 0503 	sbc.w	r5, r5, r3
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f92:	bf22      	ittt	cs
 8006f94:	1ab6      	subcs	r6, r6, r2
 8006f96:	4675      	movcs	r5, lr
 8006f98:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fa2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006faa:	bf22      	ittt	cs
 8006fac:	1ab6      	subcs	r6, r6, r2
 8006fae:	4675      	movcs	r5, lr
 8006fb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fba:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fc2:	bf22      	ittt	cs
 8006fc4:	1ab6      	subcs	r6, r6, r2
 8006fc6:	4675      	movcs	r5, lr
 8006fc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fda:	bf22      	ittt	cs
 8006fdc:	1ab6      	subcs	r6, r6, r2
 8006fde:	4675      	movcs	r5, lr
 8006fe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006fe4:	ea55 0e06 	orrs.w	lr, r5, r6
 8006fe8:	d018      	beq.n	800701c <__aeabi_ddiv+0x114>
 8006fea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006fee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006ff2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006ff6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006ffa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006ffe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007002:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007006:	d1c0      	bne.n	8006f8a <__aeabi_ddiv+0x82>
 8007008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800700c:	d10b      	bne.n	8007026 <__aeabi_ddiv+0x11e>
 800700e:	ea41 0100 	orr.w	r1, r1, r0
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800701a:	e7b6      	b.n	8006f8a <__aeabi_ddiv+0x82>
 800701c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007020:	bf04      	itt	eq
 8007022:	4301      	orreq	r1, r0
 8007024:	2000      	moveq	r0, #0
 8007026:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800702a:	bf88      	it	hi
 800702c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007030:	f63f aeaf 	bhi.w	8006d92 <__aeabi_dmul+0xde>
 8007034:	ebb5 0c03 	subs.w	ip, r5, r3
 8007038:	bf04      	itt	eq
 800703a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007050:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007054:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007058:	bfc2      	ittt	gt
 800705a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800705e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007062:	bd70      	popgt	{r4, r5, r6, pc}
 8007064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007068:	f04f 0e00 	mov.w	lr, #0
 800706c:	3c01      	subs	r4, #1
 800706e:	e690      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007070:	ea45 0e06 	orr.w	lr, r5, r6
 8007074:	e68d      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007076:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800707a:	ea94 0f0c 	teq	r4, ip
 800707e:	bf08      	it	eq
 8007080:	ea95 0f0c 	teqeq	r5, ip
 8007084:	f43f af3b 	beq.w	8006efe <__aeabi_dmul+0x24a>
 8007088:	ea94 0f0c 	teq	r4, ip
 800708c:	d10a      	bne.n	80070a4 <__aeabi_ddiv+0x19c>
 800708e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007092:	f47f af34 	bne.w	8006efe <__aeabi_dmul+0x24a>
 8007096:	ea95 0f0c 	teq	r5, ip
 800709a:	f47f af25 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	e72c      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070a4:	ea95 0f0c 	teq	r5, ip
 80070a8:	d106      	bne.n	80070b8 <__aeabi_ddiv+0x1b0>
 80070aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80070ae:	f43f aefd 	beq.w	8006eac <__aeabi_dmul+0x1f8>
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	e722      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80070bc:	bf18      	it	ne
 80070be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80070c2:	f47f aec5 	bne.w	8006e50 <__aeabi_dmul+0x19c>
 80070c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80070ca:	f47f af0d 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 80070ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80070d2:	f47f aeeb 	bne.w	8006eac <__aeabi_dmul+0x1f8>
 80070d6:	e712      	b.n	8006efe <__aeabi_dmul+0x24a>

080070d8 <__gedf2>:
 80070d8:	f04f 3cff 	mov.w	ip, #4294967295
 80070dc:	e006      	b.n	80070ec <__cmpdf2+0x4>
 80070de:	bf00      	nop

080070e0 <__ledf2>:
 80070e0:	f04f 0c01 	mov.w	ip, #1
 80070e4:	e002      	b.n	80070ec <__cmpdf2+0x4>
 80070e6:	bf00      	nop

080070e8 <__cmpdf2>:
 80070e8:	f04f 0c01 	mov.w	ip, #1
 80070ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80070f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80070f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070fc:	bf18      	it	ne
 80070fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007102:	d01b      	beq.n	800713c <__cmpdf2+0x54>
 8007104:	b001      	add	sp, #4
 8007106:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800710a:	bf0c      	ite	eq
 800710c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007110:	ea91 0f03 	teqne	r1, r3
 8007114:	bf02      	ittt	eq
 8007116:	ea90 0f02 	teqeq	r0, r2
 800711a:	2000      	moveq	r0, #0
 800711c:	4770      	bxeq	lr
 800711e:	f110 0f00 	cmn.w	r0, #0
 8007122:	ea91 0f03 	teq	r1, r3
 8007126:	bf58      	it	pl
 8007128:	4299      	cmppl	r1, r3
 800712a:	bf08      	it	eq
 800712c:	4290      	cmpeq	r0, r2
 800712e:	bf2c      	ite	cs
 8007130:	17d8      	asrcs	r0, r3, #31
 8007132:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007136:	f040 0001 	orr.w	r0, r0, #1
 800713a:	4770      	bx	lr
 800713c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007144:	d102      	bne.n	800714c <__cmpdf2+0x64>
 8007146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800714a:	d107      	bne.n	800715c <__cmpdf2+0x74>
 800714c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007154:	d1d6      	bne.n	8007104 <__cmpdf2+0x1c>
 8007156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800715a:	d0d3      	beq.n	8007104 <__cmpdf2+0x1c>
 800715c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop

08007164 <__aeabi_cdrcmple>:
 8007164:	4684      	mov	ip, r0
 8007166:	4610      	mov	r0, r2
 8007168:	4662      	mov	r2, ip
 800716a:	468c      	mov	ip, r1
 800716c:	4619      	mov	r1, r3
 800716e:	4663      	mov	r3, ip
 8007170:	e000      	b.n	8007174 <__aeabi_cdcmpeq>
 8007172:	bf00      	nop

08007174 <__aeabi_cdcmpeq>:
 8007174:	b501      	push	{r0, lr}
 8007176:	f7ff ffb7 	bl	80070e8 <__cmpdf2>
 800717a:	2800      	cmp	r0, #0
 800717c:	bf48      	it	mi
 800717e:	f110 0f00 	cmnmi.w	r0, #0
 8007182:	bd01      	pop	{r0, pc}

08007184 <__aeabi_dcmpeq>:
 8007184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007188:	f7ff fff4 	bl	8007174 <__aeabi_cdcmpeq>
 800718c:	bf0c      	ite	eq
 800718e:	2001      	moveq	r0, #1
 8007190:	2000      	movne	r0, #0
 8007192:	f85d fb08 	ldr.w	pc, [sp], #8
 8007196:	bf00      	nop

08007198 <__aeabi_dcmplt>:
 8007198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800719c:	f7ff ffea 	bl	8007174 <__aeabi_cdcmpeq>
 80071a0:	bf34      	ite	cc
 80071a2:	2001      	movcc	r0, #1
 80071a4:	2000      	movcs	r0, #0
 80071a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80071aa:	bf00      	nop

080071ac <__aeabi_dcmple>:
 80071ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071b0:	f7ff ffe0 	bl	8007174 <__aeabi_cdcmpeq>
 80071b4:	bf94      	ite	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	2000      	movhi	r0, #0
 80071ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80071be:	bf00      	nop

080071c0 <__aeabi_dcmpge>:
 80071c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071c4:	f7ff ffce 	bl	8007164 <__aeabi_cdrcmple>
 80071c8:	bf94      	ite	ls
 80071ca:	2001      	movls	r0, #1
 80071cc:	2000      	movhi	r0, #0
 80071ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80071d2:	bf00      	nop

080071d4 <__aeabi_dcmpgt>:
 80071d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071d8:	f7ff ffc4 	bl	8007164 <__aeabi_cdrcmple>
 80071dc:	bf34      	ite	cc
 80071de:	2001      	movcc	r0, #1
 80071e0:	2000      	movcs	r0, #0
 80071e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80071e6:	bf00      	nop

080071e8 <__aeabi_dcmpun>:
 80071e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80071ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071f0:	d102      	bne.n	80071f8 <__aeabi_dcmpun+0x10>
 80071f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80071f6:	d10a      	bne.n	800720e <__aeabi_dcmpun+0x26>
 80071f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80071fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007200:	d102      	bne.n	8007208 <__aeabi_dcmpun+0x20>
 8007202:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007206:	d102      	bne.n	800720e <__aeabi_dcmpun+0x26>
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	4770      	bx	lr
 800720e:	f04f 0001 	mov.w	r0, #1
 8007212:	4770      	bx	lr

08007214 <__aeabi_d2iz>:
 8007214:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007218:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800721c:	d215      	bcs.n	800724a <__aeabi_d2iz+0x36>
 800721e:	d511      	bpl.n	8007244 <__aeabi_d2iz+0x30>
 8007220:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007224:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007228:	d912      	bls.n	8007250 <__aeabi_d2iz+0x3c>
 800722a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800722e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007232:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007236:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800723a:	fa23 f002 	lsr.w	r0, r3, r2
 800723e:	bf18      	it	ne
 8007240:	4240      	negne	r0, r0
 8007242:	4770      	bx	lr
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	4770      	bx	lr
 800724a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800724e:	d105      	bne.n	800725c <__aeabi_d2iz+0x48>
 8007250:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007254:	bf08      	it	eq
 8007256:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800725a:	4770      	bx	lr
 800725c:	f04f 0000 	mov.w	r0, #0
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <__aeabi_d2uiz>:
 8007264:	004a      	lsls	r2, r1, #1
 8007266:	d211      	bcs.n	800728c <__aeabi_d2uiz+0x28>
 8007268:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800726c:	d211      	bcs.n	8007292 <__aeabi_d2uiz+0x2e>
 800726e:	d50d      	bpl.n	800728c <__aeabi_d2uiz+0x28>
 8007270:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007274:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007278:	d40e      	bmi.n	8007298 <__aeabi_d2uiz+0x34>
 800727a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800727e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007282:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007286:	fa23 f002 	lsr.w	r0, r3, r2
 800728a:	4770      	bx	lr
 800728c:	f04f 0000 	mov.w	r0, #0
 8007290:	4770      	bx	lr
 8007292:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007296:	d102      	bne.n	800729e <__aeabi_d2uiz+0x3a>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	4770      	bx	lr
 800729e:	f04f 0000 	mov.w	r0, #0
 80072a2:	4770      	bx	lr

080072a4 <__aeabi_uldivmod>:
 80072a4:	b953      	cbnz	r3, 80072bc <__aeabi_uldivmod+0x18>
 80072a6:	b94a      	cbnz	r2, 80072bc <__aeabi_uldivmod+0x18>
 80072a8:	2900      	cmp	r1, #0
 80072aa:	bf08      	it	eq
 80072ac:	2800      	cmpeq	r0, #0
 80072ae:	bf1c      	itt	ne
 80072b0:	f04f 31ff 	movne.w	r1, #4294967295
 80072b4:	f04f 30ff 	movne.w	r0, #4294967295
 80072b8:	f001 b8f6 	b.w	80084a8 <__aeabi_idiv0>
 80072bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80072c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80072c4:	f000 f806 	bl	80072d4 <__udivmoddi4>
 80072c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80072cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr

080072d4 <__udivmoddi4>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	468c      	mov	ip, r1
 80072da:	460d      	mov	r5, r1
 80072dc:	4604      	mov	r4, r0
 80072de:	9e08      	ldr	r6, [sp, #32]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d151      	bne.n	8007388 <__udivmoddi4+0xb4>
 80072e4:	428a      	cmp	r2, r1
 80072e6:	4617      	mov	r7, r2
 80072e8:	d96d      	bls.n	80073c6 <__udivmoddi4+0xf2>
 80072ea:	fab2 fe82 	clz	lr, r2
 80072ee:	f1be 0f00 	cmp.w	lr, #0
 80072f2:	d00b      	beq.n	800730c <__udivmoddi4+0x38>
 80072f4:	f1ce 0c20 	rsb	ip, lr, #32
 80072f8:	fa01 f50e 	lsl.w	r5, r1, lr
 80072fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007300:	fa02 f70e 	lsl.w	r7, r2, lr
 8007304:	ea4c 0c05 	orr.w	ip, ip, r5
 8007308:	fa00 f40e 	lsl.w	r4, r0, lr
 800730c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8007310:	0c25      	lsrs	r5, r4, #16
 8007312:	fbbc f8fa 	udiv	r8, ip, sl
 8007316:	fa1f f987 	uxth.w	r9, r7
 800731a:	fb0a cc18 	mls	ip, sl, r8, ip
 800731e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8007322:	fb08 f309 	mul.w	r3, r8, r9
 8007326:	42ab      	cmp	r3, r5
 8007328:	d90a      	bls.n	8007340 <__udivmoddi4+0x6c>
 800732a:	19ed      	adds	r5, r5, r7
 800732c:	f108 32ff 	add.w	r2, r8, #4294967295
 8007330:	f080 8123 	bcs.w	800757a <__udivmoddi4+0x2a6>
 8007334:	42ab      	cmp	r3, r5
 8007336:	f240 8120 	bls.w	800757a <__udivmoddi4+0x2a6>
 800733a:	f1a8 0802 	sub.w	r8, r8, #2
 800733e:	443d      	add	r5, r7
 8007340:	1aed      	subs	r5, r5, r3
 8007342:	b2a4      	uxth	r4, r4
 8007344:	fbb5 f0fa 	udiv	r0, r5, sl
 8007348:	fb0a 5510 	mls	r5, sl, r0, r5
 800734c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007350:	fb00 f909 	mul.w	r9, r0, r9
 8007354:	45a1      	cmp	r9, r4
 8007356:	d909      	bls.n	800736c <__udivmoddi4+0x98>
 8007358:	19e4      	adds	r4, r4, r7
 800735a:	f100 33ff 	add.w	r3, r0, #4294967295
 800735e:	f080 810a 	bcs.w	8007576 <__udivmoddi4+0x2a2>
 8007362:	45a1      	cmp	r9, r4
 8007364:	f240 8107 	bls.w	8007576 <__udivmoddi4+0x2a2>
 8007368:	3802      	subs	r0, #2
 800736a:	443c      	add	r4, r7
 800736c:	eba4 0409 	sub.w	r4, r4, r9
 8007370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007374:	2100      	movs	r1, #0
 8007376:	2e00      	cmp	r6, #0
 8007378:	d061      	beq.n	800743e <__udivmoddi4+0x16a>
 800737a:	fa24 f40e 	lsr.w	r4, r4, lr
 800737e:	2300      	movs	r3, #0
 8007380:	6034      	str	r4, [r6, #0]
 8007382:	6073      	str	r3, [r6, #4]
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	428b      	cmp	r3, r1
 800738a:	d907      	bls.n	800739c <__udivmoddi4+0xc8>
 800738c:	2e00      	cmp	r6, #0
 800738e:	d054      	beq.n	800743a <__udivmoddi4+0x166>
 8007390:	2100      	movs	r1, #0
 8007392:	e886 0021 	stmia.w	r6, {r0, r5}
 8007396:	4608      	mov	r0, r1
 8007398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739c:	fab3 f183 	clz	r1, r3
 80073a0:	2900      	cmp	r1, #0
 80073a2:	f040 808e 	bne.w	80074c2 <__udivmoddi4+0x1ee>
 80073a6:	42ab      	cmp	r3, r5
 80073a8:	d302      	bcc.n	80073b0 <__udivmoddi4+0xdc>
 80073aa:	4282      	cmp	r2, r0
 80073ac:	f200 80fa 	bhi.w	80075a4 <__udivmoddi4+0x2d0>
 80073b0:	1a84      	subs	r4, r0, r2
 80073b2:	eb65 0503 	sbc.w	r5, r5, r3
 80073b6:	2001      	movs	r0, #1
 80073b8:	46ac      	mov	ip, r5
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d03f      	beq.n	800743e <__udivmoddi4+0x16a>
 80073be:	e886 1010 	stmia.w	r6, {r4, ip}
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	b912      	cbnz	r2, 80073ce <__udivmoddi4+0xfa>
 80073c8:	2701      	movs	r7, #1
 80073ca:	fbb7 f7f2 	udiv	r7, r7, r2
 80073ce:	fab7 fe87 	clz	lr, r7
 80073d2:	f1be 0f00 	cmp.w	lr, #0
 80073d6:	d134      	bne.n	8007442 <__udivmoddi4+0x16e>
 80073d8:	1beb      	subs	r3, r5, r7
 80073da:	0c3a      	lsrs	r2, r7, #16
 80073dc:	fa1f fc87 	uxth.w	ip, r7
 80073e0:	2101      	movs	r1, #1
 80073e2:	fbb3 f8f2 	udiv	r8, r3, r2
 80073e6:	0c25      	lsrs	r5, r4, #16
 80073e8:	fb02 3318 	mls	r3, r2, r8, r3
 80073ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80073f0:	fb0c f308 	mul.w	r3, ip, r8
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	d907      	bls.n	8007408 <__udivmoddi4+0x134>
 80073f8:	19ed      	adds	r5, r5, r7
 80073fa:	f108 30ff 	add.w	r0, r8, #4294967295
 80073fe:	d202      	bcs.n	8007406 <__udivmoddi4+0x132>
 8007400:	42ab      	cmp	r3, r5
 8007402:	f200 80d1 	bhi.w	80075a8 <__udivmoddi4+0x2d4>
 8007406:	4680      	mov	r8, r0
 8007408:	1aed      	subs	r5, r5, r3
 800740a:	b2a3      	uxth	r3, r4
 800740c:	fbb5 f0f2 	udiv	r0, r5, r2
 8007410:	fb02 5510 	mls	r5, r2, r0, r5
 8007414:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8007418:	fb0c fc00 	mul.w	ip, ip, r0
 800741c:	45a4      	cmp	ip, r4
 800741e:	d907      	bls.n	8007430 <__udivmoddi4+0x15c>
 8007420:	19e4      	adds	r4, r4, r7
 8007422:	f100 33ff 	add.w	r3, r0, #4294967295
 8007426:	d202      	bcs.n	800742e <__udivmoddi4+0x15a>
 8007428:	45a4      	cmp	ip, r4
 800742a:	f200 80b8 	bhi.w	800759e <__udivmoddi4+0x2ca>
 800742e:	4618      	mov	r0, r3
 8007430:	eba4 040c 	sub.w	r4, r4, ip
 8007434:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007438:	e79d      	b.n	8007376 <__udivmoddi4+0xa2>
 800743a:	4631      	mov	r1, r6
 800743c:	4630      	mov	r0, r6
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	f1ce 0420 	rsb	r4, lr, #32
 8007446:	fa05 f30e 	lsl.w	r3, r5, lr
 800744a:	fa07 f70e 	lsl.w	r7, r7, lr
 800744e:	fa20 f804 	lsr.w	r8, r0, r4
 8007452:	0c3a      	lsrs	r2, r7, #16
 8007454:	fa25 f404 	lsr.w	r4, r5, r4
 8007458:	ea48 0803 	orr.w	r8, r8, r3
 800745c:	fbb4 f1f2 	udiv	r1, r4, r2
 8007460:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8007464:	fb02 4411 	mls	r4, r2, r1, r4
 8007468:	fa1f fc87 	uxth.w	ip, r7
 800746c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8007470:	fb01 f30c 	mul.w	r3, r1, ip
 8007474:	42ab      	cmp	r3, r5
 8007476:	fa00 f40e 	lsl.w	r4, r0, lr
 800747a:	d909      	bls.n	8007490 <__udivmoddi4+0x1bc>
 800747c:	19ed      	adds	r5, r5, r7
 800747e:	f101 30ff 	add.w	r0, r1, #4294967295
 8007482:	f080 808a 	bcs.w	800759a <__udivmoddi4+0x2c6>
 8007486:	42ab      	cmp	r3, r5
 8007488:	f240 8087 	bls.w	800759a <__udivmoddi4+0x2c6>
 800748c:	3902      	subs	r1, #2
 800748e:	443d      	add	r5, r7
 8007490:	1aeb      	subs	r3, r5, r3
 8007492:	fa1f f588 	uxth.w	r5, r8
 8007496:	fbb3 f0f2 	udiv	r0, r3, r2
 800749a:	fb02 3310 	mls	r3, r2, r0, r3
 800749e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80074a2:	fb00 f30c 	mul.w	r3, r0, ip
 80074a6:	42ab      	cmp	r3, r5
 80074a8:	d907      	bls.n	80074ba <__udivmoddi4+0x1e6>
 80074aa:	19ed      	adds	r5, r5, r7
 80074ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80074b0:	d26f      	bcs.n	8007592 <__udivmoddi4+0x2be>
 80074b2:	42ab      	cmp	r3, r5
 80074b4:	d96d      	bls.n	8007592 <__udivmoddi4+0x2be>
 80074b6:	3802      	subs	r0, #2
 80074b8:	443d      	add	r5, r7
 80074ba:	1aeb      	subs	r3, r5, r3
 80074bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80074c0:	e78f      	b.n	80073e2 <__udivmoddi4+0x10e>
 80074c2:	f1c1 0720 	rsb	r7, r1, #32
 80074c6:	fa22 f807 	lsr.w	r8, r2, r7
 80074ca:	408b      	lsls	r3, r1
 80074cc:	fa05 f401 	lsl.w	r4, r5, r1
 80074d0:	ea48 0303 	orr.w	r3, r8, r3
 80074d4:	fa20 fe07 	lsr.w	lr, r0, r7
 80074d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80074dc:	40fd      	lsrs	r5, r7
 80074de:	ea4e 0e04 	orr.w	lr, lr, r4
 80074e2:	fbb5 f9fc 	udiv	r9, r5, ip
 80074e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80074ea:	fb0c 5519 	mls	r5, ip, r9, r5
 80074ee:	fa1f f883 	uxth.w	r8, r3
 80074f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80074f6:	fb09 f408 	mul.w	r4, r9, r8
 80074fa:	42ac      	cmp	r4, r5
 80074fc:	fa02 f201 	lsl.w	r2, r2, r1
 8007500:	fa00 fa01 	lsl.w	sl, r0, r1
 8007504:	d908      	bls.n	8007518 <__udivmoddi4+0x244>
 8007506:	18ed      	adds	r5, r5, r3
 8007508:	f109 30ff 	add.w	r0, r9, #4294967295
 800750c:	d243      	bcs.n	8007596 <__udivmoddi4+0x2c2>
 800750e:	42ac      	cmp	r4, r5
 8007510:	d941      	bls.n	8007596 <__udivmoddi4+0x2c2>
 8007512:	f1a9 0902 	sub.w	r9, r9, #2
 8007516:	441d      	add	r5, r3
 8007518:	1b2d      	subs	r5, r5, r4
 800751a:	fa1f fe8e 	uxth.w	lr, lr
 800751e:	fbb5 f0fc 	udiv	r0, r5, ip
 8007522:	fb0c 5510 	mls	r5, ip, r0, r5
 8007526:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800752a:	fb00 f808 	mul.w	r8, r0, r8
 800752e:	45a0      	cmp	r8, r4
 8007530:	d907      	bls.n	8007542 <__udivmoddi4+0x26e>
 8007532:	18e4      	adds	r4, r4, r3
 8007534:	f100 35ff 	add.w	r5, r0, #4294967295
 8007538:	d229      	bcs.n	800758e <__udivmoddi4+0x2ba>
 800753a:	45a0      	cmp	r8, r4
 800753c:	d927      	bls.n	800758e <__udivmoddi4+0x2ba>
 800753e:	3802      	subs	r0, #2
 8007540:	441c      	add	r4, r3
 8007542:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007546:	eba4 0408 	sub.w	r4, r4, r8
 800754a:	fba0 8902 	umull	r8, r9, r0, r2
 800754e:	454c      	cmp	r4, r9
 8007550:	46c6      	mov	lr, r8
 8007552:	464d      	mov	r5, r9
 8007554:	d315      	bcc.n	8007582 <__udivmoddi4+0x2ae>
 8007556:	d012      	beq.n	800757e <__udivmoddi4+0x2aa>
 8007558:	b156      	cbz	r6, 8007570 <__udivmoddi4+0x29c>
 800755a:	ebba 030e 	subs.w	r3, sl, lr
 800755e:	eb64 0405 	sbc.w	r4, r4, r5
 8007562:	fa04 f707 	lsl.w	r7, r4, r7
 8007566:	40cb      	lsrs	r3, r1
 8007568:	431f      	orrs	r7, r3
 800756a:	40cc      	lsrs	r4, r1
 800756c:	6037      	str	r7, [r6, #0]
 800756e:	6074      	str	r4, [r6, #4]
 8007570:	2100      	movs	r1, #0
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	4618      	mov	r0, r3
 8007578:	e6f8      	b.n	800736c <__udivmoddi4+0x98>
 800757a:	4690      	mov	r8, r2
 800757c:	e6e0      	b.n	8007340 <__udivmoddi4+0x6c>
 800757e:	45c2      	cmp	sl, r8
 8007580:	d2ea      	bcs.n	8007558 <__udivmoddi4+0x284>
 8007582:	ebb8 0e02 	subs.w	lr, r8, r2
 8007586:	eb69 0503 	sbc.w	r5, r9, r3
 800758a:	3801      	subs	r0, #1
 800758c:	e7e4      	b.n	8007558 <__udivmoddi4+0x284>
 800758e:	4628      	mov	r0, r5
 8007590:	e7d7      	b.n	8007542 <__udivmoddi4+0x26e>
 8007592:	4640      	mov	r0, r8
 8007594:	e791      	b.n	80074ba <__udivmoddi4+0x1e6>
 8007596:	4681      	mov	r9, r0
 8007598:	e7be      	b.n	8007518 <__udivmoddi4+0x244>
 800759a:	4601      	mov	r1, r0
 800759c:	e778      	b.n	8007490 <__udivmoddi4+0x1bc>
 800759e:	3802      	subs	r0, #2
 80075a0:	443c      	add	r4, r7
 80075a2:	e745      	b.n	8007430 <__udivmoddi4+0x15c>
 80075a4:	4608      	mov	r0, r1
 80075a6:	e708      	b.n	80073ba <__udivmoddi4+0xe6>
 80075a8:	f1a8 0802 	sub.w	r8, r8, #2
 80075ac:	443d      	add	r5, r7
 80075ae:	e72b      	b.n	8007408 <__udivmoddi4+0x134>

080075b0 <selfrel_offset31>:
 80075b0:	6803      	ldr	r3, [r0, #0]
 80075b2:	005a      	lsls	r2, r3, #1
 80075b4:	bf4c      	ite	mi
 80075b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80075ba:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80075be:	4418      	add	r0, r3
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop

080075c4 <search_EIT_table>:
 80075c4:	b361      	cbz	r1, 8007620 <search_EIT_table+0x5c>
 80075c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f101 3aff 	add.w	sl, r1, #4294967295
 80075ce:	4690      	mov	r8, r2
 80075d0:	4606      	mov	r6, r0
 80075d2:	46d1      	mov	r9, sl
 80075d4:	2700      	movs	r7, #0
 80075d6:	eb07 0409 	add.w	r4, r7, r9
 80075da:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80075de:	1064      	asrs	r4, r4, #1
 80075e0:	00e5      	lsls	r5, r4, #3
 80075e2:	1971      	adds	r1, r6, r5
 80075e4:	4608      	mov	r0, r1
 80075e6:	f7ff ffe3 	bl	80075b0 <selfrel_offset31>
 80075ea:	45a2      	cmp	sl, r4
 80075ec:	4683      	mov	fp, r0
 80075ee:	f105 0008 	add.w	r0, r5, #8
 80075f2:	4430      	add	r0, r6
 80075f4:	d009      	beq.n	800760a <search_EIT_table+0x46>
 80075f6:	f7ff ffdb 	bl	80075b0 <selfrel_offset31>
 80075fa:	45c3      	cmp	fp, r8
 80075fc:	f100 30ff 	add.w	r0, r0, #4294967295
 8007600:	d805      	bhi.n	800760e <search_EIT_table+0x4a>
 8007602:	4540      	cmp	r0, r8
 8007604:	d209      	bcs.n	800761a <search_EIT_table+0x56>
 8007606:	1c67      	adds	r7, r4, #1
 8007608:	e7e5      	b.n	80075d6 <search_EIT_table+0x12>
 800760a:	45c3      	cmp	fp, r8
 800760c:	d905      	bls.n	800761a <search_EIT_table+0x56>
 800760e:	42a7      	cmp	r7, r4
 8007610:	d002      	beq.n	8007618 <search_EIT_table+0x54>
 8007612:	f104 39ff 	add.w	r9, r4, #4294967295
 8007616:	e7de      	b.n	80075d6 <search_EIT_table+0x12>
 8007618:	2100      	movs	r1, #0
 800761a:	4608      	mov	r0, r1
 800761c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	4608      	mov	r0, r1
 8007622:	4770      	bx	lr

08007624 <__gnu_unwind_get_pr_addr>:
 8007624:	2801      	cmp	r0, #1
 8007626:	d007      	beq.n	8007638 <__gnu_unwind_get_pr_addr+0x14>
 8007628:	2802      	cmp	r0, #2
 800762a:	d007      	beq.n	800763c <__gnu_unwind_get_pr_addr+0x18>
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <__gnu_unwind_get_pr_addr+0x1c>)
 800762e:	2800      	cmp	r0, #0
 8007630:	bf0c      	ite	eq
 8007632:	4618      	moveq	r0, r3
 8007634:	2000      	movne	r0, #0
 8007636:	4770      	bx	lr
 8007638:	4802      	ldr	r0, [pc, #8]	; (8007644 <__gnu_unwind_get_pr_addr+0x20>)
 800763a:	4770      	bx	lr
 800763c:	4802      	ldr	r0, [pc, #8]	; (8007648 <__gnu_unwind_get_pr_addr+0x24>)
 800763e:	4770      	bx	lr
 8007640:	08007d29 	.word	0x08007d29
 8007644:	08007d2d 	.word	0x08007d2d
 8007648:	08007d31 	.word	0x08007d31

0800764c <get_eit_entry>:
 800764c:	b530      	push	{r4, r5, lr}
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <get_eit_entry+0x94>)
 8007650:	b083      	sub	sp, #12
 8007652:	4604      	mov	r4, r0
 8007654:	1e8d      	subs	r5, r1, #2
 8007656:	b37b      	cbz	r3, 80076b8 <get_eit_entry+0x6c>
 8007658:	a901      	add	r1, sp, #4
 800765a:	4628      	mov	r0, r5
 800765c:	f3af 8000 	nop.w
 8007660:	b320      	cbz	r0, 80076ac <get_eit_entry+0x60>
 8007662:	9901      	ldr	r1, [sp, #4]
 8007664:	462a      	mov	r2, r5
 8007666:	f7ff ffad 	bl	80075c4 <search_EIT_table>
 800766a:	4601      	mov	r1, r0
 800766c:	b1f0      	cbz	r0, 80076ac <get_eit_entry+0x60>
 800766e:	f7ff ff9f 	bl	80075b0 <selfrel_offset31>
 8007672:	684b      	ldr	r3, [r1, #4]
 8007674:	64a0      	str	r0, [r4, #72]	; 0x48
 8007676:	2b01      	cmp	r3, #1
 8007678:	d012      	beq.n	80076a0 <get_eit_entry+0x54>
 800767a:	2b00      	cmp	r3, #0
 800767c:	f101 0004 	add.w	r0, r1, #4
 8007680:	db20      	blt.n	80076c4 <get_eit_entry+0x78>
 8007682:	f7ff ff95 	bl	80075b0 <selfrel_offset31>
 8007686:	2300      	movs	r3, #0
 8007688:	64e0      	str	r0, [r4, #76]	; 0x4c
 800768a:	6523      	str	r3, [r4, #80]	; 0x50
 800768c:	6803      	ldr	r3, [r0, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	db1c      	blt.n	80076cc <get_eit_entry+0x80>
 8007692:	f7ff ff8d 	bl	80075b0 <selfrel_offset31>
 8007696:	2300      	movs	r3, #0
 8007698:	6120      	str	r0, [r4, #16]
 800769a:	4618      	mov	r0, r3
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	2300      	movs	r3, #0
 80076a2:	6123      	str	r3, [r4, #16]
 80076a4:	2305      	movs	r3, #5
 80076a6:	4618      	mov	r0, r3
 80076a8:	b003      	add	sp, #12
 80076aa:	bd30      	pop	{r4, r5, pc}
 80076ac:	2300      	movs	r3, #0
 80076ae:	6123      	str	r3, [r4, #16]
 80076b0:	2309      	movs	r3, #9
 80076b2:	4618      	mov	r0, r3
 80076b4:	b003      	add	sp, #12
 80076b6:	bd30      	pop	{r4, r5, pc}
 80076b8:	490a      	ldr	r1, [pc, #40]	; (80076e4 <get_eit_entry+0x98>)
 80076ba:	480b      	ldr	r0, [pc, #44]	; (80076e8 <get_eit_entry+0x9c>)
 80076bc:	1a09      	subs	r1, r1, r0
 80076be:	10c9      	asrs	r1, r1, #3
 80076c0:	9101      	str	r1, [sp, #4]
 80076c2:	e7cf      	b.n	8007664 <get_eit_entry+0x18>
 80076c4:	2301      	movs	r3, #1
 80076c6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80076c8:	6523      	str	r3, [r4, #80]	; 0x50
 80076ca:	e7df      	b.n	800768c <get_eit_entry+0x40>
 80076cc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80076d0:	f7ff ffa8 	bl	8007624 <__gnu_unwind_get_pr_addr>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	6120      	str	r0, [r4, #16]
 80076d8:	bf14      	ite	ne
 80076da:	2300      	movne	r3, #0
 80076dc:	2309      	moveq	r3, #9
 80076de:	e7dc      	b.n	800769a <get_eit_entry+0x4e>
 80076e0:	00000000 	.word	0x00000000
 80076e4:	0801868c 	.word	0x0801868c
 80076e8:	0801828c 	.word	0x0801828c

080076ec <restore_non_core_regs>:
 80076ec:	6803      	ldr	r3, [r0, #0]
 80076ee:	07da      	lsls	r2, r3, #31
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	d406      	bmi.n	8007704 <restore_non_core_regs+0x18>
 80076f6:	079b      	lsls	r3, r3, #30
 80076f8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80076fc:	d509      	bpl.n	8007712 <restore_non_core_regs+0x26>
 80076fe:	f000 fc51 	bl	8007fa4 <__gnu_Unwind_Restore_VFP_D>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	0759      	lsls	r1, r3, #29
 8007706:	d509      	bpl.n	800771c <restore_non_core_regs+0x30>
 8007708:	071a      	lsls	r2, r3, #28
 800770a:	d50e      	bpl.n	800772a <restore_non_core_regs+0x3e>
 800770c:	06db      	lsls	r3, r3, #27
 800770e:	d513      	bpl.n	8007738 <restore_non_core_regs+0x4c>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	f000 fc3f 	bl	8007f94 <__gnu_Unwind_Restore_VFP>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	0759      	lsls	r1, r3, #29
 800771a:	d4f5      	bmi.n	8007708 <restore_non_core_regs+0x1c>
 800771c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007720:	f000 fc48 	bl	8007fb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	071a      	lsls	r2, r3, #28
 8007728:	d4f0      	bmi.n	800770c <restore_non_core_regs+0x20>
 800772a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800772e:	f000 fc49 	bl	8007fc4 <__gnu_Unwind_Restore_WMMXD>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	06db      	lsls	r3, r3, #27
 8007736:	d4eb      	bmi.n	8007710 <restore_non_core_regs+0x24>
 8007738:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f000 bc84 	b.w	800804c <__gnu_Unwind_Restore_WMMXC>

08007744 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007744:	6803      	ldr	r3, [r0, #0]
 8007746:	b103      	cbz	r3, 800774a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007748:	4403      	add	r3, r0
 800774a:	4618      	mov	r0, r3
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <__gnu_unwind_24bit.isra.1>:
 8007750:	2009      	movs	r0, #9
 8007752:	4770      	bx	lr

08007754 <_Unwind_DebugHook>:
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <unwind_phase2>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	460d      	mov	r5, r1
 800775e:	e008      	b.n	8007772 <unwind_phase2+0x1a>
 8007760:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007762:	6163      	str	r3, [r4, #20]
 8007764:	462a      	mov	r2, r5
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	4621      	mov	r1, r4
 800776a:	2001      	movs	r0, #1
 800776c:	4798      	blx	r3
 800776e:	2808      	cmp	r0, #8
 8007770:	d108      	bne.n	8007784 <unwind_phase2+0x2c>
 8007772:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007774:	4620      	mov	r0, r4
 8007776:	f7ff ff69 	bl	800764c <get_eit_entry>
 800777a:	4606      	mov	r6, r0
 800777c:	2800      	cmp	r0, #0
 800777e:	d0ef      	beq.n	8007760 <unwind_phase2+0x8>
 8007780:	f008 ffc8 	bl	8010714 <abort>
 8007784:	2807      	cmp	r0, #7
 8007786:	d1fb      	bne.n	8007780 <unwind_phase2+0x28>
 8007788:	4630      	mov	r0, r6
 800778a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800778c:	f7ff ffe2 	bl	8007754 <_Unwind_DebugHook>
 8007790:	1d28      	adds	r0, r5, #4
 8007792:	f000 fbf3 	bl	8007f7c <__restore_core_regs>
 8007796:	bf00      	nop

08007798 <unwind_phase2_forced>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	1d0c      	adds	r4, r1, #4
 800779e:	4605      	mov	r5, r0
 80077a0:	4692      	mov	sl, r2
 80077a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077a4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80077a8:	ae03      	add	r6, sp, #12
 80077aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80077ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80077b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80077b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80077b8:	ac02      	add	r4, sp, #8
 80077ba:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80077be:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80077c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4628      	mov	r0, r5
 80077ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	f7ff ff3d 	bl	800764c <get_eit_entry>
 80077d2:	f1ba 0f00 	cmp.w	sl, #0
 80077d6:	4607      	mov	r7, r0
 80077d8:	bf14      	ite	ne
 80077da:	260a      	movne	r6, #10
 80077dc:	2609      	moveq	r6, #9
 80077de:	b17f      	cbz	r7, 8007800 <unwind_phase2_forced+0x68>
 80077e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077e2:	f046 0110 	orr.w	r1, r6, #16
 80077e6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80077ea:	462a      	mov	r2, r5
 80077ec:	6463      	str	r3, [r4, #68]	; 0x44
 80077ee:	2001      	movs	r0, #1
 80077f0:	462b      	mov	r3, r5
 80077f2:	47c0      	blx	r8
 80077f4:	bb78      	cbnz	r0, 8007856 <unwind_phase2_forced+0xbe>
 80077f6:	4638      	mov	r0, r7
 80077f8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80077fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007802:	616b      	str	r3, [r5, #20]
 8007804:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007808:	4621      	mov	r1, r4
 800780a:	a87a      	add	r0, sp, #488	; 0x1e8
 800780c:	f009 ffc1 	bl	8011792 <memcpy>
 8007810:	692b      	ldr	r3, [r5, #16]
 8007812:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	4798      	blx	r3
 800781a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800781c:	4682      	mov	sl, r0
 800781e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8007822:	4631      	mov	r1, r6
 8007824:	6463      	str	r3, [r4, #68]	; 0x44
 8007826:	462a      	mov	r2, r5
 8007828:	462b      	mov	r3, r5
 800782a:	2001      	movs	r0, #1
 800782c:	47c0      	blx	r8
 800782e:	b990      	cbnz	r0, 8007856 <unwind_phase2_forced+0xbe>
 8007830:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007834:	a97a      	add	r1, sp, #488	; 0x1e8
 8007836:	4620      	mov	r0, r4
 8007838:	f009 ffab 	bl	8011792 <memcpy>
 800783c:	f1ba 0f08 	cmp.w	sl, #8
 8007840:	d106      	bne.n	8007850 <unwind_phase2_forced+0xb8>
 8007842:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007844:	4628      	mov	r0, r5
 8007846:	f7ff ff01 	bl	800764c <get_eit_entry>
 800784a:	2609      	movs	r6, #9
 800784c:	4607      	mov	r7, r0
 800784e:	e7c6      	b.n	80077de <unwind_phase2_forced+0x46>
 8007850:	f1ba 0f07 	cmp.w	sl, #7
 8007854:	d005      	beq.n	8007862 <unwind_phase2_forced+0xca>
 8007856:	2709      	movs	r7, #9
 8007858:	4638      	mov	r0, r7
 800785a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007862:	4638      	mov	r0, r7
 8007864:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007866:	f7ff ff75 	bl	8007754 <_Unwind_DebugHook>
 800786a:	a803      	add	r0, sp, #12
 800786c:	f000 fb86 	bl	8007f7c <__restore_core_regs>

08007870 <_Unwind_GetCFA>:
 8007870:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007872:	4770      	bx	lr

08007874 <__gnu_Unwind_RaiseException>:
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007878:	640b      	str	r3, [r1, #64]	; 0x40
 800787a:	1d0e      	adds	r6, r1, #4
 800787c:	460f      	mov	r7, r1
 800787e:	4604      	mov	r4, r0
 8007880:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007882:	b0f9      	sub	sp, #484	; 0x1e4
 8007884:	ad01      	add	r5, sp, #4
 8007886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007888:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800788a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800788c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800788e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007890:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007894:	f04f 36ff 	mov.w	r6, #4294967295
 8007898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800789c:	9600      	str	r6, [sp, #0]
 800789e:	e006      	b.n	80078ae <__gnu_Unwind_RaiseException+0x3a>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	466a      	mov	r2, sp
 80078a4:	4621      	mov	r1, r4
 80078a6:	4798      	blx	r3
 80078a8:	2808      	cmp	r0, #8
 80078aa:	4605      	mov	r5, r0
 80078ac:	d108      	bne.n	80078c0 <__gnu_Unwind_RaiseException+0x4c>
 80078ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7ff fecb 	bl	800764c <get_eit_entry>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d0f2      	beq.n	80078a0 <__gnu_Unwind_RaiseException+0x2c>
 80078ba:	2009      	movs	r0, #9
 80078bc:	b079      	add	sp, #484	; 0x1e4
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c0:	4668      	mov	r0, sp
 80078c2:	f7ff ff13 	bl	80076ec <restore_non_core_regs>
 80078c6:	2d06      	cmp	r5, #6
 80078c8:	d1f7      	bne.n	80078ba <__gnu_Unwind_RaiseException+0x46>
 80078ca:	4639      	mov	r1, r7
 80078cc:	4620      	mov	r0, r4
 80078ce:	f7ff ff43 	bl	8007758 <unwind_phase2>
 80078d2:	bf00      	nop

080078d4 <__gnu_Unwind_ForcedUnwind>:
 80078d4:	b430      	push	{r4, r5}
 80078d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80078d8:	60c1      	str	r1, [r0, #12]
 80078da:	6182      	str	r2, [r0, #24]
 80078dc:	4619      	mov	r1, r3
 80078de:	641d      	str	r5, [r3, #64]	; 0x40
 80078e0:	2200      	movs	r2, #0
 80078e2:	bc30      	pop	{r4, r5}
 80078e4:	e758      	b.n	8007798 <unwind_phase2_forced>
 80078e6:	bf00      	nop

080078e8 <__gnu_Unwind_Resume>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	68c6      	ldr	r6, [r0, #12]
 80078ec:	6943      	ldr	r3, [r0, #20]
 80078ee:	640b      	str	r3, [r1, #64]	; 0x40
 80078f0:	b126      	cbz	r6, 80078fc <__gnu_Unwind_Resume+0x14>
 80078f2:	2201      	movs	r2, #1
 80078f4:	f7ff ff50 	bl	8007798 <unwind_phase2_forced>
 80078f8:	f008 ff0c 	bl	8010714 <abort>
 80078fc:	6903      	ldr	r3, [r0, #16]
 80078fe:	460a      	mov	r2, r1
 8007900:	4604      	mov	r4, r0
 8007902:	460d      	mov	r5, r1
 8007904:	4601      	mov	r1, r0
 8007906:	2002      	movs	r0, #2
 8007908:	4798      	blx	r3
 800790a:	2807      	cmp	r0, #7
 800790c:	d007      	beq.n	800791e <__gnu_Unwind_Resume+0x36>
 800790e:	2808      	cmp	r0, #8
 8007910:	d103      	bne.n	800791a <__gnu_Unwind_Resume+0x32>
 8007912:	4629      	mov	r1, r5
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff1f 	bl	8007758 <unwind_phase2>
 800791a:	f008 fefb 	bl	8010714 <abort>
 800791e:	4630      	mov	r0, r6
 8007920:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007922:	f7ff ff17 	bl	8007754 <_Unwind_DebugHook>
 8007926:	1d28      	adds	r0, r5, #4
 8007928:	f000 fb28 	bl	8007f7c <__restore_core_regs>

0800792c <__gnu_Unwind_Resume_or_Rethrow>:
 800792c:	68c2      	ldr	r2, [r0, #12]
 800792e:	b11a      	cbz	r2, 8007938 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007930:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007932:	640a      	str	r2, [r1, #64]	; 0x40
 8007934:	2200      	movs	r2, #0
 8007936:	e72f      	b.n	8007798 <unwind_phase2_forced>
 8007938:	e79c      	b.n	8007874 <__gnu_Unwind_RaiseException>
 800793a:	bf00      	nop

0800793c <_Unwind_Complete>:
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop

08007940 <_Unwind_DeleteException>:
 8007940:	6883      	ldr	r3, [r0, #8]
 8007942:	b113      	cbz	r3, 800794a <_Unwind_DeleteException+0xa>
 8007944:	4601      	mov	r1, r0
 8007946:	2001      	movs	r0, #1
 8007948:	4718      	bx	r3
 800794a:	4770      	bx	lr

0800794c <_Unwind_VRS_Get>:
 800794c:	b500      	push	{lr}
 800794e:	2904      	cmp	r1, #4
 8007950:	d807      	bhi.n	8007962 <_Unwind_VRS_Get+0x16>
 8007952:	e8df f001 	tbb	[pc, r1]
 8007956:	0903      	.short	0x0903
 8007958:	0906      	.short	0x0906
 800795a:	09          	.byte	0x09
 800795b:	00          	.byte	0x00
 800795c:	b90b      	cbnz	r3, 8007962 <_Unwind_VRS_Get+0x16>
 800795e:	2a0f      	cmp	r2, #15
 8007960:	d905      	bls.n	800796e <_Unwind_VRS_Get+0x22>
 8007962:	2002      	movs	r0, #2
 8007964:	f85d fb04 	ldr.w	pc, [sp], #4
 8007968:	2001      	movs	r0, #1
 800796a:	f85d fb04 	ldr.w	pc, [sp], #4
 800796e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007972:	4618      	mov	r0, r3
 8007974:	6853      	ldr	r3, [r2, #4]
 8007976:	9a01      	ldr	r2, [sp, #4]
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	f85d fb04 	ldr.w	pc, [sp], #4
 800797e:	bf00      	nop

08007980 <_Unwind_GetGR>:
 8007980:	b510      	push	{r4, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	2300      	movs	r3, #0
 8007986:	ac03      	add	r4, sp, #12
 8007988:	460a      	mov	r2, r1
 800798a:	9400      	str	r4, [sp, #0]
 800798c:	4619      	mov	r1, r3
 800798e:	f7ff ffdd 	bl	800794c <_Unwind_VRS_Get>
 8007992:	9803      	ldr	r0, [sp, #12]
 8007994:	b004      	add	sp, #16
 8007996:	bd10      	pop	{r4, pc}

08007998 <_Unwind_VRS_Set>:
 8007998:	b500      	push	{lr}
 800799a:	2904      	cmp	r1, #4
 800799c:	d807      	bhi.n	80079ae <_Unwind_VRS_Set+0x16>
 800799e:	e8df f001 	tbb	[pc, r1]
 80079a2:	0903      	.short	0x0903
 80079a4:	0906      	.short	0x0906
 80079a6:	09          	.byte	0x09
 80079a7:	00          	.byte	0x00
 80079a8:	b90b      	cbnz	r3, 80079ae <_Unwind_VRS_Set+0x16>
 80079aa:	2a0f      	cmp	r2, #15
 80079ac:	d905      	bls.n	80079ba <_Unwind_VRS_Set+0x22>
 80079ae:	2002      	movs	r0, #2
 80079b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80079b4:	2001      	movs	r0, #1
 80079b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80079c0:	6809      	ldr	r1, [r1, #0]
 80079c2:	6051      	str	r1, [r2, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ca:	bf00      	nop

080079cc <_Unwind_SetGR>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	ac04      	add	r4, sp, #16
 80079d2:	2300      	movs	r3, #0
 80079d4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80079d8:	460a      	mov	r2, r1
 80079da:	9400      	str	r4, [sp, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	f7ff ffdb 	bl	8007998 <_Unwind_VRS_Set>
 80079e2:	b004      	add	sp, #16
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop

080079e8 <__gnu_Unwind_Backtrace>:
 80079e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80079ec:	6413      	str	r3, [r2, #64]	; 0x40
 80079ee:	1d15      	adds	r5, r2, #4
 80079f0:	4607      	mov	r7, r0
 80079f2:	460e      	mov	r6, r1
 80079f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079f6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80079fa:	ac17      	add	r4, sp, #92	; 0x5c
 80079fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a0a:	f04f 35ff 	mov.w	r5, #4294967295
 8007a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a12:	9516      	str	r5, [sp, #88]	; 0x58
 8007a14:	e010      	b.n	8007a38 <__gnu_Unwind_Backtrace+0x50>
 8007a16:	a816      	add	r0, sp, #88	; 0x58
 8007a18:	f7ff ffd8 	bl	80079cc <_Unwind_SetGR>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	a816      	add	r0, sp, #88	; 0x58
 8007a20:	47b8      	blx	r7
 8007a22:	aa16      	add	r2, sp, #88	; 0x58
 8007a24:	4669      	mov	r1, sp
 8007a26:	b978      	cbnz	r0, 8007a48 <__gnu_Unwind_Backtrace+0x60>
 8007a28:	9b04      	ldr	r3, [sp, #16]
 8007a2a:	2008      	movs	r0, #8
 8007a2c:	4798      	blx	r3
 8007a2e:	2805      	cmp	r0, #5
 8007a30:	4604      	mov	r4, r0
 8007a32:	d00a      	beq.n	8007a4a <__gnu_Unwind_Backtrace+0x62>
 8007a34:	2809      	cmp	r0, #9
 8007a36:	d007      	beq.n	8007a48 <__gnu_Unwind_Backtrace+0x60>
 8007a38:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007a3a:	4668      	mov	r0, sp
 8007a3c:	f7ff fe06 	bl	800764c <get_eit_entry>
 8007a40:	466a      	mov	r2, sp
 8007a42:	210c      	movs	r1, #12
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d0e6      	beq.n	8007a16 <__gnu_Unwind_Backtrace+0x2e>
 8007a48:	2409      	movs	r4, #9
 8007a4a:	a816      	add	r0, sp, #88	; 0x58
 8007a4c:	f7ff fe4e 	bl	80076ec <restore_non_core_regs>
 8007a50:	4620      	mov	r0, r4
 8007a52:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a58 <__gnu_unwind_pr_common>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	460d      	mov	r5, r1
 8007a5e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007a60:	b08b      	sub	sp, #44	; 0x2c
 8007a62:	1d0c      	adds	r4, r1, #4
 8007a64:	6809      	ldr	r1, [r1, #0]
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	4691      	mov	r9, r2
 8007a6a:	9408      	str	r4, [sp, #32]
 8007a6c:	f000 0b03 	and.w	fp, r0, #3
 8007a70:	461e      	mov	r6, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d160      	bne.n	8007b38 <__gnu_unwind_pr_common+0xe0>
 8007a76:	0209      	lsls	r1, r1, #8
 8007a78:	2303      	movs	r3, #3
 8007a7a:	9107      	str	r1, [sp, #28]
 8007a7c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8007a80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007a84:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007a86:	f1bb 0f02 	cmp.w	fp, #2
 8007a8a:	bf08      	it	eq
 8007a8c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007a8e:	f013 0301 	ands.w	r3, r3, #1
 8007a92:	d140      	bne.n	8007b16 <__gnu_unwind_pr_common+0xbe>
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	f000 0308 	and.w	r3, r0, #8
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	f8d4 8000 	ldr.w	r8, [r4]
 8007aa0:	f1b8 0f00 	cmp.w	r8, #0
 8007aa4:	d039      	beq.n	8007b1a <__gnu_unwind_pr_common+0xc2>
 8007aa6:	2e02      	cmp	r6, #2
 8007aa8:	d043      	beq.n	8007b32 <__gnu_unwind_pr_common+0xda>
 8007aaa:	f8b4 8000 	ldrh.w	r8, [r4]
 8007aae:	8867      	ldrh	r7, [r4, #2]
 8007ab0:	3404      	adds	r4, #4
 8007ab2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007ab4:	f027 0a01 	bic.w	sl, r7, #1
 8007ab8:	210f      	movs	r1, #15
 8007aba:	4648      	mov	r0, r9
 8007abc:	449a      	add	sl, r3
 8007abe:	f7ff ff5f 	bl	8007980 <_Unwind_GetGR>
 8007ac2:	4582      	cmp	sl, r0
 8007ac4:	d833      	bhi.n	8007b2e <__gnu_unwind_pr_common+0xd6>
 8007ac6:	f028 0301 	bic.w	r3, r8, #1
 8007aca:	449a      	add	sl, r3
 8007acc:	4550      	cmp	r0, sl
 8007ace:	bf2c      	ite	cs
 8007ad0:	2000      	movcs	r0, #0
 8007ad2:	2001      	movcc	r0, #1
 8007ad4:	007f      	lsls	r7, r7, #1
 8007ad6:	f007 0702 	and.w	r7, r7, #2
 8007ada:	f008 0801 	and.w	r8, r8, #1
 8007ade:	ea47 0708 	orr.w	r7, r7, r8
 8007ae2:	2f01      	cmp	r7, #1
 8007ae4:	d03e      	beq.n	8007b64 <__gnu_unwind_pr_common+0x10c>
 8007ae6:	d335      	bcc.n	8007b54 <__gnu_unwind_pr_common+0xfc>
 8007ae8:	2f02      	cmp	r7, #2
 8007aea:	d11c      	bne.n	8007b26 <__gnu_unwind_pr_common+0xce>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007af2:	9202      	str	r2, [sp, #8]
 8007af4:	f1bb 0f00 	cmp.w	fp, #0
 8007af8:	d176      	bne.n	8007be8 <__gnu_unwind_pr_common+0x190>
 8007afa:	b128      	cbz	r0, 8007b08 <__gnu_unwind_pr_common+0xb0>
 8007afc:	9903      	ldr	r1, [sp, #12]
 8007afe:	2900      	cmp	r1, #0
 8007b00:	d07e      	beq.n	8007c00 <__gnu_unwind_pr_common+0x1a8>
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	f000 80a6 	beq.w	8007c54 <__gnu_unwind_pr_common+0x1fc>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db77      	blt.n	8007bfc <__gnu_unwind_pr_common+0x1a4>
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007b14:	e7c2      	b.n	8007a9c <__gnu_unwind_pr_common+0x44>
 8007b16:	2300      	movs	r3, #0
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2e02      	cmp	r6, #2
 8007b1c:	dd3e      	ble.n	8007b9c <__gnu_unwind_pr_common+0x144>
 8007b1e:	f7ff fe17 	bl	8007750 <__gnu_unwind_24bit.isra.1>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d040      	beq.n	8007ba8 <__gnu_unwind_pr_common+0x150>
 8007b26:	2009      	movs	r0, #9
 8007b28:	b00b      	add	sp, #44	; 0x2c
 8007b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e7d0      	b.n	8007ad4 <__gnu_unwind_pr_common+0x7c>
 8007b32:	6867      	ldr	r7, [r4, #4]
 8007b34:	3408      	adds	r4, #8
 8007b36:	e7bc      	b.n	8007ab2 <__gnu_unwind_pr_common+0x5a>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	dca3      	bgt.n	8007a84 <__gnu_unwind_pr_common+0x2c>
 8007b3c:	0c0b      	lsrs	r3, r1, #16
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	0409      	lsls	r1, r1, #16
 8007b42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007b46:	2302      	movs	r3, #2
 8007b48:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007b4c:	9107      	str	r1, [sp, #28]
 8007b4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007b52:	e797      	b.n	8007a84 <__gnu_unwind_pr_common+0x2c>
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	d002      	beq.n	8007b60 <__gnu_unwind_pr_common+0x108>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f040 80bd 	bne.w	8007cda <__gnu_unwind_pr_common+0x282>
 8007b60:	3404      	adds	r4, #4
 8007b62:	e79b      	b.n	8007a9c <__gnu_unwind_pr_common+0x44>
 8007b64:	f1bb 0f00 	cmp.w	fp, #0
 8007b68:	d125      	bne.n	8007bb6 <__gnu_unwind_pr_common+0x15e>
 8007b6a:	b1a8      	cbz	r0, 8007b98 <__gnu_unwind_pr_common+0x140>
 8007b6c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007b70:	1c99      	adds	r1, r3, #2
 8007b72:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007b76:	d0d6      	beq.n	8007b26 <__gnu_unwind_pr_common+0xce>
 8007b78:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	9106      	str	r1, [sp, #24]
 8007b80:	f000 80a3 	beq.w	8007cca <__gnu_unwind_pr_common+0x272>
 8007b84:	1d20      	adds	r0, r4, #4
 8007b86:	f7ff fddd 	bl	8007744 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007b8a:	ab06      	add	r3, sp, #24
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f007 fba6 	bl	800f2e0 <__cxa_type_match>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d177      	bne.n	8007c88 <__gnu_unwind_pr_common+0x230>
 8007b98:	3408      	adds	r4, #8
 8007b9a:	e77f      	b.n	8007a9c <__gnu_unwind_pr_common+0x44>
 8007b9c:	a907      	add	r1, sp, #28
 8007b9e:	4648      	mov	r0, r9
 8007ba0:	f000 faee 	bl	8008180 <__gnu_unwind_execute>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1be      	bne.n	8007b26 <__gnu_unwind_pr_common+0xce>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d15c      	bne.n	8007c68 <__gnu_unwind_pr_common+0x210>
 8007bae:	2008      	movs	r0, #8
 8007bb0:	b00b      	add	sp, #44	; 0x2c
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	210d      	movs	r1, #13
 8007bb8:	4648      	mov	r0, r9
 8007bba:	6a2f      	ldr	r7, [r5, #32]
 8007bbc:	f7ff fee0 	bl	8007980 <_Unwind_GetGR>
 8007bc0:	4287      	cmp	r7, r0
 8007bc2:	d1e9      	bne.n	8007b98 <__gnu_unwind_pr_common+0x140>
 8007bc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d1e6      	bne.n	8007b98 <__gnu_unwind_pr_common+0x140>
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7ff fcf0 	bl	80075b0 <selfrel_offset31>
 8007bd0:	210f      	movs	r1, #15
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	4648      	mov	r0, r9
 8007bd6:	f7ff fef9 	bl	80079cc <_Unwind_SetGR>
 8007bda:	4648      	mov	r0, r9
 8007bdc:	462a      	mov	r2, r5
 8007bde:	2100      	movs	r1, #0
 8007be0:	f7ff fef4 	bl	80079cc <_Unwind_SetGR>
 8007be4:	2007      	movs	r0, #7
 8007be6:	e79f      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007be8:	210d      	movs	r1, #13
 8007bea:	4648      	mov	r0, r9
 8007bec:	6a2f      	ldr	r7, [r5, #32]
 8007bee:	f7ff fec7 	bl	8007980 <_Unwind_GetGR>
 8007bf2:	4287      	cmp	r7, r0
 8007bf4:	d058      	beq.n	8007ca8 <__gnu_unwind_pr_common+0x250>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da87      	bge.n	8007b0c <__gnu_unwind_pr_common+0xb4>
 8007bfc:	3404      	adds	r4, #4
 8007bfe:	e785      	b.n	8007b0c <__gnu_unwind_pr_common+0xb4>
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	b33b      	cbz	r3, 8007c54 <__gnu_unwind_pr_common+0x1fc>
 8007c04:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007c08:	1d27      	adds	r7, r4, #4
 8007c0a:	f8cd b010 	str.w	fp, [sp, #16]
 8007c0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c12:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007c16:	9605      	str	r6, [sp, #20]
 8007c18:	46a3      	mov	fp, r4
 8007c1a:	461c      	mov	r4, r3
 8007c1c:	e002      	b.n	8007c24 <__gnu_unwind_pr_common+0x1cc>
 8007c1e:	45b2      	cmp	sl, r6
 8007c20:	46b0      	mov	r8, r6
 8007c22:	d016      	beq.n	8007c52 <__gnu_unwind_pr_common+0x1fa>
 8007c24:	4638      	mov	r0, r7
 8007c26:	9406      	str	r4, [sp, #24]
 8007c28:	f7ff fd8c 	bl	8007744 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007c2c:	ab06      	add	r3, sp, #24
 8007c2e:	4601      	mov	r1, r0
 8007c30:	2200      	movs	r2, #0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f007 fb54 	bl	800f2e0 <__cxa_type_match>
 8007c38:	f108 0601 	add.w	r6, r8, #1
 8007c3c:	3704      	adds	r7, #4
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0ed      	beq.n	8007c1e <__gnu_unwind_pr_common+0x1c6>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	9e05      	ldr	r6, [sp, #20]
 8007c46:	4543      	cmp	r3, r8
 8007c48:	465c      	mov	r4, fp
 8007c4a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007c4e:	d1d2      	bne.n	8007bf6 <__gnu_unwind_pr_common+0x19e>
 8007c50:	e000      	b.n	8007c54 <__gnu_unwind_pr_common+0x1fc>
 8007c52:	465c      	mov	r4, fp
 8007c54:	4648      	mov	r0, r9
 8007c56:	210d      	movs	r1, #13
 8007c58:	f7ff fe92 	bl	8007980 <_Unwind_GetGR>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	6228      	str	r0, [r5, #32]
 8007c60:	62ac      	str	r4, [r5, #40]	; 0x28
 8007c62:	626b      	str	r3, [r5, #36]	; 0x24
 8007c64:	2006      	movs	r0, #6
 8007c66:	e75f      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007c68:	210f      	movs	r1, #15
 8007c6a:	4648      	mov	r0, r9
 8007c6c:	f7ff fe88 	bl	8007980 <_Unwind_GetGR>
 8007c70:	210e      	movs	r1, #14
 8007c72:	4602      	mov	r2, r0
 8007c74:	4648      	mov	r0, r9
 8007c76:	f7ff fea9 	bl	80079cc <_Unwind_SetGR>
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <__gnu_unwind_pr_common+0x2cc>)
 8007c7e:	210f      	movs	r1, #15
 8007c80:	f7ff fea4 	bl	80079cc <_Unwind_SetGR>
 8007c84:	2007      	movs	r0, #7
 8007c86:	e74f      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007c88:	4607      	mov	r7, r0
 8007c8a:	210d      	movs	r1, #13
 8007c8c:	4648      	mov	r0, r9
 8007c8e:	f7ff fe77 	bl	8007980 <_Unwind_GetGR>
 8007c92:	2f02      	cmp	r7, #2
 8007c94:	6228      	str	r0, [r5, #32]
 8007c96:	d11d      	bne.n	8007cd4 <__gnu_unwind_pr_common+0x27c>
 8007c98:	462b      	mov	r3, r5
 8007c9a:	9a06      	ldr	r2, [sp, #24]
 8007c9c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007ca0:	626b      	str	r3, [r5, #36]	; 0x24
 8007ca2:	62ac      	str	r4, [r5, #40]	; 0x28
 8007ca4:	2006      	movs	r0, #6
 8007ca6:	e73f      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007ca8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d1a3      	bne.n	8007bf6 <__gnu_unwind_pr_common+0x19e>
 8007cae:	2204      	movs	r2, #4
 8007cb0:	2700      	movs	r7, #0
 8007cb2:	18a3      	adds	r3, r4, r2
 8007cb4:	9902      	ldr	r1, [sp, #8]
 8007cb6:	62a9      	str	r1, [r5, #40]	; 0x28
 8007cb8:	62ef      	str	r7, [r5, #44]	; 0x2c
 8007cba:	632a      	str	r2, [r5, #48]	; 0x30
 8007cbc:	636b      	str	r3, [r5, #52]	; 0x34
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	42bb      	cmp	r3, r7
 8007cc2:	db1d      	blt.n	8007d00 <__gnu_unwind_pr_common+0x2a8>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	e720      	b.n	8007b0c <__gnu_unwind_pr_common+0xb4>
 8007cca:	4648      	mov	r0, r9
 8007ccc:	210d      	movs	r1, #13
 8007cce:	f7ff fe57 	bl	8007980 <_Unwind_GetGR>
 8007cd2:	6228      	str	r0, [r5, #32]
 8007cd4:	9b06      	ldr	r3, [sp, #24]
 8007cd6:	626b      	str	r3, [r5, #36]	; 0x24
 8007cd8:	e7e3      	b.n	8007ca2 <__gnu_unwind_pr_common+0x24a>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7ff fc68 	bl	80075b0 <selfrel_offset31>
 8007ce0:	3404      	adds	r4, #4
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	63ac      	str	r4, [r5, #56]	; 0x38
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f007 fb56 	bl	800f398 <__cxa_begin_cleanup>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	f43f af1a 	beq.w	8007b26 <__gnu_unwind_pr_common+0xce>
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	210f      	movs	r1, #15
 8007cf8:	f7ff fe68 	bl	80079cc <_Unwind_SetGR>
 8007cfc:	2007      	movs	r0, #7
 8007cfe:	e713      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007d00:	4608      	mov	r0, r1
 8007d02:	3001      	adds	r0, #1
 8007d04:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007d08:	f7ff fc52 	bl	80075b0 <selfrel_offset31>
 8007d0c:	210f      	movs	r1, #15
 8007d0e:	4602      	mov	r2, r0
 8007d10:	4648      	mov	r0, r9
 8007d12:	f7ff fe5b 	bl	80079cc <_Unwind_SetGR>
 8007d16:	4648      	mov	r0, r9
 8007d18:	462a      	mov	r2, r5
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7ff fe56 	bl	80079cc <_Unwind_SetGR>
 8007d20:	2007      	movs	r0, #7
 8007d22:	e701      	b.n	8007b28 <__gnu_unwind_pr_common+0xd0>
 8007d24:	0800fcfd 	.word	0x0800fcfd

08007d28 <__aeabi_unwind_cpp_pr0>:
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e695      	b.n	8007a58 <__gnu_unwind_pr_common>

08007d2c <__aeabi_unwind_cpp_pr1>:
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e693      	b.n	8007a58 <__gnu_unwind_pr_common>

08007d30 <__aeabi_unwind_cpp_pr2>:
 8007d30:	2302      	movs	r3, #2
 8007d32:	e691      	b.n	8007a58 <__gnu_unwind_pr_common>

08007d34 <_Unwind_VRS_Pop>:
 8007d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	b0c5      	sub	sp, #276	; 0x114
 8007d3a:	2904      	cmp	r1, #4
 8007d3c:	d80d      	bhi.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007d3e:	e8df f001 	tbb	[pc, r1]
 8007d42:	0353      	.short	0x0353
 8007d44:	310c      	.short	0x310c
 8007d46:	0f          	.byte	0x0f
 8007d47:	00          	.byte	0x00
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8007d4e:	b295      	uxth	r5, r2
 8007d50:	d162      	bne.n	8007e18 <_Unwind_VRS_Pop+0xe4>
 8007d52:	1972      	adds	r2, r6, r5
 8007d54:	2a10      	cmp	r2, #16
 8007d56:	f240 809b 	bls.w	8007e90 <_Unwind_VRS_Pop+0x15c>
 8007d5a:	2002      	movs	r0, #2
 8007d5c:	b045      	add	sp, #276	; 0x114
 8007d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1fa      	bne.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007d64:	2a10      	cmp	r2, #16
 8007d66:	d8f8      	bhi.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	06d8      	lsls	r0, r3, #27
 8007d6c:	f100 80c6 	bmi.w	8007efc <_Unwind_VRS_Pop+0x1c8>
 8007d70:	ae22      	add	r6, sp, #136	; 0x88
 8007d72:	4630      	mov	r0, r6
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	f000 f973 	bl	8008060 <__gnu_Unwind_Save_WMMXC>
 8007d7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007d7c:	9a01      	ldr	r2, [sp, #4]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2501      	movs	r5, #1
 8007d82:	fa05 f103 	lsl.w	r1, r5, r3
 8007d86:	4211      	tst	r1, r2
 8007d88:	d003      	beq.n	8007d92 <_Unwind_VRS_Pop+0x5e>
 8007d8a:	6801      	ldr	r1, [r0, #0]
 8007d8c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8007d90:	3004      	adds	r0, #4
 8007d92:	3301      	adds	r3, #1
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d1f4      	bne.n	8007d82 <_Unwind_VRS_Pop+0x4e>
 8007d98:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f000 f956 	bl	800804c <__gnu_Unwind_Restore_WMMXC>
 8007da0:	2000      	movs	r0, #0
 8007da2:	e7db      	b.n	8007d5c <_Unwind_VRS_Pop+0x28>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d1d8      	bne.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007da8:	0c15      	lsrs	r5, r2, #16
 8007daa:	b297      	uxth	r7, r2
 8007dac:	19eb      	adds	r3, r5, r7
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d8d3      	bhi.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	071e      	lsls	r6, r3, #28
 8007db6:	f100 80b5 	bmi.w	8007f24 <_Unwind_VRS_Pop+0x1f0>
 8007dba:	ae22      	add	r6, sp, #136	; 0x88
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f000 f923 	bl	8008008 <__gnu_Unwind_Save_WMMXD>
 8007dc2:	00ed      	lsls	r5, r5, #3
 8007dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007dc6:	b14f      	cbz	r7, 8007ddc <_Unwind_VRS_Pop+0xa8>
 8007dc8:	3d04      	subs	r5, #4
 8007dca:	1971      	adds	r1, r6, r5
 8007dcc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8007dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dd8:	4283      	cmp	r3, r0
 8007dda:	d1f9      	bne.n	8007dd0 <_Unwind_VRS_Pop+0x9c>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	63a3      	str	r3, [r4, #56]	; 0x38
 8007de0:	f000 f8f0 	bl	8007fc4 <__gnu_Unwind_Restore_WMMXD>
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7b9      	b.n	8007d5c <_Unwind_VRS_Pop+0x28>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1b6      	bne.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007dec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007dee:	b297      	uxth	r7, r2
 8007df0:	1d20      	adds	r0, r4, #4
 8007df2:	2601      	movs	r6, #1
 8007df4:	fa06 f103 	lsl.w	r1, r6, r3
 8007df8:	4239      	tst	r1, r7
 8007dfa:	f103 0301 	add.w	r3, r3, #1
 8007dfe:	d002      	beq.n	8007e06 <_Unwind_VRS_Pop+0xd2>
 8007e00:	6829      	ldr	r1, [r5, #0]
 8007e02:	6001      	str	r1, [r0, #0]
 8007e04:	3504      	adds	r5, #4
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	f100 0004 	add.w	r0, r0, #4
 8007e0c:	d1f2      	bne.n	8007df4 <_Unwind_VRS_Pop+0xc0>
 8007e0e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007e12:	d13b      	bne.n	8007e8c <_Unwind_VRS_Pop+0x158>
 8007e14:	63a5      	str	r5, [r4, #56]	; 0x38
 8007e16:	e7a1      	b.n	8007d5c <_Unwind_VRS_Pop+0x28>
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d19e      	bne.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007e1c:	1977      	adds	r7, r6, r5
 8007e1e:	2f20      	cmp	r7, #32
 8007e20:	d89b      	bhi.n	8007d5a <_Unwind_VRS_Pop+0x26>
 8007e22:	2e0f      	cmp	r6, #15
 8007e24:	d966      	bls.n	8007ef4 <_Unwind_VRS_Pop+0x1c0>
 8007e26:	462f      	mov	r7, r5
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	d13a      	bne.n	8007ea2 <_Unwind_VRS_Pop+0x16e>
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	2700      	movs	r7, #0
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e34:	dd72      	ble.n	8007f1c <_Unwind_VRS_Pop+0x1e8>
 8007e36:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	a844      	add	r0, sp, #272	; 0x110
 8007e3e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007e42:	388c      	subs	r0, #140	; 0x8c
 8007e44:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e48:	f840 5f04 	str.w	r5, [r0, #4]!
 8007e4c:	4291      	cmp	r1, r2
 8007e4e:	d1f9      	bne.n	8007e44 <_Unwind_VRS_Pop+0x110>
 8007e50:	4608      	mov	r0, r1
 8007e52:	b197      	cbz	r7, 8007e7a <_Unwind_VRS_Pop+0x146>
 8007e54:	2e10      	cmp	r6, #16
 8007e56:	4632      	mov	r2, r6
 8007e58:	a944      	add	r1, sp, #272	; 0x110
 8007e5a:	bf38      	it	cc
 8007e5c:	2210      	movcc	r2, #16
 8007e5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007e62:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007e66:	0079      	lsls	r1, r7, #1
 8007e68:	3a04      	subs	r2, #4
 8007e6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e6e:	f850 5b04 	ldr.w	r5, [r0], #4
 8007e72:	f842 5f04 	str.w	r5, [r2, #4]!
 8007e76:	4288      	cmp	r0, r1
 8007e78:	d1f9      	bne.n	8007e6e <_Unwind_VRS_Pop+0x13a>
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d048      	beq.n	8007f10 <_Unwind_VRS_Pop+0x1dc>
 8007e7e:	2e0f      	cmp	r6, #15
 8007e80:	63a1      	str	r1, [r4, #56]	; 0x38
 8007e82:	d933      	bls.n	8007eec <_Unwind_VRS_Pop+0x1b8>
 8007e84:	b117      	cbz	r7, 8007e8c <_Unwind_VRS_Pop+0x158>
 8007e86:	a802      	add	r0, sp, #8
 8007e88:	f000 f894 	bl	8007fb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e765      	b.n	8007d5c <_Unwind_VRS_Pop+0x28>
 8007e90:	2e0f      	cmp	r6, #15
 8007e92:	f63f af62 	bhi.w	8007d5a <_Unwind_VRS_Pop+0x26>
 8007e96:	2700      	movs	r7, #0
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	07d1      	lsls	r1, r2, #31
 8007e9c:	d417      	bmi.n	8007ece <_Unwind_VRS_Pop+0x19a>
 8007e9e:	2f00      	cmp	r7, #0
 8007ea0:	d060      	beq.n	8007f64 <_Unwind_VRS_Pop+0x230>
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	0751      	lsls	r1, r2, #29
 8007ea6:	d445      	bmi.n	8007f34 <_Unwind_VRS_Pop+0x200>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d04d      	beq.n	8007f48 <_Unwind_VRS_Pop+0x214>
 8007eac:	2e0f      	cmp	r6, #15
 8007eae:	d806      	bhi.n	8007ebe <_Unwind_VRS_Pop+0x18a>
 8007eb0:	a822      	add	r0, sp, #136	; 0x88
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	f000 f87a 	bl	8007fac <__gnu_Unwind_Save_VFP_D>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	d0b6      	beq.n	8007e2c <_Unwind_VRS_Pop+0xf8>
 8007ebe:	a802      	add	r0, sp, #8
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f000 f87b 	bl	8007fbc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	f1c6 0210 	rsb	r2, r6, #16
 8007ecc:	e7b0      	b.n	8007e30 <_Unwind_VRS_Pop+0xfc>
 8007ece:	f022 0101 	bic.w	r1, r2, #1
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	6021      	str	r1, [r4, #0]
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	4620      	mov	r0, r4
 8007eda:	d03b      	beq.n	8007f54 <_Unwind_VRS_Pop+0x220>
 8007edc:	f022 0203 	bic.w	r2, r2, #3
 8007ee0:	f840 2b48 	str.w	r2, [r0], #72
 8007ee4:	f000 f85a 	bl	8007f9c <__gnu_Unwind_Save_VFP>
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	e7d8      	b.n	8007e9e <_Unwind_VRS_Pop+0x16a>
 8007eec:	a822      	add	r0, sp, #136	; 0x88
 8007eee:	f000 f859 	bl	8007fa4 <__gnu_Unwind_Restore_VFP_D>
 8007ef2:	e7c7      	b.n	8007e84 <_Unwind_VRS_Pop+0x150>
 8007ef4:	2f10      	cmp	r7, #16
 8007ef6:	d9ce      	bls.n	8007e96 <_Unwind_VRS_Pop+0x162>
 8007ef8:	3f10      	subs	r7, #16
 8007efa:	e7cd      	b.n	8007e98 <_Unwind_VRS_Pop+0x164>
 8007efc:	f023 0310 	bic.w	r3, r3, #16
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007f06:	9201      	str	r2, [sp, #4]
 8007f08:	f000 f8aa 	bl	8008060 <__gnu_Unwind_Save_WMMXC>
 8007f0c:	9a01      	ldr	r2, [sp, #4]
 8007f0e:	e72f      	b.n	8007d70 <_Unwind_VRS_Pop+0x3c>
 8007f10:	3104      	adds	r1, #4
 8007f12:	63a1      	str	r1, [r4, #56]	; 0x38
 8007f14:	a822      	add	r0, sp, #136	; 0x88
 8007f16:	f000 f83d 	bl	8007f94 <__gnu_Unwind_Restore_VFP>
 8007f1a:	e7b7      	b.n	8007e8c <_Unwind_VRS_Pop+0x158>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	d199      	bne.n	8007e54 <_Unwind_VRS_Pop+0x120>
 8007f20:	4601      	mov	r1, r0
 8007f22:	e7aa      	b.n	8007e7a <_Unwind_VRS_Pop+0x146>
 8007f24:	f023 0308 	bic.w	r3, r3, #8
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007f2e:	f000 f86b 	bl	8008008 <__gnu_Unwind_Save_WMMXD>
 8007f32:	e742      	b.n	8007dba <_Unwind_VRS_Pop+0x86>
 8007f34:	4620      	mov	r0, r4
 8007f36:	f022 0204 	bic.w	r2, r2, #4
 8007f3a:	f840 2bd0 	str.w	r2, [r0], #208
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	f000 f83c 	bl	8007fbc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	e7af      	b.n	8007ea8 <_Unwind_VRS_Pop+0x174>
 8007f48:	a822      	add	r0, sp, #136	; 0x88
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	f000 f826 	bl	8007f9c <__gnu_Unwind_Save_VFP>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	e7b9      	b.n	8007ec8 <_Unwind_VRS_Pop+0x194>
 8007f54:	f041 0102 	orr.w	r1, r1, #2
 8007f58:	f840 1b48 	str.w	r1, [r0], #72
 8007f5c:	f000 f826 	bl	8007fac <__gnu_Unwind_Save_VFP_D>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	e79c      	b.n	8007e9e <_Unwind_VRS_Pop+0x16a>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d003      	beq.n	8007f70 <_Unwind_VRS_Pop+0x23c>
 8007f68:	2e0f      	cmp	r6, #15
 8007f6a:	f63f af5f 	bhi.w	8007e2c <_Unwind_VRS_Pop+0xf8>
 8007f6e:	e79f      	b.n	8007eb0 <_Unwind_VRS_Pop+0x17c>
 8007f70:	a822      	add	r0, sp, #136	; 0x88
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	f000 f812 	bl	8007f9c <__gnu_Unwind_Save_VFP>
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	e757      	b.n	8007e2c <_Unwind_VRS_Pop+0xf8>

08007f7c <__restore_core_regs>:
 8007f7c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007f80:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007f84:	469c      	mov	ip, r3
 8007f86:	46a6      	mov	lr, r4
 8007f88:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007f8c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007f90:	46e5      	mov	sp, ip
 8007f92:	bd00      	pop	{pc}

08007f94 <__gnu_Unwind_Restore_VFP>:
 8007f94:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop

08007f9c <__gnu_Unwind_Save_VFP>:
 8007f9c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop

08007fa4 <__gnu_Unwind_Restore_VFP_D>:
 8007fa4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop

08007fac <__gnu_Unwind_Save_VFP_D>:
 8007fac:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop

08007fb4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007fb4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007fbc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop

08007fc4 <__gnu_Unwind_Restore_WMMXD>:
 8007fc4:	ecf0 0102 	ldfe	f0, [r0], #8
 8007fc8:	ecf0 1102 	ldfe	f1, [r0], #8
 8007fcc:	ecf0 2102 	ldfe	f2, [r0], #8
 8007fd0:	ecf0 3102 	ldfe	f3, [r0], #8
 8007fd4:	ecf0 4102 	ldfe	f4, [r0], #8
 8007fd8:	ecf0 5102 	ldfe	f5, [r0], #8
 8007fdc:	ecf0 6102 	ldfe	f6, [r0], #8
 8007fe0:	ecf0 7102 	ldfe	f7, [r0], #8
 8007fe4:	ecf0 8102 	ldfp	f0, [r0], #8
 8007fe8:	ecf0 9102 	ldfp	f1, [r0], #8
 8007fec:	ecf0 a102 	ldfp	f2, [r0], #8
 8007ff0:	ecf0 b102 	ldfp	f3, [r0], #8
 8007ff4:	ecf0 c102 	ldfp	f4, [r0], #8
 8007ff8:	ecf0 d102 	ldfp	f5, [r0], #8
 8007ffc:	ecf0 e102 	ldfp	f6, [r0], #8
 8008000:	ecf0 f102 	ldfp	f7, [r0], #8
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop

08008008 <__gnu_Unwind_Save_WMMXD>:
 8008008:	ece0 0102 	stfe	f0, [r0], #8
 800800c:	ece0 1102 	stfe	f1, [r0], #8
 8008010:	ece0 2102 	stfe	f2, [r0], #8
 8008014:	ece0 3102 	stfe	f3, [r0], #8
 8008018:	ece0 4102 	stfe	f4, [r0], #8
 800801c:	ece0 5102 	stfe	f5, [r0], #8
 8008020:	ece0 6102 	stfe	f6, [r0], #8
 8008024:	ece0 7102 	stfe	f7, [r0], #8
 8008028:	ece0 8102 	stfp	f0, [r0], #8
 800802c:	ece0 9102 	stfp	f1, [r0], #8
 8008030:	ece0 a102 	stfp	f2, [r0], #8
 8008034:	ece0 b102 	stfp	f3, [r0], #8
 8008038:	ece0 c102 	stfp	f4, [r0], #8
 800803c:	ece0 d102 	stfp	f5, [r0], #8
 8008040:	ece0 e102 	stfp	f6, [r0], #8
 8008044:	ece0 f102 	stfp	f7, [r0], #8
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop

0800804c <__gnu_Unwind_Restore_WMMXC>:
 800804c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008050:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8008054:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008058:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <__gnu_Unwind_Save_WMMXC>:
 8008060:	fca0 8101 	stc2	1, cr8, [r0], #4
 8008064:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008068:	fca0 a101 	stc2	1, cr10, [r0], #4
 800806c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <_Unwind_RaiseException>:
 8008074:	46ec      	mov	ip, sp
 8008076:	b500      	push	{lr}
 8008078:	e92d 5000 	stmdb	sp!, {ip, lr}
 800807c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008088:	a901      	add	r1, sp, #4
 800808a:	f7ff fbf3 	bl	8007874 <__gnu_Unwind_RaiseException>
 800808e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008092:	b012      	add	sp, #72	; 0x48
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop

08008098 <_Unwind_Resume>:
 8008098:	46ec      	mov	ip, sp
 800809a:	b500      	push	{lr}
 800809c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080ac:	a901      	add	r1, sp, #4
 80080ae:	f7ff fc1b 	bl	80078e8 <__gnu_Unwind_Resume>
 80080b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080b6:	b012      	add	sp, #72	; 0x48
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <_Unwind_Resume_or_Rethrow>:
 80080bc:	46ec      	mov	ip, sp
 80080be:	b500      	push	{lr}
 80080c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080d0:	a901      	add	r1, sp, #4
 80080d2:	f7ff fc2b 	bl	800792c <__gnu_Unwind_Resume_or_Rethrow>
 80080d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080da:	b012      	add	sp, #72	; 0x48
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <_Unwind_ForcedUnwind>:
 80080e0:	46ec      	mov	ip, sp
 80080e2:	b500      	push	{lr}
 80080e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080f4:	ab01      	add	r3, sp, #4
 80080f6:	f7ff fbed 	bl	80078d4 <__gnu_Unwind_ForcedUnwind>
 80080fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080fe:	b012      	add	sp, #72	; 0x48
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop

08008104 <_Unwind_Backtrace>:
 8008104:	46ec      	mov	ip, sp
 8008106:	b500      	push	{lr}
 8008108:	e92d 5000 	stmdb	sp!, {ip, lr}
 800810c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008118:	aa01      	add	r2, sp, #4
 800811a:	f7ff fc65 	bl	80079e8 <__gnu_Unwind_Backtrace>
 800811e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008122:	b012      	add	sp, #72	; 0x48
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <next_unwind_byte>:
 8008128:	7a02      	ldrb	r2, [r0, #8]
 800812a:	b91a      	cbnz	r2, 8008134 <next_unwind_byte+0xc>
 800812c:	7a43      	ldrb	r3, [r0, #9]
 800812e:	b943      	cbnz	r3, 8008142 <next_unwind_byte+0x1a>
 8008130:	20b0      	movs	r0, #176	; 0xb0
 8008132:	4770      	bx	lr
 8008134:	6803      	ldr	r3, [r0, #0]
 8008136:	3a01      	subs	r2, #1
 8008138:	7202      	strb	r2, [r0, #8]
 800813a:	021a      	lsls	r2, r3, #8
 800813c:	6002      	str	r2, [r0, #0]
 800813e:	0e18      	lsrs	r0, r3, #24
 8008140:	4770      	bx	lr
 8008142:	6842      	ldr	r2, [r0, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	b410      	push	{r4}
 8008148:	7243      	strb	r3, [r0, #9]
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	2103      	movs	r1, #3
 800814e:	1d14      	adds	r4, r2, #4
 8008150:	7201      	strb	r1, [r0, #8]
 8008152:	021a      	lsls	r2, r3, #8
 8008154:	6044      	str	r4, [r0, #4]
 8008156:	6002      	str	r2, [r0, #0]
 8008158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800815c:	0e18      	lsrs	r0, r3, #24
 800815e:	4770      	bx	lr

08008160 <_Unwind_GetGR.constprop.0>:
 8008160:	b500      	push	{lr}
 8008162:	b085      	sub	sp, #20
 8008164:	aa03      	add	r2, sp, #12
 8008166:	2300      	movs	r3, #0
 8008168:	9200      	str	r2, [sp, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	220c      	movs	r2, #12
 800816e:	f7ff fbed 	bl	800794c <_Unwind_VRS_Get>
 8008172:	9803      	ldr	r0, [sp, #12]
 8008174:	b005      	add	sp, #20
 8008176:	f85d fb04 	ldr.w	pc, [sp], #4
 800817a:	bf00      	nop

0800817c <unwind_UCB_from_context>:
 800817c:	e7f0      	b.n	8008160 <_Unwind_GetGR.constprop.0>
 800817e:	bf00      	nop

08008180 <__gnu_unwind_execute>:
 8008180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008184:	4606      	mov	r6, r0
 8008186:	b085      	sub	sp, #20
 8008188:	460f      	mov	r7, r1
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	4638      	mov	r0, r7
 8008190:	f7ff ffca 	bl	8008128 <next_unwind_byte>
 8008194:	28b0      	cmp	r0, #176	; 0xb0
 8008196:	4604      	mov	r4, r0
 8008198:	d023      	beq.n	80081e2 <__gnu_unwind_execute+0x62>
 800819a:	0605      	lsls	r5, r0, #24
 800819c:	d427      	bmi.n	80081ee <__gnu_unwind_execute+0x6e>
 800819e:	2300      	movs	r3, #0
 80081a0:	f10d 090c 	add.w	r9, sp, #12
 80081a4:	4619      	mov	r1, r3
 80081a6:	0085      	lsls	r5, r0, #2
 80081a8:	220d      	movs	r2, #13
 80081aa:	f8cd 9000 	str.w	r9, [sp]
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff fbcc 	bl	800794c <_Unwind_VRS_Get>
 80081b4:	b2ed      	uxtb	r5, r5
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	f8cd 9000 	str.w	r9, [sp]
 80081bc:	0660      	lsls	r0, r4, #25
 80081be:	f105 0504 	add.w	r5, r5, #4
 80081c2:	bf4c      	ite	mi
 80081c4:	1b5d      	submi	r5, r3, r5
 80081c6:	18ed      	addpl	r5, r5, r3
 80081c8:	2300      	movs	r3, #0
 80081ca:	4619      	mov	r1, r3
 80081cc:	220d      	movs	r2, #13
 80081ce:	4630      	mov	r0, r6
 80081d0:	9503      	str	r5, [sp, #12]
 80081d2:	f7ff fbe1 	bl	8007998 <_Unwind_VRS_Set>
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffa6 	bl	8008128 <next_unwind_byte>
 80081dc:	28b0      	cmp	r0, #176	; 0xb0
 80081de:	4604      	mov	r4, r0
 80081e0:	d1db      	bne.n	800819a <__gnu_unwind_execute+0x1a>
 80081e2:	f1b8 0f00 	cmp.w	r8, #0
 80081e6:	f000 8095 	beq.w	8008314 <__gnu_unwind_execute+0x194>
 80081ea:	2000      	movs	r0, #0
 80081ec:	e01c      	b.n	8008228 <__gnu_unwind_execute+0xa8>
 80081ee:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80081f2:	2b80      	cmp	r3, #128	; 0x80
 80081f4:	d05d      	beq.n	80082b2 <__gnu_unwind_execute+0x132>
 80081f6:	2b90      	cmp	r3, #144	; 0x90
 80081f8:	d019      	beq.n	800822e <__gnu_unwind_execute+0xae>
 80081fa:	2ba0      	cmp	r3, #160	; 0xa0
 80081fc:	d02c      	beq.n	8008258 <__gnu_unwind_execute+0xd8>
 80081fe:	2bb0      	cmp	r3, #176	; 0xb0
 8008200:	d03f      	beq.n	8008282 <__gnu_unwind_execute+0x102>
 8008202:	2bc0      	cmp	r3, #192	; 0xc0
 8008204:	d06c      	beq.n	80082e0 <__gnu_unwind_execute+0x160>
 8008206:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800820a:	2bd0      	cmp	r3, #208	; 0xd0
 800820c:	d10b      	bne.n	8008226 <__gnu_unwind_execute+0xa6>
 800820e:	f000 0207 	and.w	r2, r0, #7
 8008212:	3201      	adds	r2, #1
 8008214:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008218:	2305      	movs	r3, #5
 800821a:	2101      	movs	r1, #1
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff fd89 	bl	8007d34 <_Unwind_VRS_Pop>
 8008222:	2800      	cmp	r0, #0
 8008224:	d0b3      	beq.n	800818e <__gnu_unwind_execute+0xe>
 8008226:	2009      	movs	r0, #9
 8008228:	b005      	add	sp, #20
 800822a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800822e:	f000 030d 	and.w	r3, r0, #13
 8008232:	2b0d      	cmp	r3, #13
 8008234:	d0f7      	beq.n	8008226 <__gnu_unwind_execute+0xa6>
 8008236:	ad03      	add	r5, sp, #12
 8008238:	2300      	movs	r3, #0
 800823a:	f000 020f 	and.w	r2, r0, #15
 800823e:	4619      	mov	r1, r3
 8008240:	9500      	str	r5, [sp, #0]
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff fb82 	bl	800794c <_Unwind_VRS_Get>
 8008248:	2300      	movs	r3, #0
 800824a:	9500      	str	r5, [sp, #0]
 800824c:	4619      	mov	r1, r3
 800824e:	220d      	movs	r2, #13
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff fba1 	bl	8007998 <_Unwind_VRS_Set>
 8008256:	e79a      	b.n	800818e <__gnu_unwind_execute+0xe>
 8008258:	43c2      	mvns	r2, r0
 800825a:	f002 0307 	and.w	r3, r2, #7
 800825e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008262:	411a      	asrs	r2, r3
 8008264:	0701      	lsls	r1, r0, #28
 8008266:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	bf48      	it	mi
 8008270:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8008274:	4619      	mov	r1, r3
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff fd5c 	bl	8007d34 <_Unwind_VRS_Pop>
 800827c:	2800      	cmp	r0, #0
 800827e:	d1d2      	bne.n	8008226 <__gnu_unwind_execute+0xa6>
 8008280:	e785      	b.n	800818e <__gnu_unwind_execute+0xe>
 8008282:	28b1      	cmp	r0, #177	; 0xb1
 8008284:	d057      	beq.n	8008336 <__gnu_unwind_execute+0x1b6>
 8008286:	28b2      	cmp	r0, #178	; 0xb2
 8008288:	d068      	beq.n	800835c <__gnu_unwind_execute+0x1dc>
 800828a:	28b3      	cmp	r0, #179	; 0xb3
 800828c:	f000 8095 	beq.w	80083ba <__gnu_unwind_execute+0x23a>
 8008290:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8008294:	2bb4      	cmp	r3, #180	; 0xb4
 8008296:	d0c6      	beq.n	8008226 <__gnu_unwind_execute+0xa6>
 8008298:	f000 0207 	and.w	r2, r0, #7
 800829c:	3201      	adds	r2, #1
 800829e:	2301      	movs	r3, #1
 80082a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80082a4:	4619      	mov	r1, r3
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff fd44 	bl	8007d34 <_Unwind_VRS_Pop>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d1ba      	bne.n	8008226 <__gnu_unwind_execute+0xa6>
 80082b0:	e76d      	b.n	800818e <__gnu_unwind_execute+0xe>
 80082b2:	4638      	mov	r0, r7
 80082b4:	f7ff ff38 	bl	8008128 <next_unwind_byte>
 80082b8:	0224      	lsls	r4, r4, #8
 80082ba:	4304      	orrs	r4, r0
 80082bc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80082c0:	d0b1      	beq.n	8008226 <__gnu_unwind_execute+0xa6>
 80082c2:	0124      	lsls	r4, r4, #4
 80082c4:	2300      	movs	r3, #0
 80082c6:	b2a2      	uxth	r2, r4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff fd32 	bl	8007d34 <_Unwind_VRS_Pop>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d1a8      	bne.n	8008226 <__gnu_unwind_execute+0xa6>
 80082d4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80082d8:	bf18      	it	ne
 80082da:	f04f 0801 	movne.w	r8, #1
 80082de:	e756      	b.n	800818e <__gnu_unwind_execute+0xe>
 80082e0:	28c6      	cmp	r0, #198	; 0xc6
 80082e2:	d07d      	beq.n	80083e0 <__gnu_unwind_execute+0x260>
 80082e4:	28c7      	cmp	r0, #199	; 0xc7
 80082e6:	f000 8086 	beq.w	80083f6 <__gnu_unwind_execute+0x276>
 80082ea:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80082ee:	2bc0      	cmp	r3, #192	; 0xc0
 80082f0:	f000 8094 	beq.w	800841c <__gnu_unwind_execute+0x29c>
 80082f4:	28c8      	cmp	r0, #200	; 0xc8
 80082f6:	f000 809f 	beq.w	8008438 <__gnu_unwind_execute+0x2b8>
 80082fa:	28c9      	cmp	r0, #201	; 0xc9
 80082fc:	d193      	bne.n	8008226 <__gnu_unwind_execute+0xa6>
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ff12 	bl	8008128 <next_unwind_byte>
 8008304:	0302      	lsls	r2, r0, #12
 8008306:	f000 000f 	and.w	r0, r0, #15
 800830a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800830e:	3001      	adds	r0, #1
 8008310:	4302      	orrs	r2, r0
 8008312:	e781      	b.n	8008218 <__gnu_unwind_execute+0x98>
 8008314:	ac03      	add	r4, sp, #12
 8008316:	4643      	mov	r3, r8
 8008318:	220e      	movs	r2, #14
 800831a:	4641      	mov	r1, r8
 800831c:	9400      	str	r4, [sp, #0]
 800831e:	4630      	mov	r0, r6
 8008320:	f7ff fb14 	bl	800794c <_Unwind_VRS_Get>
 8008324:	9400      	str	r4, [sp, #0]
 8008326:	4630      	mov	r0, r6
 8008328:	4643      	mov	r3, r8
 800832a:	220f      	movs	r2, #15
 800832c:	4641      	mov	r1, r8
 800832e:	f7ff fb33 	bl	8007998 <_Unwind_VRS_Set>
 8008332:	4640      	mov	r0, r8
 8008334:	e778      	b.n	8008228 <__gnu_unwind_execute+0xa8>
 8008336:	4638      	mov	r0, r7
 8008338:	f7ff fef6 	bl	8008128 <next_unwind_byte>
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f af72 	beq.w	8008226 <__gnu_unwind_execute+0xa6>
 8008342:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008346:	f47f af6e 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 800834a:	4602      	mov	r2, r0
 800834c:	4619      	mov	r1, r3
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff fcf0 	bl	8007d34 <_Unwind_VRS_Pop>
 8008354:	2800      	cmp	r0, #0
 8008356:	f47f af66 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 800835a:	e718      	b.n	800818e <__gnu_unwind_execute+0xe>
 800835c:	2300      	movs	r3, #0
 800835e:	f10d 090c 	add.w	r9, sp, #12
 8008362:	220d      	movs	r2, #13
 8008364:	4619      	mov	r1, r3
 8008366:	f8cd 9000 	str.w	r9, [sp]
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff faee 	bl	800794c <_Unwind_VRS_Get>
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff fed9 	bl	8008128 <next_unwind_byte>
 8008376:	0602      	lsls	r2, r0, #24
 8008378:	f04f 0402 	mov.w	r4, #2
 800837c:	d50c      	bpl.n	8008398 <__gnu_unwind_execute+0x218>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008384:	40a0      	lsls	r0, r4
 8008386:	4403      	add	r3, r0
 8008388:	4638      	mov	r0, r7
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	f7ff fecc 	bl	8008128 <next_unwind_byte>
 8008390:	0603      	lsls	r3, r0, #24
 8008392:	f104 0407 	add.w	r4, r4, #7
 8008396:	d4f2      	bmi.n	800837e <__gnu_unwind_execute+0x1fe>
 8008398:	9b03      	ldr	r3, [sp, #12]
 800839a:	f8cd 9000 	str.w	r9, [sp]
 800839e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80083a2:	40a2      	lsls	r2, r4
 80083a4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80083a8:	2300      	movs	r3, #0
 80083aa:	4414      	add	r4, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	220d      	movs	r2, #13
 80083b0:	4630      	mov	r0, r6
 80083b2:	9403      	str	r4, [sp, #12]
 80083b4:	f7ff faf0 	bl	8007998 <_Unwind_VRS_Set>
 80083b8:	e6e9      	b.n	800818e <__gnu_unwind_execute+0xe>
 80083ba:	4638      	mov	r0, r7
 80083bc:	f7ff feb4 	bl	8008128 <next_unwind_byte>
 80083c0:	0301      	lsls	r1, r0, #12
 80083c2:	f000 000f 	and.w	r0, r0, #15
 80083c6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80083ca:	1c42      	adds	r2, r0, #1
 80083cc:	2301      	movs	r3, #1
 80083ce:	430a      	orrs	r2, r1
 80083d0:	4630      	mov	r0, r6
 80083d2:	4619      	mov	r1, r3
 80083d4:	f7ff fcae 	bl	8007d34 <_Unwind_VRS_Pop>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f47f af24 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 80083de:	e6d6      	b.n	800818e <__gnu_unwind_execute+0xe>
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff fea1 	bl	8008128 <next_unwind_byte>
 80083e6:	0301      	lsls	r1, r0, #12
 80083e8:	f000 000f 	and.w	r0, r0, #15
 80083ec:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80083f0:	1c42      	adds	r2, r0, #1
 80083f2:	2303      	movs	r3, #3
 80083f4:	e7eb      	b.n	80083ce <__gnu_unwind_execute+0x24e>
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff fe96 	bl	8008128 <next_unwind_byte>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f43f af12 	beq.w	8008226 <__gnu_unwind_execute+0xa6>
 8008402:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008406:	f47f af0e 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 800840a:	4602      	mov	r2, r0
 800840c:	2104      	movs	r1, #4
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff fc90 	bl	8007d34 <_Unwind_VRS_Pop>
 8008414:	2800      	cmp	r0, #0
 8008416:	f47f af06 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 800841a:	e6b8      	b.n	800818e <__gnu_unwind_execute+0xe>
 800841c:	f000 020f 	and.w	r2, r0, #15
 8008420:	3201      	adds	r2, #1
 8008422:	2303      	movs	r3, #3
 8008424:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008428:	4619      	mov	r1, r3
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff fc82 	bl	8007d34 <_Unwind_VRS_Pop>
 8008430:	2800      	cmp	r0, #0
 8008432:	f47f aef8 	bne.w	8008226 <__gnu_unwind_execute+0xa6>
 8008436:	e6aa      	b.n	800818e <__gnu_unwind_execute+0xe>
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff fe75 	bl	8008128 <next_unwind_byte>
 800843e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008442:	f000 030f 	and.w	r3, r0, #15
 8008446:	3210      	adds	r2, #16
 8008448:	3301      	adds	r3, #1
 800844a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800844e:	e6e3      	b.n	8008218 <__gnu_unwind_execute+0x98>

08008450 <__gnu_unwind_frame>:
 8008450:	b510      	push	{r4, lr}
 8008452:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008454:	b084      	sub	sp, #16
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	2003      	movs	r0, #3
 800845a:	f88d 000c 	strb.w	r0, [sp, #12]
 800845e:	79dc      	ldrb	r4, [r3, #7]
 8008460:	f88d 400d 	strb.w	r4, [sp, #13]
 8008464:	0212      	lsls	r2, r2, #8
 8008466:	3308      	adds	r3, #8
 8008468:	4608      	mov	r0, r1
 800846a:	a901      	add	r1, sp, #4
 800846c:	9201      	str	r2, [sp, #4]
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	f7ff fe86 	bl	8008180 <__gnu_unwind_execute>
 8008474:	b004      	add	sp, #16
 8008476:	bd10      	pop	{r4, pc}

08008478 <_Unwind_GetRegionStart>:
 8008478:	b508      	push	{r3, lr}
 800847a:	f7ff fe7f 	bl	800817c <unwind_UCB_from_context>
 800847e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008480:	bd08      	pop	{r3, pc}
 8008482:	bf00      	nop

08008484 <_Unwind_GetLanguageSpecificData>:
 8008484:	b508      	push	{r3, lr}
 8008486:	f7ff fe79 	bl	800817c <unwind_UCB_from_context>
 800848a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800848c:	79c3      	ldrb	r3, [r0, #7]
 800848e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008492:	3008      	adds	r0, #8
 8008494:	bd08      	pop	{r3, pc}
 8008496:	bf00      	nop

08008498 <_Unwind_GetTextRelBase>:
 8008498:	b508      	push	{r3, lr}
 800849a:	f008 f93b 	bl	8010714 <abort>
 800849e:	bf00      	nop

080084a0 <_Unwind_GetDataRelBase>:
 80084a0:	b508      	push	{r3, lr}
 80084a2:	f7ff fff9 	bl	8008498 <_Unwind_GetTextRelBase>
 80084a6:	bf00      	nop

080084a8 <__aeabi_idiv0>:
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop

080084ac <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084ac:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <HAL_Init+0x28>)
 80084ae:	6813      	ldr	r3, [r2, #0]
 80084b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80084b4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084b6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084ba:	f000 f833 	bl	8008524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80084be:	2000      	movs	r0, #0
 80084c0:	f006 f8b0 	bl	800e624 <HAL_InitTick>
 80084c4:	4604      	mov	r4, r0
 80084c6:	b918      	cbnz	r0, 80084d0 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80084c8:	f006 f80a 	bl	800e4e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80084cc:	4620      	mov	r0, r4
 80084ce:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80084d0:	2401      	movs	r4, #1
 80084d2:	e7fb      	b.n	80084cc <HAL_Init+0x20>
 80084d4:	40022000 	.word	0x40022000

080084d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80084d8:	4a03      	ldr	r2, [pc, #12]	; (80084e8 <HAL_IncTick+0x10>)
 80084da:	4904      	ldr	r1, [pc, #16]	; (80084ec <HAL_IncTick+0x14>)
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	6809      	ldr	r1, [r1, #0]
 80084e0:	440b      	add	r3, r1
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	20001e70 	.word	0x20001e70
 80084ec:	20000020 	.word	0x20000020

080084f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80084f0:	4b01      	ldr	r3, [pc, #4]	; (80084f8 <HAL_GetTick+0x8>)
 80084f2:	6818      	ldr	r0, [r3, #0]
}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20001e70 	.word	0x20001e70

080084fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008500:	f7ff fff6 	bl	80084f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008504:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008506:	bf1c      	itt	ne
 8008508:	4b05      	ldrne	r3, [pc, #20]	; (8008520 <HAL_Delay+0x24>)
 800850a:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800850c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800850e:	bf18      	it	ne
 8008510:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008512:	f7ff ffed 	bl	80084f0 <HAL_GetTick>
 8008516:	1b40      	subs	r0, r0, r5
 8008518:	4284      	cmp	r4, r0
 800851a:	d8fa      	bhi.n	8008512 <HAL_Delay+0x16>
  {
  }
}
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	bf00      	nop
 8008520:	20000020 	.word	0x20000020

08008524 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008524:	4a07      	ldr	r2, [pc, #28]	; (8008544 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008526:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008528:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800852c:	041b      	lsls	r3, r3, #16
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008534:	0200      	lsls	r0, r0, #8
 8008536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800853a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800853e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008540:	60d3      	str	r3, [r2, #12]
 8008542:	4770      	bx	lr
 8008544:	e000ed00 	.word	0xe000ed00

08008548 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800854a:	b530      	push	{r4, r5, lr}
 800854c:	68dc      	ldr	r4, [r3, #12]
 800854e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008552:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008556:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008558:	2b04      	cmp	r3, #4
 800855a:	bf28      	it	cs
 800855c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800855e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008560:	f04f 0501 	mov.w	r5, #1
 8008564:	fa05 f303 	lsl.w	r3, r5, r3
 8008568:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800856c:	bf8c      	ite	hi
 800856e:	3c03      	subhi	r4, #3
 8008570:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008572:	4019      	ands	r1, r3
 8008574:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008576:	fa05 f404 	lsl.w	r4, r5, r4
 800857a:	3c01      	subs	r4, #1
 800857c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800857e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008580:	ea42 0201 	orr.w	r2, r2, r1
 8008584:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008588:	bfad      	iteet	ge
 800858a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800858e:	f000 000f 	andlt.w	r0, r0, #15
 8008592:	4b06      	ldrlt	r3, [pc, #24]	; (80085ac <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008594:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008598:	bfb5      	itete	lt
 800859a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800859c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800859e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085a0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80085a4:	bd30      	pop	{r4, r5, pc}
 80085a6:	bf00      	nop
 80085a8:	e000ed00 	.word	0xe000ed00
 80085ac:	e000ed14 	.word	0xe000ed14

080085b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80085b0:	2800      	cmp	r0, #0
 80085b2:	db08      	blt.n	80085c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085b4:	0942      	lsrs	r2, r0, #5
 80085b6:	2301      	movs	r3, #1
 80085b8:	f000 001f 	and.w	r0, r0, #31
 80085bc:	fa03 f000 	lsl.w	r0, r3, r0
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <HAL_NVIC_EnableIRQ+0x18>)
 80085c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80085c6:	4770      	bx	lr
 80085c8:	e000e100 	.word	0xe000e100

080085cc <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80085cc:	b911      	cbnz	r1, 80085d4 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80085ce:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085d0:	4608      	mov	r0, r1
      break;
 80085d2:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80085d4:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80085d6:	4770      	bx	lr

080085d8 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80085d8:	b110      	cbz	r0, 80085e0 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80085da:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80085dc:	2000      	movs	r0, #0
 80085de:	4770      	bx	lr
    return HAL_ERROR;
 80085e0:	2001      	movs	r0, #1
  }
}
 80085e2:	4770      	bx	lr

080085e4 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80085e4:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80085e6:	2201      	movs	r2, #1
 80085e8:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80085ec:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80085f0:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80085f2:	015b      	lsls	r3, r3, #5
 80085f4:	4906      	ldr	r1, [pc, #24]	; (8008610 <HAL_EXTI_IRQHandler+0x2c>)
{
 80085f6:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 80085f8:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 80085fa:	4222      	tst	r2, r4
 80085fc:	d005      	beq.n	800860a <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80085fe:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008600:	6843      	ldr	r3, [r0, #4]
 8008602:	b113      	cbz	r3, 800860a <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8008604:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8008608:	4718      	bx	r3
}
 800860a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	40010414 	.word	0x40010414

08008614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800861a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800861c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087c8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008620:	4c67      	ldr	r4, [pc, #412]	; (80087c0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008622:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8008624:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008626:	9a01      	ldr	r2, [sp, #4]
 8008628:	40da      	lsrs	r2, r3
 800862a:	d102      	bne.n	8008632 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800862c:	b005      	add	sp, #20
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008632:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8008634:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008636:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8008638:	ea12 0e06 	ands.w	lr, r2, r6
 800863c:	f000 80b1 	beq.w	80087a2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008640:	684a      	ldr	r2, [r1, #4]
 8008642:	f022 0710 	bic.w	r7, r2, #16
 8008646:	2f02      	cmp	r7, #2
 8008648:	d116      	bne.n	8008678 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800864a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800864e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008652:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8008656:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800865a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800865e:	f04f 0c0f 	mov.w	ip, #15
 8008662:	fa0c fc0a 	lsl.w	ip, ip, sl
 8008666:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800866a:	690d      	ldr	r5, [r1, #16]
 800866c:	fa05 f50a 	lsl.w	r5, r5, sl
 8008670:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8008674:	f8c9 5020 	str.w	r5, [r9, #32]
 8008678:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800867c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800867e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008682:	fa05 f50c 	lsl.w	r5, r5, ip
 8008686:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008688:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800868c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008690:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008694:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008696:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800869a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800869c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086a0:	d811      	bhi.n	80086c6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80086a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80086a4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80086a8:	68cf      	ldr	r7, [r1, #12]
 80086aa:	fa07 f70c 	lsl.w	r7, r7, ip
 80086ae:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80086b2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80086b4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086b6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80086ba:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80086be:	409f      	lsls	r7, r3
 80086c0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80086c4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80086c6:	f1ba 0f03 	cmp.w	sl, #3
 80086ca:	d107      	bne.n	80086dc <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80086cc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80086ce:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80086d2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80086d6:	409f      	lsls	r7, r3
 80086d8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80086da:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80086dc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80086de:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80086e0:	688e      	ldr	r6, [r1, #8]
 80086e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80086e6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80086e8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086ea:	00d5      	lsls	r5, r2, #3
 80086ec:	d559      	bpl.n	80087a2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ee:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80086f2:	f045 0501 	orr.w	r5, r5, #1
 80086f6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80086fa:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80086fe:	f023 0603 	bic.w	r6, r3, #3
 8008702:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8008706:	f005 0501 	and.w	r5, r5, #1
 800870a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800870e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008710:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008714:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8008716:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008718:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800871c:	270f      	movs	r7, #15
 800871e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008722:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008726:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800872a:	d03c      	beq.n	80087a6 <HAL_GPIO_Init+0x192>
 800872c:	4d25      	ldr	r5, [pc, #148]	; (80087c4 <HAL_GPIO_Init+0x1b0>)
 800872e:	42a8      	cmp	r0, r5
 8008730:	d03b      	beq.n	80087aa <HAL_GPIO_Init+0x196>
 8008732:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008736:	42a8      	cmp	r0, r5
 8008738:	d039      	beq.n	80087ae <HAL_GPIO_Init+0x19a>
 800873a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800873e:	42a8      	cmp	r0, r5
 8008740:	d037      	beq.n	80087b2 <HAL_GPIO_Init+0x19e>
 8008742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008746:	42a8      	cmp	r0, r5
 8008748:	d035      	beq.n	80087b6 <HAL_GPIO_Init+0x1a2>
 800874a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800874e:	42a8      	cmp	r0, r5
 8008750:	d033      	beq.n	80087ba <HAL_GPIO_Init+0x1a6>
 8008752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008756:	42a8      	cmp	r0, r5
 8008758:	bf14      	ite	ne
 800875a:	2507      	movne	r5, #7
 800875c:	2506      	moveq	r5, #6
 800875e:	fa05 f50c 	lsl.w	r5, r5, ip
 8008762:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008764:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8008766:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8008768:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800876c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800876e:	bf54      	ite	pl
 8008770:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008772:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8008776:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8008778:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800877a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 800877c:	bf54      	ite	pl
 800877e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8008780:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8008784:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8008786:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008788:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800878a:	bf54      	ite	pl
 800878c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800878e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8008792:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8008794:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008796:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8008798:	bf54      	ite	pl
 800879a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800879c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80087a0:	60e5      	str	r5, [r4, #12]
    position++;
 80087a2:	3301      	adds	r3, #1
 80087a4:	e73f      	b.n	8008626 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80087a6:	2500      	movs	r5, #0
 80087a8:	e7d9      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087aa:	2501      	movs	r5, #1
 80087ac:	e7d7      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087ae:	2502      	movs	r5, #2
 80087b0:	e7d5      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087b2:	2503      	movs	r5, #3
 80087b4:	e7d3      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087b6:	2504      	movs	r5, #4
 80087b8:	e7d1      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087ba:	2505      	movs	r5, #5
 80087bc:	e7cf      	b.n	800875e <HAL_GPIO_Init+0x14a>
 80087be:	bf00      	nop
 80087c0:	40010400 	.word	0x40010400
 80087c4:	48000400 	.word	0x48000400
 80087c8:	40021000 	.word	0x40021000

080087cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80087d0:	4c40      	ldr	r4, [pc, #256]	; (80088d4 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80087d2:	f8df b108 	ldr.w	fp, [pc, #264]	; 80088dc <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 80087d6:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80087d8:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80087dc:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 80087e0:	fa31 f203 	lsrs.w	r2, r1, r3
 80087e4:	d101      	bne.n	80087ea <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80087ea:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 80087ee:	ea11 0605 	ands.w	r6, r1, r5
 80087f2:	d060      	beq.n	80088b6 <HAL_GPIO_DeInit+0xea>
 80087f4:	f023 0703 	bic.w	r7, r3, #3
 80087f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80087fc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008800:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8008804:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008806:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800880a:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800880e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008812:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008816:	d050      	beq.n	80088ba <HAL_GPIO_DeInit+0xee>
 8008818:	4a2f      	ldr	r2, [pc, #188]	; (80088d8 <HAL_GPIO_DeInit+0x10c>)
 800881a:	4290      	cmp	r0, r2
 800881c:	d04f      	beq.n	80088be <HAL_GPIO_DeInit+0xf2>
 800881e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008822:	4290      	cmp	r0, r2
 8008824:	d04d      	beq.n	80088c2 <HAL_GPIO_DeInit+0xf6>
 8008826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800882a:	4290      	cmp	r0, r2
 800882c:	d04b      	beq.n	80088c6 <HAL_GPIO_DeInit+0xfa>
 800882e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008832:	4290      	cmp	r0, r2
 8008834:	d049      	beq.n	80088ca <HAL_GPIO_DeInit+0xfe>
 8008836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800883a:	4290      	cmp	r0, r2
 800883c:	d047      	beq.n	80088ce <HAL_GPIO_DeInit+0x102>
 800883e:	4558      	cmp	r0, fp
 8008840:	bf0c      	ite	eq
 8008842:	2206      	moveq	r2, #6
 8008844:	2207      	movne	r2, #7
 8008846:	fa02 f20e 	lsl.w	r2, r2, lr
 800884a:	4594      	cmp	ip, r2
 800884c:	d110      	bne.n	8008870 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	43f6      	mvns	r6, r6
 8008852:	4032      	ands	r2, r6
 8008854:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	4032      	ands	r2, r6
 800885a:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800885c:	68a2      	ldr	r2, [r4, #8]
 800885e:	4032      	ands	r2, r6
 8008860:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008862:	68e2      	ldr	r2, [r4, #12]
 8008864:	4016      	ands	r6, r2
 8008866:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	ea22 0209 	bic.w	r2, r2, r9
 800886e:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008870:	6806      	ldr	r6, [r0, #0]
 8008872:	2703      	movs	r7, #3
 8008874:	005a      	lsls	r2, r3, #1
 8008876:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800887a:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800887e:	4316      	orrs	r6, r2
 8008880:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008884:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008886:	f003 0607 	and.w	r6, r3, #7
 800888a:	f8d7 e020 	ldr.w	lr, [r7, #32]
 800888e:	00b6      	lsls	r6, r6, #2
 8008890:	fa08 f606 	lsl.w	r6, r8, r6
 8008894:	ea2e 0606 	bic.w	r6, lr, r6
 8008898:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800889a:	6886      	ldr	r6, [r0, #8]
 800889c:	43d2      	mvns	r2, r2
 800889e:	4016      	ands	r6, r2
 80088a0:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80088a2:	6846      	ldr	r6, [r0, #4]
 80088a4:	43ed      	mvns	r5, r5
 80088a6:	402e      	ands	r6, r5
 80088a8:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80088aa:	68c6      	ldr	r6, [r0, #12]
 80088ac:	4032      	ands	r2, r6
 80088ae:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80088b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80088b2:	4015      	ands	r5, r2
 80088b4:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 80088b6:	3301      	adds	r3, #1
 80088b8:	e792      	b.n	80087e0 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80088ba:	2200      	movs	r2, #0
 80088bc:	e7c3      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088be:	2201      	movs	r2, #1
 80088c0:	e7c1      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088c2:	2202      	movs	r2, #2
 80088c4:	e7bf      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088c6:	2203      	movs	r2, #3
 80088c8:	e7bd      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088ca:	2204      	movs	r2, #4
 80088cc:	e7bb      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088ce:	2205      	movs	r2, #5
 80088d0:	e7b9      	b.n	8008846 <HAL_GPIO_DeInit+0x7a>
 80088d2:	bf00      	nop
 80088d4:	40010400 	.word	0x40010400
 80088d8:	48000400 	.word	0x48000400
 80088dc:	48001800 	.word	0x48001800

080088e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80088e0:	6903      	ldr	r3, [r0, #16]
 80088e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80088e4:	bf14      	ite	ne
 80088e6:	2001      	movne	r0, #1
 80088e8:	2000      	moveq	r0, #0
 80088ea:	4770      	bx	lr

080088ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088ec:	b10a      	cbz	r2, 80088f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088ee:	6181      	str	r1, [r0, #24]
 80088f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088f2:	6281      	str	r1, [r0, #40]	; 0x28
 80088f4:	4770      	bx	lr

080088f6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80088f6:	6943      	ldr	r3, [r0, #20]
 80088f8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088fa:	bf14      	ite	ne
 80088fc:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088fe:	6181      	streq	r1, [r0, #24]
 8008900:	4770      	bx	lr
	...

08008904 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <HAL_PWREx_GetVoltageRange+0xc>)
 8008906:	6818      	ldr	r0, [r3, #0]
#endif
}
 8008908:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40007000 	.word	0x40007000

08008914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008914:	4b17      	ldr	r3, [pc, #92]	; (8008974 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008916:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008918:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800891c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008920:	d11c      	bne.n	800895c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008922:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008926:	d015      	beq.n	8008954 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800892e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008932:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008934:	4a10      	ldr	r2, [pc, #64]	; (8008978 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8008936:	6811      	ldr	r1, [r2, #0]
 8008938:	2232      	movs	r2, #50	; 0x32
 800893a:	434a      	muls	r2, r1
 800893c:	490f      	ldr	r1, [pc, #60]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x68>)
 800893e:	fbb2 f2f1 	udiv	r2, r2, r1
 8008942:	4619      	mov	r1, r3
 8008944:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008946:	6958      	ldr	r0, [r3, #20]
 8008948:	0540      	lsls	r0, r0, #21
 800894a:	d500      	bpl.n	800894e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800894c:	b922      	cbnz	r2, 8008958 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800894e:	694b      	ldr	r3, [r1, #20]
 8008950:	055b      	lsls	r3, r3, #21
 8008952:	d40d      	bmi.n	8008970 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008954:	2000      	movs	r0, #0
 8008956:	4770      	bx	lr
        wait_loop_index--;
 8008958:	3a01      	subs	r2, #1
 800895a:	e7f4      	b.n	8008946 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800895c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008960:	bf1f      	itttt	ne
 8008962:	681a      	ldrne	r2, [r3, #0]
 8008964:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8008968:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800896c:	601a      	strne	r2, [r3, #0]
 800896e:	e7f1      	b.n	8008954 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8008970:	2003      	movs	r0, #3
}
 8008972:	4770      	bx	lr
 8008974:	40007000 	.word	0x40007000
 8008978:	2000003c 	.word	0x2000003c
 800897c:	000f4240 	.word	0x000f4240

08008980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008980:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008982:	4d1e      	ldr	r5, [pc, #120]	; (80089fc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8008984:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008986:	00da      	lsls	r2, r3, #3
{
 8008988:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800898a:	d518      	bpl.n	80089be <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800898c:	f7ff ffba 	bl	8008904 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008990:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008994:	d123      	bne.n	80089de <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008996:	2c80      	cmp	r4, #128	; 0x80
 8008998:	d929      	bls.n	80089ee <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800899a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800899c:	bf8c      	ite	hi
 800899e:	2002      	movhi	r0, #2
 80089a0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80089a2:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	4303      	orrs	r3, r0
 80089ac:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80089b4:	1a18      	subs	r0, r3, r0
 80089b6:	bf18      	it	ne
 80089b8:	2001      	movne	r0, #1
 80089ba:	b003      	add	sp, #12
 80089bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80089be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80089c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c4:	65ab      	str	r3, [r5, #88]	; 0x58
 80089c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80089c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80089d0:	f7ff ff98 	bl	8008904 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80089d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80089d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089da:	65ab      	str	r3, [r5, #88]	; 0x58
 80089dc:	e7d8      	b.n	8008990 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80089de:	2c80      	cmp	r4, #128	; 0x80
 80089e0:	d807      	bhi.n	80089f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80089e2:	d008      	beq.n	80089f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80089e4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80089e8:	4258      	negs	r0, r3
 80089ea:	4158      	adcs	r0, r3
 80089ec:	e7d9      	b.n	80089a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80089ee:	2000      	movs	r0, #0
 80089f0:	e7d7      	b.n	80089a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80089f2:	2003      	movs	r0, #3
 80089f4:	e7d5      	b.n	80089a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80089f6:	2002      	movs	r0, #2
 80089f8:	e7d3      	b.n	80089a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80089fa:	bf00      	nop
 80089fc:	40021000 	.word	0x40021000
 8008a00:	40022000 	.word	0x40022000

08008a04 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a04:	4b22      	ldr	r3, [pc, #136]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8008a06:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a08:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a0a:	f012 020c 	ands.w	r2, r2, #12
 8008a0e:	d005      	beq.n	8008a1c <HAL_RCC_GetSysClockFreq+0x18>
 8008a10:	2a0c      	cmp	r2, #12
 8008a12:	d115      	bne.n	8008a40 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a14:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008a18:	2901      	cmp	r1, #1
 8008a1a:	d118      	bne.n	8008a4e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008a1c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8008a1e:	481d      	ldr	r0, [pc, #116]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008a20:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008a22:	bf55      	itete	pl
 8008a24:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008a28:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008a2a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008a2e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8008a32:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a36:	b34a      	cbz	r2, 8008a8c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008a38:	2a0c      	cmp	r2, #12
 8008a3a:	d009      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0x4c>
 8008a3c:	2000      	movs	r0, #0
  return sysclockfreq;
 8008a3e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008a40:	2a04      	cmp	r2, #4
 8008a42:	d022      	beq.n	8008a8a <HAL_RCC_GetSysClockFreq+0x86>
 8008a44:	2a08      	cmp	r2, #8
 8008a46:	4814      	ldr	r0, [pc, #80]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a48:	bf18      	it	ne
 8008a4a:	2000      	movne	r0, #0
 8008a4c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a4e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8008a56:	2a02      	cmp	r2, #2
 8008a58:	d015      	beq.n	8008a86 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8008a5a:	490f      	ldr	r1, [pc, #60]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a5c:	2a03      	cmp	r2, #3
 8008a5e:	bf08      	it	eq
 8008a60:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a62:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008a64:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008a6c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a70:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a74:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008a76:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a78:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a7a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008a7c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8008a80:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a84:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8008a86:	4805      	ldr	r0, [pc, #20]	; (8008a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8008a88:	e7eb      	b.n	8008a62 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8008a8a:	4804      	ldr	r0, [pc, #16]	; (8008a9c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	40021000 	.word	0x40021000
 8008a94:	08016874 	.word	0x08016874
 8008a98:	007a1200 	.word	0x007a1200
 8008a9c:	00f42400 	.word	0x00f42400

08008aa0 <HAL_RCC_OscConfig>:
{
 8008aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	b918      	cbnz	r0, 8008ab0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8008aa8:	2001      	movs	r0, #1
}
 8008aaa:	b003      	add	sp, #12
 8008aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ab0:	4ca7      	ldr	r4, [pc, #668]	; (8008d50 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ab2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ab4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ab6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ab8:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aba:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008abe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ac2:	d53d      	bpl.n	8008b40 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008ac4:	b11e      	cbz	r6, 8008ace <HAL_RCC_OscConfig+0x2e>
 8008ac6:	2e0c      	cmp	r6, #12
 8008ac8:	d166      	bne.n	8008b98 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008aca:	2f01      	cmp	r7, #1
 8008acc:	d164      	bne.n	8008b98 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	0799      	lsls	r1, r3, #30
 8008ad2:	d502      	bpl.n	8008ada <HAL_RCC_OscConfig+0x3a>
 8008ad4:	69ab      	ldr	r3, [r5, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0e6      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	6a28      	ldr	r0, [r5, #32]
 8008ade:	071a      	lsls	r2, r3, #28
 8008ae0:	bf56      	itet	pl
 8008ae2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8008ae6:	6823      	ldrmi	r3, [r4, #0]
 8008ae8:	091b      	lsrpl	r3, r3, #4
 8008aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aee:	4283      	cmp	r3, r0
 8008af0:	d23b      	bcs.n	8008b6a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008af2:	f7ff ff45 	bl	8008980 <RCC_SetFlashLatencyFromMSIRange>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1d6      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f043 0308 	orr.w	r3, r3, #8
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	6a2a      	ldr	r2, [r5, #32]
 8008b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	69ea      	ldr	r2, [r5, #28]
 8008b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b1a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b1c:	f7ff ff72 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 8008b20:	68a3      	ldr	r3, [r4, #8]
 8008b22:	4a8c      	ldr	r2, [pc, #560]	; (8008d54 <HAL_RCC_OscConfig+0x2b4>)
 8008b24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008b28:	5cd3      	ldrb	r3, [r2, r3]
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	40d8      	lsrs	r0, r3
 8008b30:	4b89      	ldr	r3, [pc, #548]	; (8008d58 <HAL_RCC_OscConfig+0x2b8>)
 8008b32:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8008b34:	4b89      	ldr	r3, [pc, #548]	; (8008d5c <HAL_RCC_OscConfig+0x2bc>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	f005 fd74 	bl	800e624 <HAL_InitTick>
        if(status != HAL_OK)
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d1b4      	bne.n	8008aaa <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	07d9      	lsls	r1, r3, #31
 8008b44:	d45f      	bmi.n	8008c06 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	079a      	lsls	r2, r3, #30
 8008b4a:	f100 809e 	bmi.w	8008c8a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	0719      	lsls	r1, r3, #28
 8008b52:	f100 80d2 	bmi.w	8008cfa <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	075a      	lsls	r2, r3, #29
 8008b5a:	f100 8101 	bmi.w	8008d60 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f040 816a 	bne.w	8008e3a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8008b66:	2000      	movs	r0, #0
 8008b68:	e79f      	b.n	8008aaa <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f043 0308 	orr.w	r3, r3, #8
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b78:	4303      	orrs	r3, r0
 8008b7a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	69ea      	ldr	r2, [r5, #28]
 8008b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b88:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d1c6      	bne.n	8008b1c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b8e:	f7ff fef7 	bl	8008980 <RCC_SetFlashLatencyFromMSIRange>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0c2      	beq.n	8008b1c <HAL_RCC_OscConfig+0x7c>
 8008b96:	e787      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008b98:	69ab      	ldr	r3, [r5, #24]
 8008b9a:	b31b      	cbz	r3, 8008be4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008ba4:	f7ff fca4 	bl	80084f0 <HAL_GetTick>
 8008ba8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	079b      	lsls	r3, r3, #30
 8008bae:	d511      	bpl.n	8008bd4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	f043 0308 	orr.w	r3, r3, #8
 8008bb6:	6023      	str	r3, [r4, #0]
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	6a2a      	ldr	r2, [r5, #32]
 8008bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	69ea      	ldr	r2, [r5, #28]
 8008bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bd0:	6063      	str	r3, [r4, #4]
 8008bd2:	e7b5      	b.n	8008b40 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008bd4:	f7ff fc8c 	bl	80084f0 <HAL_GetTick>
 8008bd8:	eba0 0008 	sub.w	r0, r0, r8
 8008bdc:	2802      	cmp	r0, #2
 8008bde:	d9e4      	bls.n	8008baa <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8008be0:	2003      	movs	r0, #3
 8008be2:	e762      	b.n	8008aaa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008bec:	f7ff fc80 	bl	80084f0 <HAL_GetTick>
 8008bf0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	0798      	lsls	r0, r3, #30
 8008bf6:	d5a3      	bpl.n	8008b40 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008bf8:	f7ff fc7a 	bl	80084f0 <HAL_GetTick>
 8008bfc:	eba0 0008 	sub.w	r0, r0, r8
 8008c00:	2802      	cmp	r0, #2
 8008c02:	d9f6      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x152>
 8008c04:	e7ec      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008c06:	2e08      	cmp	r6, #8
 8008c08:	d003      	beq.n	8008c12 <HAL_RCC_OscConfig+0x172>
 8008c0a:	2e0c      	cmp	r6, #12
 8008c0c:	d108      	bne.n	8008c20 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008c0e:	2f03      	cmp	r7, #3
 8008c10:	d106      	bne.n	8008c20 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	039b      	lsls	r3, r3, #14
 8008c16:	d596      	bpl.n	8008b46 <HAL_RCC_OscConfig+0xa6>
 8008c18:	686b      	ldr	r3, [r5, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d193      	bne.n	8008b46 <HAL_RCC_OscConfig+0xa6>
 8008c1e:	e743      	b.n	8008aa8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c20:	686b      	ldr	r3, [r5, #4]
 8008c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c26:	d110      	bne.n	8008c4a <HAL_RCC_OscConfig+0x1aa>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008c30:	f7ff fc5e 	bl	80084f0 <HAL_GetTick>
 8008c34:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	0398      	lsls	r0, r3, #14
 8008c3a:	d484      	bmi.n	8008b46 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c3c:	f7ff fc58 	bl	80084f0 <HAL_GetTick>
 8008c40:	eba0 0008 	sub.w	r0, r0, r8
 8008c44:	2864      	cmp	r0, #100	; 0x64
 8008c46:	d9f6      	bls.n	8008c36 <HAL_RCC_OscConfig+0x196>
 8008c48:	e7ca      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c4e:	d104      	bne.n	8008c5a <HAL_RCC_OscConfig+0x1ba>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	e7e6      	b.n	8008c28 <HAL_RCC_OscConfig+0x188>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c68:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8008c6e:	f7ff fc3f 	bl	80084f0 <HAL_GetTick>
 8008c72:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	0399      	lsls	r1, r3, #14
 8008c78:	f57f af65 	bpl.w	8008b46 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c7c:	f7ff fc38 	bl	80084f0 <HAL_GetTick>
 8008c80:	eba0 0008 	sub.w	r0, r0, r8
 8008c84:	2864      	cmp	r0, #100	; 0x64
 8008c86:	d9f5      	bls.n	8008c74 <HAL_RCC_OscConfig+0x1d4>
 8008c88:	e7aa      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008c8a:	2e04      	cmp	r6, #4
 8008c8c:	d003      	beq.n	8008c96 <HAL_RCC_OscConfig+0x1f6>
 8008c8e:	2e0c      	cmp	r6, #12
 8008c90:	d110      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c92:	2f02      	cmp	r7, #2
 8008c94:	d10e      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	055a      	lsls	r2, r3, #21
 8008c9a:	d503      	bpl.n	8008ca4 <HAL_RCC_OscConfig+0x204>
 8008c9c:	68eb      	ldr	r3, [r5, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f43f af02 	beq.w	8008aa8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	692a      	ldr	r2, [r5, #16]
 8008ca8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8008cac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008cb0:	6063      	str	r3, [r4, #4]
 8008cb2:	e74c      	b.n	8008b4e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008cb4:	68eb      	ldr	r3, [r5, #12]
 8008cb6:	b17b      	cbz	r3, 8008cd8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008cc0:	f7ff fc16 	bl	80084f0 <HAL_GetTick>
 8008cc4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	055b      	lsls	r3, r3, #21
 8008cca:	d4eb      	bmi.n	8008ca4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ccc:	f7ff fc10 	bl	80084f0 <HAL_GetTick>
 8008cd0:	1bc0      	subs	r0, r0, r7
 8008cd2:	2802      	cmp	r0, #2
 8008cd4:	d9f7      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x226>
 8008cd6:	e783      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008ce0:	f7ff fc06 	bl	80084f0 <HAL_GetTick>
 8008ce4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	0558      	lsls	r0, r3, #21
 8008cea:	f57f af30 	bpl.w	8008b4e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cee:	f7ff fbff 	bl	80084f0 <HAL_GetTick>
 8008cf2:	1bc0      	subs	r0, r0, r7
 8008cf4:	2802      	cmp	r0, #2
 8008cf6:	d9f6      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x246>
 8008cf8:	e772      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cfa:	696b      	ldr	r3, [r5, #20]
 8008cfc:	b19b      	cbz	r3, 8008d26 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8008cfe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008d0a:	f7ff fbf1 	bl	80084f0 <HAL_GetTick>
 8008d0e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d10:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008d14:	079b      	lsls	r3, r3, #30
 8008d16:	f53f af1e 	bmi.w	8008b56 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d1a:	f7ff fbe9 	bl	80084f0 <HAL_GetTick>
 8008d1e:	1bc0      	subs	r0, r0, r7
 8008d20:	2802      	cmp	r0, #2
 8008d22:	d9f5      	bls.n	8008d10 <HAL_RCC_OscConfig+0x270>
 8008d24:	e75c      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8008d26:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008d32:	f7ff fbdd 	bl	80084f0 <HAL_GetTick>
 8008d36:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008d3c:	0798      	lsls	r0, r3, #30
 8008d3e:	f57f af0a 	bpl.w	8008b56 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d42:	f7ff fbd5 	bl	80084f0 <HAL_GetTick>
 8008d46:	1bc0      	subs	r0, r0, r7
 8008d48:	2802      	cmp	r0, #2
 8008d4a:	d9f5      	bls.n	8008d38 <HAL_RCC_OscConfig+0x298>
 8008d4c:	e748      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
 8008d4e:	bf00      	nop
 8008d50:	40021000 	.word	0x40021000
 8008d54:	0801685c 	.word	0x0801685c
 8008d58:	2000003c 	.word	0x2000003c
 8008d5c:	20000024 	.word	0x20000024
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d62:	00d9      	lsls	r1, r3, #3
 8008d64:	d429      	bmi.n	8008dba <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008d78:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d7c:	4f89      	ldr	r7, [pc, #548]	; (8008fa4 <HAL_RCC_OscConfig+0x504>)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	05da      	lsls	r2, r3, #23
 8008d82:	d51d      	bpl.n	8008dc0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d84:	68ab      	ldr	r3, [r5, #8]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d12b      	bne.n	8008de2 <HAL_RCC_OscConfig+0x342>
 8008d8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8008d96:	f7ff fbab 	bl	80084f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d9a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008d9e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008da0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008da4:	0798      	lsls	r0, r3, #30
 8008da6:	d542      	bpl.n	8008e2e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8008da8:	f1b8 0f00 	cmp.w	r8, #0
 8008dac:	f43f aed7 	beq.w	8008b5e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db6:	65a3      	str	r3, [r4, #88]	; 0x58
 8008db8:	e6d1      	b.n	8008b5e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	e7dd      	b.n	8008d7c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008dc8:	f7ff fb92 	bl	80084f0 <HAL_GetTick>
 8008dcc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	05db      	lsls	r3, r3, #23
 8008dd2:	d4d7      	bmi.n	8008d84 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dd4:	f7ff fb8c 	bl	80084f0 <HAL_GetTick>
 8008dd8:	eba0 0009 	sub.w	r0, r0, r9
 8008ddc:	2802      	cmp	r0, #2
 8008dde:	d9f6      	bls.n	8008dce <HAL_RCC_OscConfig+0x32e>
 8008de0:	e6fe      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d106      	bne.n	8008df4 <HAL_RCC_OscConfig+0x354>
 8008de6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008dea:	f043 0304 	orr.w	r3, r3, #4
 8008dee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008df2:	e7ca      	b.n	8008d8a <HAL_RCC_OscConfig+0x2ea>
 8008df4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008df8:	f022 0201 	bic.w	r2, r2, #1
 8008dfc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8008e00:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008e04:	f022 0204 	bic.w	r2, r2, #4
 8008e08:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1c2      	bne.n	8008d96 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8008e10:	f7ff fb6e 	bl	80084f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e14:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008e18:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008e1e:	0799      	lsls	r1, r3, #30
 8008e20:	d5c2      	bpl.n	8008da8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7ff fb65 	bl	80084f0 <HAL_GetTick>
 8008e26:	1bc0      	subs	r0, r0, r7
 8008e28:	4548      	cmp	r0, r9
 8008e2a:	d9f6      	bls.n	8008e1a <HAL_RCC_OscConfig+0x37a>
 8008e2c:	e6d8      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e2e:	f7ff fb5f 	bl	80084f0 <HAL_GetTick>
 8008e32:	1bc0      	subs	r0, r0, r7
 8008e34:	4548      	cmp	r0, r9
 8008e36:	d9b3      	bls.n	8008da0 <HAL_RCC_OscConfig+0x300>
 8008e38:	e6d2      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	f040 808f 	bne.w	8008f5e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8008e40:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e42:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008e44:	f003 0103 	and.w	r1, r3, #3
 8008e48:	4291      	cmp	r1, r2
 8008e4a:	d124      	bne.n	8008e96 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008e52:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e54:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008e58:	d11d      	bne.n	8008e96 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e5a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e60:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008e64:	d117      	bne.n	8008e96 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008e66:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008e68:	3a07      	subs	r2, #7
 8008e6a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8008e6e:	bf18      	it	ne
 8008e70:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e72:	4291      	cmp	r1, r2
 8008e74:	d10f      	bne.n	8008e96 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e76:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008e78:	0852      	lsrs	r2, r2, #1
 8008e7a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008e7e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008e80:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008e84:	d107      	bne.n	8008e96 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e86:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008e88:	0852      	lsrs	r2, r2, #1
 8008e8a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008e8e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e90:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008e94:	d04a      	beq.n	8008f2c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008e96:	2e0c      	cmp	r6, #12
 8008e98:	f43f ae06 	beq.w	8008aa8 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	f53f ae02 	bmi.w	8008aa8 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	f53f adfe 	bmi.w	8008aa8 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eb2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8008eb4:	f7ff fb1c 	bl	80084f0 <HAL_GetTick>
 8008eb8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	019f      	lsls	r7, r3, #6
 8008ebe:	d42f      	bmi.n	8008f20 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ec0:	68e2      	ldr	r2, [r4, #12]
 8008ec2:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <HAL_RCC_OscConfig+0x508>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ed0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008ed8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008eda:	0912      	lsrs	r2, r2, #4
 8008edc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8008ee0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008ee2:	0852      	lsrs	r2, r2, #1
 8008ee4:	3a01      	subs	r2, #1
 8008ee6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8008eea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008eec:	0852      	lsrs	r2, r2, #1
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008ef4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008efc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008efe:	68e3      	ldr	r3, [r4, #12]
 8008f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f04:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8008f06:	f7ff faf3 	bl	80084f0 <HAL_GetTick>
 8008f0a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	0198      	lsls	r0, r3, #6
 8008f10:	f53f ae29 	bmi.w	8008b66 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f14:	f7ff faec 	bl	80084f0 <HAL_GetTick>
 8008f18:	1b40      	subs	r0, r0, r5
 8008f1a:	2802      	cmp	r0, #2
 8008f1c:	d9f6      	bls.n	8008f0c <HAL_RCC_OscConfig+0x46c>
 8008f1e:	e65f      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f20:	f7ff fae6 	bl	80084f0 <HAL_GetTick>
 8008f24:	1b80      	subs	r0, r0, r6
 8008f26:	2802      	cmp	r0, #2
 8008f28:	d9c7      	bls.n	8008eba <HAL_RCC_OscConfig+0x41a>
 8008f2a:	e659      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	0199      	lsls	r1, r3, #6
 8008f30:	f53f ae19 	bmi.w	8008b66 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f3c:	68e3      	ldr	r3, [r4, #12]
 8008f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f42:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8008f44:	f7ff fad4 	bl	80084f0 <HAL_GetTick>
 8008f48:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	019a      	lsls	r2, r3, #6
 8008f4e:	f53f ae0a 	bmi.w	8008b66 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f52:	f7ff facd 	bl	80084f0 <HAL_GetTick>
 8008f56:	1b40      	subs	r0, r0, r5
 8008f58:	2802      	cmp	r0, #2
 8008f5a:	d9f6      	bls.n	8008f4a <HAL_RCC_OscConfig+0x4aa>
 8008f5c:	e640      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f5e:	2e0c      	cmp	r6, #12
 8008f60:	f43f ada2 	beq.w	8008aa8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f6a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008f72:	bf02      	ittt	eq
 8008f74:	68e3      	ldreq	r3, [r4, #12]
 8008f76:	f023 0303 	biceq.w	r3, r3, #3
 8008f7a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008f7c:	68e3      	ldr	r3, [r4, #12]
 8008f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f86:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8008f88:	f7ff fab2 	bl	80084f0 <HAL_GetTick>
 8008f8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	f57f ade8 	bpl.w	8008b66 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f96:	f7ff faab 	bl	80084f0 <HAL_GetTick>
 8008f9a:	1b40      	subs	r0, r0, r5
 8008f9c:	2802      	cmp	r0, #2
 8008f9e:	d9f6      	bls.n	8008f8e <HAL_RCC_OscConfig+0x4ee>
 8008fa0:	e61e      	b.n	8008be0 <HAL_RCC_OscConfig+0x140>
 8008fa2:	bf00      	nop
 8008fa4:	40007000 	.word	0x40007000
 8008fa8:	f99d808c 	.word	0xf99d808c

08008fac <HAL_RCC_ClockConfig>:
{
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	b910      	cbnz	r0, 8008fbc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fbc:	4a41      	ldr	r2, [pc, #260]	; (80090c4 <HAL_RCC_ClockConfig+0x118>)
 8008fbe:	6813      	ldr	r3, [r2, #0]
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	428b      	cmp	r3, r1
 8008fc6:	d32a      	bcc.n	800901e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d432      	bmi.n	8009034 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fce:	6821      	ldr	r1, [r4, #0]
 8008fd0:	078a      	lsls	r2, r1, #30
 8008fd2:	d45c      	bmi.n	800908e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fd4:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <HAL_RCC_ClockConfig+0x118>)
 8008fd6:	6813      	ldr	r3, [r2, #0]
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	429e      	cmp	r6, r3
 8008fde:	d35e      	bcc.n	800909e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe0:	f011 0f04 	tst.w	r1, #4
 8008fe4:	4d38      	ldr	r5, [pc, #224]	; (80090c8 <HAL_RCC_ClockConfig+0x11c>)
 8008fe6:	d165      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe8:	070b      	lsls	r3, r1, #28
 8008fea:	d506      	bpl.n	8008ffa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fec:	68ab      	ldr	r3, [r5, #8]
 8008fee:	6922      	ldr	r2, [r4, #16]
 8008ff0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008ff4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ff8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ffa:	f7ff fd03 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 8008ffe:	68ab      	ldr	r3, [r5, #8]
 8009000:	4a32      	ldr	r2, [pc, #200]	; (80090cc <HAL_RCC_ClockConfig+0x120>)
 8009002:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8009006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800900a:	5cd3      	ldrb	r3, [r2, r3]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	40d8      	lsrs	r0, r3
 8009012:	4b2f      	ldr	r3, [pc, #188]	; (80090d0 <HAL_RCC_ClockConfig+0x124>)
 8009014:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <HAL_RCC_ClockConfig+0x128>)
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f005 bb03 	b.w	800e624 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800901e:	6813      	ldr	r3, [r2, #0]
 8009020:	f023 0307 	bic.w	r3, r3, #7
 8009024:	430b      	orrs	r3, r1
 8009026:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009028:	6813      	ldr	r3, [r2, #0]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	4299      	cmp	r1, r3
 8009030:	d1c1      	bne.n	8008fb6 <HAL_RCC_ClockConfig+0xa>
 8009032:	e7c9      	b.n	8008fc8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009034:	6862      	ldr	r2, [r4, #4]
 8009036:	4d24      	ldr	r5, [pc, #144]	; (80090c8 <HAL_RCC_ClockConfig+0x11c>)
 8009038:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800903a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800903c:	d11b      	bne.n	8009076 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800903e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009042:	d0b8      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009044:	68ab      	ldr	r3, [r5, #8]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	4313      	orrs	r3, r2
 800904c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800904e:	f7ff fa4f 	bl	80084f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009052:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009056:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009058:	68ab      	ldr	r3, [r5, #8]
 800905a:	6862      	ldr	r2, [r4, #4]
 800905c:	f003 030c 	and.w	r3, r3, #12
 8009060:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009064:	d0b3      	beq.n	8008fce <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009066:	f7ff fa43 	bl	80084f0 <HAL_GetTick>
 800906a:	1bc0      	subs	r0, r0, r7
 800906c:	4540      	cmp	r0, r8
 800906e:	d9f3      	bls.n	8009058 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8009070:	2003      	movs	r0, #3
}
 8009072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009076:	2a02      	cmp	r2, #2
 8009078:	d102      	bne.n	8009080 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800907a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800907e:	e7e0      	b.n	8009042 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009080:	b912      	cbnz	r2, 8009088 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009082:	f013 0f02 	tst.w	r3, #2
 8009086:	e7dc      	b.n	8009042 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009088:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800908c:	e7d9      	b.n	8009042 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800908e:	4a0e      	ldr	r2, [pc, #56]	; (80090c8 <HAL_RCC_ClockConfig+0x11c>)
 8009090:	68a0      	ldr	r0, [r4, #8]
 8009092:	6893      	ldr	r3, [r2, #8]
 8009094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009098:	4303      	orrs	r3, r0
 800909a:	6093      	str	r3, [r2, #8]
 800909c:	e79a      	b.n	8008fd4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909e:	6813      	ldr	r3, [r2, #0]
 80090a0:	f023 0307 	bic.w	r3, r3, #7
 80090a4:	4333      	orrs	r3, r6
 80090a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090a8:	6813      	ldr	r3, [r2, #0]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	429e      	cmp	r6, r3
 80090b0:	d181      	bne.n	8008fb6 <HAL_RCC_ClockConfig+0xa>
 80090b2:	e795      	b.n	8008fe0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b4:	68ab      	ldr	r3, [r5, #8]
 80090b6:	68e2      	ldr	r2, [r4, #12]
 80090b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80090bc:	4313      	orrs	r3, r2
 80090be:	60ab      	str	r3, [r5, #8]
 80090c0:	e792      	b.n	8008fe8 <HAL_RCC_ClockConfig+0x3c>
 80090c2:	bf00      	nop
 80090c4:	40022000 	.word	0x40022000
 80090c8:	40021000 	.word	0x40021000
 80090cc:	0801685c 	.word	0x0801685c
 80090d0:	2000003c 	.word	0x2000003c
 80090d4:	20000024 	.word	0x20000024

080090d8 <HAL_RCC_GetHCLKFreq>:
}
 80090d8:	4b01      	ldr	r3, [pc, #4]	; (80090e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	2000003c 	.word	0x2000003c

080090e4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80090e6:	4a06      	ldr	r2, [pc, #24]	; (8009100 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80090ee:	5cd3      	ldrb	r3, [r2, r3]
 80090f0:	4a04      	ldr	r2, [pc, #16]	; (8009104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80090f2:	6810      	ldr	r0, [r2, #0]
 80090f4:	f003 031f 	and.w	r3, r3, #31
}
 80090f8:	40d8      	lsrs	r0, r3
 80090fa:	4770      	bx	lr
 80090fc:	40021000 	.word	0x40021000
 8009100:	0801686c 	.word	0x0801686c
 8009104:	2000003c 	.word	0x2000003c

08009108 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <HAL_RCC_GetPCLK2Freq+0x18>)
 800910a:	4a06      	ldr	r2, [pc, #24]	; (8009124 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009112:	5cd3      	ldrb	r3, [r2, r3]
 8009114:	4a04      	ldr	r2, [pc, #16]	; (8009128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009116:	6810      	ldr	r0, [r2, #0]
 8009118:	f003 031f 	and.w	r3, r3, #31
}
 800911c:	40d8      	lsrs	r0, r3
 800911e:	4770      	bx	lr
 8009120:	40021000 	.word	0x40021000
 8009124:	0801686c 	.word	0x0801686c
 8009128:	2000003c 	.word	0x2000003c

0800912c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800912c:	230f      	movs	r3, #15
 800912e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <HAL_RCC_GetClockConfig+0x34>)
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	f002 0203 	and.w	r2, r2, #3
 8009138:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009140:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009148:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	08db      	lsrs	r3, r3, #3
 800914e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009152:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009154:	4b03      	ldr	r3, [pc, #12]	; (8009164 <HAL_RCC_GetClockConfig+0x38>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	600b      	str	r3, [r1, #0]
 800915e:	4770      	bx	lr
 8009160:	40021000 	.word	0x40021000
 8009164:	40022000 	.word	0x40022000

08009168 <HAL_RCC_CSSCallback>:
{
 8009168:	4770      	bx	lr
	...

0800916c <HAL_RCC_NMI_IRQHandler>:
{
 800916c:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800916e:	4c05      	ldr	r4, [pc, #20]	; (8009184 <HAL_RCC_NMI_IRQHandler+0x18>)
 8009170:	69e3      	ldr	r3, [r4, #28]
 8009172:	05db      	lsls	r3, r3, #23
 8009174:	d504      	bpl.n	8009180 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8009176:	f7ff fff7 	bl	8009168 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800917a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800917e:	6223      	str	r3, [r4, #32]
 8009180:	bd10      	pop	{r4, pc}
 8009182:	bf00      	nop
 8009184:	40021000 	.word	0x40021000

08009188 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800918a:	4b45      	ldr	r3, [pc, #276]	; (80092a0 <RCCEx_PLLSAI1_Config+0x118>)
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	f012 0f03 	tst.w	r2, #3
{
 8009192:	4605      	mov	r5, r0
 8009194:	460e      	mov	r6, r1
 8009196:	461c      	mov	r4, r3
 8009198:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800919a:	d02a      	beq.n	80091f2 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	f002 0203 	and.w	r2, r2, #3
 80091a2:	4282      	cmp	r2, r0
 80091a4:	d13c      	bne.n	8009220 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	d03a      	beq.n	8009220 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80091aa:	68db      	ldr	r3, [r3, #12]
       ||
 80091ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80091ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80091b2:	3301      	adds	r3, #1
       ||
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d133      	bne.n	8009220 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c0:	f7ff f996 	bl	80084f0 <HAL_GetTick>
 80091c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	011a      	lsls	r2, r3, #4
 80091ca:	d432      	bmi.n	8009232 <RCCEx_PLLSAI1_Config+0xaa>
 80091cc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80091ce:	2e00      	cmp	r6, #0
 80091d0:	d036      	beq.n	8009240 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80091d2:	2e01      	cmp	r6, #1
 80091d4:	d150      	bne.n	8009278 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80091d6:	6922      	ldr	r2, [r4, #16]
 80091d8:	6928      	ldr	r0, [r5, #16]
 80091da:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80091de:	0840      	lsrs	r0, r0, #1
 80091e0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80091e4:	3801      	subs	r0, #1
 80091e6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80091ea:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80091ee:	6122      	str	r2, [r4, #16]
 80091f0:	e032      	b.n	8009258 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80091f2:	2802      	cmp	r0, #2
 80091f4:	d010      	beq.n	8009218 <RCCEx_PLLSAI1_Config+0x90>
 80091f6:	2803      	cmp	r0, #3
 80091f8:	d014      	beq.n	8009224 <RCCEx_PLLSAI1_Config+0x9c>
 80091fa:	2801      	cmp	r0, #1
 80091fc:	d110      	bne.n	8009220 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	079f      	lsls	r7, r3, #30
 8009202:	d538      	bpl.n	8009276 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009204:	68e3      	ldr	r3, [r4, #12]
 8009206:	686a      	ldr	r2, [r5, #4]
 8009208:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800920c:	3a01      	subs	r2, #1
 800920e:	4318      	orrs	r0, r3
 8009210:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009214:	60e0      	str	r0, [r4, #12]
 8009216:	e7cf      	b.n	80091b8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800921e:	d1f1      	bne.n	8009204 <RCCEx_PLLSAI1_Config+0x7c>
 8009220:	2001      	movs	r0, #1
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	0391      	lsls	r1, r2, #14
 8009228:	d4ec      	bmi.n	8009204 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009230:	e7f5      	b.n	800921e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009232:	f7ff f95d 	bl	80084f0 <HAL_GetTick>
 8009236:	1bc0      	subs	r0, r0, r7
 8009238:	2802      	cmp	r0, #2
 800923a:	d9c4      	bls.n	80091c6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800923c:	2003      	movs	r0, #3
 800923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009240:	6921      	ldr	r1, [r4, #16]
 8009242:	68eb      	ldr	r3, [r5, #12]
 8009244:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8009248:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800924c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8009250:	091b      	lsrs	r3, r3, #4
 8009252:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8009256:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800925e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009260:	f7ff f946 	bl	80084f0 <HAL_GetTick>
 8009264:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	d513      	bpl.n	8009294 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	69aa      	ldr	r2, [r5, #24]
 8009270:	4313      	orrs	r3, r2
 8009272:	6123      	str	r3, [r4, #16]
 8009274:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	6968      	ldr	r0, [r5, #20]
 800927c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009280:	0840      	lsrs	r0, r0, #1
 8009282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009286:	3801      	subs	r0, #1
 8009288:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800928c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	e7e1      	b.n	8009258 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009294:	f7ff f92c 	bl	80084f0 <HAL_GetTick>
 8009298:	1b80      	subs	r0, r0, r6
 800929a:	2802      	cmp	r0, #2
 800929c:	d9e3      	bls.n	8009266 <RCCEx_PLLSAI1_Config+0xde>
 800929e:	e7cd      	b.n	800923c <RCCEx_PLLSAI1_Config+0xb4>
 80092a0:	40021000 	.word	0x40021000

080092a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092a6:	4b3d      	ldr	r3, [pc, #244]	; (800939c <RCCEx_PLLSAI2_Config+0xf8>)
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	f012 0f03 	tst.w	r2, #3
{
 80092ae:	4605      	mov	r5, r0
 80092b0:	460e      	mov	r6, r1
 80092b2:	461c      	mov	r4, r3
 80092b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092b6:	d028      	beq.n	800930a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	f002 0203 	and.w	r2, r2, #3
 80092be:	4282      	cmp	r2, r0
 80092c0:	d13a      	bne.n	8009338 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d038      	beq.n	8009338 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80092c6:	68db      	ldr	r3, [r3, #12]
       ||
 80092c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80092ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80092ce:	3301      	adds	r3, #1
       ||
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d131      	bne.n	8009338 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092dc:	f7ff f908 	bl	80084f0 <HAL_GetTick>
 80092e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	009a      	lsls	r2, r3, #2
 80092e6:	d430      	bmi.n	800934a <RCCEx_PLLSAI2_Config+0xa6>
 80092e8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	d034      	beq.n	8009358 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80092ee:	6963      	ldr	r3, [r4, #20]
 80092f0:	6929      	ldr	r1, [r5, #16]
 80092f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80092f6:	0849      	lsrs	r1, r1, #1
 80092f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80092fc:	3901      	subs	r1, #1
 80092fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009302:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8009306:	6163      	str	r3, [r4, #20]
 8009308:	e032      	b.n	8009370 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800930a:	2802      	cmp	r0, #2
 800930c:	d010      	beq.n	8009330 <RCCEx_PLLSAI2_Config+0x8c>
 800930e:	2803      	cmp	r0, #3
 8009310:	d014      	beq.n	800933c <RCCEx_PLLSAI2_Config+0x98>
 8009312:	2801      	cmp	r0, #1
 8009314:	d110      	bne.n	8009338 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	079f      	lsls	r7, r3, #30
 800931a:	d538      	bpl.n	800938e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800931c:	68e3      	ldr	r3, [r4, #12]
 800931e:	686a      	ldr	r2, [r5, #4]
 8009320:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8009324:	3a01      	subs	r2, #1
 8009326:	4318      	orrs	r0, r3
 8009328:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800932c:	60e0      	str	r0, [r4, #12]
 800932e:	e7d1      	b.n	80092d4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009336:	d1f1      	bne.n	800931c <RCCEx_PLLSAI2_Config+0x78>
 8009338:	2001      	movs	r0, #1
 800933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	0391      	lsls	r1, r2, #14
 8009340:	d4ec      	bmi.n	800931c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8009348:	e7f5      	b.n	8009336 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800934a:	f7ff f8d1 	bl	80084f0 <HAL_GetTick>
 800934e:	1bc0      	subs	r0, r0, r7
 8009350:	2802      	cmp	r0, #2
 8009352:	d9c6      	bls.n	80092e2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8009354:	2003      	movs	r0, #3
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009358:	6962      	ldr	r2, [r4, #20]
 800935a:	68eb      	ldr	r3, [r5, #12]
 800935c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8009360:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009364:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009368:	091b      	lsrs	r3, r3, #4
 800936a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800936e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009376:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009378:	f7ff f8ba 	bl	80084f0 <HAL_GetTick>
 800937c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	d505      	bpl.n	8009390 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009384:	6963      	ldr	r3, [r4, #20]
 8009386:	696a      	ldr	r2, [r5, #20]
 8009388:	4313      	orrs	r3, r2
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009390:	f7ff f8ae 	bl	80084f0 <HAL_GetTick>
 8009394:	1b80      	subs	r0, r0, r6
 8009396:	2802      	cmp	r0, #2
 8009398:	d9f1      	bls.n	800937e <RCCEx_PLLSAI2_Config+0xda>
 800939a:	e7db      	b.n	8009354 <RCCEx_PLLSAI2_Config+0xb0>
 800939c:	40021000 	.word	0x40021000

080093a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80093a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80093a4:	6806      	ldr	r6, [r0, #0]
 80093a6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80093aa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80093ac:	d024      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80093ae:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80093b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80093b4:	d02c      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80093b6:	d802      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80093b8:	b1c1      	cbz	r1, 80093ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80093ba:	2601      	movs	r6, #1
 80093bc:	e01c      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80093be:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80093c2:	d00d      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80093c4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80093c8:	d1f7      	bne.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093ca:	4a4d      	ldr	r2, [pc, #308]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093cc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80093ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80093d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80093d6:	430b      	orrs	r3, r1
 80093d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80093dc:	2600      	movs	r6, #0
 80093de:	e00b      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80093e0:	4a47      	ldr	r2, [pc, #284]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093e2:	68d3      	ldr	r3, [r2, #12]
 80093e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e8:	60d3      	str	r3, [r2, #12]
      break;
 80093ea:	e7ee      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80093ec:	3004      	adds	r0, #4
 80093ee:	f7ff fecb 	bl	8009188 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093f2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d0e8      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	04d8      	lsls	r0, r3, #19
 80093fc:	d506      	bpl.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80093fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009400:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8009404:	d074      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8009406:	d808      	bhi.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009408:	b1a9      	cbz	r1, 8009436 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800940a:	2601      	movs	r6, #1
 800940c:	4635      	mov	r5, r6
 800940e:	e021      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009410:	2100      	movs	r1, #0
 8009412:	3020      	adds	r0, #32
 8009414:	f7ff ff46 	bl	80092a4 <RCCEx_PLLSAI2_Config>
 8009418:	e7eb      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800941a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800941e:	d004      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8009420:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8009424:	d1f1      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009426:	4635      	mov	r5, r6
 8009428:	e009      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800942a:	4a35      	ldr	r2, [pc, #212]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800942c:	68d3      	ldr	r3, [r2, #12]
 800942e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009432:	60d3      	str	r3, [r2, #12]
 8009434:	e7f7      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009436:	1d20      	adds	r0, r4, #4
 8009438:	f7ff fea6 	bl	8009188 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800943c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800943e:	2d00      	cmp	r5, #0
 8009440:	d15c      	bne.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009442:	4a2f      	ldr	r2, [pc, #188]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009444:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009446:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800944a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800944e:	430b      	orrs	r3, r1
 8009450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	0399      	lsls	r1, r3, #14
 8009458:	f140 814f 	bpl.w	80096fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800945c:	4f28      	ldr	r7, [pc, #160]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800945e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009460:	00da      	lsls	r2, r3, #3
 8009462:	f140 8176 	bpl.w	8009752 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8009466:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800946a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8009504 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800946e:	f8d9 3000 	ldr.w	r3, [r9]
 8009472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009476:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800947a:	f7ff f839 	bl	80084f0 <HAL_GetTick>
 800947e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009480:	f8d9 3000 	ldr.w	r3, [r9]
 8009484:	05db      	lsls	r3, r3, #23
 8009486:	d53f      	bpl.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8009488:	2d00      	cmp	r5, #0
 800948a:	d144      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800948c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009490:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009494:	d015      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8009496:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800949a:	4293      	cmp	r3, r2
 800949c:	d011      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800949e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80094a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80094a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80094aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80094b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80094be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094c2:	07d8      	lsls	r0, r3, #31
 80094c4:	d509      	bpl.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80094c6:	f7ff f813 	bl	80084f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ca:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80094ce:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094d4:	0799      	lsls	r1, r3, #30
 80094d6:	f140 8109 	bpl.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80094e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ec:	4635      	mov	r5, r6
 80094ee:	e012      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80094f0:	2100      	movs	r1, #0
 80094f2:	f104 0020 	add.w	r0, r4, #32
 80094f6:	f7ff fed5 	bl	80092a4 <RCCEx_PLLSAI2_Config>
 80094fa:	e79f      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80094fc:	462e      	mov	r6, r5
 80094fe:	e7a9      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8009500:	40021000 	.word	0x40021000
 8009504:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009508:	f7fe fff2 	bl	80084f0 <HAL_GetTick>
 800950c:	eba0 000a 	sub.w	r0, r0, sl
 8009510:	2802      	cmp	r0, #2
 8009512:	d9b5      	bls.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8009514:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	d003      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800951c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800951e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009522:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	07da      	lsls	r2, r3, #31
 8009528:	d508      	bpl.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800952a:	4990      	ldr	r1, [pc, #576]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800952c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800952e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009532:	f022 0203 	bic.w	r2, r2, #3
 8009536:	4302      	orrs	r2, r0
 8009538:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800953c:	079f      	lsls	r7, r3, #30
 800953e:	d508      	bpl.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009540:	498a      	ldr	r1, [pc, #552]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009542:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009544:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009548:	f022 020c 	bic.w	r2, r2, #12
 800954c:	4302      	orrs	r2, r0
 800954e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009552:	075e      	lsls	r6, r3, #29
 8009554:	d508      	bpl.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009556:	4985      	ldr	r1, [pc, #532]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009558:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800955a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800955e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009562:	4302      	orrs	r2, r0
 8009564:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009568:	0718      	lsls	r0, r3, #28
 800956a:	d508      	bpl.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800956c:	497f      	ldr	r1, [pc, #508]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800956e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009570:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009574:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009578:	4302      	orrs	r2, r0
 800957a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800957e:	06d9      	lsls	r1, r3, #27
 8009580:	d508      	bpl.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009582:	497a      	ldr	r1, [pc, #488]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009584:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009586:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800958a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800958e:	4302      	orrs	r2, r0
 8009590:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009594:	069a      	lsls	r2, r3, #26
 8009596:	d508      	bpl.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009598:	4974      	ldr	r1, [pc, #464]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800959a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800959c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80095a4:	4302      	orrs	r2, r0
 80095a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80095aa:	059f      	lsls	r7, r3, #22
 80095ac:	d508      	bpl.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095ae:	496f      	ldr	r1, [pc, #444]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80095b0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80095b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095b6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80095ba:	4302      	orrs	r2, r0
 80095bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095c0:	055e      	lsls	r6, r3, #21
 80095c2:	d508      	bpl.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095c4:	4969      	ldr	r1, [pc, #420]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80095c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80095c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80095d0:	4302      	orrs	r2, r0
 80095d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095d6:	0658      	lsls	r0, r3, #25
 80095d8:	d508      	bpl.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095da:	4964      	ldr	r1, [pc, #400]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80095dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80095de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80095e6:	4302      	orrs	r2, r0
 80095e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095ec:	0619      	lsls	r1, r3, #24
 80095ee:	d508      	bpl.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095f0:	495e      	ldr	r1, [pc, #376]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80095f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095f8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80095fc:	4302      	orrs	r2, r0
 80095fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009602:	05da      	lsls	r2, r3, #23
 8009604:	d508      	bpl.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009606:	4959      	ldr	r1, [pc, #356]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800960e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009612:	4302      	orrs	r2, r0
 8009614:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009618:	049b      	lsls	r3, r3, #18
 800961a:	d50f      	bpl.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800961c:	4a53      	ldr	r2, [pc, #332]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800961e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009620:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009624:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8009628:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800962a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800962e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009632:	d164      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009634:	68d3      	ldr	r3, [r2, #12]
 8009636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800963a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	031f      	lsls	r7, r3, #12
 8009640:	d50f      	bpl.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009642:	4a4a      	ldr	r2, [pc, #296]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009644:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009646:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800964a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800964e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009650:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009658:	d15c      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800965a:	68d3      	ldr	r3, [r2, #12]
 800965c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009660:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	035e      	lsls	r6, r3, #13
 8009666:	d50f      	bpl.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009668:	4a40      	ldr	r2, [pc, #256]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800966a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800966c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009670:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8009674:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009676:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800967a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800967e:	d154      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009680:	68d3      	ldr	r3, [r2, #12]
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009686:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	0458      	lsls	r0, r3, #17
 800968c:	d512      	bpl.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800968e:	4937      	ldr	r1, [pc, #220]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8009690:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009692:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009696:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800969a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800969c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096a4:	d14c      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80096a6:	2102      	movs	r1, #2
 80096a8:	1d20      	adds	r0, r4, #4
 80096aa:	f7ff fd6d 	bl	8009188 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80096ae:	2800      	cmp	r0, #0
 80096b0:	bf18      	it	ne
 80096b2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	0411      	lsls	r1, r2, #16
 80096b8:	d508      	bpl.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096ba:	492c      	ldr	r1, [pc, #176]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80096bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80096be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80096c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096c6:	4303      	orrs	r3, r0
 80096c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096cc:	03d3      	lsls	r3, r2, #15
 80096ce:	d509      	bpl.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096d0:	4a26      	ldr	r2, [pc, #152]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80096d2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80096d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80096da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096de:	430b      	orrs	r3, r1
 80096e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80096e4:	4628      	mov	r0, r5
 80096e6:	b002      	add	sp, #8
 80096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ec:	f7fe ff00 	bl	80084f0 <HAL_GetTick>
 80096f0:	1b40      	subs	r0, r0, r5
 80096f2:	4548      	cmp	r0, r9
 80096f4:	f67f aeec 	bls.w	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80096f8:	e70c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80096fa:	4635      	mov	r5, r6
 80096fc:	e712      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80096fe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8009702:	d19b      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009704:	2101      	movs	r1, #1
 8009706:	1d20      	adds	r0, r4, #4
 8009708:	f7ff fd3e 	bl	8009188 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800970c:	2800      	cmp	r0, #0
 800970e:	bf18      	it	ne
 8009710:	4605      	movne	r5, r0
 8009712:	e793      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009714:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8009718:	d1a3      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800971a:	2101      	movs	r1, #1
 800971c:	1d20      	adds	r0, r4, #4
 800971e:	f7ff fd33 	bl	8009188 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8009722:	2800      	cmp	r0, #0
 8009724:	bf18      	it	ne
 8009726:	4605      	movne	r5, r0
 8009728:	e79b      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800972a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800972e:	d1ab      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009730:	2101      	movs	r1, #1
 8009732:	1d20      	adds	r0, r4, #4
 8009734:	f7ff fd28 	bl	8009188 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8009738:	2800      	cmp	r0, #0
 800973a:	bf18      	it	ne
 800973c:	4605      	movne	r5, r0
 800973e:	e7a3      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009740:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009744:	d1b6      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009746:	2102      	movs	r1, #2
 8009748:	f104 0020 	add.w	r0, r4, #32
 800974c:	f7ff fdaa 	bl	80092a4 <RCCEx_PLLSAI2_Config>
 8009750:	e7ad      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009758:	65bb      	str	r3, [r7, #88]	; 0x58
 800975a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800975c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009764:	f04f 0801 	mov.w	r8, #1
 8009768:	e67f      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800976a:	bf00      	nop
 800976c:	40021000 	.word	0x40021000

08009770 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009770:	6803      	ldr	r3, [r0, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800977a:	6842      	ldr	r2, [r0, #4]
 800977c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009780:	d10a      	bne.n	8009798 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8009782:	6882      	ldr	r2, [r0, #8]
 8009784:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009788:	d002      	beq.n	8009790 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800978a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800978e:	d103      	bne.n	8009798 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009798:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800979a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800979e:	d107      	bne.n	80097b0 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097b0:	2301      	movs	r3, #1
 80097b2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097b6:	2300      	movs	r3, #0
 80097b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80097bc:	2003      	movs	r0, #3
 80097be:	4770      	bx	lr

080097c0 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	6898      	ldr	r0, [r3, #8]
 80097cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097d0:	d100      	bne.n	80097d4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80097d4:	1c6a      	adds	r2, r5, #1
 80097d6:	d0f8      	beq.n	80097ca <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80097d8:	f7fe fe8a 	bl	80084f0 <HAL_GetTick>
 80097dc:	1b80      	subs	r0, r0, r6
 80097de:	4285      	cmp	r5, r0
 80097e0:	d8f2      	bhi.n	80097c8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80097e2:	4620      	mov	r0, r4
}
 80097e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097e8:	f7ff bfc2 	b.w	8009770 <SPI_WaitFifoStateUntilTimeout.part.1>

080097ec <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	4605      	mov	r5, r0
 80097f0:	460c      	mov	r4, r1
 80097f2:	4616      	mov	r6, r2
 80097f4:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80097f6:	6829      	ldr	r1, [r5, #0]
 80097f8:	6888      	ldr	r0, [r1, #8]
 80097fa:	4020      	ands	r0, r4
 80097fc:	d100      	bne.n	8009800 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 80097fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009800:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009804:	bf08      	it	eq
 8009806:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8009808:	1c73      	adds	r3, r6, #1
 800980a:	d0f5      	beq.n	80097f8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800980c:	f7fe fe70 	bl	80084f0 <HAL_GetTick>
 8009810:	1bc0      	subs	r0, r0, r7
 8009812:	4286      	cmp	r6, r0
 8009814:	d8ef      	bhi.n	80097f6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8009816:	4628      	mov	r0, r5
}
 8009818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800981c:	f7ff bfa8 	b.w	8009770 <SPI_WaitFifoStateUntilTimeout.part.1>

08009820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009822:	4613      	mov	r3, r2
{
 8009824:	460d      	mov	r5, r1
 8009826:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009828:	460a      	mov	r2, r1
 800982a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800982e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009830:	f7ff ffdc 	bl	80097ec <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8009834:	b128      	cbz	r0, 8009842 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009836:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009838:	f043 0320 	orr.w	r3, r3, #32
 800983c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800983e:	2003      	movs	r0, #3
 8009840:	e00f      	b.n	8009862 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009842:	4632      	mov	r2, r6
 8009844:	4629      	mov	r1, r5
 8009846:	4620      	mov	r0, r4
 8009848:	f7ff ffba 	bl	80097c0 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800984c:	2800      	cmp	r0, #0
 800984e:	d1f2      	bne.n	8009836 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009850:	4633      	mov	r3, r6
 8009852:	462a      	mov	r2, r5
 8009854:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009858:	4620      	mov	r0, r4
 800985a:	f7ff ffc7 	bl	80097ec <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800985e:	2800      	cmp	r0, #0
 8009860:	d1e9      	bne.n	8009836 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8009862:	bd70      	pop	{r4, r5, r6, pc}

08009864 <HAL_SPI_MspInit>:
 8009864:	4770      	bx	lr

08009866 <HAL_SPI_Init>:
{
 8009866:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8009868:	4604      	mov	r4, r0
 800986a:	2800      	cmp	r0, #0
 800986c:	d04a      	beq.n	8009904 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800986e:	2300      	movs	r3, #0
 8009870:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009872:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8009876:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800987a:	b91b      	cbnz	r3, 8009884 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800987c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009880:	f7ff fff0 	bl	8009864 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009884:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8009886:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009888:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800988c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800988e:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8009890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009894:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8009898:	600b      	str	r3, [r1, #0]
 800989a:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800989e:	d92e      	bls.n	80098fe <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098a0:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098a2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098a6:	bf18      	it	ne
 80098a8:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80098aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098ac:	b92b      	cbnz	r3, 80098ba <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098ae:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80098b2:	bf8c      	ite	hi
 80098b4:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80098b6:	2301      	movls	r3, #1
 80098b8:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80098ba:	68a6      	ldr	r6, [r4, #8]
 80098bc:	6863      	ldr	r3, [r4, #4]
 80098be:	69a5      	ldr	r5, [r4, #24]
 80098c0:	4333      	orrs	r3, r6
 80098c2:	6926      	ldr	r6, [r4, #16]
 80098c4:	4333      	orrs	r3, r6
 80098c6:	6966      	ldr	r6, [r4, #20]
 80098c8:	4333      	orrs	r3, r6
 80098ca:	69e6      	ldr	r6, [r4, #28]
 80098cc:	4333      	orrs	r3, r6
 80098ce:	6a26      	ldr	r6, [r4, #32]
 80098d0:	4333      	orrs	r3, r6
 80098d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098d4:	4333      	orrs	r3, r6
 80098d6:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80098da:	4333      	orrs	r3, r6
 80098dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80098de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e0:	431a      	orrs	r2, r3
 80098e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098e4:	0c2d      	lsrs	r5, r5, #16
 80098e6:	431a      	orrs	r2, r3
 80098e8:	f005 0504 	and.w	r5, r5, #4
 80098ec:	432a      	orrs	r2, r5
 80098ee:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80098f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098f2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80098f4:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098f6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009902:	e7d0      	b.n	80098a6 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8009904:	2001      	movs	r0, #1
}
 8009906:	bd70      	pop	{r4, r5, r6, pc}

08009908 <HAL_SPI_TransmitReceive>:
{
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800990c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800990e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8009912:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8009914:	2b01      	cmp	r3, #1
{
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800991c:	f000 8115 	beq.w	8009b4a <HAL_SPI_TransmitReceive+0x242>
 8009920:	2301      	movs	r3, #1
 8009922:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009926:	f7fe fde3 	bl	80084f0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800992a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800992e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8009930:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009932:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8009934:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009936:	d00a      	beq.n	800994e <HAL_SPI_TransmitReceive+0x46>
 8009938:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800993c:	f040 8103 	bne.w	8009b46 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009940:	68a0      	ldr	r0, [r4, #8]
 8009942:	2800      	cmp	r0, #0
 8009944:	f040 80ff 	bne.w	8009b46 <HAL_SPI_TransmitReceive+0x23e>
 8009948:	2b04      	cmp	r3, #4
 800994a:	f040 80fc 	bne.w	8009b46 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800994e:	2d00      	cmp	r5, #0
 8009950:	d049      	beq.n	80099e6 <HAL_SPI_TransmitReceive+0xde>
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	d046      	beq.n	80099e6 <HAL_SPI_TransmitReceive+0xde>
 8009958:	2e00      	cmp	r6, #0
 800995a:	d044      	beq.n	80099e6 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800995c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009960:	68e2      	ldr	r2, [r4, #12]
 8009962:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009964:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009968:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800996a:	bf1c      	itt	ne
 800996c:	2305      	movne	r3, #5
 800996e:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
 8009974:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009976:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 800997a:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800997e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009980:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009982:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8009984:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009988:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800998a:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800998c:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800998e:	d801      	bhi.n	8009994 <HAL_SPI_TransmitReceive+0x8c>
 8009990:	2e01      	cmp	r6, #1
 8009992:	d92a      	bls.n	80099ea <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009998:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800999a:	6803      	ldr	r3, [r0, #0]
 800999c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800999e:	bf5e      	ittt	pl
 80099a0:	6803      	ldrpl	r3, [r0, #0]
 80099a2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80099a6:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099a8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80099ac:	d956      	bls.n	8009a5c <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099ae:	b109      	cbz	r1, 80099b4 <HAL_SPI_TransmitReceive+0xac>
 80099b0:	2e01      	cmp	r6, #1
 80099b2:	d107      	bne.n	80099c4 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80099b8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80099ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099bc:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80099c4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	b98b      	cbnz	r3, 80099f0 <HAL_SPI_TransmitReceive+0xe8>
 80099cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	b96b      	cbnz	r3, 80099f0 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099d4:	4642      	mov	r2, r8
 80099d6:	4639      	mov	r1, r7
 80099d8:	4620      	mov	r0, r4
 80099da:	f7ff ff21 	bl	8009820 <SPI_EndRxTxTransaction>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d034      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099e2:	2320      	movs	r3, #32
 80099e4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80099e6:	2001      	movs	r0, #1
 80099e8:	e030      	b.n	8009a4c <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099ee:	e7d3      	b.n	8009998 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	6893      	ldr	r3, [r2, #8]
 80099f4:	0799      	lsls	r1, r3, #30
 80099f6:	d50d      	bpl.n	8009a14 <HAL_SPI_TransmitReceive+0x10c>
 80099f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	b153      	cbz	r3, 8009a14 <HAL_SPI_TransmitReceive+0x10c>
 80099fe:	b14d      	cbz	r5, 8009a14 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a02:	f833 1b02 	ldrh.w	r1, [r3], #2
 8009a06:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a08:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009a0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8009a12:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a14:	6893      	ldr	r3, [r2, #8]
 8009a16:	07db      	lsls	r3, r3, #31
 8009a18:	d50f      	bpl.n	8009a3a <HAL_SPI_TransmitReceive+0x132>
 8009a1a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	b15b      	cbz	r3, 8009a3a <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a24:	68d2      	ldr	r2, [r2, #12]
 8009a26:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a2a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009a2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8009a38:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a3a:	f7fe fd59 	bl	80084f0 <HAL_GetTick>
 8009a3e:	eba0 0008 	sub.w	r0, r0, r8
 8009a42:	4287      	cmp	r7, r0
 8009a44:	d8bf      	bhi.n	80099c6 <HAL_SPI_TransmitReceive+0xbe>
 8009a46:	1c7e      	adds	r6, r7, #1
 8009a48:	d0bd      	beq.n	80099c6 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 8009a4a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009a52:	2300      	movs	r3, #0
 8009a54:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8009a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a5c:	b109      	cbz	r1, 8009a62 <HAL_SPI_TransmitReceive+0x15a>
 8009a5e:	2e01      	cmp	r6, #1
 8009a60:	d10b      	bne.n	8009a7a <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8009a62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d951      	bls.n	8009b0e <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a6a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009a6e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8009a70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a72:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009a74:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009a7a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	b923      	cbnz	r3, 8009a8c <HAL_SPI_TransmitReceive+0x184>
 8009a82:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0a3      	beq.n	80099d4 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	6893      	ldr	r3, [r2, #8]
 8009a90:	0798      	lsls	r0, r3, #30
 8009a92:	d511      	bpl.n	8009ab8 <HAL_SPI_TransmitReceive+0x1b0>
 8009a94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	b173      	cbz	r3, 8009ab8 <HAL_SPI_TransmitReceive+0x1b0>
 8009a9a:	b16d      	cbz	r5, 8009ab8 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 8009a9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009aa4:	d93b      	bls.n	8009b1e <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8009aaa:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009aae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009ab0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8009ab6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	6893      	ldr	r3, [r2, #8]
 8009abc:	07d9      	lsls	r1, r3, #31
 8009abe:	d51d      	bpl.n	8009afc <HAL_SPI_TransmitReceive+0x1f4>
 8009ac0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	b1cb      	cbz	r3, 8009afc <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8009ac8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ad2:	d92c      	bls.n	8009b2e <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ad4:	68d1      	ldr	r1, [r2, #12]
 8009ad6:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ada:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009adc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009ae0:	3b02      	subs	r3, #2
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009ae8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d803      	bhi.n	8009afa <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009af2:	6853      	ldr	r3, [r2, #4]
 8009af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009af8:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8009afa:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009afc:	f7fe fcf8 	bl	80084f0 <HAL_GetTick>
 8009b00:	eba0 0008 	sub.w	r0, r0, r8
 8009b04:	4287      	cmp	r7, r0
 8009b06:	d8b9      	bhi.n	8009a7c <HAL_SPI_TransmitReceive+0x174>
 8009b08:	1c7b      	adds	r3, r7, #1
 8009b0a:	d0b7      	beq.n	8009a7c <HAL_SPI_TransmitReceive+0x174>
 8009b0c:	e79d      	b.n	8009a4a <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b0e:	782b      	ldrb	r3, [r5, #0]
 8009b10:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8009b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b14:	3301      	adds	r3, #1
 8009b16:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009b18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	e7ab      	b.n	8009a76 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8009b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b24:	3301      	adds	r3, #1
 8009b26:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8009b28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	e7c1      	b.n	8009ab2 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b2e:	7b12      	ldrb	r2, [r2, #12]
 8009b30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b34:	3301      	adds	r3, #1
 8009b36:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8009b38:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009b44:	e7d9      	b.n	8009afa <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8009b46:	2002      	movs	r0, #2
 8009b48:	e780      	b.n	8009a4c <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8009b4a:	2002      	movs	r0, #2
}
 8009b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009b50 <HAL_SPI_GetState>:
  return hspi->State;
 8009b50:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8009b54:	4770      	bx	lr

08009b56 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b56:	2302      	movs	r3, #2
 8009b58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b5c:	6803      	ldr	r3, [r0, #0]
 8009b5e:	6a19      	ldr	r1, [r3, #32]
 8009b60:	f241 1211 	movw	r2, #4369	; 0x1111
 8009b64:	4211      	tst	r1, r2
 8009b66:	d108      	bne.n	8009b7a <HAL_TIM_Base_Stop+0x24>
 8009b68:	6a19      	ldr	r1, [r3, #32]
 8009b6a:	f240 4244 	movw	r2, #1092	; 0x444
 8009b6e:	4211      	tst	r1, r2
 8009b70:	bf02      	ittt	eq
 8009b72:	681a      	ldreq	r2, [r3, #0]
 8009b74:	f022 0201 	biceq.w	r2, r2, #1
 8009b78:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8009b80:	2000      	movs	r0, #0
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b84:	6803      	ldr	r3, [r0, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	f042 0201 	orr.w	r2, r2, #1
 8009b8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b8e:	6899      	ldr	r1, [r3, #8]
 8009b90:	4a06      	ldr	r2, [pc, #24]	; (8009bac <HAL_TIM_Base_Start_IT+0x28>)
 8009b92:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b94:	2a06      	cmp	r2, #6
 8009b96:	d006      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x22>
 8009b98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8009b9c:	bf1e      	ittt	ne
 8009b9e:	681a      	ldrne	r2, [r3, #0]
 8009ba0:	f042 0201 	orrne.w	r2, r2, #1
 8009ba4:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	00010007 	.word	0x00010007

08009bb0 <HAL_TIM_OC_DelayElapsedCallback>:
 8009bb0:	4770      	bx	lr

08009bb2 <HAL_TIM_IC_CaptureCallback>:
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009bb4:	4770      	bx	lr

08009bb6 <HAL_TIM_TriggerCallback>:
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bb8:	6803      	ldr	r3, [r0, #0]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	0791      	lsls	r1, r2, #30
{
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bc2:	d50f      	bpl.n	8009be4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	0792      	lsls	r2, r2, #30
 8009bc8:	d50c      	bpl.n	8009be4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bca:	f06f 0202 	mvn.w	r2, #2
 8009bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bd0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bd4:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bd8:	f000 8085 	beq.w	8009ce6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bdc:	f7ff ffe9 	bl	8009bb2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be0:	2300      	movs	r3, #0
 8009be2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	691a      	ldr	r2, [r3, #16]
 8009be8:	0752      	lsls	r2, r2, #29
 8009bea:	d510      	bpl.n	8009c0e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	0750      	lsls	r0, r2, #29
 8009bf0:	d50d      	bpl.n	8009c0e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bf2:	f06f 0204 	mvn.w	r2, #4
 8009bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bf8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bfa:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bfc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c00:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c02:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c04:	d075      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	f7ff ffd4 	bl	8009bb2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	691a      	ldr	r2, [r3, #16]
 8009c12:	0711      	lsls	r1, r2, #28
 8009c14:	d50f      	bpl.n	8009c36 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c16:	68da      	ldr	r2, [r3, #12]
 8009c18:	0712      	lsls	r2, r2, #28
 8009c1a:	d50c      	bpl.n	8009c36 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c1c:	f06f 0208 	mvn.w	r2, #8
 8009c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c22:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c24:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c26:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c28:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c2c:	d067      	beq.n	8009cfe <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2e:	f7ff ffc0 	bl	8009bb2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c32:	2300      	movs	r3, #0
 8009c34:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	06d0      	lsls	r0, r2, #27
 8009c3c:	d510      	bpl.n	8009c60 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	06d1      	lsls	r1, r2, #27
 8009c42:	d50d      	bpl.n	8009c60 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c44:	f06f 0210 	mvn.w	r2, #16
 8009c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c4a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c4c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c4e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c52:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c54:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c56:	d058      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c58:	f7ff ffab 	bl	8009bb2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	07d2      	lsls	r2, r2, #31
 8009c66:	d508      	bpl.n	8009c7a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	07d0      	lsls	r0, r2, #31
 8009c6c:	d505      	bpl.n	8009c7a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c6e:	f06f 0201 	mvn.w	r2, #1
 8009c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c74:	4620      	mov	r0, r4
 8009c76:	f003 fc91 	bl	800d59c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	0611      	lsls	r1, r2, #24
 8009c80:	d508      	bpl.n	8009c94 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	0612      	lsls	r2, r2, #24
 8009c86:	d505      	bpl.n	8009c94 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f90d 	bl	8009eae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	05d0      	lsls	r0, r2, #23
 8009c9a:	d508      	bpl.n	8009cae <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	0611      	lsls	r1, r2, #24
 8009ca0:	d505      	bpl.n	8009cae <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 f901 	bl	8009eb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	691a      	ldr	r2, [r3, #16]
 8009cb2:	0652      	lsls	r2, r2, #25
 8009cb4:	d508      	bpl.n	8009cc8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	0650      	lsls	r0, r2, #25
 8009cba:	d505      	bpl.n	8009cc8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff ff77 	bl	8009bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	0691      	lsls	r1, r2, #26
 8009cce:	d522      	bpl.n	8009d16 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	0692      	lsls	r2, r2, #26
 8009cd4:	d51f      	bpl.n	8009d16 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cd6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cdc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009ce2:	f000 b8e3 	b.w	8009eac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce6:	f7ff ff63 	bl	8009bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff ff62 	bl	8009bb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009cf0:	e776      	b.n	8009be0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf2:	f7ff ff5d 	bl	8009bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7ff ff5c 	bl	8009bb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009cfc:	e785      	b.n	8009c0a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfe:	f7ff ff57 	bl	8009bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff ff56 	bl	8009bb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d08:	e793      	b.n	8009c32 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0a:	f7ff ff51 	bl	8009bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff ff50 	bl	8009bb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d14:	e7a2      	b.n	8009c5c <HAL_TIM_IRQHandler+0xa4>
 8009d16:	bd10      	pop	{r4, pc}

08009d18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d18:	4a30      	ldr	r2, [pc, #192]	; (8009ddc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8009d1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d1c:	4290      	cmp	r0, r2
 8009d1e:	d012      	beq.n	8009d46 <TIM_Base_SetConfig+0x2e>
 8009d20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d24:	d00f      	beq.n	8009d46 <TIM_Base_SetConfig+0x2e>
 8009d26:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009d2a:	4290      	cmp	r0, r2
 8009d2c:	d00b      	beq.n	8009d46 <TIM_Base_SetConfig+0x2e>
 8009d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d32:	4290      	cmp	r0, r2
 8009d34:	d007      	beq.n	8009d46 <TIM_Base_SetConfig+0x2e>
 8009d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d3a:	4290      	cmp	r0, r2
 8009d3c:	d003      	beq.n	8009d46 <TIM_Base_SetConfig+0x2e>
 8009d3e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009d42:	4290      	cmp	r0, r2
 8009d44:	d119      	bne.n	8009d7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009d46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009d4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d4e:	4a23      	ldr	r2, [pc, #140]	; (8009ddc <TIM_Base_SetConfig+0xc4>)
 8009d50:	4290      	cmp	r0, r2
 8009d52:	d01d      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d58:	d01a      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d5a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009d5e:	4290      	cmp	r0, r2
 8009d60:	d016      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d66:	4290      	cmp	r0, r2
 8009d68:	d012      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d6e:	4290      	cmp	r0, r2
 8009d70:	d00e      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d72:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009d76:	4290      	cmp	r0, r2
 8009d78:	d00a      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d7a:	4a19      	ldr	r2, [pc, #100]	; (8009de0 <TIM_Base_SetConfig+0xc8>)
 8009d7c:	4290      	cmp	r0, r2
 8009d7e:	d007      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d84:	4290      	cmp	r0, r2
 8009d86:	d003      	beq.n	8009d90 <TIM_Base_SetConfig+0x78>
 8009d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d8c:	4290      	cmp	r0, r2
 8009d8e:	d103      	bne.n	8009d98 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d90:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d96:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d98:	694a      	ldr	r2, [r1, #20]
 8009d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d9e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009da0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da2:	688b      	ldr	r3, [r1, #8]
 8009da4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da6:	680b      	ldr	r3, [r1, #0]
 8009da8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <TIM_Base_SetConfig+0xc4>)
 8009dac:	4298      	cmp	r0, r3
 8009dae:	d00f      	beq.n	8009dd0 <TIM_Base_SetConfig+0xb8>
 8009db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db4:	4298      	cmp	r0, r3
 8009db6:	d00b      	beq.n	8009dd0 <TIM_Base_SetConfig+0xb8>
 8009db8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	d007      	beq.n	8009dd0 <TIM_Base_SetConfig+0xb8>
 8009dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	d003      	beq.n	8009dd0 <TIM_Base_SetConfig+0xb8>
 8009dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dcc:	4298      	cmp	r0, r3
 8009dce:	d101      	bne.n	8009dd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dd0:	690b      	ldr	r3, [r1, #16]
 8009dd2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	6143      	str	r3, [r0, #20]
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40012c00 	.word	0x40012c00
 8009de0:	40014000 	.word	0x40014000

08009de4 <HAL_TIM_Base_Init>:
{
 8009de4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009de6:	4604      	mov	r4, r0
 8009de8:	b1a0      	cbz	r0, 8009e14 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009dea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009df2:	b91b      	cbnz	r3, 8009dfc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009df4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009df8:	f004 fb92 	bl	800e520 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1d21      	adds	r1, r4, #4
 8009e06:	f7ff ff87 	bl	8009d18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009e10:	2000      	movs	r0, #0
 8009e12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009e14:	2001      	movs	r0, #1
}
 8009e16:	bd10      	pop	{r4, pc}

08009e18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009e1c:	2b01      	cmp	r3, #1
{
 8009e1e:	b570      	push	{r4, r5, r6, lr}
 8009e20:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8009e24:	d039      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e2a:	4d1d      	ldr	r5, [pc, #116]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8009e2c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8009e2e:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e30:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8009e32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8009e36:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009e38:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e3a:	d002      	beq.n	8009e42 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8009e3c:	4e19      	ldr	r6, [pc, #100]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8009e3e:	42b3      	cmp	r3, r6
 8009e40:	d103      	bne.n	8009e4a <HAL_TIMEx_MasterConfigSynchronization+0x32>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e42:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e48:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e4a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e50:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e52:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8009e54:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e56:	d015      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5c:	d012      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00f      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00b      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d007      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e74:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d003      	beq.n	8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8009e7c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d104      	bne.n	8009e8e <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e84:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e86:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e8a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e94:	2300      	movs	r3, #0
 8009e96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8009e9a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8009e9c:	bd70      	pop	{r4, r5, r6, pc}
 8009e9e:	bf00      	nop
 8009ea0:	40012c00 	.word	0x40012c00
 8009ea4:	40013400 	.word	0x40013400
 8009ea8:	40000400 	.word	0x40000400

08009eac <HAL_TIMEx_CommutCallback>:
 8009eac:	4770      	bx	lr

08009eae <HAL_TIMEx_BreakCallback>:
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009eb0:	4770      	bx	lr
	...

08009eb4 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eb4:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb6:	69c1      	ldr	r1, [r0, #28]
{
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ebc:	6883      	ldr	r3, [r0, #8]
 8009ebe:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ec2:	4303      	orrs	r3, r0
 8009ec4:	6960      	ldr	r0, [r4, #20]
 8009ec6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec8:	48ba      	ldr	r0, [pc, #744]	; (800a1b4 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eca:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ecc:	4028      	ands	r0, r5
 8009ece:	4303      	orrs	r3, r0
 8009ed0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ed2:	6853      	ldr	r3, [r2, #4]
 8009ed4:	68e0      	ldr	r0, [r4, #12]
 8009ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009eda:	4303      	orrs	r3, r0
 8009edc:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ede:	4bb6      	ldr	r3, [pc, #728]	; (800a1b8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ee0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ee2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ee4:	bf1c      	itt	ne
 8009ee6:	6a23      	ldrne	r3, [r4, #32]
 8009ee8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eea:	6893      	ldr	r3, [r2, #8]
 8009eec:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009ef0:	4303      	orrs	r3, r0
 8009ef2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ef4:	4bb1      	ldr	r3, [pc, #708]	; (800a1bc <UART_SetConfig+0x308>)
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d119      	bne.n	8009f2e <UART_SetConfig+0x7a>
 8009efa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8009efe:	4ab0      	ldr	r2, [pc, #704]	; (800a1c0 <UART_SetConfig+0x30c>)
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f04:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f08:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009f0c:	5cd3      	ldrb	r3, [r2, r3]
 8009f0e:	f040 8138 	bne.w	800a182 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8009f12:	2b08      	cmp	r3, #8
 8009f14:	f200 808f 	bhi.w	800a036 <UART_SetConfig+0x182>
 8009f18:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009f1c:	00ca011a 	.word	0x00ca011a
 8009f20:	008d00f9 	.word	0x008d00f9
 8009f24:	008d0114 	.word	0x008d0114
 8009f28:	008d008d 	.word	0x008d008d
 8009f2c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f2e:	4ba5      	ldr	r3, [pc, #660]	; (800a1c4 <UART_SetConfig+0x310>)
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d107      	bne.n	8009f44 <UART_SetConfig+0x90>
 8009f34:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8009f38:	4aa3      	ldr	r2, [pc, #652]	; (800a1c8 <UART_SetConfig+0x314>)
 8009f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3e:	f003 030c 	and.w	r3, r3, #12
 8009f42:	e7e1      	b.n	8009f08 <UART_SetConfig+0x54>
 8009f44:	4ba1      	ldr	r3, [pc, #644]	; (800a1cc <UART_SetConfig+0x318>)
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d123      	bne.n	8009f92 <UART_SetConfig+0xde>
 8009f4a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8009f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f56:	2b10      	cmp	r3, #16
 8009f58:	f000 80f1 	beq.w	800a13e <UART_SetConfig+0x28a>
 8009f5c:	d80b      	bhi.n	8009f76 <UART_SetConfig+0xc2>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80f3 	beq.w	800a14a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8009f68:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8009f6c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f70:	f000 80f8 	beq.w	800a164 <UART_SetConfig+0x2b0>
 8009f74:	e0a8      	b.n	800a0c8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	f000 80c6 	beq.w	800a108 <UART_SetConfig+0x254>
 8009f7c:	2b30      	cmp	r3, #48	; 0x30
 8009f7e:	d1f1      	bne.n	8009f64 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f80:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009f84:	f040 80b8 	bne.w	800a0f8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009f88:	6860      	ldr	r0, [r4, #4]
 8009f8a:	0843      	lsrs	r3, r0, #1
 8009f8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009f90:	e0c3      	b.n	800a11a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f92:	4b8f      	ldr	r3, [pc, #572]	; (800a1d0 <UART_SetConfig+0x31c>)
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d11e      	bne.n	8009fd6 <UART_SetConfig+0x122>
 8009f98:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	f000 80bb 	beq.w	800a120 <UART_SetConfig+0x26c>
 8009faa:	d80a      	bhi.n	8009fc2 <UART_SetConfig+0x10e>
 8009fac:	b97b      	cbnz	r3, 8009fce <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fae:	4b82      	ldr	r3, [pc, #520]	; (800a1b8 <UART_SetConfig+0x304>)
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	f040 80ca 	bne.w	800a14a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8009fb6:	f7ff f895 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
        break;
 8009fba:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8009fbc:	bbb0      	cbnz	r0, 800a02c <UART_SetConfig+0x178>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	e03a      	b.n	800a038 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fc2:	2b80      	cmp	r3, #128	; 0x80
 8009fc4:	f000 809d 	beq.w	800a102 <UART_SetConfig+0x24e>
 8009fc8:	2bc0      	cmp	r3, #192	; 0xc0
 8009fca:	f000 80b0 	beq.w	800a12e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fce:	4b7a      	ldr	r3, [pc, #488]	; (800a1b8 <UART_SetConfig+0x304>)
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d1c7      	bne.n	8009f64 <UART_SetConfig+0xb0>
 8009fd4:	e02f      	b.n	800a036 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fd6:	4b7f      	ldr	r3, [pc, #508]	; (800a1d4 <UART_SetConfig+0x320>)
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d111      	bne.n	800a000 <UART_SetConfig+0x14c>
 8009fdc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fec:	f000 8098 	beq.w	800a120 <UART_SetConfig+0x26c>
 8009ff0:	d9dc      	bls.n	8009fac <UART_SetConfig+0xf8>
 8009ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff6:	f000 8084 	beq.w	800a102 <UART_SetConfig+0x24e>
 8009ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ffe:	e7e4      	b.n	8009fca <UART_SetConfig+0x116>
 800a000:	4b6d      	ldr	r3, [pc, #436]	; (800a1b8 <UART_SetConfig+0x304>)
 800a002:	429a      	cmp	r2, r3
 800a004:	d1ae      	bne.n	8009f64 <UART_SetConfig+0xb0>
 800a006:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a016:	f000 8083 	beq.w	800a120 <UART_SetConfig+0x26c>
 800a01a:	d9c7      	bls.n	8009fac <UART_SetConfig+0xf8>
 800a01c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a020:	d06f      	beq.n	800a102 <UART_SetConfig+0x24e>
 800a022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a026:	e7d0      	b.n	8009fca <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a028:	486b      	ldr	r0, [pc, #428]	; (800a1d8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800a02a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a02c:	6862      	ldr	r2, [r4, #4]
 800a02e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800a032:	4281      	cmp	r1, r0
 800a034:	d905      	bls.n	800a042 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800a036:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800a03c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800a03e:	4610      	mov	r0, r2
 800a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a042:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800a046:	d8f6      	bhi.n	800a036 <UART_SetConfig+0x182>
        switch (clocksource)
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d82e      	bhi.n	800a0aa <UART_SetConfig+0x1f6>
 800a04c:	e8df f003 	tbb	[pc, r3]
 800a050:	2d1c2d05 	.word	0x2d1c2d05
 800a054:	2d2d2d24 	.word	0x2d2d2d24
 800a058:	27          	.byte	0x27
 800a059:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 800a05a:	f7ff f843 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a064:	0856      	lsrs	r6, r2, #1
 800a066:	2700      	movs	r7, #0
 800a068:	fbe1 6700 	umlal	r6, r7, r1, r0
 800a06c:	2300      	movs	r3, #0
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a072:	f7fd f917 	bl	80072a4 <__aeabi_uldivmod>
            break;
 800a076:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a078:	4b58      	ldr	r3, [pc, #352]	; (800a1dc <UART_SetConfig+0x328>)
 800a07a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800a07e:	4299      	cmp	r1, r3
 800a080:	d8d9      	bhi.n	800a036 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	60d8      	str	r0, [r3, #12]
 800a086:	e7d7      	b.n	800a038 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a088:	4855      	ldr	r0, [pc, #340]	; (800a1e0 <UART_SetConfig+0x32c>)
 800a08a:	0855      	lsrs	r5, r2, #1
 800a08c:	2300      	movs	r3, #0
 800a08e:	2100      	movs	r1, #0
 800a090:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a092:	f141 0100 	adc.w	r1, r1, #0
 800a096:	e7ec      	b.n	800a072 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 800a098:	f7fe fcb4 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 800a09c:	e7df      	b.n	800a05e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a09e:	0850      	lsrs	r0, r2, #1
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800a0a8:	e7f3      	b.n	800a092 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800a0aa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e7e3      	b.n	800a078 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0b0:	f7ff f82a 	bl	8009108 <HAL_RCC_GetPCLK2Freq>
 800a0b4:	e04e      	b.n	800a154 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0b6:	f7ff f815 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0ba:	6862      	ldr	r2, [r4, #4]
 800a0bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800a0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0c4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0c6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0c8:	f1a3 0010 	sub.w	r0, r3, #16
 800a0cc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800a0d0:	4288      	cmp	r0, r1
 800a0d2:	d8b0      	bhi.n	800a036 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 800a0d4:	6821      	ldr	r1, [r4, #0]
 800a0d6:	60cb      	str	r3, [r1, #12]
 800a0d8:	e7ae      	b.n	800a038 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0da:	f7ff f815 	bl	8009108 <HAL_RCC_GetPCLK2Freq>
 800a0de:	e7ec      	b.n	800a0ba <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a0e0:	6860      	ldr	r0, [r4, #4]
 800a0e2:	0843      	lsrs	r3, r0, #1
 800a0e4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a0e8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a0ec:	fbb3 f3f0 	udiv	r3, r3, r0
 800a0f0:	e7e8      	b.n	800a0c4 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 800a0f2:	f7fe fc87 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 800a0f6:	e7e0      	b.n	800a0ba <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a0f8:	6860      	ldr	r0, [r4, #4]
 800a0fa:	0843      	lsrs	r3, r0, #1
 800a0fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a100:	e7f4      	b.n	800a0ec <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a102:	4b2d      	ldr	r3, [pc, #180]	; (800a1b8 <UART_SetConfig+0x304>)
 800a104:	429a      	cmp	r2, r3
 800a106:	d08f      	beq.n	800a028 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a108:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a10c:	d1e8      	bne.n	800a0e0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a10e:	6860      	ldr	r0, [r4, #4]
 800a110:	0843      	lsrs	r3, r0, #1
 800a112:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a116:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a11a:	fbb3 f3f0 	udiv	r3, r3, r0
 800a11e:	e01f      	b.n	800a160 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a120:	4b25      	ldr	r3, [pc, #148]	; (800a1b8 <UART_SetConfig+0x304>)
 800a122:	429a      	cmp	r2, r3
 800a124:	d10b      	bne.n	800a13e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a126:	f7fe fc6d 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
        break;
 800a12a:	2304      	movs	r3, #4
 800a12c:	e746      	b.n	8009fbc <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a12e:	4b22      	ldr	r3, [pc, #136]	; (800a1b8 <UART_SetConfig+0x304>)
 800a130:	429a      	cmp	r2, r3
 800a132:	f47f af25 	bne.w	8009f80 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800a13a:	2308      	movs	r3, #8
 800a13c:	e776      	b.n	800a02c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a13e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a142:	d1d6      	bne.n	800a0f2 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a144:	f7fe fc5e 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 800a148:	e004      	b.n	800a154 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a14a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a14e:	d1b2      	bne.n	800a0b6 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a150:	f7fe ffc8 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a154:	6861      	ldr	r1, [r4, #4]
 800a156:	084a      	lsrs	r2, r1, #1
 800a158:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800a15c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a160:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800a162:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a164:	f1a3 0010 	sub.w	r0, r3, #16
 800a168:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800a16c:	4288      	cmp	r0, r1
 800a16e:	f63f af62 	bhi.w	800a036 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a172:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800a176:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a178:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800a17c:	430b      	orrs	r3, r1
 800a17e:	60c3      	str	r3, [r0, #12]
 800a180:	e75a      	b.n	800a038 <UART_SetConfig+0x184>
    switch (clocksource)
 800a182:	2b08      	cmp	r3, #8
 800a184:	f63f af57 	bhi.w	800a036 <UART_SetConfig+0x182>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x2dc>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a0b7 	.word	0x0800a0b7
 800a194:	0800a0db 	.word	0x0800a0db
 800a198:	0800a0e1 	.word	0x0800a0e1
 800a19c:	0800a037 	.word	0x0800a037
 800a1a0:	0800a0f3 	.word	0x0800a0f3
 800a1a4:	0800a037 	.word	0x0800a037
 800a1a8:	0800a037 	.word	0x0800a037
 800a1ac:	0800a037 	.word	0x0800a037
 800a1b0:	0800a0f9 	.word	0x0800a0f9
 800a1b4:	efff69f3 	.word	0xefff69f3
 800a1b8:	40008000 	.word	0x40008000
 800a1bc:	40013800 	.word	0x40013800
 800a1c0:	08016588 	.word	0x08016588
 800a1c4:	40004400 	.word	0x40004400
 800a1c8:	0801658c 	.word	0x0801658c
 800a1cc:	40004800 	.word	0x40004800
 800a1d0:	40004c00 	.word	0x40004c00
 800a1d4:	40005000 	.word	0x40005000
 800a1d8:	00f42400 	.word	0x00f42400
 800a1dc:	000ffcff 	.word	0x000ffcff
 800a1e0:	f4240000 	.word	0xf4240000

0800a1e4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a1e6:	07da      	lsls	r2, r3, #31
{
 800a1e8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1ea:	d506      	bpl.n	800a1fa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1ec:	6801      	ldr	r1, [r0, #0]
 800a1ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a1f0:	684a      	ldr	r2, [r1, #4]
 800a1f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a1f6:	4322      	orrs	r2, r4
 800a1f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1fa:	079c      	lsls	r4, r3, #30
 800a1fc:	d506      	bpl.n	800a20c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1fe:	6801      	ldr	r1, [r0, #0]
 800a200:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a202:	684a      	ldr	r2, [r1, #4]
 800a204:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a208:	4322      	orrs	r2, r4
 800a20a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a20c:	0759      	lsls	r1, r3, #29
 800a20e:	d506      	bpl.n	800a21e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a210:	6801      	ldr	r1, [r0, #0]
 800a212:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a214:	684a      	ldr	r2, [r1, #4]
 800a216:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a21a:	4322      	orrs	r2, r4
 800a21c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a21e:	071a      	lsls	r2, r3, #28
 800a220:	d506      	bpl.n	800a230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a222:	6801      	ldr	r1, [r0, #0]
 800a224:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a226:	684a      	ldr	r2, [r1, #4]
 800a228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a22c:	4322      	orrs	r2, r4
 800a22e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a230:	06dc      	lsls	r4, r3, #27
 800a232:	d506      	bpl.n	800a242 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a234:	6801      	ldr	r1, [r0, #0]
 800a236:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a238:	688a      	ldr	r2, [r1, #8]
 800a23a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a23e:	4322      	orrs	r2, r4
 800a240:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a242:	0699      	lsls	r1, r3, #26
 800a244:	d506      	bpl.n	800a254 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a246:	6801      	ldr	r1, [r0, #0]
 800a248:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a24a:	688a      	ldr	r2, [r1, #8]
 800a24c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a250:	4322      	orrs	r2, r4
 800a252:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a254:	065a      	lsls	r2, r3, #25
 800a256:	d50f      	bpl.n	800a278 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a258:	6801      	ldr	r1, [r0, #0]
 800a25a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a25c:	684a      	ldr	r2, [r1, #4]
 800a25e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a262:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a264:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a268:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a26a:	d105      	bne.n	800a278 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a26c:	684a      	ldr	r2, [r1, #4]
 800a26e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a270:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a274:	4322      	orrs	r2, r4
 800a276:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a278:	061b      	lsls	r3, r3, #24
 800a27a:	d506      	bpl.n	800a28a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a27c:	6802      	ldr	r2, [r0, #0]
 800a27e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a280:	6853      	ldr	r3, [r2, #4]
 800a282:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a286:	430b      	orrs	r3, r1
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	bd10      	pop	{r4, pc}

0800a28c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	9d06      	ldr	r5, [sp, #24]
 800a292:	4604      	mov	r4, r0
 800a294:	460f      	mov	r7, r1
 800a296:	4616      	mov	r6, r2
 800a298:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a29a:	6821      	ldr	r1, [r4, #0]
 800a29c:	69ca      	ldr	r2, [r1, #28]
 800a29e:	ea37 0302 	bics.w	r3, r7, r2
 800a2a2:	bf0c      	ite	eq
 800a2a4:	2201      	moveq	r2, #1
 800a2a6:	2200      	movne	r2, #0
 800a2a8:	42b2      	cmp	r2, r6
 800a2aa:	d002      	beq.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800a2ac:	2000      	movs	r0, #0
}
 800a2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800a2b2:	1c68      	adds	r0, r5, #1
 800a2b4:	d0f2      	beq.n	800a29c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b6:	f7fe f91b 	bl	80084f0 <HAL_GetTick>
 800a2ba:	eba0 0008 	sub.w	r0, r0, r8
 800a2be:	4285      	cmp	r5, r0
 800a2c0:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2c2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c4:	d300      	bcc.n	800a2c8 <UART_WaitOnFlagUntilTimeout+0x3c>
 800a2c6:	b97d      	cbnz	r5, 800a2e8 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2cc:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ce:	6883      	ldr	r3, [r0, #8]
 800a2d0:	f023 0301 	bic.w	r3, r3, #1
 800a2d4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a2da:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800a2e2:	2003      	movs	r0, #3
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2e8:	075a      	lsls	r2, r3, #29
 800a2ea:	d5d6      	bpl.n	800a29a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2ec:	69c3      	ldr	r3, [r0, #28]
 800a2ee:	051b      	lsls	r3, r3, #20
 800a2f0:	d5d3      	bpl.n	800a29a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2f6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2f8:	6803      	ldr	r3, [r0, #0]
 800a2fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2fe:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a300:	6883      	ldr	r3, [r0, #8]
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800a308:	2320      	movs	r3, #32
 800a30a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a30c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a30e:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a310:	e7e4      	b.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x50>

0800a312 <HAL_UART_Transmit>:
{
 800a312:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a316:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a318:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a31a:	2b20      	cmp	r3, #32
{
 800a31c:	4604      	mov	r4, r0
 800a31e:	460e      	mov	r6, r1
 800a320:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a322:	d14c      	bne.n	800a3be <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 800a324:	2900      	cmp	r1, #0
 800a326:	d048      	beq.n	800a3ba <HAL_UART_Transmit+0xa8>
 800a328:	2a00      	cmp	r2, #0
 800a32a:	d046      	beq.n	800a3ba <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800a32c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800a330:	2b01      	cmp	r3, #1
 800a332:	d044      	beq.n	800a3be <HAL_UART_Transmit+0xac>
 800a334:	2301      	movs	r3, #1
 800a336:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a33c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33e:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a340:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800a342:	f7fe f8d5 	bl	80084f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a346:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800a348:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800a350:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800a352:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a356:	d103      	bne.n	800a360 <HAL_UART_Transmit+0x4e>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	b90b      	cbnz	r3, 800a360 <HAL_UART_Transmit+0x4e>
 800a35c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800a35e:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800a360:	2300      	movs	r3, #0
 800a362:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800a366:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a36a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800a36e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a370:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 800a372:	b93a      	cbnz	r2, 800a384 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	4620      	mov	r0, r4
 800a378:	f7ff ff88 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 800a37c:	b940      	cbnz	r0, 800a390 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800a37e:	2320      	movs	r3, #32
 800a380:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800a382:	e006      	b.n	800a392 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a384:	2200      	movs	r2, #0
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	4620      	mov	r0, r4
 800a38a:	f7ff ff7f 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 800a38e:	b118      	cbz	r0, 800a398 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 800a390:	2003      	movs	r0, #3
}
 800a392:	b003      	add	sp, #12
 800a394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a398:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800a39a:	b95e      	cbnz	r6, 800a3b4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a39c:	f835 3b02 	ldrh.w	r3, [r5], #2
 800a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3a4:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800a3a6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800a3b2:	e7d8      	b.n	800a366 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3b4:	f816 3b01 	ldrb.w	r3, [r6], #1
 800a3b8:	e7f4      	b.n	800a3a4 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	e7e9      	b.n	800a392 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800a3be:	2002      	movs	r0, #2
 800a3c0:	e7e7      	b.n	800a392 <HAL_UART_Transmit+0x80>

0800a3c2 <UART_CheckIdleState>:
{
 800a3c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3c4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800a3ca:	f7fe f891 	bl	80084f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800a3d4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3d6:	d415      	bmi.n	800a404 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	075b      	lsls	r3, r3, #29
 800a3de:	d50a      	bpl.n	800a3f6 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff ff4c 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 800a3f4:	b990      	cbnz	r0, 800a41c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800a3f6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800a3f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800a3fa:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800a3fc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800a400:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800a402:	e00c      	b.n	800a41e <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	4632      	mov	r2, r6
 800a40c:	4603      	mov	r3, r0
 800a40e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a412:	4620      	mov	r0, r4
 800a414:	f7ff ff3a 	bl	800a28c <UART_WaitOnFlagUntilTimeout>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d0dd      	beq.n	800a3d8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800a41c:	2003      	movs	r0, #3
}
 800a41e:	b002      	add	sp, #8
 800a420:	bd70      	pop	{r4, r5, r6, pc}

0800a422 <HAL_UART_Init>:
{
 800a422:	b510      	push	{r4, lr}
  if (huart == NULL)
 800a424:	4604      	mov	r4, r0
 800a426:	b340      	cbz	r0, 800a47a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a428:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a42a:	b91b      	cbnz	r3, 800a434 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800a42c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800a430:	f004 f8c6 	bl	800e5c0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800a434:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a436:	2324      	movs	r3, #36	; 0x24
 800a438:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800a43a:	6813      	ldr	r3, [r2, #0]
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a442:	4620      	mov	r0, r4
 800a444:	f7ff fd36 	bl	8009eb4 <UART_SetConfig>
 800a448:	2801      	cmp	r0, #1
 800a44a:	d016      	beq.n	800a47a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a44e:	b113      	cbz	r3, 800a456 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff fec7 	bl	800a1e4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a45e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a466:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800a46e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800a470:	601a      	str	r2, [r3, #0]
}
 800a472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800a476:	f7ff bfa4 	b.w	800a3c2 <UART_CheckIdleState>
}
 800a47a:	2001      	movs	r0, #1
 800a47c:	bd10      	pop	{r4, pc}

0800a47e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800a47e:	b570      	push	{r4, r5, r6, lr}
 800a480:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a482:	2400      	movs	r4, #0
  cp.role = role;
 800a484:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 800a488:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 800a48c:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a490:	4621      	mov	r1, r4
 800a492:	2218      	movs	r2, #24
 800a494:	a804      	add	r0, sp, #16
{
 800a496:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a498:	9402      	str	r4, [sp, #8]
 800a49a:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a49e:	f007 f99d 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a4a2:	233f      	movs	r3, #63	; 0x3f
 800a4a4:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800a4a8:	238a      	movs	r3, #138	; 0x8a
 800a4aa:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800a4ae:	ab01      	add	r3, sp, #4
 800a4b0:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a4b6:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 800a4b8:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800a4be:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800a4c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800a4c2:	f000 fc2b 	bl	800ad1c <hci_send_req>
 800a4c6:	42a0      	cmp	r0, r4
 800a4c8:	db15      	blt.n	800a4f6 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a4ca:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a4ce:	b980      	cbnz	r0, 800a4f2 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800a4d0:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a4d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 800a4d6:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800a4da:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a4dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a4e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4e6:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4ec:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a4f0:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800a4f2:	b00a      	add	sp, #40	; 0x28
 800a4f4:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800a4f6:	20ff      	movs	r0, #255	; 0xff
 800a4f8:	e7fb      	b.n	800a4f2 <aci_gap_init_IDB05A1+0x74>

0800a4fa <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fe:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a500:	2400      	movs	r4, #0
  cp.role = role;
 800a502:	f88d 0004 	strb.w	r0, [sp, #4]
{
 800a506:	4688      	mov	r8, r1
 800a508:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a50a:	4621      	mov	r1, r4
 800a50c:	2218      	movs	r2, #24
 800a50e:	a804      	add	r0, sp, #16
{
 800a510:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a512:	9402      	str	r4, [sp, #8]
 800a514:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a518:	f007 f960 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a51c:	233f      	movs	r3, #63	; 0x3f
 800a51e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800a522:	238a      	movs	r3, #138	; 0x8a
 800a524:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800a528:	ab01      	add	r3, sp, #4
 800a52a:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800a52c:	2301      	movs	r3, #1
 800a52e:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a530:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 800a532:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a534:	4621      	mov	r1, r4
 800a536:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800a538:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800a53a:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800a53c:	f000 fbee 	bl	800ad1c <hci_send_req>
 800a540:	42a0      	cmp	r0, r4
 800a542:	db15      	blt.n	800a570 <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a544:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a548:	b978      	cbnz	r0, 800a56a <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800a54a:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a54c:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800a550:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800a554:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800a558:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a55c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a560:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800a562:	9a03      	ldr	r2, [sp, #12]
 800a564:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800a568:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 800a56a:	b00a      	add	sp, #40	; 0x28
 800a56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800a570:	20ff      	movs	r0, #255	; 0xff
 800a572:	e7fa      	b.n	800a56a <aci_gap_init_IDB04A1+0x70>

0800a574 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	b092      	sub	sp, #72	; 0x48
 800a578:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800a57c:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800a580:	192e      	adds	r6, r5, r4
 800a582:	2e1a      	cmp	r6, #26
 800a584:	dc4f      	bgt.n	800a626 <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800a586:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800a58a:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800a58e:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800a592:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a596:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 800a598:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a59c:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 800a59e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a5a2:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 800a5a4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a5a8:	f007 f8f3 	bl	8011792 <memcpy>
  indx +=  LocalNameLen;
 800a5ac:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 800a5b0:	aa12      	add	r2, sp, #72	; 0x48
 800a5b2:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 800a5b6:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800a5b8:	ae08      	add	r6, sp, #32
  indx++;
 800a5ba:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 800a5bc:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5c4:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 800a5c6:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800a5c8:	f007 f8e3 	bl	8011792 <memcpy>
  indx +=  ServiceUUIDLen;  
 800a5cc:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800a5ce:	ab12      	add	r3, sp, #72	; 0x48
 800a5d0:	4423      	add	r3, r4
 800a5d2:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a5d6:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 800a5da:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800a5dc:	aa12      	add	r2, sp, #72	; 0x48
 800a5de:	fa52 f383 	uxtab	r3, r2, r3
 800a5e2:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800a5e6:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	2218      	movs	r2, #24
 800a5ee:	a802      	add	r0, sp, #8
 800a5f0:	f007 f8f4 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a5f4:	233f      	movs	r3, #63	; 0x3f
 800a5f6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800a5fa:	2383      	movs	r3, #131	; 0x83
 800a5fc:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 800a600:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 800a602:	f10d 0307 	add.w	r3, sp, #7
 800a606:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800a608:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800a60a:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800a60c:	2100      	movs	r1, #0
 800a60e:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800a610:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 800a612:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800a614:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a616:	f000 fb81 	bl	800ad1c <hci_send_req>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	db05      	blt.n	800a62a <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a61e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 800a622:	b012      	add	sp, #72	; 0x48
 800a624:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a626:	2042      	movs	r0, #66	; 0x42
 800a628:	e7fb      	b.n	800a622 <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 800a62a:	20ff      	movs	r0, #255	; 0xff
 800a62c:	e7f9      	b.n	800a622 <aci_gap_set_discoverable+0xae>

0800a62e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800a62e:	b510      	push	{r4, lr}
 800a630:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800a632:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 800a636:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800a63a:	f102 0010 	add.w	r0, r2, #16
 800a63e:	f10d 011e 	add.w	r1, sp, #30
 800a642:	f852 4b04 	ldr.w	r4, [r2], #4
 800a646:	f841 4b04 	str.w	r4, [r1], #4
 800a64a:	4282      	cmp	r2, r0
 800a64c:	d1f9      	bne.n	800a642 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 800a64e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 800a652:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a656:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800a65a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a65e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 800a662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a664:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a668:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 800a66a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a66e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a672:	2100      	movs	r1, #0
 800a674:	a801      	add	r0, sp, #4
 800a676:	f007 f8b1 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a67a:	233f      	movs	r3, #63	; 0x3f
 800a67c:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800a680:	2386      	movs	r3, #134	; 0x86
 800a682:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 800a686:	ab07      	add	r3, sp, #28
 800a688:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800a68a:	231a      	movs	r3, #26
 800a68c:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 800a68e:	f10d 0303 	add.w	r3, sp, #3
 800a692:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800a694:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a696:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a698:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800a69a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800a69c:	f000 fb3e 	bl	800ad1c <hci_send_req>
 800a6a0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a6a2:	bfac      	ite	ge
 800a6a4:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800a6a8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 800a6aa:	b00e      	add	sp, #56	; 0x38
 800a6ac:	bd10      	pop	{r4, pc}

0800a6ae <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6b2:	2418      	movs	r4, #24
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800a6b4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	889b      	ldrh	r3, [r3, #4]
 800a6bc:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 800a6c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a6c4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 800a6c8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a6cc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 800a6d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a6d4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 800a6d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a6dc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 800a6e0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a6e4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 800a6e8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
  cp.scanInterval = htobs(scanInterval);
 800a6ec:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 800a6f0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800a6f4:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.min_conn_length = htobs(min_conn_length);
 800a6f8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6fc:	4622      	mov	r2, r4
  cp.max_conn_length = htobs(max_conn_length);
 800a6fe:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a702:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a706:	2100      	movs	r1, #0
 800a708:	a802      	add	r0, sp, #8
 800a70a:	f007 f867 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a70e:	233f      	movs	r3, #63	; 0x3f
 800a710:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800a714:	239c      	movs	r3, #156	; 0x9c
 800a716:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800a71a:	ab08      	add	r3, sp, #32
 800a71c:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 800a71e:	230f      	movs	r3, #15
 800a720:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 800a722:	f10d 0307 	add.w	r3, sp, #7
 800a726:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a728:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a72a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a72c:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 800a72e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800a730:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a732:	f000 faf3 	bl	800ad1c <hci_send_req>
 800a736:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a738:	bfac      	ite	ge
 800a73a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a73e:	20ff      	movlt	r0, #255	; 0xff
}
 800a740:	b00e      	add	sp, #56	; 0x38
 800a742:	bd10      	pop	{r4, pc}

0800a744 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a744:	b500      	push	{lr}
 800a746:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a748:	2218      	movs	r2, #24
 800a74a:	2100      	movs	r1, #0
 800a74c:	a802      	add	r0, sp, #8
 800a74e:	f007 f845 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a752:	233f      	movs	r3, #63	; 0x3f
 800a754:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 800a758:	f240 1301 	movw	r3, #257	; 0x101
 800a75c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800a760:	f10d 0307 	add.w	r3, sp, #7
 800a764:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800a766:	2100      	movs	r1, #0
  rq.rlen = 1;
 800a768:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800a76a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800a76c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a76e:	f000 fad5 	bl	800ad1c <hci_send_req>
 800a772:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a774:	bfac      	ite	ge
 800a776:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a77a:	20ff      	movlt	r0, #255	; 0xff
}
 800a77c:	b009      	add	sp, #36	; 0x24
 800a77e:	f85d fb04 	ldr.w	pc, [sp], #4

0800a782 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800a782:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a784:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a786:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 800a788:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 800a78a:	bf0c      	ite	eq
 800a78c:	2402      	moveq	r4, #2
 800a78e:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800a790:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 800a794:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800a796:	f10d 0005 	add.w	r0, sp, #5
 800a79a:	4622      	mov	r2, r4
{
 800a79c:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800a79e:	f006 fff8 	bl	8011792 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800a7a2:	ab0c      	add	r3, sp, #48	; 0x30
 800a7a4:	4423      	add	r3, r4
 800a7a6:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 800a7aa:	ab0c      	add	r3, sp, #48	; 0x30
 800a7ac:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800a7ae:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 800a7b0:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a7b4:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a7b6:	2218      	movs	r2, #24
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a7be:	f8ad 5000 	strh.w	r5, [sp]
 800a7c2:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a7c6:	f007 f809 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a7ca:	233f      	movs	r3, #63	; 0x3f
 800a7cc:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800a7d0:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a7d4:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 800a7d8:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a7da:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800a7dc:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 800a7de:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 800a7e0:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800a7e2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a7e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 800a7e8:	f000 fa98 	bl	800ad1c <hci_send_req>
 800a7ec:	42a8      	cmp	r0, r5
 800a7ee:	db09      	blt.n	800a804 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a7f0:	f89d 0000 	ldrb.w	r0, [sp]
 800a7f4:	b920      	cbnz	r0, 800a800 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7fa:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a7fe:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800a800:	b00d      	add	sp, #52	; 0x34
 800a802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800a804:	20ff      	movs	r0, #255	; 0xff
 800a806:	e7fb      	b.n	800a800 <aci_gatt_add_serv+0x7e>

0800a808 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a808:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a80a:	2901      	cmp	r1, #1
{
 800a80c:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 800a80e:	bf0c      	ite	eq
 800a810:	2402      	moveq	r4, #2
 800a812:	2410      	movne	r4, #16
{
 800a814:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a816:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a81a:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 800a81c:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a820:	f10d 001f 	add.w	r0, sp, #31
 800a824:	4631      	mov	r1, r6
{
 800a826:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a828:	f006 ffb3 	bl	8011792 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800a82c:	ab0e      	add	r3, sp, #56	; 0x38
 800a82e:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800a830:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 800a832:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 800a836:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800a83a:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 800a83e:	ab0e      	add	r3, sp, #56	; 0x38
 800a840:	4423      	add	r3, r4
 800a842:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800a846:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800a84a:	ab0e      	add	r3, sp, #56	; 0x38
 800a84c:	4423      	add	r3, r4
 800a84e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a852:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 800a856:	ab0e      	add	r3, sp, #56	; 0x38
 800a858:	4423      	add	r3, r4
 800a85a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a85e:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 800a862:	ab0e      	add	r3, sp, #56	; 0x38
 800a864:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a866:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 800a868:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800a86c:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a870:	4629      	mov	r1, r5
 800a872:	2218      	movs	r2, #24
 800a874:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a876:	f8ad 5000 	strh.w	r5, [sp]
 800a87a:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a87e:	f006 ffad 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a882:	233f      	movs	r3, #63	; 0x3f
 800a884:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800a888:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a88c:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 800a890:	ab07      	add	r3, sp, #28
 800a892:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 800a894:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a896:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 800a898:	4629      	mov	r1, r5
 800a89a:	a801      	add	r0, sp, #4
  rq.clen = indx;
 800a89c:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800a89e:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a8a2:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800a8a4:	f000 fa3a 	bl	800ad1c <hci_send_req>
 800a8a8:	42a8      	cmp	r0, r5
 800a8aa:	db09      	blt.n	800a8c0 <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800a8ac:	f89d 0000 	ldrb.w	r0, [sp]
 800a8b0:	b920      	cbnz	r0, 800a8bc <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800a8b2:	9b00      	ldr	r3, [sp, #0]
 800a8b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8b6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a8ba:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800a8bc:	b00e      	add	sp, #56	; 0x38
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800a8c0:	20ff      	movs	r0, #255	; 0xff
 800a8c2:	e7fb      	b.n	800a8bc <aci_gatt_add_char+0xb4>

0800a8c4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800a8c4:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a8c6:	2b7a      	cmp	r3, #122	; 0x7a
{
 800a8c8:	b0a8      	sub	sp, #160	; 0xa0
 800a8ca:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a8cc:	dc2d      	bgt.n	800a92a <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800a8ce:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800a8d2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 800a8d6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a8da:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 800a8dc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 800a8e6:	f006 ff54 	bl	8011792 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a8ea:	2218      	movs	r2, #24
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	a802      	add	r0, sp, #8
 800a8f0:	f006 ff74 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a8f4:	233f      	movs	r3, #63	; 0x3f
 800a8f6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800a8fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a8fe:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800a902:	ab08      	add	r3, sp, #32
 800a904:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 800a906:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 800a908:	f10d 0307 	add.w	r3, sp, #7
 800a90c:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800a90e:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800a910:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800a912:	2100      	movs	r1, #0
 800a914:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800a916:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800a918:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a91a:	f000 f9ff 	bl	800ad1c <hci_send_req>
 800a91e:	2800      	cmp	r0, #0
 800a920:	db05      	blt.n	800a92e <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800a922:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 800a926:	b028      	add	sp, #160	; 0xa0
 800a928:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a92a:	2042      	movs	r0, #66	; 0x42
 800a92c:	e7fb      	b.n	800a926 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 800a92e:	20ff      	movs	r0, #255	; 0xff
 800a930:	e7f9      	b.n	800a926 <aci_gatt_update_char_value+0x62>

0800a932 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800a932:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 800a934:	2b01      	cmp	r3, #1
{
 800a936:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800a938:	bf0c      	ite	eq
 800a93a:	2402      	moveq	r4, #2
 800a93c:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a93e:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800a942:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800a946:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a94a:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 800a94c:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a950:	4622      	mov	r2, r4
 800a952:	f10d 000f 	add.w	r0, sp, #15
 800a956:	f006 ff1c 	bl	8011792 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a95a:	2218      	movs	r2, #24
 800a95c:	2100      	movs	r1, #0
 800a95e:	a808      	add	r0, sp, #32
 800a960:	f006 ff3c 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a964:	233f      	movs	r3, #63	; 0x3f
 800a966:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800a96a:	f44f 738b 	mov.w	r3, #278	; 0x116
 800a96e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 800a972:	ab02      	add	r3, sp, #8
 800a974:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 800a976:	230f      	movs	r3, #15
 800a978:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 800a97a:	f10d 0307 	add.w	r3, sp, #7
 800a97e:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 800a980:	3407      	adds	r4, #7
  rq.rlen = 1;
 800a982:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800a984:	2100      	movs	r1, #0
 800a986:	a808      	add	r0, sp, #32
  rq.clen = indx;
 800a988:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 800a98a:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800a98c:	f000 f9c6 	bl	800ad1c <hci_send_req>
 800a990:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800a992:	bfac      	ite	ge
 800a994:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800a998:	20ff      	movlt	r0, #255	; 0xff
}
 800a99a:	b00e      	add	sp, #56	; 0x38
 800a99c:	bd10      	pop	{r4, pc}

0800a99e <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800a99e:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800a9a0:	2a7b      	cmp	r2, #123	; 0x7b
{
 800a9a2:	b0a8      	sub	sp, #160	; 0xa0
 800a9a4:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800a9a6:	dc2c      	bgt.n	800aa02 <aci_gatt_write_charac_descriptor+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a9a8:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800a9ac:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800a9b0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800a9b4:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 800a9b6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800a9ba:	f006 feea 	bl	8011792 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a9be:	2218      	movs	r2, #24
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	a802      	add	r0, sp, #8
 800a9c4:	f006 ff0a 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a9c8:	233f      	movs	r3, #63	; 0x3f
 800a9ca:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800a9ce:	f240 1321 	movw	r3, #289	; 0x121
 800a9d2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800a9d6:	ab08      	add	r3, sp, #32
 800a9d8:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 800a9da:	230f      	movs	r3, #15
 800a9dc:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 800a9de:	3405      	adds	r4, #5
  rq.rparam = &status;
 800a9e0:	f10d 0307 	add.w	r3, sp, #7
 800a9e4:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800a9e6:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800a9e8:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800a9ee:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800a9f0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800a9f2:	f000 f993 	bl	800ad1c <hci_send_req>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	db05      	blt.n	800aa06 <aci_gatt_write_charac_descriptor+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a9fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a9fe:	b028      	add	sp, #160	; 0xa0
 800aa00:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800aa02:	2042      	movs	r0, #66	; 0x42
 800aa04:	e7fb      	b.n	800a9fe <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;
 800aa06:	20ff      	movs	r0, #255	; 0xff
 800aa08:	e7f9      	b.n	800a9fe <aci_gatt_write_charac_descriptor+0x60>

0800aa0a <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 800aa0a:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800aa0c:	2a14      	cmp	r2, #20
{
 800aa0e:	b08e      	sub	sp, #56	; 0x38
 800aa10:	4614      	mov	r4, r2
  if(val_len > sizeof(cp.attr_val))
 800aa12:	d829      	bhi.n	800aa68 <aci_gatt_write_without_response+0x5e>
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 800aa14:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp.attr_handle = htobs(attr_handle);
 800aa18:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp.val_len = val_len;
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800aa1c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800aa20:	4619      	mov	r1, r3
  cp.val_len = val_len;
 800aa22:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800aa26:	f006 feb4 	bl	8011792 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa2a:	2218      	movs	r2, #24
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	a801      	add	r0, sp, #4
 800aa30:	f006 fed4 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800aa34:	233f      	movs	r3, #63	; 0x3f
 800aa36:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800aa3a:	f240 1323 	movw	r3, #291	; 0x123
 800aa3e:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 800aa42:	ab07      	add	r3, sp, #28
 800aa44:	9303      	str	r3, [sp, #12]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
 800aa46:	f10d 0303 	add.w	r3, sp, #3
 800aa4a:	9305      	str	r3, [sp, #20]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800aa4c:	3405      	adds	r4, #5
  rq.rlen = 1;
 800aa4e:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800aa50:	2100      	movs	r1, #0
 800aa52:	a801      	add	r0, sp, #4
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800aa54:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 800aa56:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800aa58:	f000 f960 	bl	800ad1c <hci_send_req>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	db05      	blt.n	800aa6c <aci_gatt_write_without_response+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800aa60:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800aa64:	b00e      	add	sp, #56	; 0x38
 800aa66:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800aa68:	2042      	movs	r0, #66	; 0x42
 800aa6a:	e7fb      	b.n	800aa64 <aci_gatt_write_without_response+0x5a>
    return BLE_STATUS_TIMEOUT;
 800aa6c:	20ff      	movs	r0, #255	; 0xff
 800aa6e:	e7f9      	b.n	800aa64 <aci_gatt_write_without_response+0x5a>

0800aa70 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800aa70:	b510      	push	{r4, lr}
 800aa72:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800aa74:	2c7e      	cmp	r4, #126	; 0x7e
{
 800aa76:	b0a8      	sub	sp, #160	; 0xa0
 800aa78:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800aa7a:	dc27      	bgt.n	800aacc <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800aa7c:	4622      	mov	r2, r4
  buffer[indx] = offset;
 800aa7e:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 800aa82:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 800aa86:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 800aa8a:	f006 fe82 	bl	8011792 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aa8e:	2218      	movs	r2, #24
 800aa90:	2100      	movs	r1, #0
 800aa92:	a802      	add	r0, sp, #8
 800aa94:	f006 fea2 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800aa98:	233f      	movs	r3, #63	; 0x3f
 800aa9a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800aaa4:	ab08      	add	r3, sp, #32
 800aaa6:	9304      	str	r3, [sp, #16]
  indx +=  len;
 800aaa8:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 800aaaa:	f10d 0307 	add.w	r3, sp, #7
 800aaae:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800aab0:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800aab2:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800aab4:	2100      	movs	r1, #0
 800aab6:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800aab8:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800aaba:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800aabc:	f000 f92e 	bl	800ad1c <hci_send_req>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	db05      	blt.n	800aad0 <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 800aac4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800aac8:	b028      	add	sp, #160	; 0xa0
 800aaca:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800aacc:	2042      	movs	r0, #66	; 0x42
 800aace:	e7fb      	b.n	800aac8 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 800aad0:	20ff      	movs	r0, #255	; 0xff
 800aad2:	e7f9      	b.n	800aac8 <aci_hal_write_config_data+0x58>

0800aad4 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800aad4:	b500      	push	{lr}
 800aad6:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aad8:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 800aada:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800aade:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aae2:	a802      	add	r0, sp, #8
 800aae4:	2100      	movs	r1, #0
 800aae6:	f006 fe79 	bl	80117dc <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800aaea:	233f      	movs	r3, #63	; 0x3f
 800aaec:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800aaf0:	230f      	movs	r3, #15
 800aaf2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800aaf6:	ab01      	add	r3, sp, #4
 800aaf8:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800aafa:	2302      	movs	r3, #2
 800aafc:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800aafe:	f10d 0303 	add.w	r3, sp, #3
 800ab02:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800ab04:	2100      	movs	r1, #0
  rq.rlen = 1;
 800ab06:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ab08:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800ab0a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ab0c:	f000 f906 	bl	800ad1c <hci_send_req>
 800ab10:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800ab12:	bfac      	ite	ge
 800ab14:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800ab18:	20ff      	movlt	r0, #255	; 0xff
}
 800ab1a:	b009      	add	sp, #36	; 0x24
 800ab1c:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab20 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800ab20:	b530      	push	{r4, r5, lr}
 800ab22:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800ab24:	f10d 030e 	add.w	r3, sp, #14
 800ab28:	9300      	str	r3, [sp, #0]
{
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800ab2e:	ab03      	add	r3, sp, #12
 800ab30:	f10d 0209 	add.w	r2, sp, #9
 800ab34:	f10d 010a 	add.w	r1, sp, #10
 800ab38:	a802      	add	r0, sp, #8
 800ab3a:	f000 f82f 	bl	800ab9c <hci_le_read_local_version>
 800ab3e:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800ab40:	b968      	cbnz	r0, 800ab5e <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800ab42:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ab46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 800ab4a:	0a0b      	lsrs	r3, r1, #8
 800ab4c:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ab4e:	f002 030f 	and.w	r3, r2, #15
 800ab52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800ab56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800ab5e:	b005      	add	sp, #20
 800ab60:	bd30      	pop	{r4, r5, pc}

0800ab62 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800ab62:	b500      	push	{lr}
 800ab64:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ab66:	2218      	movs	r2, #24
 800ab68:	2100      	movs	r1, #0
 800ab6a:	a802      	add	r0, sp, #8
 800ab6c:	f006 fe36 	bl	80117dc <memset>
  rq.ogf = OGF_HOST_CTL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800ab76:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800ab7a:	f10d 0307 	add.w	r3, sp, #7
 800ab7e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ab80:	2100      	movs	r1, #0
  rq.rlen = 1;
 800ab82:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ab84:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800ab86:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ab88:	f000 f8c8 	bl	800ad1c <hci_send_req>
 800ab8c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800ab8e:	bfac      	ite	ge
 800ab90:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800ab94:	20ff      	movlt	r0, #255	; 0xff
}
 800ab96:	b009      	add	sp, #36	; 0x24
 800ab98:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab9c <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800ab9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800aba0:	2400      	movs	r4, #0
{
 800aba2:	b08b      	sub	sp, #44	; 0x2c
 800aba4:	4681      	mov	r9, r0
 800aba6:	4688      	mov	r8, r1
 800aba8:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800abaa:	4621      	mov	r1, r4
 800abac:	2218      	movs	r2, #24
 800abae:	a804      	add	r0, sp, #16
{
 800abb0:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800abb2:	9401      	str	r4, [sp, #4]
 800abb4:	9402      	str	r4, [sp, #8]
 800abb6:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800abba:	f006 fe0f 	bl	80117dc <memset>
  rq.ogf = OGF_INFO_PARAM;
 800abbe:	2304      	movs	r3, #4
 800abc0:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800abca:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800abcc:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 800abce:	4621      	mov	r1, r4
 800abd0:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800abd2:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800abd4:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800abd6:	f000 f8a1 	bl	800ad1c <hci_send_req>
 800abda:	42a0      	cmp	r0, r4
 800abdc:	db1c      	blt.n	800ac18 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800abde:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800abe2:	b9b0      	cbnz	r0, 800ac12 <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800abe4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800abe8:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 800abec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800abf0:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 800abf4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800abf8:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800abfa:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800abfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ac00:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800ac04:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ac06:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ac0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ac0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac10:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800ac12:	b00b      	add	sp, #44	; 0x2c
 800ac14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 800ac18:	20ff      	movs	r0, #255	; 0xff
 800ac1a:	e7fa      	b.n	800ac12 <hci_le_read_local_version+0x76>

0800ac1c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ac1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1e:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ac20:	ad08      	add	r5, sp, #32
 800ac22:	2420      	movs	r4, #32
{
 800ac24:	4606      	mov	r6, r0
 800ac26:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800ac28:	4622      	mov	r2, r4
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f006 fdd5 	bl	80117dc <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ac32:	2e1f      	cmp	r6, #31
 800ac34:	4632      	mov	r2, r6
 800ac36:	4639      	mov	r1, r7
 800ac38:	bf28      	it	cs
 800ac3a:	221f      	movcs	r2, #31
 800ac3c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 800ac40:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800ac44:	f006 fda5 	bl	8011792 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ac48:	2218      	movs	r2, #24
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	a802      	add	r0, sp, #8
 800ac4e:	f006 fdc5 	bl	80117dc <memset>
  rq.ogf = OGF_LE_CTL;
 800ac52:	2308      	movs	r3, #8
 800ac54:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800ac58:	2309      	movs	r3, #9
 800ac5a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 800ac5e:	f10d 0307 	add.w	r3, sp, #7
 800ac62:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ac64:	2100      	movs	r1, #0
  rq.rlen = 1;
 800ac66:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800ac68:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 800ac6a:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800ac6c:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800ac6e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ac70:	f000 f854 	bl	800ad1c <hci_send_req>
 800ac74:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800ac76:	bfac      	ite	ge
 800ac78:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800ac7c:	20ff      	movlt	r0, #255	; 0xff
}
 800ac7e:	b011      	add	sp, #68	; 0x44
 800ac80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ac84 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800ac84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800ac86:	4d08      	ldr	r5, [pc, #32]	; (800aca8 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800ac88:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 f959 	bl	800af42 <list_is_empty>
 800ac90:	b108      	cbz	r0, 800ac96 <move_list.constprop.0+0x12>
  }
}
 800ac92:	b003      	add	sp, #12
 800ac94:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800ac96:	a901      	add	r1, sp, #4
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 f991 	bl	800afc0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ac9e:	9901      	ldr	r1, [sp, #4]
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 f958 	bl	800af56 <list_insert_head>
 800aca6:	e7f0      	b.n	800ac8a <move_list.constprop.0+0x6>
 800aca8:	20001e7c 	.word	0x20001e7c

0800acac <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800acac:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800acae:	b108      	cbz	r0, 800acb4 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800acb0:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <hci_init+0x44>)
 800acb2:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800acb4:	f001 ffd8 	bl	800cc68 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800acb8:	480e      	ldr	r0, [pc, #56]	; (800acf4 <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800acba:	4e0f      	ldr	r6, [pc, #60]	; (800acf8 <hci_init+0x4c>)
 800acbc:	4d0d      	ldr	r5, [pc, #52]	; (800acf4 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 800acbe:	f000 f93d 	bl	800af3c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800acc2:	480e      	ldr	r0, [pc, #56]	; (800acfc <hci_init+0x50>)
 800acc4:	f000 f93a 	bl	800af3c <list_init_head>
 800acc8:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800acca:	1931      	adds	r1, r6, r4
 800accc:	4628      	mov	r0, r5
 800acce:	348c      	adds	r4, #140	; 0x8c
 800acd0:	f000 f94d 	bl	800af6e <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800acd4:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 800acd8:	d1f7      	bne.n	800acca <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800acda:	4c05      	ldr	r4, [pc, #20]	; (800acf0 <hci_init+0x44>)
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	b10a      	cbz	r2, 800ace4 <hci_init+0x38>
 800ace0:	2000      	movs	r0, #0
 800ace2:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 800ace4:	68a3      	ldr	r3, [r4, #8]
 800ace6:	b113      	cbz	r3, 800acee <hci_init+0x42>
}
 800ace8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 800acec:	4718      	bx	r3
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	20000908 	.word	0x20000908
 800acf4:	20001e74 	.word	0x20001e74
 800acf8:	20000928 	.word	0x20000928
 800acfc:	20001e7c 	.word	0x20001e7c

0800ad00 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <hci_register_io_bus+0x18>)
 800ad02:	6802      	ldr	r2, [r0, #0]
 800ad04:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800ad06:	68c2      	ldr	r2, [r0, #12]
 800ad08:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800ad0a:	6902      	ldr	r2, [r0, #16]
 800ad0c:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800ad0e:	6982      	ldr	r2, [r0, #24]
 800ad10:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800ad12:	6882      	ldr	r2, [r0, #8]
 800ad14:	609a      	str	r2, [r3, #8]
 800ad16:	4770      	bx	lr
 800ad18:	20000908 	.word	0x20000908

0800ad1c <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 800ad1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad20:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ad22:	8846      	ldrh	r6, [r0, #2]
 800ad24:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ad28:	4f59      	ldr	r7, [pc, #356]	; (800ae90 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ad2a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800ae98 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800ad2e:	2300      	movs	r3, #0
{
 800ad30:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800ad32:	a802      	add	r0, sp, #8
{
 800ad34:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 800ad36:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 800ad38:	f000 f900 	bl	800af3c <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f000 f951 	bl	800afe4 <list_get_size>
 800ad42:	2801      	cmp	r0, #1
 800ad44:	dd53      	ble.n	800adee <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ad46:	8863      	ldrh	r3, [r4, #2]
 800ad48:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ad4a:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ad4c:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ad4e:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ad52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad56:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ad60:	a805      	add	r0, sp, #20
 800ad62:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800ad64:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800ad68:	f006 fd13 	bl	8011792 <memcpy>
  if (hciContext.io.Send)
 800ad6c:	4b49      	ldr	r3, [pc, #292]	; (800ae94 <hci_send_req+0x178>)
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	b113      	cbz	r3, 800ad78 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800ad72:	1d39      	adds	r1, r7, #4
 800ad74:	a804      	add	r0, sp, #16
 800ad76:	4798      	blx	r3
  
  if (async)
 800ad78:	2d00      	cmp	r5, #0
 800ad7a:	d178      	bne.n	800ae6e <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ad7c:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800ad80:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ad84:	4e44      	ldr	r6, [pc, #272]	; (800ae98 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ad86:	4f42      	ldr	r7, [pc, #264]	; (800ae90 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ad88:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800ad8a:	f7fd fbb1 	bl	80084f0 <HAL_GetTick>
 800ad8e:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ad90:	f7fd fbae 	bl	80084f0 <HAL_GetTick>
 800ad94:	eba0 0008 	sub.w	r0, r0, r8
 800ad98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ad9c:	d84a      	bhi.n	800ae34 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f8cf 	bl	800af42 <list_is_empty>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1f3      	bne.n	800ad90 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ada8:	a901      	add	r1, sp, #4
 800adaa:	4630      	mov	r0, r6
 800adac:	f000 f8f6 	bl	800af9c <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800adb0:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800adb2:	7a0b      	ldrb	r3, [r1, #8]
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	d109      	bne.n	800adcc <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800adb8:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800adba:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800adbe:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800adc0:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 800adc4:	d02c      	beq.n	800ae20 <hci_send_req+0x104>
 800adc6:	d81b      	bhi.n	800ae00 <hci_send_req+0xe4>
 800adc8:	280e      	cmp	r0, #14
 800adca:	d052      	beq.n	800ae72 <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800adcc:	4638      	mov	r0, r7
 800adce:	f000 f8b8 	bl	800af42 <list_is_empty>
 800add2:	2800      	cmp	r0, #0
 800add4:	d058      	beq.n	800ae88 <hci_send_req+0x16c>
 800add6:	4630      	mov	r0, r6
 800add8:	f000 f8b3 	bl	800af42 <list_is_empty>
 800addc:	2800      	cmp	r0, #0
 800adde:	d053      	beq.n	800ae88 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ade0:	9901      	ldr	r1, [sp, #4]
 800ade2:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ade4:	f000 f8c3 	bl	800af6e <list_insert_tail>
      hciReadPacket=NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	e7cd      	b.n	800ad8a <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800adee:	a904      	add	r1, sp, #16
 800adf0:	4648      	mov	r0, r9
 800adf2:	f000 f8d3 	bl	800af9c <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800adf6:	9904      	ldr	r1, [sp, #16]
 800adf8:	4638      	mov	r0, r7
 800adfa:	f000 f8b8 	bl	800af6e <list_insert_tail>
 800adfe:	e79d      	b.n	800ad3c <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800ae00:	2810      	cmp	r0, #16
 800ae02:	d017      	beq.n	800ae34 <hci_send_req+0x118>
 800ae04:	283e      	cmp	r0, #62	; 0x3e
 800ae06:	d1e1      	bne.n	800adcc <hci_send_req+0xb0>
        if (me->subevent != r->event)
 800ae08:	7ac8      	ldrb	r0, [r1, #11]
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	4290      	cmp	r0, r2
 800ae0e:	d1dd      	bne.n	800adcc <hci_send_req+0xb0>
        len -= 1;
 800ae10:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 800ae12:	6963      	ldr	r3, [r4, #20]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	bf28      	it	cs
 800ae18:	461a      	movcs	r2, r3
 800ae1a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ae1c:	310c      	adds	r1, #12
 800ae1e:	e01c      	b.n	800ae5a <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 800ae20:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	d105      	bne.n	800ae34 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	2b0f      	cmp	r3, #15
 800ae2c:	d00f      	beq.n	800ae4e <hci_send_req+0x132>
          if (cs->status) {
 800ae2e:	7acb      	ldrb	r3, [r1, #11]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0cb      	beq.n	800adcc <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800ae34:	9901      	ldr	r1, [sp, #4]
 800ae36:	b111      	cbz	r1, 800ae3e <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ae38:	4815      	ldr	r0, [pc, #84]	; (800ae90 <hci_send_req+0x174>)
 800ae3a:	f000 f88c 	bl	800af56 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800ae3e:	a802      	add	r0, sp, #8
 800ae40:	f7ff ff20 	bl	800ac84 <move_list.constprop.0>
  return -1;
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 800ae48:	b025      	add	sp, #148	; 0x94
 800ae4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	bf28      	it	cs
 800ae54:	461a      	movcs	r2, r3
 800ae56:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ae58:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ae5a:	6920      	ldr	r0, [r4, #16]
 800ae5c:	f006 fc99 	bl	8011792 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800ae60:	480b      	ldr	r0, [pc, #44]	; (800ae90 <hci_send_req+0x174>)
 800ae62:	9901      	ldr	r1, [sp, #4]
 800ae64:	f000 f877 	bl	800af56 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800ae68:	a802      	add	r0, sp, #8
 800ae6a:	f7ff ff0b 	bl	800ac84 <move_list.constprop.0>
    return 0;
 800ae6e:	2000      	movs	r0, #0
 800ae70:	e7ea      	b.n	800ae48 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 800ae72:	898a      	ldrh	r2, [r1, #12]
 800ae74:	42aa      	cmp	r2, r5
 800ae76:	d1dd      	bne.n	800ae34 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 800ae78:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 800ae7a:	6963      	ldr	r3, [r4, #20]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	bf28      	it	cs
 800ae80:	461a      	movcs	r2, r3
 800ae82:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ae84:	310e      	adds	r1, #14
 800ae86:	e7e8      	b.n	800ae5a <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ae88:	9901      	ldr	r1, [sp, #4]
 800ae8a:	a802      	add	r0, sp, #8
 800ae8c:	e7aa      	b.n	800ade4 <hci_send_req+0xc8>
 800ae8e:	bf00      	nop
 800ae90:	20001e74 	.word	0x20001e74
 800ae94:	20000908 	.word	0x20000908
 800ae98:	20001e7c 	.word	0x20001e7c

0800ae9c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ae9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800ae9e:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800aea0:	4c0b      	ldr	r4, [pc, #44]	; (800aed0 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); // TU jest
    if (hciContext.UserEvtRx != NULL)
 800aea2:	4d0c      	ldr	r5, [pc, #48]	; (800aed4 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff); //TU sa  zaladowane wyslane dane!!
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aea4:	4e0c      	ldr	r6, [pc, #48]	; (800aed8 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800aea6:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 f84a 	bl	800af42 <list_is_empty>
 800aeae:	b108      	cbz	r0, 800aeb4 <hci_user_evt_proc+0x18>
  }
}
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); // TU jest
 800aeb4:	a901      	add	r1, sp, #4
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 f870 	bl	800af9c <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800aebc:	69eb      	ldr	r3, [r5, #28]
 800aebe:	b113      	cbz	r3, 800aec6 <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff); //TU sa  zaladowane wyslane dane!!
 800aec0:	9801      	ldr	r0, [sp, #4]
 800aec2:	3008      	adds	r0, #8
 800aec4:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aec6:	9901      	ldr	r1, [sp, #4]
 800aec8:	4630      	mov	r0, r6
 800aeca:	f000 f850 	bl	800af6e <list_insert_tail>
 800aece:	e7eb      	b.n	800aea8 <hci_user_evt_proc+0xc>
 800aed0:	20001e7c 	.word	0x20001e7c
 800aed4:	20000908 	.word	0x20000908
 800aed8:	20001e74 	.word	0x20001e74

0800aedc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800aedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800aede:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800aee0:	4813      	ldr	r0, [pc, #76]	; (800af30 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 800aee2:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800aee4:	f000 f82d 	bl	800af42 <list_is_empty>
 800aee8:	b9d8      	cbnz	r0, 800af22 <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800aeea:	a901      	add	r1, sp, #4
 800aeec:	4810      	ldr	r0, [pc, #64]	; (800af30 <hci_notify_asynch_evt+0x54>)
 800aeee:	f000 f855 	bl	800af9c <list_remove_head>
    
    if (hciContext.io.Receive)
 800aef2:	4b10      	ldr	r3, [pc, #64]	; (800af34 <hci_notify_asynch_evt+0x58>)
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	b193      	cbz	r3, 800af1e <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800aef8:	9801      	ldr	r0, [sp, #4]
 800aefa:	2180      	movs	r1, #128	; 0x80
 800aefc:	3008      	adds	r0, #8
 800aefe:	4798      	blx	r3
 800af00:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 800af02:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 800af04:	b185      	cbz	r5, 800af28 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800af06:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 800af08:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d10b      	bne.n	800af28 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800af10:	7a8b      	ldrb	r3, [r1, #10]
 800af12:	1ee8      	subs	r0, r5, #3
 800af14:	4283      	cmp	r3, r0
 800af16:	d107      	bne.n	800af28 <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800af18:	4807      	ldr	r0, [pc, #28]	; (800af38 <hci_notify_asynch_evt+0x5c>)
 800af1a:	f000 f828 	bl	800af6e <list_insert_tail>
  int32_t ret = 0;
 800af1e:	2000      	movs	r0, #0
 800af20:	e000      	b.n	800af24 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 800af22:	2001      	movs	r0, #1
  }
  return ret;

}
 800af24:	b003      	add	sp, #12
 800af26:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <hci_notify_asynch_evt+0x54>)
 800af2a:	f000 f814 	bl	800af56 <list_insert_head>
 800af2e:	e7f6      	b.n	800af1e <hci_notify_asynch_evt+0x42>
 800af30:	20001e74 	.word	0x20001e74
 800af34:	20000908 	.word	0x20000908
 800af38:	20001e7c 	.word	0x20001e7c

0800af3c <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800af3c:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800af3e:	6040      	str	r0, [r0, #4]
 800af40:	4770      	bx	lr

0800af42 <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af42:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af46:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800af48:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 800af4a:	1a1b      	subs	r3, r3, r0
 800af4c:	4258      	negs	r0, r3
 800af4e:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af50:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800af54:	4770      	bx	lr

0800af56 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af56:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af5a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800af5c:	6802      	ldr	r2, [r0, #0]
 800af5e:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800af60:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800af62:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800af64:	680a      	ldr	r2, [r1, #0]
 800af66:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af68:	f383 8810 	msr	PRIMASK, r3
 800af6c:	4770      	bx	lr

0800af6e <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af6e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af72:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 800af74:	6842      	ldr	r2, [r0, #4]
 800af76:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 800af78:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 800af7a:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800af7c:	684a      	ldr	r2, [r1, #4]
 800af7e:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af80:	f383 8810 	msr	PRIMASK, r3
 800af84:	4770      	bx	lr

0800af86 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af86:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800af8a:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800af8c:	e890 000a 	ldmia.w	r0, {r1, r3}
 800af90:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 800af92:	6801      	ldr	r1, [r0, #0]
 800af94:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af96:	f382 8810 	msr	PRIMASK, r2
 800af9a:	4770      	bx	lr

0800af9c <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afa4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800afa6:	6803      	ldr	r3, [r0, #0]
 800afa8:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 800afaa:	6800      	ldr	r0, [r0, #0]
 800afac:	f7ff ffeb 	bl	800af86 <list_remove_node>
  (*node)->next = NULL;
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afba:	f385 8810 	msr	PRIMASK, r5
 800afbe:	bd38      	pop	{r3, r4, r5, pc}

0800afc0 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afc8:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800afca:	6843      	ldr	r3, [r0, #4]
 800afcc:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 800afce:	6840      	ldr	r0, [r0, #4]
 800afd0:	f7ff ffd9 	bl	800af86 <list_remove_node>
  (*node)->next = NULL;
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afde:	f385 8810 	msr	PRIMASK, r5
 800afe2:	bd38      	pop	{r3, r4, r5, pc}

0800afe4 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afe4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afe8:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800afea:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 800afec:	2300      	movs	r3, #0
  while (temp != listHead)
 800afee:	4282      	cmp	r2, r0
 800aff0:	d103      	bne.n	800affa <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aff2:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	4770      	bx	lr
    size++;
 800affa:	3301      	adds	r3, #1
    temp = temp->next;		
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	e7f6      	b.n	800afee <list_get_size+0xa>

0800b000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b000:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800b002:	f000 fe9d 	bl	800bd40 <vTaskStartScheduler>
  
  return osOK;
}
 800b006:	2000      	movs	r0, #0
 800b008:	bd08      	pop	{r3, pc}

0800b00a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b00a:	b570      	push	{r4, r5, r6, lr}
 800b00c:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b00e:	6946      	ldr	r6, [r0, #20]
 800b010:	692a      	ldr	r2, [r5, #16]
 800b012:	6840      	ldr	r0, [r0, #4]
 800b014:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 800b018:	460b      	mov	r3, r1
 800b01a:	b086      	sub	sp, #24
 800b01c:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b01e:	b176      	cbz	r6, 800b03e <osThreadCreate+0x34>
 800b020:	69ad      	ldr	r5, [r5, #24]
 800b022:	b165      	cbz	r5, 800b03e <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800b024:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800b026:	bf14      	ite	ne
 800b028:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b02a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b02c:	9502      	str	r5, [sp, #8]
 800b02e:	e88d 0050 	stmia.w	sp, {r4, r6}
 800b032:	f000 fe26 	bl	800bc82 <xTaskCreateStatic>
 800b036:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b038:	9805      	ldr	r0, [sp, #20]
}
 800b03a:	b006      	add	sp, #24
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800b03e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800b040:	bf14      	ite	ne
 800b042:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b044:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b046:	ad05      	add	r5, sp, #20
 800b048:	b292      	uxth	r2, r2
 800b04a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800b04e:	f000 fe49 	bl	800bce4 <xTaskCreate>
 800b052:	2801      	cmp	r0, #1
 800b054:	d0f0      	beq.n	800b038 <osThreadCreate+0x2e>
      return NULL;
 800b056:	2000      	movs	r0, #0
 800b058:	e7ef      	b.n	800b03a <osThreadCreate+0x30>

0800b05a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b05a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b05c:	2800      	cmp	r0, #0
 800b05e:	bf08      	it	eq
 800b060:	2001      	moveq	r0, #1
 800b062:	f000 ffb5 	bl	800bfd0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b066:	2000      	movs	r0, #0
 800b068:	bd08      	pop	{r3, pc}
	...

0800b06c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b06c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b06e:	4b0f      	ldr	r3, [pc, #60]	; (800b0ac <prvInsertBlockIntoFreeList+0x40>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4282      	cmp	r2, r0
 800b074:	d318      	bcc.n	800b0a8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b076:	685c      	ldr	r4, [r3, #4]
 800b078:	1919      	adds	r1, r3, r4
 800b07a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b07c:	bf01      	itttt	eq
 800b07e:	6841      	ldreq	r1, [r0, #4]
 800b080:	4618      	moveq	r0, r3
 800b082:	1909      	addeq	r1, r1, r4
 800b084:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b086:	6844      	ldr	r4, [r0, #4]
 800b088:	1901      	adds	r1, r0, r4
 800b08a:	428a      	cmp	r2, r1
 800b08c:	d107      	bne.n	800b09e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b08e:	4908      	ldr	r1, [pc, #32]	; (800b0b0 <prvInsertBlockIntoFreeList+0x44>)
 800b090:	6809      	ldr	r1, [r1, #0]
 800b092:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b094:	bf1f      	itttt	ne
 800b096:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b098:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b09a:	1909      	addne	r1, r1, r4
 800b09c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b09e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0a2:	bf18      	it	ne
 800b0a4:	6018      	strne	r0, [r3, #0]
 800b0a6:	bd10      	pop	{r4, pc}
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	e7e1      	b.n	800b070 <prvInsertBlockIntoFreeList+0x4>
 800b0ac:	200017ac 	.word	0x200017ac
 800b0b0:	20000be4 	.word	0x20000be4

0800b0b4 <pvPortMalloc>:
{
 800b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b0ba:	f000 fe77 	bl	800bdac <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b0be:	493e      	ldr	r1, [pc, #248]	; (800b1b8 <pvPortMalloc+0x104>)
 800b0c0:	4d3e      	ldr	r5, [pc, #248]	; (800b1bc <pvPortMalloc+0x108>)
 800b0c2:	680b      	ldr	r3, [r1, #0]
 800b0c4:	bb0b      	cbnz	r3, 800b10a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800b0c6:	4a3e      	ldr	r2, [pc, #248]	; (800b1c0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0c8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0ca:	bf1f      	itttt	ne
 800b0cc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0ce:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0d2:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 800b0d6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0d8:	bf14      	ite	ne
 800b0da:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0dc:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0e0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b0e2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0e4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0e8:	4e36      	ldr	r6, [pc, #216]	; (800b1c4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800b0ea:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0f0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800b0f2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0f4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0f6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0f8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0fa:	4b33      	ldr	r3, [pc, #204]	; (800b1c8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0fc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0fe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b100:	4b32      	ldr	r3, [pc, #200]	; (800b1cc <pvPortMalloc+0x118>)
 800b102:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b108:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b10a:	682f      	ldr	r7, [r5, #0]
 800b10c:	4227      	tst	r7, r4
 800b10e:	d116      	bne.n	800b13e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800b110:	2c00      	cmp	r4, #0
 800b112:	d041      	beq.n	800b198 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800b114:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b118:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b11a:	bf1c      	itt	ne
 800b11c:	f023 0307 	bicne.w	r3, r3, #7
 800b120:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b122:	b163      	cbz	r3, 800b13e <pvPortMalloc+0x8a>
 800b124:	4a29      	ldr	r2, [pc, #164]	; (800b1cc <pvPortMalloc+0x118>)
 800b126:	6816      	ldr	r6, [r2, #0]
 800b128:	42b3      	cmp	r3, r6
 800b12a:	4690      	mov	r8, r2
 800b12c:	d807      	bhi.n	800b13e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800b12e:	4a25      	ldr	r2, [pc, #148]	; (800b1c4 <pvPortMalloc+0x110>)
 800b130:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b132:	6868      	ldr	r0, [r5, #4]
 800b134:	4283      	cmp	r3, r0
 800b136:	d804      	bhi.n	800b142 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800b138:	6809      	ldr	r1, [r1, #0]
 800b13a:	428d      	cmp	r5, r1
 800b13c:	d107      	bne.n	800b14e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800b13e:	2400      	movs	r4, #0
 800b140:	e02a      	b.n	800b198 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b142:	682c      	ldr	r4, [r5, #0]
 800b144:	2c00      	cmp	r4, #0
 800b146:	d0f7      	beq.n	800b138 <pvPortMalloc+0x84>
 800b148:	462a      	mov	r2, r5
 800b14a:	4625      	mov	r5, r4
 800b14c:	e7f1      	b.n	800b132 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b14e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b150:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b152:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b154:	1ac2      	subs	r2, r0, r3
 800b156:	2a10      	cmp	r2, #16
 800b158:	d90f      	bls.n	800b17a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b15a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b15c:	0741      	lsls	r1, r0, #29
 800b15e:	d008      	beq.n	800b172 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	e7fe      	b.n	800b170 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b172:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b174:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b176:	f7ff ff79 	bl	800b06c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b17a:	4913      	ldr	r1, [pc, #76]	; (800b1c8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b17c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b17e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b180:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b182:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b184:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b186:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b18a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b18e:	bf38      	it	cc
 800b190:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b192:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b194:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b196:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b198:	f000 fea2 	bl	800bee0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b19c:	0763      	lsls	r3, r4, #29
 800b19e:	d008      	beq.n	800b1b2 <pvPortMalloc+0xfe>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	e7fe      	b.n	800b1b0 <pvPortMalloc+0xfc>
}
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b8:	20000be4 	.word	0x20000be4
 800b1bc:	200017a0 	.word	0x200017a0
 800b1c0:	20000be8 	.word	0x20000be8
 800b1c4:	200017ac 	.word	0x200017ac
 800b1c8:	200017a8 	.word	0x200017a8
 800b1cc:	200017a4 	.word	0x200017a4

0800b1d0 <vPortFree>:
{
 800b1d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	b370      	cbz	r0, 800b234 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1d6:	4a18      	ldr	r2, [pc, #96]	; (800b238 <vPortFree+0x68>)
 800b1d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	4213      	tst	r3, r2
 800b1e0:	d108      	bne.n	800b1f4 <vPortFree+0x24>
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	e7fe      	b.n	800b1f2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1f4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b1f8:	b141      	cbz	r1, 800b20c <vPortFree+0x3c>
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	e7fe      	b.n	800b20a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b20c:	ea23 0302 	bic.w	r3, r3, r2
 800b210:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b214:	f000 fdca 	bl	800bdac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <vPortFree+0x6c>)
 800b21a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b21e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b220:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b224:	440b      	add	r3, r1
 800b226:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b228:	f7ff ff20 	bl	800b06c <prvInsertBlockIntoFreeList>
}
 800b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800b230:	f000 be56 	b.w	800bee0 <xTaskResumeAll>
 800b234:	bd10      	pop	{r4, pc}
 800b236:	bf00      	nop
 800b238:	200017a0 	.word	0x200017a0
 800b23c:	200017a4 	.word	0x200017a4

0800b240 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b240:	f100 0308 	add.w	r3, r0, #8
 800b244:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b246:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b24a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b24c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b24e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b250:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b252:	6003      	str	r3, [r0, #0]
 800b254:	4770      	bx	lr

0800b256 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	6103      	str	r3, [r0, #16]
 800b25a:	4770      	bx	lr

0800b25c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b25c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b25e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b268:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b26a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b26c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b26e:	3301      	adds	r3, #1
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	4770      	bx	lr

0800b274 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b274:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b276:	1c53      	adds	r3, r2, #1
{
 800b278:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800b27a:	d10a      	bne.n	800b292 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b27c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b282:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b284:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b286:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b288:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b28a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b28c:	3301      	adds	r3, #1
 800b28e:	6003      	str	r3, [r0, #0]
 800b290:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b292:	f100 0308 	add.w	r3, r0, #8
 800b296:	685c      	ldr	r4, [r3, #4]
 800b298:	6825      	ldr	r5, [r4, #0]
 800b29a:	42aa      	cmp	r2, r5
 800b29c:	d3ef      	bcc.n	800b27e <vListInsert+0xa>
 800b29e:	4623      	mov	r3, r4
 800b2a0:	e7f9      	b.n	800b296 <vListInsert+0x22>

0800b2a2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2a2:	6841      	ldr	r1, [r0, #4]
 800b2a4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2a6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2a8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2aa:	6882      	ldr	r2, [r0, #8]
 800b2ac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2ae:	6859      	ldr	r1, [r3, #4]
 800b2b0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2b2:	bf08      	it	eq
 800b2b4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2c0:	6818      	ldr	r0, [r3, #0]
}
 800b2c2:	4770      	bx	lr

0800b2c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2ca:	4b0d      	ldr	r3, [pc, #52]	; (800b300 <prvTaskExitError+0x3c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	d008      	beq.n	800b2e4 <prvTaskExitError+0x20>
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	e7fe      	b.n	800b2e2 <prvTaskExitError+0x1e>
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0fc      	beq.n	800b2f4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2fa:	b002      	add	sp, #8
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	20000028 	.word	0x20000028

0800b304 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b304:	4808      	ldr	r0, [pc, #32]	; (800b328 <prvPortStartFirstTask+0x24>)
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	6800      	ldr	r0, [r0, #0]
 800b30a:	f380 8808 	msr	MSP, r0
 800b30e:	f04f 0000 	mov.w	r0, #0
 800b312:	f380 8814 	msr	CONTROL, r0
 800b316:	b662      	cpsie	i
 800b318:	b661      	cpsie	f
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	df00      	svc	0
 800b324:	bf00      	nop
 800b326:	0000      	.short	0x0000
 800b328:	e000ed08 	.word	0xe000ed08

0800b32c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b32c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b33c <vPortEnableVFP+0x10>
 800b330:	6801      	ldr	r1, [r0, #0]
 800b332:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b336:	6001      	str	r1, [r0, #0]
 800b338:	4770      	bx	lr
 800b33a:	0000      	.short	0x0000
 800b33c:	e000ed88 	.word	0xe000ed88

0800b340 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b344:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <pxPortInitialiseStack+0x28>)
 800b34a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b34e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b352:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b356:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b35a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b35e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b362:	3844      	subs	r0, #68	; 0x44
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	0800b2c5 	.word	0x0800b2c5
 800b36c:	00000000 	.word	0x00000000

0800b370 <SVC_Handler>:
	__asm volatile (
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <pxCurrentTCBConst2>)
 800b372:	6819      	ldr	r1, [r3, #0]
 800b374:	6808      	ldr	r0, [r1, #0]
 800b376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37a:	f380 8809 	msr	PSP, r0
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f04f 0000 	mov.w	r0, #0
 800b386:	f380 8811 	msr	BASEPRI, r0
 800b38a:	4770      	bx	lr
 800b38c:	f3af 8000 	nop.w

0800b390 <pxCurrentTCBConst2>:
 800b390:	200017bc 	.word	0x200017bc

0800b394 <vPortEnterCritical>:
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b3a4:	4a0a      	ldr	r2, [pc, #40]	; (800b3d0 <vPortEnterCritical+0x3c>)
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b3aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b3ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b3ae:	d10d      	bne.n	800b3cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3b0:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <vPortEnterCritical+0x40>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3b8:	d008      	beq.n	800b3cc <vPortEnterCritical+0x38>
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	e7fe      	b.n	800b3ca <vPortEnterCritical+0x36>
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20000028 	.word	0x20000028
 800b3d4:	e000ed04 	.word	0xe000ed04

0800b3d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b3d8:	4a08      	ldr	r2, [pc, #32]	; (800b3fc <vPortExitCritical+0x24>)
 800b3da:	6813      	ldr	r3, [r2, #0]
 800b3dc:	b943      	cbnz	r3, 800b3f0 <vPortExitCritical+0x18>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	e7fe      	b.n	800b3ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3f4:	b90b      	cbnz	r3, 800b3fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	4770      	bx	lr
 800b3fc:	20000028 	.word	0x20000028

0800b400 <PendSV_Handler>:
	__asm volatile
 800b400:	f3ef 8009 	mrs	r0, PSP
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	4b15      	ldr	r3, [pc, #84]	; (800b460 <pxCurrentTCBConst>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	f01e 0f10 	tst.w	lr, #16
 800b410:	bf08      	it	eq
 800b412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	6010      	str	r0, [r2, #0]
 800b41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b424:	f380 8811 	msr	BASEPRI, r0
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f000 fdf2 	bl	800c018 <vTaskSwitchContext>
 800b434:	f04f 0000 	mov.w	r0, #0
 800b438:	f380 8811 	msr	BASEPRI, r0
 800b43c:	bc09      	pop	{r0, r3}
 800b43e:	6819      	ldr	r1, [r3, #0]
 800b440:	6808      	ldr	r0, [r1, #0]
 800b442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b446:	f01e 0f10 	tst.w	lr, #16
 800b44a:	bf08      	it	eq
 800b44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b450:	f380 8809 	msr	PSP, r0
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	f3af 8000 	nop.w

0800b460 <pxCurrentTCBConst>:
 800b460:	200017bc 	.word	0x200017bc

0800b464 <SysTick_Handler>:
{
 800b464:	b508      	push	{r3, lr}
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b476:	f000 fca1 	bl	800bdbc <xTaskIncrementTick>
 800b47a:	b118      	cbz	r0, 800b484 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b47c:	4b03      	ldr	r3, [pc, #12]	; (800b48c <SysTick_Handler+0x28>)
 800b47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b482:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b484:	2300      	movs	r3, #0
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	bd08      	pop	{r3, pc}
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4a08      	ldr	r2, [pc, #32]	; (800b4b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b492:	4909      	ldr	r1, [pc, #36]	; (800b4b8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b494:	2300      	movs	r3, #0
 800b496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b498:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49a:	4b08      	ldr	r3, [pc, #32]	; (800b4bc <vPortSetupTimerInterrupt+0x2c>)
 800b49c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a6:	4906      	ldr	r1, [pc, #24]	; (800b4c0 <vPortSetupTimerInterrupt+0x30>)
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ac:	2307      	movs	r3, #7
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	e000e010 	.word	0xe000e010
 800b4b8:	e000e018 	.word	0xe000e018
 800b4bc:	2000003c 	.word	0x2000003c
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4c4:	4b39      	ldr	r3, [pc, #228]	; (800b5ac <xPortStartScheduler+0xe8>)
 800b4c6:	4a3a      	ldr	r2, [pc, #232]	; (800b5b0 <xPortStartScheduler+0xec>)
{
 800b4c8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	4291      	cmp	r1, r2
 800b4ce:	d108      	bne.n	800b4e2 <xPortStartScheduler+0x1e>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	e7fe      	b.n	800b4e0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	4b33      	ldr	r3, [pc, #204]	; (800b5b4 <xPortStartScheduler+0xf0>)
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d108      	bne.n	800b4fc <xPortStartScheduler+0x38>
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	e7fe      	b.n	800b4fa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4fc:	4b2e      	ldr	r3, [pc, #184]	; (800b5b8 <xPortStartScheduler+0xf4>)
 800b4fe:	781a      	ldrb	r2, [r3, #0]
 800b500:	b2d2      	uxtb	r2, r2
 800b502:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b504:	22ff      	movs	r2, #255	; 0xff
 800b506:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b508:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b50a:	4a2c      	ldr	r2, [pc, #176]	; (800b5bc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b512:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b51a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b51c:	4b28      	ldr	r3, [pc, #160]	; (800b5c0 <xPortStartScheduler+0xfc>)
 800b51e:	2207      	movs	r2, #7
 800b520:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b522:	2100      	movs	r1, #0
 800b524:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b528:	0600      	lsls	r0, r0, #24
 800b52a:	f102 34ff 	add.w	r4, r2, #4294967295
 800b52e:	d40d      	bmi.n	800b54c <xPortStartScheduler+0x88>
 800b530:	b101      	cbz	r1, 800b534 <xPortStartScheduler+0x70>
 800b532:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	2a03      	cmp	r2, #3
 800b538:	d011      	beq.n	800b55e <xPortStartScheduler+0x9a>
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	e7fe      	b.n	800b54a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b54c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b550:	0052      	lsls	r2, r2, #1
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	f88d 2003 	strb.w	r2, [sp, #3]
 800b558:	2101      	movs	r1, #1
 800b55a:	4622      	mov	r2, r4
 800b55c:	e7e2      	b.n	800b524 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b55e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b560:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b564:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	4a13      	ldr	r2, [pc, #76]	; (800b5b8 <xPortStartScheduler+0xf4>)
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b56e:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <xPortStartScheduler+0x100>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b576:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b57e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b580:	f7ff ff86 	bl	800b490 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b584:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <xPortStartScheduler+0x104>)
 800b586:	2400      	movs	r4, #0
 800b588:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800b58a:	f7ff fecf 	bl	800b32c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b58e:	4a0f      	ldr	r2, [pc, #60]	; (800b5cc <xPortStartScheduler+0x108>)
 800b590:	6813      	ldr	r3, [r2, #0]
 800b592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b596:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b598:	f7ff feb4 	bl	800b304 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b59c:	f000 fd3c 	bl	800c018 <vTaskSwitchContext>
	prvTaskExitError();
 800b5a0:	f7ff fe90 	bl	800b2c4 <prvTaskExitError>
}
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	b002      	add	sp, #8
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed00 	.word	0xe000ed00
 800b5b0:	410fc271 	.word	0x410fc271
 800b5b4:	410fc270 	.word	0x410fc270
 800b5b8:	e000e400 	.word	0xe000e400
 800b5bc:	200017b4 	.word	0x200017b4
 800b5c0:	200017b8 	.word	0x200017b8
 800b5c4:	e000ed20 	.word	0xe000ed20
 800b5c8:	20000028 	.word	0x20000028
 800b5cc:	e000ef34 	.word	0xe000ef34

0800b5d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5d4:	2b0f      	cmp	r3, #15
 800b5d6:	d90e      	bls.n	800b5f6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5d8:	4a10      	ldr	r2, [pc, #64]	; (800b61c <vPortValidateInterruptPriority+0x4c>)
 800b5da:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5dc:	4a10      	ldr	r2, [pc, #64]	; (800b620 <vPortValidateInterruptPriority+0x50>)
 800b5de:	7812      	ldrb	r2, [r2, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d908      	bls.n	800b5f6 <vPortValidateInterruptPriority+0x26>
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	e7fe      	b.n	800b5f4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <vPortValidateInterruptPriority+0x54>)
 800b5f8:	4a0b      	ldr	r2, [pc, #44]	; (800b628 <vPortValidateInterruptPriority+0x58>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6812      	ldr	r2, [r2, #0]
 800b5fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b602:	4293      	cmp	r3, r2
 800b604:	d908      	bls.n	800b618 <vPortValidateInterruptPriority+0x48>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	e7fe      	b.n	800b616 <vPortValidateInterruptPriority+0x46>
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	e000e3f0 	.word	0xe000e3f0
 800b620:	200017b4 	.word	0x200017b4
 800b624:	e000ed0c 	.word	0xe000ed0c
 800b628:	200017b8 	.word	0x200017b8

0800b62c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b62c:	b510      	push	{r4, lr}
 800b62e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b630:	f7ff feb0 	bl	800b394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b634:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f7ff fecf 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
}
 800b63a:	fab4 f084 	clz	r0, r4
 800b63e:	0940      	lsrs	r0, r0, #5
 800b640:	bd10      	pop	{r4, pc}

0800b642 <prvUnlockQueue>:
{
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b646:	f7ff fea5 	bl	800b394 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b64a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b64e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b652:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b654:	2d00      	cmp	r5, #0
 800b656:	dc14      	bgt.n	800b682 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b658:	23ff      	movs	r3, #255	; 0xff
 800b65a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b65e:	f7ff febb 	bl	800b3d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b662:	f7ff fe97 	bl	800b394 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b666:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b66a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800b66e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b670:	2d00      	cmp	r5, #0
 800b672:	dc12      	bgt.n	800b69a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b674:	23ff      	movs	r3, #255	; 0xff
 800b676:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b67e:	f7ff beab 	b.w	800b3d8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0e7      	beq.n	800b658 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b688:	4630      	mov	r0, r6
 800b68a:	f000 fd19 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b68e:	b108      	cbz	r0, 800b694 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b690:	f000 fda0 	bl	800c1d4 <vTaskMissedYield>
 800b694:	3d01      	subs	r5, #1
 800b696:	b26d      	sxtb	r5, r5
 800b698:	e7dc      	b.n	800b654 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0e9      	beq.n	800b674 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f000 fd0d 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b6a6:	b108      	cbz	r0, 800b6ac <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b6a8:	f000 fd94 	bl	800c1d4 <vTaskMissedYield>
 800b6ac:	3d01      	subs	r5, #1
 800b6ae:	b26d      	sxtb	r5, r5
 800b6b0:	e7de      	b.n	800b670 <prvUnlockQueue+0x2e>
	...

0800b6b4 <xQueueGenericReset>:
{
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	b940      	cbnz	r0, 800b6ce <xQueueGenericReset+0x1a>
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	e7fe      	b.n	800b6cc <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800b6ce:	f7ff fe61 	bl	800b394 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b6d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6d6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6d8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6da:	4343      	muls	r3, r0
 800b6dc:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6de:	1a1b      	subs	r3, r3, r0
 800b6e0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6e2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6e4:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6e6:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800b6e8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6ea:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b6ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b6f4:	b995      	cbnz	r5, 800b71c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	b163      	cbz	r3, 800b714 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6fa:	f104 0010 	add.w	r0, r4, #16
 800b6fe:	f000 fcdf 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b702:	b138      	cbz	r0, 800b714 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800b704:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <xQueueGenericReset+0x7c>)
 800b706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800b714:	f7ff fe60 	bl	800b3d8 <vPortExitCritical>
}
 800b718:	2001      	movs	r0, #1
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b71c:	f104 0010 	add.w	r0, r4, #16
 800b720:	f7ff fd8e 	bl	800b240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b724:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b728:	f7ff fd8a 	bl	800b240 <vListInitialise>
 800b72c:	e7f2      	b.n	800b714 <xQueueGenericReset+0x60>
 800b72e:	bf00      	nop
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <xQueueGenericCreate>:
	{
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b738:	4606      	mov	r6, r0
 800b73a:	b940      	cbnz	r0, 800b74e <xQueueGenericCreate+0x1a>
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b74e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b750:	3048      	adds	r0, #72	; 0x48
 800b752:	f7ff fcaf 	bl	800b0b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b756:	4604      	mov	r4, r0
 800b758:	b150      	cbz	r0, 800b770 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b75a:	2300      	movs	r3, #0
 800b75c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b760:	b945      	cbnz	r5, 800b774 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b762:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b764:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b766:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b768:	2101      	movs	r1, #1
 800b76a:	4620      	mov	r0, r4
 800b76c:	f7ff ffa2 	bl	800b6b4 <xQueueGenericReset>
	}
 800b770:	4620      	mov	r0, r4
 800b772:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b774:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b778:	6003      	str	r3, [r0, #0]
 800b77a:	e7f3      	b.n	800b764 <xQueueGenericCreate+0x30>

0800b77c <xQueueGiveFromISR>:
{
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b780:	4604      	mov	r4, r0
 800b782:	b940      	cbnz	r0, 800b796 <xQueueGiveFromISR+0x1a>
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	e7fe      	b.n	800b794 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b796:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b798:	b143      	cbz	r3, 800b7ac <xQueueGiveFromISR+0x30>
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	e7fe      	b.n	800b7aa <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b7ac:	6803      	ldr	r3, [r0, #0]
 800b7ae:	b90b      	cbnz	r3, 800b7b4 <xQueueGiveFromISR+0x38>
 800b7b0:	6883      	ldr	r3, [r0, #8]
 800b7b2:	bb73      	cbnz	r3, 800b812 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7b4:	f7ff ff0c 	bl	800b5d0 <vPortValidateInterruptPriority>
	__asm volatile
 800b7b8:	f3ef 8611 	mrs	r6, BASEPRI
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b7ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d301      	bcc.n	800b7d8 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e014      	b.n	800b802 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7dc:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7de:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7e0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	d110      	bne.n	800b808 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e8:	b90b      	cbnz	r3, 800b7ee <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	e009      	b.n	800b802 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b7f2:	f000 fc65 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d0f7      	beq.n	800b7ea <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 800b7fa:	2d00      	cmp	r5, #0
 800b7fc:	d0f5      	beq.n	800b7ea <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7fe:	2001      	movs	r0, #1
 800b800:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b802:	f386 8811 	msr	BASEPRI, r6
}
 800b806:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b808:	3301      	adds	r3, #1
 800b80a:	b25b      	sxtb	r3, r3
 800b80c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b810:	e7eb      	b.n	800b7ea <xQueueGiveFromISR+0x6e>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	e7fe      	b.n	800b822 <xQueueGiveFromISR+0xa6>

0800b824 <xQueueSemaphoreTake>:
{
 800b824:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800b828:	4604      	mov	r4, r0
{
 800b82a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b82c:	b940      	cbnz	r0, 800b840 <xQueueSemaphoreTake+0x1c>
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	e7fe      	b.n	800b83e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b840:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b842:	b145      	cbz	r5, 800b856 <xQueueSemaphoreTake+0x32>
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	e7fe      	b.n	800b854 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b856:	f000 fcc3 	bl	800c1e0 <xTaskGetSchedulerState>
 800b85a:	b918      	cbnz	r0, 800b864 <xQueueSemaphoreTake+0x40>
 800b85c:	9d01      	ldr	r5, [sp, #4]
 800b85e:	2d00      	cmp	r5, #0
 800b860:	f040 8095 	bne.w	800b98e <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 800b864:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800b9a0 <xQueueSemaphoreTake+0x17c>
 800b868:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b86a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800b86c:	f7ff fd92 	bl	800b394 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b872:	b1e3      	cbz	r3, 800b8ae <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b874:	3b01      	subs	r3, #1
 800b876:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	b913      	cbnz	r3, 800b882 <xQueueSemaphoreTake+0x5e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b87c:	f000 fd6e 	bl	800c35c <pvTaskIncrementMutexHeldCount>
 800b880:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	b163      	cbz	r3, 800b8a0 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b886:	f104 0010 	add.w	r0, r4, #16
 800b88a:	f000 fc19 	bl	800c0c0 <xTaskRemoveFromEventList>
 800b88e:	b138      	cbz	r0, 800b8a0 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800b890:	4b43      	ldr	r3, [pc, #268]	; (800b9a0 <xQueueSemaphoreTake+0x17c>)
 800b892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b8a0:	f7ff fd9a 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 800b8a4:	2501      	movs	r5, #1
}
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	b004      	add	sp, #16
 800b8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8ae:	9b01      	ldr	r3, [sp, #4]
 800b8b0:	b963      	cbnz	r3, 800b8cc <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b8b2:	b145      	cbz	r5, 800b8c6 <xQueueSemaphoreTake+0xa2>
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	e7fe      	b.n	800b8c4 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 800b8c6:	f7ff fd87 	bl	800b3d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b8ca:	e7ec      	b.n	800b8a6 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 800b8cc:	b916      	cbnz	r6, 800b8d4 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8ce:	a802      	add	r0, sp, #8
 800b8d0:	f000 fc38 	bl	800c144 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b8d4:	f7ff fd80 	bl	800b3d8 <vPortExitCritical>
		vTaskSuspendAll();
 800b8d8:	f000 fa68 	bl	800bdac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8dc:	f7ff fd5a 	bl	800b394 <vPortEnterCritical>
 800b8e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8e4:	2bff      	cmp	r3, #255	; 0xff
 800b8e6:	bf08      	it	eq
 800b8e8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800b8ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b8f0:	2bff      	cmp	r3, #255	; 0xff
 800b8f2:	bf08      	it	eq
 800b8f4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800b8f8:	f7ff fd6e 	bl	800b3d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8fc:	a901      	add	r1, sp, #4
 800b8fe:	a802      	add	r0, sp, #8
 800b900:	f000 fc2c 	bl	800c15c <xTaskCheckForTimeOut>
 800b904:	bb40      	cbnz	r0, 800b958 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b906:	4620      	mov	r0, r4
 800b908:	f7ff fe90 	bl	800b62c <prvIsQueueEmpty>
 800b90c:	b1f0      	cbz	r0, 800b94c <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	b93b      	cbnz	r3, 800b922 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 800b912:	f7ff fd3f 	bl	800b394 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b916:	68a0      	ldr	r0, [r4, #8]
 800b918:	f000 fc72 	bl	800c200 <xTaskPriorityInherit>
 800b91c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b91e:	f7ff fd5b 	bl	800b3d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b922:	9901      	ldr	r1, [sp, #4]
 800b924:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b928:	f000 fbb0 	bl	800c08c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7ff fe88 	bl	800b642 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b932:	f000 fad5 	bl	800bee0 <xTaskResumeAll>
 800b936:	b938      	cbnz	r0, 800b948 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 800b938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b93c:	f8c8 3000 	str.w	r3, [r8]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	2601      	movs	r6, #1
 800b94a:	e78f      	b.n	800b86c <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7ff fe78 	bl	800b642 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b952:	f000 fac5 	bl	800bee0 <xTaskResumeAll>
 800b956:	e7f7      	b.n	800b948 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 800b958:	4620      	mov	r0, r4
 800b95a:	f7ff fe72 	bl	800b642 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b95e:	f000 fabf 	bl	800bee0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff fe62 	bl	800b62c <prvIsQueueEmpty>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d0ed      	beq.n	800b948 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 800b96c:	2d00      	cmp	r5, #0
 800b96e:	d09a      	beq.n	800b8a6 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 800b970:	f7ff fd10 	bl	800b394 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b974:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b976:	b119      	cbz	r1, 800b980 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b97a:	6819      	ldr	r1, [r3, #0]
 800b97c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b980:	68a0      	ldr	r0, [r4, #8]
 800b982:	f000 fc91 	bl	800c2a8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800b986:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800b988:	f7ff fd26 	bl	800b3d8 <vPortExitCritical>
 800b98c:	e78b      	b.n	800b8a6 <xQueueSemaphoreTake+0x82>
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	e7fe      	b.n	800b99e <xQueueSemaphoreTake+0x17a>
 800b9a0:	e000ed04 	.word	0xe000ed04

0800b9a4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9aa:	f7ff fcf3 	bl	800b394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ba64 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 800b9b0:	4c2d      	ldr	r4, [pc, #180]	; (800ba68 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	4f2d      	ldr	r7, [pc, #180]	; (800ba6c <prvAddNewTaskToReadyList+0xc8>)
 800b9b6:	3201      	adds	r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b9ba:	6825      	ldr	r5, [r4, #0]
 800b9bc:	2d00      	cmp	r5, #0
 800b9be:	d145      	bne.n	800ba4c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9c0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d11c      	bne.n	800ba02 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9c8:	1978      	adds	r0, r7, r5
 800b9ca:	3514      	adds	r5, #20
 800b9cc:	f7ff fc38 	bl	800b240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9d0:	2d8c      	cmp	r5, #140	; 0x8c
 800b9d2:	d1f9      	bne.n	800b9c8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9d4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ba98 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 800b9d8:	4d25      	ldr	r5, [pc, #148]	; (800ba70 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800b9da:	4640      	mov	r0, r8
 800b9dc:	f7ff fc30 	bl	800b240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f7ff fc2d 	bl	800b240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9e6:	4823      	ldr	r0, [pc, #140]	; (800ba74 <prvAddNewTaskToReadyList+0xd0>)
 800b9e8:	f7ff fc2a 	bl	800b240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ec:	4822      	ldr	r0, [pc, #136]	; (800ba78 <prvAddNewTaskToReadyList+0xd4>)
 800b9ee:	f7ff fc27 	bl	800b240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9f2:	4822      	ldr	r0, [pc, #136]	; (800ba7c <prvAddNewTaskToReadyList+0xd8>)
 800b9f4:	f7ff fc24 	bl	800b240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9f8:	4b21      	ldr	r3, [pc, #132]	; (800ba80 <prvAddNewTaskToReadyList+0xdc>)
 800b9fa:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9fe:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <prvAddNewTaskToReadyList+0xe0>)
 800ba00:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800ba02:	4a21      	ldr	r2, [pc, #132]	; (800ba88 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800ba04:	4921      	ldr	r1, [pc, #132]	; (800ba8c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800ba06:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ba08:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ba0e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800ba10:	2301      	movs	r3, #1
 800ba12:	4093      	lsls	r3, r2
 800ba14:	4303      	orrs	r3, r0
 800ba16:	2014      	movs	r0, #20
 800ba18:	600b      	str	r3, [r1, #0]
 800ba1a:	fb00 7002 	mla	r0, r0, r2, r7
 800ba1e:	1d31      	adds	r1, r6, #4
 800ba20:	f7ff fc1c 	bl	800b25c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ba24:	f7ff fcd8 	bl	800b3d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ba28:	4b19      	ldr	r3, [pc, #100]	; (800ba90 <prvAddNewTaskToReadyList+0xec>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	b163      	cbz	r3, 800ba48 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba32:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d207      	bcs.n	800ba48 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 800ba38:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <prvAddNewTaskToReadyList+0xf0>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800ba4c:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <prvAddNewTaskToReadyList+0xec>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1d6      	bne.n	800ba02 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ba5a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800ba5c:	bf98      	it	ls
 800ba5e:	6026      	strls	r6, [r4, #0]
 800ba60:	e7cf      	b.n	800ba02 <prvAddNewTaskToReadyList+0x5e>
 800ba62:	bf00      	nop
 800ba64:	20001854 	.word	0x20001854
 800ba68:	200017bc 	.word	0x200017bc
 800ba6c:	200017c8 	.word	0x200017c8
 800ba70:	20001880 	.word	0x20001880
 800ba74:	2000189c 	.word	0x2000189c
 800ba78:	200018c8 	.word	0x200018c8
 800ba7c:	200018b4 	.word	0x200018b4
 800ba80:	200017c0 	.word	0x200017c0
 800ba84:	200017c4 	.word	0x200017c4
 800ba88:	20001864 	.word	0x20001864
 800ba8c:	20001868 	.word	0x20001868
 800ba90:	200018b0 	.word	0x200018b0
 800ba94:	e000ed04 	.word	0xe000ed04
 800ba98:	2000186c 	.word	0x2000186c

0800ba9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba9c:	4a06      	ldr	r2, [pc, #24]	; (800bab8 <prvResetNextTaskUnblockTime+0x1c>)
 800ba9e:	6813      	ldr	r3, [r2, #0]
 800baa0:	6819      	ldr	r1, [r3, #0]
 800baa2:	4b06      	ldr	r3, [pc, #24]	; (800babc <prvResetNextTaskUnblockTime+0x20>)
 800baa4:	b919      	cbnz	r1, 800baae <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bab2:	68d2      	ldr	r2, [r2, #12]
 800bab4:	6852      	ldr	r2, [r2, #4]
 800bab6:	e7f8      	b.n	800baaa <prvResetNextTaskUnblockTime+0xe>
 800bab8:	200017c0 	.word	0x200017c0
 800babc:	20001894 	.word	0x20001894

0800bac0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bac6:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bac8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800baca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800bace:	3a01      	subs	r2, #1
 800bad0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bad4:	4680      	mov	r8, r0
 800bad6:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bad8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800badc:	b391      	cbz	r1, 800bb44 <prvInitialiseNewTask.isra.2+0x84>
 800bade:	1e4b      	subs	r3, r1, #1
 800bae0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bae4:	311f      	adds	r1, #31
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bae6:	7858      	ldrb	r0, [r3, #1]
 800bae8:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800baec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800baf0:	b108      	cbz	r0, 800baf6 <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baf2:	428b      	cmp	r3, r1
 800baf4:	d1f7      	bne.n	800bae6 <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800baf6:	2300      	movs	r3, #0
 800baf8:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800bafc:	9d08      	ldr	r5, [sp, #32]
 800bafe:	2d06      	cmp	r5, #6
 800bb00:	bf28      	it	cs
 800bb02:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800bb04:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800bb08:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bb0a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb0c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800bb0e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb12:	f7ff fba0 	bl	800b256 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb16:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb1a:	f104 0018 	add.w	r0, r4, #24
 800bb1e:	f7ff fb9a 	bl	800b256 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800bb22:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb26:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb28:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb2a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb2c:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb30:	464a      	mov	r2, r9
 800bb32:	4641      	mov	r1, r8
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff fc03 	bl	800b340 <pxPortInitialiseStack>
 800bb3a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800bb3c:	b107      	cbz	r7, 800bb40 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb3e:	603c      	str	r4, [r7, #0]
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb44:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800bb48:	e7d8      	b.n	800bafc <prvInitialiseNewTask.isra.2+0x3c>

0800bb4a <prvDeleteTCB>:
	{
 800bb4a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb4c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 800bb50:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb52:	b93b      	cbnz	r3, 800bb64 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800bb54:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bb56:	f7ff fb3b 	bl	800b1d0 <vPortFree>
				vPortFree( pxTCB );
 800bb5a:	4620      	mov	r0, r4
	}
 800bb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800bb60:	f7ff bb36 	b.w	800b1d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d0f9      	beq.n	800bb5c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d008      	beq.n	800bb7e <prvDeleteTCB+0x34>
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	e7fe      	b.n	800bb7c <prvDeleteTCB+0x32>
 800bb7e:	bd10      	pop	{r4, pc}

0800bb80 <prvIdleTask>:
{
 800bb80:	b580      	push	{r7, lr}
				taskYIELD();
 800bb82:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800bbe0 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb86:	4f12      	ldr	r7, [pc, #72]	; (800bbd0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb88:	4c12      	ldr	r4, [pc, #72]	; (800bbd4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800bb8a:	4d13      	ldr	r5, [pc, #76]	; (800bbd8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	b963      	cbnz	r3, 800bbaa <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb90:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <prvIdleTask+0x5c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d9f8      	bls.n	800bb8a <prvIdleTask+0xa>
				taskYIELD();
 800bb98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb9c:	f8c8 3000 	str.w	r3, [r8]
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	e7ee      	b.n	800bb88 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800bbaa:	f7ff fbf3 	bl	800b394 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb2:	1d30      	adds	r0, r6, #4
 800bbb4:	f7ff fb75 	bl	800b2a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800bbc4:	f7ff fc08 	bl	800b3d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800bbc8:	4630      	mov	r0, r6
 800bbca:	f7ff ffbe 	bl	800bb4a <prvDeleteTCB>
 800bbce:	e7dd      	b.n	800bb8c <prvIdleTask+0xc>
 800bbd0:	200018c8 	.word	0x200018c8
 800bbd4:	20001858 	.word	0x20001858
 800bbd8:	20001854 	.word	0x20001854
 800bbdc:	200017c8 	.word	0x200017c8
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbe6:	4b1b      	ldr	r3, [pc, #108]	; (800bc54 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbe8:	4e1b      	ldr	r6, [pc, #108]	; (800bc58 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800bbea:	681d      	ldr	r5, [r3, #0]
{
 800bbec:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbee:	6830      	ldr	r0, [r6, #0]
 800bbf0:	3004      	adds	r0, #4
{
 800bbf2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbf4:	f7ff fb55 	bl	800b2a2 <uxListRemove>
 800bbf8:	4633      	mov	r3, r6
 800bbfa:	b940      	cbnz	r0, 800bc0e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bbfc:	6831      	ldr	r1, [r6, #0]
 800bbfe:	4e17      	ldr	r6, [pc, #92]	; (800bc5c <prvAddCurrentTaskToDelayedList+0x78>)
 800bc00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800bc02:	6832      	ldr	r2, [r6, #0]
 800bc04:	2001      	movs	r0, #1
 800bc06:	4088      	lsls	r0, r1
 800bc08:	ea22 0200 	bic.w	r2, r2, r0
 800bc0c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc0e:	1c62      	adds	r2, r4, #1
 800bc10:	d107      	bne.n	800bc22 <prvAddCurrentTaskToDelayedList+0x3e>
 800bc12:	b137      	cbz	r7, 800bc22 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc14:	6819      	ldr	r1, [r3, #0]
 800bc16:	4812      	ldr	r0, [pc, #72]	; (800bc60 <prvAddCurrentTaskToDelayedList+0x7c>)
 800bc18:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc1e:	f7ff bb1d 	b.w	800b25c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc22:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc24:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800bc26:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc28:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800bc2a:	d907      	bls.n	800bc3c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc2c:	4a0d      	ldr	r2, [pc, #52]	; (800bc64 <prvAddCurrentTaskToDelayedList+0x80>)
 800bc2e:	6810      	ldr	r0, [r2, #0]
 800bc30:	6819      	ldr	r1, [r3, #0]
}
 800bc32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc36:	3104      	adds	r1, #4
 800bc38:	f7ff bb1c 	b.w	800b274 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc3c:	4a0a      	ldr	r2, [pc, #40]	; (800bc68 <prvAddCurrentTaskToDelayedList+0x84>)
 800bc3e:	6810      	ldr	r0, [r2, #0]
 800bc40:	6819      	ldr	r1, [r3, #0]
 800bc42:	3104      	adds	r1, #4
 800bc44:	f7ff fb16 	bl	800b274 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <prvAddCurrentTaskToDelayedList+0x88>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800bc4e:	bf38      	it	cc
 800bc50:	601c      	strcc	r4, [r3, #0]
 800bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc54:	200018dc 	.word	0x200018dc
 800bc58:	200017bc 	.word	0x200017bc
 800bc5c:	20001868 	.word	0x20001868
 800bc60:	200018b4 	.word	0x200018b4
 800bc64:	200017c4 	.word	0x200017c4
 800bc68:	200017c0 	.word	0x200017c0
 800bc6c:	20001894 	.word	0x20001894

0800bc70 <prvTaskIsTaskSuspended.part.0>:
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	e7fe      	b.n	800bc80 <prvTaskIsTaskSuspended.part.0+0x10>

0800bc82 <xTaskCreateStatic>:
	{
 800bc82:	b570      	push	{r4, r5, r6, lr}
 800bc84:	b086      	sub	sp, #24
 800bc86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bc88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800bc8a:	b90d      	cbnz	r5, 800bc90 <xTaskCreateStatic+0xe>
 800bc8c:	f7ff fff0 	bl	800bc70 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 800bc90:	b944      	cbnz	r4, 800bca4 <xTaskCreateStatic+0x22>
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	e7fe      	b.n	800bca2 <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 800bca4:	2664      	movs	r6, #100	; 0x64
 800bca6:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bca8:	9e05      	ldr	r6, [sp, #20]
 800bcaa:	2e64      	cmp	r6, #100	; 0x64
 800bcac:	d008      	beq.n	800bcc0 <xTaskCreateStatic+0x3e>
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	e7fe      	b.n	800bcbe <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcc0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcc2:	2502      	movs	r5, #2
 800bcc4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcc8:	ad04      	add	r5, sp, #16
 800bcca:	9501      	str	r5, [sp, #4]
 800bccc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bcce:	9402      	str	r4, [sp, #8]
 800bcd0:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcd2:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcd4:	f7ff fef4 	bl	800bac0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7ff fe63 	bl	800b9a4 <prvAddNewTaskToReadyList>
	}
 800bcde:	9804      	ldr	r0, [sp, #16]
 800bce0:	b006      	add	sp, #24
 800bce2:	bd70      	pop	{r4, r5, r6, pc}

0800bce4 <xTaskCreate>:
	{
 800bce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bce8:	4607      	mov	r7, r0
 800bcea:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcec:	0090      	lsls	r0, r2, #2
	{
 800bcee:	4688      	mov	r8, r1
 800bcf0:	4616      	mov	r6, r2
 800bcf2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcf4:	f7ff f9de 	bl	800b0b4 <pvPortMalloc>
			if( pxStack != NULL )
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	b1e8      	cbz	r0, 800bd38 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcfc:	2064      	movs	r0, #100	; 0x64
 800bcfe:	f7ff f9d9 	bl	800b0b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800bd02:	4604      	mov	r4, r0
 800bd04:	b1a8      	cbz	r0, 800bd32 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800bd0e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd14:	9002      	str	r0, [sp, #8]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	4632      	mov	r2, r6
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	4641      	mov	r1, r8
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f7ff fece 	bl	800bac0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7ff fe3d 	bl	800b9a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd2a:	2001      	movs	r0, #1
	}
 800bd2c:	b005      	add	sp, #20
 800bd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7ff fa4c 	bl	800b1d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800bd3c:	e7f6      	b.n	800bd2c <xTaskCreate+0x48>
	...

0800bd40 <vTaskStartScheduler>:
{
 800bd40:	b510      	push	{r4, lr}
 800bd42:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd44:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd46:	aa07      	add	r2, sp, #28
 800bd48:	a906      	add	r1, sp, #24
 800bd4a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd4c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd4e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd50:	f000 fe80 	bl	800ca54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd54:	9b05      	ldr	r3, [sp, #20]
 800bd56:	9302      	str	r3, [sp, #8]
 800bd58:	9b06      	ldr	r3, [sp, #24]
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	9400      	str	r4, [sp, #0]
 800bd5e:	4623      	mov	r3, r4
 800bd60:	9a07      	ldr	r2, [sp, #28]
 800bd62:	490d      	ldr	r1, [pc, #52]	; (800bd98 <vTaskStartScheduler+0x58>)
 800bd64:	480d      	ldr	r0, [pc, #52]	; (800bd9c <vTaskStartScheduler+0x5c>)
 800bd66:	f7ff ff8c 	bl	800bc82 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bd6a:	b190      	cbz	r0, 800bd92 <vTaskStartScheduler+0x52>
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd7c:	4b08      	ldr	r3, [pc, #32]	; (800bda0 <vTaskStartScheduler+0x60>)
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd84:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <vTaskStartScheduler+0x64>)
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd8a:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <vTaskStartScheduler+0x68>)
 800bd8c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800bd8e:	f7ff fb99 	bl	800b4c4 <xPortStartScheduler>
}
 800bd92:	b008      	add	sp, #32
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	bf00      	nop
 800bd98:	08016599 	.word	0x08016599
 800bd9c:	0800bb81 	.word	0x0800bb81
 800bda0:	20001894 	.word	0x20001894
 800bda4:	200018b0 	.word	0x200018b0
 800bda8:	200018dc 	.word	0x200018dc

0800bdac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800bdac:	4a02      	ldr	r2, [pc, #8]	; (800bdb8 <vTaskSuspendAll+0xc>)
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20001860 	.word	0x20001860

0800bdbc <xTaskIncrementTick>:
{
 800bdbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc0:	4b3c      	ldr	r3, [pc, #240]	; (800beb4 <xTaskIncrementTick+0xf8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d16d      	bne.n	800bea4 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdc8:	4b3b      	ldr	r3, [pc, #236]	; (800beb8 <xTaskIncrementTick+0xfc>)
 800bdca:	681c      	ldr	r4, [r3, #0]
 800bdcc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800bdce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdd0:	b9bc      	cbnz	r4, 800be02 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800bdd2:	4b3a      	ldr	r3, [pc, #232]	; (800bebc <xTaskIncrementTick+0x100>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	b142      	cbz	r2, 800bdec <xTaskIncrementTick+0x30>
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	e7fe      	b.n	800bdea <xTaskIncrementTick+0x2e>
 800bdec:	4a34      	ldr	r2, [pc, #208]	; (800bec0 <xTaskIncrementTick+0x104>)
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	6810      	ldr	r0, [r2, #0]
 800bdf2:	6018      	str	r0, [r3, #0]
 800bdf4:	6011      	str	r1, [r2, #0]
 800bdf6:	4a33      	ldr	r2, [pc, #204]	; (800bec4 <xTaskIncrementTick+0x108>)
 800bdf8:	6813      	ldr	r3, [r2, #0]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	f7ff fe4d 	bl	800ba9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be02:	4d31      	ldr	r5, [pc, #196]	; (800bec8 <xTaskIncrementTick+0x10c>)
 800be04:	4f31      	ldr	r7, [pc, #196]	; (800becc <xTaskIncrementTick+0x110>)
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	429c      	cmp	r4, r3
 800be0a:	f04f 0b00 	mov.w	fp, #0
 800be0e:	d30a      	bcc.n	800be26 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be10:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800bebc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800be14:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800bedc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be18:	f8da 2000 	ldr.w	r2, [sl]
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	b9a2      	cbnz	r2, 800be4a <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be20:	f04f 32ff 	mov.w	r2, #4294967295
 800be24:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4b29      	ldr	r3, [pc, #164]	; (800bed0 <xTaskIncrementTick+0x114>)
 800be2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800be2c:	2214      	movs	r2, #20
 800be2e:	434a      	muls	r2, r1
 800be30:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800be32:	2a02      	cmp	r2, #2
 800be34:	bf28      	it	cs
 800be36:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800be3a:	4a26      	ldr	r2, [pc, #152]	; (800bed4 <xTaskIncrementTick+0x118>)
 800be3c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800be3e:	2a00      	cmp	r2, #0
}
 800be40:	bf0c      	ite	eq
 800be42:	4658      	moveq	r0, fp
 800be44:	2001      	movne	r0, #1
 800be46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be4a:	f8da 2000 	ldr.w	r2, [sl]
 800be4e:	68d2      	ldr	r2, [r2, #12]
 800be50:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be52:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800be54:	428c      	cmp	r4, r1
 800be56:	d201      	bcs.n	800be5c <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 800be58:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be5a:	e7e4      	b.n	800be26 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be5c:	f106 0804 	add.w	r8, r6, #4
 800be60:	4640      	mov	r0, r8
 800be62:	f7ff fa1e 	bl	800b2a2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800be68:	b119      	cbz	r1, 800be72 <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be6a:	f106 0018 	add.w	r0, r6, #24
 800be6e:	f7ff fa18 	bl	800b2a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be72:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800be74:	f8d9 3000 	ldr.w	r3, [r9]
 800be78:	2201      	movs	r2, #1
 800be7a:	fa02 f100 	lsl.w	r1, r2, r0
 800be7e:	4319      	orrs	r1, r3
 800be80:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <xTaskIncrementTick+0x114>)
 800be82:	f8c9 1000 	str.w	r1, [r9]
 800be86:	f04f 0e14 	mov.w	lr, #20
 800be8a:	4641      	mov	r1, r8
 800be8c:	fb0e 3000 	mla	r0, lr, r0, r3
 800be90:	f7ff f9e4 	bl	800b25c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be94:	6838      	ldr	r0, [r7, #0]
 800be96:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800be98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800be9a:	4291      	cmp	r1, r2
 800be9c:	bf28      	it	cs
 800be9e:	f04f 0b01 	movcs.w	fp, #1
 800bea2:	e7b9      	b.n	800be18 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800bea4:	4a0c      	ldr	r2, [pc, #48]	; (800bed8 <xTaskIncrementTick+0x11c>)
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800beac:	f04f 0b00 	mov.w	fp, #0
 800beb0:	e7c3      	b.n	800be3a <xTaskIncrementTick+0x7e>
 800beb2:	bf00      	nop
 800beb4:	20001860 	.word	0x20001860
 800beb8:	200018dc 	.word	0x200018dc
 800bebc:	200017c0 	.word	0x200017c0
 800bec0:	200017c4 	.word	0x200017c4
 800bec4:	20001898 	.word	0x20001898
 800bec8:	20001894 	.word	0x20001894
 800becc:	200017bc 	.word	0x200017bc
 800bed0:	200017c8 	.word	0x200017c8
 800bed4:	200018e0 	.word	0x200018e0
 800bed8:	2000185c 	.word	0x2000185c
 800bedc:	20001868 	.word	0x20001868

0800bee0 <xTaskResumeAll>:
{
 800bee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800bee4:	4c31      	ldr	r4, [pc, #196]	; (800bfac <xTaskResumeAll+0xcc>)
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	b943      	cbnz	r3, 800befc <xTaskResumeAll+0x1c>
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	e7fe      	b.n	800befa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800befc:	f7ff fa4a 	bl	800b394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf06:	6824      	ldr	r4, [r4, #0]
 800bf08:	b12c      	cbz	r4, 800bf16 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800bf0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bf0c:	f7ff fa64 	bl	800b3d8 <vPortExitCritical>
}
 800bf10:	4620      	mov	r0, r4
 800bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf16:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <xTaskResumeAll+0xd0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f5      	beq.n	800bf0a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf1e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800bfc8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800bf22:	4f24      	ldr	r7, [pc, #144]	; (800bfb4 <xTaskResumeAll+0xd4>)
 800bf24:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800bfcc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf28:	f8d9 3000 	ldr.w	r3, [r9]
 800bf2c:	b9e3      	cbnz	r3, 800bf68 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800bf2e:	b10c      	cbz	r4, 800bf34 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800bf30:	f7ff fdb4 	bl	800ba9c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bf34:	4d20      	ldr	r5, [pc, #128]	; (800bfb8 <xTaskResumeAll+0xd8>)
 800bf36:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bf38:	b144      	cbz	r4, 800bf4c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800bf3a:	4e20      	ldr	r6, [pc, #128]	; (800bfbc <xTaskResumeAll+0xdc>)
 800bf3c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bf3e:	f7ff ff3d 	bl	800bdbc <xTaskIncrementTick>
 800bf42:	b100      	cbz	r0, 800bf46 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800bf44:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bf46:	3c01      	subs	r4, #1
 800bf48:	d1f9      	bne.n	800bf3e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800bf4a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800bf4c:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <xTaskResumeAll+0xdc>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d0da      	beq.n	800bf0a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800bf54:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <xTaskResumeAll+0xe0>)
 800bf56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bf64:	2401      	movs	r4, #1
 800bf66:	e7d1      	b.n	800bf0c <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf68:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bf6c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf6e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf70:	f104 0018 	add.w	r0, r4, #24
 800bf74:	f7ff f995 	bl	800b2a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7ff f992 	bl	800b2a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	2501      	movs	r5, #1
 800bf84:	fa05 f302 	lsl.w	r3, r5, r2
 800bf88:	2014      	movs	r0, #20
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	fb00 8002 	mla	r0, r0, r2, r8
 800bf90:	4631      	mov	r1, r6
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	f7ff f962 	bl	800b25c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf98:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <xTaskResumeAll+0xe4>)
 800bf9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800bfa2:	bf24      	itt	cs
 800bfa4:	4b05      	ldrcs	r3, [pc, #20]	; (800bfbc <xTaskResumeAll+0xdc>)
 800bfa6:	601d      	strcs	r5, [r3, #0]
 800bfa8:	e7be      	b.n	800bf28 <xTaskResumeAll+0x48>
 800bfaa:	bf00      	nop
 800bfac:	20001860 	.word	0x20001860
 800bfb0:	20001854 	.word	0x20001854
 800bfb4:	20001868 	.word	0x20001868
 800bfb8:	2000185c 	.word	0x2000185c
 800bfbc:	200018e0 	.word	0x200018e0
 800bfc0:	e000ed04 	.word	0xe000ed04
 800bfc4:	200017bc 	.word	0x200017bc
 800bfc8:	2000189c 	.word	0x2000189c
 800bfcc:	200017c8 	.word	0x200017c8

0800bfd0 <vTaskDelay>:
	{
 800bfd0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bfd2:	b940      	cbnz	r0, 800bfe6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <vTaskDelay+0x40>)
 800bfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <vTaskDelay+0x44>)
 800bfe8:	6819      	ldr	r1, [r3, #0]
 800bfea:	b141      	cbz	r1, 800bffe <vTaskDelay+0x2e>
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	e7fe      	b.n	800bffc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bffe:	f7ff fed5 	bl	800bdac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c002:	f7ff fdef 	bl	800bbe4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800c006:	f7ff ff6b 	bl	800bee0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0e2      	beq.n	800bfd4 <vTaskDelay+0x4>
 800c00e:	bd08      	pop	{r3, pc}
 800c010:	e000ed04 	.word	0xe000ed04
 800c014:	20001860 	.word	0x20001860

0800c018 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c018:	4b17      	ldr	r3, [pc, #92]	; (800c078 <vTaskSwitchContext+0x60>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	4b17      	ldr	r3, [pc, #92]	; (800c07c <vTaskSwitchContext+0x64>)
{
 800c01e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c020:	b112      	cbz	r2, 800c028 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c022:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800c028:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c02a:	4b15      	ldr	r3, [pc, #84]	; (800c080 <vTaskSwitchContext+0x68>)
 800c02c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c02e:	fab3 f383 	clz	r3, r3
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f1c3 031f 	rsb	r3, r3, #31
 800c038:	2214      	movs	r2, #20
 800c03a:	4912      	ldr	r1, [pc, #72]	; (800c084 <vTaskSwitchContext+0x6c>)
 800c03c:	435a      	muls	r2, r3
 800c03e:	1888      	adds	r0, r1, r2
 800c040:	588c      	ldr	r4, [r1, r2]
 800c042:	b944      	cbnz	r4, 800c056 <vTaskSwitchContext+0x3e>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	e7fe      	b.n	800c054 <vTaskSwitchContext+0x3c>
 800c056:	6844      	ldr	r4, [r0, #4]
 800c058:	3208      	adds	r2, #8
 800c05a:	6864      	ldr	r4, [r4, #4]
 800c05c:	6044      	str	r4, [r0, #4]
 800c05e:	440a      	add	r2, r1
 800c060:	4294      	cmp	r4, r2
 800c062:	bf04      	itt	eq
 800c064:	6862      	ldreq	r2, [r4, #4]
 800c066:	6042      	streq	r2, [r0, #4]
 800c068:	2214      	movs	r2, #20
 800c06a:	fb02 1303 	mla	r3, r2, r3, r1
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <vTaskSwitchContext+0x70>)
 800c074:	e7d6      	b.n	800c024 <vTaskSwitchContext+0xc>
 800c076:	bf00      	nop
 800c078:	20001860 	.word	0x20001860
 800c07c:	200018e0 	.word	0x200018e0
 800c080:	20001868 	.word	0x20001868
 800c084:	200017c8 	.word	0x200017c8
 800c088:	200017bc 	.word	0x200017bc

0800c08c <vTaskPlaceOnEventList>:
{
 800c08c:	b510      	push	{r4, lr}
 800c08e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800c090:	b940      	cbnz	r0, 800c0a4 <vTaskPlaceOnEventList+0x18>
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	e7fe      	b.n	800c0a2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0a4:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <vTaskPlaceOnEventList+0x30>)
 800c0a6:	6819      	ldr	r1, [r3, #0]
 800c0a8:	3118      	adds	r1, #24
 800c0aa:	f7ff f8e3 	bl	800b274 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	2101      	movs	r1, #1
}
 800c0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0b6:	f7ff bd95 	b.w	800bbe4 <prvAddCurrentTaskToDelayedList>
 800c0ba:	bf00      	nop
 800c0bc:	200017bc 	.word	0x200017bc

0800c0c0 <xTaskRemoveFromEventList>:
{
 800c0c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c2:	68c3      	ldr	r3, [r0, #12]
 800c0c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c0c6:	b944      	cbnz	r4, 800c0da <xTaskRemoveFromEventList+0x1a>
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	e7fe      	b.n	800c0d8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0da:	f104 0518 	add.w	r5, r4, #24
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f7ff f8df 	bl	800b2a2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e4:	4b11      	ldr	r3, [pc, #68]	; (800c12c <xTaskRemoveFromEventList+0x6c>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	b9e3      	cbnz	r3, 800c124 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0ea:	1d25      	adds	r5, r4, #4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f7ff f8d8 	bl	800b2a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0f2:	490f      	ldr	r1, [pc, #60]	; (800c130 <xTaskRemoveFromEventList+0x70>)
 800c0f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c0f6:	6808      	ldr	r0, [r1, #0]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	4093      	lsls	r3, r2
 800c0fc:	4303      	orrs	r3, r0
 800c0fe:	600b      	str	r3, [r1, #0]
 800c100:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <xTaskRemoveFromEventList+0x74>)
 800c102:	2014      	movs	r0, #20
 800c104:	4629      	mov	r1, r5
 800c106:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c10a:	f7ff f8a7 	bl	800b25c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c10e:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <xTaskRemoveFromEventList+0x78>)
 800c110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c116:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800c118:	bf83      	ittte	hi
 800c11a:	4b08      	ldrhi	r3, [pc, #32]	; (800c13c <xTaskRemoveFromEventList+0x7c>)
 800c11c:	2001      	movhi	r0, #1
 800c11e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800c120:	2000      	movls	r0, #0
}
 800c122:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c124:	4629      	mov	r1, r5
 800c126:	4806      	ldr	r0, [pc, #24]	; (800c140 <xTaskRemoveFromEventList+0x80>)
 800c128:	e7ef      	b.n	800c10a <xTaskRemoveFromEventList+0x4a>
 800c12a:	bf00      	nop
 800c12c:	20001860 	.word	0x20001860
 800c130:	20001868 	.word	0x20001868
 800c134:	200017c8 	.word	0x200017c8
 800c138:	200017bc 	.word	0x200017bc
 800c13c:	200018e0 	.word	0x200018e0
 800c140:	2000189c 	.word	0x2000189c

0800c144 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c144:	4b03      	ldr	r3, [pc, #12]	; (800c154 <vTaskInternalSetTimeOutState+0x10>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c14a:	4b03      	ldr	r3, [pc, #12]	; (800c158 <vTaskInternalSetTimeOutState+0x14>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6043      	str	r3, [r0, #4]
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20001898 	.word	0x20001898
 800c158:	200018dc 	.word	0x200018dc

0800c15c <xTaskCheckForTimeOut>:
{
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800c160:	4605      	mov	r5, r0
 800c162:	b940      	cbnz	r0, 800c176 <xTaskCheckForTimeOut+0x1a>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	e7fe      	b.n	800c174 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800c176:	b941      	cbnz	r1, 800c18a <xTaskCheckForTimeOut+0x2e>
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	e7fe      	b.n	800c188 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800c18a:	f7ff f903 	bl	800b394 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c18e:	4b0f      	ldr	r3, [pc, #60]	; (800c1cc <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c190:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800c192:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	1c58      	adds	r0, r3, #1
 800c198:	d00e      	beq.n	800c1b8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c19a:	480d      	ldr	r0, [pc, #52]	; (800c1d0 <xTaskCheckForTimeOut+0x74>)
 800c19c:	682e      	ldr	r6, [r5, #0]
 800c19e:	6800      	ldr	r0, [r0, #0]
 800c1a0:	4286      	cmp	r6, r0
 800c1a2:	d001      	beq.n	800c1a8 <xTaskCheckForTimeOut+0x4c>
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	d20e      	bcs.n	800c1c6 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1a8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d209      	bcs.n	800c1c2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800c1ae:	1a9b      	subs	r3, r3, r2
 800c1b0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7ff ffc6 	bl	800c144 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800c1b8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c1ba:	f7ff f90d 	bl	800b3d8 <vPortExitCritical>
}
 800c1be:	4620      	mov	r0, r4
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800c1c6:	2401      	movs	r4, #1
 800c1c8:	e7f7      	b.n	800c1ba <xTaskCheckForTimeOut+0x5e>
 800c1ca:	bf00      	nop
 800c1cc:	200018dc 	.word	0x200018dc
 800c1d0:	20001898 	.word	0x20001898

0800c1d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c1d4:	4b01      	ldr	r3, [pc, #4]	; (800c1dc <vTaskMissedYield+0x8>)
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	4770      	bx	lr
 800c1dc:	200018e0 	.word	0x200018e0

0800c1e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c1e0:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <xTaskGetSchedulerState+0x18>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	b133      	cbz	r3, 800c1f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1e6:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <xTaskGetSchedulerState+0x1c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1ec:	bf0c      	ite	eq
 800c1ee:	2002      	moveq	r0, #2
 800c1f0:	2000      	movne	r0, #0
 800c1f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1f4:	2001      	movs	r0, #1
	}
 800c1f6:	4770      	bx	lr
 800c1f8:	200018b0 	.word	0x200018b0
 800c1fc:	20001860 	.word	0x20001860

0800c200 <xTaskPriorityInherit>:
	{
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800c204:	4604      	mov	r4, r0
 800c206:	2800      	cmp	r0, #0
 800c208:	d035      	beq.n	800c276 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c20a:	4a24      	ldr	r2, [pc, #144]	; (800c29c <xTaskPriorityInherit+0x9c>)
 800c20c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c20e:	6811      	ldr	r1, [r2, #0]
 800c210:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800c212:	428b      	cmp	r3, r1
 800c214:	4617      	mov	r7, r2
 800c216:	d237      	bcs.n	800c288 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c218:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c21a:	4d21      	ldr	r5, [pc, #132]	; (800c2a0 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c21c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c21e:	bfa1      	itttt	ge
 800c220:	683a      	ldrge	r2, [r7, #0]
 800c222:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800c224:	f1c2 0207 	rsbge	r2, r2, #7
 800c228:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c22a:	2614      	movs	r6, #20
 800c22c:	6942      	ldr	r2, [r0, #20]
 800c22e:	fb06 5303 	mla	r3, r6, r3, r5
 800c232:	429a      	cmp	r2, r3
 800c234:	d122      	bne.n	800c27c <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c236:	f100 0804 	add.w	r8, r0, #4
 800c23a:	4640      	mov	r0, r8
 800c23c:	f7ff f831 	bl	800b2a2 <uxListRemove>
 800c240:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <xTaskPriorityInherit+0xa4>)
 800c242:	b948      	cbnz	r0, 800c258 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c244:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c246:	4346      	muls	r6, r0
 800c248:	59aa      	ldr	r2, [r5, r6]
 800c24a:	b92a      	cbnz	r2, 800c258 <xTaskPriorityInherit+0x58>
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	2101      	movs	r1, #1
 800c250:	4081      	lsls	r1, r0
 800c252:	ea22 0201 	bic.w	r2, r2, r1
 800c256:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c258:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c25a:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c25c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c25e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c260:	2401      	movs	r4, #1
 800c262:	fa04 f002 	lsl.w	r0, r4, r2
 800c266:	4308      	orrs	r0, r1
 800c268:	6018      	str	r0, [r3, #0]
 800c26a:	2014      	movs	r0, #20
 800c26c:	4641      	mov	r1, r8
 800c26e:	fb00 5002 	mla	r0, r0, r2, r5
 800c272:	f7fe fff3 	bl	800b25c <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800c276:	4620      	mov	r0, r4
	}
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800c282:	2001      	movs	r0, #1
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c288:	6813      	ldr	r3, [r2, #0]
 800c28a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800c28c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c28e:	42a0      	cmp	r0, r4
 800c290:	bf2c      	ite	cs
 800c292:	2000      	movcs	r0, #0
 800c294:	2001      	movcc	r0, #1
 800c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29a:	bf00      	nop
 800c29c:	200017bc 	.word	0x200017bc
 800c2a0:	200017c8 	.word	0x200017c8
 800c2a4:	20001868 	.word	0x20001868

0800c2a8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d04d      	beq.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2b0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800c2b2:	b942      	cbnz	r2, 800c2c6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	e7fe      	b.n	800c2c4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800c2c6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c2c8:	4299      	cmp	r1, r3
 800c2ca:	bf38      	it	cc
 800c2cc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d03b      	beq.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2d4:	2a01      	cmp	r2, #1
 800c2d6:	d139      	bne.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 800c2d8:	4a1d      	ldr	r2, [pc, #116]	; (800c350 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800c2da:	6812      	ldr	r2, [r2, #0]
 800c2dc:	4290      	cmp	r0, r2
 800c2de:	d108      	bne.n	800c2f2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	e7fe      	b.n	800c2f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2f2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2f4:	4d17      	ldr	r5, [pc, #92]	; (800c354 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800c2f6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2f8:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2fa:	f04f 0614 	mov.w	r6, #20
 800c2fe:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c300:	bfa8      	it	ge
 800c302:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c306:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c30a:	bfa8      	it	ge
 800c30c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c30e:	429a      	cmp	r2, r3
 800c310:	d11c      	bne.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c312:	1d07      	adds	r7, r0, #4
 800c314:	4638      	mov	r0, r7
 800c316:	f7fe ffc4 	bl	800b2a2 <uxListRemove>
 800c31a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c31c:	4c0e      	ldr	r4, [pc, #56]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800c31e:	b940      	cbnz	r0, 800c332 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c320:	4356      	muls	r6, r2
 800c322:	59ab      	ldr	r3, [r5, r6]
 800c324:	b92b      	cbnz	r3, 800c332 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	2101      	movs	r1, #1
 800c32a:	4091      	lsls	r1, r2
 800c32c:	ea23 0301 	bic.w	r3, r3, r1
 800c330:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800c332:	6821      	ldr	r1, [r4, #0]
 800c334:	2301      	movs	r3, #1
 800c336:	4093      	lsls	r3, r2
 800c338:	430b      	orrs	r3, r1
 800c33a:	2014      	movs	r0, #20
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	4639      	mov	r1, r7
 800c340:	fb00 5002 	mla	r0, r0, r2, r5
	}
 800c344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800c348:	f7fe bf88 	b.w	800b25c <vListInsertEnd>
 800c34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c34e:	bf00      	nop
 800c350:	200017bc 	.word	0x200017bc
 800c354:	200017c8 	.word	0x200017c8
 800c358:	20001868 	.word	0x20001868

0800c35c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c35c:	4b04      	ldr	r3, [pc, #16]	; (800c370 <pvTaskIncrementMutexHeldCount+0x14>)
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	b11a      	cbz	r2, 800c36a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800c366:	3201      	adds	r2, #1
 800c368:	658a      	str	r2, [r1, #88]	; 0x58
		return pxCurrentTCB;
 800c36a:	6818      	ldr	r0, [r3, #0]
	}
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	200017bc 	.word	0x200017bc

0800c374 <xTaskNotifyWait>:
	{
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c378:	4c1f      	ldr	r4, [pc, #124]	; (800c3f8 <xTaskNotifyWait+0x84>)
	{
 800c37a:	461e      	mov	r6, r3
 800c37c:	4680      	mov	r8, r0
 800c37e:	460f      	mov	r7, r1
 800c380:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800c382:	f7ff f807 	bl	800b394 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d014      	beq.n	800c3ba <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c394:	ea22 0208 	bic.w	r2, r2, r8
 800c398:	65da      	str	r2, [r3, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	2101      	movs	r1, #1
 800c39e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800c3a2:	b156      	cbz	r6, 800c3ba <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff fc1d 	bl	800bbe4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800c3aa:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <xTaskNotifyWait+0x88>)
 800c3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800c3ba:	f7ff f80d 	bl	800b3d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800c3be:	f7fe ffe9 	bl	800b394 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800c3c2:	b115      	cbz	r5, 800c3ca <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c8:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c3d0:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c3d2:	bf01      	itttt	eq
 800c3d4:	6823      	ldreq	r3, [r4, #0]
 800c3d6:	6dd9      	ldreq	r1, [r3, #92]	; 0x5c
 800c3d8:	43b9      	biceq	r1, r7
 800c3da:	65d9      	streq	r1, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 800c3e2:	bf0c      	ite	eq
 800c3e4:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 800c3e6:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800c3ec:	f7fe fff4 	bl	800b3d8 <vPortExitCritical>
	}
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200017bc 	.word	0x200017bc
 800c3fc:	e000ed04 	.word	0xe000ed04

0800c400 <xTaskGenericNotify>:
	{
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	460e      	mov	r6, r1
 800c404:	4617      	mov	r7, r2
 800c406:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 800c408:	4604      	mov	r4, r0
 800c40a:	b940      	cbnz	r0, 800c41e <xTaskGenericNotify+0x1e>
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	e7fe      	b.n	800c41c <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800c41e:	f7fe ffb9 	bl	800b394 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800c422:	b10d      	cbz	r5, 800c428 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c424:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c426:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c428:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c42c:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c42e:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c430:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			switch( eAction )
 800c434:	2f04      	cmp	r7, #4
 800c436:	d816      	bhi.n	800c466 <xTaskGenericNotify+0x66>
 800c438:	e8df f007 	tbb	[pc, r7]
 800c43c:	0507030a 	.word	0x0507030a
 800c440:	11          	.byte	0x11
 800c441:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800c442:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c444:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 800c446:	65e6      	str	r6, [r4, #92]	; 0x5c
 800c448:	e002      	b.n	800c450 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 800c44a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c44c:	3301      	adds	r3, #1
 800c44e:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c450:	2d01      	cmp	r5, #1
 800c452:	d014      	beq.n	800c47e <xTaskGenericNotify+0x7e>
	{
 800c454:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 800c456:	f7fe ffbf 	bl	800b3d8 <vPortExitCritical>
	}
 800c45a:	4628      	mov	r0, r5
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c45e:	2d02      	cmp	r5, #2
 800c460:	d1f1      	bne.n	800c446 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 800c462:	2500      	movs	r5, #0
 800c464:	e7f7      	b.n	800c456 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c466:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c468:	3301      	adds	r3, #1
 800c46a:	d0f1      	beq.n	800c450 <xTaskGenericNotify+0x50>
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	e7fe      	b.n	800c47c <xTaskGenericNotify+0x7c>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c47e:	1d26      	adds	r6, r4, #4
 800c480:	4630      	mov	r0, r6
 800c482:	f7fe ff0e 	bl	800b2a2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c486:	4914      	ldr	r1, [pc, #80]	; (800c4d8 <xTaskGenericNotify+0xd8>)
 800c488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c48a:	6808      	ldr	r0, [r1, #0]
 800c48c:	fa05 f302 	lsl.w	r3, r5, r2
 800c490:	4303      	orrs	r3, r0
 800c492:	600b      	str	r3, [r1, #0]
 800c494:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <xTaskGenericNotify+0xdc>)
 800c496:	2014      	movs	r0, #20
 800c498:	fb00 3002 	mla	r0, r0, r2, r3
 800c49c:	4631      	mov	r1, r6
 800c49e:	f7fe fedd 	bl	800b25c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c4a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4a4:	b143      	cbz	r3, 800c4b8 <xTaskGenericNotify+0xb8>
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	e7fe      	b.n	800c4b6 <xTaskGenericNotify+0xb6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4b8:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <xTaskGenericNotify+0xe0>)
 800c4ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d9c7      	bls.n	800c454 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800c4c4:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <xTaskGenericNotify+0xe4>)
 800c4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	e7bf      	b.n	800c456 <xTaskGenericNotify+0x56>
 800c4d6:	bf00      	nop
 800c4d8:	20001868 	.word	0x20001868
 800c4dc:	200017c8 	.word	0x200017c8
 800c4e0:	200017bc 	.word	0x200017bc
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 800c4e8:	4b01      	ldr	r3, [pc, #4]	; (800c4f0 <BSP_PB_Callback+0x8>)
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	701a      	strb	r2, [r3, #0]
 800c4ee:	4770      	bx	lr
 800c4f0:	200018e5 	.word	0x200018e5
 800c4f4:	00000000 	.word	0x00000000

0800c4f8 <delayMicroseconds>:
}

/* USER CODE BEGIN 0 */
void delayMicroseconds(uint32_t us){
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	4604      	mov	r4, r0
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 800c4fc:	f7fc fdec 	bl	80090d8 <HAL_RCC_GetHCLKFreq>
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor freq. relative to base of 80MHz
 800c500:	ee07 0a90 	vmov	s15, r0
 800c504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c508:	eddf 7a11 	vldr	s15, [pc, #68]	; 800c550 <delayMicroseconds+0x58>
 800c50c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 800c510:	b1a4      	cbz	r4, 800c53c <delayMicroseconds+0x44>
 800c512:	ee07 4a90 	vmov	s15, r4
 800c516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c51a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c51e:	ee17 0a90 	vmov	r0, s15
 800c522:	f7fa fb73 	bl	8006c0c <__aeabi_f2d>
 800c526:	a308      	add	r3, pc, #32	; (adr r3, 800c548 <delayMicroseconds+0x50>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7fa fbc2 	bl	8006cb4 <__aeabi_dmul>
 800c530:	f7fa fe98 	bl	8007264 <__aeabi_d2uiz>
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm volatile("nop");}
 800c534:	2300      	movs	r3, #0
 800c536:	4283      	cmp	r3, r0
 800c538:	d103      	bne.n	800c542 <delayMicroseconds+0x4a>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 800c53a:	bd10      	pop	{r4, pc}
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 800c53c:	ee17 0a10 	vmov	r0, s14
 800c540:	e7ef      	b.n	800c522 <delayMicroseconds+0x2a>
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm volatile("nop");}
 800c542:	bf00      	nop
 800c544:	3301      	adds	r3, #1
 800c546:	e7f6      	b.n	800c536 <delayMicroseconds+0x3e>
 800c548:	978d4fdf 	.word	0x978d4fdf
 800c54c:	401c926e 	.word	0x401c926e
 800c550:	4c989680 	.word	0x4c989680

0800c554 <MX_BlueNRG_MS_Init>:
{
 800c554:	b530      	push	{r4, r5, lr}
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800c556:	2101      	movs	r1, #1
{
 800c558:	b08b      	sub	sp, #44	; 0x2c
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800c55a:	2000      	movs	r0, #0
 800c55c:	f002 f8fc 	bl	800e758 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800c560:	2000      	movs	r0, #0
 800c562:	f002 f8bb 	bl	800e6dc <BSP_LED_Init>
  BSP_COM_Init(COM1); 
 800c566:	2000      	movs	r0, #0
 800c568:	f002 f96c 	bl	800e844 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800c56c:	2000      	movs	r0, #0
 800c56e:	f002 f93f 	bl	800e7f0 <BSP_PB_GetState>
 800c572:	4b4a      	ldr	r3, [pc, #296]	; (800c69c <MX_BlueNRG_MS_Init+0x148>)
 800c574:	4d4a      	ldr	r5, [pc, #296]	; (800c6a0 <MX_BlueNRG_MS_Init+0x14c>)
  if (BLE_Role == CLIENT) {
 800c576:	4c4b      	ldr	r4, [pc, #300]	; (800c6a4 <MX_BlueNRG_MS_Init+0x150>)
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800c578:	b2c0      	uxtb	r0, r0
 800c57a:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 800c57c:	2100      	movs	r1, #0
 800c57e:	484a      	ldr	r0, [pc, #296]	; (800c6a8 <MX_BlueNRG_MS_Init+0x154>)
 800c580:	f7fe fb94 	bl	800acac <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 800c584:	f10d 011e 	add.w	r1, sp, #30
 800c588:	f10d 0017 	add.w	r0, sp, #23
 800c58c:	f7fe fac8 	bl	800ab20 <getBlueNRGVersion>
  hci_reset();
 800c590:	f7fe fae7 	bl	800ab62 <hci_reset>
  delayMicroseconds(100000);
 800c594:	4845      	ldr	r0, [pc, #276]	; (800c6ac <MX_BlueNRG_MS_Init+0x158>)
 800c596:	f7ff ffaf 	bl	800c4f8 <delayMicroseconds>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 800c59a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c59e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800c5a2:	4843      	ldr	r0, [pc, #268]	; (800c6b0 <MX_BlueNRG_MS_Init+0x15c>)
 800c5a4:	f005 f92e 	bl	8011804 <printf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800c5a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800c5ac:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 800c5ae:	bf84      	itt	hi
 800c5b0:	2301      	movhi	r3, #1
 800c5b2:	702b      	strbhi	r3, [r5, #0]
  if (BLE_Role == CLIENT) {
 800c5b4:	7823      	ldrb	r3, [r4, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d156      	bne.n	800c668 <MX_BlueNRG_MS_Init+0x114>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800c5ba:	22bb      	movs	r2, #187	; 0xbb
 800c5bc:	f88d 2020 	strb.w	r2, [sp, #32]
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800c5c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800c5c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800c5c8:	23e1      	movs	r3, #225	; 0xe1
 800c5ca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800c5ce:	2380      	movs	r3, #128	; 0x80
 800c5d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c5d4:	2106      	movs	r1, #6
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800c5d6:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c5d8:	aa08      	add	r2, sp, #32
 800c5da:	2000      	movs	r0, #0
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800c5dc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c5e0:	f7fe fa46 	bl	800aa70 <aci_hal_write_config_data>
  if (ret) {
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	b110      	cbz	r0, 800c5ee <MX_BlueNRG_MS_Init+0x9a>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800c5e8:	4832      	ldr	r0, [pc, #200]	; (800c6b4 <MX_BlueNRG_MS_Init+0x160>)
 800c5ea:	f005 f90b 	bl	8011804 <printf>
  ret = aci_gatt_init();    
 800c5ee:	f7fe f8a9 	bl	800a744 <aci_gatt_init>
  if (ret) {
 800c5f2:	b110      	cbz	r0, 800c5fa <MX_BlueNRG_MS_Init+0xa6>
    printf("GATT_Init failed.\n");
 800c5f4:	4830      	ldr	r0, [pc, #192]	; (800c6b8 <MX_BlueNRG_MS_Init+0x164>)
 800c5f6:	f005 f9d9 	bl	80119ac <puts>
  if (BLE_Role == SERVER) {
 800c5fa:	7820      	ldrb	r0, [r4, #0]
 800c5fc:	2801      	cmp	r0, #1
 800c5fe:	ab07      	add	r3, sp, #28
 800c600:	f10d 021a 	add.w	r2, sp, #26
 800c604:	d139      	bne.n	800c67a <MX_BlueNRG_MS_Init+0x126>
    if (bnrg_expansion_board == IDB05A1) {
 800c606:	782d      	ldrb	r5, [r5, #0]
 800c608:	2d01      	cmp	r5, #1
 800c60a:	d132      	bne.n	800c672 <MX_BlueNRG_MS_Init+0x11e>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c60c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c610:	2100      	movs	r1, #0
 800c612:	ab06      	add	r3, sp, #24
 800c614:	2207      	movs	r2, #7
 800c616:	4628      	mov	r0, r5
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c618:	f7fd ff31 	bl	800a47e <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 800c61c:	b110      	cbz	r0, 800c624 <MX_BlueNRG_MS_Init+0xd0>
    printf("GAP_Init failed.\n");
 800c61e:	4827      	ldr	r0, [pc, #156]	; (800c6bc <MX_BlueNRG_MS_Init+0x168>)
 800c620:	f005 f9c4 	bl	80119ac <puts>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800c624:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <MX_BlueNRG_MS_Init+0x16c>)
 800c626:	9302      	str	r3, [sp, #8]
 800c628:	2200      	movs	r2, #0
 800c62a:	2310      	movs	r3, #16
 800c62c:	2001      	movs	r0, #1
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	9003      	str	r0, [sp, #12]
 800c632:	9201      	str	r2, [sp, #4]
 800c634:	2307      	movs	r3, #7
 800c636:	4611      	mov	r1, r2
 800c638:	f7fd fff9 	bl	800a62e <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 800c63c:	b910      	cbnz	r0, 800c644 <MX_BlueNRG_MS_Init+0xf0>
    printf("BLE Stack Initialized.\n");
 800c63e:	4821      	ldr	r0, [pc, #132]	; (800c6c4 <MX_BlueNRG_MS_Init+0x170>)
 800c640:	f005 f9b4 	bl	80119ac <puts>
  if (BLE_Role == SERVER) {
 800c644:	7823      	ldrb	r3, [r4, #0]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d126      	bne.n	800c698 <MX_BlueNRG_MS_Init+0x144>
    printf("SERVER: BLE Stack Initialized\n");
 800c64a:	481f      	ldr	r0, [pc, #124]	; (800c6c8 <MX_BlueNRG_MS_Init+0x174>)
 800c64c:	f005 f9ae 	bl	80119ac <puts>
    ret = Add_Sample_Service();
 800c650:	f001 fcda 	bl	800e008 <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS)
 800c654:	b9f0      	cbnz	r0, 800c694 <MX_BlueNRG_MS_Init+0x140>
      printf("Service added successfully.\n");
 800c656:	481d      	ldr	r0, [pc, #116]	; (800c6cc <MX_BlueNRG_MS_Init+0x178>)
    printf("CLIENT: BLE Stack Initialized\n");
 800c658:	f005 f9a8 	bl	80119ac <puts>
  ret = aci_hal_set_tx_power_level(1,4);
 800c65c:	2104      	movs	r1, #4
 800c65e:	2001      	movs	r0, #1
 800c660:	f7fe fa38 	bl	800aad4 <aci_hal_set_tx_power_level>
}
 800c664:	b00b      	add	sp, #44	; 0x2c
 800c666:	bd30      	pop	{r4, r5, pc}
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800c668:	23aa      	movs	r3, #170	; 0xaa
 800c66a:	f88d 3020 	strb.w	r3, [sp, #32]
 800c66e:	2300      	movs	r3, #0
 800c670:	e7a6      	b.n	800c5c0 <MX_BlueNRG_MS_Init+0x6c>
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c672:	a906      	add	r1, sp, #24
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c674:	f7fd ff41 	bl	800a4fa <aci_gap_init_IDB04A1>
 800c678:	e7d0      	b.n	800c61c <MX_BlueNRG_MS_Init+0xc8>
    if (bnrg_expansion_board == IDB05A1) {
 800c67a:	7829      	ldrb	r1, [r5, #0]
 800c67c:	2901      	cmp	r1, #1
 800c67e:	d106      	bne.n	800c68e <MX_BlueNRG_MS_Init+0x13a>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c680:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c684:	2100      	movs	r1, #0
 800c686:	ab06      	add	r3, sp, #24
 800c688:	2207      	movs	r2, #7
 800c68a:	2004      	movs	r0, #4
 800c68c:	e7c4      	b.n	800c618 <MX_BlueNRG_MS_Init+0xc4>
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800c68e:	a906      	add	r1, sp, #24
 800c690:	2003      	movs	r0, #3
 800c692:	e7ef      	b.n	800c674 <MX_BlueNRG_MS_Init+0x120>
      printf("Error while adding service.\n");
 800c694:	480e      	ldr	r0, [pc, #56]	; (800c6d0 <MX_BlueNRG_MS_Init+0x17c>)
 800c696:	e7df      	b.n	800c658 <MX_BlueNRG_MS_Init+0x104>
    printf("CLIENT: BLE Stack Initialized\n");
 800c698:	480e      	ldr	r0, [pc, #56]	; (800c6d4 <MX_BlueNRG_MS_Init+0x180>)
 800c69a:	e7dd      	b.n	800c658 <MX_BlueNRG_MS_Init+0x104>
 800c69c:	2000002d 	.word	0x2000002d
 800c6a0:	200018e4 	.word	0x200018e4
 800c6a4:	2000002c 	.word	0x2000002c
 800c6a8:	0800e3dd 	.word	0x0800e3dd
 800c6ac:	000186a0 	.word	0x000186a0
 800c6b0:	0801659e 	.word	0x0801659e
 800c6b4:	080165b2 	.word	0x080165b2
 800c6b8:	080165d2 	.word	0x080165d2
 800c6bc:	080165e4 	.word	0x080165e4
 800c6c0:	0001e240 	.word	0x0001e240
 800c6c4:	080165f5 	.word	0x080165f5
 800c6c8:	0801660c 	.word	0x0801660c
 800c6cc:	0801662a 	.word	0x0801662a
 800c6d0:	08016646 	.word	0x08016646
 800c6d4:	08016662 	.word	0x08016662

0800c6d8 <MX_BlueNRG_MS_Process>:
{
 800c6d8:	b570      	push	{r4, r5, r6, lr}
  if (set_connectable) 
 800c6da:	4c22      	ldr	r4, [pc, #136]	; (800c764 <MX_BlueNRG_MS_Process+0x8c>)
 800c6dc:	7823      	ldrb	r3, [r4, #0]
{
 800c6de:	4605      	mov	r5, r0
 800c6e0:	460e      	mov	r6, r1
  if (set_connectable) 
 800c6e2:	b143      	cbz	r3, 800c6f6 <MX_BlueNRG_MS_Process+0x1e>
    Make_Connection();
 800c6e4:	f001 fcf8 	bl	800e0d8 <Make_Connection>
    set_connectable = FALSE;
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	7020      	strb	r0, [r4, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800c6ec:	f002 f880 	bl	800e7f0 <BSP_PB_GetState>
 800c6f0:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <MX_BlueNRG_MS_Process+0x90>)
 800c6f2:	b2c0      	uxtb	r0, r0
 800c6f4:	7018      	strb	r0, [r3, #0]
  if (BLE_Role == CLIENT) 
 800c6f6:	4b1d      	ldr	r3, [pc, #116]	; (800c76c <MX_BlueNRG_MS_Process+0x94>)
 800c6f8:	4c1d      	ldr	r4, [pc, #116]	; (800c770 <MX_BlueNRG_MS_Process+0x98>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b9bb      	cbnz	r3, 800c72e <MX_BlueNRG_MS_Process+0x56>
    if (connected && !end_read_tx_char_handle){
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	b32b      	cbz	r3, 800c74e <MX_BlueNRG_MS_Process+0x76>
 800c702:	4b1c      	ldr	r3, [pc, #112]	; (800c774 <MX_BlueNRG_MS_Process+0x9c>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	bb13      	cbnz	r3, 800c74e <MX_BlueNRG_MS_Process+0x76>
      startReadTXCharHandle();
 800c708:	f001 fd42 	bl	800e190 <startReadTXCharHandle>
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	b173      	cbz	r3, 800c72e <MX_BlueNRG_MS_Process+0x56>
 800c710:	4b18      	ldr	r3, [pc, #96]	; (800c774 <MX_BlueNRG_MS_Process+0x9c>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	b15b      	cbz	r3, 800c72e <MX_BlueNRG_MS_Process+0x56>
 800c716:	4b18      	ldr	r3, [pc, #96]	; (800c778 <MX_BlueNRG_MS_Process+0xa0>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	b143      	cbz	r3, 800c72e <MX_BlueNRG_MS_Process+0x56>
 800c71c:	4b17      	ldr	r3, [pc, #92]	; (800c77c <MX_BlueNRG_MS_Process+0xa4>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800c724:	b91b      	cbnz	r3, 800c72e <MX_BlueNRG_MS_Process+0x56>
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800c726:	f002 f806 	bl	800e736 <BSP_LED_Off>
      enableNotification();
 800c72a:	f001 fdbd 	bl	800e2a8 <enableNotification>
	delayMicroseconds(100000);
 800c72e:	4814      	ldr	r0, [pc, #80]	; (800c780 <MX_BlueNRG_MS_Process+0xa8>)
 800c730:	f7ff fee2 	bl	800c4f8 <delayMicroseconds>
    if (connected /*&& notification_enabled*/)
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	b133      	cbz	r3, 800c746 <MX_BlueNRG_MS_Process+0x6e>
      sendData(data, length); //data - argument (info o temp.)
 800c738:	4628      	mov	r0, r5
 800c73a:	4631      	mov	r1, r6
 800c73c:	f001 fd8c 	bl	800e258 <sendData>
      BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
 800c740:	2000      	movs	r0, #0
 800c742:	f002 f801 	bl	800e748 <BSP_LED_Toggle>
}
 800c746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  hci_user_evt_proc();
 800c74a:	f7fe bba7 	b.w	800ae9c <hci_user_evt_proc>
    else if (connected && !end_read_rx_char_handle){      
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0db      	beq.n	800c70c <MX_BlueNRG_MS_Process+0x34>
 800c754:	4b08      	ldr	r3, [pc, #32]	; (800c778 <MX_BlueNRG_MS_Process+0xa0>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1d7      	bne.n	800c70c <MX_BlueNRG_MS_Process+0x34>
      startReadRXCharHandle();
 800c75c:	f001 fd3e 	bl	800e1dc <startReadRXCharHandle>
 800c760:	e7d4      	b.n	800c70c <MX_BlueNRG_MS_Process+0x34>
 800c762:	bf00      	nop
 800c764:	2000002e 	.word	0x2000002e
 800c768:	2000002d 	.word	0x2000002d
 800c76c:	2000002c 	.word	0x2000002c
 800c770:	20001c4c 	.word	0x20001c4c
 800c774:	20001c53 	.word	0x20001c53
 800c778:	20001c52 	.word	0x20001c52
 800c77c:	20001c54 	.word	0x20001c54
 800c780:	000186a0 	.word	0x000186a0

0800c784 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d005      	beq.n	800c7a0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	2203      	movs	r2, #3
 800c79e:	4798      	blx	r3
    }
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <_ZN13DeviceManagerC1Ev>:
Timer tim6(&htim6);
Timer tim4(&htim4);
//docelowo cala tablica Timerow globalna
Timer *timers[] = {&tim7, &tim6/*, &tim4*/}; //TODO: wiecej timerow + fix tim6, tim4

DeviceManager::DeviceManager(){
 800c7aa:	b480      	push	{r7}
 800c7ac:	b083      	sub	sp, #12
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
	occupiedPinsCount = 0;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]
	usedTimersCount = 0;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	705a      	strb	r2, [r3, #1]
	hardwarePinsList[0].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c7c4:	605a      	str	r2, [r3, #4]
	hardwarePinsList[0].GPIO_Pin  = ((uint16_t)0x0010);			   //GPIO_PIN_4
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2210      	movs	r2, #16
 800c7ca:	811a      	strh	r2, [r3, #8]
	hardwarePinsList[1].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c7d2:	60da      	str	r2, [r3, #12]
	hardwarePinsList[1].GPIO_Pin  = ((uint16_t)0x0200);			   //GPIO_PIN_9
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7da:	821a      	strh	r2, [r3, #16]
	hardwarePinsList[2].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c7e2:	615a      	str	r2, [r3, #20]
	hardwarePinsList[2].GPIO_Pin  = ((uint16_t)0x0400);			   //GPIO_PIN_10
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c7ea:	831a      	strh	r2, [r3, #24]
	hardwarePinsList[3].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c7f2:	61da      	str	r2, [r3, #28]
	hardwarePinsList[3].GPIO_Pin  =	((uint16_t)0x0800); 		   //GPIO_PIN_11
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7fa:	841a      	strh	r2, [r3, #32]
	hardwarePinsList[4].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c802:	625a      	str	r2, [r3, #36]	; 0x24
	hardwarePinsList[4].GPIO_Pin  =	((uint16_t)0x1000); 		   //GPIO_PIN_12
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c80a:	851a      	strh	r2, [r3, #40]	; 0x28
	hardwarePinsList[0].occupied  = false;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	729a      	strb	r2, [r3, #10]
	hardwarePinsList[1].occupied  = false;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	749a      	strb	r2, [r3, #18]
	hardwarePinsList[2].occupied  = false;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	769a      	strb	r2, [r3, #26]
	hardwarePinsList[3].occupied  = false;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hardwarePinsList[4].occupied  = false;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <_ZN13DeviceManager14checkIfPinFreeEP7PinData>:

bool DeviceManager::checkIfPinFree(PinData *pinData){
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	GPIO_TypeDef* reqPort = pinData->GPIO_Port;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	613b      	str	r3, [r7, #16]
	uint16_t reqPin = pinData->GPIO_Pin;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	889b      	ldrh	r3, [r3, #4]
 800c850:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800c852:	2300      	movs	r3, #0
 800c854:	75fb      	strb	r3, [r7, #23]
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d825      	bhi.n	800c8a8 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6c>
			if(reqPort == hardwarePinsList[i].GPIO_Port
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	4413      	add	r3, r2
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d119      	bne.n	800c8a0 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && reqPin == hardwarePinsList[i].GPIO_Pin
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	4413      	add	r3, r2
 800c874:	891b      	ldrh	r3, [r3, #8]
 800c876:	89fa      	ldrh	r2, [r7, #14]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d111      	bne.n	800c8a0 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && hardwarePinsList[i].occupied == false){
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	4413      	add	r3, r2
 800c884:	7a9b      	ldrb	r3, [r3, #10]
 800c886:	f083 0301 	eor.w	r3, r3, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d007      	beq.n	800c8a0 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
					hardwarePinsList[i].occupied = true;
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	4413      	add	r3, r2
 800c898:	2201      	movs	r2, #1
 800c89a:	729a      	strb	r2, [r3, #10]
					return true;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e004      	b.n	800c8aa <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	75fb      	strb	r3, [r7, #23]
 800c8a6:	e7d6      	b.n	800c856 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x1a>
			}
	}
	return false;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <_ZN13DeviceManager10getFreePinEv>:

PinData* DeviceManager::getFreePin(void){
 800c8b6:	b480      	push	{r7}
 800c8b8:	b085      	sub	sp, #20
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d813      	bhi.n	800c8f0 <_ZN13DeviceManager10getFreePinEv+0x3a>
		if(hardwarePinsList[i].occupied == false)
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	4413      	add	r3, r2
 800c8d0:	7a9b      	ldrb	r3, [r3, #10]
 800c8d2:	f083 0301 	eor.w	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <_ZN13DeviceManager10getFreePinEv+0x32>
			return &hardwarePinsList[i];
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	e005      	b.n	800c8f4 <_ZN13DeviceManager10getFreePinEv+0x3e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	73fb      	strb	r3, [r7, #15]
 800c8ee:	e7e8      	b.n	800c8c2 <_ZN13DeviceManager10getFreePinEv+0xc>
	}
	//TODO
	//return new PinData();
	return &hardwarePinsList[0];
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3304      	adds	r3, #4
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <_ZN13DeviceManager17getNewTimerHandleEv>:

Timer* DeviceManager::getNewTimerHandle(void){
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	if(usedTimersCount < (sizeof(timers)/sizeof(timers[0]))){
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	785b      	ldrb	r3, [r3, #1]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d80a      	bhi.n	800c926 <_ZN13DeviceManager17getNewTimerHandleEv+0x26>
		return timers[usedTimersCount++];
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	785b      	ldrb	r3, [r3, #1]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	b2d1      	uxtb	r1, r2
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	7051      	strb	r1, [r2, #1]
 800c91c:	461a      	mov	r2, r3
 800c91e:	4b06      	ldr	r3, [pc, #24]	; (800c938 <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 800c920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c924:	e001      	b.n	800c92a <_ZN13DeviceManager17getNewTimerHandleEv+0x2a>
	}
	else{
		return timers[0]; //TODO
 800c926:	4b04      	ldr	r3, [pc, #16]	; (800c938 <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 800c928:	681b      	ldr	r3, [r3, #0]
	}
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	20000004 	.word	0x20000004

0800c93c <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>:

uint8_t DeviceManager::getUsedTimersCount(void){
	return this->usedTimersCount;
}

int DeviceManager::getTimerIndex(TIM_HandleTypeDef *htim){
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
	int timersElemNumber = (sizeof(timers)/sizeof(timers[0]));
 800c946:	2302      	movs	r3, #2
 800c948:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<timersElemNumber; i++){
 800c94a:	2300      	movs	r3, #0
 800c94c:	60fb      	str	r3, [r7, #12]
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	429a      	cmp	r2, r3
 800c954:	da15      	bge.n	800c982 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x46>
		if(htim == timers[i]->getHandle())
 800c956:	4a0e      	ldr	r2, [pc, #56]	; (800c990 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x54>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c95e:	4618      	mov	r0, r3
 800c960:	f002 f911 	bl	800eb86 <_ZN5Timer9getHandleEv>
 800c964:	4602      	mov	r2, r0
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	bf0c      	ite	eq
 800c96c:	2301      	moveq	r3, #1
 800c96e:	2300      	movne	r3, #0
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x3e>
			return i;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	e005      	b.n	800c986 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x4a>
	for(int i=0; i<timersElemNumber; i++){
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e7e5      	b.n	800c94e <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x12>
	}
	return -1; //TODO: zabezpieczyc to!
 800c982:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	20000004 	.word	0x20000004

0800c994 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fef0 	bl	800c784 <_ZNSt14_Function_baseD1Ev>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <_ZN5TimerD1Ev>:
#define TIMER_HPP

#include <stm32l4xx_hal.h>
#include <functional>

class Timer{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff ffea 	bl	800c994 <_ZNSt8functionIFvvEED1Ev>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <_Z41__static_initialization_and_destruction_0ii>:
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d11f      	bne.n	800ca1c <_Z41__static_initialization_and_destruction_0ii+0x50>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d11a      	bne.n	800ca1c <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer tim7(&htim7);
 800c9e6:	490f      	ldr	r1, [pc, #60]	; (800ca24 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c9e8:	480f      	ldr	r0, [pc, #60]	; (800ca28 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c9ea:	f002 f89e 	bl	800eb2a <_ZN5TimerC1EP17TIM_HandleTypeDef>
 800c9ee:	4a0f      	ldr	r2, [pc, #60]	; (800ca2c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c9f0:	490f      	ldr	r1, [pc, #60]	; (800ca30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800c9f2:	480d      	ldr	r0, [pc, #52]	; (800ca28 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c9f4:	f002 fae4 	bl	800efc0 <__aeabi_atexit>
Timer tim6(&htim6);
 800c9f8:	490e      	ldr	r1, [pc, #56]	; (800ca34 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800c9fa:	480f      	ldr	r0, [pc, #60]	; (800ca38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800c9fc:	f002 f895 	bl	800eb2a <_ZN5TimerC1EP17TIM_HandleTypeDef>
 800ca00:	4a0a      	ldr	r2, [pc, #40]	; (800ca2c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ca02:	490b      	ldr	r1, [pc, #44]	; (800ca30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800ca04:	480c      	ldr	r0, [pc, #48]	; (800ca38 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800ca06:	f002 fadb 	bl	800efc0 <__aeabi_atexit>
Timer tim4(&htim4);
 800ca0a:	490c      	ldr	r1, [pc, #48]	; (800ca3c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800ca0c:	480c      	ldr	r0, [pc, #48]	; (800ca40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800ca0e:	f002 f88c 	bl	800eb2a <_ZN5TimerC1EP17TIM_HandleTypeDef>
 800ca12:	4a06      	ldr	r2, [pc, #24]	; (800ca2c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ca14:	4906      	ldr	r1, [pc, #24]	; (800ca30 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800ca16:	480a      	ldr	r0, [pc, #40]	; (800ca40 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800ca18:	f002 fad2 	bl	800efc0 <__aeabi_atexit>
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	200006e0 	.word	0x200006e0
 800ca28:	200007a0 	.word	0x200007a0
 800ca2c:	20000000 	.word	0x20000000
 800ca30:	0800c9af 	.word	0x0800c9af
 800ca34:	20000720 	.word	0x20000720
 800ca38:	200007b4 	.word	0x200007b4
 800ca3c:	20000760 	.word	0x20000760
 800ca40:	200007c8 	.word	0x200007c8

0800ca44 <_GLOBAL__sub_I_htim7>:
 800ca44:	b580      	push	{r7, lr}
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca4c:	2001      	movs	r0, #1
 800ca4e:	f7ff ffbd 	bl	800c9cc <_Z41__static_initialization_and_destruction_0ii>
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ca54:	4b03      	ldr	r3, [pc, #12]	; (800ca64 <vApplicationGetIdleTaskMemory+0x10>)
 800ca56:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <vApplicationGetIdleTaskMemory+0x14>)
 800ca5a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ca5c:	2380      	movs	r3, #128	; 0x80
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	20001ae8 	.word	0x20001ae8
 800ca68:	200018e8 	.word	0x200018e8

0800ca6c <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca6c:	4b17      	ldr	r3, [pc, #92]	; (800cacc <HCI_TL_SPI_Init+0x60>)
{
 800ca6e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca72:	f042 0201 	orr.w	r2, r2, #1
 800ca76:	64da      	str	r2, [r3, #76]	; 0x4c
 800ca78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800ca7a:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca82:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800ca84:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca86:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ca88:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <HCI_TL_SPI_Init+0x64>)
 800ca8a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800ca8c:	a901      	add	r1, sp, #4
 800ca8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800ca92:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca94:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800ca96:	f7fb fdbd 	bl	8008614 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800ca9a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800ca9e:	a901      	add	r1, sp, #4
 800caa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800caa4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caa6:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caa8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caaa:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800caac:	f7fb fdb2 	bl	8008614 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800cab0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800cab2:	a901      	add	r1, sp, #4
 800cab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800cab8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caba:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cabc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cabe:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800cac0:	f7fb fda8 	bl	8008614 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 800cac4:	f001 ff4c 	bl	800e960 <BSP_SPI1_Init>
}
 800cac8:	b007      	add	sp, #28
 800caca:	bd30      	pop	{r4, r5, pc}
 800cacc:	40021000 	.word	0x40021000
 800cad0:	10110000 	.word	0x10110000

0800cad4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800cad4:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800cad6:	2101      	movs	r1, #1
 800cad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cadc:	f7fb fe76 	bl	80087cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800cae0:	2102      	movs	r1, #2
 800cae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cae6:	f7fb fe71 	bl	80087cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800caea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800caee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800caf2:	f7fb fe6b 	bl	80087cc <HAL_GPIO_DeInit>
  return 0;
}
 800caf6:	2000      	movs	r0, #0
 800caf8:	bd08      	pop	{r3, pc}

0800cafa <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800cafa:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800cafc:	2200      	movs	r2, #0
 800cafe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb06:	f7fb fef1 	bl	80088ec <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800cb0a:	2005      	movs	r0, #5
 800cb0c:	f7fb fcf6 	bl	80084fc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800cb10:	2201      	movs	r2, #1
 800cb12:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb1a:	f7fb fee7 	bl	80088ec <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800cb1e:	2005      	movs	r0, #5
 800cb20:	f7fb fcec 	bl	80084fc <HAL_Delay>
  return 0;
}  
 800cb24:	2000      	movs	r0, #0
 800cb26:	bd08      	pop	{r3, pc}

0800cb28 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2a:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800cb2c:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 800cb2e:	23ff      	movs	r3, #255	; 0xff
 800cb30:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800cb34:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800cb36:	230b      	movs	r3, #11
{
 800cb38:	4607      	mov	r7, r0
 800cb3a:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800cb3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb40:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800cb42:	f88d 3008 	strb.w	r3, [sp, #8]
 800cb46:	f88d 4009 	strb.w	r4, [sp, #9]
 800cb4a:	f88d 400a 	strb.w	r4, [sp, #10]
 800cb4e:	f88d 400b 	strb.w	r4, [sp, #11]
 800cb52:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800cb56:	f7fb fec9 	bl	80088ec <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800cb5a:	2205      	movs	r2, #5
 800cb5c:	a904      	add	r1, sp, #16
 800cb5e:	a802      	add	r0, sp, #8
 800cb60:	f001 fec6 	bl	800e8f0 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800cb64:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d122      	bne.n	800cbb2 <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800cb6c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800cb70:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 800cb74:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 800cb78:	d007      	beq.n	800cb8a <HCI_TL_SPI_Receive+0x62>
 800cb7a:	42ae      	cmp	r6, r5
 800cb7c:	bf28      	it	cs
 800cb7e:	462e      	movcs	r6, r5
 800cb80:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 800cb82:	42b5      	cmp	r5, r6
 800cb84:	f104 0401 	add.w	r4, r4, #1
 800cb88:	d308      	bcc.n	800cb9c <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	2102      	movs	r1, #2
 800cb8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb92:	f7fb feab 	bl	80088ec <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 800cb96:	4628      	mov	r0, r5
 800cb98:	b007      	add	sp, #28
 800cb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	f10d 0107 	add.w	r1, sp, #7
 800cba2:	f10d 0006 	add.w	r0, sp, #6
 800cba6:	f001 fea3 	bl	800e8f0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800cbaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cbae:	557b      	strb	r3, [r7, r5]
 800cbb0:	e7e6      	b.n	800cb80 <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 800cbb2:	4625      	mov	r5, r4
 800cbb4:	e7e9      	b.n	800cb8a <HCI_TL_SPI_Receive+0x62>
	...

0800cbb8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800cbb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800cbbc:	230a      	movs	r3, #10
 800cbbe:	f88d 3000 	strb.w	r3, [sp]
 800cbc2:	2300      	movs	r3, #0
{  
 800cbc4:	4607      	mov	r7, r0
 800cbc6:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800cbc8:	f88d 3001 	strb.w	r3, [sp, #1]
 800cbcc:	f88d 3002 	strb.w	r3, [sp, #2]
 800cbd0:	f88d 3003 	strb.w	r3, [sp, #3]
 800cbd4:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800cbd8:	f7fb fc8a 	bl	80084f0 <HAL_GetTick>
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800cbdc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800cc48 <HCI_TL_SPI_Send+0x90>
  uint32_t tickstart = HAL_GetTick();
 800cbe0:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2102      	movs	r1, #2
 800cbe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cbea:	f7fb fe7f 	bl	80088ec <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800cbee:	2205      	movs	r2, #5
 800cbf0:	a902      	add	r1, sp, #8
 800cbf2:	4668      	mov	r0, sp
 800cbf4:	f001 fe7c 	bl	800e8f0 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 800cbf8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d11a      	bne.n	800cc36 <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 800cc00:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cc04:	42ab      	cmp	r3, r5
 800cc06:	d319      	bcc.n	800cc3c <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800cc08:	462a      	mov	r2, r5
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f001 fe6f 	bl	800e8f0 <BSP_SPI1_SendRecv>
    result = 0;
 800cc12:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800cc14:	2201      	movs	r2, #1
 800cc16:	2102      	movs	r1, #2
 800cc18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cc1c:	f7fb fe66 	bl	80088ec <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800cc20:	f7fb fc66 	bl	80084f0 <HAL_GetTick>
 800cc24:	1b80      	subs	r0, r0, r6
 800cc26:	280f      	cmp	r0, #15
 800cc28:	d80b      	bhi.n	800cc42 <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 800cc2a:	2c00      	cmp	r4, #0
 800cc2c:	d1d9      	bne.n	800cbe2 <HCI_TL_SPI_Send+0x2a>
  
  return result;
}
 800cc2e:	4620      	mov	r0, r4
 800cc30:	b004      	add	sp, #16
 800cc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = -1;
 800cc36:	f04f 34ff 	mov.w	r4, #4294967295
 800cc3a:	e7eb      	b.n	800cc14 <HCI_TL_SPI_Send+0x5c>
        result = -2;
 800cc3c:	f06f 0401 	mvn.w	r4, #1
 800cc40:	e7e8      	b.n	800cc14 <HCI_TL_SPI_Send+0x5c>
      result = -3;
 800cc42:	f06f 0402 	mvn.w	r4, #2
  return result;
 800cc46:	e7f2      	b.n	800cc2e <HCI_TL_SPI_Send+0x76>
 800cc48:	20001b4c 	.word	0x20001b4c

0800cc4c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800cc4c:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800cc4e:	2101      	movs	r1, #1
 800cc50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cc54:	f7fb fe44 	bl	80088e0 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d104      	bne.n	800cc66 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	f7fe f93d 	bl	800aedc <hci_notify_asynch_evt>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	d0f3      	beq.n	800cc4e <hci_tl_lowlevel_isr+0x2>
 800cc66:	bd08      	pop	{r3, pc}

0800cc68 <hci_tl_lowlevel_init>:
{
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 800cc6c:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <hci_tl_lowlevel_init+0x4c>)
 800cc6e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800cc70:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <hci_tl_lowlevel_init+0x50>)
 800cc72:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800cc74:	4b11      	ldr	r3, [pc, #68]	; (800ccbc <hci_tl_lowlevel_init+0x54>)
 800cc76:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800cc78:	4b11      	ldr	r3, [pc, #68]	; (800ccc0 <hci_tl_lowlevel_init+0x58>)
 800cc7a:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800cc7c:	4c11      	ldr	r4, [pc, #68]	; (800ccc4 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 800cc7e:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <hci_tl_lowlevel_init+0x60>)
 800cc80:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 800cc82:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 800cc84:	4b11      	ldr	r3, [pc, #68]	; (800cccc <hci_tl_lowlevel_init+0x64>)
 800cc86:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 800cc88:	f7fe f83a 	bl	800ad00 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800cc8c:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7fb fca1 	bl	80085d8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800cc96:	4a0e      	ldr	r2, [pc, #56]	; (800ccd0 <hci_tl_lowlevel_init+0x68>)
 800cc98:	2100      	movs	r1, #0
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f7fb fc96 	bl	80085cc <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800cca0:	2200      	movs	r2, #0
 800cca2:	4611      	mov	r1, r2
 800cca4:	2006      	movs	r0, #6
 800cca6:	f7fb fc4f 	bl	8008548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800ccaa:	2006      	movs	r0, #6
 800ccac:	f7fb fc80 	bl	80085b0 <HAL_NVIC_EnableIRQ>
}
 800ccb0:	b008      	add	sp, #32
 800ccb2:	bd10      	pop	{r4, pc}
 800ccb4:	0800ca6d 	.word	0x0800ca6d
 800ccb8:	0800cad5 	.word	0x0800cad5
 800ccbc:	0800cbb9 	.word	0x0800cbb9
 800ccc0:	0800cb29 	.word	0x0800cb29
 800ccc4:	20001e84 	.word	0x20001e84
 800ccc8:	0800cafb 	.word	0x0800cafb
 800cccc:	0800e919 	.word	0x0800e919
 800ccd0:	0800cc4d 	.word	0x0800cc4d

0800ccd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ccd4:	b5b0      	push	{r4, r5, r7, lr}
 800ccd6:	b08e      	sub	sp, #56	; 0x38
 800ccd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ccda:	f7fb fbe7 	bl	80084ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ccde:	f000 f845 	bl	800cd6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cce2:	f000 f903 	bl	800ceec <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800cce6:	f000 f8cd 	bl	800ce84 <_Z19MX_USART3_UART_Initv>
  MX_BlueNRG_MS_Init();
 800ccea:	f7ff fc33 	bl	800c554 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM7_Init();
 800ccee:	f000 f985 	bl	800cffc <_ZL12MX_TIM7_Initv>
  MX_TIM6_Init();
 800ccf2:	f000 f9c3 	bl	800d07c <_ZL12MX_TIM6_Initv>
  MX_TIM4_Init();
 800ccf6:	f000 fa01 	bl	800d0fc <_ZL12MX_TIM4_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  binarySem = xSemaphoreCreateBinary();
 800ccfa:	2203      	movs	r2, #3
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	2001      	movs	r0, #1
 800cd00:	f7fe fd18 	bl	800b734 <xQueueGenericCreate>
 800cd04:	4602      	mov	r2, r0
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <main+0x84>)
 800cd08:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800cd0a:	4b14      	ldr	r3, [pc, #80]	; (800cd5c <main+0x88>)
 800cd0c:	f107 041c 	add.w	r4, r7, #28
 800cd10:	461d      	mov	r5, r3
 800cd12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800cd1e:	f107 031c 	add.w	r3, r7, #28
 800cd22:	2100      	movs	r1, #0
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe f970 	bl	800b00a <osThreadCreate>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	4b0c      	ldr	r3, [pc, #48]	; (800cd60 <main+0x8c>)
 800cd2e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readoutTask, ReadoutTask, osPriorityNormal, 0, 256);
 800cd30:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <main+0x90>)
 800cd32:	463c      	mov	r4, r7
 800cd34:	461d      	mov	r5, r3
 800cd36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readoutTaskHandle = osThreadCreate(osThread(readoutTask), NULL);
 800cd42:	463b      	mov	r3, r7
 800cd44:	2100      	movs	r1, #0
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe f95f 	bl	800b00a <osThreadCreate>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	4b06      	ldr	r3, [pc, #24]	; (800cd68 <main+0x94>)
 800cd50:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cd52:	f7fe f955 	bl	800b000 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cd56:	e7fe      	b.n	800cd56 <main+0x82>
 800cd58:	20000864 	.word	0x20000864
 800cd5c:	08015c98 	.word	0x08015c98
 800cd60:	2000085c 	.word	0x2000085c
 800cd64:	08015cc0 	.word	0x08015cc0
 800cd68:	20000860 	.word	0x20000860

0800cd6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b0b8      	sub	sp, #224	; 0xe0
 800cd70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cd72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cd76:	2244      	movs	r2, #68	; 0x44
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f004 fd2e 	bl	80117dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cd80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	605a      	str	r2, [r3, #4]
 800cd8a:	609a      	str	r2, [r3, #8]
 800cd8c:	60da      	str	r2, [r3, #12]
 800cd8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cd90:	463b      	mov	r3, r7
 800cd92:	2288      	movs	r2, #136	; 0x88
 800cd94:	2100      	movs	r1, #0
 800cd96:	4618      	mov	r0, r3
 800cd98:	f004 fd20 	bl	80117dc <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cda2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cda6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cdaa:	2310      	movs	r3, #16
 800cdac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800cdc2:	230a      	movs	r3, #10
 800cdc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800cdc8:	2307      	movs	r3, #7
 800cdca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800cdce:	2302      	movs	r3, #2
 800cdd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cdda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fb fe5e 	bl	8008aa0 <HAL_RCC_OscConfig>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bf14      	ite	ne
 800cdea:	2301      	movne	r3, #1
 800cdec:	2300      	moveq	r3, #0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800cdf4:	f000 fbf4 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cdf8:	230f      	movs	r3, #15
 800cdfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ce04:	2300      	movs	r3, #0
 800ce06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ce16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ce1a:	2104      	movs	r1, #4
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fc f8c5 	bl	8008fac <HAL_RCC_ClockConfig>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	bf14      	ite	ne
 800ce28:	2301      	movne	r3, #1
 800ce2a:	2300      	moveq	r3, #0
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800ce32:	f000 fbd5 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800ce36:	2306      	movs	r3, #6
 800ce38:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce42:	463b      	mov	r3, r7
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fc faab 	bl	80093a0 <HAL_RCCEx_PeriphCLKConfig>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	bf14      	ite	ne
 800ce50:	2301      	movne	r3, #1
 800ce52:	2300      	moveq	r3, #0
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800ce5a:	f000 fbc1 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800ce5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce62:	f7fb fd57 	bl	8008914 <HAL_PWREx_ControlVoltageScaling>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bf14      	ite	ne
 800ce6c:	2301      	movne	r3, #1
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 800ce76:	f000 fbb3 	bl	800d5e0 <_Z13Error_Handlerv>
  }
}
 800ce7a:	bf00      	nop
 800ce7c:	37e0      	adds	r7, #224	; 0xe0
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
	...

0800ce84 <_Z19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ce88:	4b16      	ldr	r3, [pc, #88]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ce8a:	4a17      	ldr	r2, [pc, #92]	; (800cee8 <_Z19MX_USART3_UART_Initv+0x64>)
 800ce8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ce8e:	4b15      	ldr	r3, [pc, #84]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ce90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ce94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ce96:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ce9c:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800cea2:	4b10      	ldr	r3, [pc, #64]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800cea8:	4b0e      	ldr	r3, [pc, #56]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ceaa:	220c      	movs	r2, #12
 800ceac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ceae:	4b0d      	ldr	r3, [pc, #52]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ceb4:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ceba:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cec0:	4b08      	ldr	r3, [pc, #32]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800cec6:	4807      	ldr	r0, [pc, #28]	; (800cee4 <_Z19MX_USART3_UART_Initv+0x60>)
 800cec8:	f7fd faab 	bl	800a422 <HAL_UART_Init>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bf14      	ite	ne
 800ced2:	2301      	movne	r3, #1
 800ced4:	2300      	moveq	r3, #0
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <_Z19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800cedc:	f000 fb80 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800cee0:	bf00      	nop
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	200007dc 	.word	0x200007dc
 800cee8:	40004800 	.word	0x40004800

0800ceec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cef2:	f107 0314 	add.w	r3, r7, #20
 800cef6:	2200      	movs	r2, #0
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	605a      	str	r2, [r3, #4]
 800cefc:	609a      	str	r2, [r3, #8]
 800cefe:	60da      	str	r2, [r3, #12]
 800cf00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf02:	4a3a      	ldr	r2, [pc, #232]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf04:	4b39      	ldr	r3, [pc, #228]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf08:	f043 0304 	orr.w	r3, r3, #4
 800cf0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf0e:	4b37      	ldr	r3, [pc, #220]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf12:	f003 0304 	and.w	r3, r3, #4
 800cf16:	613b      	str	r3, [r7, #16]
 800cf18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf1a:	4a34      	ldr	r2, [pc, #208]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf1c:	4b33      	ldr	r3, [pc, #204]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf26:	4b31      	ldr	r3, [pc, #196]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf32:	4a2e      	ldr	r2, [pc, #184]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf34:	4b2d      	ldr	r3, [pc, #180]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf38:	f043 0301 	orr.w	r3, r3, #1
 800cf3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf3e:	4b2b      	ldr	r3, [pc, #172]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	60bb      	str	r3, [r7, #8]
 800cf48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf4a:	4a28      	ldr	r2, [pc, #160]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf4c:	4b27      	ldr	r3, [pc, #156]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf50:	f043 0302 	orr.w	r3, r3, #2
 800cf54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cf56:	4b25      	ldr	r3, [pc, #148]	; (800cfec <_ZL12MX_GPIO_Initv+0x100>)
 800cf58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf5a:	f003 0302 	and.w	r3, r3, #2
 800cf5e:	607b      	str	r3, [r7, #4]
 800cf60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800cf62:	2200      	movs	r2, #0
 800cf64:	f44f 7191 	mov.w	r1, #290	; 0x122
 800cf68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cf6c:	f7fb fcbe 	bl	80088ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800cf70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cf76:	4b1e      	ldr	r3, [pc, #120]	; (800cff0 <_ZL12MX_GPIO_Initv+0x104>)
 800cf78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800cf7e:	f107 0314 	add.w	r3, r7, #20
 800cf82:	4619      	mov	r1, r3
 800cf84:	481b      	ldr	r0, [pc, #108]	; (800cff4 <_ZL12MX_GPIO_Initv+0x108>)
 800cf86:	f7fb fb45 	bl	8008614 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cf8e:	4b1a      	ldr	r3, [pc, #104]	; (800cff8 <_ZL12MX_GPIO_Initv+0x10c>)
 800cf90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf96:	f107 0314 	add.w	r3, r7, #20
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cfa0:	f7fb fb38 	bl	8008614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 800cfa4:	f44f 7391 	mov.w	r3, #290	; 0x122
 800cfa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfb6:	f107 0314 	add.w	r3, r7, #20
 800cfba:	4619      	mov	r1, r3
 800cfbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cfc0:	f7fb fb28 	bl	8008614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2105      	movs	r1, #5
 800cfc8:	2006      	movs	r0, #6
 800cfca:	f7fb fabd 	bl	8008548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800cfce:	2006      	movs	r0, #6
 800cfd0:	f7fb faee 	bl	80085b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2105      	movs	r1, #5
 800cfd8:	2028      	movs	r0, #40	; 0x28
 800cfda:	f7fb fab5 	bl	8008548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cfde:	2028      	movs	r0, #40	; 0x28
 800cfe0:	f7fb fae6 	bl	80085b0 <HAL_NVIC_EnableIRQ>

}
 800cfe4:	bf00      	nop
 800cfe6:	3728      	adds	r7, #40	; 0x28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	40021000 	.word	0x40021000
 800cff0:	10210000 	.word	0x10210000
 800cff4:	48000800 	.word	0x48000800
 800cff8:	10110000 	.word	0x10110000

0800cffc <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */
  /* USER CODE END TIM7_Init 0 */
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d002:	1d3b      	adds	r3, r7, #4
 800d004:	2200      	movs	r2, #0
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	605a      	str	r2, [r3, #4]
 800d00a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM7_Init 1 */
  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800d00c:	4b19      	ldr	r3, [pc, #100]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d00e:	4a1a      	ldr	r2, [pc, #104]	; (800d078 <_ZL12MX_TIM7_Initv+0x7c>)
 800d010:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800d012:	4b18      	ldr	r3, [pc, #96]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d014:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800d018:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d01a:	4b16      	ldr	r3, [pc, #88]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800d020:	4b14      	ldr	r3, [pc, #80]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d022:	2209      	movs	r2, #9
 800d024:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d026:	4b13      	ldr	r3, [pc, #76]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d028:	2200      	movs	r2, #0
 800d02a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800d02c:	4811      	ldr	r0, [pc, #68]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d02e:	f7fc fed9 	bl	8009de4 <HAL_TIM_Base_Init>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf14      	ite	ne
 800d038:	2301      	movne	r3, #1
 800d03a:	2300      	moveq	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800d042:	f000 facd 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d04a:	2300      	movs	r3, #0
 800d04c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800d04e:	1d3b      	adds	r3, r7, #4
 800d050:	4619      	mov	r1, r3
 800d052:	4808      	ldr	r0, [pc, #32]	; (800d074 <_ZL12MX_TIM7_Initv+0x78>)
 800d054:	f7fc fee0 	bl	8009e18 <HAL_TIMEx_MasterConfigSynchronization>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bf14      	ite	ne
 800d05e:	2301      	movne	r3, #1
 800d060:	2300      	moveq	r3, #0
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800d068:	f000 faba 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /* USER CODE END TIM7_Init 2 */
}
 800d06c:	bf00      	nop
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	200006e0 	.word	0x200006e0
 800d078:	40001400 	.word	0x40001400

0800d07c <_ZL12MX_TIM6_Initv>:

static void MX_TIM6_Init(void) //TODO: check&fix
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d082:	1d3b      	adds	r3, r7, #4
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	605a      	str	r2, [r3, #4]
 800d08a:	609a      	str	r2, [r3, #8]
  htim6.Instance = TIM6;
 800d08c:	4b19      	ldr	r3, [pc, #100]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d08e:	4a1a      	ldr	r2, [pc, #104]	; (800d0f8 <_ZL12MX_TIM6_Initv+0x7c>)
 800d090:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800d092:	4b18      	ldr	r3, [pc, #96]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d094:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800d098:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d09a:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800d0a0:	4b14      	ldr	r3, [pc, #80]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d0a2:	2209      	movs	r2, #9
 800d0a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0a6:	4b13      	ldr	r3, [pc, #76]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d0ac:	4811      	ldr	r0, [pc, #68]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d0ae:	f7fc fe99 	bl	8009de4 <HAL_TIM_Base_Init>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	bf14      	ite	ne
 800d0b8:	2301      	movne	r3, #1
 800d0ba:	2300      	moveq	r3, #0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800d0c2:	f000 fa8d 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d0ce:	1d3b      	adds	r3, r7, #4
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4808      	ldr	r0, [pc, #32]	; (800d0f4 <_ZL12MX_TIM6_Initv+0x78>)
 800d0d4:	f7fc fea0 	bl	8009e18 <HAL_TIMEx_MasterConfigSynchronization>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	bf14      	ite	ne
 800d0de:	2301      	movne	r3, #1
 800d0e0:	2300      	moveq	r3, #0
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800d0e8:	f000 fa7a 	bl	800d5e0 <_Z13Error_Handlerv>
  }
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20000720 	.word	0x20000720
 800d0f8:	40001000 	.word	0x40001000

0800d0fc <_ZL12MX_TIM4_Initv>:

static void MX_TIM4_Init(void) //TODO: check&fix
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d102:	1d3b      	adds	r3, r7, #4
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	605a      	str	r2, [r3, #4]
 800d10a:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 800d10c:	4b19      	ldr	r3, [pc, #100]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d10e:	4a1a      	ldr	r2, [pc, #104]	; (800d178 <_ZL12MX_TIM4_Initv+0x7c>)
 800d110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 800d112:	4b18      	ldr	r3, [pc, #96]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d114:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800d118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d11a:	4b16      	ldr	r3, [pc, #88]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 800d120:	4b14      	ldr	r3, [pc, #80]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d122:	2209      	movs	r2, #9
 800d124:	60da      	str	r2, [r3, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d126:	4b13      	ldr	r3, [pc, #76]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d128:	2200      	movs	r2, #0
 800d12a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800d12c:	4811      	ldr	r0, [pc, #68]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d12e:	f7fc fe59 	bl	8009de4 <HAL_TIM_Base_Init>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	bf14      	ite	ne
 800d138:	2301      	movne	r3, #1
 800d13a:	2300      	moveq	r3, #0
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <_ZL12MX_TIM4_Initv+0x4a>
  {
    Error_Handler();
 800d142:	f000 fa4d 	bl	800d5e0 <_Z13Error_Handlerv>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d146:	2300      	movs	r3, #0
 800d148:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d14e:	1d3b      	adds	r3, r7, #4
 800d150:	4619      	mov	r1, r3
 800d152:	4808      	ldr	r0, [pc, #32]	; (800d174 <_ZL12MX_TIM4_Initv+0x78>)
 800d154:	f7fc fe60 	bl	8009e18 <HAL_TIMEx_MasterConfigSynchronization>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	bf14      	ite	ne
 800d15e:	2301      	movne	r3, #1
 800d160:	2300      	moveq	r3, #0
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 800d168:	f000 fa3a 	bl	800d5e0 <_Z13Error_Handlerv>
  }
}
 800d16c:	bf00      	nop
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	20000760 	.word	0x20000760
 800d178:	40000800 	.word	0x40000800

0800d17c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		//wyslij sygnal do taska drivera zeby pryzgotowal dane (ew. parametry = zmienne globalne?)
		xTaskNotify(readoutTaskHandle, 0x01, eSetBits); //a domyslnie kolejka (queue) requestow
 800d184:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <_Z16StartDefaultTaskPKv+0x4c>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	2201      	movs	r2, #1
 800d18c:	2101      	movs	r1, #1
 800d18e:	f7ff f937 	bl	800c400 <xTaskGenericNotify>

		TickType_t maxBlockTime = pdMS_TO_TICKS(300UL);
 800d192:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d196:	60fb      	str	r3, [r7, #12]
		xSemaphoreTake(binarySem, maxBlockTime);
 800d198:	4b0c      	ldr	r3, [pc, #48]	; (800d1cc <_Z16StartDefaultTaskPKv+0x50>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fb3f 	bl	800b824 <xQueueSemaphoreTake>
		//zeby tu dojsc, musial byc oddany semafor
		HAL_UART_Transmit(&huart3, (uint8_t *)"notified\r\n", 10, 10);
 800d1a6:	230a      	movs	r3, #10
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	4909      	ldr	r1, [pc, #36]	; (800d1d0 <_Z16StartDefaultTaskPKv+0x54>)
 800d1ac:	4809      	ldr	r0, [pc, #36]	; (800d1d4 <_Z16StartDefaultTaskPKv+0x58>)
 800d1ae:	f7fd f8b0 	bl	800a312 <HAL_UART_Transmit>
		MX_BlueNRG_MS_Process(data, 5);
 800d1b2:	2105      	movs	r1, #5
 800d1b4:	4808      	ldr	r0, [pc, #32]	; (800d1d8 <_Z16StartDefaultTaskPKv+0x5c>)
 800d1b6:	f7ff fa8f 	bl	800c6d8 <MX_BlueNRG_MS_Process>

		osDelay(delayTime);
 800d1ba:	4b08      	ldr	r3, [pc, #32]	; (800d1dc <_Z16StartDefaultTaskPKv+0x60>)
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd ff4b 	bl	800b05a <osDelay>
	}
 800d1c4:	e7de      	b.n	800d184 <_Z16StartDefaultTaskPKv+0x8>
 800d1c6:	bf00      	nop
 800d1c8:	20000860 	.word	0x20000860
 800d1cc:	20000864 	.word	0x20000864
 800d1d0:	08015cdc 	.word	0x08015cdc
 800d1d4:	200007dc 	.word	0x200007dc
 800d1d8:	200008cc 	.word	0x200008cc
 800d1dc:	2000001c 	.word	0x2000001c

0800d1e0 <_Z11ReadoutTaskPKv>:
	/* USER CODE END 5 */
}

/* USER CODE BEGIN 6 */
void ReadoutTask(void const * argument){
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
	uint32_t notifValue;
	/* Infinite loop */
	for (;;) {
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 800d1e8:	f107 020c 	add.w	r2, r7, #12
 800d1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f0:	21ff      	movs	r1, #255	; 0xff
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	f7ff f8be 	bl	800c374 <xTaskNotifyWait>
		if ((notifValue & 0x01) != 0x00){
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0f2      	beq.n	800d1e8 <_Z11ReadoutTaskPKv+0x8>
			tempSensor1.startNewReadout();
 800d202:	4802      	ldr	r0, [pc, #8]	; (800d20c <_Z11ReadoutTaskPKv+0x2c>)
 800d204:	f000 fef4 	bl	800dff0 <_ZN13OneWireSensor15startNewReadoutEv>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 800d208:	e7ee      	b.n	800d1e8 <_Z11ReadoutTaskPKv+0x8>
 800d20a:	bf00      	nop
 800d20c:	20000894 	.word	0x20000894

0800d210 <_ZN13OneWireDriver17firstStateHandlerEv>:
			//tempSensor2.startNewReadout();
		}
	}
}

void OneWireDriver::firstStateHandler(void){
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
//std::function<void()> OneWireDriver::firstStateHandler{
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"First state!\r\n", 14, 10);
 800d218:	230a      	movs	r3, #10
 800d21a:	220e      	movs	r2, #14
 800d21c:	490e      	ldr	r1, [pc, #56]	; (800d258 <_ZN13OneWireDriver17firstStateHandlerEv+0x48>)
 800d21e:	480f      	ldr	r0, [pc, #60]	; (800d25c <_ZN13OneWireDriver17firstStateHandlerEv+0x4c>)
 800d220:	f7fd f877 	bl	800a312 <HAL_UART_Transmit>
	this->changePinMode(ONE_WIRE_OUTPUT);
 800d224:	2100      	movs	r1, #0
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fb24 	bl	800d874 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	this->writePin(0);
 800d22c:	2100      	movs	r1, #0
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fb46 	bl	800d8c0 <_ZN13OneWireDriver8writePinEb>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::secondStateHandler;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a0a      	ldr	r2, [pc, #40]	; (800d260 <_ZN13OneWireDriver17firstStateHandlerEv+0x50>)
 800d238:	330c      	adds	r3, #12
 800d23a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d23e:	e883 0003 	stmia.w	r3, {r0, r1}
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(800);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d24a:	4618      	mov	r0, r3
 800d24c:	f001 fca7 	bl	800eb9e <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	08015ce8 	.word	0x08015ce8
 800d25c:	200007dc 	.word	0x200007dc
 800d260:	08015cf8 	.word	0x08015cf8

0800d264 <_ZN13OneWireDriver18secondStateHandlerEv>:

void OneWireDriver::secondStateHandler(void){
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"Second state!\r\n", 15, 10);
 800d26c:	230a      	movs	r3, #10
 800d26e:	220f      	movs	r2, #15
 800d270:	490e      	ldr	r1, [pc, #56]	; (800d2ac <_ZN13OneWireDriver18secondStateHandlerEv+0x48>)
 800d272:	480f      	ldr	r0, [pc, #60]	; (800d2b0 <_ZN13OneWireDriver18secondStateHandlerEv+0x4c>)
 800d274:	f7fd f84d 	bl	800a312 <HAL_UART_Transmit>
	this->writePin(1);
 800d278:	2101      	movs	r1, #1
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fb20 	bl	800d8c0 <_ZN13OneWireDriver8writePinEb>
	this->changePinMode(ONE_WIRE_INPUT);
 800d280:	2101      	movs	r1, #1
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 faf6 	bl	800d874 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::thirdStateHandler;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a0a      	ldr	r2, [pc, #40]	; (800d2b4 <_ZN13OneWireDriver18secondStateHandlerEv+0x50>)
 800d28c:	330c      	adds	r3, #12
 800d28e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d292:	e883 0003 	stmia.w	r3, {r0, r1}
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(10);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	210a      	movs	r1, #10
 800d29c:	4618      	mov	r0, r3
 800d29e:	f001 fc7e 	bl	800eb9e <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 800d2a2:	bf00      	nop
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08015d00 	.word	0x08015d00
 800d2b0:	200007dc 	.word	0x200007dc
 800d2b4:	08015d10 	.word	0x08015d10

0800d2b8 <_ZN13OneWireDriver17thirdStateHandlerEv>:

void OneWireDriver::thirdStateHandler(void){
 800d2b8:	b590      	push	{r4, r7, lr}
 800d2ba:	b099      	sub	sp, #100	; 0x64
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	while(this->readPin()); //kolejne state'y
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fb16 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d000      	beq.n	800d2ce <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
 800d2cc:	e7f8      	b.n	800d2c0 <_ZN13OneWireDriver17thirdStateHandlerEv+0x8>
	while(!this->readPin());//..
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fb0f 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f083 0301 	eor.w	r3, r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d000      	beq.n	800d2e2 <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
 800d2e0:	e7f5      	b.n	800d2ce <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
	while(this->readPin());
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fb05 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d000      	beq.n	800d2f0 <_ZN13OneWireDriver17thirdStateHandlerEv+0x38>
 800d2ee:	e7f8      	b.n	800d2e2 <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
	uint32_t rawBits = 0UL;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t checksumBits = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	//glowna czesc - odczyt danych i sumy kontrolnej
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 800d2fa:	231f      	movs	r3, #31
 800d2fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d300:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d304:	2b00      	cmp	r3, #0
 800d306:	db29      	blt.n	800d35c <_ZN13OneWireDriver17thirdStateHandlerEv+0xa4>
		 * Bit data "1" signal: the level is LOW for 50ms and HIGH for 70ms;
		 * MAX FREQUENCY ON STM32L476RG = 80MHz
		 * SO IT TAKES 12,5 ns FOR ONE INSTRUCTION TO EXECUTE
		 * A DELAY OF 1 SECOND (x TICKS): 80 MILLION NOP INSTRUCTIONS TO EXECUTE
		 */
		while (!this->readPin());
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 faf2 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d30e:	4603      	mov	r3, r0
 800d310:	f083 0301 	eor.w	r3, r3, #1
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b00      	cmp	r3, #0
 800d318:	d000      	beq.n	800d31c <_ZN13OneWireDriver17thirdStateHandlerEv+0x64>
 800d31a:	e7f5      	b.n	800d308 <_ZN13OneWireDriver17thirdStateHandlerEv+0x50>
		delayMicroseconds(50);
 800d31c:	2032      	movs	r0, #50	; 0x32
 800d31e:	f000 f8e7 	bl	800d4f0 <_Z17delayMicrosecondsm>
		if (this->readPin()) {
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 fae5 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d007      	beq.n	800d33e <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
			rawBits |= (1UL << i);
 800d32e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d332:	2201      	movs	r2, #1
 800d334:	fa02 f303 	lsl.w	r3, r2, r3
 800d338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d33a:	4313      	orrs	r3, r2
 800d33c:	657b      	str	r3, [r7, #84]	; 0x54
		}
		while (this->readPin());
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fad7 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d000      	beq.n	800d34c <_ZN13OneWireDriver17thirdStateHandlerEv+0x94>
 800d34a:	e7f8      	b.n	800d33e <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 800d34c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d350:	b2db      	uxtb	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d35a:	e7d1      	b.n	800d300 <_ZN13OneWireDriver17thirdStateHandlerEv+0x48>
	}
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 800d35c:	2307      	movs	r3, #7
 800d35e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d362:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800d366:	2b00      	cmp	r3, #0
 800d368:	db2d      	blt.n	800d3c6 <_ZN13OneWireDriver17thirdStateHandlerEv+0x10e>
		while (!this->readPin());
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fac1 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d370:	4603      	mov	r3, r0
 800d372:	f083 0301 	eor.w	r3, r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d000      	beq.n	800d37e <_ZN13OneWireDriver17thirdStateHandlerEv+0xc6>
 800d37c:	e7f5      	b.n	800d36a <_ZN13OneWireDriver17thirdStateHandlerEv+0xb2>
		delayMicroseconds(50);
 800d37e:	2032      	movs	r0, #50	; 0x32
 800d380:	f000 f8b6 	bl	800d4f0 <_Z17delayMicrosecondsm>
		if (this->readPin()) {
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fab4 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00b      	beq.n	800d3a8 <_ZN13OneWireDriver17thirdStateHandlerEv+0xf0>
			checksumBits |= (1UL << i);
 800d390:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800d394:	2201      	movs	r2, #1
 800d396:	fa02 f303 	lsl.w	r3, r2, r3
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		}
		while (this->readPin());
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 faa2 	bl	800d8f2 <_ZN13OneWireDriver7readPinEv>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d000      	beq.n	800d3b6 <_ZN13OneWireDriver17thirdStateHandlerEv+0xfe>
 800d3b4:	e7f8      	b.n	800d3a8 <_ZN13OneWireDriver17thirdStateHandlerEv+0xf0>
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 800d3b6:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d3c4:	e7cd      	b.n	800d362 <_ZN13OneWireDriver17thirdStateHandlerEv+0xaa>
	}
	uint8_t data[5];
	data[0] = (rawBits >> 24) & 0xFF;//Copy raw data bits to an array of bytes
 800d3c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c8:	0e1b      	lsrs	r3, r3, #24
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (rawBits >> 16) & 0xFF;
 800d3d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d2:	0c1b      	lsrs	r3, r3, #16
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (rawBits >> 8) & 0xFF;
 800d3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3dc:	0a1b      	lsrs	r3, r3, #8
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (rawBits >> 0) & 0xFF;
 800d3e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (checksumBits) & 0xFF;
 800d3ec:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d3f0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	uint16_t humid = (data[0] << 8) | data[1];
 800d3f4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d3f8:	021b      	lsls	r3, r3, #8
 800d3fa:	b21a      	sxth	r2, r3
 800d3fc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d400:	b21b      	sxth	r3, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	b21b      	sxth	r3, r3
 800d406:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t temp = (data[2] << 8) | data[3];
 800d40a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	b21a      	sxth	r2, r3
 800d412:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d416:	b21b      	sxth	r3, r3
 800d418:	4313      	orrs	r3, r2
 800d41a:	b21b      	sxth	r3, r3
 800d41c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t humidDecimal = humid % 10;
 800d420:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800d424:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 800d426:	fba3 1302 	umull	r1, r3, r3, r2
 800d42a:	08d9      	lsrs	r1, r3, #3
 800d42c:	460b      	mov	r3, r1
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	440b      	add	r3, r1
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t tempDecimal = temp % 10;
 800d43a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d43e:	4b26      	ldr	r3, [pc, #152]	; (800d4d8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 800d440:	fba3 1302 	umull	r1, r3, r3, r2
 800d444:	08d9      	lsrs	r1, r3, #3
 800d446:	460b      	mov	r3, r1
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	440b      	add	r3, r1
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	temp = temp / (uint16_t) 10;
 800d454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d458:	4a1f      	ldr	r2, [pc, #124]	; (800d4d8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 800d45a:	fba2 2303 	umull	r2, r3, r2, r3
 800d45e:	08db      	lsrs	r3, r3, #3
 800d460:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	humid = humid / (uint16_t) 10;
 800d464:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d468:	4a1b      	ldr	r2, [pc, #108]	; (800d4d8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 800d46a:	fba2 2303 	umull	r2, r3, r2, r3
 800d46e:	08db      	lsrs	r3, r3, #3
 800d470:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	char uartData[50];
	sprintf(uartData, "\r\nTemperatura\t %hu.%huC\r\nWilgotnosc\t %hu.%hu%%\r\n",
 800d474:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800d478:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 800d47c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d480:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
			temp, tempDecimal, humid, humidDecimal);
 800d484:	f107 0010 	add.w	r0, r7, #16
 800d488:	9201      	str	r2, [sp, #4]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	4623      	mov	r3, r4
 800d48e:	460a      	mov	r2, r1
 800d490:	4912      	ldr	r1, [pc, #72]	; (800d4dc <_ZN13OneWireDriver17thirdStateHandlerEv+0x224>)
 800d492:	f004 fc6f 	bl	8011d74 <sprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)uartData, /*sizeof(uartData)*/ 42, 10);
 800d496:	f107 0110 	add.w	r1, r7, #16
 800d49a:	230a      	movs	r3, #10
 800d49c:	222a      	movs	r2, #42	; 0x2a
 800d49e:	4810      	ldr	r0, [pc, #64]	; (800d4e0 <_ZN13OneWireDriver17thirdStateHandlerEv+0x228>)
 800d4a0:	f7fc ff37 	bl	800a312 <HAL_UART_Transmit>
	//powiadom glowny task ze juz zakonczyla sie cala robota
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(binarySem, &xHigherPriorityTaskWoken);
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <_ZN13OneWireDriver17thirdStateHandlerEv+0x22c>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f107 020c 	add.w	r2, r7, #12
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe f962 	bl	800b77c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <_ZN13OneWireDriver17thirdStateHandlerEv+0x216>
 800d4be:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <_ZN13OneWireDriver17thirdStateHandlerEv+0x230>)
 800d4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	f3bf 8f6f 	isb	sy
}
 800d4ce:	bf00      	nop
 800d4d0:	375c      	adds	r7, #92	; 0x5c
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd90      	pop	{r4, r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	cccccccd 	.word	0xcccccccd
 800d4dc:	08015d18 	.word	0x08015d18
 800d4e0:	200007dc 	.word	0x200007dc
 800d4e4:	20000864 	.word	0x20000864
 800d4e8:	e000ed04 	.word	0xe000ed04
 800d4ec:	00000000 	.word	0x00000000

0800d4f0 <_Z17delayMicrosecondsm>:

void delayMicroseconds(uint32_t us){
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 800d4f8:	f7fb fdee 	bl	80090d8 <HAL_RCC_GetHCLKFreq>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	613b      	str	r3, [r7, #16]
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor freq. relative to base of 80MHz
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	ee07 3a90 	vmov	s15, r3
 800d506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d50a:	eddf 6a23 	vldr	s13, [pc, #140]	; 800d598 <_Z17delayMicrosecondsm+0xa8>
 800d50e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d512:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d019      	beq.n	800d550 <_Z17delayMicrosecondsm+0x60>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	ee07 3a90 	vmov	s15, r3
 800d522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d526:	edd7 7a03 	vldr	s15, [r7, #12]
 800d52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52e:	ee17 0a90 	vmov	r0, s15
 800d532:	f7f9 fb6b 	bl	8006c0c <__aeabi_f2d>
 800d536:	a316      	add	r3, pc, #88	; (adr r3, 800d590 <_Z17delayMicrosecondsm+0xa0>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f7f9 fbba 	bl	8006cb4 <__aeabi_dmul>
 800d540:	4603      	mov	r3, r0
 800d542:	460c      	mov	r4, r1
 800d544:	4618      	mov	r0, r3
 800d546:	4621      	mov	r1, r4
 800d548:	f7f9 fe8c 	bl	8007264 <__aeabi_d2uiz>
 800d54c:	4603      	mov	r3, r0
 800d54e:	e00e      	b.n	800d56e <_Z17delayMicrosecondsm+0x7e>
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7f9 fb5b 	bl	8006c0c <__aeabi_f2d>
 800d556:	a30e      	add	r3, pc, #56	; (adr r3, 800d590 <_Z17delayMicrosecondsm+0xa0>)
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	f7f9 fbaa 	bl	8006cb4 <__aeabi_dmul>
 800d560:	4603      	mov	r3, r0
 800d562:	460c      	mov	r4, r1
 800d564:	4618      	mov	r0, r3
 800d566:	4621      	mov	r1, r4
 800d568:	f7f9 fe7c 	bl	8007264 <__aeabi_d2uiz>
 800d56c:	4603      	mov	r3, r0
 800d56e:	60bb      	str	r3, [r7, #8]
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm volatile("nop");}
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d204      	bcs.n	800d586 <_Z17delayMicrosecondsm+0x96>
 800d57c:	bf00      	nop
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	3301      	adds	r3, #1
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	e7f6      	b.n	800d574 <_Z17delayMicrosecondsm+0x84>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 800d586:	bf00      	nop
 800d588:	371c      	adds	r7, #28
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd90      	pop	{r4, r7, pc}
 800d58e:	bf00      	nop
 800d590:	978d4fdf 	.word	0x978d4fdf
 800d594:	401c926e 	.word	0x401c926e
 800d598:	4c989680 	.word	0x4c989680

0800d59c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a0a      	ldr	r2, [pc, #40]	; (800d5d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d102      	bne.n	800d5b4 <HAL_TIM_PeriodElapsedCallback+0x18>
	HAL_IncTick();
 800d5ae:	f7fa ff93 	bl	80084d8 <HAL_IncTick>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d5b2:	e00a      	b.n	800d5ca <HAL_TIM_PeriodElapsedCallback+0x2e>
	  timers[deviceManager.getTimerIndex(htim)]->executeCallback(); //a w nim ExecuteState urzadzenia
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800d5b8:	f7ff f9c0 	bl	800c93c <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	4b07      	ldr	r3, [pc, #28]	; (800d5dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800d5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f001 fad1 	bl	800eb6c <_ZN5Timer15executeCallbackEv>
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	40000400 	.word	0x40000400
 800d5d8:	20000868 	.word	0x20000868
 800d5dc:	20000004 	.word	0x20000004

0800d5e0 <_Z13Error_Handlerv>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, (uint8_t *)"Error Handler!\r\n", 20, 10);
 800d5e4:	230a      	movs	r3, #10
 800d5e6:	2214      	movs	r2, #20
 800d5e8:	4902      	ldr	r1, [pc, #8]	; (800d5f4 <_Z13Error_Handlerv+0x14>)
 800d5ea:	4803      	ldr	r0, [pc, #12]	; (800d5f8 <_Z13Error_Handlerv+0x18>)
 800d5ec:	f7fc fe91 	bl	800a312 <HAL_UART_Transmit>
  /* USER CODE END Error_Handler_Debug */
}
 800d5f0:	bf00      	nop
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	08015d4c 	.word	0x08015d4c
 800d5f8:	200007dc 	.word	0x200007dc

0800d5fc <_Z41__static_initialization_and_destruction_0ii>:
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d10f      	bne.n	800d62c <_Z41__static_initialization_and_destruction_0ii+0x30>
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d612:	4293      	cmp	r3, r2
 800d614:	d10a      	bne.n	800d62c <_Z41__static_initialization_and_destruction_0ii+0x30>
DeviceManager deviceManager;
 800d616:	4807      	ldr	r0, [pc, #28]	; (800d634 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800d618:	f7ff f8c7 	bl	800c7aa <_ZN13DeviceManagerC1Ev>
OneWireSensor tempSensor1(&sensor1Data);
 800d61c:	4906      	ldr	r1, [pc, #24]	; (800d638 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800d61e:	4807      	ldr	r0, [pc, #28]	; (800d63c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800d620:	f000 fcd7 	bl	800dfd2 <_ZN13OneWireSensorC1EP7PinData>
OneWireSensor tempSensor2(&sensor2Data);
 800d624:	4906      	ldr	r1, [pc, #24]	; (800d640 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800d626:	4807      	ldr	r0, [pc, #28]	; (800d644 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800d628:	f000 fcd3 	bl	800dfd2 <_ZN13OneWireSensorC1EP7PinData>
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	20000868 	.word	0x20000868
 800d638:	2000000c 	.word	0x2000000c
 800d63c:	20000894 	.word	0x20000894
 800d640:	20000014 	.word	0x20000014
 800d644:	200008b0 	.word	0x200008b0

0800d648 <_GLOBAL__sub_I_huart3>:
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d650:	2001      	movs	r0, #1
 800d652:	f7ff ffd3 	bl	800d5fc <_Z41__static_initialization_and_destruction_0ii>
 800d656:	bd80      	pop	{r7, pc}

0800d658 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4618      	mov	r0, r3
 800d664:	370c      	adds	r7, #12
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d66e:	b480      	push	{r7}
 800d670:	b083      	sub	sp, #12
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() : _M_manager(nullptr) { }
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	609a      	str	r2, [r3, #8]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <_ZN13GenericDriver17firstStateHandlerEv>:
class GenericDriver { //klasa abstrakcyjna?
protected:
	PinData *pinData;
	Timer *timer;
//	StateHandler stateHandler; //TODO: ?stateHandler powinien nalezec do klady bazowej
	virtual void firstStateHandler(void) {};
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <_ZN13GenericDriver18secondStateHandlerEv>:
	virtual void secondStateHandler(void) {};
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <_ZN13GenericDriver17thirdStateHandlerEv>:
	virtual void thirdStateHandler(void) {};
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <_ZN13GenericDriverC1EP7PinData>:
public:
	GenericDriver(PinData *pinData) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
 800d6e6:	4a0f      	ldr	r2, [pc, #60]	; (800d724 <_ZN13GenericDriverC1EP7PinData+0x48>)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	601a      	str	r2, [r3, #0]
		if(deviceManager.checkIfPinFree(pinData)){
 800d6ec:	6839      	ldr	r1, [r7, #0]
 800d6ee:	480e      	ldr	r0, [pc, #56]	; (800d728 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 800d6f0:	f7ff f8a4 	bl	800c83c <_ZN13DeviceManager14checkIfPinFreeEP7PinData>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <_ZN13GenericDriverC1EP7PinData+0x26>
			this->pinData = pinData;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	605a      	str	r2, [r3, #4]
 800d700:	e005      	b.n	800d70e <_ZN13GenericDriverC1EP7PinData+0x32>
		}
		else {
			this->pinData = deviceManager.getFreePin();
 800d702:	4809      	ldr	r0, [pc, #36]	; (800d728 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 800d704:	f7ff f8d7 	bl	800c8b6 <_ZN13DeviceManager10getFreePinEv>
 800d708:	4602      	mov	r2, r0
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	605a      	str	r2, [r3, #4]
		}
		this->timer = deviceManager.getNewTimerHandle();
 800d70e:	4806      	ldr	r0, [pc, #24]	; (800d728 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 800d710:	f7ff f8f6 	bl	800c900 <_ZN13DeviceManager17getNewTimerHandleEv>
 800d714:	4602      	mov	r2, r0
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	609a      	str	r2, [r3, #8]
	};
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4618      	mov	r0, r3
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	080166a0 	.word	0x080166a0
 800d728:	20000868 	.word	0x20000868

0800d72c <_ZN13GenericDriver18driverStartReadoutEv>:
	virtual void driverStartReadout(void) {};//= 0; //chyba nie abstrakcyjna
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <_ZN13GenericDriver12executeStateEv>:
	virtual void executeState(void) {};//= 0;
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <_ZSt7forwardIRP13OneWireDriverEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4618      	mov	r0, r3
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
	...

0800d76c <_ZN13OneWireDriverC1EP7PinData>:
#include "one_wire_driver.hpp"

OneWireDriver::OneWireDriver(PinData *pinData) : GenericDriver(pinData) {
 800d76c:	b590      	push	{r4, r7, lr}
 800d76e:	b08d      	sub	sp, #52	; 0x34
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff ffae 	bl	800d6dc <_ZN13GenericDriverC1EP7PinData>
 800d780:	4a1e      	ldr	r2, [pc, #120]	; (800d7fc <_ZN13OneWireDriverC1EP7PinData+0x90>)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
	this->timer->registerCallback(std::bind(&OneWireDriver::executeState, this));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	689c      	ldr	r4, [r3, #8]
 800d78a:	4a1d      	ldr	r2, [pc, #116]	; (800d800 <_ZN13OneWireDriverC1EP7PinData+0x94>)
 800d78c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d790:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d794:	e883 0003 	stmia.w	r3, {r0, r1}
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d79c:	f107 0318 	add.w	r3, r7, #24
 800d7a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d7a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 f922 	bl	800d9f2 <_ZSt4bindIM13OneWireDriverFvvEJPS0_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISA_EEE5valueES8_JDpT0_EE4typeEOS8_DpOSF_>
 800d7ae:	f107 0218 	add.w	r2, r7, #24
 800d7b2:	f107 0308 	add.w	r3, r7, #8
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f9fb 	bl	800dbb4 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_>
 800d7be:	f107 0308 	add.w	r3, r7, #8
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f001 f9c2 	bl	800eb4e <_ZN5Timer16registerCallbackESt8functionIFvvEE>
 800d7ca:	f107 0308 	add.w	r3, r7, #8
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff f8e0 	bl	800c994 <_ZNSt8functionIFvvEED1Ev>
	this->stateHandler = &OneWireDriver::firstStateHandler;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	60da      	str	r2, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	611a      	str	r2, [r3, #16]
};
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	e007      	b.n	800d7f4 <_ZN13OneWireDriverC1EP7PinData+0x88>
	this->timer->registerCallback(std::bind(&OneWireDriver::executeState, this));
 800d7e4:	f107 0308 	add.w	r3, r7, #8
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f8d3 	bl	800c994 <_ZNSt8functionIFvvEED1Ev>
 800d7ee:	e7ff      	b.n	800d7f0 <_ZN13OneWireDriverC1EP7PinData+0x84>
 800d7f0:	f001 fd70 	bl	800f2d4 <__cxa_end_cleanup>
};
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3734      	adds	r7, #52	; 0x34
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}
 800d7fc:	08015d68 	.word	0x08015d68
 800d800:	08015da4 	.word	0x08015da4

0800d804 <_ZN13OneWireDriver18driverStartReadoutEv>:

void OneWireDriver::driverStartReadout(void){
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	this->stateHandler = &OneWireDriver::firstStateHandler;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	60da      	str	r2, [r3, #12]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	611a      	str	r2, [r3, #16]
	this->executeState();
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3310      	adds	r3, #16
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	4798      	blx	r3
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <_ZN13OneWireDriver12executeStateEv>:

void OneWireDriver::executeState(void){
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	(this->*stateHandler)();
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <_ZN13OneWireDriver12executeStateEv+0x1a>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	e00a      	b.n	800d85c <_ZN13OneWireDriver12executeStateEv+0x30>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	105b      	asrs	r3, r3, #1
 800d84c:	461a      	mov	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4413      	add	r3, r2
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	68d2      	ldr	r2, [r2, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	6912      	ldr	r2, [r2, #16]
 800d860:	1052      	asrs	r2, r2, #1
 800d862:	4611      	mov	r1, r2
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	440a      	add	r2, r1
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
}
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <_ZN13OneWireDriver13changePinModeE11oneWireMode>:

void OneWireDriver::changePinMode(oneWireMode mode){
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	460b      	mov	r3, r1
 800d87e:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = this->pinData->GPIO_Pin;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	889b      	ldrh	r3, [r3, #4]
 800d886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d888:	2300      	movs	r3, #0
 800d88a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	617b      	str	r3, [r7, #20]
	if(mode == ONE_WIRE_OUTPUT){
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x28>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d896:	2301      	movs	r3, #1
 800d898:	613b      	str	r3, [r7, #16]
 800d89a:	e004      	b.n	800d8a6 <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
	}
	else if(mode == ONE_WIRE_INPUT){
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d101      	bne.n	800d8a6 <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(this->pinData->GPIO_Port, &GPIO_InitStruct);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f107 020c 	add.w	r2, r7, #12
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fa feae 	bl	8008614 <HAL_GPIO_Init>
};
 800d8b8:	bf00      	nop
 800d8ba:	3720      	adds	r7, #32
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <_ZN13OneWireDriver8writePinEb>:

void OneWireDriver::writePin(bool state){
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	6818      	ldr	r0, [r3, #0]
					  this->pinData->GPIO_Pin,
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 800d8d6:	8899      	ldrh	r1, [r3, #4]
 800d8d8:	78fb      	ldrb	r3, [r7, #3]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <_ZN13OneWireDriver8writePinEb+0x22>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <_ZN13OneWireDriver8writePinEb+0x24>
 800d8e2:	2300      	movs	r3, #0
					  state == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	f7fb f801 	bl	80088ec <HAL_GPIO_WritePin>
}
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <_ZN13OneWireDriver7readPinEv>:

bool OneWireDriver::readPin(void){
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
	return (1&HAL_GPIO_ReadPin(this->pinData->GPIO_Port, this->pinData->GPIO_Pin));
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	889b      	ldrh	r3, [r3, #4]
 800d906:	4619      	mov	r1, r3
 800d908:	4610      	mov	r0, r2
 800d90a:	f7fa ffe9 	bl	80088e0 <HAL_GPIO_ReadPin>
 800d90e:	4603      	mov	r3, r0
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	2b00      	cmp	r3, #0
 800d916:	bf14      	ite	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	2300      	moveq	r3, #0
 800d91c:	b2db      	uxtb	r3, r3
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <_ZNSt14unary_functionIP13OneWireDrivervEC1Ev>:
   */
  /**
   *  This is one of the @link functors functor base classes@endlink.
   */
  template<typename _Arg, typename _Result>
    struct unary_function
 800d926:	b480      	push	{r7}
 800d928:	b083      	sub	sp, #12
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4618      	mov	r0, r3
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <_ZNSt31_Maybe_unary_or_binary_functionIvJP13OneWireDriverEEC1Ev>:
    struct _Maybe_unary_or_binary_function<_Res, _T1>
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff ffee 	bl	800d926 <_ZNSt14unary_functionIP13OneWireDrivervEC1Ev>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <_ZNSt12_Mem_fn_baseIM13OneWireDriverFvvELb1EEC1ES2_>:
      _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	1d3b      	adds	r3, r7, #4
 800d95e:	e883 0006 	stmia.w	r3, {r1, r2}
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7ff ffea 	bl	800d93c <_ZNSt31_Maybe_unary_or_binary_functionIvJP13OneWireDriverEEC1Ev>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	461a      	mov	r2, r3
 800d96c:	1d3b      	adds	r3, r7, #4
 800d96e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d972:	e882 0003 	stmia.w	r2, {r0, r1}
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <_ZNSt7_Mem_fnIM13OneWireDriverFvvEEC1ES2_>:
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	1d3b      	adds	r3, r7, #4
 800d98a:	e883 0006 	stmia.w	r3, {r1, r2}
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	1d3b      	adds	r3, r7, #4
 800d992:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d996:	f7ff ffdd 	bl	800d954 <_ZNSt12_Mem_fn_baseIM13OneWireDriverFvvELb1EEC1ES2_>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <_ZNSt26_Maybe_wrap_member_pointerIM13OneWireDriverFvvEE9__do_wrapES2_>:
      __do_wrap(_Tp _Class::* __pm)
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	1d3b      	adds	r3, r7, #4
 800d9ae:	e883 0006 	stmia.w	r3, {r1, r2}
      { return type(__pm); }
 800d9b2:	1d3b      	adds	r3, r7, #4
 800d9b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f7ff ffe1 	bl	800d980 <_ZNSt7_Mem_fnIM13OneWireDriverFvvEEC1ES2_>
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <_ZSt7forwardIM13OneWireDriverFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <_ZSt4bindIM13OneWireDriverFvvEJPS0_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISA_EEE5valueES8_JDpT0_EE4typeEOS8_DpOSF_>:
    bind(_Func&& __f, _BoundArgs&&... __args)
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b086      	sub	sp, #24
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	60f8      	str	r0, [r7, #12]
 800d9fa:	60b9      	str	r1, [r7, #8]
 800d9fc:	607a      	str	r2, [r7, #4]
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
 800d9fe:	68b8      	ldr	r0, [r7, #8]
 800da00:	f7ff ffe1 	bl	800d9c6 <_ZSt7forwardIM13OneWireDriverFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800da04:	4602      	mov	r2, r0
 800da06:	f107 0310 	add.w	r3, r7, #16
 800da0a:	ca06      	ldmia	r2, {r1, r2}
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff ffc9 	bl	800d9a4 <_ZNSt26_Maybe_wrap_member_pointerIM13OneWireDriverFvvEE9__do_wrapES2_>
			   std::forward<_BoundArgs>(__args)...);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7ff ffe2 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800da18:	4602      	mov	r2, r0
 800da1a:	f107 0310 	add.w	r3, r7, #16
 800da1e:	4619      	mov	r1, r3
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 f91f 	bl	800dc64 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEC1IJS5_EEEOS4_DpOT_>
    }
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <_ZSt4moveIRSt7_Mem_fnIM13OneWireDriverFvvEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800da2e:	b480      	push	{r7}
 800da30:	b083      	sub	sp, #12
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4618      	mov	r0, r3
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <_ZSt4moveIRSt5tupleIJP13OneWireDriverEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4618      	mov	r0, r3
 800da50:	370c      	adds	r7, #12
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <_ZNSt22_Maybe_get_result_typeISt7_Mem_fnIM13OneWireDriverFvvEEvEC1Ev>:
    struct _Maybe_get_result_type<_Functor,
 800da5a:	b480      	push	{r7}
 800da5c:	b083      	sub	sp, #12
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <_ZNSt22_Weak_result_type_implISt7_Mem_fnIM13OneWireDriverFvvEEEC1Ev>:
    struct _Weak_result_type_impl
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff ffee 	bl	800da5a <_ZNSt22_Maybe_get_result_typeISt7_Mem_fnIM13OneWireDriverFvvEEvEC1Ev>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <_ZNSt17_Weak_result_typeISt7_Mem_fnIM13OneWireDriverFvvEEEC1Ev>:
    struct _Weak_result_type
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ffed 	bl	800da70 <_ZNSt22_Weak_result_type_implISt7_Mem_fnIM13OneWireDriverFvvEEEC1Ev>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <_ZNSt10_Head_baseILj0EP13OneWireDriverLb0EE7_M_headERS2_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEE7_M_headERS2_>:
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff ffed 	bl	800daa0 <_ZNSt10_Head_baseILj0EP13OneWireDriverLb0EE7_M_headERS2_>
 800dac6:	4603      	mov	r3, r0
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <_ZNSt10_Head_baseILj0EP13OneWireDriverLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800dada:	6838      	ldr	r0, [r7, #0]
 800dadc:	f7ff ff7e 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800dae0:	4603      	mov	r3, r0
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEEC1EOS2_>:
	: _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
 800daf2:	b590      	push	{r4, r7, lr}
 800daf4:	b083      	sub	sp, #12
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	6039      	str	r1, [r7, #0]
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800dafc:	687c      	ldr	r4, [r7, #4]
 800dafe:	6838      	ldr	r0, [r7, #0]
 800db00:	f7ff ffd9 	bl	800dab6 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEE7_M_headERS2_>
 800db04:	4603      	mov	r3, r0
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff ff68 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800db0c:	4603      	mov	r3, r0
 800db0e:	4619      	mov	r1, r3
 800db10:	4620      	mov	r0, r4
 800db12:	f7ff ffdd 	bl	800dad0 <_ZNSt10_Head_baseILj0EP13OneWireDriverLb0EEC1IS1_EEOT_>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd90      	pop	{r4, r7, pc}

0800db20 <_ZNSt5tupleIJP13OneWireDriverEEC1EOS2_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default; 
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff ffde 	bl	800daf2 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEEC1EOS2_>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEC1EOS7_>:
      _Bind(_Bind&& __b)
 800db40:	b590      	push	{r4, r7, lr}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff ff9c 	bl	800da88 <_ZNSt17_Weak_result_typeISt7_Mem_fnIM13OneWireDriverFvvEEEC1Ev>
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff ff6b 	bl	800da2e <_ZSt4moveIRSt7_Mem_fnIM13OneWireDriverFvvEEEONSt16remove_referenceIT_E4typeEOS7_>
 800db58:	4602      	mov	r2, r0
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db60:	e883 0003 	stmia.w	r3, {r0, r1}
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f103 0408 	add.w	r4, r3, #8
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	3308      	adds	r3, #8
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff ff68 	bl	800da44 <_ZSt4moveIRSt5tupleIJP13OneWireDriverEEEONSt16remove_referenceIT_E4typeEOS6_>
 800db74:	4603      	mov	r3, r0
 800db76:	4619      	mov	r1, r3
 800db78:	4620      	mov	r0, r4
 800db7a:	f7ff ffd1 	bl	800db20 <_ZNSt5tupleIJP13OneWireDriverEEC1EOS2_>
      { }
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	bd90      	pop	{r4, r7, pc}

0800db88 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>:
    struct _Maybe_unary_or_binary_function { };
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4618      	mov	r0, r3
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <_ZSt4moveIRSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS2_EEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 800dbb4:	b590      	push	{r4, r7, lr}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ffe2 	bl	800db88 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fd5c 	bl	800d684 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 800dbcc:	6838      	ldr	r0, [r7, #0]
 800dbce:	f000 f86b 	bl	800dca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE21_M_not_empty_functionIS9_EEbRKT_>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00e      	beq.n	800dbf6 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_+0x42>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800dbd8:	687c      	ldr	r4, [r7, #4]
 800dbda:	6838      	ldr	r0, [r7, #0]
 800dbdc:	f7ff ffdf 	bl	800db9e <_ZSt4moveIRSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS2_EEEONSt16remove_referenceIT_E4typeEOSB_>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 f86a 	bl	800dcbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE15_M_init_functorERSt9_Any_dataOS9_>
	    _M_invoker = &_My_handler::_M_invoke;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a08      	ldr	r2, [pc, #32]	; (800dc10 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_+0x5c>)
 800dbee:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a08      	ldr	r2, [pc, #32]	; (800dc14 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_+0x60>)
 800dbf4:	609a      	str	r2, [r3, #8]
	  }
      }
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	e005      	b.n	800dc06 <_ZNSt8functionIFvvEEC1ISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS5_EEvvEET_+0x52>
      : _Function_base()
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fdc1 	bl	800c784 <_ZNSt14_Function_baseD1Ev>
 800dc02:	f001 fb67 	bl	800f2d4 <__cxa_end_cleanup>
      }
 800dc06:	4618      	mov	r0, r3
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd90      	pop	{r4, r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	0800dce3 	.word	0x0800dce3
 800dc14:	0800dd01 	.word	0x0800dd01

0800dc18 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEEC1IS1_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800dc18:	b590      	push	{r4, r7, lr}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800dc22:	687c      	ldr	r4, [r7, #4]
 800dc24:	6838      	ldr	r0, [r7, #0]
 800dc26:	f7ff fed9 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7ff ff4e 	bl	800dad0 <_ZNSt10_Head_baseILj0EP13OneWireDriverLb0EEC1IS1_EEOT_>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd90      	pop	{r4, r7, pc}

0800dc3e <_ZNSt5tupleIJP13OneWireDriverEEC1IJS1_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 800dc3e:	b590      	push	{r4, r7, lr}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 800dc48:	687c      	ldr	r4, [r7, #4]
 800dc4a:	6838      	ldr	r0, [r7, #0]
 800dc4c:	f7ff fec6 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc50:	4603      	mov	r3, r0
 800dc52:	4619      	mov	r1, r3
 800dc54:	4620      	mov	r0, r4
 800dc56:	f7ff ffdf 	bl	800dc18 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEEC1IS1_EEOT_>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd90      	pop	{r4, r7, pc}

0800dc64 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEC1IJS5_EEEOS4_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 800dc64:	b590      	push	{r4, r7, lr}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7ff ff09 	bl	800da88 <_ZNSt17_Weak_result_typeISt7_Mem_fnIM13OneWireDriverFvvEEEC1Ev>
 800dc76:	68b8      	ldr	r0, [r7, #8]
 800dc78:	f7ff fed9 	bl	800da2e <_ZSt4moveIRSt7_Mem_fnIM13OneWireDriverFvvEEEONSt16remove_referenceIT_E4typeEOS7_>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc84:	e883 0003 	stmia.w	r3, {r0, r1}
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f103 0408 	add.w	r4, r3, #8
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff fea4 	bl	800d9dc <_ZSt7forwardIP13OneWireDriverEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc94:	4603      	mov	r3, r0
 800dc96:	4619      	mov	r1, r3
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff ffd0 	bl	800dc3e <_ZNSt5tupleIJP13OneWireDriverEEC1IJS1_ELb1EEEDpOT_>
	{ }
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd90      	pop	{r4, r7, pc}

0800dca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	  { return true; }
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	370c      	adds	r7, #12
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE15_M_init_functorERSt9_Any_dataOS9_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800dcbe:	b590      	push	{r4, r7, lr}
 800dcc0:	b085      	sub	sp, #20
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
 800dcc6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	f7ff ff68 	bl	800db9e <_ZSt4moveIRSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS2_EEEONSt16remove_referenceIT_E4typeEOSB_>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f84d 	bl	800dd74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>
 800dcda:	bf00      	nop
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}

0800dce2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f85e 	bl	800ddac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE14_M_get_pointerERKSt9_Any_data>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 f870 	bl	800ddd8 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEclIJEvEET0_DpOT_>
      }
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dd00:	b5b0      	push	{r4, r5, r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	d827      	bhi.n	800dd64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x64>
 800dd14:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x1c>)
 800dd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1a:	bf00      	nop
 800dd1c:	0800dd2d 	.word	0x0800dd2d
 800dd20:	0800dd3b 	.word	0x0800dd3b
 800dd24:	0800dd4f 	.word	0x0800dd4f
 800dd28:	0800dd5b 	.word	0x0800dd5b
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f863 	bl	800ddf8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800dd32:	4602      	mov	r2, r0
 800dd34:	4b0e      	ldr	r3, [pc, #56]	; (800dd70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x70>)
 800dd36:	6013      	str	r3, [r2, #0]
	      break;
 800dd38:	e014      	b.n	800dd64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f000 f868 	bl	800de10 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERT_v>
 800dd40:	4604      	mov	r4, r0
 800dd42:	68b8      	ldr	r0, [r7, #8]
 800dd44:	f000 f832 	bl	800ddac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE14_M_get_pointerERKSt9_Any_data>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	6023      	str	r3, [r4, #0]
	      break;
 800dd4c:	e00a      	b.n	800dd64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 800dd4e:	462a      	mov	r2, r5
 800dd50:	68b9      	ldr	r1, [r7, #8]
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 f868 	bl	800de28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>
	      break;
 800dd58:	e004      	b.n	800dd64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f000 f881 	bl	800de64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 800dd62:	bf00      	nop
	  return false;
 800dd64:	2300      	movs	r3, #0
	}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	080166b4 	.word	0x080166b4

0800dd74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 800dd74:	b5b0      	push	{r4, r5, r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800dd80:	68b8      	ldr	r0, [r7, #8]
 800dd82:	f7ff ff0c 	bl	800db9e <_ZSt4moveIRSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS2_EEEONSt16remove_referenceIT_E4typeEOSB_>
 800dd86:	4605      	mov	r5, r0
 800dd88:	200c      	movs	r0, #12
 800dd8a:	f001 f91f 	bl	800efcc <_Znwj>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	461c      	mov	r4, r3
 800dd92:	4629      	mov	r1, r5
 800dd94:	4620      	mov	r0, r4
 800dd96:	f7ff fed3 	bl	800db40 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEC1EOS7_>
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f000 f838 	bl	800de10 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERT_v>
 800dda0:	4603      	mov	r3, r0
 800dda2:	601c      	str	r4, [r3, #0]
 800dda4:	bf00      	nop
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bdb0      	pop	{r4, r5, r7, pc}

0800ddac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 f867 	bl	800de88 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERKT_v>
 800ddba:	4603      	mov	r3, r0
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
	}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800ddca:	b480      	push	{r7}
 800ddcc:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800ddce:	4618      	mov	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 800ddd8:	b590      	push	{r4, r7, lr}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 800dde0:	f7ff fff3 	bl	800ddca <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	      _Bound_indexes());
 800dde4:	f107 0308 	add.w	r3, r7, #8
 800dde8:	4622      	mov	r2, r4
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f870 	bl	800ded2 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd90      	pop	{r4, r7, pc}

0800ddf8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fc29 	bl	800d658 <_ZNSt9_Any_data9_M_accessEv>
 800de06:	4603      	mov	r3, r0
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERT_v>:
      _M_access()
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff fc1d 	bl	800d658 <_ZNSt9_Any_data9_M_accessEv>
 800de1e:	4603      	mov	r3, r0
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<_Functor*>());
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f000 f827 	bl	800de88 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERKT_v>
 800de3a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800de3c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<_Functor*>());
 800de3e:	200c      	movs	r0, #12
 800de40:	f001 f8c4 	bl	800efcc <_Znwj>
 800de44:	4603      	mov	r3, r0
 800de46:	461c      	mov	r4, r3
 800de48:	4623      	mov	r3, r4
 800de4a:	462a      	mov	r2, r5
 800de4c:	ca07      	ldmia	r2, {r0, r1, r2}
 800de4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  __dest._M_access<_Functor*>() =
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff ffdc 	bl	800de10 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERT_v>
 800de58:	4603      	mov	r3, r0
 800de5a:	601c      	str	r4, [r3, #0]
	}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bdb0      	pop	{r4, r5, r7, pc}

0800de64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ffce 	bl	800de10 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERT_v>
 800de74:	4603      	mov	r3, r0
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	210c      	movs	r1, #12
 800de7a:	4618      	mov	r0, r3
 800de7c:	f001 fe1e 	bl	800fabc <_ZdlPvj>
	}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS3_EEEERKT_v>:
      _M_access() const
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff fbec 	bl	800d66e <_ZNKSt9_Any_data9_M_accessEv>
 800de96:	4603      	mov	r3, r0
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <_ZSt12__get_helperILj0EP13OneWireDriverJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7ff fe04 	bl	800dab6 <_ZNSt11_Tuple_implILj0EJP13OneWireDriverEE7_M_headERS2_>
 800deae:	4603      	mov	r3, r0
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <_ZSt3getILj0EJP13OneWireDriverEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff ffec 	bl	800dea0 <_ZSt12__get_helperILj0EP13OneWireDriverJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800dec8:	4603      	mov	r3, r0
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <_ZNSt5_BindIFSt7_Mem_fnIM13OneWireDriverFvvEEPS1_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800ded2:	b590      	push	{r4, r7, lr}
 800ded4:	b087      	sub	sp, #28
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	60f8      	str	r0, [r7, #12]
 800deda:	60b9      	str	r1, [r7, #8]
 800dedc:	713a      	strb	r2, [r7, #4]
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 800dede:	68fc      	ldr	r4, [r7, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	3308      	adds	r3, #8
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff ffe7 	bl	800deb8 <_ZSt3getILj0EJP13OneWireDriverEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800deea:	4601      	mov	r1, r0
 800deec:	f107 0314 	add.w	r3, r7, #20
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	4618      	mov	r0, r3
 800def4:	f000 f808 	bl	800df08 <_ZNVKSt3_MuIP13OneWireDriverLb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>
 800def8:	4603      	mov	r3, r0
 800defa:	4619      	mov	r1, r3
 800defc:	4620      	mov	r0, r4
 800defe:	f000 f811 	bl	800df24 <_ZNKSt12_Mem_fn_baseIM13OneWireDriverFvvELb1EEclIJRPS0_EEEDTcl8__invokedtdefpT6_M_pmfspcl7forwardIT_Efp_EEEDpOS7_>
	}
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	bd90      	pop	{r4, r7, pc}

0800df08 <_ZNVKSt3_MuIP13OneWireDriverLb0ELb0EEclIRS1_St5tupleIJEEEEOT_S8_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800df14:	68b8      	ldr	r0, [r7, #8]
 800df16:	f7ff fc1d 	bl	800d754 <_ZSt7forwardIRP13OneWireDriverEOT_RNSt16remove_referenceIS3_E4typeE>
 800df1a:	4603      	mov	r3, r0
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <_ZNKSt12_Mem_fn_baseIM13OneWireDriverFvvELb1EEclIJRPS0_EEEDTcl8__invokedtdefpT6_M_pmfspcl7forwardIT_Efp_EEEDpOS7_>:
	operator()(_Args&&... __args) const
 800df24:	b590      	push	{r4, r7, lr}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
	{ return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }
 800df2e:	687c      	ldr	r4, [r7, #4]
 800df30:	6838      	ldr	r0, [r7, #0]
 800df32:	f7ff fc0f 	bl	800d754 <_ZSt7forwardIRP13OneWireDriverEOT_RNSt16remove_referenceIS3_E4typeE>
 800df36:	4603      	mov	r3, r0
 800df38:	4619      	mov	r1, r3
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 f80e 	bl	800df5c <_ZSt8__invokeIRKM13OneWireDriverFvvEJRPS0_EENSt9result_ofIFOT_DpOT0_EE4typeES9_SC_>
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}

0800df46 <_ZSt7forwardIRKM13OneWireDriverFvvEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4618      	mov	r0, r3
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <_ZSt8__invokeIRKM13OneWireDriverFvvEJRPS0_EENSt9result_ofIFOT_DpOT0_EE4typeES9_SC_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800df5c:	b5b0      	push	{r4, r5, r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff ffed 	bl	800df46 <_ZSt7forwardIRKM13OneWireDriverFvvEEOT_RNSt16remove_referenceIS5_E4typeE>
 800df6c:	4604      	mov	r4, r0
 800df6e:	6838      	ldr	r0, [r7, #0]
 800df70:	f7ff fbf0 	bl	800d754 <_ZSt7forwardIRP13OneWireDriverEOT_RNSt16remove_referenceIS3_E4typeE>
 800df74:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
 800df76:	461a      	mov	r2, r3
 800df78:	4621      	mov	r1, r4
 800df7a:	4628      	mov	r0, r5
 800df7c:	f000 f803 	bl	800df86 <_ZSt13__invoke_implIvRKM13OneWireDriverFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
    }
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bdb0      	pop	{r4, r5, r7, pc}

0800df86 <_ZSt13__invoke_implIvRKM13OneWireDriverFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	7338      	strb	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fbde 	bl	800d754 <_ZSt7forwardIRP13OneWireDriverEOT_RNSt16remove_referenceIS3_E4typeE>
 800df98:	4603      	mov	r3, r0
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	f003 0301 	and.w	r3, r3, #1
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <_ZSt13__invoke_implIvRKM13OneWireDriverFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x28>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	e008      	b.n	800dfc0 <_ZSt13__invoke_implIvRKM13OneWireDriverFvvERPS0_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x3a>
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	105b      	asrs	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68b9      	ldr	r1, [r7, #8]
 800dfba:	6809      	ldr	r1, [r1, #0]
 800dfbc:	440b      	add	r3, r1
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68b9      	ldr	r1, [r7, #8]
 800dfc2:	6849      	ldr	r1, [r1, #4]
 800dfc4:	1049      	asrs	r1, r1, #1
 800dfc6:	440a      	add	r2, r1
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
    }
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <_ZN13OneWireSensorC1EP7PinData>:
#include "one_wire_sensor.hpp"

#include <functional>

OneWireSensor::OneWireSensor(PinData *pinData) : /*Sensor(pinData),*/ oneWireDriver(OneWireDriver(pinData)) {}
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff fbc3 	bl	800d76c <_ZN13OneWireDriverC1EP7PinData>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <_ZN13OneWireSensor15startNewReadoutEv>:

void OneWireSensor::startNewReadout(void){
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
	this->oneWireDriver.driverStartReadout();
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff fc02 	bl	800d804 <_ZN13OneWireDriver18driverStartReadoutEv>
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800e00c:	4b2c      	ldr	r3, [pc, #176]	; (800e0c0 <Add_Sample_Service+0xb8>)
{
 800e00e:	b092      	sub	sp, #72	; 0x48
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800e010:	aa06      	add	r2, sp, #24
 800e012:	f103 0610 	add.w	r6, r3, #16
 800e016:	4615      	mov	r5, r2
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	6859      	ldr	r1, [r3, #4]
 800e01c:	4614      	mov	r4, r2
 800e01e:	c403      	stmia	r4!, {r0, r1}
 800e020:	3308      	adds	r3, #8
 800e022:	42b3      	cmp	r3, r6
 800e024:	4622      	mov	r2, r4
 800e026:	d1f7      	bne.n	800e018 <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800e028:	4b26      	ldr	r3, [pc, #152]	; (800e0c4 <Add_Sample_Service+0xbc>)
 800e02a:	aa0a      	add	r2, sp, #40	; 0x28
 800e02c:	f103 0710 	add.w	r7, r3, #16
 800e030:	4616      	mov	r6, r2
 800e032:	6818      	ldr	r0, [r3, #0]
 800e034:	6859      	ldr	r1, [r3, #4]
 800e036:	4614      	mov	r4, r2
 800e038:	c403      	stmia	r4!, {r0, r1}
 800e03a:	3308      	adds	r3, #8
 800e03c:	42bb      	cmp	r3, r7
 800e03e:	4622      	mov	r2, r4
 800e040:	d1f7      	bne.n	800e032 <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800e042:	4b21      	ldr	r3, [pc, #132]	; (800e0c8 <Add_Sample_Service+0xc0>)
 800e044:	aa0e      	add	r2, sp, #56	; 0x38
 800e046:	f103 0e10 	add.w	lr, r3, #16
 800e04a:	4617      	mov	r7, r2
 800e04c:	6818      	ldr	r0, [r3, #0]
 800e04e:	6859      	ldr	r1, [r3, #4]
 800e050:	4614      	mov	r4, r2
 800e052:	c403      	stmia	r4!, {r0, r1}
 800e054:	3308      	adds	r3, #8
 800e056:	4573      	cmp	r3, lr
 800e058:	4622      	mov	r2, r4
 800e05a:	d1f7      	bne.n	800e04c <Add_Sample_Service+0x44>
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 800e05c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800e0d4 <Add_Sample_Service+0xcc>
 800e060:	f8cd 8000 	str.w	r8, [sp]
 800e064:	2307      	movs	r3, #7
 800e066:	2201      	movs	r2, #1
 800e068:	4629      	mov	r1, r5
 800e06a:	2002      	movs	r0, #2
 800e06c:	f7fc fb89 	bl	800a782 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 800e070:	4603      	mov	r3, r0
 800e072:	bb08      	cbnz	r0, 800e0b8 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 800e074:	4a15      	ldr	r2, [pc, #84]	; (800e0cc <Add_Sample_Service+0xc4>)
 800e076:	9205      	str	r2, [sp, #20]
 800e078:	2510      	movs	r5, #16
 800e07a:	2401      	movs	r4, #1
 800e07c:	9302      	str	r3, [sp, #8]
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	f8b8 0000 	ldrh.w	r0, [r8]
 800e084:	9404      	str	r4, [sp, #16]
 800e086:	2314      	movs	r3, #20
 800e088:	9503      	str	r5, [sp, #12]
 800e08a:	9500      	str	r5, [sp, #0]
 800e08c:	4632      	mov	r2, r6
 800e08e:	2102      	movs	r1, #2
 800e090:	f7fc fbba 	bl	800a808 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800e094:	4603      	mov	r3, r0
 800e096:	b978      	cbnz	r0, 800e0b8 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800e098:	4a0d      	ldr	r2, [pc, #52]	; (800e0d0 <Add_Sample_Service+0xc8>)
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	230c      	movs	r3, #12
 800e09e:	9205      	str	r2, [sp, #20]
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	f8b8 0000 	ldrh.w	r0, [r8]
 800e0a6:	9404      	str	r4, [sp, #16]
 800e0a8:	9503      	str	r5, [sp, #12]
 800e0aa:	9402      	str	r4, [sp, #8]
 800e0ac:	2314      	movs	r3, #20
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	2102      	movs	r1, #2
 800e0b2:	f7fc fba9 	bl	800a808 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800e0b6:	b100      	cbz	r0, 800e0ba <Add_Sample_Service+0xb2>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 800e0b8:	2047      	movs	r0, #71	; 0x47
}
 800e0ba:	b012      	add	sp, #72	; 0x48
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	08015dac 	.word	0x08015dac
 800e0c4:	08015dbc 	.word	0x08015dbc
 800e0c8:	08015dcc 	.word	0x08015dcc
 800e0cc:	20001e94 	.word	0x20001e94
 800e0d0:	20001e90 	.word	0x20001e90
 800e0d4:	20001e8c 	.word	0x20001e8c

0800e0d8 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 800e0d8:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 800e0da:	4b28      	ldr	r3, [pc, #160]	; (800e17c <Make_Connection+0xa4>)
 800e0dc:	781c      	ldrb	r4, [r3, #0]
{  
 800e0de:	b08c      	sub	sp, #48	; 0x30
 800e0e0:	ad08      	add	r5, sp, #32
  if(BLE_Role == CLIENT) {
 800e0e2:	bb2c      	cbnz	r4, 800e130 <Make_Connection+0x58>
    
    printf("Client Create Connection\n");
 800e0e4:	4826      	ldr	r0, [pc, #152]	; (800e180 <Make_Connection+0xa8>)
 800e0e6:	f003 fc61 	bl	80119ac <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800e0ea:	4b26      	ldr	r3, [pc, #152]	; (800e184 <Make_Connection+0xac>)
 800e0ec:	6818      	ldr	r0, [r3, #0]
 800e0ee:	9008      	str	r0, [sp, #32]
 800e0f0:	889b      	ldrh	r3, [r3, #4]
 800e0f2:	80ab      	strh	r3, [r5, #4]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f000 fb15 	bl	800e724 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 800e0fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e0fe:	223c      	movs	r2, #60	; 0x3c
 800e100:	9306      	str	r3, [sp, #24]
 800e102:	9305      	str	r3, [sp, #20]
 800e104:	9302      	str	r3, [sp, #8]
 800e106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e10a:	2328      	movs	r3, #40	; 0x28
 800e10c:	9204      	str	r2, [sp, #16]
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	9403      	str	r4, [sp, #12]
 800e112:	9400      	str	r4, [sp, #0]
 800e114:	462b      	mov	r3, r5
 800e116:	4622      	mov	r2, r4
 800e118:	4608      	mov	r0, r1
 800e11a:	f7fc fac8 	bl	800a6ae <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2); 
    
    if (ret != 0){
 800e11e:	b128      	cbz	r0, 800e12c <Make_Connection+0x54>
      printf("Error while starting connection.\n");
 800e120:	4819      	ldr	r0, [pc, #100]	; (800e188 <Make_Connection+0xb0>)
 800e122:	f003 fc43 	bl	80119ac <puts>
      HAL_Delay(100);
 800e126:	2064      	movs	r0, #100	; 0x64
 800e128:	f7fa f9e8 	bl	80084fc <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 800e12c:	b00c      	add	sp, #48	; 0x30
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 800e130:	4b16      	ldr	r3, [pc, #88]	; (800e18c <Make_Connection+0xb4>)
 800e132:	462a      	mov	r2, r5
 800e134:	f103 0608 	add.w	r6, r3, #8
 800e138:	6818      	ldr	r0, [r3, #0]
 800e13a:	6859      	ldr	r1, [r3, #4]
 800e13c:	4614      	mov	r4, r2
 800e13e:	c403      	stmia	r4!, {r0, r1}
 800e140:	3308      	adds	r3, #8
 800e142:	42b3      	cmp	r3, r6
 800e144:	4622      	mov	r2, r4
 800e146:	d1f7      	bne.n	800e138 <Make_Connection+0x60>
 800e148:	6818      	ldr	r0, [r3, #0]
 800e14a:	791b      	ldrb	r3, [r3, #4]
 800e14c:	6020      	str	r0, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 800e14e:	2100      	movs	r1, #0
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 800e150:	7123      	strb	r3, [r4, #4]
    hci_le_set_scan_resp_data(0,NULL);
 800e152:	4608      	mov	r0, r1
 800e154:	f7fc fd62 	bl	800ac1c <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
 800e158:	2300      	movs	r3, #0
 800e15a:	220d      	movs	r2, #13
 800e15c:	9201      	str	r2, [sp, #4]
 800e15e:	9306      	str	r3, [sp, #24]
 800e160:	9305      	str	r3, [sp, #20]
 800e162:	9304      	str	r3, [sp, #16]
 800e164:	9303      	str	r3, [sp, #12]
 800e166:	9502      	str	r5, [sp, #8]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e16e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e172:	4618      	mov	r0, r3
 800e174:	f7fc f9fe 	bl	800a574 <aci_gap_set_discoverable>
}
 800e178:	e7d8      	b.n	800e12c <Make_Connection+0x54>
 800e17a:	bf00      	nop
 800e17c:	2000002c 	.word	0x2000002c
 800e180:	080167f8 	.word	0x080167f8
 800e184:	08015ddc 	.word	0x08015ddc
 800e188:	08016811 	.word	0x08016811
 800e18c:	08015de2 	.word	0x08015de2

0800e190 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 800e190:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 800e192:	4d0f      	ldr	r5, [pc, #60]	; (800e1d0 <startReadTXCharHandle+0x40>)
 800e194:	782a      	ldrb	r2, [r5, #0]
{
 800e196:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 800e198:	b9c2      	cbnz	r2, 800e1cc <startReadTXCharHandle+0x3c>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800e19a:	4b0e      	ldr	r3, [pc, #56]	; (800e1d4 <startReadTXCharHandle+0x44>)
 800e19c:	aa02      	add	r2, sp, #8
 800e19e:	f103 0710 	add.w	r7, r3, #16
 800e1a2:	4616      	mov	r6, r2
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	6859      	ldr	r1, [r3, #4]
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	c403      	stmia	r4!, {r0, r1}
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	42bb      	cmp	r3, r7
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	d1f7      	bne.n	800e1a4 <startReadTXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 800e1b4:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <startReadTXCharHandle+0x48>)
 800e1b6:	8818      	ldrh	r0, [r3, #0]
 800e1b8:	9600      	str	r6, [sp, #0]
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1c0:	2101      	movs	r1, #1
 800e1c2:	b280      	uxth	r0, r0
 800e1c4:	f7fc fbb5 	bl	800a932 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	702b      	strb	r3, [r5, #0]
  }
}
 800e1cc:	b007      	add	sp, #28
 800e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1d0:	20001c56 	.word	0x20001c56
 800e1d4:	08015dbc 	.word	0x08015dbc
 800e1d8:	20001c50 	.word	0x20001c50

0800e1dc <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 800e1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 800e1de:	4d0f      	ldr	r5, [pc, #60]	; (800e21c <startReadRXCharHandle+0x40>)
 800e1e0:	782a      	ldrb	r2, [r5, #0]
{  
 800e1e2:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 800e1e4:	b9c2      	cbnz	r2, 800e218 <startReadRXCharHandle+0x3c>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800e1e6:	4b0e      	ldr	r3, [pc, #56]	; (800e220 <startReadRXCharHandle+0x44>)
 800e1e8:	aa02      	add	r2, sp, #8
 800e1ea:	f103 0710 	add.w	r7, r3, #16
 800e1ee:	4616      	mov	r6, r2
 800e1f0:	6818      	ldr	r0, [r3, #0]
 800e1f2:	6859      	ldr	r1, [r3, #4]
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	c403      	stmia	r4!, {r0, r1}
 800e1f8:	3308      	adds	r3, #8
 800e1fa:	42bb      	cmp	r3, r7
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	d1f7      	bne.n	800e1f0 <startReadRXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 800e200:	4b08      	ldr	r3, [pc, #32]	; (800e224 <startReadRXCharHandle+0x48>)
 800e202:	8818      	ldrh	r0, [r3, #0]
 800e204:	9600      	str	r6, [sp, #0]
 800e206:	2302      	movs	r3, #2
 800e208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e20c:	2101      	movs	r1, #1
 800e20e:	b280      	uxth	r0, r0
 800e210:	f7fc fb8f 	bl	800a932 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 800e214:	2301      	movs	r3, #1
 800e216:	702b      	strb	r3, [r5, #0]
  }
}
 800e218:	b007      	add	sp, #28
 800e21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e21c:	20001c55 	.word	0x20001c55
 800e220:	08015dcc 	.word	0x08015dcc
 800e224:	20001c50 	.word	0x20001c50

0800e228 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	4605      	mov	r5, r0
  BSP_LED_Toggle(LED2);
 800e22c:	2000      	movs	r0, #0
{
 800e22e:	460e      	mov	r6, r1
  BSP_LED_Toggle(LED2);
 800e230:	f000 fa8a 	bl	800e748 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 800e234:	462c      	mov	r4, r5
 800e236:	1b63      	subs	r3, r4, r5
 800e238:	429e      	cmp	r6, r3
 800e23a:	dc06      	bgt.n	800e24a <receiveData+0x22>
    printf("%c", data_buffer[i]);
  }
  fflush(stdout);
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <receiveData+0x2c>)
 800e23e:	681b      	ldr	r3, [r3, #0]
}
 800e240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fflush(stdout);
 800e244:	6898      	ldr	r0, [r3, #8]
 800e246:	f002 bb47 	b.w	80108d8 <fflush>
    printf("%c", data_buffer[i]);
 800e24a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e24e:	f003 fb39 	bl	80118c4 <putchar>
 800e252:	e7f0      	b.n	800e236 <receiveData+0xe>
 800e254:	20000050 	.word	0x20000050

0800e258 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800e258:	b513      	push	{r0, r1, r4, lr}
 800e25a:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {    
 800e25c:	490d      	ldr	r1, [pc, #52]	; (800e294 <sendData+0x3c>)
 800e25e:	7809      	ldrb	r1, [r1, #0]
 800e260:	2901      	cmp	r1, #1
{
 800e262:	4603      	mov	r3, r0
  if(BLE_Role == SERVER) {    
 800e264:	d10a      	bne.n	800e27c <sendData+0x24>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 800e266:	490c      	ldr	r1, [pc, #48]	; (800e298 <sendData+0x40>)
 800e268:	480c      	ldr	r0, [pc, #48]	; (800e29c <sendData+0x44>)
 800e26a:	8809      	ldrh	r1, [r1, #0]
 800e26c:	8800      	ldrh	r0, [r0, #0]
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	4613      	mov	r3, r2
 800e272:	2200      	movs	r2, #0
 800e274:	f7fc fb26 	bl	800a8c4 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800e278:	b002      	add	sp, #8
 800e27a:	bd10      	pop	{r4, pc}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 800e27c:	4908      	ldr	r1, [pc, #32]	; (800e2a0 <sendData+0x48>)
 800e27e:	8808      	ldrh	r0, [r1, #0]
 800e280:	4908      	ldr	r1, [pc, #32]	; (800e2a4 <sendData+0x4c>)
 800e282:	880c      	ldrh	r4, [r1, #0]
 800e284:	3401      	adds	r4, #1
 800e286:	b2a1      	uxth	r1, r4
 800e288:	b280      	uxth	r0, r0
}
 800e28a:	b002      	add	sp, #8
 800e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 800e290:	f7fc bbbb 	b.w	800aa0a <aci_gatt_write_without_response>
 800e294:	2000002c 	.word	0x2000002c
 800e298:	20001e94 	.word	0x20001e94
 800e29c:	20001e8c 	.word	0x20001e8c
 800e2a0:	20001c50 	.word	0x20001c50
 800e2a4:	20001e8e 	.word	0x20001e8e

0800e2a8 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 800e2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	f88d 3004 	strb.w	r3, [sp, #4]
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 800e2b6:	f7fa f91b 	bl	80084f0 <HAL_GetTick>
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 800e2ba:	4d0d      	ldr	r5, [pc, #52]	; (800e2f0 <enableNotification+0x48>)
 800e2bc:	4c0d      	ldr	r4, [pc, #52]	; (800e2f4 <enableNotification+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800e2be:	4606      	mov	r6, r0
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 800e2c0:	8821      	ldrh	r1, [r4, #0]
 800e2c2:	8828      	ldrh	r0, [r5, #0]
 800e2c4:	3102      	adds	r1, #2
 800e2c6:	ab01      	add	r3, sp, #4
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	b289      	uxth	r1, r1
 800e2cc:	b280      	uxth	r0, r0
 800e2ce:	f7fc fb66 	bl	800a99e <aci_gatt_write_charac_descriptor>
 800e2d2:	2846      	cmp	r0, #70	; 0x46
 800e2d4:	d106      	bne.n	800e2e4 <enableNotification+0x3c>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800e2d6:	f7fa f90b 	bl	80084f0 <HAL_GetTick>
 800e2da:	f242 7310 	movw	r3, #10000	; 0x2710
 800e2de:	1b80      	subs	r0, r0, r6
 800e2e0:	4298      	cmp	r0, r3
 800e2e2:	d9ed      	bls.n	800e2c0 <enableNotification+0x18>
  }
  notification_enabled = TRUE;
 800e2e4:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <enableNotification+0x50>)
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	701a      	strb	r2, [r3, #0]
}
 800e2ea:	b002      	add	sp, #8
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20001c50 	.word	0x20001c50
 800e2f4:	20001e92 	.word	0x20001e92
 800e2f8:	20001c54 	.word	0x20001c54

0800e2fc <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 800e2fc:	4b09      	ldr	r3, [pc, #36]	; (800e324 <Attribute_Modified_CB+0x28>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	3301      	adds	r3, #1
 800e302:	4298      	cmp	r0, r3
 800e304:	d102      	bne.n	800e30c <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 800e306:	4610      	mov	r0, r2
 800e308:	f7ff bf8e 	b.w	800e228 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 800e30c:	4b06      	ldr	r3, [pc, #24]	; (800e328 <Attribute_Modified_CB+0x2c>)
 800e30e:	881b      	ldrh	r3, [r3, #0]
 800e310:	3302      	adds	r3, #2
 800e312:	4298      	cmp	r0, r3
 800e314:	d104      	bne.n	800e320 <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 800e316:	7813      	ldrb	r3, [r2, #0]
 800e318:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 800e31a:	bf04      	itt	eq
 800e31c:	4a03      	ldreq	r2, [pc, #12]	; (800e32c <Attribute_Modified_CB+0x30>)
 800e31e:	7013      	strbeq	r3, [r2, #0]
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	20001e90 	.word	0x20001e90
 800e328:	20001e94 	.word	0x20001e94
 800e32c:	20001c54 	.word	0x20001c54

0800e330 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 800e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 800e332:	4b0c      	ldr	r3, [pc, #48]	; (800e364 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  
  printf("Connected to device:");
  for(int i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 800e334:	4f0c      	ldr	r7, [pc, #48]	; (800e368 <GAP_ConnectionComplete_CB+0x38>)
  connected = TRUE;
 800e336:	2201      	movs	r2, #1
 800e338:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800e33a:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <GAP_ConnectionComplete_CB+0x3c>)
{  
 800e33c:	4604      	mov	r4, r0
  printf("Connected to device:");
 800e33e:	480c      	ldr	r0, [pc, #48]	; (800e370 <GAP_ConnectionComplete_CB+0x40>)
  connection_handle = handle;
 800e340:	8019      	strh	r1, [r3, #0]
  printf("Connected to device:");
 800e342:	f003 fa5f 	bl	8011804 <printf>
 800e346:	1da5      	adds	r5, r4, #6
 800e348:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 800e34a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e34e:	4638      	mov	r0, r7
 800e350:	f003 fa58 	bl	8011804 <printf>
  for(int i = 5; i > 0; i--){
 800e354:	42b5      	cmp	r5, r6
 800e356:	d1f8      	bne.n	800e34a <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 800e358:	7821      	ldrb	r1, [r4, #0]
 800e35a:	4806      	ldr	r0, [pc, #24]	; (800e374 <GAP_ConnectionComplete_CB+0x44>)
}
 800e35c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 800e360:	f003 ba50 	b.w	8011804 <printf>
 800e364:	20001c4c 	.word	0x20001c4c
 800e368:	080167df 	.word	0x080167df
 800e36c:	20001c50 	.word	0x20001c50
 800e370:	080167ca 	.word	0x080167ca
 800e374:	080167e5 	.word	0x080167e5

0800e378 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 800e378:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <GAP_DisconnectionComplete_CB+0x2c>)
  
  printf("Disconnected\n");
 800e37a:	480b      	ldr	r0, [pc, #44]	; (800e3a8 <GAP_DisconnectionComplete_CB+0x30>)
{
 800e37c:	b510      	push	{r4, lr}
  connected = FALSE;
 800e37e:	2400      	movs	r4, #0
 800e380:	601c      	str	r4, [r3, #0]
  printf("Disconnected\n");
 800e382:	f003 fb13 	bl	80119ac <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800e386:	4b09      	ldr	r3, [pc, #36]	; (800e3ac <GAP_DisconnectionComplete_CB+0x34>)
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800e38c:	4b08      	ldr	r3, [pc, #32]	; (800e3b0 <GAP_DisconnectionComplete_CB+0x38>)
 800e38e:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 800e390:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <GAP_DisconnectionComplete_CB+0x3c>)
 800e392:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 800e394:	4b08      	ldr	r3, [pc, #32]	; (800e3b8 <GAP_DisconnectionComplete_CB+0x40>)
 800e396:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 800e398:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <GAP_DisconnectionComplete_CB+0x44>)
 800e39a:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 800e39c:	4b08      	ldr	r3, [pc, #32]	; (800e3c0 <GAP_DisconnectionComplete_CB+0x48>)
 800e39e:	701c      	strb	r4, [r3, #0]
 800e3a0:	bd10      	pop	{r4, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20001c4c 	.word	0x20001c4c
 800e3a8:	080167eb 	.word	0x080167eb
 800e3ac:	2000002e 	.word	0x2000002e
 800e3b0:	20001c54 	.word	0x20001c54
 800e3b4:	20001c56 	.word	0x20001c56
 800e3b8:	20001c55 	.word	0x20001c55
 800e3bc:	20001c53 	.word	0x20001c53
 800e3c0:	20001c52 	.word	0x20001c52

0800e3c4 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 800e3c4:	4b04      	ldr	r3, [pc, #16]	; (800e3d8 <GATT_Notification_CB+0x14>)
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	4298      	cmp	r0, r3
 800e3cc:	d102      	bne.n	800e3d4 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	f7ff bf2a 	b.w	800e228 <receiveData>
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	20001e92 	.word	0x20001e92

0800e3dc <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 800e3dc:	7802      	ldrb	r2, [r0, #0]
 800e3de:	2a04      	cmp	r2, #4
{
 800e3e0:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 800e3e2:	d167      	bne.n	800e4b4 <user_notify+0xd8>
    return;
  
  switch(event_pckt->evt){
 800e3e4:	7842      	ldrb	r2, [r0, #1]
 800e3e6:	2a3e      	cmp	r2, #62	; 0x3e
 800e3e8:	d005      	beq.n	800e3f6 <user_notify+0x1a>
 800e3ea:	2aff      	cmp	r2, #255	; 0xff
 800e3ec:	d00b      	beq.n	800e406 <user_notify+0x2a>
 800e3ee:	2a05      	cmp	r2, #5
 800e3f0:	d160      	bne.n	800e4b4 <user_notify+0xd8>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800e3f2:	f7ff bfc1 	b.w	800e378 <GAP_DisconnectionComplete_CB>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 800e3f6:	78c2      	ldrb	r2, [r0, #3]
 800e3f8:	2a01      	cmp	r2, #1
 800e3fa:	d15b      	bne.n	800e4b4 <user_notify+0xd8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800e3fc:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 800e400:	3009      	adds	r0, #9
 800e402:	f7ff bf95 	b.w	800e330 <GAP_ConnectionComplete_CB>
    break;
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 800e406:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800e40a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800e40e:	428a      	cmp	r2, r1
 800e410:	d01a      	beq.n	800e448 <user_notify+0x6c>
 800e412:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 800e416:	d204      	bcs.n	800e422 <user_notify+0x46>
 800e418:	f640 4101 	movw	r1, #3073	; 0xc01
 800e41c:	428a      	cmp	r2, r1
 800e41e:	d006      	beq.n	800e42e <user_notify+0x52>
 800e420:	4770      	bx	lr
 800e422:	d034      	beq.n	800e48e <user_notify+0xb2>
 800e424:	f640 4112 	movw	r1, #3090	; 0xc12
 800e428:	428a      	cmp	r2, r1
 800e42a:	d015      	beq.n	800e458 <user_notify+0x7c>
 800e42c:	4770      	bx	lr
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 800e42e:	4a22      	ldr	r2, [pc, #136]	; (800e4b8 <user_notify+0xdc>)
 800e430:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 800e434:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800e436:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 800e438:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800e43a:	bf0c      	ite	eq
 800e43c:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800e440:	f103 020a 	addne.w	r2, r3, #10
 800e444:	f7ff bf5a 	b.w	800e2fc <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 800e448:	79c1      	ldrb	r1, [r0, #7]
 800e44a:	3902      	subs	r1, #2
 800e44c:	f100 020a 	add.w	r2, r0, #10
 800e450:	b2c9      	uxtb	r1, r1
 800e452:	8900      	ldrh	r0, [r0, #8]
 800e454:	f7ff bfb6 	b.w	800e3c4 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 800e458:	4a18      	ldr	r2, [pc, #96]	; (800e4bc <user_notify+0xe0>)
 800e45a:	7812      	ldrb	r2, [r2, #0]
 800e45c:	2a00      	cmp	r2, #0
 800e45e:	d129      	bne.n	800e4b4 <user_notify+0xd8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800e460:	4a17      	ldr	r2, [pc, #92]	; (800e4c0 <user_notify+0xe4>)
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	b142      	cbz	r2, 800e478 <user_notify+0x9c>
 800e466:	4a17      	ldr	r2, [pc, #92]	; (800e4c4 <user_notify+0xe8>)
 800e468:	7812      	ldrb	r2, [r2, #0]
 800e46a:	b92a      	cbnz	r2, 800e478 <user_notify+0x9c>
          {
            tx_handle = resp->attr_handle;
 800e46c:	4b16      	ldr	r3, [pc, #88]	; (800e4c8 <user_notify+0xec>)
 800e46e:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 800e470:	4816      	ldr	r0, [pc, #88]	; (800e4cc <user_notify+0xf0>)
            tx_handle = resp->attr_handle;
 800e472:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 800e474:	f003 b9c6 	b.w	8011804 <printf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800e478:	4a15      	ldr	r2, [pc, #84]	; (800e4d0 <user_notify+0xf4>)
 800e47a:	7812      	ldrb	r2, [r2, #0]
 800e47c:	b1d2      	cbz	r2, 800e4b4 <user_notify+0xd8>
 800e47e:	4a15      	ldr	r2, [pc, #84]	; (800e4d4 <user_notify+0xf8>)
 800e480:	7812      	ldrb	r2, [r2, #0]
 800e482:	b9ba      	cbnz	r2, 800e4b4 <user_notify+0xd8>
            rx_handle = resp->attr_handle;
 800e484:	8919      	ldrh	r1, [r3, #8]
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <user_notify+0xfc>)
            printf("RX Char Handle %04X\n", rx_handle);
 800e488:	4814      	ldr	r0, [pc, #80]	; (800e4dc <user_notify+0x100>)
            rx_handle = resp->attr_handle;
 800e48a:	8019      	strh	r1, [r3, #0]
 800e48c:	e7f2      	b.n	800e474 <user_notify+0x98>
          }
        }
        break;
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 800e48e:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <user_notify+0xe0>)
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	b97b      	cbnz	r3, 800e4b4 <user_notify+0xd8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800e494:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <user_notify+0xe4>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	b12b      	cbz	r3, 800e4a6 <user_notify+0xca>
 800e49a:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <user_notify+0xe8>)
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	b912      	cbnz	r2, 800e4a6 <user_notify+0xca>
          {
            end_read_tx_char_handle = TRUE;
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	701a      	strb	r2, [r3, #0]
 800e4a4:	e006      	b.n	800e4b4 <user_notify+0xd8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800e4a6:	4b0a      	ldr	r3, [pc, #40]	; (800e4d0 <user_notify+0xf4>)
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	b11b      	cbz	r3, 800e4b4 <user_notify+0xd8>
 800e4ac:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <user_notify+0xf8>)
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	2a00      	cmp	r2, #0
 800e4b2:	d0f5      	beq.n	800e4a0 <user_notify+0xc4>
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	200018e4 	.word	0x200018e4
 800e4bc:	2000002c 	.word	0x2000002c
 800e4c0:	20001c56 	.word	0x20001c56
 800e4c4:	20001c53 	.word	0x20001c53
 800e4c8:	20001e92 	.word	0x20001e92
 800e4cc:	08016832 	.word	0x08016832
 800e4d0:	20001c55 	.word	0x20001c55
 800e4d4:	20001c52 	.word	0x20001c52
 800e4d8:	20001e8e 	.word	0x20001e8e
 800e4dc:	08016847 	.word	0x08016847

0800e4e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4e0:	4b0e      	ldr	r3, [pc, #56]	; (800e51c <HAL_MspInit+0x3c>)
{
 800e4e2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e4e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e4e6:	f042 0201 	orr.w	r2, r2, #1
 800e4ea:	661a      	str	r2, [r3, #96]	; 0x60
 800e4ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e4ee:	f002 0201 	and.w	r2, r2, #1
 800e4f2:	9200      	str	r2, [sp, #0]
 800e4f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e4f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e4fc:	659a      	str	r2, [r3, #88]	; 0x58
 800e4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e504:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e506:	2200      	movs	r2, #0
 800e508:	210f      	movs	r1, #15
 800e50a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800e50e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e510:	f7fa f81a 	bl	8008548 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e514:	b003      	add	sp, #12
 800e516:	f85d fb04 	ldr.w	pc, [sp], #4
 800e51a:	bf00      	nop
 800e51c:	40021000 	.word	0x40021000

0800e520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM7)
 800e522:	6802      	ldr	r2, [r0, #0]
 800e524:	4b23      	ldr	r3, [pc, #140]	; (800e5b4 <HAL_TIM_Base_MspInit+0x94>)
 800e526:	429a      	cmp	r2, r3
{
 800e528:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM7)
 800e52a:	d112      	bne.n	800e552 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e52c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800e530:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e534:	f042 0220 	orr.w	r2, r2, #32
 800e538:	659a      	str	r2, [r3, #88]	; 0x58
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800e542:	2200      	movs	r2, #0
 800e544:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e546:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800e548:	f7f9 fffe 	bl	8008548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800e54c:	2037      	movs	r0, #55	; 0x37
 800e54e:	f7fa f82f 	bl	80085b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM7_MspInit 1 */
  }

  //TODO: kolejne instancje timerow
  /* USER CODE BEGIN TIM4_MspInit 0 */
  if(htim_base->Instance==TIM4)
 800e552:	6822      	ldr	r2, [r4, #0]
 800e554:	4b18      	ldr	r3, [pc, #96]	; (800e5b8 <HAL_TIM_Base_MspInit+0x98>)
 800e556:	429a      	cmp	r2, r3
 800e558:	d112      	bne.n	800e580 <HAL_TIM_Base_MspInit+0x60>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e55a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800e55e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e560:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e562:	f042 0204 	orr.w	r2, r2, #4
 800e566:	659a      	str	r2, [r3, #88]	; 0x58
 800e568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800e570:	2200      	movs	r2, #0
 800e572:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e574:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800e576:	f7f9 ffe7 	bl	8008548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e57a:	201e      	movs	r0, #30
 800e57c:	f7fa f818 	bl	80085b0 <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM4_MspInit 0 */

  /* USER CODE BEGIN TIM6_MspInit 0 */
  if(htim_base->Instance==TIM6)
 800e580:	6822      	ldr	r2, [r4, #0]
 800e582:	4b0e      	ldr	r3, [pc, #56]	; (800e5bc <HAL_TIM_Base_MspInit+0x9c>)
 800e584:	429a      	cmp	r2, r3
 800e586:	d112      	bne.n	800e5ae <HAL_TIM_Base_MspInit+0x8e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e588:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800e58c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e58e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e590:	f042 0210 	orr.w	r2, r2, #16
 800e594:	659a      	str	r2, [r3, #88]	; 0x58
 800e596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e598:	f003 0310 	and.w	r3, r3, #16
 800e59c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800e59e:	2200      	movs	r2, #0
 800e5a0:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e5a2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800e5a4:	f7f9 ffd0 	bl	8008548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e5a8:	2036      	movs	r0, #54	; 0x36
 800e5aa:	f7fa f801 	bl	80085b0 <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM6_MspInit 0 */

}
 800e5ae:	b004      	add	sp, #16
 800e5b0:	bd10      	pop	{r4, pc}
 800e5b2:	bf00      	nop
 800e5b4:	40001400 	.word	0x40001400
 800e5b8:	40000800 	.word	0x40000800
 800e5bc:	40001000 	.word	0x40001000

0800e5c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5c6:	2214      	movs	r2, #20
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	a803      	add	r0, sp, #12
 800e5cc:	f003 f906 	bl	80117dc <memset>
  if(huart->Instance==USART3)
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	4b12      	ldr	r3, [pc, #72]	; (800e61c <HAL_UART_MspInit+0x5c>)
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d11f      	bne.n	800e618 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800e5d8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5dc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 800e5de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5e0:	480f      	ldr	r0, [pc, #60]	; (800e620 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800e5e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e5e6:	659a      	str	r2, [r3, #88]	; 0x58
 800e5e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800e5ee:	9201      	str	r2, [sp, #4]
 800e5f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e5f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5f4:	f042 0204 	orr.w	r2, r2, #4
 800e5f8:	64da      	str	r2, [r3, #76]	; 0x4c
 800e5fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5fc:	f003 0304 	and.w	r3, r3, #4
 800e600:	9302      	str	r3, [sp, #8]
 800e602:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e604:	2330      	movs	r3, #48	; 0x30
 800e606:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e608:	2302      	movs	r3, #2
 800e60a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e60c:	2303      	movs	r3, #3
 800e60e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e610:	2307      	movs	r3, #7
 800e612:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e614:	f7f9 fffe 	bl	8008614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e618:	b008      	add	sp, #32
 800e61a:	bd10      	pop	{r4, pc}
 800e61c:	40004800 	.word	0x40004800
 800e620:	48000800 	.word	0x48000800

0800e624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e624:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800e626:	4601      	mov	r1, r0
{
 800e628:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800e62a:	2200      	movs	r2, #0
 800e62c:	201d      	movs	r0, #29
 800e62e:	f7f9 ff8b 	bl	8008548 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800e632:	201d      	movs	r0, #29
 800e634:	f7f9 ffbc 	bl	80085b0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800e638:	4b14      	ldr	r3, [pc, #80]	; (800e68c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800e63a:	4c15      	ldr	r4, [pc, #84]	; (800e690 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 800e63c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e63e:	f042 0202 	orr.w	r2, r2, #2
 800e642:	659a      	str	r2, [r3, #88]	; 0x58
 800e644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e646:	f003 0302 	and.w	r3, r3, #2
 800e64a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e64c:	a901      	add	r1, sp, #4
 800e64e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 800e650:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e652:	f7fa fd6b 	bl	800912c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800e656:	f7fa fd45 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 800e65a:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <HAL_InitTick+0x70>)
 800e65c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800e65e:	f240 33e7 	movw	r3, #999	; 0x3e7
 800e662:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800e664:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <HAL_InitTick+0x74>)
 800e666:	fbb0 f0f3 	udiv	r0, r0, r3
 800e66a:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 800e66c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 800e66e:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800e670:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 800e672:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e674:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800e676:	f7fb fbb5 	bl	8009de4 <HAL_TIM_Base_Init>
 800e67a:	b920      	cbnz	r0, 800e686 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800e67c:	4620      	mov	r0, r4
 800e67e:	f7fb fa81 	bl	8009b84 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800e682:	b008      	add	sp, #32
 800e684:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800e686:	2001      	movs	r0, #1
 800e688:	e7fb      	b.n	800e682 <HAL_InitTick+0x5e>
 800e68a:	bf00      	nop
 800e68c:	40021000 	.word	0x40021000
 800e690:	20001e98 	.word	0x20001e98
 800e694:	40000400 	.word	0x40000400
 800e698:	000f4240 	.word	0x000f4240

0800e69c <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800e69c:	f7fa bd66 	b.w	800916c <HAL_RCC_NMI_IRQHandler>

0800e6a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e6a0:	e7fe      	b.n	800e6a0 <HardFault_Handler>

0800e6a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e6a2:	e7fe      	b.n	800e6a2 <MemManage_Handler>

0800e6a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e6a4:	e7fe      	b.n	800e6a4 <BusFault_Handler>

0800e6a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e6a6:	e7fe      	b.n	800e6a6 <UsageFault_Handler>

0800e6a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e6a8:	4770      	bx	lr
	...

0800e6ac <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800e6ac:	4801      	ldr	r0, [pc, #4]	; (800e6b4 <EXTI0_IRQHandler+0x8>)
 800e6ae:	f7f9 bf99 	b.w	80085e4 <HAL_EXTI_IRQHandler>
 800e6b2:	bf00      	nop
 800e6b4:	20001e84 	.word	0x20001e84

0800e6b8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e6b8:	4801      	ldr	r0, [pc, #4]	; (800e6c0 <TIM3_IRQHandler+0x8>)
 800e6ba:	f7fb ba7d 	b.w	8009bb8 <HAL_TIM_IRQHandler>
 800e6be:	bf00      	nop
 800e6c0:	20001e98 	.word	0x20001e98

0800e6c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800e6c4:	4801      	ldr	r0, [pc, #4]	; (800e6cc <EXTI15_10_IRQHandler+0x8>)
 800e6c6:	f7f9 bf8d 	b.w	80085e4 <HAL_EXTI_IRQHandler>
 800e6ca:	bf00      	nop
 800e6cc:	20000034 	.word	0x20000034

0800e6d0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800e6d0:	4801      	ldr	r0, [pc, #4]	; (800e6d8 <TIM7_IRQHandler+0x8>)
 800e6d2:	f7fb ba71 	b.w	8009bb8 <HAL_TIM_IRQHandler>
 800e6d6:	bf00      	nop
 800e6d8:	200006e0 	.word	0x200006e0

0800e6dc <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 800e6dc:	4b10      	ldr	r3, [pc, #64]	; (800e720 <BSP_LED_Init+0x44>)
{
 800e6de:	b510      	push	{r4, lr}
  LED2_GPIO_CLK_ENABLE();    
 800e6e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6e2:	f042 0201 	orr.w	r2, r2, #1
 800e6e6:	64da      	str	r2, [r3, #76]	; 0x4c
 800e6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800e6ea:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800e6f4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800e6f6:	2420      	movs	r4, #32
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800e6f8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800e6fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800e6fc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800e6fe:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800e700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800e704:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800e706:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800e708:	f7f9 ff84 	bl	8008614 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800e70c:	2200      	movs	r2, #0
 800e70e:	4621      	mov	r1, r4
 800e710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e714:	f7fa f8ea 	bl	80088ec <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 800e718:	2000      	movs	r0, #0
 800e71a:	b006      	add	sp, #24
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	bf00      	nop
 800e720:	40021000 	.word	0x40021000

0800e724 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800e724:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800e726:	2201      	movs	r2, #1
 800e728:	2120      	movs	r1, #32
 800e72a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e72e:	f7fa f8dd 	bl	80088ec <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 800e732:	2000      	movs	r0, #0
 800e734:	bd08      	pop	{r3, pc}

0800e736 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800e736:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800e738:	2200      	movs	r2, #0
 800e73a:	2120      	movs	r1, #32
 800e73c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e740:	f7fa f8d4 	bl	80088ec <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 800e744:	2000      	movs	r0, #0
 800e746:	bd08      	pop	{r3, pc}

0800e748 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800e748:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800e74a:	2120      	movs	r1, #32
 800e74c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e750:	f7fa f8d1 	bl	80088f6 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 800e754:	2000      	movs	r0, #0
 800e756:	bd08      	pop	{r3, pc}

0800e758 <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 800e758:	4b1f      	ldr	r3, [pc, #124]	; (800e7d8 <BSP_PB_Init+0x80>)
{
 800e75a:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800e75c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e75e:	f042 0204 	orr.w	r2, r2, #4
 800e762:	64da      	str	r2, [r3, #76]	; 0x4c
 800e764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800e766:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 800e768:	f003 0304 	and.w	r3, r3, #4
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800e770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e774:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800e776:	2302      	movs	r3, #2
{
 800e778:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800e77a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e77c:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800e77e:	460c      	mov	r4, r1
 800e780:	b931      	cbnz	r1, 800e790 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800e782:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800e784:	4815      	ldr	r0, [pc, #84]	; (800e7dc <BSP_PB_Init+0x84>)
 800e786:	a901      	add	r1, sp, #4
 800e788:	f7f9 ff44 	bl	8008614 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 800e78c:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 800e78e:	e010      	b.n	800e7b2 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800e790:	4c13      	ldr	r4, [pc, #76]	; (800e7e0 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800e792:	4b14      	ldr	r3, [pc, #80]	; (800e7e4 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e794:	4811      	ldr	r0, [pc, #68]	; (800e7dc <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800e796:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e798:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800e79a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e79e:	f7f9 ff39 	bl	8008614 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800e7a2:	4911      	ldr	r1, [pc, #68]	; (800e7e8 <BSP_PB_Init+0x90>)
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f7f9 ff17 	bl	80085d8 <HAL_EXTI_GetHandle>
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	b118      	cbz	r0, 800e7b6 <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e7ae:	f06f 0003 	mvn.w	r0, #3
}
 800e7b2:	b007      	add	sp, #28
 800e7b4:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <BSP_PB_Init+0x94>)
 800e7ba:	f7f9 ff07 	bl	80085cc <HAL_EXTI_RegisterCallback>
 800e7be:	4604      	mov	r4, r0
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d1f4      	bne.n	800e7ae <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	210f      	movs	r1, #15
 800e7c8:	2028      	movs	r0, #40	; 0x28
 800e7ca:	f7f9 febd 	bl	8008548 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800e7ce:	2028      	movs	r0, #40	; 0x28
 800e7d0:	f7f9 feee 	bl	80085b0 <HAL_NVIC_EnableIRQ>
 800e7d4:	e7da      	b.n	800e78c <BSP_PB_Init+0x34>
 800e7d6:	bf00      	nop
 800e7d8:	40021000 	.word	0x40021000
 800e7dc:	48000800 	.word	0x48000800
 800e7e0:	20000034 	.word	0x20000034
 800e7e4:	10110000 	.word	0x10110000
 800e7e8:	1600000d 	.word	0x1600000d
 800e7ec:	0800e809 	.word	0x0800e809

0800e7f0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800e7f0:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800e7f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e7f6:	4803      	ldr	r0, [pc, #12]	; (800e804 <BSP_PB_GetState+0x14>)
 800e7f8:	f7fa f872 	bl	80088e0 <HAL_GPIO_ReadPin>
}
 800e7fc:	fab0 f080 	clz	r0, r0
 800e800:	0940      	lsrs	r0, r0, #5
 800e802:	bd08      	pop	{r3, pc}
 800e804:	48000800 	.word	0x48000800

0800e808 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 800e808:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 800e80a:	2000      	movs	r0, #0
 800e80c:	f7fd fe6c 	bl	800c4e8 <BSP_PB_Callback>
 800e810:	bd08      	pop	{r3, pc}
	...

0800e814 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 800e814:	4a0a      	ldr	r2, [pc, #40]	; (800e840 <MX_USART2_UART_Init+0x2c>)
 800e816:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 800e81a:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 800e81c:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 800e81e:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800e822:	2200      	movs	r2, #0
 800e824:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800e826:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800e828:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800e82a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e82c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800e82e:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e830:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e832:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800e834:	f7fb fdf5 	bl	800a422 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 800e838:	3000      	adds	r0, #0
 800e83a:	bf18      	it	ne
 800e83c:	2001      	movne	r0, #1
 800e83e:	bd08      	pop	{r3, pc}
 800e840:	40004400 	.word	0x40004400

0800e844 <BSP_COM_Init>:
{
 800e844:	b510      	push	{r4, lr}
  if(COM > COMn)
 800e846:	2801      	cmp	r0, #1
{
 800e848:	b088      	sub	sp, #32
  if(COM > COMn)
 800e84a:	d832      	bhi.n	800e8b2 <BSP_COM_Init+0x6e>
     hcom_uart[COM].Instance = COM_USART[COM];
 800e84c:	491a      	ldr	r1, [pc, #104]	; (800e8b8 <BSP_COM_Init+0x74>)
 800e84e:	4a1b      	ldr	r2, [pc, #108]	; (800e8bc <BSP_COM_Init+0x78>)
 800e850:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e854:	01c3      	lsls	r3, r0, #7
 800e856:	18d4      	adds	r4, r2, r3
 800e858:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e85a:	4b19      	ldr	r3, [pc, #100]	; (800e8c0 <BSP_COM_Init+0x7c>)
 800e85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e85e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e862:	659a      	str	r2, [r3, #88]	; 0x58
 800e864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e866:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800e86a:	9201      	str	r2, [sp, #4]
 800e86c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e86e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e870:	f042 0201 	orr.w	r2, r2, #1
 800e874:	64da      	str	r2, [r3, #76]	; 0x4c
 800e876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	9302      	str	r3, [sp, #8]
 800e87e:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800e880:	230c      	movs	r3, #12
 800e882:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e884:	2302      	movs	r3, #2
 800e886:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e888:	2300      	movs	r3, #0
 800e88a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e88c:	2303      	movs	r3, #3
 800e88e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e890:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e892:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e898:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e89a:	f7f9 febb 	bl	8008614 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f7ff ffb8 	bl	800e814 <MX_USART2_UART_Init>
 800e8a4:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800e8a6:	bf0c      	ite	eq
 800e8a8:	2000      	moveq	r0, #0
 800e8aa:	f06f 0003 	mvnne.w	r0, #3
}
 800e8ae:	b008      	add	sp, #32
 800e8b0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800e8b2:	f06f 0001 	mvn.w	r0, #1
 800e8b6:	e7fa      	b.n	800e8ae <BSP_COM_Init+0x6a>
 800e8b8:	20000030 	.word	0x20000030
 800e8bc:	20001ed8 	.word	0x20001ed8
 800e8c0:	40021000 	.word	0x40021000

0800e8c4 <__io_putchar>:
{ 
 800e8c4:	b513      	push	{r0, r1, r4, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 800e8c6:	4b08      	ldr	r3, [pc, #32]	; (800e8e8 <__io_putchar+0x24>)
{ 
 800e8c8:	a902      	add	r1, sp, #8
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 800e8ca:	781c      	ldrb	r4, [r3, #0]
{ 
 800e8cc:	f841 0d04 	str.w	r0, [r1, #-4]!
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 800e8d0:	4806      	ldr	r0, [pc, #24]	; (800e8ec <__io_putchar+0x28>)
 800e8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 800e8dc:	f7fb fd19 	bl	800a312 <HAL_UART_Transmit>
}
 800e8e0:	9801      	ldr	r0, [sp, #4]
 800e8e2:	b002      	add	sp, #8
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20001c57 	.word	0x20001c57
 800e8ec:	20001ed8 	.word	0x20001ed8

0800e8f0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800e8f0:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800e8f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	460a      	mov	r2, r1
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	4805      	ldr	r0, [pc, #20]	; (800e914 <BSP_SPI1_SendRecv+0x24>)
 800e900:	f7fb f802 	bl	8009908 <HAL_SPI_TransmitReceive>
 800e904:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800e906:	bf14      	ite	ne
 800e908:	f06f 0005 	mvnne.w	r0, #5
 800e90c:	2000      	moveq	r0, #0
 800e90e:	b003      	add	sp, #12
 800e910:	f85d fb04 	ldr.w	pc, [sp], #4
 800e914:	20001f58 	.word	0x20001f58

0800e918 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 800e918:	f7f9 bdea 	b.w	80084f0 <HAL_GetTick>

0800e91c <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 800e91c:	4a0f      	ldr	r2, [pc, #60]	; (800e95c <MX_SPI1_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800e91e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 800e922:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 800e924:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800e928:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800e92a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 800e92e:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 800e932:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800e934:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e936:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800e938:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e93a:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800e93c:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e93e:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e940:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 800e942:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800e944:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e946:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e948:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e94a:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 800e94c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e94e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800e950:	f7fa ff89 	bl	8009866 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 800e954:	3000      	adds	r0, #0
 800e956:	bf18      	it	ne
 800e958:	2001      	movne	r0, #1
 800e95a:	bd08      	pop	{r3, pc}
 800e95c:	40013000 	.word	0x40013000

0800e960 <BSP_SPI1_Init>:
{
 800e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 800e964:	4a28      	ldr	r2, [pc, #160]	; (800ea08 <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 800e966:	4c29      	ldr	r4, [pc, #164]	; (800ea0c <BSP_SPI1_Init+0xac>)
 800e968:	4b29      	ldr	r3, [pc, #164]	; (800ea10 <BSP_SPI1_Init+0xb0>)
 800e96a:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 800e96c:	6813      	ldr	r3, [r2, #0]
 800e96e:	1c59      	adds	r1, r3, #1
{
 800e970:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 800e972:	6011      	str	r1, [r2, #0]
 800e974:	b11b      	cbz	r3, 800e97e <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800e976:	2000      	movs	r0, #0
}
 800e978:	b008      	add	sp, #32
 800e97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 800e97e:	4620      	mov	r0, r4
 800e980:	f7fb f8e6 	bl	8009b50 <HAL_SPI_GetState>
 800e984:	4605      	mov	r5, r0
 800e986:	2800      	cmp	r0, #0
 800e988:	d1f5      	bne.n	800e976 <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e98a:	4b22      	ldr	r3, [pc, #136]	; (800ea14 <BSP_SPI1_Init+0xb4>)
 800e98c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e98e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e992:	661a      	str	r2, [r3, #96]	; 0x60
 800e994:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e996:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e99a:	9200      	str	r2, [sp, #0]
 800e99c:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e99e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9a0:	f042 0201 	orr.w	r2, r2, #1
 800e9a4:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9a8:	f002 0201 	and.w	r2, r2, #1
 800e9ac:	9201      	str	r2, [sp, #4]
 800e9ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9b2:	f042 0202 	orr.w	r2, r2, #2
 800e9b6:	64da      	str	r2, [r3, #76]	; 0x4c
 800e9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ba:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9bc:	f003 0302 	and.w	r3, r3, #2
 800e9c0:	9302      	str	r3, [sp, #8]
 800e9c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9c4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e9c8:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9ca:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e9cc:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9ce:	a903      	add	r1, sp, #12
 800e9d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e9d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9d6:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9da:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e9dc:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9de:	f7f9 fe19 	bl	8008614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e9e2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9e4:	480c      	ldr	r0, [pc, #48]	; (800ea18 <BSP_SPI1_Init+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e9e6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ea:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ee:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9f0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e9f2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9f4:	f7f9 fe0e 	bl	8008614 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f7ff ff8f 	bl	800e91c <MX_SPI1_Init>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d0b9      	beq.n	800e976 <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 800ea02:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800ea06:	e7b7      	b.n	800e978 <BSP_SPI1_Init+0x18>
 800ea08:	20001c58 	.word	0x20001c58
 800ea0c:	20001f58 	.word	0x20001f58
 800ea10:	40013000 	.word	0x40013000
 800ea14:	40021000 	.word	0x40021000
 800ea18:	48000400 	.word	0x48000400

0800ea1c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	4770      	bx	lr

0800ea20 <_kill>:

int _kill(int pid, int sig)
{
 800ea20:	b508      	push	{r3, lr}
	errno = EINVAL;
 800ea22:	f001 fe85 	bl	8010730 <__errno>
 800ea26:	2316      	movs	r3, #22
 800ea28:	6003      	str	r3, [r0, #0]
	return -1;
}
 800ea2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2e:	bd08      	pop	{r3, pc}

0800ea30 <_exit>:

void _exit (int status)
{
 800ea30:	b508      	push	{r3, lr}
	errno = EINVAL;
 800ea32:	f001 fe7d 	bl	8010730 <__errno>
 800ea36:	2316      	movs	r3, #22
 800ea38:	6003      	str	r3, [r0, #0]
 800ea3a:	e7fe      	b.n	800ea3a <_exit+0xa>

0800ea3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	460e      	mov	r6, r1
 800ea40:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea42:	460c      	mov	r4, r1
 800ea44:	1ba3      	subs	r3, r4, r6
 800ea46:	429d      	cmp	r5, r3
 800ea48:	dc01      	bgt.n	800ea4e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800ea4e:	f3af 8000 	nop.w
 800ea52:	f804 0b01 	strb.w	r0, [r4], #1
 800ea56:	e7f5      	b.n	800ea44 <_read+0x8>

0800ea58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea58:	b570      	push	{r4, r5, r6, lr}
 800ea5a:	460e      	mov	r6, r1
 800ea5c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea5e:	460c      	mov	r4, r1
 800ea60:	1ba3      	subs	r3, r4, r6
 800ea62:	429d      	cmp	r5, r3
 800ea64:	dc01      	bgt.n	800ea6a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800ea66:	4628      	mov	r0, r5
 800ea68:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800ea6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ea6e:	f7ff ff29 	bl	800e8c4 <__io_putchar>
 800ea72:	e7f5      	b.n	800ea60 <_write+0x8>

0800ea74 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800ea74:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ea76:	4b0a      	ldr	r3, [pc, #40]	; (800eaa0 <_sbrk+0x2c>)
 800ea78:	6819      	ldr	r1, [r3, #0]
{
 800ea7a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800ea7c:	b909      	cbnz	r1, 800ea82 <_sbrk+0xe>
		heap_end = &end;
 800ea7e:	4909      	ldr	r1, [pc, #36]	; (800eaa4 <_sbrk+0x30>)
 800ea80:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800ea82:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800ea84:	4669      	mov	r1, sp
 800ea86:	4402      	add	r2, r0
 800ea88:	428a      	cmp	r2, r1
 800ea8a:	d906      	bls.n	800ea9a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800ea8c:	f001 fe50 	bl	8010730 <__errno>
 800ea90:	230c      	movs	r3, #12
 800ea92:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800ea9a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800ea9c:	bd08      	pop	{r3, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20001c5c 	.word	0x20001c5c
 800eaa4:	20001fcc 	.word	0x20001fcc

0800eaa8 <_close>:

int _close(int file)
{
	return -1;
}
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	4770      	bx	lr

0800eaae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800eaae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eab2:	604b      	str	r3, [r1, #4]
	return 0;
}
 800eab4:	2000      	movs	r0, #0
 800eab6:	4770      	bx	lr

0800eab8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800eab8:	2001      	movs	r0, #1
 800eaba:	4770      	bx	lr

0800eabc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800eabc:	2000      	movs	r0, #0
 800eabe:	4770      	bx	lr

0800eac0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eac0:	490f      	ldr	r1, [pc, #60]	; (800eb00 <SystemInit+0x40>)
 800eac2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800eac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eaca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800eace:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <SystemInit+0x44>)
 800ead0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800ead2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800ead4:	f042 0201 	orr.w	r2, r2, #1
 800ead8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800eada:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800eae2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800eae6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800eae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eaec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eaf4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800eaf6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800eaf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eafc:	608b      	str	r3, [r1, #8]
 800eafe:	4770      	bx	lr
 800eb00:	e000ed00 	.word	0xe000ed00
 800eb04:	40021000 	.word	0x40021000

0800eb08 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bf0c      	ite	eq
 800eb18:	2301      	moveq	r3, #1
 800eb1a:	2300      	movne	r3, #0
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <_ZN5TimerC1EP17TIM_HandleTypeDef>:
#include <timer.hpp>

Timer::Timer(TIM_HandleTypeDef *htim){
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b082      	sub	sp, #8
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3304      	adds	r3, #4
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 f85f 	bl	800ebfc <_ZNSt8functionIFvvEEC1Ev>
	this->handle = htim;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	601a      	str	r2, [r3, #0]
}
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <_ZN5Timer16registerCallbackESt8functionIFvvEE>:

void Timer::registerCallback(std::function<void(void)> callbackFunction){
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b082      	sub	sp, #8
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	6039      	str	r1, [r7, #0]
	this->callback = callbackFunction;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	6839      	ldr	r1, [r7, #0]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f000 f85c 	bl	800ec1c <_ZNSt8functionIFvvEEaSERKS1_>
}
 800eb64:	bf00      	nop
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZN5Timer15executeCallbackEv>:

void Timer::executeCallback(void){
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
	callback();
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f86a 	bl	800ec52 <_ZNKSt8functionIFvvEEclEv>
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <_ZN5Timer9getHandleEv>:

TIM_HandleTypeDef* Timer::getHandle(void){
 800eb86:	b480      	push	{r7}
 800eb88:	b083      	sub	sp, #12
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
	return this->handle;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>:

void Timer::wakeMeUpAfterMicroseconds(uint16_t us){
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b082      	sub	sp, #8
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	460b      	mov	r3, r1
 800eba8:	807b      	strh	r3, [r7, #2]
	//bazowa czestotliwosc taktowania 80MHz => 80 taktow na us
	this->handle->Init.Prescaler = 79;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	224f      	movs	r2, #79	; 0x4f
 800ebb0:	605a      	str	r2, [r3, #4]
	this->handle->Init.Period = (us > 0) ? (us - 1) : 0;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	887a      	ldrh	r2, [r7, #2]
 800ebb8:	2a00      	cmp	r2, #0
 800ebba:	dd02      	ble.n	800ebc2 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x24>
 800ebbc:	887a      	ldrh	r2, [r7, #2]
 800ebbe:	3a01      	subs	r2, #1
 800ebc0:	e000      	b.n	800ebc4 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x26>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(this->handle) == HAL_OK){
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fb f90a 	bl	8009de4 <HAL_TIM_Base_Init>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	bf0c      	ite	eq
 800ebd6:	2301      	moveq	r3, #1
 800ebd8:	2300      	movne	r3, #0
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d009      	beq.n	800ebf4 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x56>
		HAL_TIM_Base_Start_IT(this->handle); //TODO: TIM6, TIM4 fix!
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fa ffcd 	bl	8009b84 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop(this->handle);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fa ffb1 	bl	8009b56 <HAL_TIM_Base_Stop>
	}
}
 800ebf4:	bf00      	nop
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7fe ffbf 	bl	800db88 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fe fd39 	bl	800d684 <_ZNSt14_Function_baseC1Ev>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ec26:	f107 0308 	add.w	r3, r7, #8
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 f825 	bl	800ec7c <_ZNSt8functionIFvvEEC1ERKS1_>
 800ec32:	f107 0308 	add.w	r3, r7, #8
 800ec36:	6879      	ldr	r1, [r7, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 f84b 	bl	800ecd4 <_ZNSt8functionIFvvEE4swapERS1_>
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fd fea6 	bl	800c994 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800ec48:	687b      	ldr	r3, [r7, #4]
      }
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b082      	sub	sp, #8
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff ff53 	bl	800eb08 <_ZNKSt14_Function_base8_M_emptyEv>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800ec68:	f000 fff8 	bl	800fc5c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	4610      	mov	r0, r2
 800ec74:	4798      	blx	r3
    }
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f7fe ff7e 	bl	800db88 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fcf8 	bl	800d684 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800ec94:	6838      	ldr	r0, [r7, #0]
 800ec96:	f000 f83e 	bl	800ed16 <_ZNKSt8functionIFvvEEcvbEv>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00d      	beq.n	800ecbc <_ZNSt8functionIFvvEEC1ERKS1_+0x40>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	2202      	movs	r2, #2
 800ecaa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	689a      	ldr	r2, [r3, #8]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	609a      	str	r2, [r3, #8]
    }
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	e005      	b.n	800eccc <_ZNSt8functionIFvvEEC1ERKS1_+0x50>
    : _Function_base()
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fd fd5e 	bl	800c784 <_ZNSt14_Function_baseD1Ev>
 800ecc8:	f000 fb04 	bl	800f2d4 <__cxa_end_cleanup>
    }
 800eccc:	4618      	mov	r0, r3
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f000 f831 	bl	800ed4c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
	std::swap(_M_manager, __x._M_manager);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f103 0208 	add.w	r2, r3, #8
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	3308      	adds	r3, #8
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	f000 f85a 	bl	800edb0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SH_>
	std::swap(_M_invoker, __x._M_invoker);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f103 020c 	add.w	r2, r3, #12
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	330c      	adds	r3, #12
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f000 f87b 	bl	800ee04 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SF_>
      }
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}

0800ed16 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 800ed16:	b580      	push	{r7, lr}
 800ed18:	b082      	sub	sp, #8
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fef1 	bl	800eb08 <_ZNKSt14_Function_base8_M_emptyEv>
 800ed26:	4603      	mov	r3, r0
 800ed28:	f083 0301 	eor.w	r3, r3, #1
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>:
  template<typename _Tp>
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff ffed 	bl	800ed36 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	f107 0308 	add.w	r3, r7, #8
 800ed62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed66:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800ed6a:	6838      	ldr	r0, [r7, #0]
 800ed6c:	f7ff ffe3 	bl	800ed36 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800ed70:	4602      	mov	r2, r0
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed78:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800ed7c:	f107 0308 	add.w	r3, r7, #8
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff ffd8 	bl	800ed36 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800ed86:	4602      	mov	r2, r0
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ed92:	bf00      	nop
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SH_>:
    swap(_Tp& __a, _Tp& __b)
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff ffed 	bl	800ed9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800edc0:	4603      	mov	r3, r0
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800edc6:	6838      	ldr	r0, [r7, #0]
 800edc8:	f7ff ffe7 	bl	800ed9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800edcc:	4603      	mov	r3, r0
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800edd4:	f107 030c 	add.w	r3, r7, #12
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff ffde 	bl	800ed9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800edde:	4603      	mov	r3, r0
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	601a      	str	r2, [r3, #0]
    }
 800ede6:	bf00      	nop
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4618      	mov	r0, r3
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7ff ffed 	bl	800edee <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800ee14:	4603      	mov	r3, r0
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ee1a:	6838      	ldr	r0, [r7, #0]
 800ee1c:	f7ff ffe7 	bl	800edee <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800ee20:	4603      	mov	r3, r0
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ee28:	f107 030c 	add.w	r3, r7, #12
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff ffde 	bl	800edee <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800ee32:	4603      	mov	r3, r0
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	601a      	str	r2, [r3, #0]
    }
 800ee3a:	bf00      	nop
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
	...

0800ee44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ee44:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ee7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800ee48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800ee4a:	e003      	b.n	800ee54 <LoopCopyDataInit>

0800ee4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ee4c:	4b0c      	ldr	r3, [pc, #48]	; (800ee80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ee4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ee50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ee52:	3104      	adds	r1, #4

0800ee54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ee54:	480b      	ldr	r0, [pc, #44]	; (800ee84 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ee56:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <LoopForever+0xe>)
	adds	r2, r0, r1
 800ee58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800ee5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ee5c:	d3f6      	bcc.n	800ee4c <CopyDataInit>
	ldr	r2, =_sbss
 800ee5e:	4a0b      	ldr	r2, [pc, #44]	; (800ee8c <LoopForever+0x12>)
	b	LoopFillZerobss
 800ee60:	e002      	b.n	800ee68 <LoopFillZerobss>

0800ee62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ee62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ee64:	f842 3b04 	str.w	r3, [r2], #4

0800ee68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ee68:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <LoopForever+0x16>)
	cmp	r2, r3
 800ee6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ee6c:	d3f9      	bcc.n	800ee62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ee6e:	f7ff fe27 	bl	800eac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ee72:	f002 f9ad 	bl	80111d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ee76:	f7fd ff2d 	bl	800ccd4 <main>

0800ee7a <LoopForever>:

LoopForever:
    b LoopForever
 800ee7a:	e7fe      	b.n	800ee7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ee7c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800ee80:	080186b4 	.word	0x080186b4
	ldr	r0, =_sdata
 800ee84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ee88:	200006c4 	.word	0x200006c4
	ldr	r2, =_sbss
 800ee8c:	200006c4 	.word	0x200006c4
	ldr	r3, = _ebss
 800ee90:	20001fcc 	.word	0x20001fcc

0800ee94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ee94:	e7fe      	b.n	800ee94 <ADC1_2_IRQHandler>
	...

0800ee98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	4b03      	ldr	r3, [pc, #12]	; (800eea8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	4604      	mov	r4, r0
 800eea0:	f000 fe38 	bl	800fb14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800eea4:	4620      	mov	r0, r4
 800eea6:	bd10      	pop	{r4, pc}
 800eea8:	080168e0 	.word	0x080168e0

0800eeac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800eeac:	b510      	push	{r4, lr}
 800eeae:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800eeb0:	6003      	str	r3, [r0, #0]
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	f000 fe2e 	bl	800fb14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800eeb8:	4620      	mov	r0, r4
 800eeba:	210c      	movs	r1, #12
 800eebc:	f000 fdfe 	bl	800fabc <_ZdlPvj>
 800eec0:	4620      	mov	r0, r4
 800eec2:	bd10      	pop	{r4, pc}
 800eec4:	080168e0 	.word	0x080168e0

0800eec8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800eec8:	b570      	push	{r4, r5, r6, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	460d      	mov	r5, r1
 800eece:	9c06      	ldr	r4, [sp, #24]
 800eed0:	4294      	cmp	r4, r2
 800eed2:	4606      	mov	r6, r0
 800eed4:	d009      	beq.n	800eeea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800eed6:	68b0      	ldr	r0, [r6, #8]
 800eed8:	6806      	ldr	r6, [r0, #0]
 800eeda:	9406      	str	r4, [sp, #24]
 800eedc:	6a34      	ldr	r4, [r6, #32]
 800eede:	4629      	mov	r1, r5
 800eee0:	46a4      	mov	ip, r4
 800eee2:	b002      	add	sp, #8
 800eee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eee8:	4760      	bx	ip
 800eeea:	4619      	mov	r1, r3
 800eeec:	9201      	str	r2, [sp, #4]
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	f000 fe6e 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800eef4:	9b00      	ldr	r3, [sp, #0]
 800eef6:	9a01      	ldr	r2, [sp, #4]
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d0ec      	beq.n	800eed6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800eefc:	2006      	movs	r0, #6
 800eefe:	b002      	add	sp, #8
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
 800ef02:	bf00      	nop

0800ef04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef08:	b081      	sub	sp, #4
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	461f      	mov	r7, r3
 800ef10:	4691      	mov	r9, r2
 800ef12:	4683      	mov	fp, r0
 800ef14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef16:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ef1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ef1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ef20:	f000 fe56 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800ef24:	b170      	cbz	r0, 800ef44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800ef26:	2e00      	cmp	r6, #0
 800ef28:	602c      	str	r4, [r5, #0]
 800ef2a:	f885 9004 	strb.w	r9, [r5, #4]
 800ef2e:	db1f      	blt.n	800ef70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 800ef30:	4434      	add	r4, r6
 800ef32:	45a0      	cmp	r8, r4
 800ef34:	bf0c      	ite	eq
 800ef36:	2406      	moveq	r4, #6
 800ef38:	2401      	movne	r4, #1
 800ef3a:	71ac      	strb	r4, [r5, #6]
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	b001      	add	sp, #4
 800ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef44:	4544      	cmp	r4, r8
 800ef46:	d018      	beq.n	800ef7a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 800ef48:	f8db 0008 	ldr.w	r0, [fp, #8]
 800ef4c:	f8d0 e000 	ldr.w	lr, [r0]
 800ef50:	950d      	str	r5, [sp, #52]	; 0x34
 800ef52:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ef56:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800ef5a:	940a      	str	r4, [sp, #40]	; 0x28
 800ef5c:	f8de 401c 	ldr.w	r4, [lr, #28]
 800ef60:	463b      	mov	r3, r7
 800ef62:	464a      	mov	r2, r9
 800ef64:	4631      	mov	r1, r6
 800ef66:	46a4      	mov	ip, r4
 800ef68:	b001      	add	sp, #4
 800ef6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6e:	4760      	bx	ip
 800ef70:	3602      	adds	r6, #2
 800ef72:	d1e3      	bne.n	800ef3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800ef74:	2301      	movs	r3, #1
 800ef76:	71ab      	strb	r3, [r5, #6]
 800ef78:	e7e0      	b.n	800ef3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800ef7a:	4651      	mov	r1, sl
 800ef7c:	4658      	mov	r0, fp
 800ef7e:	f000 fe27 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d0e0      	beq.n	800ef48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 800ef86:	2000      	movs	r0, #0
 800ef88:	f885 9005 	strb.w	r9, [r5, #5]
 800ef8c:	b001      	add	sp, #4
 800ef8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef92:	bf00      	nop

0800ef94 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800ef94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	4607      	mov	r7, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	4615      	mov	r5, r2
 800ef9e:	461e      	mov	r6, r3
 800efa0:	f000 fdd0 	bl	800fb44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800efa4:	b108      	cbz	r0, 800efaa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800efa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efaa:	68b8      	ldr	r0, [r7, #8]
 800efac:	6807      	ldr	r7, [r0, #0]
 800efae:	4621      	mov	r1, r4
 800efb0:	69bc      	ldr	r4, [r7, #24]
 800efb2:	4633      	mov	r3, r6
 800efb4:	462a      	mov	r2, r5
 800efb6:	46a4      	mov	ip, r4
 800efb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efbc:	4760      	bx	ip
 800efbe:	bf00      	nop

0800efc0 <__aeabi_atexit>:
 800efc0:	460b      	mov	r3, r1
 800efc2:	4601      	mov	r1, r0
 800efc4:	4618      	mov	r0, r3
 800efc6:	f001 bbac 	b.w	8010722 <__cxa_atexit>
 800efca:	bf00      	nop

0800efcc <_Znwj>:
 800efcc:	b510      	push	{r4, lr}
 800efce:	2800      	cmp	r0, #0
 800efd0:	bf14      	ite	ne
 800efd2:	4604      	movne	r4, r0
 800efd4:	2401      	moveq	r4, #1
 800efd6:	4620      	mov	r0, r4
 800efd8:	f002 f99c 	bl	8011314 <malloc>
 800efdc:	b100      	cbz	r0, 800efe0 <_Znwj+0x14>
 800efde:	bd10      	pop	{r4, pc}
 800efe0:	f000 fd6e 	bl	800fac0 <_ZSt15get_new_handlerv>
 800efe4:	b108      	cbz	r0, 800efea <_Znwj+0x1e>
 800efe6:	4780      	blx	r0
 800efe8:	e7f5      	b.n	800efd6 <_Znwj+0xa>
 800efea:	2004      	movs	r0, #4
 800efec:	f000 f87a 	bl	800f0e4 <__cxa_allocate_exception>
 800eff0:	4b02      	ldr	r3, [pc, #8]	; (800effc <_Znwj+0x30>)
 800eff2:	6003      	str	r3, [r0, #0]
 800eff4:	4a02      	ldr	r2, [pc, #8]	; (800f000 <_Znwj+0x34>)
 800eff6:	4903      	ldr	r1, [pc, #12]	; (800f004 <_Znwj+0x38>)
 800eff8:	f000 f8d2 	bl	800f1a0 <__cxa_throw>
 800effc:	08016938 	.word	0x08016938
 800f000:	0800f295 	.word	0x0800f295
 800f004:	08016914 	.word	0x08016914

0800f008 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800f008:	b4f0      	push	{r4, r5, r6, r7}
 800f00a:	4c1b      	ldr	r4, [pc, #108]	; (800f078 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 800f00c:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800f010:	6861      	ldr	r1, [r4, #4]
 800f012:	f1a0 0608 	sub.w	r6, r0, #8
 800f016:	b1c9      	cbz	r1, 800f04c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800f018:	19f5      	adds	r5, r6, r7
 800f01a:	42a9      	cmp	r1, r5
 800f01c:	d01b      	beq.n	800f056 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 800f01e:	684a      	ldr	r2, [r1, #4]
 800f020:	b32a      	cbz	r2, 800f06e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800f022:	4295      	cmp	r5, r2
 800f024:	d303      	bcc.n	800f02e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 800f026:	e022      	b.n	800f06e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800f028:	429d      	cmp	r5, r3
 800f02a:	d205      	bcs.n	800f038 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800f02c:	461a      	mov	r2, r3
 800f02e:	6853      	ldr	r3, [r2, #4]
 800f030:	1d0c      	adds	r4, r1, #4
 800f032:	4611      	mov	r1, r2
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1f7      	bne.n	800f028 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800f038:	6811      	ldr	r1, [r2, #0]
 800f03a:	1855      	adds	r5, r2, r1
 800f03c:	42ae      	cmp	r6, r5
 800f03e:	d013      	beq.n	800f068 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 800f040:	f840 3c04 	str.w	r3, [r0, #-4]
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	605e      	str	r6, [r3, #4]
 800f048:	bcf0      	pop	{r4, r5, r6, r7}
 800f04a:	4770      	bx	lr
 800f04c:	f840 1c04 	str.w	r1, [r0, #-4]
 800f050:	6066      	str	r6, [r4, #4]
 800f052:	bcf0      	pop	{r4, r5, r6, r7}
 800f054:	4770      	bx	lr
 800f056:	680b      	ldr	r3, [r1, #0]
 800f058:	684a      	ldr	r2, [r1, #4]
 800f05a:	f840 2c04 	str.w	r2, [r0, #-4]
 800f05e:	441f      	add	r7, r3
 800f060:	f840 7c08 	str.w	r7, [r0, #-8]
 800f064:	6066      	str	r6, [r4, #4]
 800f066:	e7ef      	b.n	800f048 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800f068:	440f      	add	r7, r1
 800f06a:	6017      	str	r7, [r2, #0]
 800f06c:	e7ec      	b.n	800f048 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800f06e:	4613      	mov	r3, r2
 800f070:	3404      	adds	r4, #4
 800f072:	460a      	mov	r2, r1
 800f074:	e7e0      	b.n	800f038 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800f076:	bf00      	nop
 800f078:	20001c60 	.word	0x20001c60

0800f07c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800f07c:	b430      	push	{r4, r5}
 800f07e:	4c18      	ldr	r4, [pc, #96]	; (800f0e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 800f080:	f100 0108 	add.w	r1, r0, #8
 800f084:	6863      	ldr	r3, [r4, #4]
 800f086:	2908      	cmp	r1, #8
 800f088:	bf38      	it	cc
 800f08a:	2108      	movcc	r1, #8
 800f08c:	b313      	cbz	r3, 800f0d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 800f08e:	3107      	adds	r1, #7
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	f021 0107 	bic.w	r1, r1, #7
 800f096:	4291      	cmp	r1, r2
 800f098:	d804      	bhi.n	800f0a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800f09a:	e01d      	b.n	800f0d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 800f09c:	6802      	ldr	r2, [r0, #0]
 800f09e:	4291      	cmp	r1, r2
 800f0a0:	d905      	bls.n	800f0ae <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	6858      	ldr	r0, [r3, #4]
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d1f8      	bne.n	800f09c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 800f0aa:	bc30      	pop	{r4, r5}
 800f0ac:	4770      	bx	lr
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	1a52      	subs	r2, r2, r1
 800f0b2:	2a07      	cmp	r2, #7
 800f0b4:	d90a      	bls.n	800f0cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 800f0b6:	1845      	adds	r5, r0, r1
 800f0b8:	6844      	ldr	r4, [r0, #4]
 800f0ba:	606c      	str	r4, [r5, #4]
 800f0bc:	681c      	ldr	r4, [r3, #0]
 800f0be:	5042      	str	r2, [r0, r1]
 800f0c0:	6021      	str	r1, [r4, #0]
 800f0c2:	601d      	str	r5, [r3, #0]
 800f0c4:	f104 0008 	add.w	r0, r4, #8
 800f0c8:	bc30      	pop	{r4, r5}
 800f0ca:	4770      	bx	lr
 800f0cc:	6842      	ldr	r2, [r0, #4]
 800f0ce:	601a      	str	r2, [r3, #0]
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	e7f7      	b.n	800f0c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	e7e8      	b.n	800f0aa <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 800f0d8:	4618      	mov	r0, r3
 800f0da:	1d23      	adds	r3, r4, #4
 800f0dc:	e7e8      	b.n	800f0b0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800f0de:	bf00      	nop
 800f0e0:	20001c60 	.word	0x20001c60

0800f0e4 <__cxa_allocate_exception>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f002 f912 	bl	8011314 <malloc>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	b138      	cbz	r0, 800f104 <__cxa_allocate_exception+0x20>
 800f0f4:	2280      	movs	r2, #128	; 0x80
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f002 fb6f 	bl	80117dc <memset>
 800f0fe:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	4628      	mov	r0, r5
 800f106:	f7ff ffb9 	bl	800f07c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800f10a:	4604      	mov	r4, r0
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d1f1      	bne.n	800f0f4 <__cxa_allocate_exception+0x10>
 800f110:	f000 fefc 	bl	800ff0c <_ZSt9terminatev>

0800f114 <__cxa_free_exception>:
 800f114:	4a06      	ldr	r2, [pc, #24]	; (800f130 <__cxa_free_exception+0x1c>)
 800f116:	6893      	ldr	r3, [r2, #8]
 800f118:	3880      	subs	r0, #128	; 0x80
 800f11a:	4298      	cmp	r0, r3
 800f11c:	d905      	bls.n	800f12a <__cxa_free_exception+0x16>
 800f11e:	68d2      	ldr	r2, [r2, #12]
 800f120:	4413      	add	r3, r2
 800f122:	4298      	cmp	r0, r3
 800f124:	d201      	bcs.n	800f12a <__cxa_free_exception+0x16>
 800f126:	f7ff bf6f 	b.w	800f008 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800f12a:	f002 b8fb 	b.w	8011324 <free>
 800f12e:	bf00      	nop
 800f130:	20001c60 	.word	0x20001c60

0800f134 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4c08      	ldr	r4, [pc, #32]	; (800f158 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800f138:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800f13c:	4628      	mov	r0, r5
 800f13e:	60e5      	str	r5, [r4, #12]
 800f140:	f002 f8e8 	bl	8011314 <malloc>
 800f144:	60a0      	str	r0, [r4, #8]
 800f146:	b120      	cbz	r0, 800f152 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800f148:	2300      	movs	r3, #0
 800f14a:	6060      	str	r0, [r4, #4]
 800f14c:	6005      	str	r5, [r0, #0]
 800f14e:	6043      	str	r3, [r0, #4]
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	60e0      	str	r0, [r4, #12]
 800f154:	6060      	str	r0, [r4, #4]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	20001c60 	.word	0x20001c60

0800f15c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800f15c:	2801      	cmp	r0, #1
 800f15e:	b510      	push	{r4, lr}
 800f160:	d81a      	bhi.n	800f198 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800f162:	f3bf 8f5b 	dmb	ish
 800f166:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800f16a:	e853 2f00 	ldrex	r2, [r3]
 800f16e:	3a01      	subs	r2, #1
 800f170:	e843 2000 	strex	r0, r2, [r3]
 800f174:	2800      	cmp	r0, #0
 800f176:	d1f8      	bne.n	800f16a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800f178:	f3bf 8f5b 	dmb	ish
 800f17c:	b95a      	cbnz	r2, 800f196 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800f17e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800f182:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800f186:	b10b      	cbz	r3, 800f18c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800f188:	4620      	mov	r0, r4
 800f18a:	4798      	blx	r3
 800f18c:	4620      	mov	r0, r4
 800f18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f192:	f7ff bfbf 	b.w	800f114 <__cxa_free_exception>
 800f196:	bd10      	pop	{r4, pc}
 800f198:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800f19c:	f000 fea2 	bl	800fee4 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f1a0 <__cxa_throw>:
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	460f      	mov	r7, r1
 800f1a6:	4616      	mov	r6, r2
 800f1a8:	f000 f890 	bl	800f2cc <__cxa_get_globals>
 800f1ac:	6843      	ldr	r3, [r0, #4]
 800f1ae:	2501      	movs	r5, #1
 800f1b0:	442b      	add	r3, r5
 800f1b2:	6043      	str	r3, [r0, #4]
 800f1b4:	f844 7c78 	str.w	r7, [r4, #-120]
 800f1b8:	f844 6c74 	str.w	r6, [r4, #-116]
 800f1bc:	f844 5c80 	str.w	r5, [r4, #-128]
 800f1c0:	f000 fec4 	bl	800ff4c <_ZSt14get_unexpectedv>
 800f1c4:	f844 0c70 	str.w	r0, [r4, #-112]
 800f1c8:	f000 feb8 	bl	800ff3c <_ZSt13get_terminatev>
 800f1cc:	2347      	movs	r3, #71	; 0x47
 800f1ce:	2243      	movs	r2, #67	; 0x43
 800f1d0:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 800f1d4:	4910      	ldr	r1, [pc, #64]	; (800f218 <__cxa_throw+0x78>)
 800f1d6:	f804 3c58 	strb.w	r3, [r4, #-88]
 800f1da:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800f1de:	232b      	movs	r3, #43	; 0x2b
 800f1e0:	2755      	movs	r7, #85	; 0x55
 800f1e2:	2600      	movs	r6, #0
 800f1e4:	f844 0c6c 	str.w	r0, [r4, #-108]
 800f1e8:	f804 ec57 	strb.w	lr, [r4, #-87]
 800f1ec:	f844 1c50 	str.w	r1, [r4, #-80]
 800f1f0:	f804 2c55 	strb.w	r2, [r4, #-85]
 800f1f4:	f804 2c54 	strb.w	r2, [r4, #-84]
 800f1f8:	f804 3c53 	strb.w	r3, [r4, #-83]
 800f1fc:	f804 3c52 	strb.w	r3, [r4, #-82]
 800f200:	f804 7c56 	strb.w	r7, [r4, #-86]
 800f204:	f804 6c51 	strb.w	r6, [r4, #-81]
 800f208:	4628      	mov	r0, r5
 800f20a:	f7f8 ff33 	bl	8008074 <_Unwind_RaiseException>
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 fde4 	bl	800fddc <__cxa_begin_catch>
 800f214:	f000 fe7a 	bl	800ff0c <_ZSt9terminatev>
 800f218:	0800f15d 	.word	0x0800f15d

0800f21c <__cxa_rethrow>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	f000 f855 	bl	800f2cc <__cxa_get_globals>
 800f222:	6842      	ldr	r2, [r0, #4]
 800f224:	6804      	ldr	r4, [r0, #0]
 800f226:	3201      	adds	r2, #1
 800f228:	6042      	str	r2, [r0, #4]
 800f22a:	b164      	cbz	r4, 800f246 <__cxa_rethrow+0x2a>
 800f22c:	f894 2020 	ldrb.w	r2, [r4, #32]
 800f230:	2a47      	cmp	r2, #71	; 0x47
 800f232:	d00a      	beq.n	800f24a <__cxa_rethrow+0x2e>
 800f234:	2200      	movs	r2, #0
 800f236:	6002      	str	r2, [r0, #0]
 800f238:	3420      	adds	r4, #32
 800f23a:	4620      	mov	r0, r4
 800f23c:	f7f8 ff3e 	bl	80080bc <_Unwind_Resume_or_Rethrow>
 800f240:	4620      	mov	r0, r4
 800f242:	f000 fdcb 	bl	800fddc <__cxa_begin_catch>
 800f246:	f000 fe61 	bl	800ff0c <_ZSt9terminatev>
 800f24a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800f24e:	2a4e      	cmp	r2, #78	; 0x4e
 800f250:	d1f0      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f252:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800f256:	2a55      	cmp	r2, #85	; 0x55
 800f258:	d1ec      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f25a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800f25e:	2a43      	cmp	r2, #67	; 0x43
 800f260:	d1e8      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f262:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800f266:	2a43      	cmp	r2, #67	; 0x43
 800f268:	d1e4      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f26a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800f26e:	2a2b      	cmp	r2, #43	; 0x2b
 800f270:	d1e0      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f272:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800f276:	2a2b      	cmp	r2, #43	; 0x2b
 800f278:	d1dc      	bne.n	800f234 <__cxa_rethrow+0x18>
 800f27a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800f27e:	2a01      	cmp	r2, #1
 800f280:	d8d8      	bhi.n	800f234 <__cxa_rethrow+0x18>
 800f282:	6962      	ldr	r2, [r4, #20]
 800f284:	4252      	negs	r2, r2
 800f286:	6162      	str	r2, [r4, #20]
 800f288:	e7d6      	b.n	800f238 <__cxa_rethrow+0x1c>
 800f28a:	bf00      	nop

0800f28c <_ZNKSt9bad_alloc4whatEv>:
 800f28c:	4800      	ldr	r0, [pc, #0]	; (800f290 <_ZNKSt9bad_alloc4whatEv+0x4>)
 800f28e:	4770      	bx	lr
 800f290:	08016904 	.word	0x08016904

0800f294 <_ZNSt9bad_allocD1Ev>:
 800f294:	b510      	push	{r4, lr}
 800f296:	4b03      	ldr	r3, [pc, #12]	; (800f2a4 <_ZNSt9bad_allocD1Ev+0x10>)
 800f298:	6003      	str	r3, [r0, #0]
 800f29a:	4604      	mov	r4, r0
 800f29c:	f000 fcee 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bd10      	pop	{r4, pc}
 800f2a4:	08016938 	.word	0x08016938

0800f2a8 <_ZNSt9bad_allocD0Ev>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <_ZNSt9bad_allocD0Ev+0x18>)
 800f2ac:	6003      	str	r3, [r0, #0]
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	f000 fce4 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	2104      	movs	r1, #4
 800f2b8:	f000 fc00 	bl	800fabc <_ZdlPvj>
 800f2bc:	4620      	mov	r0, r4
 800f2be:	bd10      	pop	{r4, pc}
 800f2c0:	08016938 	.word	0x08016938

0800f2c4 <__cxa_get_globals_fast>:
 800f2c4:	4800      	ldr	r0, [pc, #0]	; (800f2c8 <__cxa_get_globals_fast+0x4>)
 800f2c6:	4770      	bx	lr
 800f2c8:	20001c70 	.word	0x20001c70

0800f2cc <__cxa_get_globals>:
 800f2cc:	4800      	ldr	r0, [pc, #0]	; (800f2d0 <__cxa_get_globals+0x4>)
 800f2ce:	4770      	bx	lr
 800f2d0:	20001c70 	.word	0x20001c70

0800f2d4 <__cxa_end_cleanup>:
 800f2d4:	b41e      	push	{r1, r2, r3, r4}
 800f2d6:	f000 f891 	bl	800f3fc <__gnu_end_cleanup>
 800f2da:	bc1e      	pop	{r1, r2, r3, r4}
 800f2dc:	f7f8 fedc 	bl	8008098 <_Unwind_Resume>

0800f2e0 <__cxa_type_match>:
 800f2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e2:	7802      	ldrb	r2, [r0, #0]
 800f2e4:	2a47      	cmp	r2, #71	; 0x47
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	460d      	mov	r5, r1
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	d01e      	beq.n	800f32c <__cxa_type_match+0x4c>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	4c27      	ldr	r4, [pc, #156]	; (800f390 <__cxa_type_match+0xb0>)
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	4798      	blx	r3
 800f2fc:	b180      	cbz	r0, 800f320 <__cxa_type_match+0x40>
 800f2fe:	9b01      	ldr	r3, [sp, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	2602      	movs	r6, #2
 800f306:	682b      	ldr	r3, [r5, #0]
 800f308:	4621      	mov	r1, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	691c      	ldr	r4, [r3, #16]
 800f30e:	aa01      	add	r2, sp, #4
 800f310:	2301      	movs	r3, #1
 800f312:	47a0      	blx	r4
 800f314:	b130      	cbz	r0, 800f324 <__cxa_type_match+0x44>
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	603b      	str	r3, [r7, #0]
 800f31a:	4630      	mov	r0, r6
 800f31c:	b003      	add	sp, #12
 800f31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f320:	2601      	movs	r6, #1
 800f322:	e7f0      	b.n	800f306 <__cxa_type_match+0x26>
 800f324:	4606      	mov	r6, r0
 800f326:	4630      	mov	r0, r6
 800f328:	b003      	add	sp, #12
 800f32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f32c:	7843      	ldrb	r3, [r0, #1]
 800f32e:	2b4e      	cmp	r3, #78	; 0x4e
 800f330:	d1dd      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f332:	7883      	ldrb	r3, [r0, #2]
 800f334:	2b55      	cmp	r3, #85	; 0x55
 800f336:	d1da      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f338:	78c3      	ldrb	r3, [r0, #3]
 800f33a:	2b43      	cmp	r3, #67	; 0x43
 800f33c:	d019      	beq.n	800f372 <__cxa_type_match+0x92>
 800f33e:	78c3      	ldrb	r3, [r0, #3]
 800f340:	2b43      	cmp	r3, #67	; 0x43
 800f342:	d1d4      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f344:	7903      	ldrb	r3, [r0, #4]
 800f346:	2b43      	cmp	r3, #67	; 0x43
 800f348:	d1d1      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f34a:	7943      	ldrb	r3, [r0, #5]
 800f34c:	2b2b      	cmp	r3, #43	; 0x2b
 800f34e:	d1ce      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f350:	7983      	ldrb	r3, [r0, #6]
 800f352:	2b2b      	cmp	r3, #43	; 0x2b
 800f354:	d1cb      	bne.n	800f2ee <__cxa_type_match+0xe>
 800f356:	79c3      	ldrb	r3, [r0, #7]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d8c8      	bhi.n	800f2ee <__cxa_type_match+0xe>
 800f35c:	d004      	beq.n	800f368 <__cxa_type_match+0x88>
 800f35e:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800f362:	3058      	adds	r0, #88	; 0x58
 800f364:	9001      	str	r0, [sp, #4]
 800f366:	e7c5      	b.n	800f2f4 <__cxa_type_match+0x14>
 800f368:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800f36c:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800f370:	e7f8      	b.n	800f364 <__cxa_type_match+0x84>
 800f372:	7903      	ldrb	r3, [r0, #4]
 800f374:	2b46      	cmp	r3, #70	; 0x46
 800f376:	d1e2      	bne.n	800f33e <__cxa_type_match+0x5e>
 800f378:	7943      	ldrb	r3, [r0, #5]
 800f37a:	2b4f      	cmp	r3, #79	; 0x4f
 800f37c:	d1df      	bne.n	800f33e <__cxa_type_match+0x5e>
 800f37e:	7983      	ldrb	r3, [r0, #6]
 800f380:	2b52      	cmp	r3, #82	; 0x52
 800f382:	d1dc      	bne.n	800f33e <__cxa_type_match+0x5e>
 800f384:	79c3      	ldrb	r3, [r0, #7]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1d9      	bne.n	800f33e <__cxa_type_match+0x5e>
 800f38a:	9301      	str	r3, [sp, #4]
 800f38c:	4c01      	ldr	r4, [pc, #4]	; (800f394 <__cxa_type_match+0xb4>)
 800f38e:	e7b1      	b.n	800f2f4 <__cxa_type_match+0x14>
 800f390:	080169d4 	.word	0x080169d4
 800f394:	080169cc 	.word	0x080169cc

0800f398 <__cxa_begin_cleanup>:
 800f398:	b510      	push	{r4, lr}
 800f39a:	4604      	mov	r4, r0
 800f39c:	f7ff ff96 	bl	800f2cc <__cxa_get_globals>
 800f3a0:	7823      	ldrb	r3, [r4, #0]
 800f3a2:	2b47      	cmp	r3, #71	; 0x47
 800f3a4:	f1a4 0220 	sub.w	r2, r4, #32
 800f3a8:	d004      	beq.n	800f3b4 <__cxa_begin_cleanup+0x1c>
 800f3aa:	6883      	ldr	r3, [r0, #8]
 800f3ac:	bb23      	cbnz	r3, 800f3f8 <__cxa_begin_cleanup+0x60>
 800f3ae:	6082      	str	r2, [r0, #8]
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	bd10      	pop	{r4, pc}
 800f3b4:	7863      	ldrb	r3, [r4, #1]
 800f3b6:	2b4e      	cmp	r3, #78	; 0x4e
 800f3b8:	d1f7      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3ba:	78a3      	ldrb	r3, [r4, #2]
 800f3bc:	2b55      	cmp	r3, #85	; 0x55
 800f3be:	d1f4      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3c0:	78e3      	ldrb	r3, [r4, #3]
 800f3c2:	2b43      	cmp	r3, #67	; 0x43
 800f3c4:	d1f1      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3c6:	7923      	ldrb	r3, [r4, #4]
 800f3c8:	2b43      	cmp	r3, #67	; 0x43
 800f3ca:	d1ee      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3cc:	7963      	ldrb	r3, [r4, #5]
 800f3ce:	2b2b      	cmp	r3, #43	; 0x2b
 800f3d0:	d1eb      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3d2:	79a3      	ldrb	r3, [r4, #6]
 800f3d4:	2b2b      	cmp	r3, #43	; 0x2b
 800f3d6:	d1e8      	bne.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3d8:	79e3      	ldrb	r3, [r4, #7]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d8e5      	bhi.n	800f3aa <__cxa_begin_cleanup+0x12>
 800f3de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3ea:	d1e1      	bne.n	800f3b0 <__cxa_begin_cleanup+0x18>
 800f3ec:	6883      	ldr	r3, [r0, #8]
 800f3ee:	f844 3c08 	str.w	r3, [r4, #-8]
 800f3f2:	6082      	str	r2, [r0, #8]
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	bd10      	pop	{r4, pc}
 800f3f8:	f000 fd88 	bl	800ff0c <_ZSt9terminatev>

0800f3fc <__gnu_end_cleanup>:
 800f3fc:	b508      	push	{r3, lr}
 800f3fe:	f7ff ff65 	bl	800f2cc <__cxa_get_globals>
 800f402:	6883      	ldr	r3, [r0, #8]
 800f404:	b383      	cbz	r3, 800f468 <__gnu_end_cleanup+0x6c>
 800f406:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f40a:	2a47      	cmp	r2, #71	; 0x47
 800f40c:	d004      	beq.n	800f418 <__gnu_end_cleanup+0x1c>
 800f40e:	2200      	movs	r2, #0
 800f410:	6082      	str	r2, [r0, #8]
 800f412:	f103 0020 	add.w	r0, r3, #32
 800f416:	bd08      	pop	{r3, pc}
 800f418:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f41c:	2a4e      	cmp	r2, #78	; 0x4e
 800f41e:	d1f6      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f420:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f424:	2a55      	cmp	r2, #85	; 0x55
 800f426:	d1f2      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f428:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f42c:	2a43      	cmp	r2, #67	; 0x43
 800f42e:	d1ee      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f430:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f434:	2a43      	cmp	r2, #67	; 0x43
 800f436:	d1ea      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f438:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f43c:	2a2b      	cmp	r2, #43	; 0x2b
 800f43e:	d1e6      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f440:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f444:	2a2b      	cmp	r2, #43	; 0x2b
 800f446:	d1e2      	bne.n	800f40e <__gnu_end_cleanup+0x12>
 800f448:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f44c:	2a01      	cmp	r2, #1
 800f44e:	d8de      	bhi.n	800f40e <__gnu_end_cleanup+0x12>
 800f450:	69da      	ldr	r2, [r3, #28]
 800f452:	3a01      	subs	r2, #1
 800f454:	61da      	str	r2, [r3, #28]
 800f456:	2a00      	cmp	r2, #0
 800f458:	d1db      	bne.n	800f412 <__gnu_end_cleanup+0x16>
 800f45a:	699a      	ldr	r2, [r3, #24]
 800f45c:	6082      	str	r2, [r0, #8]
 800f45e:	2200      	movs	r2, #0
 800f460:	619a      	str	r2, [r3, #24]
 800f462:	f103 0020 	add.w	r0, r3, #32
 800f466:	bd08      	pop	{r3, pc}
 800f468:	f000 fd50 	bl	800ff0c <_ZSt9terminatev>

0800f46c <_ZL28read_encoded_value_with_basehjPKhPj>:
 800f46c:	2850      	cmp	r0, #80	; 0x50
 800f46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f470:	d054      	beq.n	800f51c <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 800f472:	f000 040f 	and.w	r4, r0, #15
 800f476:	2c0c      	cmp	r4, #12
 800f478:	d84e      	bhi.n	800f518 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 800f47a:	e8df f004 	tbb	[pc, r4]
 800f47e:	3907      	.short	0x3907
 800f480:	4d170749 	.word	0x4d170749
 800f484:	1f4d4d4d 	.word	0x1f4d4d4d
 800f488:	071b      	.short	0x071b
 800f48a:	17          	.byte	0x17
 800f48b:	00          	.byte	0x00
 800f48c:	4615      	mov	r5, r2
 800f48e:	f855 4b04 	ldr.w	r4, [r5], #4
 800f492:	b144      	cbz	r4, 800f4a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800f494:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800f498:	2e10      	cmp	r6, #16
 800f49a:	bf08      	it	eq
 800f49c:	4611      	moveq	r1, r2
 800f49e:	440c      	add	r4, r1
 800f4a0:	0602      	lsls	r2, r0, #24
 800f4a2:	bf48      	it	mi
 800f4a4:	6824      	ldrmi	r4, [r4, #0]
 800f4a6:	601c      	str	r4, [r3, #0]
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ac:	4615      	mov	r5, r2
 800f4ae:	f855 4b08 	ldr.w	r4, [r5], #8
 800f4b2:	e7ee      	b.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4b4:	4615      	mov	r5, r2
 800f4b6:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800f4ba:	e7ea      	b.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4bc:	2400      	movs	r4, #0
 800f4be:	4627      	mov	r7, r4
 800f4c0:	4615      	mov	r5, r2
 800f4c2:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f4c6:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f4ca:	40be      	lsls	r6, r7
 800f4cc:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f4d0:	ea44 0406 	orr.w	r4, r4, r6
 800f4d4:	f107 0707 	add.w	r7, r7, #7
 800f4d8:	d1f3      	bne.n	800f4c2 <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 800f4da:	2f1f      	cmp	r7, #31
 800f4dc:	d8d9      	bhi.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4de:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f4e2:	d0d6      	beq.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f4e4:	f04f 36ff 	mov.w	r6, #4294967295
 800f4e8:	fa06 f707 	lsl.w	r7, r6, r7
 800f4ec:	433c      	orrs	r4, r7
 800f4ee:	e7d1      	b.n	800f494 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800f4f0:	2400      	movs	r4, #0
 800f4f2:	4627      	mov	r7, r4
 800f4f4:	4615      	mov	r5, r2
 800f4f6:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f4fa:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f4fe:	40be      	lsls	r6, r7
 800f500:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f504:	ea44 0406 	orr.w	r4, r4, r6
 800f508:	f107 0707 	add.w	r7, r7, #7
 800f50c:	d1f3      	bne.n	800f4f6 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 800f50e:	e7c0      	b.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f510:	4615      	mov	r5, r2
 800f512:	f835 4b02 	ldrh.w	r4, [r5], #2
 800f516:	e7bc      	b.n	800f492 <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f518:	f001 f8fc 	bl	8010714 <abort>
 800f51c:	3203      	adds	r2, #3
 800f51e:	f022 0503 	bic.w	r5, r2, #3
 800f522:	f855 4b04 	ldr.w	r4, [r5], #4
 800f526:	601c      	str	r4, [r3, #0]
 800f528:	4628      	mov	r0, r5
 800f52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800f52c:	28ff      	cmp	r0, #255	; 0xff
 800f52e:	d00d      	beq.n	800f54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f530:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800f534:	2820      	cmp	r0, #32
 800f536:	d015      	beq.n	800f564 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800f538:	d90a      	bls.n	800f550 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800f53a:	2840      	cmp	r0, #64	; 0x40
 800f53c:	d00f      	beq.n	800f55e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 800f53e:	2850      	cmp	r0, #80	; 0x50
 800f540:	d004      	beq.n	800f54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f542:	2830      	cmp	r0, #48	; 0x30
 800f544:	d108      	bne.n	800f558 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800f546:	4608      	mov	r0, r1
 800f548:	f7f8 bfaa 	b.w	80084a0 <_Unwind_GetDataRelBase>
 800f54c:	2000      	movs	r0, #0
 800f54e:	4770      	bx	lr
 800f550:	2800      	cmp	r0, #0
 800f552:	d0fb      	beq.n	800f54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f554:	2810      	cmp	r0, #16
 800f556:	d0f9      	beq.n	800f54c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f558:	b508      	push	{r3, lr}
 800f55a:	f001 f8db 	bl	8010714 <abort>
 800f55e:	4608      	mov	r0, r1
 800f560:	f7f8 bf8a 	b.w	8008478 <_Unwind_GetRegionStart>
 800f564:	4608      	mov	r0, r1
 800f566:	f7f8 bf97 	b.w	8008498 <_Unwind_GetTextRelBase>
 800f56a:	bf00      	nop

0800f56c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	460c      	mov	r4, r1
 800f570:	4615      	mov	r5, r2
 800f572:	4607      	mov	r7, r0
 800f574:	2800      	cmp	r0, #0
 800f576:	d044      	beq.n	800f602 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 800f578:	f7f8 ff7e 	bl	8008478 <_Unwind_GetRegionStart>
 800f57c:	6028      	str	r0, [r5, #0]
 800f57e:	7826      	ldrb	r6, [r4, #0]
 800f580:	2eff      	cmp	r6, #255	; 0xff
 800f582:	f104 0401 	add.w	r4, r4, #1
 800f586:	d032      	beq.n	800f5ee <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 800f588:	4639      	mov	r1, r7
 800f58a:	4630      	mov	r0, r6
 800f58c:	f7ff ffce 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f590:	4622      	mov	r2, r4
 800f592:	4601      	mov	r1, r0
 800f594:	1d2b      	adds	r3, r5, #4
 800f596:	4630      	mov	r0, r6
 800f598:	f7ff ff68 	bl	800f46c <_ZL28read_encoded_value_with_basehjPKhPj>
 800f59c:	4604      	mov	r4, r0
 800f59e:	1c60      	adds	r0, r4, #1
 800f5a0:	7823      	ldrb	r3, [r4, #0]
 800f5a2:	752b      	strb	r3, [r5, #20]
 800f5a4:	2bff      	cmp	r3, #255	; 0xff
 800f5a6:	d029      	beq.n	800f5fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 800f5a8:	2310      	movs	r3, #16
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	752b      	strb	r3, [r5, #20]
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f5b4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f5b8:	4093      	lsls	r3, r2
 800f5ba:	0609      	lsls	r1, r1, #24
 800f5bc:	ea44 0403 	orr.w	r4, r4, r3
 800f5c0:	f102 0207 	add.w	r2, r2, #7
 800f5c4:	d4f4      	bmi.n	800f5b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 800f5c6:	4404      	add	r4, r0
 800f5c8:	60ec      	str	r4, [r5, #12]
 800f5ca:	7803      	ldrb	r3, [r0, #0]
 800f5cc:	756b      	strb	r3, [r5, #21]
 800f5ce:	2400      	movs	r4, #0
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f5d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f5dc:	4093      	lsls	r3, r2
 800f5de:	431c      	orrs	r4, r3
 800f5e0:	060b      	lsls	r3, r1, #24
 800f5e2:	f102 0207 	add.w	r2, r2, #7
 800f5e6:	d4f5      	bmi.n	800f5d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 800f5e8:	4404      	add	r4, r0
 800f5ea:	612c      	str	r4, [r5, #16]
 800f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ee:	6068      	str	r0, [r5, #4]
 800f5f0:	7823      	ldrb	r3, [r4, #0]
 800f5f2:	752b      	strb	r3, [r5, #20]
 800f5f4:	2bff      	cmp	r3, #255	; 0xff
 800f5f6:	f104 0001 	add.w	r0, r4, #1
 800f5fa:	d1d5      	bne.n	800f5a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	60eb      	str	r3, [r5, #12]
 800f600:	e7e3      	b.n	800f5ca <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800f602:	e7bb      	b.n	800f57c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0800f604 <__gxx_personality_v0>:
 800f604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f608:	f000 0403 	and.w	r4, r0, #3
 800f60c:	b097      	sub	sp, #92	; 0x5c
 800f60e:	2300      	movs	r3, #0
 800f610:	2c01      	cmp	r4, #1
 800f612:	4689      	mov	r9, r1
 800f614:	4617      	mov	r7, r2
 800f616:	930a      	str	r3, [sp, #40]	; 0x28
 800f618:	d01e      	beq.n	800f658 <__gxx_personality_v0+0x54>
 800f61a:	d30e      	bcc.n	800f63a <__gxx_personality_v0+0x36>
 800f61c:	2c02      	cmp	r4, #2
 800f61e:	d10a      	bne.n	800f636 <__gxx_personality_v0+0x32>
 800f620:	4639      	mov	r1, r7
 800f622:	4648      	mov	r0, r9
 800f624:	f7f8 ff14 	bl	8008450 <__gnu_unwind_frame>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f000 80a5 	beq.w	800f778 <__gxx_personality_v0+0x174>
 800f62e:	2009      	movs	r0, #9
 800f630:	b017      	add	sp, #92	; 0x5c
 800f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f636:	f001 f86d 	bl	8010714 <abort>
 800f63a:	0700      	lsls	r0, r0, #28
 800f63c:	d4f0      	bmi.n	800f620 <__gxx_personality_v0+0x1c>
 800f63e:	2301      	movs	r3, #1
 800f640:	9303      	str	r3, [sp, #12]
 800f642:	aa16      	add	r2, sp, #88	; 0x58
 800f644:	2300      	movs	r3, #0
 800f646:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f64a:	4619      	mov	r1, r3
 800f64c:	9200      	str	r2, [sp, #0]
 800f64e:	4638      	mov	r0, r7
 800f650:	220c      	movs	r2, #12
 800f652:	f7f8 f9a1 	bl	8007998 <_Unwind_VRS_Set>
 800f656:	e00f      	b.n	800f678 <__gxx_personality_v0+0x74>
 800f658:	f010 0408 	ands.w	r4, r0, #8
 800f65c:	f000 8090 	beq.w	800f780 <__gxx_personality_v0+0x17c>
 800f660:	aa16      	add	r2, sp, #88	; 0x58
 800f662:	f044 0402 	orr.w	r4, r4, #2
 800f666:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800f66a:	4638      	mov	r0, r7
 800f66c:	9200      	str	r2, [sp, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	220c      	movs	r2, #12
 800f672:	9403      	str	r4, [sp, #12]
 800f674:	f7f8 f990 	bl	8007998 <_Unwind_VRS_Set>
 800f678:	4638      	mov	r0, r7
 800f67a:	f7f8 ff03 	bl	8008484 <_Unwind_GetLanguageSpecificData>
 800f67e:	9005      	str	r0, [sp, #20]
 800f680:	2800      	cmp	r0, #0
 800f682:	d0cd      	beq.n	800f620 <__gxx_personality_v0+0x1c>
 800f684:	ab10      	add	r3, sp, #64	; 0x40
 800f686:	461a      	mov	r2, r3
 800f688:	9905      	ldr	r1, [sp, #20]
 800f68a:	9306      	str	r3, [sp, #24]
 800f68c:	4638      	mov	r0, r7
 800f68e:	f7ff ff6d 	bl	800f56c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800f692:	4639      	mov	r1, r7
 800f694:	4604      	mov	r4, r0
 800f696:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f69a:	f7ff ff47 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f69e:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9012      	str	r0, [sp, #72]	; 0x48
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	220f      	movs	r2, #15
 800f6aa:	f8cd b000 	str.w	fp, [sp]
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	f7f8 f94c 	bl	800794c <_Unwind_VRS_Get>
 800f6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6b8:	f023 0301 	bic.w	r3, r3, #1
 800f6bc:	42a2      	cmp	r2, r4
 800f6be:	f103 36ff 	add.w	r6, r3, #4294967295
 800f6c2:	d975      	bls.n	800f7b0 <__gxx_personality_v0+0x1ac>
 800f6c4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f6c8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f6cc:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f7ff ff2a 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f6d8:	4622      	mov	r2, r4
 800f6da:	4653      	mov	r3, sl
 800f6dc:	4601      	mov	r1, r0
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f7ff fec4 	bl	800f46c <_ZL28read_encoded_value_with_basehjPKhPj>
 800f6e4:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f7ff ff1d 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f6f2:	462a      	mov	r2, r5
 800f6f4:	4643      	mov	r3, r8
 800f6f6:	4601      	mov	r1, r0
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f7ff feb7 	bl	800f46c <_ZL28read_encoded_value_with_basehjPKhPj>
 800f6fe:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f702:	4605      	mov	r5, r0
 800f704:	2100      	movs	r1, #0
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff ff10 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f70c:	462a      	mov	r2, r5
 800f70e:	4601      	mov	r1, r0
 800f710:	465b      	mov	r3, fp
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff feaa 	bl	800f46c <_ZL28read_encoded_value_with_basehjPKhPj>
 800f718:	4604      	mov	r4, r0
 800f71a:	2000      	movs	r0, #0
 800f71c:	4602      	mov	r2, r0
 800f71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f722:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f726:	4093      	lsls	r3, r2
 800f728:	0609      	lsls	r1, r1, #24
 800f72a:	ea40 0003 	orr.w	r0, r0, r3
 800f72e:	f102 0207 	add.w	r2, r2, #7
 800f732:	d4f4      	bmi.n	800f71e <__gxx_personality_v0+0x11a>
 800f734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f738:	4413      	add	r3, r2
 800f73a:	429e      	cmp	r6, r3
 800f73c:	d231      	bcs.n	800f7a2 <__gxx_personality_v0+0x19e>
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	07db      	lsls	r3, r3, #31
 800f742:	d539      	bpl.n	800f7b8 <__gxx_personality_v0+0x1b4>
 800f744:	2500      	movs	r5, #0
 800f746:	9504      	str	r5, [sp, #16]
 800f748:	2300      	movs	r3, #0
 800f74a:	4619      	mov	r1, r3
 800f74c:	220d      	movs	r2, #13
 800f74e:	f8cd 8000 	str.w	r8, [sp]
 800f752:	4638      	mov	r0, r7
 800f754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f756:	f7f8 f8f9 	bl	800794c <_Unwind_VRS_Get>
 800f75a:	9a05      	ldr	r2, [sp, #20]
 800f75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f75e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 800f768:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800f76c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f770:	f8c9 3020 	str.w	r3, [r9, #32]
 800f774:	2006      	movs	r0, #6
 800f776:	e75b      	b.n	800f630 <__gxx_personality_v0+0x2c>
 800f778:	2008      	movs	r0, #8
 800f77a:	b017      	add	sp, #92	; 0x5c
 800f77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f780:	ab10      	add	r3, sp, #64	; 0x40
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	9306      	str	r3, [sp, #24]
 800f786:	220d      	movs	r2, #13
 800f788:	4623      	mov	r3, r4
 800f78a:	4621      	mov	r1, r4
 800f78c:	4638      	mov	r0, r7
 800f78e:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800f792:	f7f8 f8db 	bl	800794c <_Unwind_VRS_Get>
 800f796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f798:	429d      	cmp	r5, r3
 800f79a:	d012      	beq.n	800f7c2 <__gxx_personality_v0+0x1be>
 800f79c:	2302      	movs	r3, #2
 800f79e:	9303      	str	r3, [sp, #12]
 800f7a0:	e74f      	b.n	800f642 <__gxx_personality_v0+0x3e>
 800f7a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7a4:	4413      	add	r3, r2
 800f7a6:	429e      	cmp	r6, r3
 800f7a8:	d359      	bcc.n	800f85e <__gxx_personality_v0+0x25a>
 800f7aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7ac:	42a3      	cmp	r3, r4
 800f7ae:	d88d      	bhi.n	800f6cc <__gxx_personality_v0+0xc8>
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	9504      	str	r5, [sp, #16]
 800f7b4:	2401      	movs	r4, #1
 800f7b6:	e105      	b.n	800f9c4 <__gxx_personality_v0+0x3c0>
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	071b      	lsls	r3, r3, #28
 800f7bc:	d54c      	bpl.n	800f858 <__gxx_personality_v0+0x254>
 800f7be:	f000 fba5 	bl	800ff0c <_ZSt9terminatev>
 800f7c2:	aa16      	add	r2, sp, #88	; 0x58
 800f7c4:	4623      	mov	r3, r4
 800f7c6:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	9200      	str	r2, [sp, #0]
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	220c      	movs	r2, #12
 800f7d2:	f7f8 f8e1 	bl	8007998 <_Unwind_VRS_Set>
 800f7d6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d03b      	beq.n	800f858 <__gxx_personality_v0+0x254>
 800f7e0:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 800f7e4:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800f7e8:	2403      	movs	r4, #3
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	f2c0 8106 	blt.w	800f9fc <__gxx_personality_v0+0x3f8>
 800f7f0:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f7f4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f7f8:	a916      	add	r1, sp, #88	; 0x58
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f841 9d28 	str.w	r9, [r1, #-40]!
 800f800:	461a      	mov	r2, r3
 800f802:	9100      	str	r1, [sp, #0]
 800f804:	4638      	mov	r0, r7
 800f806:	4619      	mov	r1, r3
 800f808:	f7f8 f8c6 	bl	8007998 <_Unwind_VRS_Set>
 800f80c:	2300      	movs	r3, #0
 800f80e:	4619      	mov	r1, r3
 800f810:	2201      	movs	r2, #1
 800f812:	f8cd a000 	str.w	sl, [sp]
 800f816:	4638      	mov	r0, r7
 800f818:	950d      	str	r5, [sp, #52]	; 0x34
 800f81a:	f7f8 f8bd 	bl	8007998 <_Unwind_VRS_Set>
 800f81e:	2300      	movs	r3, #0
 800f820:	4619      	mov	r1, r3
 800f822:	220f      	movs	r2, #15
 800f824:	f8cd 8000 	str.w	r8, [sp]
 800f828:	4638      	mov	r0, r7
 800f82a:	f7f8 f88f 	bl	800794c <_Unwind_VRS_Get>
 800f82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f830:	9a04      	ldr	r2, [sp, #16]
 800f832:	f8cd 8000 	str.w	r8, [sp]
 800f836:	f003 0501 	and.w	r5, r3, #1
 800f83a:	2300      	movs	r3, #0
 800f83c:	4315      	orrs	r5, r2
 800f83e:	4638      	mov	r0, r7
 800f840:	4619      	mov	r1, r3
 800f842:	220f      	movs	r2, #15
 800f844:	950e      	str	r5, [sp, #56]	; 0x38
 800f846:	f7f8 f8a7 	bl	8007998 <_Unwind_VRS_Set>
 800f84a:	2c02      	cmp	r4, #2
 800f84c:	f000 8080 	beq.w	800f950 <__gxx_personality_v0+0x34c>
 800f850:	2007      	movs	r0, #7
 800f852:	b017      	add	sp, #92	; 0x5c
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	4648      	mov	r0, r9
 800f85a:	f000 fa3f 	bl	800fcdc <__cxa_call_terminate>
 800f85e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	461a      	mov	r2, r3
 800f864:	2b00      	cmp	r3, #0
 800f866:	d178      	bne.n	800f95a <__gxx_personality_v0+0x356>
 800f868:	2800      	cmp	r0, #0
 800f86a:	f43f aed9 	beq.w	800f620 <__gxx_personality_v0+0x1c>
 800f86e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f870:	9a04      	ldr	r2, [sp, #16]
 800f872:	3801      	subs	r0, #1
 800f874:	4403      	add	r3, r0
 800f876:	2a00      	cmp	r2, #0
 800f878:	f43f aed2 	beq.w	800f620 <__gxx_personality_v0+0x1c>
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d075      	beq.n	800f96c <__gxx_personality_v0+0x368>
 800f880:	9a03      	ldr	r2, [sp, #12]
 800f882:	f012 0208 	ands.w	r2, r2, #8
 800f886:	9209      	str	r2, [sp, #36]	; 0x24
 800f888:	f000 80f6 	beq.w	800fa78 <__gxx_personality_v0+0x474>
 800f88c:	2147      	movs	r1, #71	; 0x47
 800f88e:	224e      	movs	r2, #78	; 0x4e
 800f890:	f889 1000 	strb.w	r1, [r9]
 800f894:	f889 2001 	strb.w	r2, [r9, #1]
 800f898:	2155      	movs	r1, #85	; 0x55
 800f89a:	2243      	movs	r2, #67	; 0x43
 800f89c:	f889 1002 	strb.w	r1, [r9, #2]
 800f8a0:	f889 2003 	strb.w	r2, [r9, #3]
 800f8a4:	2146      	movs	r1, #70	; 0x46
 800f8a6:	224f      	movs	r2, #79	; 0x4f
 800f8a8:	f889 1004 	strb.w	r1, [r9, #4]
 800f8ac:	f889 2005 	strb.w	r2, [r9, #5]
 800f8b0:	2152      	movs	r1, #82	; 0x52
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f889 1006 	strb.w	r1, [r9, #6]
 800f8b8:	f889 2007 	strb.w	r2, [r9, #7]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	9208      	str	r2, [sp, #32]
 800f8c0:	9707      	str	r7, [sp, #28]
 800f8c2:	2500      	movs	r5, #0
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	e000      	b.n	800f8ca <__gxx_personality_v0+0x2c6>
 800f8c8:	4623      	mov	r3, r4
 800f8ca:	461c      	mov	r4, r3
 800f8cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f8d0:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800f8d4:	408a      	lsls	r2, r1
 800f8d6:	0606      	lsls	r6, r0, #24
 800f8d8:	ea45 0502 	orr.w	r5, r5, r2
 800f8dc:	f101 0107 	add.w	r1, r1, #7
 800f8e0:	d4f2      	bmi.n	800f8c8 <__gxx_personality_v0+0x2c4>
 800f8e2:	291f      	cmp	r1, #31
 800f8e4:	d805      	bhi.n	800f8f2 <__gxx_personality_v0+0x2ee>
 800f8e6:	0642      	lsls	r2, r0, #25
 800f8e8:	d503      	bpl.n	800f8f2 <__gxx_personality_v0+0x2ee>
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	408a      	lsls	r2, r1
 800f8ee:	4252      	negs	r2, r2
 800f8f0:	4315      	orrs	r5, r2
 800f8f2:	2600      	movs	r6, #0
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f8fa:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800f8fe:	408a      	lsls	r2, r1
 800f900:	0607      	lsls	r7, r0, #24
 800f902:	ea46 0602 	orr.w	r6, r6, r2
 800f906:	f101 0107 	add.w	r1, r1, #7
 800f90a:	d4f4      	bmi.n	800f8f6 <__gxx_personality_v0+0x2f2>
 800f90c:	291f      	cmp	r1, #31
 800f90e:	d805      	bhi.n	800f91c <__gxx_personality_v0+0x318>
 800f910:	0640      	lsls	r0, r0, #25
 800f912:	d503      	bpl.n	800f91c <__gxx_personality_v0+0x318>
 800f914:	2301      	movs	r3, #1
 800f916:	408b      	lsls	r3, r1
 800f918:	425b      	negs	r3, r3
 800f91a:	431e      	orrs	r6, r3
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	d05c      	beq.n	800f9da <__gxx_personality_v0+0x3d6>
 800f920:	dd5e      	ble.n	800f9e0 <__gxx_personality_v0+0x3dc>
 800f922:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f926:	28ff      	cmp	r0, #255	; 0xff
 800f928:	f000 80a4 	beq.w	800fa74 <__gxx_personality_v0+0x470>
 800f92c:	f000 0307 	and.w	r3, r0, #7
 800f930:	2b04      	cmp	r3, #4
 800f932:	f63f ae80 	bhi.w	800f636 <__gxx_personality_v0+0x32>
 800f936:	a201      	add	r2, pc, #4	; (adr r2, 800f93c <__gxx_personality_v0+0x338>)
 800f938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93c:	0800f9a7 	.word	0x0800f9a7
 800f940:	0800f637 	.word	0x0800f637
 800f944:	0800f9ad 	.word	0x0800f9ad
 800f948:	0800f9a7 	.word	0x0800f9a7
 800f94c:	0800f985 	.word	0x0800f985
 800f950:	4648      	mov	r0, r9
 800f952:	f7ff fd21 	bl	800f398 <__cxa_begin_cleanup>
 800f956:	2007      	movs	r0, #7
 800f958:	e66a      	b.n	800f630 <__gxx_personality_v0+0x2c>
 800f95a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f95c:	441a      	add	r2, r3
 800f95e:	9204      	str	r2, [sp, #16]
 800f960:	2800      	cmp	r0, #0
 800f962:	d184      	bne.n	800f86e <__gxx_personality_v0+0x26a>
 800f964:	9b04      	ldr	r3, [sp, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	f43f ae5a 	beq.w	800f620 <__gxx_personality_v0+0x1c>
 800f96c:	9b03      	ldr	r3, [sp, #12]
 800f96e:	f013 0301 	ands.w	r3, r3, #1
 800f972:	f47f ae55 	bne.w	800f620 <__gxx_personality_v0+0x1c>
 800f976:	9a03      	ldr	r2, [sp, #12]
 800f978:	f012 0508 	ands.w	r5, r2, #8
 800f97c:	f040 8097 	bne.w	800faae <__gxx_personality_v0+0x4aa>
 800f980:	2402      	movs	r4, #2
 800f982:	e739      	b.n	800f7f8 <__gxx_personality_v0+0x1f4>
 800f984:	00eb      	lsls	r3, r5, #3
 800f986:	425b      	negs	r3, r3
 800f988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f98a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f98c:	441a      	add	r2, r3
 800f98e:	4643      	mov	r3, r8
 800f990:	f7ff fd6c 	bl	800f46c <_ZL28read_encoded_value_with_basehjPKhPj>
 800f994:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f996:	b199      	cbz	r1, 800f9c0 <__gxx_personality_v0+0x3bc>
 800f998:	f1b9 0f00 	cmp.w	r9, #0
 800f99c:	d109      	bne.n	800f9b2 <__gxx_personality_v0+0x3ae>
 800f99e:	2e00      	cmp	r6, #0
 800f9a0:	d077      	beq.n	800fa92 <__gxx_personality_v0+0x48e>
 800f9a2:	19a3      	adds	r3, r4, r6
 800f9a4:	e78d      	b.n	800f8c2 <__gxx_personality_v0+0x2be>
 800f9a6:	00ab      	lsls	r3, r5, #2
 800f9a8:	425b      	negs	r3, r3
 800f9aa:	e7ed      	b.n	800f988 <__gxx_personality_v0+0x384>
 800f9ac:	006b      	lsls	r3, r5, #1
 800f9ae:	425b      	negs	r3, r3
 800f9b0:	e7ea      	b.n	800f988 <__gxx_personality_v0+0x384>
 800f9b2:	ab0a      	add	r3, sp, #40	; 0x28
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	4648      	mov	r0, r9
 800f9b8:	f7ff fc92 	bl	800f2e0 <__cxa_type_match>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d0ee      	beq.n	800f99e <__gxx_personality_v0+0x39a>
 800f9c0:	9f07      	ldr	r7, [sp, #28]
 800f9c2:	2403      	movs	r4, #3
 800f9c4:	9b03      	ldr	r3, [sp, #12]
 800f9c6:	07da      	lsls	r2, r3, #31
 800f9c8:	d460      	bmi.n	800fa8c <__gxx_personality_v0+0x488>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	0719      	lsls	r1, r3, #28
 800f9ce:	d466      	bmi.n	800fa9e <__gxx_personality_v0+0x49a>
 800f9d0:	2c01      	cmp	r4, #1
 800f9d2:	f43f af41 	beq.w	800f858 <__gxx_personality_v0+0x254>
 800f9d6:	9905      	ldr	r1, [sp, #20]
 800f9d8:	e707      	b.n	800f7ea <__gxx_personality_v0+0x1e6>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	9308      	str	r3, [sp, #32]
 800f9de:	e7de      	b.n	800f99e <__gxx_personality_v0+0x39a>
 800f9e0:	f1b9 0f00 	cmp.w	r9, #0
 800f9e4:	d001      	beq.n	800f9ea <__gxx_personality_v0+0x3e6>
 800f9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e8:	b35b      	cbz	r3, 800fa42 <__gxx_personality_v0+0x43e>
 800f9ea:	1c6b      	adds	r3, r5, #1
 800f9ec:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800f9f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1d1      	bne.n	800f99e <__gxx_personality_v0+0x39a>
 800f9fa:	e7e1      	b.n	800f9c0 <__gxx_personality_v0+0x3bc>
 800f9fc:	9a06      	ldr	r2, [sp, #24]
 800f9fe:	4638      	mov	r0, r7
 800fa00:	f7ff fdb4 	bl	800f56c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800fa04:	4639      	mov	r1, r7
 800fa06:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800fa0a:	f7ff fd8f 	bl	800f52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800fa0e:	00aa      	lsls	r2, r5, #2
 800fa10:	f082 0203 	eor.w	r2, r2, #3
 800fa14:	43d2      	mvns	r2, r2
 800fa16:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fa18:	9012      	str	r0, [sp, #72]	; 0x48
 800fa1a:	58b3      	ldr	r3, [r6, r2]
 800fa1c:	4416      	add	r6, r2
 800fa1e:	b133      	cbz	r3, 800fa2e <__gxx_personality_v0+0x42a>
 800fa20:	4632      	mov	r2, r6
 800fa22:	2300      	movs	r3, #0
 800fa24:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800fa28:	3301      	adds	r3, #1
 800fa2a:	2900      	cmp	r1, #0
 800fa2c:	d1fa      	bne.n	800fa24 <__gxx_personality_v0+0x420>
 800fa2e:	2204      	movs	r2, #4
 800fa30:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800fa34:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800fa38:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 800fa3c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800fa40:	e6d6      	b.n	800f7f0 <__gxx_personality_v0+0x1ec>
 800fa42:	1c6f      	adds	r7, r5, #1
 800fa44:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
 800fa48:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800fa4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa4c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800fa50:	920f      	str	r2, [sp, #60]	; 0x3c
 800fa52:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800fa56:	b921      	cbnz	r1, 800fa62 <__gxx_personality_v0+0x45e>
 800fa58:	e7b2      	b.n	800f9c0 <__gxx_personality_v0+0x3bc>
 800fa5a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800fa5e:	2900      	cmp	r1, #0
 800fa60:	d0ae      	beq.n	800f9c0 <__gxx_personality_v0+0x3bc>
 800fa62:	4439      	add	r1, r7
 800fa64:	465b      	mov	r3, fp
 800fa66:	2200      	movs	r2, #0
 800fa68:	4648      	mov	r0, r9
 800fa6a:	f7ff fc39 	bl	800f2e0 <__cxa_type_match>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d0f3      	beq.n	800fa5a <__gxx_personality_v0+0x456>
 800fa72:	e794      	b.n	800f99e <__gxx_personality_v0+0x39a>
 800fa74:	2300      	movs	r3, #0
 800fa76:	e787      	b.n	800f988 <__gxx_personality_v0+0x384>
 800fa78:	f899 2007 	ldrb.w	r2, [r9, #7]
 800fa7c:	2a01      	cmp	r2, #1
 800fa7e:	bf0c      	ite	eq
 800fa80:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 800fa84:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 800fa88:	920a      	str	r2, [sp, #40]	; 0x28
 800fa8a:	e717      	b.n	800f8bc <__gxx_personality_v0+0x2b8>
 800fa8c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fa90:	e65a      	b.n	800f748 <__gxx_personality_v0+0x144>
 800fa92:	9b08      	ldr	r3, [sp, #32]
 800fa94:	9f07      	ldr	r7, [sp, #28]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f47f af68 	bne.w	800f96c <__gxx_personality_v0+0x368>
 800fa9c:	e5c0      	b.n	800f620 <__gxx_personality_v0+0x1c>
 800fa9e:	2c01      	cmp	r4, #1
 800faa0:	f43f ae8d 	beq.w	800f7be <__gxx_personality_v0+0x1ba>
 800faa4:	2d00      	cmp	r5, #0
 800faa6:	f6bf aea3 	bge.w	800f7f0 <__gxx_personality_v0+0x1ec>
 800faaa:	f000 fa3d 	bl	800ff28 <_ZSt10unexpectedv>
 800faae:	461d      	mov	r5, r3
 800fab0:	2402      	movs	r4, #2
 800fab2:	e6a1      	b.n	800f7f8 <__gxx_personality_v0+0x1f4>
 800fab4:	f000 f992 	bl	800fddc <__cxa_begin_catch>
 800fab8:	e681      	b.n	800f7be <__gxx_personality_v0+0x1ba>
 800faba:	bf00      	nop

0800fabc <_ZdlPvj>:
 800fabc:	f000 b8ee 	b.w	800fc9c <_ZdlPv>

0800fac0 <_ZSt15get_new_handlerv>:
 800fac0:	4b02      	ldr	r3, [pc, #8]	; (800facc <_ZSt15get_new_handlerv+0xc>)
 800fac2:	6818      	ldr	r0, [r3, #0]
 800fac4:	f3bf 8f5b 	dmb	ish
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	20001c7c 	.word	0x20001c7c

0800fad0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	6803      	ldr	r3, [r0, #0]
 800fad4:	b084      	sub	sp, #16
 800fad6:	2400      	movs	r4, #0
 800fad8:	699e      	ldr	r6, [r3, #24]
 800fada:	9400      	str	r4, [sp, #0]
 800fadc:	2310      	movs	r3, #16
 800fade:	4615      	mov	r5, r2
 800fae0:	9302      	str	r3, [sp, #8]
 800fae2:	6812      	ldr	r2, [r2, #0]
 800fae4:	f88d 4004 	strb.w	r4, [sp, #4]
 800fae8:	466b      	mov	r3, sp
 800faea:	9403      	str	r4, [sp, #12]
 800faec:	47b0      	blx	r6
 800faee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800faf2:	f003 0306 	and.w	r3, r3, #6
 800faf6:	2b06      	cmp	r3, #6
 800faf8:	bf03      	ittte	eq
 800fafa:	9b00      	ldreq	r3, [sp, #0]
 800fafc:	602b      	streq	r3, [r5, #0]
 800fafe:	2001      	moveq	r0, #1
 800fb00:	4620      	movne	r0, r4
 800fb02:	b004      	add	sp, #16
 800fb04:	bd70      	pop	{r4, r5, r6, pc}
 800fb06:	bf00      	nop

0800fb08 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800fb08:	9800      	ldr	r0, [sp, #0]
 800fb0a:	4290      	cmp	r0, r2
 800fb0c:	bf0c      	ite	eq
 800fb0e:	2006      	moveq	r0, #6
 800fb10:	2001      	movne	r0, #1
 800fb12:	4770      	bx	lr

0800fb14 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800fb14:	b510      	push	{r4, lr}
 800fb16:	4b03      	ldr	r3, [pc, #12]	; (800fb24 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	f000 f854 	bl	800fbc8 <_ZNSt9type_infoD1Ev>
 800fb20:	4620      	mov	r0, r4
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	0801697c 	.word	0x0801697c

0800fb28 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800fb28:	b510      	push	{r4, lr}
 800fb2a:	4b05      	ldr	r3, [pc, #20]	; (800fb40 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800fb2c:	6003      	str	r3, [r0, #0]
 800fb2e:	4604      	mov	r4, r0
 800fb30:	f000 f84a 	bl	800fbc8 <_ZNSt9type_infoD1Ev>
 800fb34:	4620      	mov	r0, r4
 800fb36:	2108      	movs	r1, #8
 800fb38:	f7ff ffc0 	bl	800fabc <_ZdlPvj>
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	bd10      	pop	{r4, pc}
 800fb40:	0801697c 	.word	0x0801697c

0800fb44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4615      	mov	r5, r2
 800fb48:	461c      	mov	r4, r3
 800fb4a:	f000 f841 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800fb4e:	b120      	cbz	r0, 800fb5a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800fb50:	2208      	movs	r2, #8
 800fb52:	2306      	movs	r3, #6
 800fb54:	6025      	str	r5, [r4, #0]
 800fb56:	60e2      	str	r2, [r4, #12]
 800fb58:	7123      	strb	r3, [r4, #4]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}

0800fb5c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800fb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb60:	4617      	mov	r7, r2
 800fb62:	461c      	mov	r4, r3
 800fb64:	4606      	mov	r6, r0
 800fb66:	460d      	mov	r5, r1
 800fb68:	f000 f832 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800fb6c:	b908      	cbnz	r0, 800fb72 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800fb6e:	2c03      	cmp	r4, #3
 800fb70:	d901      	bls.n	800fb76 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb76:	682b      	ldr	r3, [r5, #0]
 800fb78:	463a      	mov	r2, r7
 800fb7a:	4631      	mov	r1, r6
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	695b      	ldr	r3, [r3, #20]
 800fb80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb84:	4718      	bx	r3
 800fb86:	bf00      	nop

0800fb88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800fb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	4617      	mov	r7, r2
 800fb8e:	9d08      	ldr	r5, [sp, #32]
 800fb90:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fb94:	428d      	cmp	r5, r1
 800fb96:	4606      	mov	r6, r0
 800fb98:	d00b      	beq.n	800fbb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	f000 f817 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800fba2:	b118      	cbz	r0, 800fbac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800fba4:	2301      	movs	r3, #1
 800fba6:	6025      	str	r5, [r4, #0]
 800fba8:	7127      	strb	r7, [r4, #4]
 800fbaa:	71a3      	strb	r3, [r4, #6]
 800fbac:	2000      	movs	r0, #0
 800fbae:	b003      	add	sp, #12
 800fbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	f000 f80b 	bl	800fbd0 <_ZNKSt9type_infoeqERKS_>
 800fbba:	b118      	cbz	r0, 800fbc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	7167      	strb	r7, [r4, #5]
 800fbc0:	b003      	add	sp, #12
 800fbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbc4:	9b01      	ldr	r3, [sp, #4]
 800fbc6:	e7e8      	b.n	800fb9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800fbc8 <_ZNSt9type_infoD1Ev>:
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <_ZNKSt9type_info14__is_pointer_pEv>:
 800fbcc:	2000      	movs	r0, #0
 800fbce:	4770      	bx	lr

0800fbd0 <_ZNKSt9type_infoeqERKS_>:
 800fbd0:	4281      	cmp	r1, r0
 800fbd2:	d011      	beq.n	800fbf8 <_ZNKSt9type_infoeqERKS_+0x28>
 800fbd4:	b508      	push	{r3, lr}
 800fbd6:	6840      	ldr	r0, [r0, #4]
 800fbd8:	7803      	ldrb	r3, [r0, #0]
 800fbda:	2b2a      	cmp	r3, #42	; 0x2a
 800fbdc:	d00a      	beq.n	800fbf4 <_ZNKSt9type_infoeqERKS_+0x24>
 800fbde:	6849      	ldr	r1, [r1, #4]
 800fbe0:	780b      	ldrb	r3, [r1, #0]
 800fbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800fbe4:	bf08      	it	eq
 800fbe6:	3101      	addeq	r1, #1
 800fbe8:	f7f6 fe9a 	bl	8006920 <strcmp>
 800fbec:	fab0 f080 	clz	r0, r0
 800fbf0:	0940      	lsrs	r0, r0, #5
 800fbf2:	bd08      	pop	{r3, pc}
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	bd08      	pop	{r3, pc}
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	4770      	bx	lr

0800fbfc <_ZSt19__throw_logic_errorPKc>:
 800fbfc:	b538      	push	{r3, r4, r5, lr}
 800fbfe:	4605      	mov	r5, r0
 800fc00:	2008      	movs	r0, #8
 800fc02:	f7ff fa6f 	bl	800f0e4 <__cxa_allocate_exception>
 800fc06:	4629      	mov	r1, r5
 800fc08:	4604      	mov	r4, r0
 800fc0a:	f000 fbc3 	bl	8010394 <_ZNSt11logic_errorC1EPKc>
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4a04      	ldr	r2, [pc, #16]	; (800fc24 <_ZSt19__throw_logic_errorPKc+0x28>)
 800fc12:	4905      	ldr	r1, [pc, #20]	; (800fc28 <_ZSt19__throw_logic_errorPKc+0x2c>)
 800fc14:	f7ff fac4 	bl	800f1a0 <__cxa_throw>
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f7ff fa7b 	bl	800f114 <__cxa_free_exception>
 800fc1e:	f7ff fb59 	bl	800f2d4 <__cxa_end_cleanup>
 800fc22:	bf00      	nop
 800fc24:	0800ff61 	.word	0x0800ff61
 800fc28:	08016a6c 	.word	0x08016a6c

0800fc2c <_ZSt20__throw_length_errorPKc>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4605      	mov	r5, r0
 800fc30:	2008      	movs	r0, #8
 800fc32:	f7ff fa57 	bl	800f0e4 <__cxa_allocate_exception>
 800fc36:	4629      	mov	r1, r5
 800fc38:	4604      	mov	r4, r0
 800fc3a:	f000 fbbf 	bl	80103bc <_ZNSt12length_errorC1EPKc>
 800fc3e:	4620      	mov	r0, r4
 800fc40:	4a04      	ldr	r2, [pc, #16]	; (800fc54 <_ZSt20__throw_length_errorPKc+0x28>)
 800fc42:	4905      	ldr	r1, [pc, #20]	; (800fc58 <_ZSt20__throw_length_errorPKc+0x2c>)
 800fc44:	f7ff faac 	bl	800f1a0 <__cxa_throw>
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f7ff fa63 	bl	800f114 <__cxa_free_exception>
 800fc4e:	f7ff fb41 	bl	800f2d4 <__cxa_end_cleanup>
 800fc52:	bf00      	nop
 800fc54:	0800ffb5 	.word	0x0800ffb5
 800fc58:	08016a78 	.word	0x08016a78

0800fc5c <_ZSt25__throw_bad_function_callv>:
 800fc5c:	b508      	push	{r3, lr}
 800fc5e:	2004      	movs	r0, #4
 800fc60:	f7ff fa40 	bl	800f0e4 <__cxa_allocate_exception>
 800fc64:	4b02      	ldr	r3, [pc, #8]	; (800fc70 <_ZSt25__throw_bad_function_callv+0x14>)
 800fc66:	6003      	str	r3, [r0, #0]
 800fc68:	4a02      	ldr	r2, [pc, #8]	; (800fc74 <_ZSt25__throw_bad_function_callv+0x18>)
 800fc6a:	4903      	ldr	r1, [pc, #12]	; (800fc78 <_ZSt25__throw_bad_function_callv+0x1c>)
 800fc6c:	f7ff fa98 	bl	800f1a0 <__cxa_throw>
 800fc70:	08016c8c 	.word	0x08016c8c
 800fc74:	080103ed 	.word	0x080103ed
 800fc78:	08016c60 	.word	0x08016c60

0800fc7c <_ZNSt9exceptionD1Ev>:
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop

0800fc80 <_ZNSt13bad_exceptionD1Ev>:
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop

0800fc84 <_ZGTtNKSt13bad_exception4whatEv>:
 800fc84:	4800      	ldr	r0, [pc, #0]	; (800fc88 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800fc86:	4770      	bx	lr
 800fc88:	080169b8 	.word	0x080169b8

0800fc8c <_ZNSt13bad_exceptionD0Ev>:
 800fc8c:	b510      	push	{r4, lr}
 800fc8e:	2104      	movs	r1, #4
 800fc90:	4604      	mov	r4, r0
 800fc92:	f7ff ff13 	bl	800fabc <_ZdlPvj>
 800fc96:	4620      	mov	r0, r4
 800fc98:	bd10      	pop	{r4, pc}
 800fc9a:	bf00      	nop

0800fc9c <_ZdlPv>:
 800fc9c:	f001 bb42 	b.w	8011324 <free>

0800fca0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800fca0:	7803      	ldrb	r3, [r0, #0]
 800fca2:	2b47      	cmp	r3, #71	; 0x47
 800fca4:	d001      	beq.n	800fcaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800fca6:	2000      	movs	r0, #0
 800fca8:	4770      	bx	lr
 800fcaa:	7843      	ldrb	r3, [r0, #1]
 800fcac:	2b4e      	cmp	r3, #78	; 0x4e
 800fcae:	d1fa      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcb0:	7883      	ldrb	r3, [r0, #2]
 800fcb2:	2b55      	cmp	r3, #85	; 0x55
 800fcb4:	d1f7      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcb6:	78c3      	ldrb	r3, [r0, #3]
 800fcb8:	2b43      	cmp	r3, #67	; 0x43
 800fcba:	d1f4      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcbc:	7903      	ldrb	r3, [r0, #4]
 800fcbe:	2b43      	cmp	r3, #67	; 0x43
 800fcc0:	d1f1      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcc2:	7943      	ldrb	r3, [r0, #5]
 800fcc4:	2b2b      	cmp	r3, #43	; 0x2b
 800fcc6:	d1ee      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcc8:	7983      	ldrb	r3, [r0, #6]
 800fcca:	2b2b      	cmp	r3, #43	; 0x2b
 800fccc:	d1eb      	bne.n	800fca6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fcce:	79c0      	ldrb	r0, [r0, #7]
 800fcd0:	2801      	cmp	r0, #1
 800fcd2:	bf8c      	ite	hi
 800fcd4:	2000      	movhi	r0, #0
 800fcd6:	2001      	movls	r0, #1
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop

0800fcdc <__cxa_call_terminate>:
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	b130      	cbz	r0, 800fcee <__cxa_call_terminate+0x12>
 800fce0:	4604      	mov	r4, r0
 800fce2:	f000 f87b 	bl	800fddc <__cxa_begin_catch>
 800fce6:	4620      	mov	r0, r4
 800fce8:	f7ff ffda 	bl	800fca0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800fcec:	b908      	cbnz	r0, 800fcf2 <__cxa_call_terminate+0x16>
 800fcee:	f000 f90d 	bl	800ff0c <_ZSt9terminatev>
 800fcf2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800fcf6:	f000 f8f5 	bl	800fee4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800fcfa:	bf00      	nop

0800fcfc <__cxa_call_unexpected>:
 800fcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd00:	b085      	sub	sp, #20
 800fd02:	4602      	mov	r2, r0
 800fd04:	f7ff ffcc 	bl	800fca0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800fd08:	b160      	cbz	r0, 800fd24 <__cxa_call_unexpected+0x28>
 800fd0a:	f852 8c18 	ldr.w	r8, [r2, #-24]
 800fd0e:	f852 5c14 	ldr.w	r5, [r2, #-20]
 800fd12:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800fd14:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800fd16:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f000 f85f 	bl	800fddc <__cxa_begin_catch>
 800fd1e:	4640      	mov	r0, r8
 800fd20:	f000 f8fe 	bl	800ff20 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800fd24:	4610      	mov	r0, r2
 800fd26:	f000 f859 	bl	800fddc <__cxa_begin_catch>
 800fd2a:	f000 f8fd 	bl	800ff28 <_ZSt10unexpectedv>
 800fd2e:	f000 f855 	bl	800fddc <__cxa_begin_catch>
 800fd32:	f000 f8eb 	bl	800ff0c <_ZSt9terminatev>
 800fd36:	f000 f851 	bl	800fddc <__cxa_begin_catch>
 800fd3a:	f7ff fac3 	bl	800f2c4 <__cxa_get_globals_fast>
 800fd3e:	6803      	ldr	r3, [r0, #0]
 800fd40:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fd44:	2a01      	cmp	r2, #1
 800fd46:	d036      	beq.n	800fdb6 <__cxa_call_unexpected+0xba>
 800fd48:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800fd4c:	f10d 0a10 	add.w	sl, sp, #16
 800fd50:	f04f 0800 	mov.w	r8, #0
 800fd54:	3320      	adds	r3, #32
 800fd56:	f84a 2d08 	str.w	r2, [sl, #-8]!
 800fd5a:	f027 0b03 	bic.w	fp, r7, #3
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	46c1      	mov	r9, r8
 800fd62:	45b1      	cmp	r9, r6
 800fd64:	da1b      	bge.n	800fd9e <__cxa_call_unexpected+0xa2>
 800fd66:	6827      	ldr	r7, [r4, #0]
 800fd68:	b107      	cbz	r7, 800fd6c <__cxa_call_unexpected+0x70>
 800fd6a:	4427      	add	r7, r4
 800fd6c:	4653      	mov	r3, sl
 800fd6e:	2200      	movs	r2, #0
 800fd70:	4639      	mov	r1, r7
 800fd72:	9801      	ldr	r0, [sp, #4]
 800fd74:	f7ff fab4 	bl	800f2e0 <__cxa_type_match>
 800fd78:	bb10      	cbnz	r0, 800fdc0 <__cxa_call_unexpected+0xc4>
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	4914      	ldr	r1, [pc, #80]	; (800fdd0 <__cxa_call_unexpected+0xd4>)
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	aa04      	add	r2, sp, #16
 800fd84:	2301      	movs	r3, #1
 800fd86:	f842 0d04 	str.w	r0, [r2, #-4]!
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	9f00      	ldr	r7, [sp, #0]
 800fd8e:	47b8      	blx	r7
 800fd90:	2800      	cmp	r0, #0
 800fd92:	bf18      	it	ne
 800fd94:	4680      	movne	r8, r0
 800fd96:	f109 0901 	add.w	r9, r9, #1
 800fd9a:	445c      	add	r4, fp
 800fd9c:	e7e1      	b.n	800fd62 <__cxa_call_unexpected+0x66>
 800fd9e:	f1b8 0f00 	cmp.w	r8, #0
 800fda2:	d00a      	beq.n	800fdba <__cxa_call_unexpected+0xbe>
 800fda4:	2004      	movs	r0, #4
 800fda6:	f7ff f99d 	bl	800f0e4 <__cxa_allocate_exception>
 800fdaa:	4b0a      	ldr	r3, [pc, #40]	; (800fdd4 <__cxa_call_unexpected+0xd8>)
 800fdac:	6003      	str	r3, [r0, #0]
 800fdae:	4a0a      	ldr	r2, [pc, #40]	; (800fdd8 <__cxa_call_unexpected+0xdc>)
 800fdb0:	4907      	ldr	r1, [pc, #28]	; (800fdd0 <__cxa_call_unexpected+0xd4>)
 800fdb2:	f7ff f9f5 	bl	800f1a0 <__cxa_throw>
 800fdb6:	681a      	ldr	r2, [r3, #0]
 800fdb8:	e7c8      	b.n	800fd4c <__cxa_call_unexpected+0x50>
 800fdba:	4628      	mov	r0, r5
 800fdbc:	f000 f892 	bl	800fee4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800fdc0:	f7ff fa2c 	bl	800f21c <__cxa_rethrow>
 800fdc4:	f000 f848 	bl	800fe58 <__cxa_end_catch>
 800fdc8:	f000 f846 	bl	800fe58 <__cxa_end_catch>
 800fdcc:	f7ff fa82 	bl	800f2d4 <__cxa_end_cleanup>
 800fdd0:	080169dc 	.word	0x080169dc
 800fdd4:	08016a60 	.word	0x08016a60
 800fdd8:	0800fc81 	.word	0x0800fc81

0800fddc <__cxa_begin_catch>:
 800fddc:	b538      	push	{r3, r4, r5, lr}
 800fdde:	4604      	mov	r4, r0
 800fde0:	f7ff fa74 	bl	800f2cc <__cxa_get_globals>
 800fde4:	7822      	ldrb	r2, [r4, #0]
 800fde6:	6803      	ldr	r3, [r0, #0]
 800fde8:	2a47      	cmp	r2, #71	; 0x47
 800fdea:	f1a4 0120 	sub.w	r1, r4, #32
 800fdee:	d004      	beq.n	800fdfa <__cxa_begin_catch+0x1e>
 800fdf0:	bb83      	cbnz	r3, 800fe54 <__cxa_begin_catch+0x78>
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	6001      	str	r1, [r0, #0]
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	bd38      	pop	{r3, r4, r5, pc}
 800fdfa:	7862      	ldrb	r2, [r4, #1]
 800fdfc:	2a4e      	cmp	r2, #78	; 0x4e
 800fdfe:	d1f7      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe00:	78a2      	ldrb	r2, [r4, #2]
 800fe02:	2a55      	cmp	r2, #85	; 0x55
 800fe04:	d1f4      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe06:	78e2      	ldrb	r2, [r4, #3]
 800fe08:	2a43      	cmp	r2, #67	; 0x43
 800fe0a:	d1f1      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe0c:	7922      	ldrb	r2, [r4, #4]
 800fe0e:	2a43      	cmp	r2, #67	; 0x43
 800fe10:	d1ee      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe12:	7962      	ldrb	r2, [r4, #5]
 800fe14:	2a2b      	cmp	r2, #43	; 0x2b
 800fe16:	d1eb      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe18:	79a2      	ldrb	r2, [r4, #6]
 800fe1a:	2a2b      	cmp	r2, #43	; 0x2b
 800fe1c:	d1e8      	bne.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe1e:	79e2      	ldrb	r2, [r4, #7]
 800fe20:	2a01      	cmp	r2, #1
 800fe22:	d8e5      	bhi.n	800fdf0 <__cxa_begin_catch+0x14>
 800fe24:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800fe28:	2a00      	cmp	r2, #0
 800fe2a:	db10      	blt.n	800fe4e <__cxa_begin_catch+0x72>
 800fe2c:	3201      	adds	r2, #1
 800fe2e:	6845      	ldr	r5, [r0, #4]
 800fe30:	f844 2c0c 	str.w	r2, [r4, #-12]
 800fe34:	3d01      	subs	r5, #1
 800fe36:	6045      	str	r5, [r0, #4]
 800fe38:	428b      	cmp	r3, r1
 800fe3a:	bf1c      	itt	ne
 800fe3c:	f844 3c10 	strne.w	r3, [r4, #-16]
 800fe40:	6001      	strne	r1, [r0, #0]
 800fe42:	4620      	mov	r0, r4
 800fe44:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800fe46:	f7f7 fd79 	bl	800793c <_Unwind_Complete>
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	bd38      	pop	{r3, r4, r5, pc}
 800fe4e:	f1c2 0201 	rsb	r2, r2, #1
 800fe52:	e7ec      	b.n	800fe2e <__cxa_begin_catch+0x52>
 800fe54:	f000 f85a 	bl	800ff0c <_ZSt9terminatev>

0800fe58 <__cxa_end_catch>:
 800fe58:	b508      	push	{r3, lr}
 800fe5a:	f7ff fa33 	bl	800f2c4 <__cxa_get_globals_fast>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	6800      	ldr	r0, [r0, #0]
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d03d      	beq.n	800fee2 <__cxa_end_catch+0x8a>
 800fe66:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fe6a:	2b47      	cmp	r3, #71	; 0x47
 800fe6c:	d006      	beq.n	800fe7c <__cxa_end_catch+0x24>
 800fe6e:	2300      	movs	r3, #0
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	3020      	adds	r0, #32
 800fe74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe78:	f7f7 bd62 	b.w	8007940 <_Unwind_DeleteException>
 800fe7c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800fe80:	2b4e      	cmp	r3, #78	; 0x4e
 800fe82:	d1f4      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800fe84:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800fe88:	2b55      	cmp	r3, #85	; 0x55
 800fe8a:	d1f0      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800fe8c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800fe90:	2b43      	cmp	r3, #67	; 0x43
 800fe92:	d1ec      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800fe94:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800fe98:	2b43      	cmp	r3, #67	; 0x43
 800fe9a:	d1e8      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800fe9c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800fea0:	2b2b      	cmp	r3, #43	; 0x2b
 800fea2:	d1e4      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800fea4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800fea8:	2b2b      	cmp	r3, #43	; 0x2b
 800feaa:	d1e0      	bne.n	800fe6e <__cxa_end_catch+0x16>
 800feac:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d8dc      	bhi.n	800fe6e <__cxa_end_catch+0x16>
 800feb4:	6943      	ldr	r3, [r0, #20]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	db05      	blt.n	800fec6 <__cxa_end_catch+0x6e>
 800feba:	3b01      	subs	r3, #1
 800febc:	d008      	beq.n	800fed0 <__cxa_end_catch+0x78>
 800febe:	1c5a      	adds	r2, r3, #1
 800fec0:	d00d      	beq.n	800fede <__cxa_end_catch+0x86>
 800fec2:	6143      	str	r3, [r0, #20]
 800fec4:	bd08      	pop	{r3, pc}
 800fec6:	3301      	adds	r3, #1
 800fec8:	d1fb      	bne.n	800fec2 <__cxa_end_catch+0x6a>
 800feca:	6901      	ldr	r1, [r0, #16]
 800fecc:	6011      	str	r1, [r2, #0]
 800fece:	e7f8      	b.n	800fec2 <__cxa_end_catch+0x6a>
 800fed0:	6903      	ldr	r3, [r0, #16]
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	3020      	adds	r0, #32
 800fed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800feda:	f7f7 bd31 	b.w	8007940 <_Unwind_DeleteException>
 800fede:	f000 f815 	bl	800ff0c <_ZSt9terminatev>
 800fee2:	bd08      	pop	{r3, pc}

0800fee4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fee4:	b508      	push	{r3, lr}
 800fee6:	4780      	blx	r0
 800fee8:	f000 fc14 	bl	8010714 <abort>
 800feec:	f7ff ff76 	bl	800fddc <__cxa_begin_catch>
 800fef0:	f000 fc10 	bl	8010714 <abort>
 800fef4:	460d      	mov	r5, r1
 800fef6:	4604      	mov	r4, r0
 800fef8:	f7ff ffae 	bl	800fe58 <__cxa_end_catch>
 800fefc:	3501      	adds	r5, #1
 800fefe:	d001      	beq.n	800ff04 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800ff00:	f7ff f9e8 	bl	800f2d4 <__cxa_end_cleanup>
 800ff04:	4620      	mov	r0, r4
 800ff06:	f7ff fef9 	bl	800fcfc <__cxa_call_unexpected>
 800ff0a:	bf00      	nop

0800ff0c <_ZSt9terminatev>:
 800ff0c:	b508      	push	{r3, lr}
 800ff0e:	4b03      	ldr	r3, [pc, #12]	; (800ff1c <_ZSt9terminatev+0x10>)
 800ff10:	6818      	ldr	r0, [r3, #0]
 800ff12:	f3bf 8f5b 	dmb	ish
 800ff16:	f7ff ffe5 	bl	800fee4 <_ZN10__cxxabiv111__terminateEPFvvE>
 800ff1a:	bf00      	nop
 800ff1c:	20000040 	.word	0x20000040

0800ff20 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800ff20:	b508      	push	{r3, lr}
 800ff22:	4780      	blx	r0
 800ff24:	f7ff fff2 	bl	800ff0c <_ZSt9terminatev>

0800ff28 <_ZSt10unexpectedv>:
 800ff28:	b508      	push	{r3, lr}
 800ff2a:	4b03      	ldr	r3, [pc, #12]	; (800ff38 <_ZSt10unexpectedv+0x10>)
 800ff2c:	6818      	ldr	r0, [r3, #0]
 800ff2e:	f3bf 8f5b 	dmb	ish
 800ff32:	f7ff fff5 	bl	800ff20 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800ff36:	bf00      	nop
 800ff38:	20000044 	.word	0x20000044

0800ff3c <_ZSt13get_terminatev>:
 800ff3c:	4b02      	ldr	r3, [pc, #8]	; (800ff48 <_ZSt13get_terminatev+0xc>)
 800ff3e:	6818      	ldr	r0, [r3, #0]
 800ff40:	f3bf 8f5b 	dmb	ish
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	20000040 	.word	0x20000040

0800ff4c <_ZSt14get_unexpectedv>:
 800ff4c:	4b02      	ldr	r3, [pc, #8]	; (800ff58 <_ZSt14get_unexpectedv+0xc>)
 800ff4e:	6818      	ldr	r0, [r3, #0]
 800ff50:	f3bf 8f5b 	dmb	ish
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	20000044 	.word	0x20000044

0800ff5c <_ZNKSt11logic_error4whatEv>:
 800ff5c:	6840      	ldr	r0, [r0, #4]
 800ff5e:	4770      	bx	lr

0800ff60 <_ZNSt11logic_errorD1Ev>:
 800ff60:	b510      	push	{r4, lr}
 800ff62:	6843      	ldr	r3, [r0, #4]
 800ff64:	4a0c      	ldr	r2, [pc, #48]	; (800ff98 <_ZNSt11logic_errorD1Ev+0x38>)
 800ff66:	490d      	ldr	r1, [pc, #52]	; (800ff9c <_ZNSt11logic_errorD1Ev+0x3c>)
 800ff68:	6001      	str	r1, [r0, #0]
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	f1a3 000c 	sub.w	r0, r3, #12
 800ff70:	4290      	cmp	r0, r2
 800ff72:	b082      	sub	sp, #8
 800ff74:	d105      	bne.n	800ff82 <_ZNSt11logic_errorD1Ev+0x22>
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7ff fe80 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	b002      	add	sp, #8
 800ff80:	bd10      	pop	{r4, pc}
 800ff82:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ff86:	1e51      	subs	r1, r2, #1
 800ff88:	2a00      	cmp	r2, #0
 800ff8a:	f843 1c04 	str.w	r1, [r3, #-4]
 800ff8e:	dcf2      	bgt.n	800ff76 <_ZNSt11logic_errorD1Ev+0x16>
 800ff90:	a901      	add	r1, sp, #4
 800ff92:	f000 f9c7 	bl	8010324 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800ff96:	e7ee      	b.n	800ff76 <_ZNSt11logic_errorD1Ev+0x16>
 800ff98:	20001cb0 	.word	0x20001cb0
 800ff9c:	08016ab0 	.word	0x08016ab0

0800ffa0 <_ZNSt11logic_errorD0Ev>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	f7ff ffdc 	bl	800ff60 <_ZNSt11logic_errorD1Ev>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f7ff fe77 	bl	800fc9c <_ZdlPv>
 800ffae:	4620      	mov	r0, r4
 800ffb0:	bd10      	pop	{r4, pc}
 800ffb2:	bf00      	nop

0800ffb4 <_ZNSt12length_errorD1Ev>:
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	4b03      	ldr	r3, [pc, #12]	; (800ffc4 <_ZNSt12length_errorD1Ev+0x10>)
 800ffb8:	6003      	str	r3, [r0, #0]
 800ffba:	4604      	mov	r4, r0
 800ffbc:	f7ff ffd0 	bl	800ff60 <_ZNSt11logic_errorD1Ev>
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	bd10      	pop	{r4, pc}
 800ffc4:	08016ac4 	.word	0x08016ac4

0800ffc8 <_ZNSt12length_errorD0Ev>:
 800ffc8:	b510      	push	{r4, lr}
 800ffca:	4b05      	ldr	r3, [pc, #20]	; (800ffe0 <_ZNSt12length_errorD0Ev+0x18>)
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	4604      	mov	r4, r0
 800ffd0:	f7ff ffc6 	bl	800ff60 <_ZNSt11logic_errorD1Ev>
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f7ff fe61 	bl	800fc9c <_ZdlPv>
 800ffda:	4620      	mov	r0, r4
 800ffdc:	bd10      	pop	{r4, pc}
 800ffde:	bf00      	nop
 800ffe0:	08016ac4 	.word	0x08016ac4

0800ffe4 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 800ffe4:	4800      	ldr	r0, [pc, #0]	; (800ffe8 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 800ffe6:	4770      	bx	lr
 800ffe8:	08016ad8 	.word	0x08016ad8

0800ffec <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 800ffec:	4800      	ldr	r0, [pc, #0]	; (800fff0 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 800ffee:	4770      	bx	lr
 800fff0:	08016ad0 	.word	0x08016ad0

0800fff4 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 800fff4:	6002      	str	r2, [r0, #0]
 800fff6:	6041      	str	r1, [r0, #4]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop

0800fffc <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 800fffc:	684b      	ldr	r3, [r1, #4]
 800fffe:	4283      	cmp	r3, r0
 8010000:	d001      	beq.n	8010006 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
 8010002:	2000      	movs	r0, #0
 8010004:	4770      	bx	lr
 8010006:	6808      	ldr	r0, [r1, #0]
 8010008:	1a80      	subs	r0, r0, r2
 801000a:	fab0 f080 	clz	r0, r0
 801000e:	0940      	lsrs	r0, r0, #5
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop

08010014 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop

08010018 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop

0801001c <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 801001c:	b510      	push	{r4, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	f7ff fe3c 	bl	800fc9c <_ZdlPv>
 8010024:	4620      	mov	r0, r4
 8010026:	bd10      	pop	{r4, pc}

08010028 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8010028:	b510      	push	{r4, lr}
 801002a:	4604      	mov	r4, r0
 801002c:	f7ff fe36 	bl	800fc9c <_ZdlPv>
 8010030:	4620      	mov	r0, r4
 8010032:	bd10      	pop	{r4, pc}

08010034 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8010034:	b510      	push	{r4, lr}
 8010036:	680b      	ldr	r3, [r1, #0]
 8010038:	b086      	sub	sp, #24
 801003a:	4604      	mov	r4, r0
 801003c:	691b      	ldr	r3, [r3, #16]
 801003e:	4668      	mov	r0, sp
 8010040:	4798      	blx	r3
 8010042:	4620      	mov	r0, r4
 8010044:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8010048:	f000 f9c2 	bl	80103d0 <_ZNSt12__cow_stringC1EPKcj>
 801004c:	9800      	ldr	r0, [sp, #0]
 801004e:	ab02      	add	r3, sp, #8
 8010050:	4298      	cmp	r0, r3
 8010052:	d001      	beq.n	8010058 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
 8010054:	f7ff fe22 	bl	800fc9c <_ZdlPv>
 8010058:	4620      	mov	r0, r4
 801005a:	b006      	add	sp, #24
 801005c:	bd10      	pop	{r4, pc}
 801005e:	9800      	ldr	r0, [sp, #0]
 8010060:	ab02      	add	r3, sp, #8
 8010062:	4298      	cmp	r0, r3
 8010064:	d001      	beq.n	801006a <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
 8010066:	f7ff fe19 	bl	800fc9c <_ZdlPv>
 801006a:	f7ff f933 	bl	800f2d4 <__cxa_end_cleanup>
 801006e:	bf00      	nop

08010070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>:
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	4605      	mov	r5, r0
 8010074:	b082      	sub	sp, #8
 8010076:	b301      	cbz	r1, 80100ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x4a>
 8010078:	1a54      	subs	r4, r2, r1
 801007a:	2c0f      	cmp	r4, #15
 801007c:	460e      	mov	r6, r1
 801007e:	9401      	str	r4, [sp, #4]
 8010080:	d80a      	bhi.n	8010098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x28>
 8010082:	682b      	ldr	r3, [r5, #0]
 8010084:	2c01      	cmp	r4, #1
 8010086:	4618      	mov	r0, r3
 8010088:	d013      	beq.n	80100b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x42>
 801008a:	b964      	cbnz	r4, 80100a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x36>
 801008c:	9a01      	ldr	r2, [sp, #4]
 801008e:	606a      	str	r2, [r5, #4]
 8010090:	2100      	movs	r1, #0
 8010092:	5499      	strb	r1, [r3, r2]
 8010094:	b002      	add	sp, #8
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	2200      	movs	r2, #0
 801009a:	a901      	add	r1, sp, #4
 801009c:	f000 f868 	bl	8010170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80100a0:	9b01      	ldr	r3, [sp, #4]
 80100a2:	6028      	str	r0, [r5, #0]
 80100a4:	60ab      	str	r3, [r5, #8]
 80100a6:	4622      	mov	r2, r4
 80100a8:	4631      	mov	r1, r6
 80100aa:	f001 fb72 	bl	8011792 <memcpy>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	e7ec      	b.n	801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100b2:	7832      	ldrb	r2, [r6, #0]
 80100b4:	701a      	strb	r2, [r3, #0]
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	e7e8      	b.n	801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100ba:	b112      	cbz	r2, 80100c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x52>
 80100bc:	4802      	ldr	r0, [pc, #8]	; (80100c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x58>)
 80100be:	f7ff fd9d 	bl	800fbfc <_ZSt19__throw_logic_errorPKc>
 80100c2:	9201      	str	r2, [sp, #4]
 80100c4:	6803      	ldr	r3, [r0, #0]
 80100c6:	e7e1      	b.n	801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100c8:	08016ae0 	.word	0x08016ae0

080100cc <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4604      	mov	r4, r0
 80100d0:	4610      	mov	r0, r2
 80100d2:	f002 f89d 	bl	8012210 <strerror>
 80100d6:	f104 0308 	add.w	r3, r4, #8
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	4605      	mov	r5, r0
 80100de:	b140      	cbz	r0, 80100f2 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
 80100e0:	f7f6 fc28 	bl	8006934 <strlen>
 80100e4:	4629      	mov	r1, r5
 80100e6:	182a      	adds	r2, r5, r0
 80100e8:	4620      	mov	r0, r4
 80100ea:	f7ff ffc1 	bl	8010070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
 80100ee:	4620      	mov	r0, r4
 80100f0:	bd38      	pop	{r3, r4, r5, pc}
 80100f2:	4620      	mov	r0, r4
 80100f4:	f04f 32ff 	mov.w	r2, #4294967295
 80100f8:	4629      	mov	r1, r5
 80100fa:	f7ff ffb9 	bl	8010070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
 80100fe:	4620      	mov	r0, r4
 8010100:	bd38      	pop	{r3, r4, r5, pc}
 8010102:	bf00      	nop

08010104 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 8010104:	b530      	push	{r4, r5, lr}
 8010106:	6803      	ldr	r3, [r0, #0]
 8010108:	4d0c      	ldr	r5, [pc, #48]	; (801013c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
 801010a:	695b      	ldr	r3, [r3, #20]
 801010c:	42ab      	cmp	r3, r5
 801010e:	b083      	sub	sp, #12
 8010110:	4614      	mov	r4, r2
 8010112:	d10c      	bne.n	801012e <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
 8010114:	6863      	ldr	r3, [r4, #4]
 8010116:	4283      	cmp	r3, r0
 8010118:	d002      	beq.n	8010120 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
 801011a:	2000      	movs	r0, #0
 801011c:	b003      	add	sp, #12
 801011e:	bd30      	pop	{r4, r5, pc}
 8010120:	6820      	ldr	r0, [r4, #0]
 8010122:	1a40      	subs	r0, r0, r1
 8010124:	fab0 f080 	clz	r0, r0
 8010128:	0940      	lsrs	r0, r0, #5
 801012a:	b003      	add	sp, #12
 801012c:	bd30      	pop	{r4, r5, pc}
 801012e:	460a      	mov	r2, r1
 8010130:	4601      	mov	r1, r0
 8010132:	4668      	mov	r0, sp
 8010134:	4798      	blx	r3
 8010136:	9900      	ldr	r1, [sp, #0]
 8010138:	9801      	ldr	r0, [sp, #4]
 801013a:	e7eb      	b.n	8010114 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
 801013c:	0800fff5 	.word	0x0800fff5

08010140 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4c06      	ldr	r4, [pc, #24]	; (801015c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
 8010144:	4906      	ldr	r1, [pc, #24]	; (8010160 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
 8010146:	4807      	ldr	r0, [pc, #28]	; (8010164 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
 8010148:	4622      	mov	r2, r4
 801014a:	f7fe ff39 	bl	800efc0 <__aeabi_atexit>
 801014e:	4622      	mov	r2, r4
 8010150:	4905      	ldr	r1, [pc, #20]	; (8010168 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
 8010152:	4806      	ldr	r0, [pc, #24]	; (801016c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
 8010154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010158:	f7fe bf32 	b.w	800efc0 <__aeabi_atexit>
 801015c:	20000000 	.word	0x20000000
 8010160:	08010019 	.word	0x08010019
 8010164:	2000004c 	.word	0x2000004c
 8010168:	08010015 	.word	0x08010015
 801016c:	20000048 	.word	0x20000048

08010170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010170:	6808      	ldr	r0, [r1, #0]
 8010172:	2800      	cmp	r0, #0
 8010174:	b508      	push	{r3, lr}
 8010176:	db1a      	blt.n	80101ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
 8010178:	4290      	cmp	r0, r2
 801017a:	d90a      	bls.n	8010192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 801017c:	0052      	lsls	r2, r2, #1
 801017e:	4290      	cmp	r0, r2
 8010180:	d207      	bcs.n	8010192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8010182:	2a00      	cmp	r2, #0
 8010184:	db0a      	blt.n	801019c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010186:	600a      	str	r2, [r1, #0]
 8010188:	1c50      	adds	r0, r2, #1
 801018a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801018e:	f7fe bf1d 	b.w	800efcc <_Znwj>
 8010192:	3001      	adds	r0, #1
 8010194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010198:	f7fe bf18 	b.w	800efcc <_Znwj>
 801019c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80101a0:	600b      	str	r3, [r1, #0]
 80101a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80101a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101aa:	f7fe bf0f 	b.w	800efcc <_Znwj>
 80101ae:	4801      	ldr	r0, [pc, #4]	; (80101b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
 80101b0:	f7ff fd3c 	bl	800fc2c <_ZSt20__throw_length_errorPKc>
 80101b4:	08016bf0 	.word	0x08016bf0

080101b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80101b8:	4b24      	ldr	r3, [pc, #144]	; (801024c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	07d0      	lsls	r0, r2, #31
 80101be:	bf5c      	itt	pl
 80101c0:	2201      	movpl	r2, #1
 80101c2:	601a      	strpl	r2, [r3, #0]
 80101c4:	4b22      	ldr	r3, [pc, #136]	; (8010250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	07d1      	lsls	r1, r2, #31
 80101ca:	bf5c      	itt	pl
 80101cc:	2201      	movpl	r2, #1
 80101ce:	601a      	strpl	r2, [r3, #0]
 80101d0:	4b20      	ldr	r3, [pc, #128]	; (8010254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	07d2      	lsls	r2, r2, #31
 80101d6:	bf5c      	itt	pl
 80101d8:	2201      	movpl	r2, #1
 80101da:	601a      	strpl	r2, [r3, #0]
 80101dc:	4b1e      	ldr	r3, [pc, #120]	; (8010258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	07d0      	lsls	r0, r2, #31
 80101e2:	bf5c      	itt	pl
 80101e4:	2201      	movpl	r2, #1
 80101e6:	601a      	strpl	r2, [r3, #0]
 80101e8:	4b1c      	ldr	r3, [pc, #112]	; (801025c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	07d1      	lsls	r1, r2, #31
 80101ee:	bf5c      	itt	pl
 80101f0:	2201      	movpl	r2, #1
 80101f2:	601a      	strpl	r2, [r3, #0]
 80101f4:	4b1a      	ldr	r3, [pc, #104]	; (8010260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	07d2      	lsls	r2, r2, #31
 80101fa:	bf5c      	itt	pl
 80101fc:	2201      	movpl	r2, #1
 80101fe:	601a      	strpl	r2, [r3, #0]
 8010200:	4b18      	ldr	r3, [pc, #96]	; (8010264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	07d0      	lsls	r0, r2, #31
 8010206:	bf5c      	itt	pl
 8010208:	2201      	movpl	r2, #1
 801020a:	601a      	strpl	r2, [r3, #0]
 801020c:	4b16      	ldr	r3, [pc, #88]	; (8010268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	07d1      	lsls	r1, r2, #31
 8010212:	bf5c      	itt	pl
 8010214:	2201      	movpl	r2, #1
 8010216:	601a      	strpl	r2, [r3, #0]
 8010218:	4b14      	ldr	r3, [pc, #80]	; (801026c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	07d2      	lsls	r2, r2, #31
 801021e:	bf5c      	itt	pl
 8010220:	2201      	movpl	r2, #1
 8010222:	601a      	strpl	r2, [r3, #0]
 8010224:	4b12      	ldr	r3, [pc, #72]	; (8010270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	07d0      	lsls	r0, r2, #31
 801022a:	bf5c      	itt	pl
 801022c:	2201      	movpl	r2, #1
 801022e:	601a      	strpl	r2, [r3, #0]
 8010230:	4b10      	ldr	r3, [pc, #64]	; (8010274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	07d1      	lsls	r1, r2, #31
 8010236:	bf5c      	itt	pl
 8010238:	2201      	movpl	r2, #1
 801023a:	601a      	strpl	r2, [r3, #0]
 801023c:	4b0e      	ldr	r3, [pc, #56]	; (8010278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	07d2      	lsls	r2, r2, #31
 8010242:	bf5c      	itt	pl
 8010244:	2201      	movpl	r2, #1
 8010246:	601a      	strpl	r2, [r3, #0]
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	20001cac 	.word	0x20001cac
 8010250:	20001ca8 	.word	0x20001ca8
 8010254:	20001ca4 	.word	0x20001ca4
 8010258:	20001ca0 	.word	0x20001ca0
 801025c:	20001c9c 	.word	0x20001c9c
 8010260:	20001c98 	.word	0x20001c98
 8010264:	20001c94 	.word	0x20001c94
 8010268:	20001c90 	.word	0x20001c90
 801026c:	20001c8c 	.word	0x20001c8c
 8010270:	20001c88 	.word	0x20001c88
 8010274:	20001c84 	.word	0x20001c84
 8010278:	20001c80 	.word	0x20001c80

0801027c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 801027c:	4b13      	ldr	r3, [pc, #76]	; (80102cc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 801027e:	4298      	cmp	r0, r3
 8010280:	b510      	push	{r4, lr}
 8010282:	d81f      	bhi.n	80102c4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 8010284:	4288      	cmp	r0, r1
 8010286:	4604      	mov	r4, r0
 8010288:	d914      	bls.n	80102b4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
 801028a:	004a      	lsls	r2, r1, #1
 801028c:	4290      	cmp	r0, r2
 801028e:	bf38      	it	cc
 8010290:	4614      	movcc	r4, r2
 8010292:	f104 021d 	add.w	r2, r4, #29
 8010296:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801029a:	f104 000d 	add.w	r0, r4, #13
 801029e:	d90b      	bls.n	80102b8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80102a0:	42a1      	cmp	r1, r4
 80102a2:	d209      	bcs.n	80102b8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80102a4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80102a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80102ac:	1aa4      	subs	r4, r4, r2
 80102ae:	429c      	cmp	r4, r3
 80102b0:	bf28      	it	cs
 80102b2:	461c      	movcs	r4, r3
 80102b4:	f104 000d 	add.w	r0, r4, #13
 80102b8:	f7fe fe88 	bl	800efcc <_Znwj>
 80102bc:	2200      	movs	r2, #0
 80102be:	6044      	str	r4, [r0, #4]
 80102c0:	6082      	str	r2, [r0, #8]
 80102c2:	bd10      	pop	{r4, pc}
 80102c4:	4802      	ldr	r0, [pc, #8]	; (80102d0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 80102c6:	f7ff fcb1 	bl	800fc2c <_ZSt20__throw_length_errorPKc>
 80102ca:	bf00      	nop
 80102cc:	3ffffffc 	.word	0x3ffffffc
 80102d0:	08016c34 	.word	0x08016c34

080102d4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>:
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	1a0c      	subs	r4, r1, r0
 80102d8:	4606      	mov	r6, r0
 80102da:	2100      	movs	r1, #0
 80102dc:	4620      	mov	r0, r4
 80102de:	f7ff ffcd 	bl	801027c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 80102e2:	2c01      	cmp	r4, #1
 80102e4:	4605      	mov	r5, r0
 80102e6:	f100 030c 	add.w	r3, r0, #12
 80102ea:	d005      	beq.n	80102f8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x24>
 80102ec:	b984      	cbnz	r4, 8010310 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x3c>
 80102ee:	4a0c      	ldr	r2, [pc, #48]	; (8010320 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
 80102f0:	4295      	cmp	r5, r2
 80102f2:	d106      	bne.n	8010302 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x2e>
 80102f4:	4618      	mov	r0, r3
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	7832      	ldrb	r2, [r6, #0]
 80102fa:	7302      	strb	r2, [r0, #12]
 80102fc:	4a08      	ldr	r2, [pc, #32]	; (8010320 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
 80102fe:	4295      	cmp	r5, r2
 8010300:	d0f8      	beq.n	80102f4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x20>
 8010302:	1929      	adds	r1, r5, r4
 8010304:	2200      	movs	r2, #0
 8010306:	602c      	str	r4, [r5, #0]
 8010308:	60aa      	str	r2, [r5, #8]
 801030a:	730a      	strb	r2, [r1, #12]
 801030c:	4618      	mov	r0, r3
 801030e:	bd70      	pop	{r4, r5, r6, pc}
 8010310:	4618      	mov	r0, r3
 8010312:	4631      	mov	r1, r6
 8010314:	4622      	mov	r2, r4
 8010316:	f001 fa3c 	bl	8011792 <memcpy>
 801031a:	4603      	mov	r3, r0
 801031c:	e7e7      	b.n	80102ee <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x1a>
 801031e:	bf00      	nop
 8010320:	20001cb0 	.word	0x20001cb0

08010324 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8010324:	f7ff bcba 	b.w	800fc9c <_ZdlPv>

08010328 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8010328:	4288      	cmp	r0, r1
 801032a:	d002      	beq.n	8010332 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
 801032c:	b118      	cbz	r0, 8010336 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
 801032e:	f7ff bfd1 	b.w	80102d4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>
 8010332:	4804      	ldr	r0, [pc, #16]	; (8010344 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
 8010334:	4770      	bx	lr
 8010336:	2900      	cmp	r1, #0
 8010338:	d0f9      	beq.n	801032e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
 801033a:	b508      	push	{r3, lr}
 801033c:	4802      	ldr	r0, [pc, #8]	; (8010348 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
 801033e:	f7ff fc5d 	bl	800fbfc <_ZSt19__throw_logic_errorPKc>
 8010342:	bf00      	nop
 8010344:	20001cbc 	.word	0x20001cbc
 8010348:	08016c08 	.word	0x08016c08

0801034c <_ZNSsC1EPKcjRKSaIcE>:
 801034c:	b538      	push	{r3, r4, r5, lr}
 801034e:	460d      	mov	r5, r1
 8010350:	4604      	mov	r4, r0
 8010352:	4411      	add	r1, r2
 8010354:	4628      	mov	r0, r5
 8010356:	461a      	mov	r2, r3
 8010358:	f04f 0300 	mov.w	r3, #0
 801035c:	f7ff ffe4 	bl	8010328 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8010360:	6020      	str	r0, [r4, #0]
 8010362:	4620      	mov	r0, r4
 8010364:	bd38      	pop	{r3, r4, r5, pc}
 8010366:	bf00      	nop

08010368 <_ZNSsC1EPKcRKSaIcE>:
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	4605      	mov	r5, r0
 801036c:	4616      	mov	r6, r2
 801036e:	460c      	mov	r4, r1
 8010370:	b161      	cbz	r1, 801038c <_ZNSsC1EPKcRKSaIcE+0x24>
 8010372:	4608      	mov	r0, r1
 8010374:	f7f6 fade 	bl	8006934 <strlen>
 8010378:	1821      	adds	r1, r4, r0
 801037a:	4632      	mov	r2, r6
 801037c:	4620      	mov	r0, r4
 801037e:	f04f 0300 	mov.w	r3, #0
 8010382:	f7ff ffd1 	bl	8010328 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8010386:	6028      	str	r0, [r5, #0]
 8010388:	4628      	mov	r0, r5
 801038a:	bd70      	pop	{r4, r5, r6, pc}
 801038c:	f04f 31ff 	mov.w	r1, #4294967295
 8010390:	e7f3      	b.n	801037a <_ZNSsC1EPKcRKSaIcE+0x12>
 8010392:	bf00      	nop

08010394 <_ZNSt11logic_errorC1EPKc>:
 8010394:	b510      	push	{r4, lr}
 8010396:	4b08      	ldr	r3, [pc, #32]	; (80103b8 <_ZNSt11logic_errorC1EPKc+0x24>)
 8010398:	b082      	sub	sp, #8
 801039a:	4604      	mov	r4, r0
 801039c:	aa01      	add	r2, sp, #4
 801039e:	f840 3b04 	str.w	r3, [r0], #4
 80103a2:	f7ff ffe1 	bl	8010368 <_ZNSsC1EPKcRKSaIcE>
 80103a6:	4620      	mov	r0, r4
 80103a8:	b002      	add	sp, #8
 80103aa:	bd10      	pop	{r4, pc}
 80103ac:	4620      	mov	r0, r4
 80103ae:	f7ff fc65 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 80103b2:	f7fe ff8f 	bl	800f2d4 <__cxa_end_cleanup>
 80103b6:	bf00      	nop
 80103b8:	08016ab0 	.word	0x08016ab0

080103bc <_ZNSt12length_errorC1EPKc>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	4604      	mov	r4, r0
 80103c0:	f7ff ffe8 	bl	8010394 <_ZNSt11logic_errorC1EPKc>
 80103c4:	4b01      	ldr	r3, [pc, #4]	; (80103cc <_ZNSt12length_errorC1EPKc+0x10>)
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	4620      	mov	r0, r4
 80103ca:	bd10      	pop	{r4, pc}
 80103cc:	08016ac4 	.word	0x08016ac4

080103d0 <_ZNSt12__cow_stringC1EPKcj>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	ab01      	add	r3, sp, #4
 80103d6:	4604      	mov	r4, r0
 80103d8:	f7ff ffb8 	bl	801034c <_ZNSsC1EPKcjRKSaIcE>
 80103dc:	4620      	mov	r0, r4
 80103de:	b002      	add	sp, #8
 80103e0:	bd10      	pop	{r4, pc}
 80103e2:	bf00      	nop

080103e4 <_ZNKSt17bad_function_call4whatEv>:
 80103e4:	4800      	ldr	r0, [pc, #0]	; (80103e8 <_ZNKSt17bad_function_call4whatEv+0x4>)
 80103e6:	4770      	bx	lr
 80103e8:	08016c4c 	.word	0x08016c4c

080103ec <_ZNSt17bad_function_callD1Ev>:
 80103ec:	b510      	push	{r4, lr}
 80103ee:	4b03      	ldr	r3, [pc, #12]	; (80103fc <_ZNSt17bad_function_callD1Ev+0x10>)
 80103f0:	6003      	str	r3, [r0, #0]
 80103f2:	4604      	mov	r4, r0
 80103f4:	f7ff fc42 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 80103f8:	4620      	mov	r0, r4
 80103fa:	bd10      	pop	{r4, pc}
 80103fc:	08016c8c 	.word	0x08016c8c

08010400 <_ZNSt17bad_function_callD0Ev>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4b05      	ldr	r3, [pc, #20]	; (8010418 <_ZNSt17bad_function_callD0Ev+0x18>)
 8010404:	6003      	str	r3, [r0, #0]
 8010406:	4604      	mov	r4, r0
 8010408:	f7ff fc38 	bl	800fc7c <_ZNSt9exceptionD1Ev>
 801040c:	4620      	mov	r0, r4
 801040e:	f7ff fc45 	bl	800fc9c <_ZdlPv>
 8010412:	4620      	mov	r0, r4
 8010414:	bd10      	pop	{r4, pc}
 8010416:	bf00      	nop
 8010418:	08016c8c 	.word	0x08016c8c

0801041c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	4b3c      	ldr	r3, [pc, #240]	; (8010510 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8010420:	781a      	ldrb	r2, [r3, #0]
 8010422:	b082      	sub	sp, #8
 8010424:	2a00      	cmp	r2, #0
 8010426:	d135      	bne.n	8010494 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 8010428:	2401      	movs	r4, #1
 801042a:	701c      	strb	r4, [r3, #0]
 801042c:	f000 f87e 	bl	801052c <__cxa_current_exception_type>
 8010430:	2800      	cmp	r0, #0
 8010432:	d05b      	beq.n	80104ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 8010434:	6844      	ldr	r4, [r0, #4]
 8010436:	4d37      	ldr	r5, [pc, #220]	; (8010514 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8010438:	7823      	ldrb	r3, [r4, #0]
 801043a:	2b2a      	cmp	r3, #42	; 0x2a
 801043c:	ab02      	add	r3, sp, #8
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	bf08      	it	eq
 8010444:	3401      	addeq	r4, #1
 8010446:	f843 2d04 	str.w	r2, [r3, #-4]!
 801044a:	2200      	movs	r2, #0
 801044c:	4611      	mov	r1, r2
 801044e:	4620      	mov	r0, r4
 8010450:	f7f6 f9a4 	bl	800679c <__cxa_demangle>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	4606      	mov	r6, r0
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	482f      	ldr	r0, [pc, #188]	; (8010518 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 801045c:	2230      	movs	r2, #48	; 0x30
 801045e:	2101      	movs	r1, #1
 8010460:	f000 fea8 	bl	80111b4 <fwrite>
 8010464:	9b01      	ldr	r3, [sp, #4]
 8010466:	b17b      	cbz	r3, 8010488 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8010468:	682b      	ldr	r3, [r5, #0]
 801046a:	4620      	mov	r0, r4
 801046c:	68d9      	ldr	r1, [r3, #12]
 801046e:	f000 fbab 	bl	8010bc8 <fputs>
 8010472:	682b      	ldr	r3, [r5, #0]
 8010474:	4829      	ldr	r0, [pc, #164]	; (801051c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	2202      	movs	r2, #2
 801047a:	2101      	movs	r1, #1
 801047c:	f000 fe9a 	bl	80111b4 <fwrite>
 8010480:	9b01      	ldr	r3, [sp, #4]
 8010482:	b18b      	cbz	r3, 80104a8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 8010484:	f7fe feca 	bl	800f21c <__cxa_rethrow>
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	4630      	mov	r0, r6
 801048c:	68d9      	ldr	r1, [r3, #12]
 801048e:	f000 fb9b 	bl	8010bc8 <fputs>
 8010492:	e7ee      	b.n	8010472 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 8010494:	4b1f      	ldr	r3, [pc, #124]	; (8010514 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8010496:	4822      	ldr	r0, [pc, #136]	; (8010520 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	221d      	movs	r2, #29
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	2101      	movs	r1, #1
 80104a0:	f000 fe88 	bl	80111b4 <fwrite>
 80104a4:	f000 f936 	bl	8010714 <abort>
 80104a8:	4630      	mov	r0, r6
 80104aa:	f000 ff3b 	bl	8011324 <free>
 80104ae:	e7e9      	b.n	8010484 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 80104b0:	2901      	cmp	r1, #1
 80104b2:	460c      	mov	r4, r1
 80104b4:	d127      	bne.n	8010506 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 80104b6:	f7ff fc91 	bl	800fddc <__cxa_begin_catch>
 80104ba:	6803      	ldr	r3, [r0, #0]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	4798      	blx	r3
 80104c0:	682b      	ldr	r3, [r5, #0]
 80104c2:	4606      	mov	r6, r0
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	4817      	ldr	r0, [pc, #92]	; (8010524 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 80104c8:	4621      	mov	r1, r4
 80104ca:	220b      	movs	r2, #11
 80104cc:	f000 fe72 	bl	80111b4 <fwrite>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	4630      	mov	r0, r6
 80104d4:	68d9      	ldr	r1, [r3, #12]
 80104d6:	f000 fb77 	bl	8010bc8 <fputs>
 80104da:	682b      	ldr	r3, [r5, #0]
 80104dc:	200a      	movs	r0, #10
 80104de:	68d9      	ldr	r1, [r3, #12]
 80104e0:	f000 fb1c 	bl	8010b1c <fputc>
 80104e4:	f7ff fcb8 	bl	800fe58 <__cxa_end_catch>
 80104e8:	f000 f914 	bl	8010714 <abort>
 80104ec:	4b09      	ldr	r3, [pc, #36]	; (8010514 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 80104ee:	480e      	ldr	r0, [pc, #56]	; (8010528 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4621      	mov	r1, r4
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	222d      	movs	r2, #45	; 0x2d
 80104f8:	f000 fe5c 	bl	80111b4 <fwrite>
 80104fc:	e7f4      	b.n	80104e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 80104fe:	f7ff fcab 	bl	800fe58 <__cxa_end_catch>
 8010502:	f7fe fee7 	bl	800f2d4 <__cxa_end_cleanup>
 8010506:	f7ff fc69 	bl	800fddc <__cxa_begin_catch>
 801050a:	f7ff fca5 	bl	800fe58 <__cxa_end_catch>
 801050e:	e7eb      	b.n	80104e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 8010510:	20001cc0 	.word	0x20001cc0
 8010514:	20000050 	.word	0x20000050
 8010518:	08016cb8 	.word	0x08016cb8
 801051c:	08016cec 	.word	0x08016cec
 8010520:	08016c98 	.word	0x08016c98
 8010524:	08016d20 	.word	0x08016d20
 8010528:	08016cf0 	.word	0x08016cf0

0801052c <__cxa_current_exception_type>:
 801052c:	b508      	push	{r3, lr}
 801052e:	f7fe fecd 	bl	800f2cc <__cxa_get_globals>
 8010532:	6800      	ldr	r0, [r0, #0]
 8010534:	b130      	cbz	r0, 8010544 <__cxa_current_exception_type+0x18>
 8010536:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801053a:	2b01      	cmp	r3, #1
 801053c:	bf04      	itt	eq
 801053e:	6800      	ldreq	r0, [r0, #0]
 8010540:	3878      	subeq	r0, #120	; 0x78
 8010542:	6800      	ldr	r0, [r0, #0]
 8010544:	bd08      	pop	{r3, pc}
 8010546:	bf00      	nop

08010548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8010548:	4b18      	ldr	r3, [pc, #96]	; (80105ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	07d1      	lsls	r1, r2, #31
 801054e:	bf5c      	itt	pl
 8010550:	2201      	movpl	r2, #1
 8010552:	601a      	strpl	r2, [r3, #0]
 8010554:	4b16      	ldr	r3, [pc, #88]	; (80105b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	07d2      	lsls	r2, r2, #31
 801055a:	bf5c      	itt	pl
 801055c:	2201      	movpl	r2, #1
 801055e:	601a      	strpl	r2, [r3, #0]
 8010560:	4b14      	ldr	r3, [pc, #80]	; (80105b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	07d0      	lsls	r0, r2, #31
 8010566:	bf5c      	itt	pl
 8010568:	2201      	movpl	r2, #1
 801056a:	601a      	strpl	r2, [r3, #0]
 801056c:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	07d1      	lsls	r1, r2, #31
 8010572:	bf5c      	itt	pl
 8010574:	2201      	movpl	r2, #1
 8010576:	601a      	strpl	r2, [r3, #0]
 8010578:	4b10      	ldr	r3, [pc, #64]	; (80105bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	07d2      	lsls	r2, r2, #31
 801057e:	bf5c      	itt	pl
 8010580:	2201      	movpl	r2, #1
 8010582:	601a      	strpl	r2, [r3, #0]
 8010584:	4b0e      	ldr	r3, [pc, #56]	; (80105c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	07d0      	lsls	r0, r2, #31
 801058a:	bf5c      	itt	pl
 801058c:	2201      	movpl	r2, #1
 801058e:	601a      	strpl	r2, [r3, #0]
 8010590:	4b0c      	ldr	r3, [pc, #48]	; (80105c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	07d1      	lsls	r1, r2, #31
 8010596:	bf5c      	itt	pl
 8010598:	2201      	movpl	r2, #1
 801059a:	601a      	strpl	r2, [r3, #0]
 801059c:	4b0a      	ldr	r3, [pc, #40]	; (80105c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	07d2      	lsls	r2, r2, #31
 80105a2:	bf5c      	itt	pl
 80105a4:	2201      	movpl	r2, #1
 80105a6:	601a      	strpl	r2, [r3, #0]
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop
 80105ac:	20001ce0 	.word	0x20001ce0
 80105b0:	20001cdc 	.word	0x20001cdc
 80105b4:	20001cd8 	.word	0x20001cd8
 80105b8:	20001cd4 	.word	0x20001cd4
 80105bc:	20001cd0 	.word	0x20001cd0
 80105c0:	20001ccc 	.word	0x20001ccc
 80105c4:	20001cc8 	.word	0x20001cc8
 80105c8:	20001cc4 	.word	0x20001cc4

080105cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80105cc:	4b24      	ldr	r3, [pc, #144]	; (8010660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	07d0      	lsls	r0, r2, #31
 80105d2:	bf5c      	itt	pl
 80105d4:	2201      	movpl	r2, #1
 80105d6:	601a      	strpl	r2, [r3, #0]
 80105d8:	4b22      	ldr	r3, [pc, #136]	; (8010664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	07d1      	lsls	r1, r2, #31
 80105de:	bf5c      	itt	pl
 80105e0:	2201      	movpl	r2, #1
 80105e2:	601a      	strpl	r2, [r3, #0]
 80105e4:	4b20      	ldr	r3, [pc, #128]	; (8010668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	07d2      	lsls	r2, r2, #31
 80105ea:	bf5c      	itt	pl
 80105ec:	2201      	movpl	r2, #1
 80105ee:	601a      	strpl	r2, [r3, #0]
 80105f0:	4b1e      	ldr	r3, [pc, #120]	; (801066c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	07d0      	lsls	r0, r2, #31
 80105f6:	bf5c      	itt	pl
 80105f8:	2201      	movpl	r2, #1
 80105fa:	601a      	strpl	r2, [r3, #0]
 80105fc:	4b1c      	ldr	r3, [pc, #112]	; (8010670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	07d1      	lsls	r1, r2, #31
 8010602:	bf5c      	itt	pl
 8010604:	2201      	movpl	r2, #1
 8010606:	601a      	strpl	r2, [r3, #0]
 8010608:	4b1a      	ldr	r3, [pc, #104]	; (8010674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	07d2      	lsls	r2, r2, #31
 801060e:	bf5c      	itt	pl
 8010610:	2201      	movpl	r2, #1
 8010612:	601a      	strpl	r2, [r3, #0]
 8010614:	4b18      	ldr	r3, [pc, #96]	; (8010678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	07d0      	lsls	r0, r2, #31
 801061a:	bf5c      	itt	pl
 801061c:	2201      	movpl	r2, #1
 801061e:	601a      	strpl	r2, [r3, #0]
 8010620:	4b16      	ldr	r3, [pc, #88]	; (801067c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	07d1      	lsls	r1, r2, #31
 8010626:	bf5c      	itt	pl
 8010628:	2201      	movpl	r2, #1
 801062a:	601a      	strpl	r2, [r3, #0]
 801062c:	4b14      	ldr	r3, [pc, #80]	; (8010680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	07d2      	lsls	r2, r2, #31
 8010632:	bf5c      	itt	pl
 8010634:	2201      	movpl	r2, #1
 8010636:	601a      	strpl	r2, [r3, #0]
 8010638:	4b12      	ldr	r3, [pc, #72]	; (8010684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	07d0      	lsls	r0, r2, #31
 801063e:	bf5c      	itt	pl
 8010640:	2201      	movpl	r2, #1
 8010642:	601a      	strpl	r2, [r3, #0]
 8010644:	4b10      	ldr	r3, [pc, #64]	; (8010688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	07d1      	lsls	r1, r2, #31
 801064a:	bf5c      	itt	pl
 801064c:	2201      	movpl	r2, #1
 801064e:	601a      	strpl	r2, [r3, #0]
 8010650:	4b0e      	ldr	r3, [pc, #56]	; (801068c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	07d2      	lsls	r2, r2, #31
 8010656:	bf5c      	itt	pl
 8010658:	2201      	movpl	r2, #1
 801065a:	601a      	strpl	r2, [r3, #0]
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	20001d10 	.word	0x20001d10
 8010664:	20001d0c 	.word	0x20001d0c
 8010668:	20001d08 	.word	0x20001d08
 801066c:	20001d04 	.word	0x20001d04
 8010670:	20001d00 	.word	0x20001d00
 8010674:	20001cfc 	.word	0x20001cfc
 8010678:	20001cf8 	.word	0x20001cf8
 801067c:	20001cf4 	.word	0x20001cf4
 8010680:	20001cf0 	.word	0x20001cf0
 8010684:	20001cec 	.word	0x20001cec
 8010688:	20001ce8 	.word	0x20001ce8
 801068c:	20001ce4 	.word	0x20001ce4

08010690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8010690:	4b18      	ldr	r3, [pc, #96]	; (80106f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	07d1      	lsls	r1, r2, #31
 8010696:	bf5c      	itt	pl
 8010698:	2201      	movpl	r2, #1
 801069a:	601a      	strpl	r2, [r3, #0]
 801069c:	4b16      	ldr	r3, [pc, #88]	; (80106f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	07d2      	lsls	r2, r2, #31
 80106a2:	bf5c      	itt	pl
 80106a4:	2201      	movpl	r2, #1
 80106a6:	601a      	strpl	r2, [r3, #0]
 80106a8:	4b14      	ldr	r3, [pc, #80]	; (80106fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	07d0      	lsls	r0, r2, #31
 80106ae:	bf5c      	itt	pl
 80106b0:	2201      	movpl	r2, #1
 80106b2:	601a      	strpl	r2, [r3, #0]
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	07d1      	lsls	r1, r2, #31
 80106ba:	bf5c      	itt	pl
 80106bc:	2201      	movpl	r2, #1
 80106be:	601a      	strpl	r2, [r3, #0]
 80106c0:	4b10      	ldr	r3, [pc, #64]	; (8010704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	07d2      	lsls	r2, r2, #31
 80106c6:	bf5c      	itt	pl
 80106c8:	2201      	movpl	r2, #1
 80106ca:	601a      	strpl	r2, [r3, #0]
 80106cc:	4b0e      	ldr	r3, [pc, #56]	; (8010708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	07d0      	lsls	r0, r2, #31
 80106d2:	bf5c      	itt	pl
 80106d4:	2201      	movpl	r2, #1
 80106d6:	601a      	strpl	r2, [r3, #0]
 80106d8:	4b0c      	ldr	r3, [pc, #48]	; (801070c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	07d1      	lsls	r1, r2, #31
 80106de:	bf5c      	itt	pl
 80106e0:	2201      	movpl	r2, #1
 80106e2:	601a      	strpl	r2, [r3, #0]
 80106e4:	4b0a      	ldr	r3, [pc, #40]	; (8010710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	07d2      	lsls	r2, r2, #31
 80106ea:	bf5c      	itt	pl
 80106ec:	2201      	movpl	r2, #1
 80106ee:	601a      	strpl	r2, [r3, #0]
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20001d30 	.word	0x20001d30
 80106f8:	20001d2c 	.word	0x20001d2c
 80106fc:	20001d28 	.word	0x20001d28
 8010700:	20001d24 	.word	0x20001d24
 8010704:	20001d20 	.word	0x20001d20
 8010708:	20001d1c 	.word	0x20001d1c
 801070c:	20001d18 	.word	0x20001d18
 8010710:	20001d14 	.word	0x20001d14

08010714 <abort>:
 8010714:	b508      	push	{r3, lr}
 8010716:	2006      	movs	r0, #6
 8010718:	f001 fb10 	bl	8011d3c <raise>
 801071c:	2001      	movs	r0, #1
 801071e:	f7fe f987 	bl	800ea30 <_exit>

08010722 <__cxa_atexit>:
 8010722:	4613      	mov	r3, r2
 8010724:	460a      	mov	r2, r1
 8010726:	4601      	mov	r1, r0
 8010728:	2002      	movs	r0, #2
 801072a:	f003 bef5 	b.w	8014518 <__register_exitproc>
	...

08010730 <__errno>:
 8010730:	4b01      	ldr	r3, [pc, #4]	; (8010738 <__errno+0x8>)
 8010732:	6818      	ldr	r0, [r3, #0]
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	20000050 	.word	0x20000050

0801073c <__sflush_r>:
 801073c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010740:	b293      	uxth	r3, r2
 8010742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010746:	4605      	mov	r5, r0
 8010748:	0718      	lsls	r0, r3, #28
 801074a:	460c      	mov	r4, r1
 801074c:	d461      	bmi.n	8010812 <__sflush_r+0xd6>
 801074e:	684b      	ldr	r3, [r1, #4]
 8010750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010754:	2b00      	cmp	r3, #0
 8010756:	818a      	strh	r2, [r1, #12]
 8010758:	dc05      	bgt.n	8010766 <__sflush_r+0x2a>
 801075a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801075c:	2b00      	cmp	r3, #0
 801075e:	dc02      	bgt.n	8010766 <__sflush_r+0x2a>
 8010760:	2000      	movs	r0, #0
 8010762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010768:	2e00      	cmp	r6, #0
 801076a:	d0f9      	beq.n	8010760 <__sflush_r+0x24>
 801076c:	2300      	movs	r3, #0
 801076e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010772:	682f      	ldr	r7, [r5, #0]
 8010774:	602b      	str	r3, [r5, #0]
 8010776:	d037      	beq.n	80107e8 <__sflush_r+0xac>
 8010778:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	075a      	lsls	r2, r3, #29
 801077e:	d505      	bpl.n	801078c <__sflush_r+0x50>
 8010780:	6863      	ldr	r3, [r4, #4]
 8010782:	1ac0      	subs	r0, r0, r3
 8010784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010786:	b10b      	cbz	r3, 801078c <__sflush_r+0x50>
 8010788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801078a:	1ac0      	subs	r0, r0, r3
 801078c:	2300      	movs	r3, #0
 801078e:	4602      	mov	r2, r0
 8010790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010792:	6a21      	ldr	r1, [r4, #32]
 8010794:	4628      	mov	r0, r5
 8010796:	47b0      	blx	r6
 8010798:	1c43      	adds	r3, r0, #1
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	d106      	bne.n	80107ac <__sflush_r+0x70>
 801079e:	6829      	ldr	r1, [r5, #0]
 80107a0:	291d      	cmp	r1, #29
 80107a2:	d84f      	bhi.n	8010844 <__sflush_r+0x108>
 80107a4:	4a2d      	ldr	r2, [pc, #180]	; (801085c <__sflush_r+0x120>)
 80107a6:	40ca      	lsrs	r2, r1
 80107a8:	07d6      	lsls	r6, r2, #31
 80107aa:	d54b      	bpl.n	8010844 <__sflush_r+0x108>
 80107ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107b0:	b21b      	sxth	r3, r3
 80107b2:	2200      	movs	r2, #0
 80107b4:	6062      	str	r2, [r4, #4]
 80107b6:	04d9      	lsls	r1, r3, #19
 80107b8:	6922      	ldr	r2, [r4, #16]
 80107ba:	81a3      	strh	r3, [r4, #12]
 80107bc:	6022      	str	r2, [r4, #0]
 80107be:	d504      	bpl.n	80107ca <__sflush_r+0x8e>
 80107c0:	1c42      	adds	r2, r0, #1
 80107c2:	d101      	bne.n	80107c8 <__sflush_r+0x8c>
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	b903      	cbnz	r3, 80107ca <__sflush_r+0x8e>
 80107c8:	6560      	str	r0, [r4, #84]	; 0x54
 80107ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107cc:	602f      	str	r7, [r5, #0]
 80107ce:	2900      	cmp	r1, #0
 80107d0:	d0c6      	beq.n	8010760 <__sflush_r+0x24>
 80107d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107d6:	4299      	cmp	r1, r3
 80107d8:	d002      	beq.n	80107e0 <__sflush_r+0xa4>
 80107da:	4628      	mov	r0, r5
 80107dc:	f000 fa52 	bl	8010c84 <_free_r>
 80107e0:	2000      	movs	r0, #0
 80107e2:	6360      	str	r0, [r4, #52]	; 0x34
 80107e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e8:	6a21      	ldr	r1, [r4, #32]
 80107ea:	2301      	movs	r3, #1
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b0      	blx	r6
 80107f0:	1c41      	adds	r1, r0, #1
 80107f2:	d1c2      	bne.n	801077a <__sflush_r+0x3e>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d0bf      	beq.n	801077a <__sflush_r+0x3e>
 80107fa:	2b1d      	cmp	r3, #29
 80107fc:	d001      	beq.n	8010802 <__sflush_r+0xc6>
 80107fe:	2b16      	cmp	r3, #22
 8010800:	d101      	bne.n	8010806 <__sflush_r+0xca>
 8010802:	602f      	str	r7, [r5, #0]
 8010804:	e7ac      	b.n	8010760 <__sflush_r+0x24>
 8010806:	89a3      	ldrh	r3, [r4, #12]
 8010808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010812:	690f      	ldr	r7, [r1, #16]
 8010814:	2f00      	cmp	r7, #0
 8010816:	d0a3      	beq.n	8010760 <__sflush_r+0x24>
 8010818:	079b      	lsls	r3, r3, #30
 801081a:	680e      	ldr	r6, [r1, #0]
 801081c:	bf08      	it	eq
 801081e:	694b      	ldreq	r3, [r1, #20]
 8010820:	600f      	str	r7, [r1, #0]
 8010822:	bf18      	it	ne
 8010824:	2300      	movne	r3, #0
 8010826:	eba6 0807 	sub.w	r8, r6, r7
 801082a:	608b      	str	r3, [r1, #8]
 801082c:	f1b8 0f00 	cmp.w	r8, #0
 8010830:	dd96      	ble.n	8010760 <__sflush_r+0x24>
 8010832:	4643      	mov	r3, r8
 8010834:	463a      	mov	r2, r7
 8010836:	6a21      	ldr	r1, [r4, #32]
 8010838:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801083a:	4628      	mov	r0, r5
 801083c:	47b0      	blx	r6
 801083e:	2800      	cmp	r0, #0
 8010840:	dc07      	bgt.n	8010852 <__sflush_r+0x116>
 8010842:	89a3      	ldrh	r3, [r4, #12]
 8010844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	f04f 30ff 	mov.w	r0, #4294967295
 801084e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010852:	4407      	add	r7, r0
 8010854:	eba8 0800 	sub.w	r8, r8, r0
 8010858:	e7e8      	b.n	801082c <__sflush_r+0xf0>
 801085a:	bf00      	nop
 801085c:	20400001 	.word	0x20400001

08010860 <_fflush_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	690b      	ldr	r3, [r1, #16]
 8010864:	4605      	mov	r5, r0
 8010866:	460c      	mov	r4, r1
 8010868:	b913      	cbnz	r3, 8010870 <_fflush_r+0x10>
 801086a:	2500      	movs	r5, #0
 801086c:	4628      	mov	r0, r5
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	b118      	cbz	r0, 801087a <_fflush_r+0x1a>
 8010872:	6983      	ldr	r3, [r0, #24]
 8010874:	b90b      	cbnz	r3, 801087a <_fflush_r+0x1a>
 8010876:	f000 f899 	bl	80109ac <__sinit>
 801087a:	4b14      	ldr	r3, [pc, #80]	; (80108cc <_fflush_r+0x6c>)
 801087c:	429c      	cmp	r4, r3
 801087e:	d11b      	bne.n	80108b8 <_fflush_r+0x58>
 8010880:	686c      	ldr	r4, [r5, #4]
 8010882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d0ef      	beq.n	801086a <_fflush_r+0xa>
 801088a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801088c:	07d0      	lsls	r0, r2, #31
 801088e:	d404      	bmi.n	801089a <_fflush_r+0x3a>
 8010890:	0599      	lsls	r1, r3, #22
 8010892:	d402      	bmi.n	801089a <_fflush_r+0x3a>
 8010894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010896:	f000 fccf 	bl	8011238 <__retarget_lock_acquire_recursive>
 801089a:	4628      	mov	r0, r5
 801089c:	4621      	mov	r1, r4
 801089e:	f7ff ff4d 	bl	801073c <__sflush_r>
 80108a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108a4:	07da      	lsls	r2, r3, #31
 80108a6:	4605      	mov	r5, r0
 80108a8:	d4e0      	bmi.n	801086c <_fflush_r+0xc>
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	059b      	lsls	r3, r3, #22
 80108ae:	d4dd      	bmi.n	801086c <_fflush_r+0xc>
 80108b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108b2:	f000 fcc3 	bl	801123c <__retarget_lock_release_recursive>
 80108b6:	e7d9      	b.n	801086c <_fflush_r+0xc>
 80108b8:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <_fflush_r+0x70>)
 80108ba:	429c      	cmp	r4, r3
 80108bc:	d101      	bne.n	80108c2 <_fflush_r+0x62>
 80108be:	68ac      	ldr	r4, [r5, #8]
 80108c0:	e7df      	b.n	8010882 <_fflush_r+0x22>
 80108c2:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <_fflush_r+0x74>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	bf08      	it	eq
 80108c8:	68ec      	ldreq	r4, [r5, #12]
 80108ca:	e7da      	b.n	8010882 <_fflush_r+0x22>
 80108cc:	080176a0 	.word	0x080176a0
 80108d0:	080176c0 	.word	0x080176c0
 80108d4:	08017680 	.word	0x08017680

080108d8 <fflush>:
 80108d8:	4601      	mov	r1, r0
 80108da:	b920      	cbnz	r0, 80108e6 <fflush+0xe>
 80108dc:	4b04      	ldr	r3, [pc, #16]	; (80108f0 <fflush+0x18>)
 80108de:	4905      	ldr	r1, [pc, #20]	; (80108f4 <fflush+0x1c>)
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	f000 bbeb 	b.w	80110bc <_fwalk_reent>
 80108e6:	4b04      	ldr	r3, [pc, #16]	; (80108f8 <fflush+0x20>)
 80108e8:	6818      	ldr	r0, [r3, #0]
 80108ea:	f7ff bfb9 	b.w	8010860 <_fflush_r>
 80108ee:	bf00      	nop
 80108f0:	080176e0 	.word	0x080176e0
 80108f4:	08010861 	.word	0x08010861
 80108f8:	20000050 	.word	0x20000050

080108fc <_cleanup_r>:
 80108fc:	4901      	ldr	r1, [pc, #4]	; (8010904 <_cleanup_r+0x8>)
 80108fe:	f000 bbdd 	b.w	80110bc <_fwalk_reent>
 8010902:	bf00      	nop
 8010904:	080152dd 	.word	0x080152dd

08010908 <std.isra.0>:
 8010908:	2300      	movs	r3, #0
 801090a:	b510      	push	{r4, lr}
 801090c:	4604      	mov	r4, r0
 801090e:	6003      	str	r3, [r0, #0]
 8010910:	6043      	str	r3, [r0, #4]
 8010912:	6083      	str	r3, [r0, #8]
 8010914:	8181      	strh	r1, [r0, #12]
 8010916:	6643      	str	r3, [r0, #100]	; 0x64
 8010918:	81c2      	strh	r2, [r0, #14]
 801091a:	6103      	str	r3, [r0, #16]
 801091c:	6143      	str	r3, [r0, #20]
 801091e:	6183      	str	r3, [r0, #24]
 8010920:	4619      	mov	r1, r3
 8010922:	2208      	movs	r2, #8
 8010924:	305c      	adds	r0, #92	; 0x5c
 8010926:	f000 ff59 	bl	80117dc <memset>
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <std.isra.0+0x38>)
 801092c:	6263      	str	r3, [r4, #36]	; 0x24
 801092e:	4b05      	ldr	r3, [pc, #20]	; (8010944 <std.isra.0+0x3c>)
 8010930:	62a3      	str	r3, [r4, #40]	; 0x28
 8010932:	4b05      	ldr	r3, [pc, #20]	; (8010948 <std.isra.0+0x40>)
 8010934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010936:	4b05      	ldr	r3, [pc, #20]	; (801094c <std.isra.0+0x44>)
 8010938:	6224      	str	r4, [r4, #32]
 801093a:	6323      	str	r3, [r4, #48]	; 0x30
 801093c:	bd10      	pop	{r4, pc}
 801093e:	bf00      	nop
 8010940:	08011dbd 	.word	0x08011dbd
 8010944:	08011ddf 	.word	0x08011ddf
 8010948:	08011e17 	.word	0x08011e17
 801094c:	08011e3b 	.word	0x08011e3b

08010950 <__sfmoreglue>:
 8010950:	b570      	push	{r4, r5, r6, lr}
 8010952:	1e4a      	subs	r2, r1, #1
 8010954:	2568      	movs	r5, #104	; 0x68
 8010956:	4355      	muls	r5, r2
 8010958:	460e      	mov	r6, r1
 801095a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801095e:	f000 fce9 	bl	8011334 <_malloc_r>
 8010962:	4604      	mov	r4, r0
 8010964:	b140      	cbz	r0, 8010978 <__sfmoreglue+0x28>
 8010966:	2100      	movs	r1, #0
 8010968:	e880 0042 	stmia.w	r0, {r1, r6}
 801096c:	300c      	adds	r0, #12
 801096e:	60a0      	str	r0, [r4, #8]
 8010970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010974:	f000 ff32 	bl	80117dc <memset>
 8010978:	4620      	mov	r0, r4
 801097a:	bd70      	pop	{r4, r5, r6, pc}

0801097c <__sfp_lock_acquire>:
 801097c:	4801      	ldr	r0, [pc, #4]	; (8010984 <__sfp_lock_acquire+0x8>)
 801097e:	f000 bc5b 	b.w	8011238 <__retarget_lock_acquire_recursive>
 8010982:	bf00      	nop
 8010984:	20001fc0 	.word	0x20001fc0

08010988 <__sfp_lock_release>:
 8010988:	4801      	ldr	r0, [pc, #4]	; (8010990 <__sfp_lock_release+0x8>)
 801098a:	f000 bc57 	b.w	801123c <__retarget_lock_release_recursive>
 801098e:	bf00      	nop
 8010990:	20001fc0 	.word	0x20001fc0

08010994 <__sinit_lock_acquire>:
 8010994:	4801      	ldr	r0, [pc, #4]	; (801099c <__sinit_lock_acquire+0x8>)
 8010996:	f000 bc4f 	b.w	8011238 <__retarget_lock_acquire_recursive>
 801099a:	bf00      	nop
 801099c:	20001fbf 	.word	0x20001fbf

080109a0 <__sinit_lock_release>:
 80109a0:	4801      	ldr	r0, [pc, #4]	; (80109a8 <__sinit_lock_release+0x8>)
 80109a2:	f000 bc4b 	b.w	801123c <__retarget_lock_release_recursive>
 80109a6:	bf00      	nop
 80109a8:	20001fbf 	.word	0x20001fbf

080109ac <__sinit>:
 80109ac:	b510      	push	{r4, lr}
 80109ae:	4604      	mov	r4, r0
 80109b0:	f7ff fff0 	bl	8010994 <__sinit_lock_acquire>
 80109b4:	69a3      	ldr	r3, [r4, #24]
 80109b6:	b11b      	cbz	r3, 80109c0 <__sinit+0x14>
 80109b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109bc:	f7ff bff0 	b.w	80109a0 <__sinit_lock_release>
 80109c0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80109c4:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80109c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80109cc:	4b12      	ldr	r3, [pc, #72]	; (8010a18 <__sinit+0x6c>)
 80109ce:	4a13      	ldr	r2, [pc, #76]	; (8010a1c <__sinit+0x70>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	62a2      	str	r2, [r4, #40]	; 0x28
 80109d4:	429c      	cmp	r4, r3
 80109d6:	bf04      	itt	eq
 80109d8:	2301      	moveq	r3, #1
 80109da:	61a3      	streq	r3, [r4, #24]
 80109dc:	4620      	mov	r0, r4
 80109de:	f000 f81f 	bl	8010a20 <__sfp>
 80109e2:	6060      	str	r0, [r4, #4]
 80109e4:	4620      	mov	r0, r4
 80109e6:	f000 f81b 	bl	8010a20 <__sfp>
 80109ea:	60a0      	str	r0, [r4, #8]
 80109ec:	4620      	mov	r0, r4
 80109ee:	f000 f817 	bl	8010a20 <__sfp>
 80109f2:	2200      	movs	r2, #0
 80109f4:	60e0      	str	r0, [r4, #12]
 80109f6:	2104      	movs	r1, #4
 80109f8:	6860      	ldr	r0, [r4, #4]
 80109fa:	f7ff ff85 	bl	8010908 <std.isra.0>
 80109fe:	2201      	movs	r2, #1
 8010a00:	2109      	movs	r1, #9
 8010a02:	68a0      	ldr	r0, [r4, #8]
 8010a04:	f7ff ff80 	bl	8010908 <std.isra.0>
 8010a08:	2202      	movs	r2, #2
 8010a0a:	2112      	movs	r1, #18
 8010a0c:	68e0      	ldr	r0, [r4, #12]
 8010a0e:	f7ff ff7b 	bl	8010908 <std.isra.0>
 8010a12:	2301      	movs	r3, #1
 8010a14:	61a3      	str	r3, [r4, #24]
 8010a16:	e7cf      	b.n	80109b8 <__sinit+0xc>
 8010a18:	080176e0 	.word	0x080176e0
 8010a1c:	080108fd 	.word	0x080108fd

08010a20 <__sfp>:
 8010a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a22:	4607      	mov	r7, r0
 8010a24:	f7ff ffaa 	bl	801097c <__sfp_lock_acquire>
 8010a28:	4b1f      	ldr	r3, [pc, #124]	; (8010aa8 <__sfp+0x88>)
 8010a2a:	681e      	ldr	r6, [r3, #0]
 8010a2c:	69b3      	ldr	r3, [r6, #24]
 8010a2e:	b913      	cbnz	r3, 8010a36 <__sfp+0x16>
 8010a30:	4630      	mov	r0, r6
 8010a32:	f7ff ffbb 	bl	80109ac <__sinit>
 8010a36:	36d8      	adds	r6, #216	; 0xd8
 8010a38:	68b4      	ldr	r4, [r6, #8]
 8010a3a:	6873      	ldr	r3, [r6, #4]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	d503      	bpl.n	8010a48 <__sfp+0x28>
 8010a40:	6833      	ldr	r3, [r6, #0]
 8010a42:	b133      	cbz	r3, 8010a52 <__sfp+0x32>
 8010a44:	6836      	ldr	r6, [r6, #0]
 8010a46:	e7f7      	b.n	8010a38 <__sfp+0x18>
 8010a48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a4c:	b17d      	cbz	r5, 8010a6e <__sfp+0x4e>
 8010a4e:	3468      	adds	r4, #104	; 0x68
 8010a50:	e7f4      	b.n	8010a3c <__sfp+0x1c>
 8010a52:	2104      	movs	r1, #4
 8010a54:	4638      	mov	r0, r7
 8010a56:	f7ff ff7b 	bl	8010950 <__sfmoreglue>
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	6030      	str	r0, [r6, #0]
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d1f0      	bne.n	8010a44 <__sfp+0x24>
 8010a62:	f7ff ff91 	bl	8010988 <__sfp_lock_release>
 8010a66:	230c      	movs	r3, #12
 8010a68:	603b      	str	r3, [r7, #0]
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a72:	81e3      	strh	r3, [r4, #14]
 8010a74:	2301      	movs	r3, #1
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a7c:	6665      	str	r5, [r4, #100]	; 0x64
 8010a7e:	f000 fbd9 	bl	8011234 <__retarget_lock_init_recursive>
 8010a82:	f7ff ff81 	bl	8010988 <__sfp_lock_release>
 8010a86:	6025      	str	r5, [r4, #0]
 8010a88:	60a5      	str	r5, [r4, #8]
 8010a8a:	6065      	str	r5, [r4, #4]
 8010a8c:	6125      	str	r5, [r4, #16]
 8010a8e:	6165      	str	r5, [r4, #20]
 8010a90:	61a5      	str	r5, [r4, #24]
 8010a92:	2208      	movs	r2, #8
 8010a94:	4629      	mov	r1, r5
 8010a96:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a9a:	f000 fe9f 	bl	80117dc <memset>
 8010a9e:	6365      	str	r5, [r4, #52]	; 0x34
 8010aa0:	63a5      	str	r5, [r4, #56]	; 0x38
 8010aa2:	64a5      	str	r5, [r4, #72]	; 0x48
 8010aa4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010aa6:	e7e0      	b.n	8010a6a <__sfp+0x4a>
 8010aa8:	080176e0 	.word	0x080176e0

08010aac <_fputc_r>:
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	460e      	mov	r6, r1
 8010ab0:	4614      	mov	r4, r2
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	b118      	cbz	r0, 8010abe <_fputc_r+0x12>
 8010ab6:	6983      	ldr	r3, [r0, #24]
 8010ab8:	b90b      	cbnz	r3, 8010abe <_fputc_r+0x12>
 8010aba:	f7ff ff77 	bl	80109ac <__sinit>
 8010abe:	4b14      	ldr	r3, [pc, #80]	; (8010b10 <_fputc_r+0x64>)
 8010ac0:	429c      	cmp	r4, r3
 8010ac2:	d11a      	bne.n	8010afa <_fputc_r+0x4e>
 8010ac4:	686c      	ldr	r4, [r5, #4]
 8010ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ac8:	07d8      	lsls	r0, r3, #31
 8010aca:	d405      	bmi.n	8010ad8 <_fputc_r+0x2c>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	0599      	lsls	r1, r3, #22
 8010ad0:	d402      	bmi.n	8010ad8 <_fputc_r+0x2c>
 8010ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ad4:	f000 fbb0 	bl	8011238 <__retarget_lock_acquire_recursive>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	4628      	mov	r0, r5
 8010adc:	4631      	mov	r1, r6
 8010ade:	f000 fea9 	bl	8011834 <_putc_r>
 8010ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ae4:	07da      	lsls	r2, r3, #31
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	d405      	bmi.n	8010af6 <_fputc_r+0x4a>
 8010aea:	89a3      	ldrh	r3, [r4, #12]
 8010aec:	059b      	lsls	r3, r3, #22
 8010aee:	d402      	bmi.n	8010af6 <_fputc_r+0x4a>
 8010af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010af2:	f000 fba3 	bl	801123c <__retarget_lock_release_recursive>
 8010af6:	4628      	mov	r0, r5
 8010af8:	bd70      	pop	{r4, r5, r6, pc}
 8010afa:	4b06      	ldr	r3, [pc, #24]	; (8010b14 <_fputc_r+0x68>)
 8010afc:	429c      	cmp	r4, r3
 8010afe:	d101      	bne.n	8010b04 <_fputc_r+0x58>
 8010b00:	68ac      	ldr	r4, [r5, #8]
 8010b02:	e7e0      	b.n	8010ac6 <_fputc_r+0x1a>
 8010b04:	4b04      	ldr	r3, [pc, #16]	; (8010b18 <_fputc_r+0x6c>)
 8010b06:	429c      	cmp	r4, r3
 8010b08:	bf08      	it	eq
 8010b0a:	68ec      	ldreq	r4, [r5, #12]
 8010b0c:	e7db      	b.n	8010ac6 <_fputc_r+0x1a>
 8010b0e:	bf00      	nop
 8010b10:	080176a0 	.word	0x080176a0
 8010b14:	080176c0 	.word	0x080176c0
 8010b18:	08017680 	.word	0x08017680

08010b1c <fputc>:
 8010b1c:	4b02      	ldr	r3, [pc, #8]	; (8010b28 <fputc+0xc>)
 8010b1e:	460a      	mov	r2, r1
 8010b20:	4601      	mov	r1, r0
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	f7ff bfc2 	b.w	8010aac <_fputc_r>
 8010b28:	20000050 	.word	0x20000050

08010b2c <_fputs_r>:
 8010b2c:	b530      	push	{r4, r5, lr}
 8010b2e:	b087      	sub	sp, #28
 8010b30:	4605      	mov	r5, r0
 8010b32:	4608      	mov	r0, r1
 8010b34:	4614      	mov	r4, r2
 8010b36:	9101      	str	r1, [sp, #4]
 8010b38:	f7f5 fefc 	bl	8006934 <strlen>
 8010b3c:	ab01      	add	r3, sp, #4
 8010b3e:	9303      	str	r3, [sp, #12]
 8010b40:	2301      	movs	r3, #1
 8010b42:	9005      	str	r0, [sp, #20]
 8010b44:	9002      	str	r0, [sp, #8]
 8010b46:	9304      	str	r3, [sp, #16]
 8010b48:	b125      	cbz	r5, 8010b54 <_fputs_r+0x28>
 8010b4a:	69ab      	ldr	r3, [r5, #24]
 8010b4c:	b913      	cbnz	r3, 8010b54 <_fputs_r+0x28>
 8010b4e:	4628      	mov	r0, r5
 8010b50:	f7ff ff2c 	bl	80109ac <__sinit>
 8010b54:	4b19      	ldr	r3, [pc, #100]	; (8010bbc <_fputs_r+0x90>)
 8010b56:	429c      	cmp	r4, r3
 8010b58:	d126      	bne.n	8010ba8 <_fputs_r+0x7c>
 8010b5a:	686c      	ldr	r4, [r5, #4]
 8010b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b5e:	07db      	lsls	r3, r3, #31
 8010b60:	d405      	bmi.n	8010b6e <_fputs_r+0x42>
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	0598      	lsls	r0, r3, #22
 8010b66:	d402      	bmi.n	8010b6e <_fputs_r+0x42>
 8010b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b6a:	f000 fb65 	bl	8011238 <__retarget_lock_acquire_recursive>
 8010b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b72:	0499      	lsls	r1, r3, #18
 8010b74:	d406      	bmi.n	8010b84 <_fputs_r+0x58>
 8010b76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010b7a:	81a3      	strh	r3, [r4, #12]
 8010b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b82:	6663      	str	r3, [r4, #100]	; 0x64
 8010b84:	aa03      	add	r2, sp, #12
 8010b86:	4628      	mov	r0, r5
 8010b88:	4621      	mov	r1, r4
 8010b8a:	f000 f949 	bl	8010e20 <__sfvwrite_r>
 8010b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b90:	07da      	lsls	r2, r3, #31
 8010b92:	4605      	mov	r5, r0
 8010b94:	d405      	bmi.n	8010ba2 <_fputs_r+0x76>
 8010b96:	89a3      	ldrh	r3, [r4, #12]
 8010b98:	059b      	lsls	r3, r3, #22
 8010b9a:	d402      	bmi.n	8010ba2 <_fputs_r+0x76>
 8010b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b9e:	f000 fb4d 	bl	801123c <__retarget_lock_release_recursive>
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	b007      	add	sp, #28
 8010ba6:	bd30      	pop	{r4, r5, pc}
 8010ba8:	4b05      	ldr	r3, [pc, #20]	; (8010bc0 <_fputs_r+0x94>)
 8010baa:	429c      	cmp	r4, r3
 8010bac:	d101      	bne.n	8010bb2 <_fputs_r+0x86>
 8010bae:	68ac      	ldr	r4, [r5, #8]
 8010bb0:	e7d4      	b.n	8010b5c <_fputs_r+0x30>
 8010bb2:	4b04      	ldr	r3, [pc, #16]	; (8010bc4 <_fputs_r+0x98>)
 8010bb4:	429c      	cmp	r4, r3
 8010bb6:	bf08      	it	eq
 8010bb8:	68ec      	ldreq	r4, [r5, #12]
 8010bba:	e7cf      	b.n	8010b5c <_fputs_r+0x30>
 8010bbc:	080176a0 	.word	0x080176a0
 8010bc0:	080176c0 	.word	0x080176c0
 8010bc4:	08017680 	.word	0x08017680

08010bc8 <fputs>:
 8010bc8:	4b02      	ldr	r3, [pc, #8]	; (8010bd4 <fputs+0xc>)
 8010bca:	460a      	mov	r2, r1
 8010bcc:	4601      	mov	r1, r0
 8010bce:	6818      	ldr	r0, [r3, #0]
 8010bd0:	f7ff bfac 	b.w	8010b2c <_fputs_r>
 8010bd4:	20000050 	.word	0x20000050

08010bd8 <_malloc_trim_r>:
 8010bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bdc:	4f25      	ldr	r7, [pc, #148]	; (8010c74 <_malloc_trim_r+0x9c>)
 8010bde:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8010c80 <_malloc_trim_r+0xa8>
 8010be2:	4689      	mov	r9, r1
 8010be4:	4606      	mov	r6, r0
 8010be6:	f000 fe01 	bl	80117ec <__malloc_lock>
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	685d      	ldr	r5, [r3, #4]
 8010bee:	f1a8 0411 	sub.w	r4, r8, #17
 8010bf2:	f025 0503 	bic.w	r5, r5, #3
 8010bf6:	eba4 0409 	sub.w	r4, r4, r9
 8010bfa:	442c      	add	r4, r5
 8010bfc:	fbb4 f4f8 	udiv	r4, r4, r8
 8010c00:	3c01      	subs	r4, #1
 8010c02:	fb08 f404 	mul.w	r4, r8, r4
 8010c06:	4544      	cmp	r4, r8
 8010c08:	da05      	bge.n	8010c16 <_malloc_trim_r+0x3e>
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f000 fdf4 	bl	80117f8 <__malloc_unlock>
 8010c10:	2000      	movs	r0, #0
 8010c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c16:	2100      	movs	r1, #0
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f001 f857 	bl	8011ccc <_sbrk_r>
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	442b      	add	r3, r5
 8010c22:	4298      	cmp	r0, r3
 8010c24:	d1f1      	bne.n	8010c0a <_malloc_trim_r+0x32>
 8010c26:	4261      	negs	r1, r4
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f001 f84f 	bl	8011ccc <_sbrk_r>
 8010c2e:	3001      	adds	r0, #1
 8010c30:	d110      	bne.n	8010c54 <_malloc_trim_r+0x7c>
 8010c32:	2100      	movs	r1, #0
 8010c34:	4630      	mov	r0, r6
 8010c36:	f001 f849 	bl	8011ccc <_sbrk_r>
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	1a83      	subs	r3, r0, r2
 8010c3e:	2b0f      	cmp	r3, #15
 8010c40:	dde3      	ble.n	8010c0a <_malloc_trim_r+0x32>
 8010c42:	490d      	ldr	r1, [pc, #52]	; (8010c78 <_malloc_trim_r+0xa0>)
 8010c44:	6809      	ldr	r1, [r1, #0]
 8010c46:	1a40      	subs	r0, r0, r1
 8010c48:	490c      	ldr	r1, [pc, #48]	; (8010c7c <_malloc_trim_r+0xa4>)
 8010c4a:	f043 0301 	orr.w	r3, r3, #1
 8010c4e:	6008      	str	r0, [r1, #0]
 8010c50:	6053      	str	r3, [r2, #4]
 8010c52:	e7da      	b.n	8010c0a <_malloc_trim_r+0x32>
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	4a09      	ldr	r2, [pc, #36]	; (8010c7c <_malloc_trim_r+0xa4>)
 8010c58:	1b2d      	subs	r5, r5, r4
 8010c5a:	f045 0501 	orr.w	r5, r5, #1
 8010c5e:	605d      	str	r5, [r3, #4]
 8010c60:	6813      	ldr	r3, [r2, #0]
 8010c62:	4630      	mov	r0, r6
 8010c64:	1b1c      	subs	r4, r3, r4
 8010c66:	6014      	str	r4, [r2, #0]
 8010c68:	f000 fdc6 	bl	80117f8 <__malloc_unlock>
 8010c6c:	2001      	movs	r0, #1
 8010c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c72:	bf00      	nop
 8010c74:	200002b0 	.word	0x200002b0
 8010c78:	200006b8 	.word	0x200006b8
 8010c7c:	20001d34 	.word	0x20001d34
 8010c80:	00001000 	.word	0x00001000

08010c84 <_free_r>:
 8010c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	4688      	mov	r8, r1
 8010c8c:	2900      	cmp	r1, #0
 8010c8e:	f000 80ab 	beq.w	8010de8 <_free_r+0x164>
 8010c92:	f000 fdab 	bl	80117ec <__malloc_lock>
 8010c96:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8010c9a:	4d54      	ldr	r5, [pc, #336]	; (8010dec <_free_r+0x168>)
 8010c9c:	f022 0001 	bic.w	r0, r2, #1
 8010ca0:	f1a8 0308 	sub.w	r3, r8, #8
 8010ca4:	181f      	adds	r7, r3, r0
 8010ca6:	68a9      	ldr	r1, [r5, #8]
 8010ca8:	687e      	ldr	r6, [r7, #4]
 8010caa:	428f      	cmp	r7, r1
 8010cac:	f026 0603 	bic.w	r6, r6, #3
 8010cb0:	f002 0201 	and.w	r2, r2, #1
 8010cb4:	d11b      	bne.n	8010cee <_free_r+0x6a>
 8010cb6:	4430      	add	r0, r6
 8010cb8:	b93a      	cbnz	r2, 8010cca <_free_r+0x46>
 8010cba:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8010cbe:	1a9b      	subs	r3, r3, r2
 8010cc0:	4410      	add	r0, r2
 8010cc2:	6899      	ldr	r1, [r3, #8]
 8010cc4:	68da      	ldr	r2, [r3, #12]
 8010cc6:	60ca      	str	r2, [r1, #12]
 8010cc8:	6091      	str	r1, [r2, #8]
 8010cca:	f040 0201 	orr.w	r2, r0, #1
 8010cce:	605a      	str	r2, [r3, #4]
 8010cd0:	60ab      	str	r3, [r5, #8]
 8010cd2:	4b47      	ldr	r3, [pc, #284]	; (8010df0 <_free_r+0x16c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4298      	cmp	r0, r3
 8010cd8:	d304      	bcc.n	8010ce4 <_free_r+0x60>
 8010cda:	4b46      	ldr	r3, [pc, #280]	; (8010df4 <_free_r+0x170>)
 8010cdc:	4620      	mov	r0, r4
 8010cde:	6819      	ldr	r1, [r3, #0]
 8010ce0:	f7ff ff7a 	bl	8010bd8 <_malloc_trim_r>
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cea:	f000 bd85 	b.w	80117f8 <__malloc_unlock>
 8010cee:	607e      	str	r6, [r7, #4]
 8010cf0:	2a00      	cmp	r2, #0
 8010cf2:	d139      	bne.n	8010d68 <_free_r+0xe4>
 8010cf4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8010cf8:	1a5b      	subs	r3, r3, r1
 8010cfa:	4408      	add	r0, r1
 8010cfc:	6899      	ldr	r1, [r3, #8]
 8010cfe:	f105 0e08 	add.w	lr, r5, #8
 8010d02:	4571      	cmp	r1, lr
 8010d04:	d032      	beq.n	8010d6c <_free_r+0xe8>
 8010d06:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010d0a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8010d0e:	f8ce 1008 	str.w	r1, [lr, #8]
 8010d12:	19b9      	adds	r1, r7, r6
 8010d14:	6849      	ldr	r1, [r1, #4]
 8010d16:	07c9      	lsls	r1, r1, #31
 8010d18:	d40a      	bmi.n	8010d30 <_free_r+0xac>
 8010d1a:	4430      	add	r0, r6
 8010d1c:	68b9      	ldr	r1, [r7, #8]
 8010d1e:	bb3a      	cbnz	r2, 8010d70 <_free_r+0xec>
 8010d20:	4e35      	ldr	r6, [pc, #212]	; (8010df8 <_free_r+0x174>)
 8010d22:	42b1      	cmp	r1, r6
 8010d24:	d124      	bne.n	8010d70 <_free_r+0xec>
 8010d26:	616b      	str	r3, [r5, #20]
 8010d28:	612b      	str	r3, [r5, #16]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	60d9      	str	r1, [r3, #12]
 8010d2e:	6099      	str	r1, [r3, #8]
 8010d30:	f040 0101 	orr.w	r1, r0, #1
 8010d34:	6059      	str	r1, [r3, #4]
 8010d36:	5018      	str	r0, [r3, r0]
 8010d38:	2a00      	cmp	r2, #0
 8010d3a:	d1d3      	bne.n	8010ce4 <_free_r+0x60>
 8010d3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8010d40:	d21a      	bcs.n	8010d78 <_free_r+0xf4>
 8010d42:	08c0      	lsrs	r0, r0, #3
 8010d44:	1081      	asrs	r1, r0, #2
 8010d46:	2201      	movs	r2, #1
 8010d48:	408a      	lsls	r2, r1
 8010d4a:	6869      	ldr	r1, [r5, #4]
 8010d4c:	3001      	adds	r0, #1
 8010d4e:	430a      	orrs	r2, r1
 8010d50:	606a      	str	r2, [r5, #4]
 8010d52:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8010d56:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8010d5a:	6099      	str	r1, [r3, #8]
 8010d5c:	3a08      	subs	r2, #8
 8010d5e:	60da      	str	r2, [r3, #12]
 8010d60:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8010d64:	60cb      	str	r3, [r1, #12]
 8010d66:	e7bd      	b.n	8010ce4 <_free_r+0x60>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	e7d2      	b.n	8010d12 <_free_r+0x8e>
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	e7d0      	b.n	8010d12 <_free_r+0x8e>
 8010d70:	68fe      	ldr	r6, [r7, #12]
 8010d72:	60ce      	str	r6, [r1, #12]
 8010d74:	60b1      	str	r1, [r6, #8]
 8010d76:	e7db      	b.n	8010d30 <_free_r+0xac>
 8010d78:	0a42      	lsrs	r2, r0, #9
 8010d7a:	2a04      	cmp	r2, #4
 8010d7c:	d813      	bhi.n	8010da6 <_free_r+0x122>
 8010d7e:	0982      	lsrs	r2, r0, #6
 8010d80:	3238      	adds	r2, #56	; 0x38
 8010d82:	1c51      	adds	r1, r2, #1
 8010d84:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010d88:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8010d8c:	428e      	cmp	r6, r1
 8010d8e:	d124      	bne.n	8010dda <_free_r+0x156>
 8010d90:	2001      	movs	r0, #1
 8010d92:	1092      	asrs	r2, r2, #2
 8010d94:	fa00 f202 	lsl.w	r2, r0, r2
 8010d98:	6868      	ldr	r0, [r5, #4]
 8010d9a:	4302      	orrs	r2, r0
 8010d9c:	606a      	str	r2, [r5, #4]
 8010d9e:	60de      	str	r6, [r3, #12]
 8010da0:	6099      	str	r1, [r3, #8]
 8010da2:	60b3      	str	r3, [r6, #8]
 8010da4:	e7de      	b.n	8010d64 <_free_r+0xe0>
 8010da6:	2a14      	cmp	r2, #20
 8010da8:	d801      	bhi.n	8010dae <_free_r+0x12a>
 8010daa:	325b      	adds	r2, #91	; 0x5b
 8010dac:	e7e9      	b.n	8010d82 <_free_r+0xfe>
 8010dae:	2a54      	cmp	r2, #84	; 0x54
 8010db0:	d802      	bhi.n	8010db8 <_free_r+0x134>
 8010db2:	0b02      	lsrs	r2, r0, #12
 8010db4:	326e      	adds	r2, #110	; 0x6e
 8010db6:	e7e4      	b.n	8010d82 <_free_r+0xfe>
 8010db8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8010dbc:	d802      	bhi.n	8010dc4 <_free_r+0x140>
 8010dbe:	0bc2      	lsrs	r2, r0, #15
 8010dc0:	3277      	adds	r2, #119	; 0x77
 8010dc2:	e7de      	b.n	8010d82 <_free_r+0xfe>
 8010dc4:	f240 5154 	movw	r1, #1364	; 0x554
 8010dc8:	428a      	cmp	r2, r1
 8010dca:	bf9a      	itte	ls
 8010dcc:	0c82      	lsrls	r2, r0, #18
 8010dce:	327c      	addls	r2, #124	; 0x7c
 8010dd0:	227e      	movhi	r2, #126	; 0x7e
 8010dd2:	e7d6      	b.n	8010d82 <_free_r+0xfe>
 8010dd4:	6889      	ldr	r1, [r1, #8]
 8010dd6:	428e      	cmp	r6, r1
 8010dd8:	d004      	beq.n	8010de4 <_free_r+0x160>
 8010dda:	684a      	ldr	r2, [r1, #4]
 8010ddc:	f022 0203 	bic.w	r2, r2, #3
 8010de0:	4290      	cmp	r0, r2
 8010de2:	d3f7      	bcc.n	8010dd4 <_free_r+0x150>
 8010de4:	68ce      	ldr	r6, [r1, #12]
 8010de6:	e7da      	b.n	8010d9e <_free_r+0x11a>
 8010de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dec:	200002b0 	.word	0x200002b0
 8010df0:	200006bc 	.word	0x200006bc
 8010df4:	20001d64 	.word	0x20001d64
 8010df8:	200002b8 	.word	0x200002b8

08010dfc <_fstat_r>:
 8010dfc:	b538      	push	{r3, r4, r5, lr}
 8010dfe:	4c07      	ldr	r4, [pc, #28]	; (8010e1c <_fstat_r+0x20>)
 8010e00:	2300      	movs	r3, #0
 8010e02:	4605      	mov	r5, r0
 8010e04:	4608      	mov	r0, r1
 8010e06:	4611      	mov	r1, r2
 8010e08:	6023      	str	r3, [r4, #0]
 8010e0a:	f7fd fe50 	bl	800eaae <_fstat>
 8010e0e:	1c43      	adds	r3, r0, #1
 8010e10:	d102      	bne.n	8010e18 <_fstat_r+0x1c>
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	b103      	cbz	r3, 8010e18 <_fstat_r+0x1c>
 8010e16:	602b      	str	r3, [r5, #0]
 8010e18:	bd38      	pop	{r3, r4, r5, pc}
 8010e1a:	bf00      	nop
 8010e1c:	20001fc8 	.word	0x20001fc8

08010e20 <__sfvwrite_r>:
 8010e20:	6893      	ldr	r3, [r2, #8]
 8010e22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e26:	4607      	mov	r7, r0
 8010e28:	460c      	mov	r4, r1
 8010e2a:	4690      	mov	r8, r2
 8010e2c:	b91b      	cbnz	r3, 8010e36 <__sfvwrite_r+0x16>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	b003      	add	sp, #12
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e36:	898b      	ldrh	r3, [r1, #12]
 8010e38:	0718      	lsls	r0, r3, #28
 8010e3a:	d526      	bpl.n	8010e8a <__sfvwrite_r+0x6a>
 8010e3c:	690b      	ldr	r3, [r1, #16]
 8010e3e:	b323      	cbz	r3, 8010e8a <__sfvwrite_r+0x6a>
 8010e40:	89a3      	ldrh	r3, [r4, #12]
 8010e42:	f8d8 6000 	ldr.w	r6, [r8]
 8010e46:	f013 0902 	ands.w	r9, r3, #2
 8010e4a:	d02d      	beq.n	8010ea8 <__sfvwrite_r+0x88>
 8010e4c:	f04f 0a00 	mov.w	sl, #0
 8010e50:	f8df b264 	ldr.w	fp, [pc, #612]	; 80110b8 <__sfvwrite_r+0x298>
 8010e54:	46d1      	mov	r9, sl
 8010e56:	f1b9 0f00 	cmp.w	r9, #0
 8010e5a:	d01f      	beq.n	8010e9c <__sfvwrite_r+0x7c>
 8010e5c:	45d9      	cmp	r9, fp
 8010e5e:	464b      	mov	r3, r9
 8010e60:	4652      	mov	r2, sl
 8010e62:	bf28      	it	cs
 8010e64:	465b      	movcs	r3, fp
 8010e66:	6a21      	ldr	r1, [r4, #32]
 8010e68:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010e6a:	4638      	mov	r0, r7
 8010e6c:	47a8      	blx	r5
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	f340 8089 	ble.w	8010f86 <__sfvwrite_r+0x166>
 8010e74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e78:	4482      	add	sl, r0
 8010e7a:	eba9 0900 	sub.w	r9, r9, r0
 8010e7e:	1a18      	subs	r0, r3, r0
 8010e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d1e6      	bne.n	8010e56 <__sfvwrite_r+0x36>
 8010e88:	e7d1      	b.n	8010e2e <__sfvwrite_r+0xe>
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	f003 fad5 	bl	801443c <__swsetup_r>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d0d4      	beq.n	8010e40 <__sfvwrite_r+0x20>
 8010e96:	f04f 30ff 	mov.w	r0, #4294967295
 8010e9a:	e7c9      	b.n	8010e30 <__sfvwrite_r+0x10>
 8010e9c:	f8d6 a000 	ldr.w	sl, [r6]
 8010ea0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8010ea4:	3608      	adds	r6, #8
 8010ea6:	e7d6      	b.n	8010e56 <__sfvwrite_r+0x36>
 8010ea8:	f013 0301 	ands.w	r3, r3, #1
 8010eac:	d043      	beq.n	8010f36 <__sfvwrite_r+0x116>
 8010eae:	4648      	mov	r0, r9
 8010eb0:	46ca      	mov	sl, r9
 8010eb2:	46cb      	mov	fp, r9
 8010eb4:	f1bb 0f00 	cmp.w	fp, #0
 8010eb8:	f000 80d9 	beq.w	801106e <__sfvwrite_r+0x24e>
 8010ebc:	b950      	cbnz	r0, 8010ed4 <__sfvwrite_r+0xb4>
 8010ebe:	465a      	mov	r2, fp
 8010ec0:	210a      	movs	r1, #10
 8010ec2:	4650      	mov	r0, sl
 8010ec4:	f7f5 fcdc 	bl	8006880 <memchr>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	f000 80d5 	beq.w	8011078 <__sfvwrite_r+0x258>
 8010ece:	3001      	adds	r0, #1
 8010ed0:	eba0 090a 	sub.w	r9, r0, sl
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	6921      	ldr	r1, [r4, #16]
 8010ed8:	6962      	ldr	r2, [r4, #20]
 8010eda:	45d9      	cmp	r9, fp
 8010edc:	464b      	mov	r3, r9
 8010ede:	bf28      	it	cs
 8010ee0:	465b      	movcs	r3, fp
 8010ee2:	4288      	cmp	r0, r1
 8010ee4:	f240 80cb 	bls.w	801107e <__sfvwrite_r+0x25e>
 8010ee8:	68a5      	ldr	r5, [r4, #8]
 8010eea:	4415      	add	r5, r2
 8010eec:	42ab      	cmp	r3, r5
 8010eee:	f340 80c6 	ble.w	801107e <__sfvwrite_r+0x25e>
 8010ef2:	4651      	mov	r1, sl
 8010ef4:	462a      	mov	r2, r5
 8010ef6:	f000 fc57 	bl	80117a8 <memmove>
 8010efa:	6823      	ldr	r3, [r4, #0]
 8010efc:	442b      	add	r3, r5
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	4621      	mov	r1, r4
 8010f02:	4638      	mov	r0, r7
 8010f04:	f7ff fcac 	bl	8010860 <_fflush_r>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d13c      	bne.n	8010f86 <__sfvwrite_r+0x166>
 8010f0c:	ebb9 0905 	subs.w	r9, r9, r5
 8010f10:	f040 80cf 	bne.w	80110b2 <__sfvwrite_r+0x292>
 8010f14:	4621      	mov	r1, r4
 8010f16:	4638      	mov	r0, r7
 8010f18:	f7ff fca2 	bl	8010860 <_fflush_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d132      	bne.n	8010f86 <__sfvwrite_r+0x166>
 8010f20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f24:	44aa      	add	sl, r5
 8010f26:	ebab 0b05 	sub.w	fp, fp, r5
 8010f2a:	1b5d      	subs	r5, r3, r5
 8010f2c:	f8c8 5008 	str.w	r5, [r8, #8]
 8010f30:	2d00      	cmp	r5, #0
 8010f32:	d1bf      	bne.n	8010eb4 <__sfvwrite_r+0x94>
 8010f34:	e77b      	b.n	8010e2e <__sfvwrite_r+0xe>
 8010f36:	4699      	mov	r9, r3
 8010f38:	469a      	mov	sl, r3
 8010f3a:	f1ba 0f00 	cmp.w	sl, #0
 8010f3e:	d027      	beq.n	8010f90 <__sfvwrite_r+0x170>
 8010f40:	89a2      	ldrh	r2, [r4, #12]
 8010f42:	68a5      	ldr	r5, [r4, #8]
 8010f44:	0591      	lsls	r1, r2, #22
 8010f46:	d565      	bpl.n	8011014 <__sfvwrite_r+0x1f4>
 8010f48:	45aa      	cmp	sl, r5
 8010f4a:	d33b      	bcc.n	8010fc4 <__sfvwrite_r+0x1a4>
 8010f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f50:	d036      	beq.n	8010fc0 <__sfvwrite_r+0x1a0>
 8010f52:	6921      	ldr	r1, [r4, #16]
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	1a5b      	subs	r3, r3, r1
 8010f58:	9301      	str	r3, [sp, #4]
 8010f5a:	6963      	ldr	r3, [r4, #20]
 8010f5c:	2002      	movs	r0, #2
 8010f5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f62:	fb93 fbf0 	sdiv	fp, r3, r0
 8010f66:	9b01      	ldr	r3, [sp, #4]
 8010f68:	1c58      	adds	r0, r3, #1
 8010f6a:	4450      	add	r0, sl
 8010f6c:	4583      	cmp	fp, r0
 8010f6e:	bf38      	it	cc
 8010f70:	4683      	movcc	fp, r0
 8010f72:	0553      	lsls	r3, r2, #21
 8010f74:	d53e      	bpl.n	8010ff4 <__sfvwrite_r+0x1d4>
 8010f76:	4659      	mov	r1, fp
 8010f78:	4638      	mov	r0, r7
 8010f7a:	f000 f9db 	bl	8011334 <_malloc_r>
 8010f7e:	4605      	mov	r5, r0
 8010f80:	b950      	cbnz	r0, 8010f98 <__sfvwrite_r+0x178>
 8010f82:	230c      	movs	r3, #12
 8010f84:	603b      	str	r3, [r7, #0]
 8010f86:	89a3      	ldrh	r3, [r4, #12]
 8010f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f8c:	81a3      	strh	r3, [r4, #12]
 8010f8e:	e782      	b.n	8010e96 <__sfvwrite_r+0x76>
 8010f90:	e896 0600 	ldmia.w	r6, {r9, sl}
 8010f94:	3608      	adds	r6, #8
 8010f96:	e7d0      	b.n	8010f3a <__sfvwrite_r+0x11a>
 8010f98:	9a01      	ldr	r2, [sp, #4]
 8010f9a:	6921      	ldr	r1, [r4, #16]
 8010f9c:	f000 fbf9 	bl	8011792 <memcpy>
 8010fa0:	89a2      	ldrh	r2, [r4, #12]
 8010fa2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8010fa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010faa:	81a2      	strh	r2, [r4, #12]
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	6125      	str	r5, [r4, #16]
 8010fb0:	441d      	add	r5, r3
 8010fb2:	ebab 0303 	sub.w	r3, fp, r3
 8010fb6:	6025      	str	r5, [r4, #0]
 8010fb8:	f8c4 b014 	str.w	fp, [r4, #20]
 8010fbc:	4655      	mov	r5, sl
 8010fbe:	60a3      	str	r3, [r4, #8]
 8010fc0:	45aa      	cmp	sl, r5
 8010fc2:	d200      	bcs.n	8010fc6 <__sfvwrite_r+0x1a6>
 8010fc4:	4655      	mov	r5, sl
 8010fc6:	462a      	mov	r2, r5
 8010fc8:	4649      	mov	r1, r9
 8010fca:	6820      	ldr	r0, [r4, #0]
 8010fcc:	f000 fbec 	bl	80117a8 <memmove>
 8010fd0:	68a3      	ldr	r3, [r4, #8]
 8010fd2:	1b5b      	subs	r3, r3, r5
 8010fd4:	60a3      	str	r3, [r4, #8]
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	441d      	add	r5, r3
 8010fda:	6025      	str	r5, [r4, #0]
 8010fdc:	4655      	mov	r5, sl
 8010fde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fe2:	44a9      	add	r9, r5
 8010fe4:	ebaa 0a05 	sub.w	sl, sl, r5
 8010fe8:	1b5d      	subs	r5, r3, r5
 8010fea:	f8c8 5008 	str.w	r5, [r8, #8]
 8010fee:	2d00      	cmp	r5, #0
 8010ff0:	d1a3      	bne.n	8010f3a <__sfvwrite_r+0x11a>
 8010ff2:	e71c      	b.n	8010e2e <__sfvwrite_r+0xe>
 8010ff4:	465a      	mov	r2, fp
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	f000 fce8 	bl	80119cc <_realloc_r>
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d1d4      	bne.n	8010fac <__sfvwrite_r+0x18c>
 8011002:	6921      	ldr	r1, [r4, #16]
 8011004:	4638      	mov	r0, r7
 8011006:	f7ff fe3d 	bl	8010c84 <_free_r>
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011010:	81a3      	strh	r3, [r4, #12]
 8011012:	e7b6      	b.n	8010f82 <__sfvwrite_r+0x162>
 8011014:	6820      	ldr	r0, [r4, #0]
 8011016:	6923      	ldr	r3, [r4, #16]
 8011018:	4298      	cmp	r0, r3
 801101a:	d802      	bhi.n	8011022 <__sfvwrite_r+0x202>
 801101c:	6962      	ldr	r2, [r4, #20]
 801101e:	4592      	cmp	sl, r2
 8011020:	d215      	bcs.n	801104e <__sfvwrite_r+0x22e>
 8011022:	4555      	cmp	r5, sl
 8011024:	bf28      	it	cs
 8011026:	4655      	movcs	r5, sl
 8011028:	462a      	mov	r2, r5
 801102a:	4649      	mov	r1, r9
 801102c:	f000 fbbc 	bl	80117a8 <memmove>
 8011030:	68a3      	ldr	r3, [r4, #8]
 8011032:	6822      	ldr	r2, [r4, #0]
 8011034:	1b5b      	subs	r3, r3, r5
 8011036:	442a      	add	r2, r5
 8011038:	60a3      	str	r3, [r4, #8]
 801103a:	6022      	str	r2, [r4, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1ce      	bne.n	8010fde <__sfvwrite_r+0x1be>
 8011040:	4621      	mov	r1, r4
 8011042:	4638      	mov	r0, r7
 8011044:	f7ff fc0c 	bl	8010860 <_fflush_r>
 8011048:	2800      	cmp	r0, #0
 801104a:	d0c8      	beq.n	8010fde <__sfvwrite_r+0x1be>
 801104c:	e79b      	b.n	8010f86 <__sfvwrite_r+0x166>
 801104e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011052:	4553      	cmp	r3, sl
 8011054:	bf28      	it	cs
 8011056:	4653      	movcs	r3, sl
 8011058:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801105a:	fb93 f3f2 	sdiv	r3, r3, r2
 801105e:	6a21      	ldr	r1, [r4, #32]
 8011060:	4353      	muls	r3, r2
 8011062:	4638      	mov	r0, r7
 8011064:	464a      	mov	r2, r9
 8011066:	47a8      	blx	r5
 8011068:	1e05      	subs	r5, r0, #0
 801106a:	dcb8      	bgt.n	8010fde <__sfvwrite_r+0x1be>
 801106c:	e78b      	b.n	8010f86 <__sfvwrite_r+0x166>
 801106e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8011072:	2000      	movs	r0, #0
 8011074:	3608      	adds	r6, #8
 8011076:	e71d      	b.n	8010eb4 <__sfvwrite_r+0x94>
 8011078:	f10b 0901 	add.w	r9, fp, #1
 801107c:	e72a      	b.n	8010ed4 <__sfvwrite_r+0xb4>
 801107e:	4293      	cmp	r3, r2
 8011080:	db09      	blt.n	8011096 <__sfvwrite_r+0x276>
 8011082:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011084:	6a21      	ldr	r1, [r4, #32]
 8011086:	4613      	mov	r3, r2
 8011088:	4638      	mov	r0, r7
 801108a:	4652      	mov	r2, sl
 801108c:	47a8      	blx	r5
 801108e:	1e05      	subs	r5, r0, #0
 8011090:	f73f af3c 	bgt.w	8010f0c <__sfvwrite_r+0xec>
 8011094:	e777      	b.n	8010f86 <__sfvwrite_r+0x166>
 8011096:	461a      	mov	r2, r3
 8011098:	4651      	mov	r1, sl
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	f000 fb84 	bl	80117a8 <memmove>
 80110a0:	9b01      	ldr	r3, [sp, #4]
 80110a2:	68a2      	ldr	r2, [r4, #8]
 80110a4:	1ad2      	subs	r2, r2, r3
 80110a6:	60a2      	str	r2, [r4, #8]
 80110a8:	6822      	ldr	r2, [r4, #0]
 80110aa:	441a      	add	r2, r3
 80110ac:	6022      	str	r2, [r4, #0]
 80110ae:	461d      	mov	r5, r3
 80110b0:	e72c      	b.n	8010f0c <__sfvwrite_r+0xec>
 80110b2:	2001      	movs	r0, #1
 80110b4:	e734      	b.n	8010f20 <__sfvwrite_r+0x100>
 80110b6:	bf00      	nop
 80110b8:	7ffffc00 	.word	0x7ffffc00

080110bc <_fwalk_reent>:
 80110bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	4680      	mov	r8, r0
 80110c2:	4689      	mov	r9, r1
 80110c4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80110c8:	2600      	movs	r6, #0
 80110ca:	b914      	cbnz	r4, 80110d2 <_fwalk_reent+0x16>
 80110cc:	4630      	mov	r0, r6
 80110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110d2:	68a5      	ldr	r5, [r4, #8]
 80110d4:	6867      	ldr	r7, [r4, #4]
 80110d6:	3f01      	subs	r7, #1
 80110d8:	d501      	bpl.n	80110de <_fwalk_reent+0x22>
 80110da:	6824      	ldr	r4, [r4, #0]
 80110dc:	e7f5      	b.n	80110ca <_fwalk_reent+0xe>
 80110de:	89ab      	ldrh	r3, [r5, #12]
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d907      	bls.n	80110f4 <_fwalk_reent+0x38>
 80110e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110e8:	3301      	adds	r3, #1
 80110ea:	d003      	beq.n	80110f4 <_fwalk_reent+0x38>
 80110ec:	4629      	mov	r1, r5
 80110ee:	4640      	mov	r0, r8
 80110f0:	47c8      	blx	r9
 80110f2:	4306      	orrs	r6, r0
 80110f4:	3568      	adds	r5, #104	; 0x68
 80110f6:	e7ee      	b.n	80110d6 <_fwalk_reent+0x1a>

080110f8 <_fwrite_r>:
 80110f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110fc:	b086      	sub	sp, #24
 80110fe:	fb02 f503 	mul.w	r5, r2, r3
 8011102:	461f      	mov	r7, r3
 8011104:	ab01      	add	r3, sp, #4
 8011106:	9303      	str	r3, [sp, #12]
 8011108:	2301      	movs	r3, #1
 801110a:	4690      	mov	r8, r2
 801110c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801110e:	9101      	str	r1, [sp, #4]
 8011110:	9502      	str	r5, [sp, #8]
 8011112:	9505      	str	r5, [sp, #20]
 8011114:	9304      	str	r3, [sp, #16]
 8011116:	4606      	mov	r6, r0
 8011118:	b118      	cbz	r0, 8011122 <_fwrite_r+0x2a>
 801111a:	6983      	ldr	r3, [r0, #24]
 801111c:	b90b      	cbnz	r3, 8011122 <_fwrite_r+0x2a>
 801111e:	f7ff fc45 	bl	80109ac <__sinit>
 8011122:	4b21      	ldr	r3, [pc, #132]	; (80111a8 <_fwrite_r+0xb0>)
 8011124:	429c      	cmp	r4, r3
 8011126:	d127      	bne.n	8011178 <_fwrite_r+0x80>
 8011128:	6874      	ldr	r4, [r6, #4]
 801112a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801112c:	07d8      	lsls	r0, r3, #31
 801112e:	d405      	bmi.n	801113c <_fwrite_r+0x44>
 8011130:	89a3      	ldrh	r3, [r4, #12]
 8011132:	0599      	lsls	r1, r3, #22
 8011134:	d402      	bmi.n	801113c <_fwrite_r+0x44>
 8011136:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011138:	f000 f87e 	bl	8011238 <__retarget_lock_acquire_recursive>
 801113c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011140:	049a      	lsls	r2, r3, #18
 8011142:	d406      	bmi.n	8011152 <_fwrite_r+0x5a>
 8011144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011148:	81a3      	strh	r3, [r4, #12]
 801114a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801114c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011150:	6663      	str	r3, [r4, #100]	; 0x64
 8011152:	aa03      	add	r2, sp, #12
 8011154:	4621      	mov	r1, r4
 8011156:	4630      	mov	r0, r6
 8011158:	f7ff fe62 	bl	8010e20 <__sfvwrite_r>
 801115c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801115e:	b9a8      	cbnz	r0, 801118c <_fwrite_r+0x94>
 8011160:	07d8      	lsls	r0, r3, #31
 8011162:	d405      	bmi.n	8011170 <_fwrite_r+0x78>
 8011164:	89a3      	ldrh	r3, [r4, #12]
 8011166:	0599      	lsls	r1, r3, #22
 8011168:	d402      	bmi.n	8011170 <_fwrite_r+0x78>
 801116a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116c:	f000 f866 	bl	801123c <__retarget_lock_release_recursive>
 8011170:	4638      	mov	r0, r7
 8011172:	b006      	add	sp, #24
 8011174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011178:	4b0c      	ldr	r3, [pc, #48]	; (80111ac <_fwrite_r+0xb4>)
 801117a:	429c      	cmp	r4, r3
 801117c:	d101      	bne.n	8011182 <_fwrite_r+0x8a>
 801117e:	68b4      	ldr	r4, [r6, #8]
 8011180:	e7d3      	b.n	801112a <_fwrite_r+0x32>
 8011182:	4b0b      	ldr	r3, [pc, #44]	; (80111b0 <_fwrite_r+0xb8>)
 8011184:	429c      	cmp	r4, r3
 8011186:	bf08      	it	eq
 8011188:	68f4      	ldreq	r4, [r6, #12]
 801118a:	e7ce      	b.n	801112a <_fwrite_r+0x32>
 801118c:	07da      	lsls	r2, r3, #31
 801118e:	d405      	bmi.n	801119c <_fwrite_r+0xa4>
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	059b      	lsls	r3, r3, #22
 8011194:	d402      	bmi.n	801119c <_fwrite_r+0xa4>
 8011196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011198:	f000 f850 	bl	801123c <__retarget_lock_release_recursive>
 801119c:	9b05      	ldr	r3, [sp, #20]
 801119e:	1aed      	subs	r5, r5, r3
 80111a0:	fbb5 f7f8 	udiv	r7, r5, r8
 80111a4:	e7e4      	b.n	8011170 <_fwrite_r+0x78>
 80111a6:	bf00      	nop
 80111a8:	080176a0 	.word	0x080176a0
 80111ac:	080176c0 	.word	0x080176c0
 80111b0:	08017680 	.word	0x08017680

080111b4 <fwrite>:
 80111b4:	b507      	push	{r0, r1, r2, lr}
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	4613      	mov	r3, r2
 80111ba:	460a      	mov	r2, r1
 80111bc:	4601      	mov	r1, r0
 80111be:	4803      	ldr	r0, [pc, #12]	; (80111cc <fwrite+0x18>)
 80111c0:	6800      	ldr	r0, [r0, #0]
 80111c2:	f7ff ff99 	bl	80110f8 <_fwrite_r>
 80111c6:	b003      	add	sp, #12
 80111c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80111cc:	20000050 	.word	0x20000050

080111d0 <__libc_init_array>:
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	4e0d      	ldr	r6, [pc, #52]	; (8011208 <__libc_init_array+0x38>)
 80111d4:	4c0d      	ldr	r4, [pc, #52]	; (801120c <__libc_init_array+0x3c>)
 80111d6:	1ba4      	subs	r4, r4, r6
 80111d8:	10a4      	asrs	r4, r4, #2
 80111da:	2500      	movs	r5, #0
 80111dc:	42a5      	cmp	r5, r4
 80111de:	d109      	bne.n	80111f4 <__libc_init_array+0x24>
 80111e0:	4e0b      	ldr	r6, [pc, #44]	; (8011210 <__libc_init_array+0x40>)
 80111e2:	4c0c      	ldr	r4, [pc, #48]	; (8011214 <__libc_init_array+0x44>)
 80111e4:	f004 fd3e 	bl	8015c64 <_init>
 80111e8:	1ba4      	subs	r4, r4, r6
 80111ea:	10a4      	asrs	r4, r4, #2
 80111ec:	2500      	movs	r5, #0
 80111ee:	42a5      	cmp	r5, r4
 80111f0:	d105      	bne.n	80111fe <__libc_init_array+0x2e>
 80111f2:	bd70      	pop	{r4, r5, r6, pc}
 80111f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80111f8:	4798      	blx	r3
 80111fa:	3501      	adds	r5, #1
 80111fc:	e7ee      	b.n	80111dc <__libc_init_array+0xc>
 80111fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011202:	4798      	blx	r3
 8011204:	3501      	adds	r5, #1
 8011206:	e7f2      	b.n	80111ee <__libc_init_array+0x1e>
 8011208:	0801868c 	.word	0x0801868c
 801120c:	0801868c 	.word	0x0801868c
 8011210:	0801868c 	.word	0x0801868c
 8011214:	080186b0 	.word	0x080186b0

08011218 <__locale_mb_cur_max>:
 8011218:	4b04      	ldr	r3, [pc, #16]	; (801122c <__locale_mb_cur_max+0x14>)
 801121a:	4a05      	ldr	r2, [pc, #20]	; (8011230 <__locale_mb_cur_max+0x18>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	6a1b      	ldr	r3, [r3, #32]
 8011220:	2b00      	cmp	r3, #0
 8011222:	bf08      	it	eq
 8011224:	4613      	moveq	r3, r2
 8011226:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801122a:	4770      	bx	lr
 801122c:	20000050 	.word	0x20000050
 8011230:	20000144 	.word	0x20000144

08011234 <__retarget_lock_init_recursive>:
 8011234:	4770      	bx	lr

08011236 <__retarget_lock_close_recursive>:
 8011236:	4770      	bx	lr

08011238 <__retarget_lock_acquire_recursive>:
 8011238:	4770      	bx	lr

0801123a <__retarget_lock_release>:
 801123a:	4770      	bx	lr

0801123c <__retarget_lock_release_recursive>:
 801123c:	4770      	bx	lr

0801123e <__swhatbuf_r>:
 801123e:	b570      	push	{r4, r5, r6, lr}
 8011240:	460e      	mov	r6, r1
 8011242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011246:	2900      	cmp	r1, #0
 8011248:	b090      	sub	sp, #64	; 0x40
 801124a:	4614      	mov	r4, r2
 801124c:	461d      	mov	r5, r3
 801124e:	da09      	bge.n	8011264 <__swhatbuf_r+0x26>
 8011250:	89b3      	ldrh	r3, [r6, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011258:	602a      	str	r2, [r5, #0]
 801125a:	d116      	bne.n	801128a <__swhatbuf_r+0x4c>
 801125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011260:	6023      	str	r3, [r4, #0]
 8011262:	e015      	b.n	8011290 <__swhatbuf_r+0x52>
 8011264:	aa01      	add	r2, sp, #4
 8011266:	f7ff fdc9 	bl	8010dfc <_fstat_r>
 801126a:	2800      	cmp	r0, #0
 801126c:	dbf0      	blt.n	8011250 <__swhatbuf_r+0x12>
 801126e:	9a02      	ldr	r2, [sp, #8]
 8011270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011278:	425a      	negs	r2, r3
 801127a:	415a      	adcs	r2, r3
 801127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011280:	602a      	str	r2, [r5, #0]
 8011282:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	e002      	b.n	8011290 <__swhatbuf_r+0x52>
 801128a:	2340      	movs	r3, #64	; 0x40
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	4610      	mov	r0, r2
 8011290:	b010      	add	sp, #64	; 0x40
 8011292:	bd70      	pop	{r4, r5, r6, pc}

08011294 <__smakebuf_r>:
 8011294:	898b      	ldrh	r3, [r1, #12]
 8011296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011298:	079d      	lsls	r5, r3, #30
 801129a:	4606      	mov	r6, r0
 801129c:	460c      	mov	r4, r1
 801129e:	d507      	bpl.n	80112b0 <__smakebuf_r+0x1c>
 80112a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	6123      	str	r3, [r4, #16]
 80112a8:	2301      	movs	r3, #1
 80112aa:	6163      	str	r3, [r4, #20]
 80112ac:	b002      	add	sp, #8
 80112ae:	bd70      	pop	{r4, r5, r6, pc}
 80112b0:	ab01      	add	r3, sp, #4
 80112b2:	466a      	mov	r2, sp
 80112b4:	f7ff ffc3 	bl	801123e <__swhatbuf_r>
 80112b8:	9900      	ldr	r1, [sp, #0]
 80112ba:	4605      	mov	r5, r0
 80112bc:	4630      	mov	r0, r6
 80112be:	f000 f839 	bl	8011334 <_malloc_r>
 80112c2:	b948      	cbnz	r0, 80112d8 <__smakebuf_r+0x44>
 80112c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112c8:	059a      	lsls	r2, r3, #22
 80112ca:	d4ef      	bmi.n	80112ac <__smakebuf_r+0x18>
 80112cc:	f023 0303 	bic.w	r3, r3, #3
 80112d0:	f043 0302 	orr.w	r3, r3, #2
 80112d4:	81a3      	strh	r3, [r4, #12]
 80112d6:	e7e3      	b.n	80112a0 <__smakebuf_r+0xc>
 80112d8:	4b0d      	ldr	r3, [pc, #52]	; (8011310 <__smakebuf_r+0x7c>)
 80112da:	62b3      	str	r3, [r6, #40]	; 0x28
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	6020      	str	r0, [r4, #0]
 80112e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	9b00      	ldr	r3, [sp, #0]
 80112e8:	6163      	str	r3, [r4, #20]
 80112ea:	9b01      	ldr	r3, [sp, #4]
 80112ec:	6120      	str	r0, [r4, #16]
 80112ee:	b15b      	cbz	r3, 8011308 <__smakebuf_r+0x74>
 80112f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112f4:	4630      	mov	r0, r6
 80112f6:	f004 f85d 	bl	80153b4 <_isatty_r>
 80112fa:	b128      	cbz	r0, 8011308 <__smakebuf_r+0x74>
 80112fc:	89a3      	ldrh	r3, [r4, #12]
 80112fe:	f023 0303 	bic.w	r3, r3, #3
 8011302:	f043 0301 	orr.w	r3, r3, #1
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	89a3      	ldrh	r3, [r4, #12]
 801130a:	431d      	orrs	r5, r3
 801130c:	81a5      	strh	r5, [r4, #12]
 801130e:	e7cd      	b.n	80112ac <__smakebuf_r+0x18>
 8011310:	080108fd 	.word	0x080108fd

08011314 <malloc>:
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <malloc+0xc>)
 8011316:	4601      	mov	r1, r0
 8011318:	6818      	ldr	r0, [r3, #0]
 801131a:	f000 b80b 	b.w	8011334 <_malloc_r>
 801131e:	bf00      	nop
 8011320:	20000050 	.word	0x20000050

08011324 <free>:
 8011324:	4b02      	ldr	r3, [pc, #8]	; (8011330 <free+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f7ff bcab 	b.w	8010c84 <_free_r>
 801132e:	bf00      	nop
 8011330:	20000050 	.word	0x20000050

08011334 <_malloc_r>:
 8011334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	f101 040b 	add.w	r4, r1, #11
 801133c:	2c16      	cmp	r4, #22
 801133e:	4681      	mov	r9, r0
 8011340:	d907      	bls.n	8011352 <_malloc_r+0x1e>
 8011342:	f034 0407 	bics.w	r4, r4, #7
 8011346:	d505      	bpl.n	8011354 <_malloc_r+0x20>
 8011348:	230c      	movs	r3, #12
 801134a:	f8c9 3000 	str.w	r3, [r9]
 801134e:	2600      	movs	r6, #0
 8011350:	e131      	b.n	80115b6 <_malloc_r+0x282>
 8011352:	2410      	movs	r4, #16
 8011354:	428c      	cmp	r4, r1
 8011356:	d3f7      	bcc.n	8011348 <_malloc_r+0x14>
 8011358:	4648      	mov	r0, r9
 801135a:	f000 fa47 	bl	80117ec <__malloc_lock>
 801135e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8011362:	4d9c      	ldr	r5, [pc, #624]	; (80115d4 <_malloc_r+0x2a0>)
 8011364:	d236      	bcs.n	80113d4 <_malloc_r+0xa0>
 8011366:	f104 0208 	add.w	r2, r4, #8
 801136a:	442a      	add	r2, r5
 801136c:	f1a2 0108 	sub.w	r1, r2, #8
 8011370:	6856      	ldr	r6, [r2, #4]
 8011372:	428e      	cmp	r6, r1
 8011374:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8011378:	d102      	bne.n	8011380 <_malloc_r+0x4c>
 801137a:	68d6      	ldr	r6, [r2, #12]
 801137c:	42b2      	cmp	r2, r6
 801137e:	d010      	beq.n	80113a2 <_malloc_r+0x6e>
 8011380:	6873      	ldr	r3, [r6, #4]
 8011382:	68f2      	ldr	r2, [r6, #12]
 8011384:	68b1      	ldr	r1, [r6, #8]
 8011386:	f023 0303 	bic.w	r3, r3, #3
 801138a:	60ca      	str	r2, [r1, #12]
 801138c:	4433      	add	r3, r6
 801138e:	6091      	str	r1, [r2, #8]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	f042 0201 	orr.w	r2, r2, #1
 8011396:	605a      	str	r2, [r3, #4]
 8011398:	4648      	mov	r0, r9
 801139a:	f000 fa2d 	bl	80117f8 <__malloc_unlock>
 801139e:	3608      	adds	r6, #8
 80113a0:	e109      	b.n	80115b6 <_malloc_r+0x282>
 80113a2:	3302      	adds	r3, #2
 80113a4:	4a8c      	ldr	r2, [pc, #560]	; (80115d8 <_malloc_r+0x2a4>)
 80113a6:	692e      	ldr	r6, [r5, #16]
 80113a8:	4296      	cmp	r6, r2
 80113aa:	4611      	mov	r1, r2
 80113ac:	d06d      	beq.n	801148a <_malloc_r+0x156>
 80113ae:	6870      	ldr	r0, [r6, #4]
 80113b0:	f020 0003 	bic.w	r0, r0, #3
 80113b4:	1b07      	subs	r7, r0, r4
 80113b6:	2f0f      	cmp	r7, #15
 80113b8:	dd47      	ble.n	801144a <_malloc_r+0x116>
 80113ba:	1933      	adds	r3, r6, r4
 80113bc:	f044 0401 	orr.w	r4, r4, #1
 80113c0:	6074      	str	r4, [r6, #4]
 80113c2:	616b      	str	r3, [r5, #20]
 80113c4:	612b      	str	r3, [r5, #16]
 80113c6:	60da      	str	r2, [r3, #12]
 80113c8:	609a      	str	r2, [r3, #8]
 80113ca:	f047 0201 	orr.w	r2, r7, #1
 80113ce:	605a      	str	r2, [r3, #4]
 80113d0:	5037      	str	r7, [r6, r0]
 80113d2:	e7e1      	b.n	8011398 <_malloc_r+0x64>
 80113d4:	0a63      	lsrs	r3, r4, #9
 80113d6:	d02a      	beq.n	801142e <_malloc_r+0xfa>
 80113d8:	2b04      	cmp	r3, #4
 80113da:	d812      	bhi.n	8011402 <_malloc_r+0xce>
 80113dc:	09a3      	lsrs	r3, r4, #6
 80113de:	3338      	adds	r3, #56	; 0x38
 80113e0:	1c5a      	adds	r2, r3, #1
 80113e2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80113e6:	f1a2 0008 	sub.w	r0, r2, #8
 80113ea:	6856      	ldr	r6, [r2, #4]
 80113ec:	4286      	cmp	r6, r0
 80113ee:	d006      	beq.n	80113fe <_malloc_r+0xca>
 80113f0:	6872      	ldr	r2, [r6, #4]
 80113f2:	f022 0203 	bic.w	r2, r2, #3
 80113f6:	1b11      	subs	r1, r2, r4
 80113f8:	290f      	cmp	r1, #15
 80113fa:	dd1c      	ble.n	8011436 <_malloc_r+0x102>
 80113fc:	3b01      	subs	r3, #1
 80113fe:	3301      	adds	r3, #1
 8011400:	e7d0      	b.n	80113a4 <_malloc_r+0x70>
 8011402:	2b14      	cmp	r3, #20
 8011404:	d801      	bhi.n	801140a <_malloc_r+0xd6>
 8011406:	335b      	adds	r3, #91	; 0x5b
 8011408:	e7ea      	b.n	80113e0 <_malloc_r+0xac>
 801140a:	2b54      	cmp	r3, #84	; 0x54
 801140c:	d802      	bhi.n	8011414 <_malloc_r+0xe0>
 801140e:	0b23      	lsrs	r3, r4, #12
 8011410:	336e      	adds	r3, #110	; 0x6e
 8011412:	e7e5      	b.n	80113e0 <_malloc_r+0xac>
 8011414:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8011418:	d802      	bhi.n	8011420 <_malloc_r+0xec>
 801141a:	0be3      	lsrs	r3, r4, #15
 801141c:	3377      	adds	r3, #119	; 0x77
 801141e:	e7df      	b.n	80113e0 <_malloc_r+0xac>
 8011420:	f240 5254 	movw	r2, #1364	; 0x554
 8011424:	4293      	cmp	r3, r2
 8011426:	d804      	bhi.n	8011432 <_malloc_r+0xfe>
 8011428:	0ca3      	lsrs	r3, r4, #18
 801142a:	337c      	adds	r3, #124	; 0x7c
 801142c:	e7d8      	b.n	80113e0 <_malloc_r+0xac>
 801142e:	233f      	movs	r3, #63	; 0x3f
 8011430:	e7d6      	b.n	80113e0 <_malloc_r+0xac>
 8011432:	237e      	movs	r3, #126	; 0x7e
 8011434:	e7d4      	b.n	80113e0 <_malloc_r+0xac>
 8011436:	2900      	cmp	r1, #0
 8011438:	68f1      	ldr	r1, [r6, #12]
 801143a:	db04      	blt.n	8011446 <_malloc_r+0x112>
 801143c:	68b3      	ldr	r3, [r6, #8]
 801143e:	60d9      	str	r1, [r3, #12]
 8011440:	608b      	str	r3, [r1, #8]
 8011442:	18b3      	adds	r3, r6, r2
 8011444:	e7a4      	b.n	8011390 <_malloc_r+0x5c>
 8011446:	460e      	mov	r6, r1
 8011448:	e7d0      	b.n	80113ec <_malloc_r+0xb8>
 801144a:	2f00      	cmp	r7, #0
 801144c:	616a      	str	r2, [r5, #20]
 801144e:	612a      	str	r2, [r5, #16]
 8011450:	db05      	blt.n	801145e <_malloc_r+0x12a>
 8011452:	4430      	add	r0, r6
 8011454:	6843      	ldr	r3, [r0, #4]
 8011456:	f043 0301 	orr.w	r3, r3, #1
 801145a:	6043      	str	r3, [r0, #4]
 801145c:	e79c      	b.n	8011398 <_malloc_r+0x64>
 801145e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8011462:	d244      	bcs.n	80114ee <_malloc_r+0x1ba>
 8011464:	08c0      	lsrs	r0, r0, #3
 8011466:	1087      	asrs	r7, r0, #2
 8011468:	2201      	movs	r2, #1
 801146a:	fa02 f707 	lsl.w	r7, r2, r7
 801146e:	686a      	ldr	r2, [r5, #4]
 8011470:	3001      	adds	r0, #1
 8011472:	433a      	orrs	r2, r7
 8011474:	606a      	str	r2, [r5, #4]
 8011476:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801147a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 801147e:	60b7      	str	r7, [r6, #8]
 8011480:	3a08      	subs	r2, #8
 8011482:	60f2      	str	r2, [r6, #12]
 8011484:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8011488:	60fe      	str	r6, [r7, #12]
 801148a:	2001      	movs	r0, #1
 801148c:	109a      	asrs	r2, r3, #2
 801148e:	fa00 f202 	lsl.w	r2, r0, r2
 8011492:	6868      	ldr	r0, [r5, #4]
 8011494:	4282      	cmp	r2, r0
 8011496:	f200 80a1 	bhi.w	80115dc <_malloc_r+0x2a8>
 801149a:	4202      	tst	r2, r0
 801149c:	d106      	bne.n	80114ac <_malloc_r+0x178>
 801149e:	f023 0303 	bic.w	r3, r3, #3
 80114a2:	0052      	lsls	r2, r2, #1
 80114a4:	4202      	tst	r2, r0
 80114a6:	f103 0304 	add.w	r3, r3, #4
 80114aa:	d0fa      	beq.n	80114a2 <_malloc_r+0x16e>
 80114ac:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80114b0:	46e0      	mov	r8, ip
 80114b2:	469e      	mov	lr, r3
 80114b4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80114b8:	4546      	cmp	r6, r8
 80114ba:	d153      	bne.n	8011564 <_malloc_r+0x230>
 80114bc:	f10e 0e01 	add.w	lr, lr, #1
 80114c0:	f01e 0f03 	tst.w	lr, #3
 80114c4:	f108 0808 	add.w	r8, r8, #8
 80114c8:	d1f4      	bne.n	80114b4 <_malloc_r+0x180>
 80114ca:	0798      	lsls	r0, r3, #30
 80114cc:	d179      	bne.n	80115c2 <_malloc_r+0x28e>
 80114ce:	686b      	ldr	r3, [r5, #4]
 80114d0:	ea23 0302 	bic.w	r3, r3, r2
 80114d4:	606b      	str	r3, [r5, #4]
 80114d6:	6868      	ldr	r0, [r5, #4]
 80114d8:	0052      	lsls	r2, r2, #1
 80114da:	4282      	cmp	r2, r0
 80114dc:	d87e      	bhi.n	80115dc <_malloc_r+0x2a8>
 80114de:	2a00      	cmp	r2, #0
 80114e0:	d07c      	beq.n	80115dc <_malloc_r+0x2a8>
 80114e2:	4673      	mov	r3, lr
 80114e4:	4202      	tst	r2, r0
 80114e6:	d1e1      	bne.n	80114ac <_malloc_r+0x178>
 80114e8:	3304      	adds	r3, #4
 80114ea:	0052      	lsls	r2, r2, #1
 80114ec:	e7fa      	b.n	80114e4 <_malloc_r+0x1b0>
 80114ee:	0a42      	lsrs	r2, r0, #9
 80114f0:	2a04      	cmp	r2, #4
 80114f2:	d815      	bhi.n	8011520 <_malloc_r+0x1ec>
 80114f4:	0982      	lsrs	r2, r0, #6
 80114f6:	3238      	adds	r2, #56	; 0x38
 80114f8:	1c57      	adds	r7, r2, #1
 80114fa:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80114fe:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8011502:	45be      	cmp	lr, r7
 8011504:	d126      	bne.n	8011554 <_malloc_r+0x220>
 8011506:	2001      	movs	r0, #1
 8011508:	1092      	asrs	r2, r2, #2
 801150a:	fa00 f202 	lsl.w	r2, r0, r2
 801150e:	6868      	ldr	r0, [r5, #4]
 8011510:	4310      	orrs	r0, r2
 8011512:	6068      	str	r0, [r5, #4]
 8011514:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011518:	60b7      	str	r7, [r6, #8]
 801151a:	f8ce 6008 	str.w	r6, [lr, #8]
 801151e:	e7b3      	b.n	8011488 <_malloc_r+0x154>
 8011520:	2a14      	cmp	r2, #20
 8011522:	d801      	bhi.n	8011528 <_malloc_r+0x1f4>
 8011524:	325b      	adds	r2, #91	; 0x5b
 8011526:	e7e7      	b.n	80114f8 <_malloc_r+0x1c4>
 8011528:	2a54      	cmp	r2, #84	; 0x54
 801152a:	d802      	bhi.n	8011532 <_malloc_r+0x1fe>
 801152c:	0b02      	lsrs	r2, r0, #12
 801152e:	326e      	adds	r2, #110	; 0x6e
 8011530:	e7e2      	b.n	80114f8 <_malloc_r+0x1c4>
 8011532:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011536:	d802      	bhi.n	801153e <_malloc_r+0x20a>
 8011538:	0bc2      	lsrs	r2, r0, #15
 801153a:	3277      	adds	r2, #119	; 0x77
 801153c:	e7dc      	b.n	80114f8 <_malloc_r+0x1c4>
 801153e:	f240 5754 	movw	r7, #1364	; 0x554
 8011542:	42ba      	cmp	r2, r7
 8011544:	bf9a      	itte	ls
 8011546:	0c82      	lsrls	r2, r0, #18
 8011548:	327c      	addls	r2, #124	; 0x7c
 801154a:	227e      	movhi	r2, #126	; 0x7e
 801154c:	e7d4      	b.n	80114f8 <_malloc_r+0x1c4>
 801154e:	68bf      	ldr	r7, [r7, #8]
 8011550:	45be      	cmp	lr, r7
 8011552:	d004      	beq.n	801155e <_malloc_r+0x22a>
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	f022 0203 	bic.w	r2, r2, #3
 801155a:	4290      	cmp	r0, r2
 801155c:	d3f7      	bcc.n	801154e <_malloc_r+0x21a>
 801155e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8011562:	e7d7      	b.n	8011514 <_malloc_r+0x1e0>
 8011564:	6870      	ldr	r0, [r6, #4]
 8011566:	68f7      	ldr	r7, [r6, #12]
 8011568:	f020 0003 	bic.w	r0, r0, #3
 801156c:	eba0 0a04 	sub.w	sl, r0, r4
 8011570:	f1ba 0f0f 	cmp.w	sl, #15
 8011574:	dd10      	ble.n	8011598 <_malloc_r+0x264>
 8011576:	68b2      	ldr	r2, [r6, #8]
 8011578:	1933      	adds	r3, r6, r4
 801157a:	f044 0401 	orr.w	r4, r4, #1
 801157e:	6074      	str	r4, [r6, #4]
 8011580:	60d7      	str	r7, [r2, #12]
 8011582:	60ba      	str	r2, [r7, #8]
 8011584:	f04a 0201 	orr.w	r2, sl, #1
 8011588:	616b      	str	r3, [r5, #20]
 801158a:	612b      	str	r3, [r5, #16]
 801158c:	60d9      	str	r1, [r3, #12]
 801158e:	6099      	str	r1, [r3, #8]
 8011590:	605a      	str	r2, [r3, #4]
 8011592:	f846 a000 	str.w	sl, [r6, r0]
 8011596:	e6ff      	b.n	8011398 <_malloc_r+0x64>
 8011598:	f1ba 0f00 	cmp.w	sl, #0
 801159c:	db0f      	blt.n	80115be <_malloc_r+0x28a>
 801159e:	4430      	add	r0, r6
 80115a0:	6843      	ldr	r3, [r0, #4]
 80115a2:	f043 0301 	orr.w	r3, r3, #1
 80115a6:	6043      	str	r3, [r0, #4]
 80115a8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80115ac:	4648      	mov	r0, r9
 80115ae:	60df      	str	r7, [r3, #12]
 80115b0:	60bb      	str	r3, [r7, #8]
 80115b2:	f000 f921 	bl	80117f8 <__malloc_unlock>
 80115b6:	4630      	mov	r0, r6
 80115b8:	b003      	add	sp, #12
 80115ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115be:	463e      	mov	r6, r7
 80115c0:	e77a      	b.n	80114b8 <_malloc_r+0x184>
 80115c2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80115c6:	4584      	cmp	ip, r0
 80115c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80115cc:	f43f af7d 	beq.w	80114ca <_malloc_r+0x196>
 80115d0:	e781      	b.n	80114d6 <_malloc_r+0x1a2>
 80115d2:	bf00      	nop
 80115d4:	200002b0 	.word	0x200002b0
 80115d8:	200002b8 	.word	0x200002b8
 80115dc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80115e0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80115e4:	f026 0603 	bic.w	r6, r6, #3
 80115e8:	42b4      	cmp	r4, r6
 80115ea:	d803      	bhi.n	80115f4 <_malloc_r+0x2c0>
 80115ec:	1b33      	subs	r3, r6, r4
 80115ee:	2b0f      	cmp	r3, #15
 80115f0:	f300 8096 	bgt.w	8011720 <_malloc_r+0x3ec>
 80115f4:	4a4f      	ldr	r2, [pc, #316]	; (8011734 <_malloc_r+0x400>)
 80115f6:	6817      	ldr	r7, [r2, #0]
 80115f8:	4a4f      	ldr	r2, [pc, #316]	; (8011738 <_malloc_r+0x404>)
 80115fa:	6811      	ldr	r1, [r2, #0]
 80115fc:	3710      	adds	r7, #16
 80115fe:	3101      	adds	r1, #1
 8011600:	eb0b 0306 	add.w	r3, fp, r6
 8011604:	4427      	add	r7, r4
 8011606:	d005      	beq.n	8011614 <_malloc_r+0x2e0>
 8011608:	494c      	ldr	r1, [pc, #304]	; (801173c <_malloc_r+0x408>)
 801160a:	3901      	subs	r1, #1
 801160c:	440f      	add	r7, r1
 801160e:	3101      	adds	r1, #1
 8011610:	4249      	negs	r1, r1
 8011612:	400f      	ands	r7, r1
 8011614:	4639      	mov	r1, r7
 8011616:	4648      	mov	r0, r9
 8011618:	9201      	str	r2, [sp, #4]
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	f000 fb56 	bl	8011ccc <_sbrk_r>
 8011620:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011624:	4680      	mov	r8, r0
 8011626:	d056      	beq.n	80116d6 <_malloc_r+0x3a2>
 8011628:	9b00      	ldr	r3, [sp, #0]
 801162a:	9a01      	ldr	r2, [sp, #4]
 801162c:	4283      	cmp	r3, r0
 801162e:	d901      	bls.n	8011634 <_malloc_r+0x300>
 8011630:	45ab      	cmp	fp, r5
 8011632:	d150      	bne.n	80116d6 <_malloc_r+0x3a2>
 8011634:	4842      	ldr	r0, [pc, #264]	; (8011740 <_malloc_r+0x40c>)
 8011636:	6801      	ldr	r1, [r0, #0]
 8011638:	4543      	cmp	r3, r8
 801163a:	eb07 0e01 	add.w	lr, r7, r1
 801163e:	f8c0 e000 	str.w	lr, [r0]
 8011642:	4940      	ldr	r1, [pc, #256]	; (8011744 <_malloc_r+0x410>)
 8011644:	4682      	mov	sl, r0
 8011646:	d113      	bne.n	8011670 <_malloc_r+0x33c>
 8011648:	420b      	tst	r3, r1
 801164a:	d111      	bne.n	8011670 <_malloc_r+0x33c>
 801164c:	68ab      	ldr	r3, [r5, #8]
 801164e:	443e      	add	r6, r7
 8011650:	f046 0601 	orr.w	r6, r6, #1
 8011654:	605e      	str	r6, [r3, #4]
 8011656:	4a3c      	ldr	r2, [pc, #240]	; (8011748 <_malloc_r+0x414>)
 8011658:	f8da 3000 	ldr.w	r3, [sl]
 801165c:	6811      	ldr	r1, [r2, #0]
 801165e:	428b      	cmp	r3, r1
 8011660:	bf88      	it	hi
 8011662:	6013      	strhi	r3, [r2, #0]
 8011664:	4a39      	ldr	r2, [pc, #228]	; (801174c <_malloc_r+0x418>)
 8011666:	6811      	ldr	r1, [r2, #0]
 8011668:	428b      	cmp	r3, r1
 801166a:	bf88      	it	hi
 801166c:	6013      	strhi	r3, [r2, #0]
 801166e:	e032      	b.n	80116d6 <_malloc_r+0x3a2>
 8011670:	6810      	ldr	r0, [r2, #0]
 8011672:	3001      	adds	r0, #1
 8011674:	bf1b      	ittet	ne
 8011676:	eba8 0303 	subne.w	r3, r8, r3
 801167a:	4473      	addne	r3, lr
 801167c:	f8c2 8000 	streq.w	r8, [r2]
 8011680:	f8ca 3000 	strne.w	r3, [sl]
 8011684:	f018 0007 	ands.w	r0, r8, #7
 8011688:	bf1c      	itt	ne
 801168a:	f1c0 0008 	rsbne	r0, r0, #8
 801168e:	4480      	addne	r8, r0
 8011690:	4b2a      	ldr	r3, [pc, #168]	; (801173c <_malloc_r+0x408>)
 8011692:	4447      	add	r7, r8
 8011694:	4418      	add	r0, r3
 8011696:	400f      	ands	r7, r1
 8011698:	1bc7      	subs	r7, r0, r7
 801169a:	4639      	mov	r1, r7
 801169c:	4648      	mov	r0, r9
 801169e:	f000 fb15 	bl	8011ccc <_sbrk_r>
 80116a2:	1c43      	adds	r3, r0, #1
 80116a4:	bf08      	it	eq
 80116a6:	4640      	moveq	r0, r8
 80116a8:	f8da 3000 	ldr.w	r3, [sl]
 80116ac:	f8c5 8008 	str.w	r8, [r5, #8]
 80116b0:	bf08      	it	eq
 80116b2:	2700      	moveq	r7, #0
 80116b4:	eba0 0008 	sub.w	r0, r0, r8
 80116b8:	443b      	add	r3, r7
 80116ba:	4407      	add	r7, r0
 80116bc:	f047 0701 	orr.w	r7, r7, #1
 80116c0:	45ab      	cmp	fp, r5
 80116c2:	f8ca 3000 	str.w	r3, [sl]
 80116c6:	f8c8 7004 	str.w	r7, [r8, #4]
 80116ca:	d0c4      	beq.n	8011656 <_malloc_r+0x322>
 80116cc:	2e0f      	cmp	r6, #15
 80116ce:	d810      	bhi.n	80116f2 <_malloc_r+0x3be>
 80116d0:	2301      	movs	r3, #1
 80116d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80116d6:	68ab      	ldr	r3, [r5, #8]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	f022 0203 	bic.w	r2, r2, #3
 80116de:	4294      	cmp	r4, r2
 80116e0:	eba2 0304 	sub.w	r3, r2, r4
 80116e4:	d801      	bhi.n	80116ea <_malloc_r+0x3b6>
 80116e6:	2b0f      	cmp	r3, #15
 80116e8:	dc1a      	bgt.n	8011720 <_malloc_r+0x3ec>
 80116ea:	4648      	mov	r0, r9
 80116ec:	f000 f884 	bl	80117f8 <__malloc_unlock>
 80116f0:	e62d      	b.n	801134e <_malloc_r+0x1a>
 80116f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80116f6:	3e0c      	subs	r6, #12
 80116f8:	f026 0607 	bic.w	r6, r6, #7
 80116fc:	f003 0301 	and.w	r3, r3, #1
 8011700:	4333      	orrs	r3, r6
 8011702:	f8cb 3004 	str.w	r3, [fp, #4]
 8011706:	eb0b 0306 	add.w	r3, fp, r6
 801170a:	2205      	movs	r2, #5
 801170c:	2e0f      	cmp	r6, #15
 801170e:	605a      	str	r2, [r3, #4]
 8011710:	609a      	str	r2, [r3, #8]
 8011712:	d9a0      	bls.n	8011656 <_malloc_r+0x322>
 8011714:	f10b 0108 	add.w	r1, fp, #8
 8011718:	4648      	mov	r0, r9
 801171a:	f7ff fab3 	bl	8010c84 <_free_r>
 801171e:	e79a      	b.n	8011656 <_malloc_r+0x322>
 8011720:	68ae      	ldr	r6, [r5, #8]
 8011722:	f044 0201 	orr.w	r2, r4, #1
 8011726:	4434      	add	r4, r6
 8011728:	f043 0301 	orr.w	r3, r3, #1
 801172c:	6072      	str	r2, [r6, #4]
 801172e:	60ac      	str	r4, [r5, #8]
 8011730:	6063      	str	r3, [r4, #4]
 8011732:	e631      	b.n	8011398 <_malloc_r+0x64>
 8011734:	20001d64 	.word	0x20001d64
 8011738:	200006b8 	.word	0x200006b8
 801173c:	00001000 	.word	0x00001000
 8011740:	20001d34 	.word	0x20001d34
 8011744:	00000fff 	.word	0x00000fff
 8011748:	20001d5c 	.word	0x20001d5c
 801174c:	20001d60 	.word	0x20001d60

08011750 <__ascii_mbtowc>:
 8011750:	b082      	sub	sp, #8
 8011752:	b901      	cbnz	r1, 8011756 <__ascii_mbtowc+0x6>
 8011754:	a901      	add	r1, sp, #4
 8011756:	b142      	cbz	r2, 801176a <__ascii_mbtowc+0x1a>
 8011758:	b14b      	cbz	r3, 801176e <__ascii_mbtowc+0x1e>
 801175a:	7813      	ldrb	r3, [r2, #0]
 801175c:	600b      	str	r3, [r1, #0]
 801175e:	7812      	ldrb	r2, [r2, #0]
 8011760:	1c10      	adds	r0, r2, #0
 8011762:	bf18      	it	ne
 8011764:	2001      	movne	r0, #1
 8011766:	b002      	add	sp, #8
 8011768:	4770      	bx	lr
 801176a:	4610      	mov	r0, r2
 801176c:	e7fb      	b.n	8011766 <__ascii_mbtowc+0x16>
 801176e:	f06f 0001 	mvn.w	r0, #1
 8011772:	e7f8      	b.n	8011766 <__ascii_mbtowc+0x16>

08011774 <memcmp>:
 8011774:	b510      	push	{r4, lr}
 8011776:	3901      	subs	r1, #1
 8011778:	4402      	add	r2, r0
 801177a:	4290      	cmp	r0, r2
 801177c:	d101      	bne.n	8011782 <memcmp+0xe>
 801177e:	2000      	movs	r0, #0
 8011780:	bd10      	pop	{r4, pc}
 8011782:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801178a:	42a3      	cmp	r3, r4
 801178c:	d0f5      	beq.n	801177a <memcmp+0x6>
 801178e:	1b18      	subs	r0, r3, r4
 8011790:	bd10      	pop	{r4, pc}

08011792 <memcpy>:
 8011792:	b510      	push	{r4, lr}
 8011794:	1e43      	subs	r3, r0, #1
 8011796:	440a      	add	r2, r1
 8011798:	4291      	cmp	r1, r2
 801179a:	d100      	bne.n	801179e <memcpy+0xc>
 801179c:	bd10      	pop	{r4, pc}
 801179e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117a6:	e7f7      	b.n	8011798 <memcpy+0x6>

080117a8 <memmove>:
 80117a8:	4288      	cmp	r0, r1
 80117aa:	b510      	push	{r4, lr}
 80117ac:	eb01 0302 	add.w	r3, r1, r2
 80117b0:	d803      	bhi.n	80117ba <memmove+0x12>
 80117b2:	1e42      	subs	r2, r0, #1
 80117b4:	4299      	cmp	r1, r3
 80117b6:	d10c      	bne.n	80117d2 <memmove+0x2a>
 80117b8:	bd10      	pop	{r4, pc}
 80117ba:	4298      	cmp	r0, r3
 80117bc:	d2f9      	bcs.n	80117b2 <memmove+0xa>
 80117be:	1881      	adds	r1, r0, r2
 80117c0:	1ad2      	subs	r2, r2, r3
 80117c2:	42d3      	cmn	r3, r2
 80117c4:	d100      	bne.n	80117c8 <memmove+0x20>
 80117c6:	bd10      	pop	{r4, pc}
 80117c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80117d0:	e7f7      	b.n	80117c2 <memmove+0x1a>
 80117d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80117da:	e7eb      	b.n	80117b4 <memmove+0xc>

080117dc <memset>:
 80117dc:	4402      	add	r2, r0
 80117de:	4603      	mov	r3, r0
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d100      	bne.n	80117e6 <memset+0xa>
 80117e4:	4770      	bx	lr
 80117e6:	f803 1b01 	strb.w	r1, [r3], #1
 80117ea:	e7f9      	b.n	80117e0 <memset+0x4>

080117ec <__malloc_lock>:
 80117ec:	4801      	ldr	r0, [pc, #4]	; (80117f4 <__malloc_lock+0x8>)
 80117ee:	f7ff bd23 	b.w	8011238 <__retarget_lock_acquire_recursive>
 80117f2:	bf00      	nop
 80117f4:	20001fbc 	.word	0x20001fbc

080117f8 <__malloc_unlock>:
 80117f8:	4801      	ldr	r0, [pc, #4]	; (8011800 <__malloc_unlock+0x8>)
 80117fa:	f7ff bd1f 	b.w	801123c <__retarget_lock_release_recursive>
 80117fe:	bf00      	nop
 8011800:	20001fbc 	.word	0x20001fbc

08011804 <printf>:
 8011804:	b40f      	push	{r0, r1, r2, r3}
 8011806:	4b0a      	ldr	r3, [pc, #40]	; (8011830 <printf+0x2c>)
 8011808:	b513      	push	{r0, r1, r4, lr}
 801180a:	681c      	ldr	r4, [r3, #0]
 801180c:	b124      	cbz	r4, 8011818 <printf+0x14>
 801180e:	69a3      	ldr	r3, [r4, #24]
 8011810:	b913      	cbnz	r3, 8011818 <printf+0x14>
 8011812:	4620      	mov	r0, r4
 8011814:	f7ff f8ca 	bl	80109ac <__sinit>
 8011818:	ab05      	add	r3, sp, #20
 801181a:	9a04      	ldr	r2, [sp, #16]
 801181c:	68a1      	ldr	r1, [r4, #8]
 801181e:	9301      	str	r3, [sp, #4]
 8011820:	4620      	mov	r0, r4
 8011822:	f001 fce9 	bl	80131f8 <_vfprintf_r>
 8011826:	b002      	add	sp, #8
 8011828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801182c:	b004      	add	sp, #16
 801182e:	4770      	bx	lr
 8011830:	20000050 	.word	0x20000050

08011834 <_putc_r>:
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	460d      	mov	r5, r1
 8011838:	4614      	mov	r4, r2
 801183a:	4606      	mov	r6, r0
 801183c:	b118      	cbz	r0, 8011846 <_putc_r+0x12>
 801183e:	6983      	ldr	r3, [r0, #24]
 8011840:	b90b      	cbnz	r3, 8011846 <_putc_r+0x12>
 8011842:	f7ff f8b3 	bl	80109ac <__sinit>
 8011846:	4b1c      	ldr	r3, [pc, #112]	; (80118b8 <_putc_r+0x84>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d124      	bne.n	8011896 <_putc_r+0x62>
 801184c:	6874      	ldr	r4, [r6, #4]
 801184e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011850:	07d8      	lsls	r0, r3, #31
 8011852:	d405      	bmi.n	8011860 <_putc_r+0x2c>
 8011854:	89a3      	ldrh	r3, [r4, #12]
 8011856:	0599      	lsls	r1, r3, #22
 8011858:	d402      	bmi.n	8011860 <_putc_r+0x2c>
 801185a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801185c:	f7ff fcec 	bl	8011238 <__retarget_lock_acquire_recursive>
 8011860:	68a3      	ldr	r3, [r4, #8]
 8011862:	3b01      	subs	r3, #1
 8011864:	2b00      	cmp	r3, #0
 8011866:	60a3      	str	r3, [r4, #8]
 8011868:	da05      	bge.n	8011876 <_putc_r+0x42>
 801186a:	69a2      	ldr	r2, [r4, #24]
 801186c:	4293      	cmp	r3, r2
 801186e:	db1c      	blt.n	80118aa <_putc_r+0x76>
 8011870:	b2eb      	uxtb	r3, r5
 8011872:	2b0a      	cmp	r3, #10
 8011874:	d019      	beq.n	80118aa <_putc_r+0x76>
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	6022      	str	r2, [r4, #0]
 801187c:	701d      	strb	r5, [r3, #0]
 801187e:	b2ed      	uxtb	r5, r5
 8011880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011882:	07da      	lsls	r2, r3, #31
 8011884:	d405      	bmi.n	8011892 <_putc_r+0x5e>
 8011886:	89a3      	ldrh	r3, [r4, #12]
 8011888:	059b      	lsls	r3, r3, #22
 801188a:	d402      	bmi.n	8011892 <_putc_r+0x5e>
 801188c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801188e:	f7ff fcd5 	bl	801123c <__retarget_lock_release_recursive>
 8011892:	4628      	mov	r0, r5
 8011894:	bd70      	pop	{r4, r5, r6, pc}
 8011896:	4b09      	ldr	r3, [pc, #36]	; (80118bc <_putc_r+0x88>)
 8011898:	429c      	cmp	r4, r3
 801189a:	d101      	bne.n	80118a0 <_putc_r+0x6c>
 801189c:	68b4      	ldr	r4, [r6, #8]
 801189e:	e7d6      	b.n	801184e <_putc_r+0x1a>
 80118a0:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <_putc_r+0x8c>)
 80118a2:	429c      	cmp	r4, r3
 80118a4:	bf08      	it	eq
 80118a6:	68f4      	ldreq	r4, [r6, #12]
 80118a8:	e7d1      	b.n	801184e <_putc_r+0x1a>
 80118aa:	4629      	mov	r1, r5
 80118ac:	4622      	mov	r2, r4
 80118ae:	4630      	mov	r0, r6
 80118b0:	f002 fd1e 	bl	80142f0 <__swbuf_r>
 80118b4:	4605      	mov	r5, r0
 80118b6:	e7e3      	b.n	8011880 <_putc_r+0x4c>
 80118b8:	080176a0 	.word	0x080176a0
 80118bc:	080176c0 	.word	0x080176c0
 80118c0:	08017680 	.word	0x08017680

080118c4 <putchar>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4b08      	ldr	r3, [pc, #32]	; (80118e8 <putchar+0x24>)
 80118c8:	681c      	ldr	r4, [r3, #0]
 80118ca:	4605      	mov	r5, r0
 80118cc:	b124      	cbz	r4, 80118d8 <putchar+0x14>
 80118ce:	69a3      	ldr	r3, [r4, #24]
 80118d0:	b913      	cbnz	r3, 80118d8 <putchar+0x14>
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff f86a 	bl	80109ac <__sinit>
 80118d8:	68a2      	ldr	r2, [r4, #8]
 80118da:	4629      	mov	r1, r5
 80118dc:	4620      	mov	r0, r4
 80118de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118e2:	f7ff bfa7 	b.w	8011834 <_putc_r>
 80118e6:	bf00      	nop
 80118e8:	20000050 	.word	0x20000050

080118ec <_puts_r>:
 80118ec:	b530      	push	{r4, r5, lr}
 80118ee:	4605      	mov	r5, r0
 80118f0:	b089      	sub	sp, #36	; 0x24
 80118f2:	4608      	mov	r0, r1
 80118f4:	460c      	mov	r4, r1
 80118f6:	f7f5 f81d 	bl	8006934 <strlen>
 80118fa:	4b28      	ldr	r3, [pc, #160]	; (801199c <_puts_r+0xb0>)
 80118fc:	9306      	str	r3, [sp, #24]
 80118fe:	2301      	movs	r3, #1
 8011900:	9005      	str	r0, [sp, #20]
 8011902:	9307      	str	r3, [sp, #28]
 8011904:	4418      	add	r0, r3
 8011906:	ab04      	add	r3, sp, #16
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	2302      	movs	r3, #2
 801190c:	9404      	str	r4, [sp, #16]
 801190e:	9003      	str	r0, [sp, #12]
 8011910:	9302      	str	r3, [sp, #8]
 8011912:	b125      	cbz	r5, 801191e <_puts_r+0x32>
 8011914:	69ab      	ldr	r3, [r5, #24]
 8011916:	b913      	cbnz	r3, 801191e <_puts_r+0x32>
 8011918:	4628      	mov	r0, r5
 801191a:	f7ff f847 	bl	80109ac <__sinit>
 801191e:	69ab      	ldr	r3, [r5, #24]
 8011920:	68ac      	ldr	r4, [r5, #8]
 8011922:	b913      	cbnz	r3, 801192a <_puts_r+0x3e>
 8011924:	4628      	mov	r0, r5
 8011926:	f7ff f841 	bl	80109ac <__sinit>
 801192a:	4b1d      	ldr	r3, [pc, #116]	; (80119a0 <_puts_r+0xb4>)
 801192c:	429c      	cmp	r4, r3
 801192e:	d12a      	bne.n	8011986 <_puts_r+0x9a>
 8011930:	686c      	ldr	r4, [r5, #4]
 8011932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011934:	07db      	lsls	r3, r3, #31
 8011936:	d405      	bmi.n	8011944 <_puts_r+0x58>
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	0598      	lsls	r0, r3, #22
 801193c:	d402      	bmi.n	8011944 <_puts_r+0x58>
 801193e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011940:	f7ff fc7a 	bl	8011238 <__retarget_lock_acquire_recursive>
 8011944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011948:	0499      	lsls	r1, r3, #18
 801194a:	d406      	bmi.n	801195a <_puts_r+0x6e>
 801194c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011950:	81a3      	strh	r3, [r4, #12]
 8011952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011958:	6663      	str	r3, [r4, #100]	; 0x64
 801195a:	4628      	mov	r0, r5
 801195c:	aa01      	add	r2, sp, #4
 801195e:	4621      	mov	r1, r4
 8011960:	f7ff fa5e 	bl	8010e20 <__sfvwrite_r>
 8011964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011966:	2800      	cmp	r0, #0
 8011968:	bf14      	ite	ne
 801196a:	f04f 35ff 	movne.w	r5, #4294967295
 801196e:	250a      	moveq	r5, #10
 8011970:	07da      	lsls	r2, r3, #31
 8011972:	d405      	bmi.n	8011980 <_puts_r+0x94>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	059b      	lsls	r3, r3, #22
 8011978:	d402      	bmi.n	8011980 <_puts_r+0x94>
 801197a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801197c:	f7ff fc5e 	bl	801123c <__retarget_lock_release_recursive>
 8011980:	4628      	mov	r0, r5
 8011982:	b009      	add	sp, #36	; 0x24
 8011984:	bd30      	pop	{r4, r5, pc}
 8011986:	4b07      	ldr	r3, [pc, #28]	; (80119a4 <_puts_r+0xb8>)
 8011988:	429c      	cmp	r4, r3
 801198a:	d101      	bne.n	8011990 <_puts_r+0xa4>
 801198c:	68ac      	ldr	r4, [r5, #8]
 801198e:	e7d0      	b.n	8011932 <_puts_r+0x46>
 8011990:	4b05      	ldr	r3, [pc, #20]	; (80119a8 <_puts_r+0xbc>)
 8011992:	429c      	cmp	r4, r3
 8011994:	bf08      	it	eq
 8011996:	68ec      	ldreq	r4, [r5, #12]
 8011998:	e7cb      	b.n	8011932 <_puts_r+0x46>
 801199a:	bf00      	nop
 801199c:	080165d0 	.word	0x080165d0
 80119a0:	080176a0 	.word	0x080176a0
 80119a4:	080176c0 	.word	0x080176c0
 80119a8:	08017680 	.word	0x08017680

080119ac <puts>:
 80119ac:	4b02      	ldr	r3, [pc, #8]	; (80119b8 <puts+0xc>)
 80119ae:	4601      	mov	r1, r0
 80119b0:	6818      	ldr	r0, [r3, #0]
 80119b2:	f7ff bf9b 	b.w	80118ec <_puts_r>
 80119b6:	bf00      	nop
 80119b8:	20000050 	.word	0x20000050

080119bc <realloc>:
 80119bc:	4b02      	ldr	r3, [pc, #8]	; (80119c8 <realloc+0xc>)
 80119be:	460a      	mov	r2, r1
 80119c0:	4601      	mov	r1, r0
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	f000 b802 	b.w	80119cc <_realloc_r>
 80119c8:	20000050 	.word	0x20000050

080119cc <_realloc_r>:
 80119cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	4682      	mov	sl, r0
 80119d2:	460c      	mov	r4, r1
 80119d4:	b929      	cbnz	r1, 80119e2 <_realloc_r+0x16>
 80119d6:	4611      	mov	r1, r2
 80119d8:	b003      	add	sp, #12
 80119da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119de:	f7ff bca9 	b.w	8011334 <_malloc_r>
 80119e2:	9201      	str	r2, [sp, #4]
 80119e4:	f7ff ff02 	bl	80117ec <__malloc_lock>
 80119e8:	9a01      	ldr	r2, [sp, #4]
 80119ea:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80119ee:	f102 080b 	add.w	r8, r2, #11
 80119f2:	f1b8 0f16 	cmp.w	r8, #22
 80119f6:	f1a4 0908 	sub.w	r9, r4, #8
 80119fa:	f025 0603 	bic.w	r6, r5, #3
 80119fe:	d90a      	bls.n	8011a16 <_realloc_r+0x4a>
 8011a00:	f038 0807 	bics.w	r8, r8, #7
 8011a04:	d509      	bpl.n	8011a1a <_realloc_r+0x4e>
 8011a06:	230c      	movs	r3, #12
 8011a08:	f8ca 3000 	str.w	r3, [sl]
 8011a0c:	2700      	movs	r7, #0
 8011a0e:	4638      	mov	r0, r7
 8011a10:	b003      	add	sp, #12
 8011a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a16:	f04f 0810 	mov.w	r8, #16
 8011a1a:	4590      	cmp	r8, r2
 8011a1c:	d3f3      	bcc.n	8011a06 <_realloc_r+0x3a>
 8011a1e:	45b0      	cmp	r8, r6
 8011a20:	f340 8145 	ble.w	8011cae <_realloc_r+0x2e2>
 8011a24:	4ba8      	ldr	r3, [pc, #672]	; (8011cc8 <_realloc_r+0x2fc>)
 8011a26:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8011a2a:	eb09 0106 	add.w	r1, r9, r6
 8011a2e:	4571      	cmp	r1, lr
 8011a30:	469b      	mov	fp, r3
 8011a32:	684b      	ldr	r3, [r1, #4]
 8011a34:	d005      	beq.n	8011a42 <_realloc_r+0x76>
 8011a36:	f023 0001 	bic.w	r0, r3, #1
 8011a3a:	4408      	add	r0, r1
 8011a3c:	6840      	ldr	r0, [r0, #4]
 8011a3e:	07c7      	lsls	r7, r0, #31
 8011a40:	d447      	bmi.n	8011ad2 <_realloc_r+0x106>
 8011a42:	f023 0303 	bic.w	r3, r3, #3
 8011a46:	4571      	cmp	r1, lr
 8011a48:	eb06 0703 	add.w	r7, r6, r3
 8011a4c:	d119      	bne.n	8011a82 <_realloc_r+0xb6>
 8011a4e:	f108 0010 	add.w	r0, r8, #16
 8011a52:	4287      	cmp	r7, r0
 8011a54:	db3f      	blt.n	8011ad6 <_realloc_r+0x10a>
 8011a56:	eb09 0308 	add.w	r3, r9, r8
 8011a5a:	eba7 0708 	sub.w	r7, r7, r8
 8011a5e:	f047 0701 	orr.w	r7, r7, #1
 8011a62:	f8cb 3008 	str.w	r3, [fp, #8]
 8011a66:	605f      	str	r7, [r3, #4]
 8011a68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011a6c:	f003 0301 	and.w	r3, r3, #1
 8011a70:	ea43 0308 	orr.w	r3, r3, r8
 8011a74:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a78:	4650      	mov	r0, sl
 8011a7a:	f7ff febd 	bl	80117f8 <__malloc_unlock>
 8011a7e:	4627      	mov	r7, r4
 8011a80:	e7c5      	b.n	8011a0e <_realloc_r+0x42>
 8011a82:	45b8      	cmp	r8, r7
 8011a84:	dc27      	bgt.n	8011ad6 <_realloc_r+0x10a>
 8011a86:	68cb      	ldr	r3, [r1, #12]
 8011a88:	688a      	ldr	r2, [r1, #8]
 8011a8a:	60d3      	str	r3, [r2, #12]
 8011a8c:	609a      	str	r2, [r3, #8]
 8011a8e:	eba7 0008 	sub.w	r0, r7, r8
 8011a92:	280f      	cmp	r0, #15
 8011a94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011a98:	eb09 0207 	add.w	r2, r9, r7
 8011a9c:	f240 8109 	bls.w	8011cb2 <_realloc_r+0x2e6>
 8011aa0:	eb09 0108 	add.w	r1, r9, r8
 8011aa4:	f003 0301 	and.w	r3, r3, #1
 8011aa8:	ea43 0308 	orr.w	r3, r3, r8
 8011aac:	f040 0001 	orr.w	r0, r0, #1
 8011ab0:	f8c9 3004 	str.w	r3, [r9, #4]
 8011ab4:	6048      	str	r0, [r1, #4]
 8011ab6:	6853      	ldr	r3, [r2, #4]
 8011ab8:	f043 0301 	orr.w	r3, r3, #1
 8011abc:	6053      	str	r3, [r2, #4]
 8011abe:	3108      	adds	r1, #8
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	f7ff f8df 	bl	8010c84 <_free_r>
 8011ac6:	4650      	mov	r0, sl
 8011ac8:	f7ff fe96 	bl	80117f8 <__malloc_unlock>
 8011acc:	f109 0708 	add.w	r7, r9, #8
 8011ad0:	e79d      	b.n	8011a0e <_realloc_r+0x42>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	07e8      	lsls	r0, r5, #31
 8011ad8:	f100 8084 	bmi.w	8011be4 <_realloc_r+0x218>
 8011adc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8011ae0:	eba9 0505 	sub.w	r5, r9, r5
 8011ae4:	6868      	ldr	r0, [r5, #4]
 8011ae6:	f020 0003 	bic.w	r0, r0, #3
 8011aea:	4430      	add	r0, r6
 8011aec:	2900      	cmp	r1, #0
 8011aee:	d076      	beq.n	8011bde <_realloc_r+0x212>
 8011af0:	4571      	cmp	r1, lr
 8011af2:	d150      	bne.n	8011b96 <_realloc_r+0x1ca>
 8011af4:	4403      	add	r3, r0
 8011af6:	f108 0110 	add.w	r1, r8, #16
 8011afa:	428b      	cmp	r3, r1
 8011afc:	db6f      	blt.n	8011bde <_realloc_r+0x212>
 8011afe:	462f      	mov	r7, r5
 8011b00:	68ea      	ldr	r2, [r5, #12]
 8011b02:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8011b06:	60ca      	str	r2, [r1, #12]
 8011b08:	6091      	str	r1, [r2, #8]
 8011b0a:	1f32      	subs	r2, r6, #4
 8011b0c:	2a24      	cmp	r2, #36	; 0x24
 8011b0e:	d83b      	bhi.n	8011b88 <_realloc_r+0x1bc>
 8011b10:	2a13      	cmp	r2, #19
 8011b12:	d936      	bls.n	8011b82 <_realloc_r+0x1b6>
 8011b14:	6821      	ldr	r1, [r4, #0]
 8011b16:	60a9      	str	r1, [r5, #8]
 8011b18:	6861      	ldr	r1, [r4, #4]
 8011b1a:	60e9      	str	r1, [r5, #12]
 8011b1c:	2a1b      	cmp	r2, #27
 8011b1e:	d81c      	bhi.n	8011b5a <_realloc_r+0x18e>
 8011b20:	f105 0210 	add.w	r2, r5, #16
 8011b24:	f104 0108 	add.w	r1, r4, #8
 8011b28:	6808      	ldr	r0, [r1, #0]
 8011b2a:	6010      	str	r0, [r2, #0]
 8011b2c:	6848      	ldr	r0, [r1, #4]
 8011b2e:	6050      	str	r0, [r2, #4]
 8011b30:	6889      	ldr	r1, [r1, #8]
 8011b32:	6091      	str	r1, [r2, #8]
 8011b34:	eb05 0208 	add.w	r2, r5, r8
 8011b38:	eba3 0308 	sub.w	r3, r3, r8
 8011b3c:	f043 0301 	orr.w	r3, r3, #1
 8011b40:	f8cb 2008 	str.w	r2, [fp, #8]
 8011b44:	6053      	str	r3, [r2, #4]
 8011b46:	686b      	ldr	r3, [r5, #4]
 8011b48:	f003 0301 	and.w	r3, r3, #1
 8011b4c:	ea43 0308 	orr.w	r3, r3, r8
 8011b50:	606b      	str	r3, [r5, #4]
 8011b52:	4650      	mov	r0, sl
 8011b54:	f7ff fe50 	bl	80117f8 <__malloc_unlock>
 8011b58:	e759      	b.n	8011a0e <_realloc_r+0x42>
 8011b5a:	68a1      	ldr	r1, [r4, #8]
 8011b5c:	6129      	str	r1, [r5, #16]
 8011b5e:	68e1      	ldr	r1, [r4, #12]
 8011b60:	6169      	str	r1, [r5, #20]
 8011b62:	2a24      	cmp	r2, #36	; 0x24
 8011b64:	bf01      	itttt	eq
 8011b66:	6922      	ldreq	r2, [r4, #16]
 8011b68:	61aa      	streq	r2, [r5, #24]
 8011b6a:	6960      	ldreq	r0, [r4, #20]
 8011b6c:	61e8      	streq	r0, [r5, #28]
 8011b6e:	bf19      	ittee	ne
 8011b70:	f105 0218 	addne.w	r2, r5, #24
 8011b74:	f104 0110 	addne.w	r1, r4, #16
 8011b78:	f105 0220 	addeq.w	r2, r5, #32
 8011b7c:	f104 0118 	addeq.w	r1, r4, #24
 8011b80:	e7d2      	b.n	8011b28 <_realloc_r+0x15c>
 8011b82:	463a      	mov	r2, r7
 8011b84:	4621      	mov	r1, r4
 8011b86:	e7cf      	b.n	8011b28 <_realloc_r+0x15c>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	4638      	mov	r0, r7
 8011b8c:	9301      	str	r3, [sp, #4]
 8011b8e:	f7ff fe0b 	bl	80117a8 <memmove>
 8011b92:	9b01      	ldr	r3, [sp, #4]
 8011b94:	e7ce      	b.n	8011b34 <_realloc_r+0x168>
 8011b96:	18c7      	adds	r7, r0, r3
 8011b98:	45b8      	cmp	r8, r7
 8011b9a:	dc20      	bgt.n	8011bde <_realloc_r+0x212>
 8011b9c:	68cb      	ldr	r3, [r1, #12]
 8011b9e:	688a      	ldr	r2, [r1, #8]
 8011ba0:	60d3      	str	r3, [r2, #12]
 8011ba2:	609a      	str	r2, [r3, #8]
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	68eb      	ldr	r3, [r5, #12]
 8011ba8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011bac:	60d3      	str	r3, [r2, #12]
 8011bae:	609a      	str	r2, [r3, #8]
 8011bb0:	1f32      	subs	r2, r6, #4
 8011bb2:	2a24      	cmp	r2, #36	; 0x24
 8011bb4:	d842      	bhi.n	8011c3c <_realloc_r+0x270>
 8011bb6:	2a13      	cmp	r2, #19
 8011bb8:	d93e      	bls.n	8011c38 <_realloc_r+0x26c>
 8011bba:	6823      	ldr	r3, [r4, #0]
 8011bbc:	60ab      	str	r3, [r5, #8]
 8011bbe:	6863      	ldr	r3, [r4, #4]
 8011bc0:	60eb      	str	r3, [r5, #12]
 8011bc2:	2a1b      	cmp	r2, #27
 8011bc4:	d824      	bhi.n	8011c10 <_realloc_r+0x244>
 8011bc6:	f105 0010 	add.w	r0, r5, #16
 8011bca:	f104 0308 	add.w	r3, r4, #8
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	6002      	str	r2, [r0, #0]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	6042      	str	r2, [r0, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	6083      	str	r3, [r0, #8]
 8011bda:	46a9      	mov	r9, r5
 8011bdc:	e757      	b.n	8011a8e <_realloc_r+0xc2>
 8011bde:	4580      	cmp	r8, r0
 8011be0:	4607      	mov	r7, r0
 8011be2:	dddf      	ble.n	8011ba4 <_realloc_r+0x1d8>
 8011be4:	4611      	mov	r1, r2
 8011be6:	4650      	mov	r0, sl
 8011be8:	f7ff fba4 	bl	8011334 <_malloc_r>
 8011bec:	4607      	mov	r7, r0
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d0af      	beq.n	8011b52 <_realloc_r+0x186>
 8011bf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011bf6:	f023 0301 	bic.w	r3, r3, #1
 8011bfa:	f1a0 0208 	sub.w	r2, r0, #8
 8011bfe:	444b      	add	r3, r9
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d11f      	bne.n	8011c44 <_realloc_r+0x278>
 8011c04:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011c08:	f027 0703 	bic.w	r7, r7, #3
 8011c0c:	4437      	add	r7, r6
 8011c0e:	e73e      	b.n	8011a8e <_realloc_r+0xc2>
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	612b      	str	r3, [r5, #16]
 8011c14:	68e3      	ldr	r3, [r4, #12]
 8011c16:	616b      	str	r3, [r5, #20]
 8011c18:	2a24      	cmp	r2, #36	; 0x24
 8011c1a:	bf01      	itttt	eq
 8011c1c:	6923      	ldreq	r3, [r4, #16]
 8011c1e:	61ab      	streq	r3, [r5, #24]
 8011c20:	6962      	ldreq	r2, [r4, #20]
 8011c22:	61ea      	streq	r2, [r5, #28]
 8011c24:	bf19      	ittee	ne
 8011c26:	f105 0018 	addne.w	r0, r5, #24
 8011c2a:	f104 0310 	addne.w	r3, r4, #16
 8011c2e:	f105 0020 	addeq.w	r0, r5, #32
 8011c32:	f104 0318 	addeq.w	r3, r4, #24
 8011c36:	e7ca      	b.n	8011bce <_realloc_r+0x202>
 8011c38:	4623      	mov	r3, r4
 8011c3a:	e7c8      	b.n	8011bce <_realloc_r+0x202>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	f7ff fdb3 	bl	80117a8 <memmove>
 8011c42:	e7ca      	b.n	8011bda <_realloc_r+0x20e>
 8011c44:	1f32      	subs	r2, r6, #4
 8011c46:	2a24      	cmp	r2, #36	; 0x24
 8011c48:	d82d      	bhi.n	8011ca6 <_realloc_r+0x2da>
 8011c4a:	2a13      	cmp	r2, #19
 8011c4c:	d928      	bls.n	8011ca0 <_realloc_r+0x2d4>
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	6003      	str	r3, [r0, #0]
 8011c52:	6863      	ldr	r3, [r4, #4]
 8011c54:	6043      	str	r3, [r0, #4]
 8011c56:	2a1b      	cmp	r2, #27
 8011c58:	d80e      	bhi.n	8011c78 <_realloc_r+0x2ac>
 8011c5a:	f100 0308 	add.w	r3, r0, #8
 8011c5e:	f104 0208 	add.w	r2, r4, #8
 8011c62:	6811      	ldr	r1, [r2, #0]
 8011c64:	6019      	str	r1, [r3, #0]
 8011c66:	6851      	ldr	r1, [r2, #4]
 8011c68:	6059      	str	r1, [r3, #4]
 8011c6a:	6892      	ldr	r2, [r2, #8]
 8011c6c:	609a      	str	r2, [r3, #8]
 8011c6e:	4621      	mov	r1, r4
 8011c70:	4650      	mov	r0, sl
 8011c72:	f7ff f807 	bl	8010c84 <_free_r>
 8011c76:	e76c      	b.n	8011b52 <_realloc_r+0x186>
 8011c78:	68a3      	ldr	r3, [r4, #8]
 8011c7a:	6083      	str	r3, [r0, #8]
 8011c7c:	68e3      	ldr	r3, [r4, #12]
 8011c7e:	60c3      	str	r3, [r0, #12]
 8011c80:	2a24      	cmp	r2, #36	; 0x24
 8011c82:	bf01      	itttt	eq
 8011c84:	6923      	ldreq	r3, [r4, #16]
 8011c86:	6103      	streq	r3, [r0, #16]
 8011c88:	6961      	ldreq	r1, [r4, #20]
 8011c8a:	6141      	streq	r1, [r0, #20]
 8011c8c:	bf19      	ittee	ne
 8011c8e:	f100 0310 	addne.w	r3, r0, #16
 8011c92:	f104 0210 	addne.w	r2, r4, #16
 8011c96:	f100 0318 	addeq.w	r3, r0, #24
 8011c9a:	f104 0218 	addeq.w	r2, r4, #24
 8011c9e:	e7e0      	b.n	8011c62 <_realloc_r+0x296>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	4622      	mov	r2, r4
 8011ca4:	e7dd      	b.n	8011c62 <_realloc_r+0x296>
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	f7ff fd7e 	bl	80117a8 <memmove>
 8011cac:	e7df      	b.n	8011c6e <_realloc_r+0x2a2>
 8011cae:	4637      	mov	r7, r6
 8011cb0:	e6ed      	b.n	8011a8e <_realloc_r+0xc2>
 8011cb2:	f003 0301 	and.w	r3, r3, #1
 8011cb6:	431f      	orrs	r7, r3
 8011cb8:	f8c9 7004 	str.w	r7, [r9, #4]
 8011cbc:	6853      	ldr	r3, [r2, #4]
 8011cbe:	f043 0301 	orr.w	r3, r3, #1
 8011cc2:	6053      	str	r3, [r2, #4]
 8011cc4:	e6ff      	b.n	8011ac6 <_realloc_r+0xfa>
 8011cc6:	bf00      	nop
 8011cc8:	200002b0 	.word	0x200002b0

08011ccc <_sbrk_r>:
 8011ccc:	b538      	push	{r3, r4, r5, lr}
 8011cce:	4c06      	ldr	r4, [pc, #24]	; (8011ce8 <_sbrk_r+0x1c>)
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	4608      	mov	r0, r1
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	f7fc fecc 	bl	800ea74 <_sbrk>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <_sbrk_r+0x1a>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	b103      	cbz	r3, 8011ce6 <_sbrk_r+0x1a>
 8011ce4:	602b      	str	r3, [r5, #0]
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	20001fc8 	.word	0x20001fc8

08011cec <_raise_r>:
 8011cec:	291f      	cmp	r1, #31
 8011cee:	b538      	push	{r3, r4, r5, lr}
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	460d      	mov	r5, r1
 8011cf4:	d904      	bls.n	8011d00 <_raise_r+0x14>
 8011cf6:	2316      	movs	r3, #22
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d02:	b112      	cbz	r2, 8011d0a <_raise_r+0x1e>
 8011d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d08:	b94b      	cbnz	r3, 8011d1e <_raise_r+0x32>
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 f830 	bl	8011d70 <_getpid_r>
 8011d10:	462a      	mov	r2, r5
 8011d12:	4601      	mov	r1, r0
 8011d14:	4620      	mov	r0, r4
 8011d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d1a:	f000 b817 	b.w	8011d4c <_kill_r>
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d00a      	beq.n	8011d38 <_raise_r+0x4c>
 8011d22:	1c59      	adds	r1, r3, #1
 8011d24:	d103      	bne.n	8011d2e <_raise_r+0x42>
 8011d26:	2316      	movs	r3, #22
 8011d28:	6003      	str	r3, [r0, #0]
 8011d2a:	2001      	movs	r0, #1
 8011d2c:	bd38      	pop	{r3, r4, r5, pc}
 8011d2e:	2400      	movs	r4, #0
 8011d30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d34:	4628      	mov	r0, r5
 8011d36:	4798      	blx	r3
 8011d38:	2000      	movs	r0, #0
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}

08011d3c <raise>:
 8011d3c:	4b02      	ldr	r3, [pc, #8]	; (8011d48 <raise+0xc>)
 8011d3e:	4601      	mov	r1, r0
 8011d40:	6818      	ldr	r0, [r3, #0]
 8011d42:	f7ff bfd3 	b.w	8011cec <_raise_r>
 8011d46:	bf00      	nop
 8011d48:	20000050 	.word	0x20000050

08011d4c <_kill_r>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4c07      	ldr	r4, [pc, #28]	; (8011d6c <_kill_r+0x20>)
 8011d50:	2300      	movs	r3, #0
 8011d52:	4605      	mov	r5, r0
 8011d54:	4608      	mov	r0, r1
 8011d56:	4611      	mov	r1, r2
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	f7fc fe61 	bl	800ea20 <_kill>
 8011d5e:	1c43      	adds	r3, r0, #1
 8011d60:	d102      	bne.n	8011d68 <_kill_r+0x1c>
 8011d62:	6823      	ldr	r3, [r4, #0]
 8011d64:	b103      	cbz	r3, 8011d68 <_kill_r+0x1c>
 8011d66:	602b      	str	r3, [r5, #0]
 8011d68:	bd38      	pop	{r3, r4, r5, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20001fc8 	.word	0x20001fc8

08011d70 <_getpid_r>:
 8011d70:	f7fc be54 	b.w	800ea1c <_getpid>

08011d74 <sprintf>:
 8011d74:	b40e      	push	{r1, r2, r3}
 8011d76:	b500      	push	{lr}
 8011d78:	b09c      	sub	sp, #112	; 0x70
 8011d7a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8011d80:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011d84:	9002      	str	r0, [sp, #8]
 8011d86:	9006      	str	r0, [sp, #24]
 8011d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011d8c:	480a      	ldr	r0, [pc, #40]	; (8011db8 <sprintf+0x44>)
 8011d8e:	9104      	str	r1, [sp, #16]
 8011d90:	9107      	str	r1, [sp, #28]
 8011d92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d9a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011d9e:	6800      	ldr	r0, [r0, #0]
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	a902      	add	r1, sp, #8
 8011da4:	f000 fa50 	bl	8012248 <_svfprintf_r>
 8011da8:	9b02      	ldr	r3, [sp, #8]
 8011daa:	2200      	movs	r2, #0
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	b01c      	add	sp, #112	; 0x70
 8011db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db4:	b003      	add	sp, #12
 8011db6:	4770      	bx	lr
 8011db8:	20000050 	.word	0x20000050

08011dbc <__sread>:
 8011dbc:	b510      	push	{r4, lr}
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc4:	f003 fdf6 	bl	80159b4 <_read_r>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	bfab      	itete	ge
 8011dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011dce:	89a3      	ldrhlt	r3, [r4, #12]
 8011dd0:	181b      	addge	r3, r3, r0
 8011dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011dd6:	bfac      	ite	ge
 8011dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011dda:	81a3      	strhlt	r3, [r4, #12]
 8011ddc:	bd10      	pop	{r4, pc}

08011dde <__swrite>:
 8011dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de2:	461f      	mov	r7, r3
 8011de4:	898b      	ldrh	r3, [r1, #12]
 8011de6:	05db      	lsls	r3, r3, #23
 8011de8:	4605      	mov	r5, r0
 8011dea:	460c      	mov	r4, r1
 8011dec:	4616      	mov	r6, r2
 8011dee:	d505      	bpl.n	8011dfc <__swrite+0x1e>
 8011df0:	2302      	movs	r3, #2
 8011df2:	2200      	movs	r2, #0
 8011df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df8:	f003 fafa 	bl	80153f0 <_lseek_r>
 8011dfc:	89a3      	ldrh	r3, [r4, #12]
 8011dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e06:	81a3      	strh	r3, [r4, #12]
 8011e08:	4632      	mov	r2, r6
 8011e0a:	463b      	mov	r3, r7
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e12:	f002 bb01 	b.w	8014418 <_write_r>

08011e16 <__sseek>:
 8011e16:	b510      	push	{r4, lr}
 8011e18:	460c      	mov	r4, r1
 8011e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e1e:	f003 fae7 	bl	80153f0 <_lseek_r>
 8011e22:	1c43      	adds	r3, r0, #1
 8011e24:	89a3      	ldrh	r3, [r4, #12]
 8011e26:	bf15      	itete	ne
 8011e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8011e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011e32:	81a3      	strheq	r3, [r4, #12]
 8011e34:	bf18      	it	ne
 8011e36:	81a3      	strhne	r3, [r4, #12]
 8011e38:	bd10      	pop	{r4, pc}

08011e3a <__sclose>:
 8011e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e3e:	f002 bbe1 	b.w	8014604 <_close_r>
	...

08011e44 <_strerror_r>:
 8011e44:	b510      	push	{r4, lr}
 8011e46:	4604      	mov	r4, r0
 8011e48:	4608      	mov	r0, r1
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	288e      	cmp	r0, #142	; 0x8e
 8011e4e:	f200 812f 	bhi.w	80120b0 <_strerror_r+0x26c>
 8011e52:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011e56:	0138      	.short	0x0138
 8011e58:	0091008f 	.word	0x0091008f
 8011e5c:	00950093 	.word	0x00950093
 8011e60:	00990097 	.word	0x00990097
 8011e64:	009d009b 	.word	0x009d009b
 8011e68:	00a300a1 	.word	0x00a300a1
 8011e6c:	00a900a7 	.word	0x00a900a7
 8011e70:	00ad00ab 	.word	0x00ad00ab
 8011e74:	00af012d 	.word	0x00af012d
 8011e78:	00b300b1 	.word	0x00b300b1
 8011e7c:	00b700b5 	.word	0x00b700b5
 8011e80:	00bf00bd 	.word	0x00bf00bd
 8011e84:	00c700c5 	.word	0x00c700c5
 8011e88:	00cb00c9 	.word	0x00cb00c9
 8011e8c:	00d100cd 	.word	0x00d100cd
 8011e90:	00d700d5 	.word	0x00d700d5
 8011e94:	00db00d9 	.word	0x00db00d9
 8011e98:	00df00dd 	.word	0x00df00dd
 8011e9c:	00e300e1 	.word	0x00e300e1
 8011ea0:	012d012d 	.word	0x012d012d
 8011ea4:	012d012d 	.word	0x012d012d
 8011ea8:	012d012d 	.word	0x012d012d
 8011eac:	012d012d 	.word	0x012d012d
 8011eb0:	00eb00e7 	.word	0x00eb00e7
 8011eb4:	012d012d 	.word	0x012d012d
 8011eb8:	012d012d 	.word	0x012d012d
 8011ebc:	012d012d 	.word	0x012d012d
 8011ec0:	012d012d 	.word	0x012d012d
 8011ec4:	012d012d 	.word	0x012d012d
 8011ec8:	012d012d 	.word	0x012d012d
 8011ecc:	00ed012d 	.word	0x00ed012d
 8011ed0:	00ef0107 	.word	0x00ef0107
 8011ed4:	012d00f1 	.word	0x012d00f1
 8011ed8:	012d012d 	.word	0x012d012d
 8011edc:	012d00f3 	.word	0x012d00f3
 8011ee0:	012d012d 	.word	0x012d012d
 8011ee4:	012d00f5 	.word	0x012d00f5
 8011ee8:	00f9012d 	.word	0x00f9012d
 8011eec:	012d012d 	.word	0x012d012d
 8011ef0:	012d00fb 	.word	0x012d00fb
 8011ef4:	012d012d 	.word	0x012d012d
 8011ef8:	012d012d 	.word	0x012d012d
 8011efc:	012d012d 	.word	0x012d012d
 8011f00:	012d012d 	.word	0x012d012d
 8011f04:	00fd012d 	.word	0x00fd012d
 8011f08:	00ff012d 	.word	0x00ff012d
 8011f0c:	01030101 	.word	0x01030101
 8011f10:	012d012d 	.word	0x012d012d
 8011f14:	012d0125 	.word	0x012d0125
 8011f18:	012d012d 	.word	0x012d012d
 8011f1c:	012d012d 	.word	0x012d012d
 8011f20:	012d012d 	.word	0x012d012d
 8011f24:	0113012d 	.word	0x0113012d
 8011f28:	01090105 	.word	0x01090105
 8011f2c:	010d010b 	.word	0x010d010b
 8011f30:	012d010f 	.word	0x012d010f
 8011f34:	01150111 	.word	0x01150111
 8011f38:	00e90119 	.word	0x00e90119
 8011f3c:	012b00c1 	.word	0x012b00c1
 8011f40:	00cf00b9 	.word	0x00cf00b9
 8011f44:	009f00bb 	.word	0x009f00bb
 8011f48:	012900a5 	.word	0x012900a5
 8011f4c:	012d00f7 	.word	0x012d00f7
 8011f50:	00c30117 	.word	0x00c30117
 8011f54:	011b011d 	.word	0x011b011d
 8011f58:	012d012d 	.word	0x012d012d
 8011f5c:	012d012d 	.word	0x012d012d
 8011f60:	00d3012d 	.word	0x00d3012d
 8011f64:	012d012d 	.word	0x012d012d
 8011f68:	00e5012d 	.word	0x00e5012d
 8011f6c:	011f0127 	.word	0x011f0127
 8011f70:	01230121 	.word	0x01230121
 8011f74:	4855      	ldr	r0, [pc, #340]	; (80120cc <_strerror_r+0x288>)
 8011f76:	bd10      	pop	{r4, pc}
 8011f78:	4855      	ldr	r0, [pc, #340]	; (80120d0 <_strerror_r+0x28c>)
 8011f7a:	bd10      	pop	{r4, pc}
 8011f7c:	4855      	ldr	r0, [pc, #340]	; (80120d4 <_strerror_r+0x290>)
 8011f7e:	bd10      	pop	{r4, pc}
 8011f80:	4855      	ldr	r0, [pc, #340]	; (80120d8 <_strerror_r+0x294>)
 8011f82:	bd10      	pop	{r4, pc}
 8011f84:	4855      	ldr	r0, [pc, #340]	; (80120dc <_strerror_r+0x298>)
 8011f86:	bd10      	pop	{r4, pc}
 8011f88:	4855      	ldr	r0, [pc, #340]	; (80120e0 <_strerror_r+0x29c>)
 8011f8a:	bd10      	pop	{r4, pc}
 8011f8c:	4855      	ldr	r0, [pc, #340]	; (80120e4 <_strerror_r+0x2a0>)
 8011f8e:	bd10      	pop	{r4, pc}
 8011f90:	4855      	ldr	r0, [pc, #340]	; (80120e8 <_strerror_r+0x2a4>)
 8011f92:	bd10      	pop	{r4, pc}
 8011f94:	4855      	ldr	r0, [pc, #340]	; (80120ec <_strerror_r+0x2a8>)
 8011f96:	bd10      	pop	{r4, pc}
 8011f98:	4855      	ldr	r0, [pc, #340]	; (80120f0 <_strerror_r+0x2ac>)
 8011f9a:	bd10      	pop	{r4, pc}
 8011f9c:	4855      	ldr	r0, [pc, #340]	; (80120f4 <_strerror_r+0x2b0>)
 8011f9e:	bd10      	pop	{r4, pc}
 8011fa0:	4855      	ldr	r0, [pc, #340]	; (80120f8 <_strerror_r+0x2b4>)
 8011fa2:	bd10      	pop	{r4, pc}
 8011fa4:	4855      	ldr	r0, [pc, #340]	; (80120fc <_strerror_r+0x2b8>)
 8011fa6:	bd10      	pop	{r4, pc}
 8011fa8:	4855      	ldr	r0, [pc, #340]	; (8012100 <_strerror_r+0x2bc>)
 8011faa:	bd10      	pop	{r4, pc}
 8011fac:	4855      	ldr	r0, [pc, #340]	; (8012104 <_strerror_r+0x2c0>)
 8011fae:	bd10      	pop	{r4, pc}
 8011fb0:	4855      	ldr	r0, [pc, #340]	; (8012108 <_strerror_r+0x2c4>)
 8011fb2:	bd10      	pop	{r4, pc}
 8011fb4:	4855      	ldr	r0, [pc, #340]	; (801210c <_strerror_r+0x2c8>)
 8011fb6:	bd10      	pop	{r4, pc}
 8011fb8:	4855      	ldr	r0, [pc, #340]	; (8012110 <_strerror_r+0x2cc>)
 8011fba:	bd10      	pop	{r4, pc}
 8011fbc:	4855      	ldr	r0, [pc, #340]	; (8012114 <_strerror_r+0x2d0>)
 8011fbe:	bd10      	pop	{r4, pc}
 8011fc0:	4855      	ldr	r0, [pc, #340]	; (8012118 <_strerror_r+0x2d4>)
 8011fc2:	bd10      	pop	{r4, pc}
 8011fc4:	4855      	ldr	r0, [pc, #340]	; (801211c <_strerror_r+0x2d8>)
 8011fc6:	bd10      	pop	{r4, pc}
 8011fc8:	4855      	ldr	r0, [pc, #340]	; (8012120 <_strerror_r+0x2dc>)
 8011fca:	bd10      	pop	{r4, pc}
 8011fcc:	4855      	ldr	r0, [pc, #340]	; (8012124 <_strerror_r+0x2e0>)
 8011fce:	bd10      	pop	{r4, pc}
 8011fd0:	4855      	ldr	r0, [pc, #340]	; (8012128 <_strerror_r+0x2e4>)
 8011fd2:	bd10      	pop	{r4, pc}
 8011fd4:	4855      	ldr	r0, [pc, #340]	; (801212c <_strerror_r+0x2e8>)
 8011fd6:	bd10      	pop	{r4, pc}
 8011fd8:	4855      	ldr	r0, [pc, #340]	; (8012130 <_strerror_r+0x2ec>)
 8011fda:	bd10      	pop	{r4, pc}
 8011fdc:	4855      	ldr	r0, [pc, #340]	; (8012134 <_strerror_r+0x2f0>)
 8011fde:	bd10      	pop	{r4, pc}
 8011fe0:	4855      	ldr	r0, [pc, #340]	; (8012138 <_strerror_r+0x2f4>)
 8011fe2:	bd10      	pop	{r4, pc}
 8011fe4:	4855      	ldr	r0, [pc, #340]	; (801213c <_strerror_r+0x2f8>)
 8011fe6:	bd10      	pop	{r4, pc}
 8011fe8:	4855      	ldr	r0, [pc, #340]	; (8012140 <_strerror_r+0x2fc>)
 8011fea:	bd10      	pop	{r4, pc}
 8011fec:	4855      	ldr	r0, [pc, #340]	; (8012144 <_strerror_r+0x300>)
 8011fee:	bd10      	pop	{r4, pc}
 8011ff0:	4855      	ldr	r0, [pc, #340]	; (8012148 <_strerror_r+0x304>)
 8011ff2:	bd10      	pop	{r4, pc}
 8011ff4:	4855      	ldr	r0, [pc, #340]	; (801214c <_strerror_r+0x308>)
 8011ff6:	bd10      	pop	{r4, pc}
 8011ff8:	4855      	ldr	r0, [pc, #340]	; (8012150 <_strerror_r+0x30c>)
 8011ffa:	bd10      	pop	{r4, pc}
 8011ffc:	4855      	ldr	r0, [pc, #340]	; (8012154 <_strerror_r+0x310>)
 8011ffe:	bd10      	pop	{r4, pc}
 8012000:	4855      	ldr	r0, [pc, #340]	; (8012158 <_strerror_r+0x314>)
 8012002:	bd10      	pop	{r4, pc}
 8012004:	4855      	ldr	r0, [pc, #340]	; (801215c <_strerror_r+0x318>)
 8012006:	bd10      	pop	{r4, pc}
 8012008:	4855      	ldr	r0, [pc, #340]	; (8012160 <_strerror_r+0x31c>)
 801200a:	bd10      	pop	{r4, pc}
 801200c:	4855      	ldr	r0, [pc, #340]	; (8012164 <_strerror_r+0x320>)
 801200e:	bd10      	pop	{r4, pc}
 8012010:	4855      	ldr	r0, [pc, #340]	; (8012168 <_strerror_r+0x324>)
 8012012:	bd10      	pop	{r4, pc}
 8012014:	4855      	ldr	r0, [pc, #340]	; (801216c <_strerror_r+0x328>)
 8012016:	bd10      	pop	{r4, pc}
 8012018:	4855      	ldr	r0, [pc, #340]	; (8012170 <_strerror_r+0x32c>)
 801201a:	bd10      	pop	{r4, pc}
 801201c:	4855      	ldr	r0, [pc, #340]	; (8012174 <_strerror_r+0x330>)
 801201e:	bd10      	pop	{r4, pc}
 8012020:	4855      	ldr	r0, [pc, #340]	; (8012178 <_strerror_r+0x334>)
 8012022:	bd10      	pop	{r4, pc}
 8012024:	4855      	ldr	r0, [pc, #340]	; (801217c <_strerror_r+0x338>)
 8012026:	bd10      	pop	{r4, pc}
 8012028:	4855      	ldr	r0, [pc, #340]	; (8012180 <_strerror_r+0x33c>)
 801202a:	bd10      	pop	{r4, pc}
 801202c:	4855      	ldr	r0, [pc, #340]	; (8012184 <_strerror_r+0x340>)
 801202e:	bd10      	pop	{r4, pc}
 8012030:	4855      	ldr	r0, [pc, #340]	; (8012188 <_strerror_r+0x344>)
 8012032:	bd10      	pop	{r4, pc}
 8012034:	4855      	ldr	r0, [pc, #340]	; (801218c <_strerror_r+0x348>)
 8012036:	bd10      	pop	{r4, pc}
 8012038:	4855      	ldr	r0, [pc, #340]	; (8012190 <_strerror_r+0x34c>)
 801203a:	bd10      	pop	{r4, pc}
 801203c:	4855      	ldr	r0, [pc, #340]	; (8012194 <_strerror_r+0x350>)
 801203e:	bd10      	pop	{r4, pc}
 8012040:	4855      	ldr	r0, [pc, #340]	; (8012198 <_strerror_r+0x354>)
 8012042:	bd10      	pop	{r4, pc}
 8012044:	4855      	ldr	r0, [pc, #340]	; (801219c <_strerror_r+0x358>)
 8012046:	bd10      	pop	{r4, pc}
 8012048:	4855      	ldr	r0, [pc, #340]	; (80121a0 <_strerror_r+0x35c>)
 801204a:	bd10      	pop	{r4, pc}
 801204c:	4855      	ldr	r0, [pc, #340]	; (80121a4 <_strerror_r+0x360>)
 801204e:	bd10      	pop	{r4, pc}
 8012050:	4855      	ldr	r0, [pc, #340]	; (80121a8 <_strerror_r+0x364>)
 8012052:	bd10      	pop	{r4, pc}
 8012054:	4855      	ldr	r0, [pc, #340]	; (80121ac <_strerror_r+0x368>)
 8012056:	bd10      	pop	{r4, pc}
 8012058:	4855      	ldr	r0, [pc, #340]	; (80121b0 <_strerror_r+0x36c>)
 801205a:	bd10      	pop	{r4, pc}
 801205c:	4855      	ldr	r0, [pc, #340]	; (80121b4 <_strerror_r+0x370>)
 801205e:	bd10      	pop	{r4, pc}
 8012060:	4855      	ldr	r0, [pc, #340]	; (80121b8 <_strerror_r+0x374>)
 8012062:	bd10      	pop	{r4, pc}
 8012064:	4855      	ldr	r0, [pc, #340]	; (80121bc <_strerror_r+0x378>)
 8012066:	bd10      	pop	{r4, pc}
 8012068:	4855      	ldr	r0, [pc, #340]	; (80121c0 <_strerror_r+0x37c>)
 801206a:	bd10      	pop	{r4, pc}
 801206c:	4855      	ldr	r0, [pc, #340]	; (80121c4 <_strerror_r+0x380>)
 801206e:	bd10      	pop	{r4, pc}
 8012070:	4855      	ldr	r0, [pc, #340]	; (80121c8 <_strerror_r+0x384>)
 8012072:	bd10      	pop	{r4, pc}
 8012074:	4855      	ldr	r0, [pc, #340]	; (80121cc <_strerror_r+0x388>)
 8012076:	bd10      	pop	{r4, pc}
 8012078:	4855      	ldr	r0, [pc, #340]	; (80121d0 <_strerror_r+0x38c>)
 801207a:	bd10      	pop	{r4, pc}
 801207c:	4855      	ldr	r0, [pc, #340]	; (80121d4 <_strerror_r+0x390>)
 801207e:	bd10      	pop	{r4, pc}
 8012080:	4855      	ldr	r0, [pc, #340]	; (80121d8 <_strerror_r+0x394>)
 8012082:	bd10      	pop	{r4, pc}
 8012084:	4855      	ldr	r0, [pc, #340]	; (80121dc <_strerror_r+0x398>)
 8012086:	bd10      	pop	{r4, pc}
 8012088:	4855      	ldr	r0, [pc, #340]	; (80121e0 <_strerror_r+0x39c>)
 801208a:	bd10      	pop	{r4, pc}
 801208c:	4855      	ldr	r0, [pc, #340]	; (80121e4 <_strerror_r+0x3a0>)
 801208e:	bd10      	pop	{r4, pc}
 8012090:	4855      	ldr	r0, [pc, #340]	; (80121e8 <_strerror_r+0x3a4>)
 8012092:	bd10      	pop	{r4, pc}
 8012094:	4855      	ldr	r0, [pc, #340]	; (80121ec <_strerror_r+0x3a8>)
 8012096:	bd10      	pop	{r4, pc}
 8012098:	4855      	ldr	r0, [pc, #340]	; (80121f0 <_strerror_r+0x3ac>)
 801209a:	bd10      	pop	{r4, pc}
 801209c:	4855      	ldr	r0, [pc, #340]	; (80121f4 <_strerror_r+0x3b0>)
 801209e:	bd10      	pop	{r4, pc}
 80120a0:	4855      	ldr	r0, [pc, #340]	; (80121f8 <_strerror_r+0x3b4>)
 80120a2:	bd10      	pop	{r4, pc}
 80120a4:	4855      	ldr	r0, [pc, #340]	; (80121fc <_strerror_r+0x3b8>)
 80120a6:	bd10      	pop	{r4, pc}
 80120a8:	4855      	ldr	r0, [pc, #340]	; (8012200 <_strerror_r+0x3bc>)
 80120aa:	bd10      	pop	{r4, pc}
 80120ac:	4855      	ldr	r0, [pc, #340]	; (8012204 <_strerror_r+0x3c0>)
 80120ae:	bd10      	pop	{r4, pc}
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	bf14      	ite	ne
 80120b4:	461a      	movne	r2, r3
 80120b6:	4622      	moveq	r2, r4
 80120b8:	f001 f89a 	bl	80131f0 <_user_strerror>
 80120bc:	4b52      	ldr	r3, [pc, #328]	; (8012208 <_strerror_r+0x3c4>)
 80120be:	2800      	cmp	r0, #0
 80120c0:	bf08      	it	eq
 80120c2:	4618      	moveq	r0, r3
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	4851      	ldr	r0, [pc, #324]	; (801220c <_strerror_r+0x3c8>)
 80120c8:	bd10      	pop	{r4, pc}
 80120ca:	bf00      	nop
 80120cc:	080176f8 	.word	0x080176f8
 80120d0:	08017702 	.word	0x08017702
 80120d4:	0801771c 	.word	0x0801771c
 80120d8:	0801772c 	.word	0x0801772c
 80120dc:	08017744 	.word	0x08017744
 80120e0:	0801774e 	.word	0x0801774e
 80120e4:	08017768 	.word	0x08017768
 80120e8:	0801777a 	.word	0x0801777a
 80120ec:	0801778c 	.word	0x0801778c
 80120f0:	080177a5 	.word	0x080177a5
 80120f4:	080177b5 	.word	0x080177b5
 80120f8:	080177c1 	.word	0x080177c1
 80120fc:	080177de 	.word	0x080177de
 8012100:	080177f0 	.word	0x080177f0
 8012104:	08017801 	.word	0x08017801
 8012108:	08017813 	.word	0x08017813
 801210c:	0801781f 	.word	0x0801781f
 8012110:	08017837 	.word	0x08017837
 8012114:	08017843 	.word	0x08017843
 8012118:	08017855 	.word	0x08017855
 801211c:	08017864 	.word	0x08017864
 8012120:	08017874 	.word	0x08017874
 8012124:	08017881 	.word	0x08017881
 8012128:	080178a0 	.word	0x080178a0
 801212c:	080178af 	.word	0x080178af
 8012130:	080178c0 	.word	0x080178c0
 8012134:	080178e4 	.word	0x080178e4
 8012138:	08017902 	.word	0x08017902
 801213c:	08017920 	.word	0x08017920
 8012140:	08017940 	.word	0x08017940
 8012144:	08017957 	.word	0x08017957
 8012148:	08017966 	.word	0x08017966
 801214c:	08017975 	.word	0x08017975
 8012150:	08017989 	.word	0x08017989
 8012154:	080179a1 	.word	0x080179a1
 8012158:	080179af 	.word	0x080179af
 801215c:	080179bc 	.word	0x080179bc
 8012160:	080179d2 	.word	0x080179d2
 8012164:	080179e1 	.word	0x080179e1
 8012168:	080179ed 	.word	0x080179ed
 801216c:	08017a1c 	.word	0x08017a1c
 8012170:	08017a2d 	.word	0x08017a2d
 8012174:	08017a48 	.word	0x08017a48
 8012178:	08017a5b 	.word	0x08017a5b
 801217c:	08017a71 	.word	0x08017a71
 8012180:	08017a7a 	.word	0x08017a7a
 8012184:	08017a91 	.word	0x08017a91
 8012188:	08017a99 	.word	0x08017a99
 801218c:	08017aa6 	.word	0x08017aa6
 8012190:	08017abb 	.word	0x08017abb
 8012194:	08017acf 	.word	0x08017acf
 8012198:	08017ae7 	.word	0x08017ae7
 801219c:	08017af6 	.word	0x08017af6
 80121a0:	08017b07 	.word	0x08017b07
 80121a4:	08017b1a 	.word	0x08017b1a
 80121a8:	08017b26 	.word	0x08017b26
 80121ac:	08017b3f 	.word	0x08017b3f
 80121b0:	08017b53 	.word	0x08017b53
 80121b4:	08017b6e 	.word	0x08017b6e
 80121b8:	08017b86 	.word	0x08017b86
 80121bc:	08017ba0 	.word	0x08017ba0
 80121c0:	08017ba8 	.word	0x08017ba8
 80121c4:	08017bd8 	.word	0x08017bd8
 80121c8:	08017bf7 	.word	0x08017bf7
 80121cc:	08017c16 	.word	0x08017c16
 80121d0:	08017c2d 	.word	0x08017c2d
 80121d4:	08017c40 	.word	0x08017c40
 80121d8:	08017c59 	.word	0x08017c59
 80121dc:	08017c70 	.word	0x08017c70
 80121e0:	08017c86 	.word	0x08017c86
 80121e4:	08017ca7 	.word	0x08017ca7
 80121e8:	08017cbf 	.word	0x08017cbf
 80121ec:	08017cdb 	.word	0x08017cdb
 80121f0:	08017cee 	.word	0x08017cee
 80121f4:	08017d04 	.word	0x08017d04
 80121f8:	08017d18 	.word	0x08017d18
 80121fc:	08017d3a 	.word	0x08017d3a
 8012200:	08017d60 	.word	0x08017d60
 8012204:	08017d71 	.word	0x08017d71
 8012208:	080165d1 	.word	0x080165d1
 801220c:	080176f0 	.word	0x080176f0

08012210 <strerror>:
 8012210:	4601      	mov	r1, r0
 8012212:	4803      	ldr	r0, [pc, #12]	; (8012220 <strerror+0x10>)
 8012214:	2300      	movs	r3, #0
 8012216:	461a      	mov	r2, r3
 8012218:	6800      	ldr	r0, [r0, #0]
 801221a:	f7ff be13 	b.w	8011e44 <_strerror_r>
 801221e:	bf00      	nop
 8012220:	20000050 	.word	0x20000050

08012224 <strncmp>:
 8012224:	b510      	push	{r4, lr}
 8012226:	b16a      	cbz	r2, 8012244 <strncmp+0x20>
 8012228:	3901      	subs	r1, #1
 801222a:	1884      	adds	r4, r0, r2
 801222c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012230:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012234:	4293      	cmp	r3, r2
 8012236:	d103      	bne.n	8012240 <strncmp+0x1c>
 8012238:	42a0      	cmp	r0, r4
 801223a:	d001      	beq.n	8012240 <strncmp+0x1c>
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1f5      	bne.n	801222c <strncmp+0x8>
 8012240:	1a98      	subs	r0, r3, r2
 8012242:	bd10      	pop	{r4, pc}
 8012244:	4610      	mov	r0, r2
 8012246:	bd10      	pop	{r4, pc}

08012248 <_svfprintf_r>:
 8012248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	b0bd      	sub	sp, #244	; 0xf4
 801224e:	468a      	mov	sl, r1
 8012250:	4615      	mov	r5, r2
 8012252:	461f      	mov	r7, r3
 8012254:	4683      	mov	fp, r0
 8012256:	f003 f8bd 	bl	80153d4 <_localeconv_r>
 801225a:	6803      	ldr	r3, [r0, #0]
 801225c:	930d      	str	r3, [sp, #52]	; 0x34
 801225e:	4618      	mov	r0, r3
 8012260:	f7f4 fb68 	bl	8006934 <strlen>
 8012264:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012268:	9008      	str	r0, [sp, #32]
 801226a:	061b      	lsls	r3, r3, #24
 801226c:	d518      	bpl.n	80122a0 <_svfprintf_r+0x58>
 801226e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012272:	b9ab      	cbnz	r3, 80122a0 <_svfprintf_r+0x58>
 8012274:	2140      	movs	r1, #64	; 0x40
 8012276:	4658      	mov	r0, fp
 8012278:	f7ff f85c 	bl	8011334 <_malloc_r>
 801227c:	f8ca 0000 	str.w	r0, [sl]
 8012280:	f8ca 0010 	str.w	r0, [sl, #16]
 8012284:	b948      	cbnz	r0, 801229a <_svfprintf_r+0x52>
 8012286:	230c      	movs	r3, #12
 8012288:	f8cb 3000 	str.w	r3, [fp]
 801228c:	f04f 33ff 	mov.w	r3, #4294967295
 8012290:	9309      	str	r3, [sp, #36]	; 0x24
 8012292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012294:	b03d      	add	sp, #244	; 0xf4
 8012296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229a:	2340      	movs	r3, #64	; 0x40
 801229c:	f8ca 3014 	str.w	r3, [sl, #20]
 80122a0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8012508 <_svfprintf_r+0x2c0>
 80122a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122a8:	2300      	movs	r3, #0
 80122aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80122ac:	941f      	str	r4, [sp, #124]	; 0x7c
 80122ae:	9321      	str	r3, [sp, #132]	; 0x84
 80122b0:	9320      	str	r3, [sp, #128]	; 0x80
 80122b2:	9505      	str	r5, [sp, #20]
 80122b4:	9303      	str	r3, [sp, #12]
 80122b6:	9311      	str	r3, [sp, #68]	; 0x44
 80122b8:	9310      	str	r3, [sp, #64]	; 0x40
 80122ba:	9309      	str	r3, [sp, #36]	; 0x24
 80122bc:	9d05      	ldr	r5, [sp, #20]
 80122be:	462b      	mov	r3, r5
 80122c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122c4:	b112      	cbz	r2, 80122cc <_svfprintf_r+0x84>
 80122c6:	2a25      	cmp	r2, #37	; 0x25
 80122c8:	f040 8083 	bne.w	80123d2 <_svfprintf_r+0x18a>
 80122cc:	9b05      	ldr	r3, [sp, #20]
 80122ce:	1aee      	subs	r6, r5, r3
 80122d0:	d00d      	beq.n	80122ee <_svfprintf_r+0xa6>
 80122d2:	e884 0048 	stmia.w	r4, {r3, r6}
 80122d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122d8:	4433      	add	r3, r6
 80122da:	9321      	str	r3, [sp, #132]	; 0x84
 80122dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80122de:	3301      	adds	r3, #1
 80122e0:	2b07      	cmp	r3, #7
 80122e2:	9320      	str	r3, [sp, #128]	; 0x80
 80122e4:	dc77      	bgt.n	80123d6 <_svfprintf_r+0x18e>
 80122e6:	3408      	adds	r4, #8
 80122e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ea:	4433      	add	r3, r6
 80122ec:	9309      	str	r3, [sp, #36]	; 0x24
 80122ee:	782b      	ldrb	r3, [r5, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f000 8729 	beq.w	8013148 <_svfprintf_r+0xf00>
 80122f6:	2300      	movs	r3, #0
 80122f8:	1c69      	adds	r1, r5, #1
 80122fa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80122fe:	461a      	mov	r2, r3
 8012300:	f04f 39ff 	mov.w	r9, #4294967295
 8012304:	930a      	str	r3, [sp, #40]	; 0x28
 8012306:	461d      	mov	r5, r3
 8012308:	200a      	movs	r0, #10
 801230a:	1c4e      	adds	r6, r1, #1
 801230c:	7809      	ldrb	r1, [r1, #0]
 801230e:	9605      	str	r6, [sp, #20]
 8012310:	9102      	str	r1, [sp, #8]
 8012312:	9902      	ldr	r1, [sp, #8]
 8012314:	3920      	subs	r1, #32
 8012316:	2958      	cmp	r1, #88	; 0x58
 8012318:	f200 8418 	bhi.w	8012b4c <_svfprintf_r+0x904>
 801231c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012320:	041600a6 	.word	0x041600a6
 8012324:	00ab0416 	.word	0x00ab0416
 8012328:	04160416 	.word	0x04160416
 801232c:	04160416 	.word	0x04160416
 8012330:	04160416 	.word	0x04160416
 8012334:	006500ae 	.word	0x006500ae
 8012338:	00b70416 	.word	0x00b70416
 801233c:	041600ba 	.word	0x041600ba
 8012340:	00da00d7 	.word	0x00da00d7
 8012344:	00da00da 	.word	0x00da00da
 8012348:	00da00da 	.word	0x00da00da
 801234c:	00da00da 	.word	0x00da00da
 8012350:	00da00da 	.word	0x00da00da
 8012354:	04160416 	.word	0x04160416
 8012358:	04160416 	.word	0x04160416
 801235c:	04160416 	.word	0x04160416
 8012360:	04160416 	.word	0x04160416
 8012364:	04160416 	.word	0x04160416
 8012368:	012b0115 	.word	0x012b0115
 801236c:	012b0416 	.word	0x012b0416
 8012370:	04160416 	.word	0x04160416
 8012374:	04160416 	.word	0x04160416
 8012378:	041600ed 	.word	0x041600ed
 801237c:	03400416 	.word	0x03400416
 8012380:	04160416 	.word	0x04160416
 8012384:	04160416 	.word	0x04160416
 8012388:	03a80416 	.word	0x03a80416
 801238c:	04160416 	.word	0x04160416
 8012390:	04160086 	.word	0x04160086
 8012394:	04160416 	.word	0x04160416
 8012398:	04160416 	.word	0x04160416
 801239c:	04160416 	.word	0x04160416
 80123a0:	04160416 	.word	0x04160416
 80123a4:	01070416 	.word	0x01070416
 80123a8:	012b006b 	.word	0x012b006b
 80123ac:	012b012b 	.word	0x012b012b
 80123b0:	006b00f0 	.word	0x006b00f0
 80123b4:	04160416 	.word	0x04160416
 80123b8:	041600fa 	.word	0x041600fa
 80123bc:	03420322 	.word	0x03420322
 80123c0:	01010376 	.word	0x01010376
 80123c4:	03870416 	.word	0x03870416
 80123c8:	03aa0416 	.word	0x03aa0416
 80123cc:	04160416 	.word	0x04160416
 80123d0:	03c2      	.short	0x03c2
 80123d2:	461d      	mov	r5, r3
 80123d4:	e773      	b.n	80122be <_svfprintf_r+0x76>
 80123d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80123d8:	4651      	mov	r1, sl
 80123da:	4658      	mov	r0, fp
 80123dc:	f003 fafc 	bl	80159d8 <__ssprint_r>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	f040 8692 	bne.w	801310a <_svfprintf_r+0xec2>
 80123e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80123e8:	e77e      	b.n	80122e8 <_svfprintf_r+0xa0>
 80123ea:	2301      	movs	r3, #1
 80123ec:	222b      	movs	r2, #43	; 0x2b
 80123ee:	9905      	ldr	r1, [sp, #20]
 80123f0:	e78b      	b.n	801230a <_svfprintf_r+0xc2>
 80123f2:	460f      	mov	r7, r1
 80123f4:	e7fb      	b.n	80123ee <_svfprintf_r+0x1a6>
 80123f6:	b10b      	cbz	r3, 80123fc <_svfprintf_r+0x1b4>
 80123f8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80123fc:	06ae      	lsls	r6, r5, #26
 80123fe:	f140 80aa 	bpl.w	8012556 <_svfprintf_r+0x30e>
 8012402:	3707      	adds	r7, #7
 8012404:	f027 0707 	bic.w	r7, r7, #7
 8012408:	f107 0308 	add.w	r3, r7, #8
 801240c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012410:	9304      	str	r3, [sp, #16]
 8012412:	2e00      	cmp	r6, #0
 8012414:	f177 0300 	sbcs.w	r3, r7, #0
 8012418:	da06      	bge.n	8012428 <_svfprintf_r+0x1e0>
 801241a:	4276      	negs	r6, r6
 801241c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8012420:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8012424:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012428:	2301      	movs	r3, #1
 801242a:	e2ca      	b.n	80129c2 <_svfprintf_r+0x77a>
 801242c:	b10b      	cbz	r3, 8012432 <_svfprintf_r+0x1ea>
 801242e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012432:	4b37      	ldr	r3, [pc, #220]	; (8012510 <_svfprintf_r+0x2c8>)
 8012434:	9311      	str	r3, [sp, #68]	; 0x44
 8012436:	06ab      	lsls	r3, r5, #26
 8012438:	f140 8339 	bpl.w	8012aae <_svfprintf_r+0x866>
 801243c:	3707      	adds	r7, #7
 801243e:	f027 0707 	bic.w	r7, r7, #7
 8012442:	f107 0308 	add.w	r3, r7, #8
 8012446:	e9d7 6700 	ldrd	r6, r7, [r7]
 801244a:	9304      	str	r3, [sp, #16]
 801244c:	07e8      	lsls	r0, r5, #31
 801244e:	d50b      	bpl.n	8012468 <_svfprintf_r+0x220>
 8012450:	ea56 0307 	orrs.w	r3, r6, r7
 8012454:	d008      	beq.n	8012468 <_svfprintf_r+0x220>
 8012456:	2330      	movs	r3, #48	; 0x30
 8012458:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 801245c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012460:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8012464:	f045 0502 	orr.w	r5, r5, #2
 8012468:	2302      	movs	r3, #2
 801246a:	e2a7      	b.n	80129bc <_svfprintf_r+0x774>
 801246c:	2a00      	cmp	r2, #0
 801246e:	d1be      	bne.n	80123ee <_svfprintf_r+0x1a6>
 8012470:	2301      	movs	r3, #1
 8012472:	2220      	movs	r2, #32
 8012474:	e7bb      	b.n	80123ee <_svfprintf_r+0x1a6>
 8012476:	f045 0501 	orr.w	r5, r5, #1
 801247a:	e7b8      	b.n	80123ee <_svfprintf_r+0x1a6>
 801247c:	683e      	ldr	r6, [r7, #0]
 801247e:	960a      	str	r6, [sp, #40]	; 0x28
 8012480:	2e00      	cmp	r6, #0
 8012482:	f107 0104 	add.w	r1, r7, #4
 8012486:	dab4      	bge.n	80123f2 <_svfprintf_r+0x1aa>
 8012488:	4276      	negs	r6, r6
 801248a:	960a      	str	r6, [sp, #40]	; 0x28
 801248c:	460f      	mov	r7, r1
 801248e:	f045 0504 	orr.w	r5, r5, #4
 8012492:	e7ac      	b.n	80123ee <_svfprintf_r+0x1a6>
 8012494:	9905      	ldr	r1, [sp, #20]
 8012496:	1c4e      	adds	r6, r1, #1
 8012498:	7809      	ldrb	r1, [r1, #0]
 801249a:	9102      	str	r1, [sp, #8]
 801249c:	292a      	cmp	r1, #42	; 0x2a
 801249e:	d010      	beq.n	80124c2 <_svfprintf_r+0x27a>
 80124a0:	f04f 0900 	mov.w	r9, #0
 80124a4:	9605      	str	r6, [sp, #20]
 80124a6:	9902      	ldr	r1, [sp, #8]
 80124a8:	3930      	subs	r1, #48	; 0x30
 80124aa:	2909      	cmp	r1, #9
 80124ac:	f63f af31 	bhi.w	8012312 <_svfprintf_r+0xca>
 80124b0:	fb00 1909 	mla	r9, r0, r9, r1
 80124b4:	9905      	ldr	r1, [sp, #20]
 80124b6:	460e      	mov	r6, r1
 80124b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80124bc:	9102      	str	r1, [sp, #8]
 80124be:	9605      	str	r6, [sp, #20]
 80124c0:	e7f1      	b.n	80124a6 <_svfprintf_r+0x25e>
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	9605      	str	r6, [sp, #20]
 80124c6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80124ca:	3704      	adds	r7, #4
 80124cc:	e78f      	b.n	80123ee <_svfprintf_r+0x1a6>
 80124ce:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80124d2:	e78c      	b.n	80123ee <_svfprintf_r+0x1a6>
 80124d4:	2100      	movs	r1, #0
 80124d6:	910a      	str	r1, [sp, #40]	; 0x28
 80124d8:	9902      	ldr	r1, [sp, #8]
 80124da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80124dc:	3930      	subs	r1, #48	; 0x30
 80124de:	fb00 1106 	mla	r1, r0, r6, r1
 80124e2:	910a      	str	r1, [sp, #40]	; 0x28
 80124e4:	9905      	ldr	r1, [sp, #20]
 80124e6:	460e      	mov	r6, r1
 80124e8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80124ec:	9102      	str	r1, [sp, #8]
 80124ee:	9902      	ldr	r1, [sp, #8]
 80124f0:	9605      	str	r6, [sp, #20]
 80124f2:	3930      	subs	r1, #48	; 0x30
 80124f4:	2909      	cmp	r1, #9
 80124f6:	d9ef      	bls.n	80124d8 <_svfprintf_r+0x290>
 80124f8:	e70b      	b.n	8012312 <_svfprintf_r+0xca>
 80124fa:	f045 0508 	orr.w	r5, r5, #8
 80124fe:	e776      	b.n	80123ee <_svfprintf_r+0x1a6>
 8012500:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8012504:	e773      	b.n	80123ee <_svfprintf_r+0x1a6>
 8012506:	bf00      	nop
	...
 8012510:	08017d96 	.word	0x08017d96
 8012514:	9905      	ldr	r1, [sp, #20]
 8012516:	7809      	ldrb	r1, [r1, #0]
 8012518:	296c      	cmp	r1, #108	; 0x6c
 801251a:	d105      	bne.n	8012528 <_svfprintf_r+0x2e0>
 801251c:	9905      	ldr	r1, [sp, #20]
 801251e:	3101      	adds	r1, #1
 8012520:	9105      	str	r1, [sp, #20]
 8012522:	f045 0520 	orr.w	r5, r5, #32
 8012526:	e762      	b.n	80123ee <_svfprintf_r+0x1a6>
 8012528:	f045 0510 	orr.w	r5, r5, #16
 801252c:	e75f      	b.n	80123ee <_svfprintf_r+0x1a6>
 801252e:	1d3b      	adds	r3, r7, #4
 8012530:	9304      	str	r3, [sp, #16]
 8012532:	2600      	movs	r6, #0
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801253a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801253e:	f04f 0901 	mov.w	r9, #1
 8012542:	4637      	mov	r7, r6
 8012544:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8012548:	e11b      	b.n	8012782 <_svfprintf_r+0x53a>
 801254a:	b10b      	cbz	r3, 8012550 <_svfprintf_r+0x308>
 801254c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012550:	f045 0510 	orr.w	r5, r5, #16
 8012554:	e752      	b.n	80123fc <_svfprintf_r+0x1b4>
 8012556:	f015 0f10 	tst.w	r5, #16
 801255a:	f107 0304 	add.w	r3, r7, #4
 801255e:	d003      	beq.n	8012568 <_svfprintf_r+0x320>
 8012560:	683e      	ldr	r6, [r7, #0]
 8012562:	9304      	str	r3, [sp, #16]
 8012564:	17f7      	asrs	r7, r6, #31
 8012566:	e754      	b.n	8012412 <_svfprintf_r+0x1ca>
 8012568:	683e      	ldr	r6, [r7, #0]
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012570:	bf18      	it	ne
 8012572:	b236      	sxthne	r6, r6
 8012574:	e7f6      	b.n	8012564 <_svfprintf_r+0x31c>
 8012576:	b10b      	cbz	r3, 801257c <_svfprintf_r+0x334>
 8012578:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801257c:	3707      	adds	r7, #7
 801257e:	f027 0707 	bic.w	r7, r7, #7
 8012582:	f107 0308 	add.w	r3, r7, #8
 8012586:	9304      	str	r3, [sp, #16]
 8012588:	ed97 7b00 	vldr	d7, [r7]
 801258c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012590:	9b06      	ldr	r3, [sp, #24]
 8012592:	9312      	str	r3, [sp, #72]	; 0x48
 8012594:	9b07      	ldr	r3, [sp, #28]
 8012596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801259a:	9313      	str	r3, [sp, #76]	; 0x4c
 801259c:	f04f 32ff 	mov.w	r2, #4294967295
 80125a0:	4b4a      	ldr	r3, [pc, #296]	; (80126cc <_svfprintf_r+0x484>)
 80125a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80125a6:	f7f4 fe1f 	bl	80071e8 <__aeabi_dcmpun>
 80125aa:	2800      	cmp	r0, #0
 80125ac:	f040 85d5 	bne.w	801315a <_svfprintf_r+0xf12>
 80125b0:	f04f 32ff 	mov.w	r2, #4294967295
 80125b4:	4b45      	ldr	r3, [pc, #276]	; (80126cc <_svfprintf_r+0x484>)
 80125b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80125ba:	f7f4 fdf7 	bl	80071ac <__aeabi_dcmple>
 80125be:	2800      	cmp	r0, #0
 80125c0:	f040 85cb 	bne.w	801315a <_svfprintf_r+0xf12>
 80125c4:	2200      	movs	r2, #0
 80125c6:	2300      	movs	r3, #0
 80125c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125cc:	f7f4 fde4 	bl	8007198 <__aeabi_dcmplt>
 80125d0:	b110      	cbz	r0, 80125d8 <_svfprintf_r+0x390>
 80125d2:	232d      	movs	r3, #45	; 0x2d
 80125d4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80125d8:	4b3d      	ldr	r3, [pc, #244]	; (80126d0 <_svfprintf_r+0x488>)
 80125da:	4a3e      	ldr	r2, [pc, #248]	; (80126d4 <_svfprintf_r+0x48c>)
 80125dc:	9902      	ldr	r1, [sp, #8]
 80125de:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80125e2:	2947      	cmp	r1, #71	; 0x47
 80125e4:	bfcc      	ite	gt
 80125e6:	4690      	movgt	r8, r2
 80125e8:	4698      	movle	r8, r3
 80125ea:	f04f 0903 	mov.w	r9, #3
 80125ee:	2600      	movs	r6, #0
 80125f0:	4637      	mov	r7, r6
 80125f2:	e0c6      	b.n	8012782 <_svfprintf_r+0x53a>
 80125f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80125f8:	d022      	beq.n	8012640 <_svfprintf_r+0x3f8>
 80125fa:	9b02      	ldr	r3, [sp, #8]
 80125fc:	f023 0320 	bic.w	r3, r3, #32
 8012600:	2b47      	cmp	r3, #71	; 0x47
 8012602:	d104      	bne.n	801260e <_svfprintf_r+0x3c6>
 8012604:	f1b9 0f00 	cmp.w	r9, #0
 8012608:	bf08      	it	eq
 801260a:	f04f 0901 	moveq.w	r9, #1
 801260e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8012612:	930c      	str	r3, [sp, #48]	; 0x30
 8012614:	9b07      	ldr	r3, [sp, #28]
 8012616:	2b00      	cmp	r3, #0
 8012618:	da15      	bge.n	8012646 <_svfprintf_r+0x3fe>
 801261a:	9b06      	ldr	r3, [sp, #24]
 801261c:	930e      	str	r3, [sp, #56]	; 0x38
 801261e:	9b07      	ldr	r3, [sp, #28]
 8012620:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012624:	930f      	str	r3, [sp, #60]	; 0x3c
 8012626:	232d      	movs	r3, #45	; 0x2d
 8012628:	930b      	str	r3, [sp, #44]	; 0x2c
 801262a:	9b02      	ldr	r3, [sp, #8]
 801262c:	f023 0720 	bic.w	r7, r3, #32
 8012630:	2f46      	cmp	r7, #70	; 0x46
 8012632:	d00e      	beq.n	8012652 <_svfprintf_r+0x40a>
 8012634:	2f45      	cmp	r7, #69	; 0x45
 8012636:	d146      	bne.n	80126c6 <_svfprintf_r+0x47e>
 8012638:	f109 0601 	add.w	r6, r9, #1
 801263c:	2102      	movs	r1, #2
 801263e:	e00a      	b.n	8012656 <_svfprintf_r+0x40e>
 8012640:	f04f 0906 	mov.w	r9, #6
 8012644:	e7e3      	b.n	801260e <_svfprintf_r+0x3c6>
 8012646:	ed9d 7b06 	vldr	d7, [sp, #24]
 801264a:	2300      	movs	r3, #0
 801264c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012650:	e7ea      	b.n	8012628 <_svfprintf_r+0x3e0>
 8012652:	464e      	mov	r6, r9
 8012654:	2103      	movs	r1, #3
 8012656:	ab1d      	add	r3, sp, #116	; 0x74
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	ab1a      	add	r3, sp, #104	; 0x68
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	4632      	mov	r2, r6
 8012660:	ab19      	add	r3, sp, #100	; 0x64
 8012662:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012666:	4658      	mov	r0, fp
 8012668:	f002 f86a 	bl	8014740 <_dtoa_r>
 801266c:	2f47      	cmp	r7, #71	; 0x47
 801266e:	4680      	mov	r8, r0
 8012670:	d102      	bne.n	8012678 <_svfprintf_r+0x430>
 8012672:	07e8      	lsls	r0, r5, #31
 8012674:	f140 857e 	bpl.w	8013174 <_svfprintf_r+0xf2c>
 8012678:	eb08 0306 	add.w	r3, r8, r6
 801267c:	2f46      	cmp	r7, #70	; 0x46
 801267e:	9303      	str	r3, [sp, #12]
 8012680:	d111      	bne.n	80126a6 <_svfprintf_r+0x45e>
 8012682:	f898 3000 	ldrb.w	r3, [r8]
 8012686:	2b30      	cmp	r3, #48	; 0x30
 8012688:	d109      	bne.n	801269e <_svfprintf_r+0x456>
 801268a:	2200      	movs	r2, #0
 801268c:	2300      	movs	r3, #0
 801268e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012692:	f7f4 fd77 	bl	8007184 <__aeabi_dcmpeq>
 8012696:	b910      	cbnz	r0, 801269e <_svfprintf_r+0x456>
 8012698:	f1c6 0601 	rsb	r6, r6, #1
 801269c:	9619      	str	r6, [sp, #100]	; 0x64
 801269e:	9a03      	ldr	r2, [sp, #12]
 80126a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126a2:	441a      	add	r2, r3
 80126a4:	9203      	str	r2, [sp, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	2300      	movs	r3, #0
 80126aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80126ae:	f7f4 fd69 	bl	8007184 <__aeabi_dcmpeq>
 80126b2:	b988      	cbnz	r0, 80126d8 <_svfprintf_r+0x490>
 80126b4:	2230      	movs	r2, #48	; 0x30
 80126b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126b8:	9903      	ldr	r1, [sp, #12]
 80126ba:	4299      	cmp	r1, r3
 80126bc:	d90e      	bls.n	80126dc <_svfprintf_r+0x494>
 80126be:	1c59      	adds	r1, r3, #1
 80126c0:	911d      	str	r1, [sp, #116]	; 0x74
 80126c2:	701a      	strb	r2, [r3, #0]
 80126c4:	e7f7      	b.n	80126b6 <_svfprintf_r+0x46e>
 80126c6:	464e      	mov	r6, r9
 80126c8:	e7b8      	b.n	801263c <_svfprintf_r+0x3f4>
 80126ca:	bf00      	nop
 80126cc:	7fefffff 	.word	0x7fefffff
 80126d0:	08017d86 	.word	0x08017d86
 80126d4:	08017d8a 	.word	0x08017d8a
 80126d8:	9b03      	ldr	r3, [sp, #12]
 80126da:	931d      	str	r3, [sp, #116]	; 0x74
 80126dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126de:	2f47      	cmp	r7, #71	; 0x47
 80126e0:	eba3 0308 	sub.w	r3, r3, r8
 80126e4:	9303      	str	r3, [sp, #12]
 80126e6:	f040 80fa 	bne.w	80128de <_svfprintf_r+0x696>
 80126ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126ec:	1cd9      	adds	r1, r3, #3
 80126ee:	db02      	blt.n	80126f6 <_svfprintf_r+0x4ae>
 80126f0:	4599      	cmp	r9, r3
 80126f2:	f280 8120 	bge.w	8012936 <_svfprintf_r+0x6ee>
 80126f6:	9b02      	ldr	r3, [sp, #8]
 80126f8:	3b02      	subs	r3, #2
 80126fa:	9302      	str	r3, [sp, #8]
 80126fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80126fe:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8012702:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8012706:	1e53      	subs	r3, r2, #1
 8012708:	2b00      	cmp	r3, #0
 801270a:	9319      	str	r3, [sp, #100]	; 0x64
 801270c:	bfb6      	itet	lt
 801270e:	f1c2 0301 	rsblt	r3, r2, #1
 8012712:	222b      	movge	r2, #43	; 0x2b
 8012714:	222d      	movlt	r2, #45	; 0x2d
 8012716:	2b09      	cmp	r3, #9
 8012718:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801271c:	f340 80fb 	ble.w	8012916 <_svfprintf_r+0x6ce>
 8012720:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8012724:	260a      	movs	r6, #10
 8012726:	fb93 f0f6 	sdiv	r0, r3, r6
 801272a:	fb06 3310 	mls	r3, r6, r0, r3
 801272e:	3330      	adds	r3, #48	; 0x30
 8012730:	2809      	cmp	r0, #9
 8012732:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012736:	f102 31ff 	add.w	r1, r2, #4294967295
 801273a:	4603      	mov	r3, r0
 801273c:	f300 80e4 	bgt.w	8012908 <_svfprintf_r+0x6c0>
 8012740:	3330      	adds	r3, #48	; 0x30
 8012742:	f801 3c01 	strb.w	r3, [r1, #-1]
 8012746:	3a02      	subs	r2, #2
 8012748:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 801274c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8012750:	4282      	cmp	r2, r0
 8012752:	4619      	mov	r1, r3
 8012754:	f0c0 80da 	bcc.w	801290c <_svfprintf_r+0x6c4>
 8012758:	9a03      	ldr	r2, [sp, #12]
 801275a:	ab1b      	add	r3, sp, #108	; 0x6c
 801275c:	1acb      	subs	r3, r1, r3
 801275e:	2a01      	cmp	r2, #1
 8012760:	9310      	str	r3, [sp, #64]	; 0x40
 8012762:	eb03 0902 	add.w	r9, r3, r2
 8012766:	dc02      	bgt.n	801276e <_svfprintf_r+0x526>
 8012768:	f015 0701 	ands.w	r7, r5, #1
 801276c:	d002      	beq.n	8012774 <_svfprintf_r+0x52c>
 801276e:	9b08      	ldr	r3, [sp, #32]
 8012770:	2700      	movs	r7, #0
 8012772:	4499      	add	r9, r3
 8012774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012776:	b113      	cbz	r3, 801277e <_svfprintf_r+0x536>
 8012778:	232d      	movs	r3, #45	; 0x2d
 801277a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801277e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012780:	2600      	movs	r6, #0
 8012782:	454e      	cmp	r6, r9
 8012784:	4633      	mov	r3, r6
 8012786:	bfb8      	it	lt
 8012788:	464b      	movlt	r3, r9
 801278a:	930b      	str	r3, [sp, #44]	; 0x2c
 801278c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8012790:	b113      	cbz	r3, 8012798 <_svfprintf_r+0x550>
 8012792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012794:	3301      	adds	r3, #1
 8012796:	930b      	str	r3, [sp, #44]	; 0x2c
 8012798:	f015 0302 	ands.w	r3, r5, #2
 801279c:	9314      	str	r3, [sp, #80]	; 0x50
 801279e:	bf1e      	ittt	ne
 80127a0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80127a2:	3302      	addne	r3, #2
 80127a4:	930b      	strne	r3, [sp, #44]	; 0x2c
 80127a6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80127aa:	9315      	str	r3, [sp, #84]	; 0x54
 80127ac:	d118      	bne.n	80127e0 <_svfprintf_r+0x598>
 80127ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127b2:	1a9b      	subs	r3, r3, r2
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	930c      	str	r3, [sp, #48]	; 0x30
 80127b8:	dd12      	ble.n	80127e0 <_svfprintf_r+0x598>
 80127ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127bc:	2b10      	cmp	r3, #16
 80127be:	4ba9      	ldr	r3, [pc, #676]	; (8012a64 <_svfprintf_r+0x81c>)
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	f300 81d5 	bgt.w	8012b70 <_svfprintf_r+0x928>
 80127c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127c8:	6063      	str	r3, [r4, #4]
 80127ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127ce:	4413      	add	r3, r2
 80127d0:	9321      	str	r3, [sp, #132]	; 0x84
 80127d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80127d4:	3301      	adds	r3, #1
 80127d6:	2b07      	cmp	r3, #7
 80127d8:	9320      	str	r3, [sp, #128]	; 0x80
 80127da:	f300 81e2 	bgt.w	8012ba2 <_svfprintf_r+0x95a>
 80127de:	3408      	adds	r4, #8
 80127e0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80127e4:	b173      	cbz	r3, 8012804 <_svfprintf_r+0x5bc>
 80127e6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80127ea:	6023      	str	r3, [r4, #0]
 80127ec:	2301      	movs	r3, #1
 80127ee:	6063      	str	r3, [r4, #4]
 80127f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127f2:	3301      	adds	r3, #1
 80127f4:	9321      	str	r3, [sp, #132]	; 0x84
 80127f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80127f8:	3301      	adds	r3, #1
 80127fa:	2b07      	cmp	r3, #7
 80127fc:	9320      	str	r3, [sp, #128]	; 0x80
 80127fe:	f300 81da 	bgt.w	8012bb6 <_svfprintf_r+0x96e>
 8012802:	3408      	adds	r4, #8
 8012804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012806:	b16b      	cbz	r3, 8012824 <_svfprintf_r+0x5dc>
 8012808:	ab18      	add	r3, sp, #96	; 0x60
 801280a:	6023      	str	r3, [r4, #0]
 801280c:	2302      	movs	r3, #2
 801280e:	6063      	str	r3, [r4, #4]
 8012810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012812:	3302      	adds	r3, #2
 8012814:	9321      	str	r3, [sp, #132]	; 0x84
 8012816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012818:	3301      	adds	r3, #1
 801281a:	2b07      	cmp	r3, #7
 801281c:	9320      	str	r3, [sp, #128]	; 0x80
 801281e:	f300 81d4 	bgt.w	8012bca <_svfprintf_r+0x982>
 8012822:	3408      	adds	r4, #8
 8012824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012826:	2b80      	cmp	r3, #128	; 0x80
 8012828:	d114      	bne.n	8012854 <_svfprintf_r+0x60c>
 801282a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801282c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801282e:	1a9b      	subs	r3, r3, r2
 8012830:	2b00      	cmp	r3, #0
 8012832:	dd0f      	ble.n	8012854 <_svfprintf_r+0x60c>
 8012834:	4a8c      	ldr	r2, [pc, #560]	; (8012a68 <_svfprintf_r+0x820>)
 8012836:	6022      	str	r2, [r4, #0]
 8012838:	2b10      	cmp	r3, #16
 801283a:	f300 81d0 	bgt.w	8012bde <_svfprintf_r+0x996>
 801283e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012840:	6063      	str	r3, [r4, #4]
 8012842:	4413      	add	r3, r2
 8012844:	9321      	str	r3, [sp, #132]	; 0x84
 8012846:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012848:	3301      	adds	r3, #1
 801284a:	2b07      	cmp	r3, #7
 801284c:	9320      	str	r3, [sp, #128]	; 0x80
 801284e:	f300 81df 	bgt.w	8012c10 <_svfprintf_r+0x9c8>
 8012852:	3408      	adds	r4, #8
 8012854:	eba6 0609 	sub.w	r6, r6, r9
 8012858:	2e00      	cmp	r6, #0
 801285a:	dd0f      	ble.n	801287c <_svfprintf_r+0x634>
 801285c:	4b82      	ldr	r3, [pc, #520]	; (8012a68 <_svfprintf_r+0x820>)
 801285e:	6023      	str	r3, [r4, #0]
 8012860:	2e10      	cmp	r6, #16
 8012862:	f300 81df 	bgt.w	8012c24 <_svfprintf_r+0x9dc>
 8012866:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012868:	9821      	ldr	r0, [sp, #132]	; 0x84
 801286a:	6066      	str	r6, [r4, #4]
 801286c:	3301      	adds	r3, #1
 801286e:	4406      	add	r6, r0
 8012870:	2b07      	cmp	r3, #7
 8012872:	9621      	str	r6, [sp, #132]	; 0x84
 8012874:	9320      	str	r3, [sp, #128]	; 0x80
 8012876:	f300 81ec 	bgt.w	8012c52 <_svfprintf_r+0xa0a>
 801287a:	3408      	adds	r4, #8
 801287c:	05eb      	lsls	r3, r5, #23
 801287e:	f100 81f2 	bmi.w	8012c66 <_svfprintf_r+0xa1e>
 8012882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012884:	e884 0300 	stmia.w	r4, {r8, r9}
 8012888:	444b      	add	r3, r9
 801288a:	9321      	str	r3, [sp, #132]	; 0x84
 801288c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801288e:	3301      	adds	r3, #1
 8012890:	2b07      	cmp	r3, #7
 8012892:	9320      	str	r3, [sp, #128]	; 0x80
 8012894:	f340 8419 	ble.w	80130ca <_svfprintf_r+0xe82>
 8012898:	aa1f      	add	r2, sp, #124	; 0x7c
 801289a:	4651      	mov	r1, sl
 801289c:	4658      	mov	r0, fp
 801289e:	f003 f89b 	bl	80159d8 <__ssprint_r>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	f040 8431 	bne.w	801310a <_svfprintf_r+0xec2>
 80128a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80128aa:	076b      	lsls	r3, r5, #29
 80128ac:	f100 8410 	bmi.w	80130d0 <_svfprintf_r+0xe88>
 80128b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80128b6:	428a      	cmp	r2, r1
 80128b8:	bfac      	ite	ge
 80128ba:	189b      	addge	r3, r3, r2
 80128bc:	185b      	addlt	r3, r3, r1
 80128be:	9309      	str	r3, [sp, #36]	; 0x24
 80128c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128c2:	b13b      	cbz	r3, 80128d4 <_svfprintf_r+0x68c>
 80128c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80128c6:	4651      	mov	r1, sl
 80128c8:	4658      	mov	r0, fp
 80128ca:	f003 f885 	bl	80159d8 <__ssprint_r>
 80128ce:	2800      	cmp	r0, #0
 80128d0:	f040 841b 	bne.w	801310a <_svfprintf_r+0xec2>
 80128d4:	2300      	movs	r3, #0
 80128d6:	9320      	str	r3, [sp, #128]	; 0x80
 80128d8:	9f04      	ldr	r7, [sp, #16]
 80128da:	ac2c      	add	r4, sp, #176	; 0xb0
 80128dc:	e4ee      	b.n	80122bc <_svfprintf_r+0x74>
 80128de:	9b02      	ldr	r3, [sp, #8]
 80128e0:	2b65      	cmp	r3, #101	; 0x65
 80128e2:	f77f af0b 	ble.w	80126fc <_svfprintf_r+0x4b4>
 80128e6:	9b02      	ldr	r3, [sp, #8]
 80128e8:	2b66      	cmp	r3, #102	; 0x66
 80128ea:	d124      	bne.n	8012936 <_svfprintf_r+0x6ee>
 80128ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	dd19      	ble.n	8012926 <_svfprintf_r+0x6de>
 80128f2:	f1b9 0f00 	cmp.w	r9, #0
 80128f6:	d101      	bne.n	80128fc <_svfprintf_r+0x6b4>
 80128f8:	07ea      	lsls	r2, r5, #31
 80128fa:	d502      	bpl.n	8012902 <_svfprintf_r+0x6ba>
 80128fc:	9a08      	ldr	r2, [sp, #32]
 80128fe:	4413      	add	r3, r2
 8012900:	444b      	add	r3, r9
 8012902:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8012904:	4699      	mov	r9, r3
 8012906:	e735      	b.n	8012774 <_svfprintf_r+0x52c>
 8012908:	460a      	mov	r2, r1
 801290a:	e70c      	b.n	8012726 <_svfprintf_r+0x4de>
 801290c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012910:	f803 1b01 	strb.w	r1, [r3], #1
 8012914:	e71c      	b.n	8012750 <_svfprintf_r+0x508>
 8012916:	2230      	movs	r2, #48	; 0x30
 8012918:	4413      	add	r3, r2
 801291a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 801291e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012922:	a91c      	add	r1, sp, #112	; 0x70
 8012924:	e718      	b.n	8012758 <_svfprintf_r+0x510>
 8012926:	f1b9 0f00 	cmp.w	r9, #0
 801292a:	d101      	bne.n	8012930 <_svfprintf_r+0x6e8>
 801292c:	07eb      	lsls	r3, r5, #31
 801292e:	d515      	bpl.n	801295c <_svfprintf_r+0x714>
 8012930:	9b08      	ldr	r3, [sp, #32]
 8012932:	3301      	adds	r3, #1
 8012934:	e7e4      	b.n	8012900 <_svfprintf_r+0x6b8>
 8012936:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012938:	9b03      	ldr	r3, [sp, #12]
 801293a:	429a      	cmp	r2, r3
 801293c:	db06      	blt.n	801294c <_svfprintf_r+0x704>
 801293e:	07ef      	lsls	r7, r5, #31
 8012940:	d50e      	bpl.n	8012960 <_svfprintf_r+0x718>
 8012942:	9b08      	ldr	r3, [sp, #32]
 8012944:	4413      	add	r3, r2
 8012946:	2267      	movs	r2, #103	; 0x67
 8012948:	9202      	str	r2, [sp, #8]
 801294a:	e7da      	b.n	8012902 <_svfprintf_r+0x6ba>
 801294c:	9b03      	ldr	r3, [sp, #12]
 801294e:	9908      	ldr	r1, [sp, #32]
 8012950:	2a00      	cmp	r2, #0
 8012952:	440b      	add	r3, r1
 8012954:	dcf7      	bgt.n	8012946 <_svfprintf_r+0x6fe>
 8012956:	f1c2 0201 	rsb	r2, r2, #1
 801295a:	e7f3      	b.n	8012944 <_svfprintf_r+0x6fc>
 801295c:	2301      	movs	r3, #1
 801295e:	e7d0      	b.n	8012902 <_svfprintf_r+0x6ba>
 8012960:	4613      	mov	r3, r2
 8012962:	e7f0      	b.n	8012946 <_svfprintf_r+0x6fe>
 8012964:	b10b      	cbz	r3, 801296a <_svfprintf_r+0x722>
 8012966:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801296a:	f015 0f20 	tst.w	r5, #32
 801296e:	f107 0304 	add.w	r3, r7, #4
 8012972:	d008      	beq.n	8012986 <_svfprintf_r+0x73e>
 8012974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012976:	683a      	ldr	r2, [r7, #0]
 8012978:	17ce      	asrs	r6, r1, #31
 801297a:	4608      	mov	r0, r1
 801297c:	4631      	mov	r1, r6
 801297e:	e9c2 0100 	strd	r0, r1, [r2]
 8012982:	461f      	mov	r7, r3
 8012984:	e49a      	b.n	80122bc <_svfprintf_r+0x74>
 8012986:	06ee      	lsls	r6, r5, #27
 8012988:	d503      	bpl.n	8012992 <_svfprintf_r+0x74a>
 801298a:	683a      	ldr	r2, [r7, #0]
 801298c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801298e:	6011      	str	r1, [r2, #0]
 8012990:	e7f7      	b.n	8012982 <_svfprintf_r+0x73a>
 8012992:	0668      	lsls	r0, r5, #25
 8012994:	d5f9      	bpl.n	801298a <_svfprintf_r+0x742>
 8012996:	683a      	ldr	r2, [r7, #0]
 8012998:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801299c:	8011      	strh	r1, [r2, #0]
 801299e:	e7f0      	b.n	8012982 <_svfprintf_r+0x73a>
 80129a0:	f045 0510 	orr.w	r5, r5, #16
 80129a4:	f015 0320 	ands.w	r3, r5, #32
 80129a8:	d022      	beq.n	80129f0 <_svfprintf_r+0x7a8>
 80129aa:	3707      	adds	r7, #7
 80129ac:	f027 0707 	bic.w	r7, r7, #7
 80129b0:	f107 0308 	add.w	r3, r7, #8
 80129b4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80129b8:	9304      	str	r3, [sp, #16]
 80129ba:	2300      	movs	r3, #0
 80129bc:	2200      	movs	r2, #0
 80129be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80129c2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80129c6:	f000 83db 	beq.w	8013180 <_svfprintf_r+0xf38>
 80129ca:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80129ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80129d0:	ea56 0207 	orrs.w	r2, r6, r7
 80129d4:	f040 83d9 	bne.w	801318a <_svfprintf_r+0xf42>
 80129d8:	f1b9 0f00 	cmp.w	r9, #0
 80129dc:	f000 80aa 	beq.w	8012b34 <_svfprintf_r+0x8ec>
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d076      	beq.n	8012ad2 <_svfprintf_r+0x88a>
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	f000 8091 	beq.w	8012b0c <_svfprintf_r+0x8c4>
 80129ea:	2600      	movs	r6, #0
 80129ec:	2700      	movs	r7, #0
 80129ee:	e3d2      	b.n	8013196 <_svfprintf_r+0xf4e>
 80129f0:	1d3a      	adds	r2, r7, #4
 80129f2:	f015 0110 	ands.w	r1, r5, #16
 80129f6:	9204      	str	r2, [sp, #16]
 80129f8:	d002      	beq.n	8012a00 <_svfprintf_r+0x7b8>
 80129fa:	683e      	ldr	r6, [r7, #0]
 80129fc:	2700      	movs	r7, #0
 80129fe:	e7dd      	b.n	80129bc <_svfprintf_r+0x774>
 8012a00:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8012a04:	d0f9      	beq.n	80129fa <_svfprintf_r+0x7b2>
 8012a06:	883e      	ldrh	r6, [r7, #0]
 8012a08:	2700      	movs	r7, #0
 8012a0a:	e7d6      	b.n	80129ba <_svfprintf_r+0x772>
 8012a0c:	1d3b      	adds	r3, r7, #4
 8012a0e:	9304      	str	r3, [sp, #16]
 8012a10:	2330      	movs	r3, #48	; 0x30
 8012a12:	2278      	movs	r2, #120	; 0x78
 8012a14:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012a18:	4b14      	ldr	r3, [pc, #80]	; (8012a6c <_svfprintf_r+0x824>)
 8012a1a:	683e      	ldr	r6, [r7, #0]
 8012a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8012a1e:	2700      	movs	r7, #0
 8012a20:	f045 0502 	orr.w	r5, r5, #2
 8012a24:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012a28:	2302      	movs	r3, #2
 8012a2a:	9202      	str	r2, [sp, #8]
 8012a2c:	e7c6      	b.n	80129bc <_svfprintf_r+0x774>
 8012a2e:	1d3b      	adds	r3, r7, #4
 8012a30:	2600      	movs	r6, #0
 8012a32:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012a36:	9304      	str	r3, [sp, #16]
 8012a38:	f8d7 8000 	ldr.w	r8, [r7]
 8012a3c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8012a40:	d00a      	beq.n	8012a58 <_svfprintf_r+0x810>
 8012a42:	464a      	mov	r2, r9
 8012a44:	4631      	mov	r1, r6
 8012a46:	4640      	mov	r0, r8
 8012a48:	f7f3 ff1a 	bl	8006880 <memchr>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	f000 808d 	beq.w	8012b6c <_svfprintf_r+0x924>
 8012a52:	eba0 0908 	sub.w	r9, r0, r8
 8012a56:	e5cb      	b.n	80125f0 <_svfprintf_r+0x3a8>
 8012a58:	4640      	mov	r0, r8
 8012a5a:	f7f3 ff6b 	bl	8006934 <strlen>
 8012a5e:	4681      	mov	r9, r0
 8012a60:	e5c6      	b.n	80125f0 <_svfprintf_r+0x3a8>
 8012a62:	bf00      	nop
 8012a64:	08017dba 	.word	0x08017dba
 8012a68:	08017dca 	.word	0x08017dca
 8012a6c:	08017da7 	.word	0x08017da7
 8012a70:	f045 0510 	orr.w	r5, r5, #16
 8012a74:	06a9      	lsls	r1, r5, #26
 8012a76:	d509      	bpl.n	8012a8c <_svfprintf_r+0x844>
 8012a78:	3707      	adds	r7, #7
 8012a7a:	f027 0707 	bic.w	r7, r7, #7
 8012a7e:	f107 0308 	add.w	r3, r7, #8
 8012a82:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012a86:	9304      	str	r3, [sp, #16]
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e797      	b.n	80129bc <_svfprintf_r+0x774>
 8012a8c:	1d3b      	adds	r3, r7, #4
 8012a8e:	f015 0f10 	tst.w	r5, #16
 8012a92:	9304      	str	r3, [sp, #16]
 8012a94:	d001      	beq.n	8012a9a <_svfprintf_r+0x852>
 8012a96:	683e      	ldr	r6, [r7, #0]
 8012a98:	e002      	b.n	8012aa0 <_svfprintf_r+0x858>
 8012a9a:	066a      	lsls	r2, r5, #25
 8012a9c:	d5fb      	bpl.n	8012a96 <_svfprintf_r+0x84e>
 8012a9e:	883e      	ldrh	r6, [r7, #0]
 8012aa0:	2700      	movs	r7, #0
 8012aa2:	e7f1      	b.n	8012a88 <_svfprintf_r+0x840>
 8012aa4:	b10b      	cbz	r3, 8012aaa <_svfprintf_r+0x862>
 8012aa6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012aaa:	4ba3      	ldr	r3, [pc, #652]	; (8012d38 <_svfprintf_r+0xaf0>)
 8012aac:	e4c2      	b.n	8012434 <_svfprintf_r+0x1ec>
 8012aae:	1d3b      	adds	r3, r7, #4
 8012ab0:	f015 0f10 	tst.w	r5, #16
 8012ab4:	9304      	str	r3, [sp, #16]
 8012ab6:	d001      	beq.n	8012abc <_svfprintf_r+0x874>
 8012ab8:	683e      	ldr	r6, [r7, #0]
 8012aba:	e002      	b.n	8012ac2 <_svfprintf_r+0x87a>
 8012abc:	066e      	lsls	r6, r5, #25
 8012abe:	d5fb      	bpl.n	8012ab8 <_svfprintf_r+0x870>
 8012ac0:	883e      	ldrh	r6, [r7, #0]
 8012ac2:	2700      	movs	r7, #0
 8012ac4:	e4c2      	b.n	801244c <_svfprintf_r+0x204>
 8012ac6:	4643      	mov	r3, r8
 8012ac8:	e366      	b.n	8013198 <_svfprintf_r+0xf50>
 8012aca:	2f00      	cmp	r7, #0
 8012acc:	bf08      	it	eq
 8012ace:	2e0a      	cmpeq	r6, #10
 8012ad0:	d205      	bcs.n	8012ade <_svfprintf_r+0x896>
 8012ad2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012ad6:	3630      	adds	r6, #48	; 0x30
 8012ad8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8012adc:	e377      	b.n	80131ce <_svfprintf_r+0xf86>
 8012ade:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	220a      	movs	r2, #10
 8012ae8:	2300      	movs	r3, #0
 8012aea:	f7f4 fbdb 	bl	80072a4 <__aeabi_uldivmod>
 8012aee:	3230      	adds	r2, #48	; 0x30
 8012af0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8012af4:	2300      	movs	r3, #0
 8012af6:	4630      	mov	r0, r6
 8012af8:	4639      	mov	r1, r7
 8012afa:	220a      	movs	r2, #10
 8012afc:	f7f4 fbd2 	bl	80072a4 <__aeabi_uldivmod>
 8012b00:	4606      	mov	r6, r0
 8012b02:	460f      	mov	r7, r1
 8012b04:	ea56 0307 	orrs.w	r3, r6, r7
 8012b08:	d1eb      	bne.n	8012ae2 <_svfprintf_r+0x89a>
 8012b0a:	e360      	b.n	80131ce <_svfprintf_r+0xf86>
 8012b0c:	2600      	movs	r6, #0
 8012b0e:	2700      	movs	r7, #0
 8012b10:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012b14:	f006 030f 	and.w	r3, r6, #15
 8012b18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b1a:	5cd3      	ldrb	r3, [r2, r3]
 8012b1c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8012b20:	0933      	lsrs	r3, r6, #4
 8012b22:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8012b26:	093a      	lsrs	r2, r7, #4
 8012b28:	461e      	mov	r6, r3
 8012b2a:	4617      	mov	r7, r2
 8012b2c:	ea56 0307 	orrs.w	r3, r6, r7
 8012b30:	d1f0      	bne.n	8012b14 <_svfprintf_r+0x8cc>
 8012b32:	e34c      	b.n	80131ce <_svfprintf_r+0xf86>
 8012b34:	b93b      	cbnz	r3, 8012b46 <_svfprintf_r+0x8fe>
 8012b36:	07ea      	lsls	r2, r5, #31
 8012b38:	d505      	bpl.n	8012b46 <_svfprintf_r+0x8fe>
 8012b3a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012b3e:	2330      	movs	r3, #48	; 0x30
 8012b40:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8012b44:	e343      	b.n	80131ce <_svfprintf_r+0xf86>
 8012b46:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012b4a:	e340      	b.n	80131ce <_svfprintf_r+0xf86>
 8012b4c:	b10b      	cbz	r3, 8012b52 <_svfprintf_r+0x90a>
 8012b4e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012b52:	9b02      	ldr	r3, [sp, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	f000 82f7 	beq.w	8013148 <_svfprintf_r+0xf00>
 8012b5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012b5e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8012b62:	2600      	movs	r6, #0
 8012b64:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8012b68:	9704      	str	r7, [sp, #16]
 8012b6a:	e4e8      	b.n	801253e <_svfprintf_r+0x2f6>
 8012b6c:	4606      	mov	r6, r0
 8012b6e:	e53f      	b.n	80125f0 <_svfprintf_r+0x3a8>
 8012b70:	2310      	movs	r3, #16
 8012b72:	6063      	str	r3, [r4, #4]
 8012b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b76:	3310      	adds	r3, #16
 8012b78:	9321      	str	r3, [sp, #132]	; 0x84
 8012b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	2b07      	cmp	r3, #7
 8012b80:	9320      	str	r3, [sp, #128]	; 0x80
 8012b82:	dc04      	bgt.n	8012b8e <_svfprintf_r+0x946>
 8012b84:	3408      	adds	r4, #8
 8012b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b88:	3b10      	subs	r3, #16
 8012b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8012b8c:	e615      	b.n	80127ba <_svfprintf_r+0x572>
 8012b8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012b90:	4651      	mov	r1, sl
 8012b92:	4658      	mov	r0, fp
 8012b94:	f002 ff20 	bl	80159d8 <__ssprint_r>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	f040 82b6 	bne.w	801310a <_svfprintf_r+0xec2>
 8012b9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012ba0:	e7f1      	b.n	8012b86 <_svfprintf_r+0x93e>
 8012ba2:	aa1f      	add	r2, sp, #124	; 0x7c
 8012ba4:	4651      	mov	r1, sl
 8012ba6:	4658      	mov	r0, fp
 8012ba8:	f002 ff16 	bl	80159d8 <__ssprint_r>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	f040 82ac 	bne.w	801310a <_svfprintf_r+0xec2>
 8012bb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8012bb4:	e614      	b.n	80127e0 <_svfprintf_r+0x598>
 8012bb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8012bb8:	4651      	mov	r1, sl
 8012bba:	4658      	mov	r0, fp
 8012bbc:	f002 ff0c 	bl	80159d8 <__ssprint_r>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f040 82a2 	bne.w	801310a <_svfprintf_r+0xec2>
 8012bc6:	ac2c      	add	r4, sp, #176	; 0xb0
 8012bc8:	e61c      	b.n	8012804 <_svfprintf_r+0x5bc>
 8012bca:	aa1f      	add	r2, sp, #124	; 0x7c
 8012bcc:	4651      	mov	r1, sl
 8012bce:	4658      	mov	r0, fp
 8012bd0:	f002 ff02 	bl	80159d8 <__ssprint_r>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	f040 8298 	bne.w	801310a <_svfprintf_r+0xec2>
 8012bda:	ac2c      	add	r4, sp, #176	; 0xb0
 8012bdc:	e622      	b.n	8012824 <_svfprintf_r+0x5dc>
 8012bde:	2210      	movs	r2, #16
 8012be0:	6062      	str	r2, [r4, #4]
 8012be2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012be4:	3210      	adds	r2, #16
 8012be6:	9221      	str	r2, [sp, #132]	; 0x84
 8012be8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012bea:	3201      	adds	r2, #1
 8012bec:	2a07      	cmp	r2, #7
 8012bee:	9220      	str	r2, [sp, #128]	; 0x80
 8012bf0:	dc02      	bgt.n	8012bf8 <_svfprintf_r+0x9b0>
 8012bf2:	3408      	adds	r4, #8
 8012bf4:	3b10      	subs	r3, #16
 8012bf6:	e61d      	b.n	8012834 <_svfprintf_r+0x5ec>
 8012bf8:	aa1f      	add	r2, sp, #124	; 0x7c
 8012bfa:	4651      	mov	r1, sl
 8012bfc:	4658      	mov	r0, fp
 8012bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8012c00:	f002 feea 	bl	80159d8 <__ssprint_r>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	f040 8280 	bne.w	801310a <_svfprintf_r+0xec2>
 8012c0a:	ac2c      	add	r4, sp, #176	; 0xb0
 8012c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c0e:	e7f1      	b.n	8012bf4 <_svfprintf_r+0x9ac>
 8012c10:	aa1f      	add	r2, sp, #124	; 0x7c
 8012c12:	4651      	mov	r1, sl
 8012c14:	4658      	mov	r0, fp
 8012c16:	f002 fedf 	bl	80159d8 <__ssprint_r>
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	f040 8275 	bne.w	801310a <_svfprintf_r+0xec2>
 8012c20:	ac2c      	add	r4, sp, #176	; 0xb0
 8012c22:	e617      	b.n	8012854 <_svfprintf_r+0x60c>
 8012c24:	2310      	movs	r3, #16
 8012c26:	6063      	str	r3, [r4, #4]
 8012c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c2a:	3310      	adds	r3, #16
 8012c2c:	9321      	str	r3, [sp, #132]	; 0x84
 8012c2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012c30:	3301      	adds	r3, #1
 8012c32:	2b07      	cmp	r3, #7
 8012c34:	9320      	str	r3, [sp, #128]	; 0x80
 8012c36:	dc02      	bgt.n	8012c3e <_svfprintf_r+0x9f6>
 8012c38:	3408      	adds	r4, #8
 8012c3a:	3e10      	subs	r6, #16
 8012c3c:	e60e      	b.n	801285c <_svfprintf_r+0x614>
 8012c3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012c40:	4651      	mov	r1, sl
 8012c42:	4658      	mov	r0, fp
 8012c44:	f002 fec8 	bl	80159d8 <__ssprint_r>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	f040 825e 	bne.w	801310a <_svfprintf_r+0xec2>
 8012c4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012c50:	e7f3      	b.n	8012c3a <_svfprintf_r+0x9f2>
 8012c52:	aa1f      	add	r2, sp, #124	; 0x7c
 8012c54:	4651      	mov	r1, sl
 8012c56:	4658      	mov	r0, fp
 8012c58:	f002 febe 	bl	80159d8 <__ssprint_r>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	f040 8254 	bne.w	801310a <_svfprintf_r+0xec2>
 8012c62:	ac2c      	add	r4, sp, #176	; 0xb0
 8012c64:	e60a      	b.n	801287c <_svfprintf_r+0x634>
 8012c66:	9b02      	ldr	r3, [sp, #8]
 8012c68:	2b65      	cmp	r3, #101	; 0x65
 8012c6a:	f340 81a9 	ble.w	8012fc0 <_svfprintf_r+0xd78>
 8012c6e:	2200      	movs	r2, #0
 8012c70:	2300      	movs	r3, #0
 8012c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c76:	f7f4 fa85 	bl	8007184 <__aeabi_dcmpeq>
 8012c7a:	2800      	cmp	r0, #0
 8012c7c:	d062      	beq.n	8012d44 <_svfprintf_r+0xafc>
 8012c7e:	4b2f      	ldr	r3, [pc, #188]	; (8012d3c <_svfprintf_r+0xaf4>)
 8012c80:	6023      	str	r3, [r4, #0]
 8012c82:	2301      	movs	r3, #1
 8012c84:	6063      	str	r3, [r4, #4]
 8012c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c88:	3301      	adds	r3, #1
 8012c8a:	9321      	str	r3, [sp, #132]	; 0x84
 8012c8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012c8e:	3301      	adds	r3, #1
 8012c90:	2b07      	cmp	r3, #7
 8012c92:	9320      	str	r3, [sp, #128]	; 0x80
 8012c94:	dc25      	bgt.n	8012ce2 <_svfprintf_r+0xa9a>
 8012c96:	3408      	adds	r4, #8
 8012c98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c9a:	9a03      	ldr	r2, [sp, #12]
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	db02      	blt.n	8012ca6 <_svfprintf_r+0xa5e>
 8012ca0:	07ee      	lsls	r6, r5, #31
 8012ca2:	f57f ae02 	bpl.w	80128aa <_svfprintf_r+0x662>
 8012ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ca8:	6023      	str	r3, [r4, #0]
 8012caa:	9b08      	ldr	r3, [sp, #32]
 8012cac:	6063      	str	r3, [r4, #4]
 8012cae:	9a08      	ldr	r2, [sp, #32]
 8012cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cb2:	4413      	add	r3, r2
 8012cb4:	9321      	str	r3, [sp, #132]	; 0x84
 8012cb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012cb8:	3301      	adds	r3, #1
 8012cba:	2b07      	cmp	r3, #7
 8012cbc:	9320      	str	r3, [sp, #128]	; 0x80
 8012cbe:	dc1a      	bgt.n	8012cf6 <_svfprintf_r+0xaae>
 8012cc0:	3408      	adds	r4, #8
 8012cc2:	9b03      	ldr	r3, [sp, #12]
 8012cc4:	1e5e      	subs	r6, r3, #1
 8012cc6:	2e00      	cmp	r6, #0
 8012cc8:	f77f adef 	ble.w	80128aa <_svfprintf_r+0x662>
 8012ccc:	4f1c      	ldr	r7, [pc, #112]	; (8012d40 <_svfprintf_r+0xaf8>)
 8012cce:	f04f 0810 	mov.w	r8, #16
 8012cd2:	2e10      	cmp	r6, #16
 8012cd4:	6027      	str	r7, [r4, #0]
 8012cd6:	dc18      	bgt.n	8012d0a <_svfprintf_r+0xac2>
 8012cd8:	6066      	str	r6, [r4, #4]
 8012cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cdc:	441e      	add	r6, r3
 8012cde:	9621      	str	r6, [sp, #132]	; 0x84
 8012ce0:	e5d4      	b.n	801288c <_svfprintf_r+0x644>
 8012ce2:	aa1f      	add	r2, sp, #124	; 0x7c
 8012ce4:	4651      	mov	r1, sl
 8012ce6:	4658      	mov	r0, fp
 8012ce8:	f002 fe76 	bl	80159d8 <__ssprint_r>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	f040 820c 	bne.w	801310a <_svfprintf_r+0xec2>
 8012cf2:	ac2c      	add	r4, sp, #176	; 0xb0
 8012cf4:	e7d0      	b.n	8012c98 <_svfprintf_r+0xa50>
 8012cf6:	aa1f      	add	r2, sp, #124	; 0x7c
 8012cf8:	4651      	mov	r1, sl
 8012cfa:	4658      	mov	r0, fp
 8012cfc:	f002 fe6c 	bl	80159d8 <__ssprint_r>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	f040 8202 	bne.w	801310a <_svfprintf_r+0xec2>
 8012d06:	ac2c      	add	r4, sp, #176	; 0xb0
 8012d08:	e7db      	b.n	8012cc2 <_svfprintf_r+0xa7a>
 8012d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d0c:	f8c4 8004 	str.w	r8, [r4, #4]
 8012d10:	3310      	adds	r3, #16
 8012d12:	9321      	str	r3, [sp, #132]	; 0x84
 8012d14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d16:	3301      	adds	r3, #1
 8012d18:	2b07      	cmp	r3, #7
 8012d1a:	9320      	str	r3, [sp, #128]	; 0x80
 8012d1c:	dc02      	bgt.n	8012d24 <_svfprintf_r+0xadc>
 8012d1e:	3408      	adds	r4, #8
 8012d20:	3e10      	subs	r6, #16
 8012d22:	e7d6      	b.n	8012cd2 <_svfprintf_r+0xa8a>
 8012d24:	aa1f      	add	r2, sp, #124	; 0x7c
 8012d26:	4651      	mov	r1, sl
 8012d28:	4658      	mov	r0, fp
 8012d2a:	f002 fe55 	bl	80159d8 <__ssprint_r>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	f040 81eb 	bne.w	801310a <_svfprintf_r+0xec2>
 8012d34:	ac2c      	add	r4, sp, #176	; 0xb0
 8012d36:	e7f3      	b.n	8012d20 <_svfprintf_r+0xad8>
 8012d38:	08017da7 	.word	0x08017da7
 8012d3c:	08017db8 	.word	0x08017db8
 8012d40:	08017dca 	.word	0x08017dca
 8012d44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	dc7a      	bgt.n	8012e40 <_svfprintf_r+0xbf8>
 8012d4a:	4b9b      	ldr	r3, [pc, #620]	; (8012fb8 <_svfprintf_r+0xd70>)
 8012d4c:	6023      	str	r3, [r4, #0]
 8012d4e:	2301      	movs	r3, #1
 8012d50:	6063      	str	r3, [r4, #4]
 8012d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d54:	3301      	adds	r3, #1
 8012d56:	9321      	str	r3, [sp, #132]	; 0x84
 8012d58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	2b07      	cmp	r3, #7
 8012d5e:	9320      	str	r3, [sp, #128]	; 0x80
 8012d60:	dc44      	bgt.n	8012dec <_svfprintf_r+0xba4>
 8012d62:	3408      	adds	r4, #8
 8012d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d66:	b923      	cbnz	r3, 8012d72 <_svfprintf_r+0xb2a>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	b913      	cbnz	r3, 8012d72 <_svfprintf_r+0xb2a>
 8012d6c:	07e8      	lsls	r0, r5, #31
 8012d6e:	f57f ad9c 	bpl.w	80128aa <_svfprintf_r+0x662>
 8012d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d74:	6023      	str	r3, [r4, #0]
 8012d76:	9b08      	ldr	r3, [sp, #32]
 8012d78:	6063      	str	r3, [r4, #4]
 8012d7a:	9a08      	ldr	r2, [sp, #32]
 8012d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d7e:	4413      	add	r3, r2
 8012d80:	9321      	str	r3, [sp, #132]	; 0x84
 8012d82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012d84:	3301      	adds	r3, #1
 8012d86:	2b07      	cmp	r3, #7
 8012d88:	9320      	str	r3, [sp, #128]	; 0x80
 8012d8a:	dc39      	bgt.n	8012e00 <_svfprintf_r+0xbb8>
 8012d8c:	f104 0308 	add.w	r3, r4, #8
 8012d90:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012d92:	2e00      	cmp	r6, #0
 8012d94:	da19      	bge.n	8012dca <_svfprintf_r+0xb82>
 8012d96:	4f89      	ldr	r7, [pc, #548]	; (8012fbc <_svfprintf_r+0xd74>)
 8012d98:	4276      	negs	r6, r6
 8012d9a:	2410      	movs	r4, #16
 8012d9c:	2e10      	cmp	r6, #16
 8012d9e:	601f      	str	r7, [r3, #0]
 8012da0:	dc38      	bgt.n	8012e14 <_svfprintf_r+0xbcc>
 8012da2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012da4:	605e      	str	r6, [r3, #4]
 8012da6:	4416      	add	r6, r2
 8012da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012daa:	9621      	str	r6, [sp, #132]	; 0x84
 8012dac:	3201      	adds	r2, #1
 8012dae:	2a07      	cmp	r2, #7
 8012db0:	f103 0308 	add.w	r3, r3, #8
 8012db4:	9220      	str	r2, [sp, #128]	; 0x80
 8012db6:	dd08      	ble.n	8012dca <_svfprintf_r+0xb82>
 8012db8:	aa1f      	add	r2, sp, #124	; 0x7c
 8012dba:	4651      	mov	r1, sl
 8012dbc:	4658      	mov	r0, fp
 8012dbe:	f002 fe0b 	bl	80159d8 <__ssprint_r>
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	f040 81a1 	bne.w	801310a <_svfprintf_r+0xec2>
 8012dc8:	ab2c      	add	r3, sp, #176	; 0xb0
 8012dca:	9a03      	ldr	r2, [sp, #12]
 8012dcc:	605a      	str	r2, [r3, #4]
 8012dce:	9903      	ldr	r1, [sp, #12]
 8012dd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012dd2:	f8c3 8000 	str.w	r8, [r3]
 8012dd6:	440a      	add	r2, r1
 8012dd8:	9221      	str	r2, [sp, #132]	; 0x84
 8012dda:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012ddc:	3201      	adds	r2, #1
 8012dde:	2a07      	cmp	r2, #7
 8012de0:	9220      	str	r2, [sp, #128]	; 0x80
 8012de2:	f73f ad59 	bgt.w	8012898 <_svfprintf_r+0x650>
 8012de6:	f103 0408 	add.w	r4, r3, #8
 8012dea:	e55e      	b.n	80128aa <_svfprintf_r+0x662>
 8012dec:	aa1f      	add	r2, sp, #124	; 0x7c
 8012dee:	4651      	mov	r1, sl
 8012df0:	4658      	mov	r0, fp
 8012df2:	f002 fdf1 	bl	80159d8 <__ssprint_r>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	f040 8187 	bne.w	801310a <_svfprintf_r+0xec2>
 8012dfc:	ac2c      	add	r4, sp, #176	; 0xb0
 8012dfe:	e7b1      	b.n	8012d64 <_svfprintf_r+0xb1c>
 8012e00:	aa1f      	add	r2, sp, #124	; 0x7c
 8012e02:	4651      	mov	r1, sl
 8012e04:	4658      	mov	r0, fp
 8012e06:	f002 fde7 	bl	80159d8 <__ssprint_r>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	f040 817d 	bne.w	801310a <_svfprintf_r+0xec2>
 8012e10:	ab2c      	add	r3, sp, #176	; 0xb0
 8012e12:	e7bd      	b.n	8012d90 <_svfprintf_r+0xb48>
 8012e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e16:	605c      	str	r4, [r3, #4]
 8012e18:	3210      	adds	r2, #16
 8012e1a:	9221      	str	r2, [sp, #132]	; 0x84
 8012e1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e1e:	3201      	adds	r2, #1
 8012e20:	2a07      	cmp	r2, #7
 8012e22:	9220      	str	r2, [sp, #128]	; 0x80
 8012e24:	dc02      	bgt.n	8012e2c <_svfprintf_r+0xbe4>
 8012e26:	3308      	adds	r3, #8
 8012e28:	3e10      	subs	r6, #16
 8012e2a:	e7b7      	b.n	8012d9c <_svfprintf_r+0xb54>
 8012e2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8012e2e:	4651      	mov	r1, sl
 8012e30:	4658      	mov	r0, fp
 8012e32:	f002 fdd1 	bl	80159d8 <__ssprint_r>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	f040 8167 	bne.w	801310a <_svfprintf_r+0xec2>
 8012e3c:	ab2c      	add	r3, sp, #176	; 0xb0
 8012e3e:	e7f3      	b.n	8012e28 <_svfprintf_r+0xbe0>
 8012e40:	9b03      	ldr	r3, [sp, #12]
 8012e42:	42bb      	cmp	r3, r7
 8012e44:	bfa8      	it	ge
 8012e46:	463b      	movge	r3, r7
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	461e      	mov	r6, r3
 8012e4c:	dd0b      	ble.n	8012e66 <_svfprintf_r+0xc1e>
 8012e4e:	6063      	str	r3, [r4, #4]
 8012e50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e52:	f8c4 8000 	str.w	r8, [r4]
 8012e56:	4433      	add	r3, r6
 8012e58:	9321      	str	r3, [sp, #132]	; 0x84
 8012e5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	2b07      	cmp	r3, #7
 8012e60:	9320      	str	r3, [sp, #128]	; 0x80
 8012e62:	dc5f      	bgt.n	8012f24 <_svfprintf_r+0xcdc>
 8012e64:	3408      	adds	r4, #8
 8012e66:	2e00      	cmp	r6, #0
 8012e68:	bfac      	ite	ge
 8012e6a:	1bbe      	subge	r6, r7, r6
 8012e6c:	463e      	movlt	r6, r7
 8012e6e:	2e00      	cmp	r6, #0
 8012e70:	dd0f      	ble.n	8012e92 <_svfprintf_r+0xc4a>
 8012e72:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012fbc <_svfprintf_r+0xd74>
 8012e76:	f8c4 9000 	str.w	r9, [r4]
 8012e7a:	2e10      	cmp	r6, #16
 8012e7c:	dc5c      	bgt.n	8012f38 <_svfprintf_r+0xcf0>
 8012e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e80:	6066      	str	r6, [r4, #4]
 8012e82:	441e      	add	r6, r3
 8012e84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e86:	9621      	str	r6, [sp, #132]	; 0x84
 8012e88:	3301      	adds	r3, #1
 8012e8a:	2b07      	cmp	r3, #7
 8012e8c:	9320      	str	r3, [sp, #128]	; 0x80
 8012e8e:	dc6a      	bgt.n	8012f66 <_svfprintf_r+0xd1e>
 8012e90:	3408      	adds	r4, #8
 8012e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e94:	9a03      	ldr	r2, [sp, #12]
 8012e96:	4293      	cmp	r3, r2
 8012e98:	db01      	blt.n	8012e9e <_svfprintf_r+0xc56>
 8012e9a:	07e9      	lsls	r1, r5, #31
 8012e9c:	d50d      	bpl.n	8012eba <_svfprintf_r+0xc72>
 8012e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ea0:	6023      	str	r3, [r4, #0]
 8012ea2:	9b08      	ldr	r3, [sp, #32]
 8012ea4:	6063      	str	r3, [r4, #4]
 8012ea6:	9a08      	ldr	r2, [sp, #32]
 8012ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012eaa:	4413      	add	r3, r2
 8012eac:	9321      	str	r3, [sp, #132]	; 0x84
 8012eae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	2b07      	cmp	r3, #7
 8012eb4:	9320      	str	r3, [sp, #128]	; 0x80
 8012eb6:	dc60      	bgt.n	8012f7a <_svfprintf_r+0xd32>
 8012eb8:	3408      	adds	r4, #8
 8012eba:	9b03      	ldr	r3, [sp, #12]
 8012ebc:	9a03      	ldr	r2, [sp, #12]
 8012ebe:	1bde      	subs	r6, r3, r7
 8012ec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ec2:	1ad3      	subs	r3, r2, r3
 8012ec4:	429e      	cmp	r6, r3
 8012ec6:	bfa8      	it	ge
 8012ec8:	461e      	movge	r6, r3
 8012eca:	2e00      	cmp	r6, #0
 8012ecc:	dd0b      	ble.n	8012ee6 <_svfprintf_r+0xc9e>
 8012ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ed0:	6066      	str	r6, [r4, #4]
 8012ed2:	4433      	add	r3, r6
 8012ed4:	9321      	str	r3, [sp, #132]	; 0x84
 8012ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012ed8:	3301      	adds	r3, #1
 8012eda:	4447      	add	r7, r8
 8012edc:	2b07      	cmp	r3, #7
 8012ede:	6027      	str	r7, [r4, #0]
 8012ee0:	9320      	str	r3, [sp, #128]	; 0x80
 8012ee2:	dc54      	bgt.n	8012f8e <_svfprintf_r+0xd46>
 8012ee4:	3408      	adds	r4, #8
 8012ee6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ee8:	9a03      	ldr	r2, [sp, #12]
 8012eea:	2e00      	cmp	r6, #0
 8012eec:	eba2 0303 	sub.w	r3, r2, r3
 8012ef0:	bfac      	ite	ge
 8012ef2:	1b9e      	subge	r6, r3, r6
 8012ef4:	461e      	movlt	r6, r3
 8012ef6:	2e00      	cmp	r6, #0
 8012ef8:	f77f acd7 	ble.w	80128aa <_svfprintf_r+0x662>
 8012efc:	4f2f      	ldr	r7, [pc, #188]	; (8012fbc <_svfprintf_r+0xd74>)
 8012efe:	f04f 0810 	mov.w	r8, #16
 8012f02:	2e10      	cmp	r6, #16
 8012f04:	6027      	str	r7, [r4, #0]
 8012f06:	f77f aee7 	ble.w	8012cd8 <_svfprintf_r+0xa90>
 8012f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f0c:	f8c4 8004 	str.w	r8, [r4, #4]
 8012f10:	3310      	adds	r3, #16
 8012f12:	9321      	str	r3, [sp, #132]	; 0x84
 8012f14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012f16:	3301      	adds	r3, #1
 8012f18:	2b07      	cmp	r3, #7
 8012f1a:	9320      	str	r3, [sp, #128]	; 0x80
 8012f1c:	dc41      	bgt.n	8012fa2 <_svfprintf_r+0xd5a>
 8012f1e:	3408      	adds	r4, #8
 8012f20:	3e10      	subs	r6, #16
 8012f22:	e7ee      	b.n	8012f02 <_svfprintf_r+0xcba>
 8012f24:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f26:	4651      	mov	r1, sl
 8012f28:	4658      	mov	r0, fp
 8012f2a:	f002 fd55 	bl	80159d8 <__ssprint_r>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	f040 80eb 	bne.w	801310a <_svfprintf_r+0xec2>
 8012f34:	ac2c      	add	r4, sp, #176	; 0xb0
 8012f36:	e796      	b.n	8012e66 <_svfprintf_r+0xc1e>
 8012f38:	2310      	movs	r3, #16
 8012f3a:	6063      	str	r3, [r4, #4]
 8012f3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f3e:	3310      	adds	r3, #16
 8012f40:	9321      	str	r3, [sp, #132]	; 0x84
 8012f42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012f44:	3301      	adds	r3, #1
 8012f46:	2b07      	cmp	r3, #7
 8012f48:	9320      	str	r3, [sp, #128]	; 0x80
 8012f4a:	dc02      	bgt.n	8012f52 <_svfprintf_r+0xd0a>
 8012f4c:	3408      	adds	r4, #8
 8012f4e:	3e10      	subs	r6, #16
 8012f50:	e791      	b.n	8012e76 <_svfprintf_r+0xc2e>
 8012f52:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f54:	4651      	mov	r1, sl
 8012f56:	4658      	mov	r0, fp
 8012f58:	f002 fd3e 	bl	80159d8 <__ssprint_r>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	f040 80d4 	bne.w	801310a <_svfprintf_r+0xec2>
 8012f62:	ac2c      	add	r4, sp, #176	; 0xb0
 8012f64:	e7f3      	b.n	8012f4e <_svfprintf_r+0xd06>
 8012f66:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f68:	4651      	mov	r1, sl
 8012f6a:	4658      	mov	r0, fp
 8012f6c:	f002 fd34 	bl	80159d8 <__ssprint_r>
 8012f70:	2800      	cmp	r0, #0
 8012f72:	f040 80ca 	bne.w	801310a <_svfprintf_r+0xec2>
 8012f76:	ac2c      	add	r4, sp, #176	; 0xb0
 8012f78:	e78b      	b.n	8012e92 <_svfprintf_r+0xc4a>
 8012f7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f7c:	4651      	mov	r1, sl
 8012f7e:	4658      	mov	r0, fp
 8012f80:	f002 fd2a 	bl	80159d8 <__ssprint_r>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	f040 80c0 	bne.w	801310a <_svfprintf_r+0xec2>
 8012f8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8012f8c:	e795      	b.n	8012eba <_svfprintf_r+0xc72>
 8012f8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012f90:	4651      	mov	r1, sl
 8012f92:	4658      	mov	r0, fp
 8012f94:	f002 fd20 	bl	80159d8 <__ssprint_r>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	f040 80b6 	bne.w	801310a <_svfprintf_r+0xec2>
 8012f9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012fa0:	e7a1      	b.n	8012ee6 <_svfprintf_r+0xc9e>
 8012fa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8012fa4:	4651      	mov	r1, sl
 8012fa6:	4658      	mov	r0, fp
 8012fa8:	f002 fd16 	bl	80159d8 <__ssprint_r>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	f040 80ac 	bne.w	801310a <_svfprintf_r+0xec2>
 8012fb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8012fb4:	e7b4      	b.n	8012f20 <_svfprintf_r+0xcd8>
 8012fb6:	bf00      	nop
 8012fb8:	08017db8 	.word	0x08017db8
 8012fbc:	08017dca 	.word	0x08017dca
 8012fc0:	9b03      	ldr	r3, [sp, #12]
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	dc01      	bgt.n	8012fca <_svfprintf_r+0xd82>
 8012fc6:	07ea      	lsls	r2, r5, #31
 8012fc8:	d576      	bpl.n	80130b8 <_svfprintf_r+0xe70>
 8012fca:	2301      	movs	r3, #1
 8012fcc:	6063      	str	r3, [r4, #4]
 8012fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fd0:	f8c4 8000 	str.w	r8, [r4]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	9321      	str	r3, [sp, #132]	; 0x84
 8012fd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012fda:	3301      	adds	r3, #1
 8012fdc:	2b07      	cmp	r3, #7
 8012fde:	9320      	str	r3, [sp, #128]	; 0x80
 8012fe0:	dc36      	bgt.n	8013050 <_svfprintf_r+0xe08>
 8012fe2:	3408      	adds	r4, #8
 8012fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fe6:	6023      	str	r3, [r4, #0]
 8012fe8:	9b08      	ldr	r3, [sp, #32]
 8012fea:	6063      	str	r3, [r4, #4]
 8012fec:	9a08      	ldr	r2, [sp, #32]
 8012fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ff0:	4413      	add	r3, r2
 8012ff2:	9321      	str	r3, [sp, #132]	; 0x84
 8012ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	2b07      	cmp	r3, #7
 8012ffa:	9320      	str	r3, [sp, #128]	; 0x80
 8012ffc:	dc31      	bgt.n	8013062 <_svfprintf_r+0xe1a>
 8012ffe:	3408      	adds	r4, #8
 8013000:	2300      	movs	r3, #0
 8013002:	2200      	movs	r2, #0
 8013004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013008:	f7f4 f8bc 	bl	8007184 <__aeabi_dcmpeq>
 801300c:	9b03      	ldr	r3, [sp, #12]
 801300e:	1e5e      	subs	r6, r3, #1
 8013010:	2800      	cmp	r0, #0
 8013012:	d12f      	bne.n	8013074 <_svfprintf_r+0xe2c>
 8013014:	f108 0301 	add.w	r3, r8, #1
 8013018:	e884 0048 	stmia.w	r4, {r3, r6}
 801301c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801301e:	9a03      	ldr	r2, [sp, #12]
 8013020:	3b01      	subs	r3, #1
 8013022:	4413      	add	r3, r2
 8013024:	9321      	str	r3, [sp, #132]	; 0x84
 8013026:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013028:	3301      	adds	r3, #1
 801302a:	2b07      	cmp	r3, #7
 801302c:	9320      	str	r3, [sp, #128]	; 0x80
 801302e:	dd4a      	ble.n	80130c6 <_svfprintf_r+0xe7e>
 8013030:	aa1f      	add	r2, sp, #124	; 0x7c
 8013032:	4651      	mov	r1, sl
 8013034:	4658      	mov	r0, fp
 8013036:	f002 fccf 	bl	80159d8 <__ssprint_r>
 801303a:	2800      	cmp	r0, #0
 801303c:	d165      	bne.n	801310a <_svfprintf_r+0xec2>
 801303e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013040:	ab1b      	add	r3, sp, #108	; 0x6c
 8013042:	6023      	str	r3, [r4, #0]
 8013044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013046:	6063      	str	r3, [r4, #4]
 8013048:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801304a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801304c:	4413      	add	r3, r2
 801304e:	e41c      	b.n	801288a <_svfprintf_r+0x642>
 8013050:	aa1f      	add	r2, sp, #124	; 0x7c
 8013052:	4651      	mov	r1, sl
 8013054:	4658      	mov	r0, fp
 8013056:	f002 fcbf 	bl	80159d8 <__ssprint_r>
 801305a:	2800      	cmp	r0, #0
 801305c:	d155      	bne.n	801310a <_svfprintf_r+0xec2>
 801305e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013060:	e7c0      	b.n	8012fe4 <_svfprintf_r+0xd9c>
 8013062:	aa1f      	add	r2, sp, #124	; 0x7c
 8013064:	4651      	mov	r1, sl
 8013066:	4658      	mov	r0, fp
 8013068:	f002 fcb6 	bl	80159d8 <__ssprint_r>
 801306c:	2800      	cmp	r0, #0
 801306e:	d14c      	bne.n	801310a <_svfprintf_r+0xec2>
 8013070:	ac2c      	add	r4, sp, #176	; 0xb0
 8013072:	e7c5      	b.n	8013000 <_svfprintf_r+0xdb8>
 8013074:	2e00      	cmp	r6, #0
 8013076:	dde3      	ble.n	8013040 <_svfprintf_r+0xdf8>
 8013078:	4f59      	ldr	r7, [pc, #356]	; (80131e0 <_svfprintf_r+0xf98>)
 801307a:	f04f 0810 	mov.w	r8, #16
 801307e:	2e10      	cmp	r6, #16
 8013080:	6027      	str	r7, [r4, #0]
 8013082:	dc04      	bgt.n	801308e <_svfprintf_r+0xe46>
 8013084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013086:	6066      	str	r6, [r4, #4]
 8013088:	441e      	add	r6, r3
 801308a:	9621      	str	r6, [sp, #132]	; 0x84
 801308c:	e7cb      	b.n	8013026 <_svfprintf_r+0xdde>
 801308e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013090:	f8c4 8004 	str.w	r8, [r4, #4]
 8013094:	3310      	adds	r3, #16
 8013096:	9321      	str	r3, [sp, #132]	; 0x84
 8013098:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801309a:	3301      	adds	r3, #1
 801309c:	2b07      	cmp	r3, #7
 801309e:	9320      	str	r3, [sp, #128]	; 0x80
 80130a0:	dc02      	bgt.n	80130a8 <_svfprintf_r+0xe60>
 80130a2:	3408      	adds	r4, #8
 80130a4:	3e10      	subs	r6, #16
 80130a6:	e7ea      	b.n	801307e <_svfprintf_r+0xe36>
 80130a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80130aa:	4651      	mov	r1, sl
 80130ac:	4658      	mov	r0, fp
 80130ae:	f002 fc93 	bl	80159d8 <__ssprint_r>
 80130b2:	bb50      	cbnz	r0, 801310a <_svfprintf_r+0xec2>
 80130b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80130b6:	e7f5      	b.n	80130a4 <_svfprintf_r+0xe5c>
 80130b8:	2301      	movs	r3, #1
 80130ba:	6063      	str	r3, [r4, #4]
 80130bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130be:	f8c4 8000 	str.w	r8, [r4]
 80130c2:	3301      	adds	r3, #1
 80130c4:	e7ae      	b.n	8013024 <_svfprintf_r+0xddc>
 80130c6:	3408      	adds	r4, #8
 80130c8:	e7ba      	b.n	8013040 <_svfprintf_r+0xdf8>
 80130ca:	3408      	adds	r4, #8
 80130cc:	f7ff bbed 	b.w	80128aa <_svfprintf_r+0x662>
 80130d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130d4:	1a9d      	subs	r5, r3, r2
 80130d6:	2d00      	cmp	r5, #0
 80130d8:	f77f abea 	ble.w	80128b0 <_svfprintf_r+0x668>
 80130dc:	2610      	movs	r6, #16
 80130de:	4b41      	ldr	r3, [pc, #260]	; (80131e4 <_svfprintf_r+0xf9c>)
 80130e0:	6023      	str	r3, [r4, #0]
 80130e2:	2d10      	cmp	r5, #16
 80130e4:	dc1b      	bgt.n	801311e <_svfprintf_r+0xed6>
 80130e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130e8:	6065      	str	r5, [r4, #4]
 80130ea:	441d      	add	r5, r3
 80130ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80130ee:	9521      	str	r5, [sp, #132]	; 0x84
 80130f0:	3301      	adds	r3, #1
 80130f2:	2b07      	cmp	r3, #7
 80130f4:	9320      	str	r3, [sp, #128]	; 0x80
 80130f6:	f77f abdb 	ble.w	80128b0 <_svfprintf_r+0x668>
 80130fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80130fc:	4651      	mov	r1, sl
 80130fe:	4658      	mov	r0, fp
 8013100:	f002 fc6a 	bl	80159d8 <__ssprint_r>
 8013104:	2800      	cmp	r0, #0
 8013106:	f43f abd3 	beq.w	80128b0 <_svfprintf_r+0x668>
 801310a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801310e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013114:	bf18      	it	ne
 8013116:	f04f 33ff 	movne.w	r3, #4294967295
 801311a:	f7ff b8b9 	b.w	8012290 <_svfprintf_r+0x48>
 801311e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013120:	6066      	str	r6, [r4, #4]
 8013122:	3310      	adds	r3, #16
 8013124:	9321      	str	r3, [sp, #132]	; 0x84
 8013126:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013128:	3301      	adds	r3, #1
 801312a:	2b07      	cmp	r3, #7
 801312c:	9320      	str	r3, [sp, #128]	; 0x80
 801312e:	dc02      	bgt.n	8013136 <_svfprintf_r+0xeee>
 8013130:	3408      	adds	r4, #8
 8013132:	3d10      	subs	r5, #16
 8013134:	e7d3      	b.n	80130de <_svfprintf_r+0xe96>
 8013136:	aa1f      	add	r2, sp, #124	; 0x7c
 8013138:	4651      	mov	r1, sl
 801313a:	4658      	mov	r0, fp
 801313c:	f002 fc4c 	bl	80159d8 <__ssprint_r>
 8013140:	2800      	cmp	r0, #0
 8013142:	d1e2      	bne.n	801310a <_svfprintf_r+0xec2>
 8013144:	ac2c      	add	r4, sp, #176	; 0xb0
 8013146:	e7f4      	b.n	8013132 <_svfprintf_r+0xeea>
 8013148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801314a:	2b00      	cmp	r3, #0
 801314c:	d0dd      	beq.n	801310a <_svfprintf_r+0xec2>
 801314e:	aa1f      	add	r2, sp, #124	; 0x7c
 8013150:	4651      	mov	r1, sl
 8013152:	4658      	mov	r0, fp
 8013154:	f002 fc40 	bl	80159d8 <__ssprint_r>
 8013158:	e7d7      	b.n	801310a <_svfprintf_r+0xec2>
 801315a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801315e:	4610      	mov	r0, r2
 8013160:	4619      	mov	r1, r3
 8013162:	f7f4 f841 	bl	80071e8 <__aeabi_dcmpun>
 8013166:	2800      	cmp	r0, #0
 8013168:	f43f aa44 	beq.w	80125f4 <_svfprintf_r+0x3ac>
 801316c:	4b1e      	ldr	r3, [pc, #120]	; (80131e8 <_svfprintf_r+0xfa0>)
 801316e:	4a1f      	ldr	r2, [pc, #124]	; (80131ec <_svfprintf_r+0xfa4>)
 8013170:	f7ff ba34 	b.w	80125dc <_svfprintf_r+0x394>
 8013174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013176:	eba3 0308 	sub.w	r3, r3, r8
 801317a:	9303      	str	r3, [sp, #12]
 801317c:	f7ff bab5 	b.w	80126ea <_svfprintf_r+0x4a2>
 8013180:	ea56 0207 	orrs.w	r2, r6, r7
 8013184:	950b      	str	r5, [sp, #44]	; 0x2c
 8013186:	f43f ac2b 	beq.w	80129e0 <_svfprintf_r+0x798>
 801318a:	2b01      	cmp	r3, #1
 801318c:	f43f ac9d 	beq.w	8012aca <_svfprintf_r+0x882>
 8013190:	2b02      	cmp	r3, #2
 8013192:	f43f acbd 	beq.w	8012b10 <_svfprintf_r+0x8c8>
 8013196:	ab2c      	add	r3, sp, #176	; 0xb0
 8013198:	08f1      	lsrs	r1, r6, #3
 801319a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801319e:	08f8      	lsrs	r0, r7, #3
 80131a0:	f006 0207 	and.w	r2, r6, #7
 80131a4:	4607      	mov	r7, r0
 80131a6:	460e      	mov	r6, r1
 80131a8:	3230      	adds	r2, #48	; 0x30
 80131aa:	ea56 0107 	orrs.w	r1, r6, r7
 80131ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80131b2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80131b6:	f47f ac86 	bne.w	8012ac6 <_svfprintf_r+0x87e>
 80131ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131bc:	07c9      	lsls	r1, r1, #31
 80131be:	d506      	bpl.n	80131ce <_svfprintf_r+0xf86>
 80131c0:	2a30      	cmp	r2, #48	; 0x30
 80131c2:	d004      	beq.n	80131ce <_svfprintf_r+0xf86>
 80131c4:	2230      	movs	r2, #48	; 0x30
 80131c6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80131ca:	f1a3 0802 	sub.w	r8, r3, #2
 80131ce:	464e      	mov	r6, r9
 80131d0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80131d4:	eba9 0908 	sub.w	r9, r9, r8
 80131d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80131da:	2700      	movs	r7, #0
 80131dc:	f7ff bad1 	b.w	8012782 <_svfprintf_r+0x53a>
 80131e0:	08017dca 	.word	0x08017dca
 80131e4:	08017dba 	.word	0x08017dba
 80131e8:	08017d8e 	.word	0x08017d8e
 80131ec:	08017d92 	.word	0x08017d92

080131f0 <_user_strerror>:
 80131f0:	2000      	movs	r0, #0
 80131f2:	4770      	bx	lr
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <_vfprintf_r>:
 80131f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	b0bd      	sub	sp, #244	; 0xf4
 80131fe:	4688      	mov	r8, r1
 8013200:	4615      	mov	r5, r2
 8013202:	461c      	mov	r4, r3
 8013204:	461f      	mov	r7, r3
 8013206:	4683      	mov	fp, r0
 8013208:	f002 f8e4 	bl	80153d4 <_localeconv_r>
 801320c:	6803      	ldr	r3, [r0, #0]
 801320e:	930d      	str	r3, [sp, #52]	; 0x34
 8013210:	4618      	mov	r0, r3
 8013212:	f7f3 fb8f 	bl	8006934 <strlen>
 8013216:	9009      	str	r0, [sp, #36]	; 0x24
 8013218:	f1bb 0f00 	cmp.w	fp, #0
 801321c:	d005      	beq.n	801322a <_vfprintf_r+0x32>
 801321e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8013222:	b913      	cbnz	r3, 801322a <_vfprintf_r+0x32>
 8013224:	4658      	mov	r0, fp
 8013226:	f7fd fbc1 	bl	80109ac <__sinit>
 801322a:	4b99      	ldr	r3, [pc, #612]	; (8013490 <_vfprintf_r+0x298>)
 801322c:	4598      	cmp	r8, r3
 801322e:	d137      	bne.n	80132a0 <_vfprintf_r+0xa8>
 8013230:	f8db 8004 	ldr.w	r8, [fp, #4]
 8013234:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8013238:	07d8      	lsls	r0, r3, #31
 801323a:	d407      	bmi.n	801324c <_vfprintf_r+0x54>
 801323c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013240:	0599      	lsls	r1, r3, #22
 8013242:	d403      	bmi.n	801324c <_vfprintf_r+0x54>
 8013244:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8013248:	f7fd fff6 	bl	8011238 <__retarget_lock_acquire_recursive>
 801324c:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8013250:	049a      	lsls	r2, r3, #18
 8013252:	d409      	bmi.n	8013268 <_vfprintf_r+0x70>
 8013254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013258:	f8a8 300c 	strh.w	r3, [r8, #12]
 801325c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8013260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013264:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8013268:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801326c:	071e      	lsls	r6, r3, #28
 801326e:	d502      	bpl.n	8013276 <_vfprintf_r+0x7e>
 8013270:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013274:	bb03      	cbnz	r3, 80132b8 <_vfprintf_r+0xc0>
 8013276:	4641      	mov	r1, r8
 8013278:	4658      	mov	r0, fp
 801327a:	f001 f8df 	bl	801443c <__swsetup_r>
 801327e:	b1d8      	cbz	r0, 80132b8 <_vfprintf_r+0xc0>
 8013280:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8013284:	07dd      	lsls	r5, r3, #31
 8013286:	d407      	bmi.n	8013298 <_vfprintf_r+0xa0>
 8013288:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801328c:	059c      	lsls	r4, r3, #22
 801328e:	d403      	bmi.n	8013298 <_vfprintf_r+0xa0>
 8013290:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8013294:	f7fd ffd2 	bl	801123c <__retarget_lock_release_recursive>
 8013298:	f04f 33ff 	mov.w	r3, #4294967295
 801329c:	930a      	str	r3, [sp, #40]	; 0x28
 801329e:	e026      	b.n	80132ee <_vfprintf_r+0xf6>
 80132a0:	4b7c      	ldr	r3, [pc, #496]	; (8013494 <_vfprintf_r+0x29c>)
 80132a2:	4598      	cmp	r8, r3
 80132a4:	d102      	bne.n	80132ac <_vfprintf_r+0xb4>
 80132a6:	f8db 8008 	ldr.w	r8, [fp, #8]
 80132aa:	e7c3      	b.n	8013234 <_vfprintf_r+0x3c>
 80132ac:	4b7a      	ldr	r3, [pc, #488]	; (8013498 <_vfprintf_r+0x2a0>)
 80132ae:	4598      	cmp	r8, r3
 80132b0:	bf08      	it	eq
 80132b2:	f8db 800c 	ldreq.w	r8, [fp, #12]
 80132b6:	e7bd      	b.n	8013234 <_vfprintf_r+0x3c>
 80132b8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80132bc:	f003 021a 	and.w	r2, r3, #26
 80132c0:	2a0a      	cmp	r2, #10
 80132c2:	d118      	bne.n	80132f6 <_vfprintf_r+0xfe>
 80132c4:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 80132c8:	2a00      	cmp	r2, #0
 80132ca:	db14      	blt.n	80132f6 <_vfprintf_r+0xfe>
 80132cc:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 80132d0:	07d0      	lsls	r0, r2, #31
 80132d2:	d405      	bmi.n	80132e0 <_vfprintf_r+0xe8>
 80132d4:	0599      	lsls	r1, r3, #22
 80132d6:	d403      	bmi.n	80132e0 <_vfprintf_r+0xe8>
 80132d8:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80132dc:	f7fd ffae 	bl	801123c <__retarget_lock_release_recursive>
 80132e0:	4623      	mov	r3, r4
 80132e2:	462a      	mov	r2, r5
 80132e4:	4641      	mov	r1, r8
 80132e6:	4658      	mov	r0, fp
 80132e8:	f000 ffc2 	bl	8014270 <__sbprintf>
 80132ec:	900a      	str	r0, [sp, #40]	; 0x28
 80132ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80132f0:	b03d      	add	sp, #244	; 0xf4
 80132f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f6:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8013488 <_vfprintf_r+0x290>
 80132fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132fe:	2300      	movs	r3, #0
 8013300:	ac2c      	add	r4, sp, #176	; 0xb0
 8013302:	941f      	str	r4, [sp, #124]	; 0x7c
 8013304:	9321      	str	r3, [sp, #132]	; 0x84
 8013306:	9320      	str	r3, [sp, #128]	; 0x80
 8013308:	9505      	str	r5, [sp, #20]
 801330a:	9303      	str	r3, [sp, #12]
 801330c:	9311      	str	r3, [sp, #68]	; 0x44
 801330e:	9310      	str	r3, [sp, #64]	; 0x40
 8013310:	930a      	str	r3, [sp, #40]	; 0x28
 8013312:	9d05      	ldr	r5, [sp, #20]
 8013314:	462b      	mov	r3, r5
 8013316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801331a:	b112      	cbz	r2, 8013322 <_vfprintf_r+0x12a>
 801331c:	2a25      	cmp	r2, #37	; 0x25
 801331e:	f040 8083 	bne.w	8013428 <_vfprintf_r+0x230>
 8013322:	9b05      	ldr	r3, [sp, #20]
 8013324:	1aee      	subs	r6, r5, r3
 8013326:	d00d      	beq.n	8013344 <_vfprintf_r+0x14c>
 8013328:	e884 0048 	stmia.w	r4, {r3, r6}
 801332c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801332e:	4433      	add	r3, r6
 8013330:	9321      	str	r3, [sp, #132]	; 0x84
 8013332:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013334:	3301      	adds	r3, #1
 8013336:	2b07      	cmp	r3, #7
 8013338:	9320      	str	r3, [sp, #128]	; 0x80
 801333a:	dc77      	bgt.n	801342c <_vfprintf_r+0x234>
 801333c:	3408      	adds	r4, #8
 801333e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013340:	4433      	add	r3, r6
 8013342:	930a      	str	r3, [sp, #40]	; 0x28
 8013344:	782b      	ldrb	r3, [r5, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	f000 8739 	beq.w	80141be <_vfprintf_r+0xfc6>
 801334c:	2300      	movs	r3, #0
 801334e:	1c69      	adds	r1, r5, #1
 8013350:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8013354:	461a      	mov	r2, r3
 8013356:	f04f 3aff 	mov.w	sl, #4294967295
 801335a:	930b      	str	r3, [sp, #44]	; 0x2c
 801335c:	461d      	mov	r5, r3
 801335e:	200a      	movs	r0, #10
 8013360:	1c4e      	adds	r6, r1, #1
 8013362:	7809      	ldrb	r1, [r1, #0]
 8013364:	9605      	str	r6, [sp, #20]
 8013366:	9102      	str	r1, [sp, #8]
 8013368:	9902      	ldr	r1, [sp, #8]
 801336a:	3920      	subs	r1, #32
 801336c:	2958      	cmp	r1, #88	; 0x58
 801336e:	f200 841d 	bhi.w	8013bac <_vfprintf_r+0x9b4>
 8013372:	e8df f011 	tbh	[pc, r1, lsl #1]
 8013376:	00b3      	.short	0x00b3
 8013378:	041b041b 	.word	0x041b041b
 801337c:	041b00b8 	.word	0x041b00b8
 8013380:	041b041b 	.word	0x041b041b
 8013384:	041b041b 	.word	0x041b041b
 8013388:	00bb041b 	.word	0x00bb041b
 801338c:	041b0065 	.word	0x041b0065
 8013390:	00c700c4 	.word	0x00c700c4
 8013394:	00e4041b 	.word	0x00e4041b
 8013398:	00e700e7 	.word	0x00e700e7
 801339c:	00e700e7 	.word	0x00e700e7
 80133a0:	00e700e7 	.word	0x00e700e7
 80133a4:	00e700e7 	.word	0x00e700e7
 80133a8:	041b00e7 	.word	0x041b00e7
 80133ac:	041b041b 	.word	0x041b041b
 80133b0:	041b041b 	.word	0x041b041b
 80133b4:	041b041b 	.word	0x041b041b
 80133b8:	041b041b 	.word	0x041b041b
 80133bc:	011b041b 	.word	0x011b041b
 80133c0:	041b0131 	.word	0x041b0131
 80133c4:	041b0131 	.word	0x041b0131
 80133c8:	041b041b 	.word	0x041b041b
 80133cc:	00fa041b 	.word	0x00fa041b
 80133d0:	041b041b 	.word	0x041b041b
 80133d4:	041b0346 	.word	0x041b0346
 80133d8:	041b041b 	.word	0x041b041b
 80133dc:	041b041b 	.word	0x041b041b
 80133e0:	041b03ad 	.word	0x041b03ad
 80133e4:	0093041b 	.word	0x0093041b
 80133e8:	041b041b 	.word	0x041b041b
 80133ec:	041b041b 	.word	0x041b041b
 80133f0:	041b041b 	.word	0x041b041b
 80133f4:	041b041b 	.word	0x041b041b
 80133f8:	041b041b 	.word	0x041b041b
 80133fc:	006b010d 	.word	0x006b010d
 8013400:	01310131 	.word	0x01310131
 8013404:	00fd0131 	.word	0x00fd0131
 8013408:	041b006b 	.word	0x041b006b
 801340c:	0100041b 	.word	0x0100041b
 8013410:	0328041b 	.word	0x0328041b
 8013414:	037c0348 	.word	0x037c0348
 8013418:	041b0107 	.word	0x041b0107
 801341c:	041b038d 	.word	0x041b038d
 8013420:	041b03af 	.word	0x041b03af
 8013424:	03c7041b 	.word	0x03c7041b
 8013428:	461d      	mov	r5, r3
 801342a:	e773      	b.n	8013314 <_vfprintf_r+0x11c>
 801342c:	aa1f      	add	r2, sp, #124	; 0x7c
 801342e:	4641      	mov	r1, r8
 8013430:	4658      	mov	r0, fp
 8013432:	f002 fb4b 	bl	8015acc <__sprint_r>
 8013436:	2800      	cmp	r0, #0
 8013438:	f040 8699 	bne.w	801416e <_vfprintf_r+0xf76>
 801343c:	ac2c      	add	r4, sp, #176	; 0xb0
 801343e:	e77e      	b.n	801333e <_vfprintf_r+0x146>
 8013440:	2301      	movs	r3, #1
 8013442:	222b      	movs	r2, #43	; 0x2b
 8013444:	9905      	ldr	r1, [sp, #20]
 8013446:	e78b      	b.n	8013360 <_vfprintf_r+0x168>
 8013448:	460f      	mov	r7, r1
 801344a:	e7fb      	b.n	8013444 <_vfprintf_r+0x24c>
 801344c:	b10b      	cbz	r3, 8013452 <_vfprintf_r+0x25a>
 801344e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013452:	06aa      	lsls	r2, r5, #26
 8013454:	f140 80b0 	bpl.w	80135b8 <_vfprintf_r+0x3c0>
 8013458:	3707      	adds	r7, #7
 801345a:	f027 0707 	bic.w	r7, r7, #7
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013466:	9304      	str	r3, [sp, #16]
 8013468:	2e00      	cmp	r6, #0
 801346a:	f177 0300 	sbcs.w	r3, r7, #0
 801346e:	da06      	bge.n	801347e <_vfprintf_r+0x286>
 8013470:	4276      	negs	r6, r6
 8013472:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013476:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801347a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801347e:	2301      	movs	r3, #1
 8013480:	e2d0      	b.n	8013a24 <_vfprintf_r+0x82c>
 8013482:	bf00      	nop
 8013484:	f3af 8000 	nop.w
	...
 8013490:	080176a0 	.word	0x080176a0
 8013494:	080176c0 	.word	0x080176c0
 8013498:	08017680 	.word	0x08017680
 801349c:	b10b      	cbz	r3, 80134a2 <_vfprintf_r+0x2aa>
 801349e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80134a2:	4ba2      	ldr	r3, [pc, #648]	; (801372c <_vfprintf_r+0x534>)
 80134a4:	9311      	str	r3, [sp, #68]	; 0x44
 80134a6:	06a9      	lsls	r1, r5, #26
 80134a8:	f140 8331 	bpl.w	8013b0e <_vfprintf_r+0x916>
 80134ac:	3707      	adds	r7, #7
 80134ae:	f027 0707 	bic.w	r7, r7, #7
 80134b2:	f107 0308 	add.w	r3, r7, #8
 80134b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80134ba:	9304      	str	r3, [sp, #16]
 80134bc:	07eb      	lsls	r3, r5, #31
 80134be:	d50b      	bpl.n	80134d8 <_vfprintf_r+0x2e0>
 80134c0:	ea56 0307 	orrs.w	r3, r6, r7
 80134c4:	d008      	beq.n	80134d8 <_vfprintf_r+0x2e0>
 80134c6:	2330      	movs	r3, #48	; 0x30
 80134c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80134cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80134d0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80134d4:	f045 0502 	orr.w	r5, r5, #2
 80134d8:	2302      	movs	r3, #2
 80134da:	e2a0      	b.n	8013a1e <_vfprintf_r+0x826>
 80134dc:	2a00      	cmp	r2, #0
 80134de:	d1b1      	bne.n	8013444 <_vfprintf_r+0x24c>
 80134e0:	2301      	movs	r3, #1
 80134e2:	2220      	movs	r2, #32
 80134e4:	e7ae      	b.n	8013444 <_vfprintf_r+0x24c>
 80134e6:	f045 0501 	orr.w	r5, r5, #1
 80134ea:	e7ab      	b.n	8013444 <_vfprintf_r+0x24c>
 80134ec:	683e      	ldr	r6, [r7, #0]
 80134ee:	960b      	str	r6, [sp, #44]	; 0x2c
 80134f0:	2e00      	cmp	r6, #0
 80134f2:	f107 0104 	add.w	r1, r7, #4
 80134f6:	daa7      	bge.n	8013448 <_vfprintf_r+0x250>
 80134f8:	4276      	negs	r6, r6
 80134fa:	960b      	str	r6, [sp, #44]	; 0x2c
 80134fc:	460f      	mov	r7, r1
 80134fe:	f045 0504 	orr.w	r5, r5, #4
 8013502:	e79f      	b.n	8013444 <_vfprintf_r+0x24c>
 8013504:	9905      	ldr	r1, [sp, #20]
 8013506:	1c4e      	adds	r6, r1, #1
 8013508:	7809      	ldrb	r1, [r1, #0]
 801350a:	9102      	str	r1, [sp, #8]
 801350c:	292a      	cmp	r1, #42	; 0x2a
 801350e:	d010      	beq.n	8013532 <_vfprintf_r+0x33a>
 8013510:	f04f 0a00 	mov.w	sl, #0
 8013514:	9605      	str	r6, [sp, #20]
 8013516:	9902      	ldr	r1, [sp, #8]
 8013518:	3930      	subs	r1, #48	; 0x30
 801351a:	2909      	cmp	r1, #9
 801351c:	f63f af24 	bhi.w	8013368 <_vfprintf_r+0x170>
 8013520:	fb00 1a0a 	mla	sl, r0, sl, r1
 8013524:	9905      	ldr	r1, [sp, #20]
 8013526:	460e      	mov	r6, r1
 8013528:	f816 1b01 	ldrb.w	r1, [r6], #1
 801352c:	9102      	str	r1, [sp, #8]
 801352e:	9605      	str	r6, [sp, #20]
 8013530:	e7f1      	b.n	8013516 <_vfprintf_r+0x31e>
 8013532:	6839      	ldr	r1, [r7, #0]
 8013534:	9605      	str	r6, [sp, #20]
 8013536:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 801353a:	3704      	adds	r7, #4
 801353c:	e782      	b.n	8013444 <_vfprintf_r+0x24c>
 801353e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8013542:	e77f      	b.n	8013444 <_vfprintf_r+0x24c>
 8013544:	2100      	movs	r1, #0
 8013546:	910b      	str	r1, [sp, #44]	; 0x2c
 8013548:	9902      	ldr	r1, [sp, #8]
 801354a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801354c:	3930      	subs	r1, #48	; 0x30
 801354e:	fb00 1106 	mla	r1, r0, r6, r1
 8013552:	910b      	str	r1, [sp, #44]	; 0x2c
 8013554:	9905      	ldr	r1, [sp, #20]
 8013556:	460e      	mov	r6, r1
 8013558:	f816 1b01 	ldrb.w	r1, [r6], #1
 801355c:	9102      	str	r1, [sp, #8]
 801355e:	9902      	ldr	r1, [sp, #8]
 8013560:	9605      	str	r6, [sp, #20]
 8013562:	3930      	subs	r1, #48	; 0x30
 8013564:	2909      	cmp	r1, #9
 8013566:	d9ef      	bls.n	8013548 <_vfprintf_r+0x350>
 8013568:	e6fe      	b.n	8013368 <_vfprintf_r+0x170>
 801356a:	f045 0508 	orr.w	r5, r5, #8
 801356e:	e769      	b.n	8013444 <_vfprintf_r+0x24c>
 8013570:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8013574:	e766      	b.n	8013444 <_vfprintf_r+0x24c>
 8013576:	9905      	ldr	r1, [sp, #20]
 8013578:	7809      	ldrb	r1, [r1, #0]
 801357a:	296c      	cmp	r1, #108	; 0x6c
 801357c:	d105      	bne.n	801358a <_vfprintf_r+0x392>
 801357e:	9905      	ldr	r1, [sp, #20]
 8013580:	3101      	adds	r1, #1
 8013582:	9105      	str	r1, [sp, #20]
 8013584:	f045 0520 	orr.w	r5, r5, #32
 8013588:	e75c      	b.n	8013444 <_vfprintf_r+0x24c>
 801358a:	f045 0510 	orr.w	r5, r5, #16
 801358e:	e759      	b.n	8013444 <_vfprintf_r+0x24c>
 8013590:	1d3b      	adds	r3, r7, #4
 8013592:	9304      	str	r3, [sp, #16]
 8013594:	2600      	movs	r6, #0
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801359c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80135a0:	f04f 0a01 	mov.w	sl, #1
 80135a4:	9608      	str	r6, [sp, #32]
 80135a6:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 80135aa:	e11e      	b.n	80137ea <_vfprintf_r+0x5f2>
 80135ac:	b10b      	cbz	r3, 80135b2 <_vfprintf_r+0x3ba>
 80135ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80135b2:	f045 0510 	orr.w	r5, r5, #16
 80135b6:	e74c      	b.n	8013452 <_vfprintf_r+0x25a>
 80135b8:	f015 0f10 	tst.w	r5, #16
 80135bc:	f107 0304 	add.w	r3, r7, #4
 80135c0:	d003      	beq.n	80135ca <_vfprintf_r+0x3d2>
 80135c2:	683e      	ldr	r6, [r7, #0]
 80135c4:	9304      	str	r3, [sp, #16]
 80135c6:	17f7      	asrs	r7, r6, #31
 80135c8:	e74e      	b.n	8013468 <_vfprintf_r+0x270>
 80135ca:	683e      	ldr	r6, [r7, #0]
 80135cc:	9304      	str	r3, [sp, #16]
 80135ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80135d2:	bf18      	it	ne
 80135d4:	b236      	sxthne	r6, r6
 80135d6:	e7f6      	b.n	80135c6 <_vfprintf_r+0x3ce>
 80135d8:	b10b      	cbz	r3, 80135de <_vfprintf_r+0x3e6>
 80135da:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80135de:	3707      	adds	r7, #7
 80135e0:	f027 0707 	bic.w	r7, r7, #7
 80135e4:	f107 0308 	add.w	r3, r7, #8
 80135e8:	9304      	str	r3, [sp, #16]
 80135ea:	ed97 7b00 	vldr	d7, [r7]
 80135ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80135f2:	9b06      	ldr	r3, [sp, #24]
 80135f4:	9312      	str	r3, [sp, #72]	; 0x48
 80135f6:	9b07      	ldr	r3, [sp, #28]
 80135f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80135fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013602:	4b4b      	ldr	r3, [pc, #300]	; (8013730 <_vfprintf_r+0x538>)
 8013604:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013608:	f7f3 fdee 	bl	80071e8 <__aeabi_dcmpun>
 801360c:	2800      	cmp	r0, #0
 801360e:	f040 85e3 	bne.w	80141d8 <_vfprintf_r+0xfe0>
 8013612:	f04f 32ff 	mov.w	r2, #4294967295
 8013616:	4b46      	ldr	r3, [pc, #280]	; (8013730 <_vfprintf_r+0x538>)
 8013618:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801361c:	f7f3 fdc6 	bl	80071ac <__aeabi_dcmple>
 8013620:	2800      	cmp	r0, #0
 8013622:	f040 85d9 	bne.w	80141d8 <_vfprintf_r+0xfe0>
 8013626:	2200      	movs	r2, #0
 8013628:	2300      	movs	r3, #0
 801362a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801362e:	f7f3 fdb3 	bl	8007198 <__aeabi_dcmplt>
 8013632:	b110      	cbz	r0, 801363a <_vfprintf_r+0x442>
 8013634:	232d      	movs	r3, #45	; 0x2d
 8013636:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801363a:	4b3e      	ldr	r3, [pc, #248]	; (8013734 <_vfprintf_r+0x53c>)
 801363c:	4a3e      	ldr	r2, [pc, #248]	; (8013738 <_vfprintf_r+0x540>)
 801363e:	9902      	ldr	r1, [sp, #8]
 8013640:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8013644:	2947      	cmp	r1, #71	; 0x47
 8013646:	bfcc      	ite	gt
 8013648:	4691      	movgt	r9, r2
 801364a:	4699      	movle	r9, r3
 801364c:	f04f 0a03 	mov.w	sl, #3
 8013650:	2600      	movs	r6, #0
 8013652:	9608      	str	r6, [sp, #32]
 8013654:	e0c9      	b.n	80137ea <_vfprintf_r+0x5f2>
 8013656:	f1ba 3fff 	cmp.w	sl, #4294967295
 801365a:	d022      	beq.n	80136a2 <_vfprintf_r+0x4aa>
 801365c:	9b02      	ldr	r3, [sp, #8]
 801365e:	f023 0320 	bic.w	r3, r3, #32
 8013662:	2b47      	cmp	r3, #71	; 0x47
 8013664:	d104      	bne.n	8013670 <_vfprintf_r+0x478>
 8013666:	f1ba 0f00 	cmp.w	sl, #0
 801366a:	bf08      	it	eq
 801366c:	f04f 0a01 	moveq.w	sl, #1
 8013670:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8013674:	9314      	str	r3, [sp, #80]	; 0x50
 8013676:	9b07      	ldr	r3, [sp, #28]
 8013678:	2b00      	cmp	r3, #0
 801367a:	da15      	bge.n	80136a8 <_vfprintf_r+0x4b0>
 801367c:	9b06      	ldr	r3, [sp, #24]
 801367e:	930e      	str	r3, [sp, #56]	; 0x38
 8013680:	9b07      	ldr	r3, [sp, #28]
 8013682:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013686:	930f      	str	r3, [sp, #60]	; 0x3c
 8013688:	232d      	movs	r3, #45	; 0x2d
 801368a:	930c      	str	r3, [sp, #48]	; 0x30
 801368c:	9b02      	ldr	r3, [sp, #8]
 801368e:	f023 0720 	bic.w	r7, r3, #32
 8013692:	2f46      	cmp	r7, #70	; 0x46
 8013694:	d00e      	beq.n	80136b4 <_vfprintf_r+0x4bc>
 8013696:	2f45      	cmp	r7, #69	; 0x45
 8013698:	d146      	bne.n	8013728 <_vfprintf_r+0x530>
 801369a:	f10a 0601 	add.w	r6, sl, #1
 801369e:	2102      	movs	r1, #2
 80136a0:	e00a      	b.n	80136b8 <_vfprintf_r+0x4c0>
 80136a2:	f04f 0a06 	mov.w	sl, #6
 80136a6:	e7e3      	b.n	8013670 <_vfprintf_r+0x478>
 80136a8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80136ac:	2300      	movs	r3, #0
 80136ae:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80136b2:	e7ea      	b.n	801368a <_vfprintf_r+0x492>
 80136b4:	4656      	mov	r6, sl
 80136b6:	2103      	movs	r1, #3
 80136b8:	ab1d      	add	r3, sp, #116	; 0x74
 80136ba:	9301      	str	r3, [sp, #4]
 80136bc:	ab1a      	add	r3, sp, #104	; 0x68
 80136be:	9300      	str	r3, [sp, #0]
 80136c0:	4632      	mov	r2, r6
 80136c2:	ab19      	add	r3, sp, #100	; 0x64
 80136c4:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80136c8:	4658      	mov	r0, fp
 80136ca:	f001 f839 	bl	8014740 <_dtoa_r>
 80136ce:	2f47      	cmp	r7, #71	; 0x47
 80136d0:	4681      	mov	r9, r0
 80136d2:	d102      	bne.n	80136da <_vfprintf_r+0x4e2>
 80136d4:	07eb      	lsls	r3, r5, #31
 80136d6:	f140 858c 	bpl.w	80141f2 <_vfprintf_r+0xffa>
 80136da:	eb09 0306 	add.w	r3, r9, r6
 80136de:	2f46      	cmp	r7, #70	; 0x46
 80136e0:	9303      	str	r3, [sp, #12]
 80136e2:	d111      	bne.n	8013708 <_vfprintf_r+0x510>
 80136e4:	f899 3000 	ldrb.w	r3, [r9]
 80136e8:	2b30      	cmp	r3, #48	; 0x30
 80136ea:	d109      	bne.n	8013700 <_vfprintf_r+0x508>
 80136ec:	2200      	movs	r2, #0
 80136ee:	2300      	movs	r3, #0
 80136f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80136f4:	f7f3 fd46 	bl	8007184 <__aeabi_dcmpeq>
 80136f8:	b910      	cbnz	r0, 8013700 <_vfprintf_r+0x508>
 80136fa:	f1c6 0601 	rsb	r6, r6, #1
 80136fe:	9619      	str	r6, [sp, #100]	; 0x64
 8013700:	9a03      	ldr	r2, [sp, #12]
 8013702:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013704:	441a      	add	r2, r3
 8013706:	9203      	str	r2, [sp, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	2300      	movs	r3, #0
 801370c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013710:	f7f3 fd38 	bl	8007184 <__aeabi_dcmpeq>
 8013714:	b990      	cbnz	r0, 801373c <_vfprintf_r+0x544>
 8013716:	2230      	movs	r2, #48	; 0x30
 8013718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801371a:	9903      	ldr	r1, [sp, #12]
 801371c:	4299      	cmp	r1, r3
 801371e:	d90f      	bls.n	8013740 <_vfprintf_r+0x548>
 8013720:	1c59      	adds	r1, r3, #1
 8013722:	911d      	str	r1, [sp, #116]	; 0x74
 8013724:	701a      	strb	r2, [r3, #0]
 8013726:	e7f7      	b.n	8013718 <_vfprintf_r+0x520>
 8013728:	4656      	mov	r6, sl
 801372a:	e7b8      	b.n	801369e <_vfprintf_r+0x4a6>
 801372c:	08017d96 	.word	0x08017d96
 8013730:	7fefffff 	.word	0x7fefffff
 8013734:	08017d86 	.word	0x08017d86
 8013738:	08017d8a 	.word	0x08017d8a
 801373c:	9b03      	ldr	r3, [sp, #12]
 801373e:	931d      	str	r3, [sp, #116]	; 0x74
 8013740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013742:	2f47      	cmp	r7, #71	; 0x47
 8013744:	eba3 0309 	sub.w	r3, r3, r9
 8013748:	9303      	str	r3, [sp, #12]
 801374a:	f040 80f8 	bne.w	801393e <_vfprintf_r+0x746>
 801374e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013750:	1cdf      	adds	r7, r3, #3
 8013752:	db02      	blt.n	801375a <_vfprintf_r+0x562>
 8013754:	459a      	cmp	sl, r3
 8013756:	f280 811f 	bge.w	8013998 <_vfprintf_r+0x7a0>
 801375a:	9b02      	ldr	r3, [sp, #8]
 801375c:	3b02      	subs	r3, #2
 801375e:	9302      	str	r3, [sp, #8]
 8013760:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013762:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8013766:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 801376a:	1e53      	subs	r3, r2, #1
 801376c:	2b00      	cmp	r3, #0
 801376e:	9319      	str	r3, [sp, #100]	; 0x64
 8013770:	bfb6      	itet	lt
 8013772:	f1c2 0301 	rsblt	r3, r2, #1
 8013776:	222b      	movge	r2, #43	; 0x2b
 8013778:	222d      	movlt	r2, #45	; 0x2d
 801377a:	2b09      	cmp	r3, #9
 801377c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8013780:	f340 80fa 	ble.w	8013978 <_vfprintf_r+0x780>
 8013784:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8013788:	260a      	movs	r6, #10
 801378a:	fb93 f0f6 	sdiv	r0, r3, r6
 801378e:	fb06 3310 	mls	r3, r6, r0, r3
 8013792:	3330      	adds	r3, #48	; 0x30
 8013794:	2809      	cmp	r0, #9
 8013796:	f802 3c01 	strb.w	r3, [r2, #-1]
 801379a:	f102 31ff 	add.w	r1, r2, #4294967295
 801379e:	4603      	mov	r3, r0
 80137a0:	f300 80e3 	bgt.w	801396a <_vfprintf_r+0x772>
 80137a4:	3330      	adds	r3, #48	; 0x30
 80137a6:	f801 3c01 	strb.w	r3, [r1, #-1]
 80137aa:	3a02      	subs	r2, #2
 80137ac:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80137b0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80137b4:	4282      	cmp	r2, r0
 80137b6:	4619      	mov	r1, r3
 80137b8:	f0c0 80d9 	bcc.w	801396e <_vfprintf_r+0x776>
 80137bc:	9a03      	ldr	r2, [sp, #12]
 80137be:	ab1b      	add	r3, sp, #108	; 0x6c
 80137c0:	1acb      	subs	r3, r1, r3
 80137c2:	2a01      	cmp	r2, #1
 80137c4:	9310      	str	r3, [sp, #64]	; 0x40
 80137c6:	eb03 0a02 	add.w	sl, r3, r2
 80137ca:	dc03      	bgt.n	80137d4 <_vfprintf_r+0x5dc>
 80137cc:	f015 0301 	ands.w	r3, r5, #1
 80137d0:	9308      	str	r3, [sp, #32]
 80137d2:	d003      	beq.n	80137dc <_vfprintf_r+0x5e4>
 80137d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d6:	449a      	add	sl, r3
 80137d8:	2300      	movs	r3, #0
 80137da:	9308      	str	r3, [sp, #32]
 80137dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137de:	b113      	cbz	r3, 80137e6 <_vfprintf_r+0x5ee>
 80137e0:	232d      	movs	r3, #45	; 0x2d
 80137e2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80137e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80137e8:	2600      	movs	r6, #0
 80137ea:	4556      	cmp	r6, sl
 80137ec:	4633      	mov	r3, r6
 80137ee:	bfb8      	it	lt
 80137f0:	4653      	movlt	r3, sl
 80137f2:	930c      	str	r3, [sp, #48]	; 0x30
 80137f4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80137f8:	b113      	cbz	r3, 8013800 <_vfprintf_r+0x608>
 80137fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137fc:	3301      	adds	r3, #1
 80137fe:	930c      	str	r3, [sp, #48]	; 0x30
 8013800:	f015 0302 	ands.w	r3, r5, #2
 8013804:	9314      	str	r3, [sp, #80]	; 0x50
 8013806:	bf1e      	ittt	ne
 8013808:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 801380a:	3302      	addne	r3, #2
 801380c:	930c      	strne	r3, [sp, #48]	; 0x30
 801380e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8013812:	9315      	str	r3, [sp, #84]	; 0x54
 8013814:	d114      	bne.n	8013840 <_vfprintf_r+0x648>
 8013816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801381a:	1a9f      	subs	r7, r3, r2
 801381c:	2f00      	cmp	r7, #0
 801381e:	dd0f      	ble.n	8013840 <_vfprintf_r+0x648>
 8013820:	4ba8      	ldr	r3, [pc, #672]	; (8013ac4 <_vfprintf_r+0x8cc>)
 8013822:	6023      	str	r3, [r4, #0]
 8013824:	2f10      	cmp	r7, #16
 8013826:	f300 81d3 	bgt.w	8013bd0 <_vfprintf_r+0x9d8>
 801382a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801382c:	6067      	str	r7, [r4, #4]
 801382e:	441f      	add	r7, r3
 8013830:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013832:	9721      	str	r7, [sp, #132]	; 0x84
 8013834:	3301      	adds	r3, #1
 8013836:	2b07      	cmp	r3, #7
 8013838:	9320      	str	r3, [sp, #128]	; 0x80
 801383a:	f300 81e0 	bgt.w	8013bfe <_vfprintf_r+0xa06>
 801383e:	3408      	adds	r4, #8
 8013840:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8013844:	b173      	cbz	r3, 8013864 <_vfprintf_r+0x66c>
 8013846:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 801384a:	6023      	str	r3, [r4, #0]
 801384c:	2301      	movs	r3, #1
 801384e:	6063      	str	r3, [r4, #4]
 8013850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013852:	3301      	adds	r3, #1
 8013854:	9321      	str	r3, [sp, #132]	; 0x84
 8013856:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013858:	3301      	adds	r3, #1
 801385a:	2b07      	cmp	r3, #7
 801385c:	9320      	str	r3, [sp, #128]	; 0x80
 801385e:	f300 81d8 	bgt.w	8013c12 <_vfprintf_r+0xa1a>
 8013862:	3408      	adds	r4, #8
 8013864:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013866:	b16b      	cbz	r3, 8013884 <_vfprintf_r+0x68c>
 8013868:	ab18      	add	r3, sp, #96	; 0x60
 801386a:	6023      	str	r3, [r4, #0]
 801386c:	2302      	movs	r3, #2
 801386e:	6063      	str	r3, [r4, #4]
 8013870:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013872:	3302      	adds	r3, #2
 8013874:	9321      	str	r3, [sp, #132]	; 0x84
 8013876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013878:	3301      	adds	r3, #1
 801387a:	2b07      	cmp	r3, #7
 801387c:	9320      	str	r3, [sp, #128]	; 0x80
 801387e:	f300 81d2 	bgt.w	8013c26 <_vfprintf_r+0xa2e>
 8013882:	3408      	adds	r4, #8
 8013884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013886:	2b80      	cmp	r3, #128	; 0x80
 8013888:	d114      	bne.n	80138b4 <_vfprintf_r+0x6bc>
 801388a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801388c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801388e:	1a9f      	subs	r7, r3, r2
 8013890:	2f00      	cmp	r7, #0
 8013892:	dd0f      	ble.n	80138b4 <_vfprintf_r+0x6bc>
 8013894:	4b8c      	ldr	r3, [pc, #560]	; (8013ac8 <_vfprintf_r+0x8d0>)
 8013896:	6023      	str	r3, [r4, #0]
 8013898:	2f10      	cmp	r7, #16
 801389a:	f300 81ce 	bgt.w	8013c3a <_vfprintf_r+0xa42>
 801389e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138a0:	6067      	str	r7, [r4, #4]
 80138a2:	441f      	add	r7, r3
 80138a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80138a6:	9721      	str	r7, [sp, #132]	; 0x84
 80138a8:	3301      	adds	r3, #1
 80138aa:	2b07      	cmp	r3, #7
 80138ac:	9320      	str	r3, [sp, #128]	; 0x80
 80138ae:	f300 81dd 	bgt.w	8013c6c <_vfprintf_r+0xa74>
 80138b2:	3408      	adds	r4, #8
 80138b4:	eba6 060a 	sub.w	r6, r6, sl
 80138b8:	2e00      	cmp	r6, #0
 80138ba:	dd0f      	ble.n	80138dc <_vfprintf_r+0x6e4>
 80138bc:	4f82      	ldr	r7, [pc, #520]	; (8013ac8 <_vfprintf_r+0x8d0>)
 80138be:	6027      	str	r7, [r4, #0]
 80138c0:	2e10      	cmp	r6, #16
 80138c2:	f300 81dd 	bgt.w	8013c80 <_vfprintf_r+0xa88>
 80138c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80138c8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80138ca:	6066      	str	r6, [r4, #4]
 80138cc:	3301      	adds	r3, #1
 80138ce:	4406      	add	r6, r0
 80138d0:	2b07      	cmp	r3, #7
 80138d2:	9621      	str	r6, [sp, #132]	; 0x84
 80138d4:	9320      	str	r3, [sp, #128]	; 0x80
 80138d6:	f300 81ea 	bgt.w	8013cae <_vfprintf_r+0xab6>
 80138da:	3408      	adds	r4, #8
 80138dc:	05e9      	lsls	r1, r5, #23
 80138de:	f100 81f0 	bmi.w	8013cc2 <_vfprintf_r+0xaca>
 80138e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138e4:	e884 0600 	stmia.w	r4, {r9, sl}
 80138e8:	4453      	add	r3, sl
 80138ea:	9321      	str	r3, [sp, #132]	; 0x84
 80138ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80138ee:	3301      	adds	r3, #1
 80138f0:	2b07      	cmp	r3, #7
 80138f2:	9320      	str	r3, [sp, #128]	; 0x80
 80138f4:	f340 841b 	ble.w	801412e <_vfprintf_r+0xf36>
 80138f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80138fa:	4641      	mov	r1, r8
 80138fc:	4658      	mov	r0, fp
 80138fe:	f002 f8e5 	bl	8015acc <__sprint_r>
 8013902:	2800      	cmp	r0, #0
 8013904:	f040 8433 	bne.w	801416e <_vfprintf_r+0xf76>
 8013908:	ac2c      	add	r4, sp, #176	; 0xb0
 801390a:	0768      	lsls	r0, r5, #29
 801390c:	f100 8412 	bmi.w	8014134 <_vfprintf_r+0xf3c>
 8013910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013916:	428a      	cmp	r2, r1
 8013918:	bfac      	ite	ge
 801391a:	189b      	addge	r3, r3, r2
 801391c:	185b      	addlt	r3, r3, r1
 801391e:	930a      	str	r3, [sp, #40]	; 0x28
 8013920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013922:	b13b      	cbz	r3, 8013934 <_vfprintf_r+0x73c>
 8013924:	aa1f      	add	r2, sp, #124	; 0x7c
 8013926:	4641      	mov	r1, r8
 8013928:	4658      	mov	r0, fp
 801392a:	f002 f8cf 	bl	8015acc <__sprint_r>
 801392e:	2800      	cmp	r0, #0
 8013930:	f040 841d 	bne.w	801416e <_vfprintf_r+0xf76>
 8013934:	2300      	movs	r3, #0
 8013936:	9320      	str	r3, [sp, #128]	; 0x80
 8013938:	9f04      	ldr	r7, [sp, #16]
 801393a:	ac2c      	add	r4, sp, #176	; 0xb0
 801393c:	e4e9      	b.n	8013312 <_vfprintf_r+0x11a>
 801393e:	9b02      	ldr	r3, [sp, #8]
 8013940:	2b65      	cmp	r3, #101	; 0x65
 8013942:	f77f af0d 	ble.w	8013760 <_vfprintf_r+0x568>
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	2b66      	cmp	r3, #102	; 0x66
 801394a:	d125      	bne.n	8013998 <_vfprintf_r+0x7a0>
 801394c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801394e:	2b00      	cmp	r3, #0
 8013950:	dd1a      	ble.n	8013988 <_vfprintf_r+0x790>
 8013952:	f1ba 0f00 	cmp.w	sl, #0
 8013956:	d101      	bne.n	801395c <_vfprintf_r+0x764>
 8013958:	07ee      	lsls	r6, r5, #31
 801395a:	d502      	bpl.n	8013962 <_vfprintf_r+0x76a>
 801395c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801395e:	4413      	add	r3, r2
 8013960:	4453      	add	r3, sl
 8013962:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013964:	9208      	str	r2, [sp, #32]
 8013966:	469a      	mov	sl, r3
 8013968:	e738      	b.n	80137dc <_vfprintf_r+0x5e4>
 801396a:	460a      	mov	r2, r1
 801396c:	e70d      	b.n	801378a <_vfprintf_r+0x592>
 801396e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013972:	f803 1b01 	strb.w	r1, [r3], #1
 8013976:	e71d      	b.n	80137b4 <_vfprintf_r+0x5bc>
 8013978:	2230      	movs	r2, #48	; 0x30
 801397a:	4413      	add	r3, r2
 801397c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8013980:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8013984:	a91c      	add	r1, sp, #112	; 0x70
 8013986:	e719      	b.n	80137bc <_vfprintf_r+0x5c4>
 8013988:	f1ba 0f00 	cmp.w	sl, #0
 801398c:	d101      	bne.n	8013992 <_vfprintf_r+0x79a>
 801398e:	07ed      	lsls	r5, r5, #31
 8013990:	d515      	bpl.n	80139be <_vfprintf_r+0x7c6>
 8013992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013994:	3301      	adds	r3, #1
 8013996:	e7e3      	b.n	8013960 <_vfprintf_r+0x768>
 8013998:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801399a:	9b03      	ldr	r3, [sp, #12]
 801399c:	429a      	cmp	r2, r3
 801399e:	db06      	blt.n	80139ae <_vfprintf_r+0x7b6>
 80139a0:	07e8      	lsls	r0, r5, #31
 80139a2:	d50e      	bpl.n	80139c2 <_vfprintf_r+0x7ca>
 80139a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139a6:	4413      	add	r3, r2
 80139a8:	2267      	movs	r2, #103	; 0x67
 80139aa:	9202      	str	r2, [sp, #8]
 80139ac:	e7d9      	b.n	8013962 <_vfprintf_r+0x76a>
 80139ae:	9b03      	ldr	r3, [sp, #12]
 80139b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	440b      	add	r3, r1
 80139b6:	dcf7      	bgt.n	80139a8 <_vfprintf_r+0x7b0>
 80139b8:	f1c2 0201 	rsb	r2, r2, #1
 80139bc:	e7f3      	b.n	80139a6 <_vfprintf_r+0x7ae>
 80139be:	2301      	movs	r3, #1
 80139c0:	e7cf      	b.n	8013962 <_vfprintf_r+0x76a>
 80139c2:	4613      	mov	r3, r2
 80139c4:	e7f0      	b.n	80139a8 <_vfprintf_r+0x7b0>
 80139c6:	b10b      	cbz	r3, 80139cc <_vfprintf_r+0x7d4>
 80139c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80139cc:	f015 0f20 	tst.w	r5, #32
 80139d0:	f107 0304 	add.w	r3, r7, #4
 80139d4:	d008      	beq.n	80139e8 <_vfprintf_r+0x7f0>
 80139d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139d8:	683a      	ldr	r2, [r7, #0]
 80139da:	17ce      	asrs	r6, r1, #31
 80139dc:	4608      	mov	r0, r1
 80139de:	4631      	mov	r1, r6
 80139e0:	e9c2 0100 	strd	r0, r1, [r2]
 80139e4:	461f      	mov	r7, r3
 80139e6:	e494      	b.n	8013312 <_vfprintf_r+0x11a>
 80139e8:	06e9      	lsls	r1, r5, #27
 80139ea:	d503      	bpl.n	80139f4 <_vfprintf_r+0x7fc>
 80139ec:	683a      	ldr	r2, [r7, #0]
 80139ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139f0:	6011      	str	r1, [r2, #0]
 80139f2:	e7f7      	b.n	80139e4 <_vfprintf_r+0x7ec>
 80139f4:	066a      	lsls	r2, r5, #25
 80139f6:	d5f9      	bpl.n	80139ec <_vfprintf_r+0x7f4>
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80139fe:	8011      	strh	r1, [r2, #0]
 8013a00:	e7f0      	b.n	80139e4 <_vfprintf_r+0x7ec>
 8013a02:	f045 0510 	orr.w	r5, r5, #16
 8013a06:	f015 0320 	ands.w	r3, r5, #32
 8013a0a:	d022      	beq.n	8013a52 <_vfprintf_r+0x85a>
 8013a0c:	3707      	adds	r7, #7
 8013a0e:	f027 0707 	bic.w	r7, r7, #7
 8013a12:	f107 0308 	add.w	r3, r7, #8
 8013a16:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013a1a:	9304      	str	r3, [sp, #16]
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013a24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013a28:	f000 83e8 	beq.w	80141fc <_vfprintf_r+0x1004>
 8013a2c:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8013a30:	9208      	str	r2, [sp, #32]
 8013a32:	ea56 0207 	orrs.w	r2, r6, r7
 8013a36:	f040 83e6 	bne.w	8014206 <_vfprintf_r+0x100e>
 8013a3a:	f1ba 0f00 	cmp.w	sl, #0
 8013a3e:	f000 80a9 	beq.w	8013b94 <_vfprintf_r+0x99c>
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d075      	beq.n	8013b32 <_vfprintf_r+0x93a>
 8013a46:	2b02      	cmp	r3, #2
 8013a48:	f000 8090 	beq.w	8013b6c <_vfprintf_r+0x974>
 8013a4c:	2600      	movs	r6, #0
 8013a4e:	2700      	movs	r7, #0
 8013a50:	e3df      	b.n	8014212 <_vfprintf_r+0x101a>
 8013a52:	1d3a      	adds	r2, r7, #4
 8013a54:	f015 0110 	ands.w	r1, r5, #16
 8013a58:	9204      	str	r2, [sp, #16]
 8013a5a:	d002      	beq.n	8013a62 <_vfprintf_r+0x86a>
 8013a5c:	683e      	ldr	r6, [r7, #0]
 8013a5e:	2700      	movs	r7, #0
 8013a60:	e7dd      	b.n	8013a1e <_vfprintf_r+0x826>
 8013a62:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8013a66:	d0f9      	beq.n	8013a5c <_vfprintf_r+0x864>
 8013a68:	883e      	ldrh	r6, [r7, #0]
 8013a6a:	2700      	movs	r7, #0
 8013a6c:	e7d6      	b.n	8013a1c <_vfprintf_r+0x824>
 8013a6e:	1d3b      	adds	r3, r7, #4
 8013a70:	9304      	str	r3, [sp, #16]
 8013a72:	2330      	movs	r3, #48	; 0x30
 8013a74:	2278      	movs	r2, #120	; 0x78
 8013a76:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8013a7a:	4b14      	ldr	r3, [pc, #80]	; (8013acc <_vfprintf_r+0x8d4>)
 8013a7c:	683e      	ldr	r6, [r7, #0]
 8013a7e:	9311      	str	r3, [sp, #68]	; 0x44
 8013a80:	2700      	movs	r7, #0
 8013a82:	f045 0502 	orr.w	r5, r5, #2
 8013a86:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8013a8a:	2302      	movs	r3, #2
 8013a8c:	9202      	str	r2, [sp, #8]
 8013a8e:	e7c6      	b.n	8013a1e <_vfprintf_r+0x826>
 8013a90:	1d3b      	adds	r3, r7, #4
 8013a92:	2600      	movs	r6, #0
 8013a94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013a98:	9304      	str	r3, [sp, #16]
 8013a9a:	f8d7 9000 	ldr.w	r9, [r7]
 8013a9e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8013aa2:	d00a      	beq.n	8013aba <_vfprintf_r+0x8c2>
 8013aa4:	4652      	mov	r2, sl
 8013aa6:	4631      	mov	r1, r6
 8013aa8:	4648      	mov	r0, r9
 8013aaa:	f7f2 fee9 	bl	8006880 <memchr>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	f000 808c 	beq.w	8013bcc <_vfprintf_r+0x9d4>
 8013ab4:	eba0 0a09 	sub.w	sl, r0, r9
 8013ab8:	e5cb      	b.n	8013652 <_vfprintf_r+0x45a>
 8013aba:	4648      	mov	r0, r9
 8013abc:	f7f2 ff3a 	bl	8006934 <strlen>
 8013ac0:	4682      	mov	sl, r0
 8013ac2:	e5c6      	b.n	8013652 <_vfprintf_r+0x45a>
 8013ac4:	08017dda 	.word	0x08017dda
 8013ac8:	08017dea 	.word	0x08017dea
 8013acc:	08017da7 	.word	0x08017da7
 8013ad0:	f045 0510 	orr.w	r5, r5, #16
 8013ad4:	06ae      	lsls	r6, r5, #26
 8013ad6:	d509      	bpl.n	8013aec <_vfprintf_r+0x8f4>
 8013ad8:	3707      	adds	r7, #7
 8013ada:	f027 0707 	bic.w	r7, r7, #7
 8013ade:	f107 0308 	add.w	r3, r7, #8
 8013ae2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8013ae6:	9304      	str	r3, [sp, #16]
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e798      	b.n	8013a1e <_vfprintf_r+0x826>
 8013aec:	1d3b      	adds	r3, r7, #4
 8013aee:	f015 0f10 	tst.w	r5, #16
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	d001      	beq.n	8013afa <_vfprintf_r+0x902>
 8013af6:	683e      	ldr	r6, [r7, #0]
 8013af8:	e002      	b.n	8013b00 <_vfprintf_r+0x908>
 8013afa:	0668      	lsls	r0, r5, #25
 8013afc:	d5fb      	bpl.n	8013af6 <_vfprintf_r+0x8fe>
 8013afe:	883e      	ldrh	r6, [r7, #0]
 8013b00:	2700      	movs	r7, #0
 8013b02:	e7f1      	b.n	8013ae8 <_vfprintf_r+0x8f0>
 8013b04:	b10b      	cbz	r3, 8013b0a <_vfprintf_r+0x912>
 8013b06:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013b0a:	4ba2      	ldr	r3, [pc, #648]	; (8013d94 <_vfprintf_r+0xb9c>)
 8013b0c:	e4ca      	b.n	80134a4 <_vfprintf_r+0x2ac>
 8013b0e:	1d3b      	adds	r3, r7, #4
 8013b10:	f015 0f10 	tst.w	r5, #16
 8013b14:	9304      	str	r3, [sp, #16]
 8013b16:	d001      	beq.n	8013b1c <_vfprintf_r+0x924>
 8013b18:	683e      	ldr	r6, [r7, #0]
 8013b1a:	e002      	b.n	8013b22 <_vfprintf_r+0x92a>
 8013b1c:	066a      	lsls	r2, r5, #25
 8013b1e:	d5fb      	bpl.n	8013b18 <_vfprintf_r+0x920>
 8013b20:	883e      	ldrh	r6, [r7, #0]
 8013b22:	2700      	movs	r7, #0
 8013b24:	e4ca      	b.n	80134bc <_vfprintf_r+0x2c4>
 8013b26:	464b      	mov	r3, r9
 8013b28:	e374      	b.n	8014214 <_vfprintf_r+0x101c>
 8013b2a:	2f00      	cmp	r7, #0
 8013b2c:	bf08      	it	eq
 8013b2e:	2e0a      	cmpeq	r6, #10
 8013b30:	d205      	bcs.n	8013b3e <_vfprintf_r+0x946>
 8013b32:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8013b36:	3630      	adds	r6, #48	; 0x30
 8013b38:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8013b3c:	e385      	b.n	801424a <_vfprintf_r+0x1052>
 8013b3e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8013b42:	4630      	mov	r0, r6
 8013b44:	4639      	mov	r1, r7
 8013b46:	220a      	movs	r2, #10
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f7f3 fbab 	bl	80072a4 <__aeabi_uldivmod>
 8013b4e:	3230      	adds	r2, #48	; 0x30
 8013b50:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8013b54:	2300      	movs	r3, #0
 8013b56:	4630      	mov	r0, r6
 8013b58:	4639      	mov	r1, r7
 8013b5a:	220a      	movs	r2, #10
 8013b5c:	f7f3 fba2 	bl	80072a4 <__aeabi_uldivmod>
 8013b60:	4606      	mov	r6, r0
 8013b62:	460f      	mov	r7, r1
 8013b64:	ea56 0307 	orrs.w	r3, r6, r7
 8013b68:	d1eb      	bne.n	8013b42 <_vfprintf_r+0x94a>
 8013b6a:	e36e      	b.n	801424a <_vfprintf_r+0x1052>
 8013b6c:	2600      	movs	r6, #0
 8013b6e:	2700      	movs	r7, #0
 8013b70:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8013b74:	f006 030f 	and.w	r3, r6, #15
 8013b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b7a:	5cd3      	ldrb	r3, [r2, r3]
 8013b7c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013b80:	0933      	lsrs	r3, r6, #4
 8013b82:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8013b86:	093a      	lsrs	r2, r7, #4
 8013b88:	461e      	mov	r6, r3
 8013b8a:	4617      	mov	r7, r2
 8013b8c:	ea56 0307 	orrs.w	r3, r6, r7
 8013b90:	d1f0      	bne.n	8013b74 <_vfprintf_r+0x97c>
 8013b92:	e35a      	b.n	801424a <_vfprintf_r+0x1052>
 8013b94:	b93b      	cbnz	r3, 8013ba6 <_vfprintf_r+0x9ae>
 8013b96:	07e8      	lsls	r0, r5, #31
 8013b98:	d505      	bpl.n	8013ba6 <_vfprintf_r+0x9ae>
 8013b9a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8013b9e:	2330      	movs	r3, #48	; 0x30
 8013ba0:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8013ba4:	e351      	b.n	801424a <_vfprintf_r+0x1052>
 8013ba6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8013baa:	e34e      	b.n	801424a <_vfprintf_r+0x1052>
 8013bac:	b10b      	cbz	r3, 8013bb2 <_vfprintf_r+0x9ba>
 8013bae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8013bb2:	9b02      	ldr	r3, [sp, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f000 8302 	beq.w	80141be <_vfprintf_r+0xfc6>
 8013bba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013bbe:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8013bc2:	2600      	movs	r6, #0
 8013bc4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8013bc8:	9704      	str	r7, [sp, #16]
 8013bca:	e4e9      	b.n	80135a0 <_vfprintf_r+0x3a8>
 8013bcc:	4606      	mov	r6, r0
 8013bce:	e540      	b.n	8013652 <_vfprintf_r+0x45a>
 8013bd0:	2310      	movs	r3, #16
 8013bd2:	6063      	str	r3, [r4, #4]
 8013bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013bd6:	3310      	adds	r3, #16
 8013bd8:	9321      	str	r3, [sp, #132]	; 0x84
 8013bda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013bdc:	3301      	adds	r3, #1
 8013bde:	2b07      	cmp	r3, #7
 8013be0:	9320      	str	r3, [sp, #128]	; 0x80
 8013be2:	dc02      	bgt.n	8013bea <_vfprintf_r+0x9f2>
 8013be4:	3408      	adds	r4, #8
 8013be6:	3f10      	subs	r7, #16
 8013be8:	e61a      	b.n	8013820 <_vfprintf_r+0x628>
 8013bea:	aa1f      	add	r2, sp, #124	; 0x7c
 8013bec:	4641      	mov	r1, r8
 8013bee:	4658      	mov	r0, fp
 8013bf0:	f001 ff6c 	bl	8015acc <__sprint_r>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	f040 82ba 	bne.w	801416e <_vfprintf_r+0xf76>
 8013bfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8013bfc:	e7f3      	b.n	8013be6 <_vfprintf_r+0x9ee>
 8013bfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c00:	4641      	mov	r1, r8
 8013c02:	4658      	mov	r0, fp
 8013c04:	f001 ff62 	bl	8015acc <__sprint_r>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	f040 82b0 	bne.w	801416e <_vfprintf_r+0xf76>
 8013c0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013c10:	e616      	b.n	8013840 <_vfprintf_r+0x648>
 8013c12:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c14:	4641      	mov	r1, r8
 8013c16:	4658      	mov	r0, fp
 8013c18:	f001 ff58 	bl	8015acc <__sprint_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	f040 82a6 	bne.w	801416e <_vfprintf_r+0xf76>
 8013c22:	ac2c      	add	r4, sp, #176	; 0xb0
 8013c24:	e61e      	b.n	8013864 <_vfprintf_r+0x66c>
 8013c26:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c28:	4641      	mov	r1, r8
 8013c2a:	4658      	mov	r0, fp
 8013c2c:	f001 ff4e 	bl	8015acc <__sprint_r>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	f040 829c 	bne.w	801416e <_vfprintf_r+0xf76>
 8013c36:	ac2c      	add	r4, sp, #176	; 0xb0
 8013c38:	e624      	b.n	8013884 <_vfprintf_r+0x68c>
 8013c3a:	2210      	movs	r2, #16
 8013c3c:	6062      	str	r2, [r4, #4]
 8013c3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013c40:	3210      	adds	r2, #16
 8013c42:	9221      	str	r2, [sp, #132]	; 0x84
 8013c44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013c46:	3201      	adds	r2, #1
 8013c48:	2a07      	cmp	r2, #7
 8013c4a:	9220      	str	r2, [sp, #128]	; 0x80
 8013c4c:	dc02      	bgt.n	8013c54 <_vfprintf_r+0xa5c>
 8013c4e:	3408      	adds	r4, #8
 8013c50:	3f10      	subs	r7, #16
 8013c52:	e620      	b.n	8013896 <_vfprintf_r+0x69e>
 8013c54:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c56:	4641      	mov	r1, r8
 8013c58:	4658      	mov	r0, fp
 8013c5a:	9314      	str	r3, [sp, #80]	; 0x50
 8013c5c:	f001 ff36 	bl	8015acc <__sprint_r>
 8013c60:	2800      	cmp	r0, #0
 8013c62:	f040 8284 	bne.w	801416e <_vfprintf_r+0xf76>
 8013c66:	ac2c      	add	r4, sp, #176	; 0xb0
 8013c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c6a:	e7f1      	b.n	8013c50 <_vfprintf_r+0xa58>
 8013c6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c6e:	4641      	mov	r1, r8
 8013c70:	4658      	mov	r0, fp
 8013c72:	f001 ff2b 	bl	8015acc <__sprint_r>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	f040 8279 	bne.w	801416e <_vfprintf_r+0xf76>
 8013c7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8013c7e:	e619      	b.n	80138b4 <_vfprintf_r+0x6bc>
 8013c80:	2310      	movs	r3, #16
 8013c82:	6063      	str	r3, [r4, #4]
 8013c84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c86:	3310      	adds	r3, #16
 8013c88:	9321      	str	r3, [sp, #132]	; 0x84
 8013c8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	2b07      	cmp	r3, #7
 8013c90:	9320      	str	r3, [sp, #128]	; 0x80
 8013c92:	dc02      	bgt.n	8013c9a <_vfprintf_r+0xaa2>
 8013c94:	3408      	adds	r4, #8
 8013c96:	3e10      	subs	r6, #16
 8013c98:	e611      	b.n	80138be <_vfprintf_r+0x6c6>
 8013c9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8013c9c:	4641      	mov	r1, r8
 8013c9e:	4658      	mov	r0, fp
 8013ca0:	f001 ff14 	bl	8015acc <__sprint_r>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	f040 8262 	bne.w	801416e <_vfprintf_r+0xf76>
 8013caa:	ac2c      	add	r4, sp, #176	; 0xb0
 8013cac:	e7f3      	b.n	8013c96 <_vfprintf_r+0xa9e>
 8013cae:	aa1f      	add	r2, sp, #124	; 0x7c
 8013cb0:	4641      	mov	r1, r8
 8013cb2:	4658      	mov	r0, fp
 8013cb4:	f001 ff0a 	bl	8015acc <__sprint_r>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	f040 8258 	bne.w	801416e <_vfprintf_r+0xf76>
 8013cbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8013cc0:	e60c      	b.n	80138dc <_vfprintf_r+0x6e4>
 8013cc2:	9b02      	ldr	r3, [sp, #8]
 8013cc4:	2b65      	cmp	r3, #101	; 0x65
 8013cc6:	f340 81ad 	ble.w	8014024 <_vfprintf_r+0xe2c>
 8013cca:	2200      	movs	r2, #0
 8013ccc:	2300      	movs	r3, #0
 8013cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cd2:	f7f3 fa57 	bl	8007184 <__aeabi_dcmpeq>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d062      	beq.n	8013da0 <_vfprintf_r+0xba8>
 8013cda:	4b2f      	ldr	r3, [pc, #188]	; (8013d98 <_vfprintf_r+0xba0>)
 8013cdc:	6023      	str	r3, [r4, #0]
 8013cde:	2301      	movs	r3, #1
 8013ce0:	6063      	str	r3, [r4, #4]
 8013ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	9321      	str	r3, [sp, #132]	; 0x84
 8013ce8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013cea:	3301      	adds	r3, #1
 8013cec:	2b07      	cmp	r3, #7
 8013cee:	9320      	str	r3, [sp, #128]	; 0x80
 8013cf0:	dc25      	bgt.n	8013d3e <_vfprintf_r+0xb46>
 8013cf2:	3408      	adds	r4, #8
 8013cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cf6:	9a03      	ldr	r2, [sp, #12]
 8013cf8:	4293      	cmp	r3, r2
 8013cfa:	db02      	blt.n	8013d02 <_vfprintf_r+0xb0a>
 8013cfc:	07ea      	lsls	r2, r5, #31
 8013cfe:	f57f ae04 	bpl.w	801390a <_vfprintf_r+0x712>
 8013d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d04:	6023      	str	r3, [r4, #0]
 8013d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d08:	6063      	str	r3, [r4, #4]
 8013d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d0e:	4413      	add	r3, r2
 8013d10:	9321      	str	r3, [sp, #132]	; 0x84
 8013d12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d14:	3301      	adds	r3, #1
 8013d16:	2b07      	cmp	r3, #7
 8013d18:	9320      	str	r3, [sp, #128]	; 0x80
 8013d1a:	dc1a      	bgt.n	8013d52 <_vfprintf_r+0xb5a>
 8013d1c:	3408      	adds	r4, #8
 8013d1e:	9b03      	ldr	r3, [sp, #12]
 8013d20:	1e5e      	subs	r6, r3, #1
 8013d22:	2e00      	cmp	r6, #0
 8013d24:	f77f adf1 	ble.w	801390a <_vfprintf_r+0x712>
 8013d28:	4f1c      	ldr	r7, [pc, #112]	; (8013d9c <_vfprintf_r+0xba4>)
 8013d2a:	f04f 0910 	mov.w	r9, #16
 8013d2e:	2e10      	cmp	r6, #16
 8013d30:	6027      	str	r7, [r4, #0]
 8013d32:	dc18      	bgt.n	8013d66 <_vfprintf_r+0xb6e>
 8013d34:	6066      	str	r6, [r4, #4]
 8013d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d38:	441e      	add	r6, r3
 8013d3a:	9621      	str	r6, [sp, #132]	; 0x84
 8013d3c:	e5d6      	b.n	80138ec <_vfprintf_r+0x6f4>
 8013d3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8013d40:	4641      	mov	r1, r8
 8013d42:	4658      	mov	r0, fp
 8013d44:	f001 fec2 	bl	8015acc <__sprint_r>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	f040 8210 	bne.w	801416e <_vfprintf_r+0xf76>
 8013d4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8013d50:	e7d0      	b.n	8013cf4 <_vfprintf_r+0xafc>
 8013d52:	aa1f      	add	r2, sp, #124	; 0x7c
 8013d54:	4641      	mov	r1, r8
 8013d56:	4658      	mov	r0, fp
 8013d58:	f001 feb8 	bl	8015acc <__sprint_r>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f040 8206 	bne.w	801416e <_vfprintf_r+0xf76>
 8013d62:	ac2c      	add	r4, sp, #176	; 0xb0
 8013d64:	e7db      	b.n	8013d1e <_vfprintf_r+0xb26>
 8013d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d68:	f8c4 9004 	str.w	r9, [r4, #4]
 8013d6c:	3310      	adds	r3, #16
 8013d6e:	9321      	str	r3, [sp, #132]	; 0x84
 8013d70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013d72:	3301      	adds	r3, #1
 8013d74:	2b07      	cmp	r3, #7
 8013d76:	9320      	str	r3, [sp, #128]	; 0x80
 8013d78:	dc02      	bgt.n	8013d80 <_vfprintf_r+0xb88>
 8013d7a:	3408      	adds	r4, #8
 8013d7c:	3e10      	subs	r6, #16
 8013d7e:	e7d6      	b.n	8013d2e <_vfprintf_r+0xb36>
 8013d80:	aa1f      	add	r2, sp, #124	; 0x7c
 8013d82:	4641      	mov	r1, r8
 8013d84:	4658      	mov	r0, fp
 8013d86:	f001 fea1 	bl	8015acc <__sprint_r>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	f040 81ef 	bne.w	801416e <_vfprintf_r+0xf76>
 8013d90:	ac2c      	add	r4, sp, #176	; 0xb0
 8013d92:	e7f3      	b.n	8013d7c <_vfprintf_r+0xb84>
 8013d94:	08017da7 	.word	0x08017da7
 8013d98:	08017db8 	.word	0x08017db8
 8013d9c:	08017dea 	.word	0x08017dea
 8013da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dc7a      	bgt.n	8013e9c <_vfprintf_r+0xca4>
 8013da6:	4b9d      	ldr	r3, [pc, #628]	; (801401c <_vfprintf_r+0xe24>)
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	2301      	movs	r3, #1
 8013dac:	6063      	str	r3, [r4, #4]
 8013dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013db0:	3301      	adds	r3, #1
 8013db2:	9321      	str	r3, [sp, #132]	; 0x84
 8013db4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013db6:	3301      	adds	r3, #1
 8013db8:	2b07      	cmp	r3, #7
 8013dba:	9320      	str	r3, [sp, #128]	; 0x80
 8013dbc:	dc44      	bgt.n	8013e48 <_vfprintf_r+0xc50>
 8013dbe:	3408      	adds	r4, #8
 8013dc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013dc2:	b923      	cbnz	r3, 8013dce <_vfprintf_r+0xbd6>
 8013dc4:	9b03      	ldr	r3, [sp, #12]
 8013dc6:	b913      	cbnz	r3, 8013dce <_vfprintf_r+0xbd6>
 8013dc8:	07eb      	lsls	r3, r5, #31
 8013dca:	f57f ad9e 	bpl.w	801390a <_vfprintf_r+0x712>
 8013dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dd0:	6023      	str	r3, [r4, #0]
 8013dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dd4:	6063      	str	r3, [r4, #4]
 8013dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dda:	4413      	add	r3, r2
 8013ddc:	9321      	str	r3, [sp, #132]	; 0x84
 8013dde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013de0:	3301      	adds	r3, #1
 8013de2:	2b07      	cmp	r3, #7
 8013de4:	9320      	str	r3, [sp, #128]	; 0x80
 8013de6:	dc39      	bgt.n	8013e5c <_vfprintf_r+0xc64>
 8013de8:	f104 0308 	add.w	r3, r4, #8
 8013dec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013dee:	2e00      	cmp	r6, #0
 8013df0:	da19      	bge.n	8013e26 <_vfprintf_r+0xc2e>
 8013df2:	4f8b      	ldr	r7, [pc, #556]	; (8014020 <_vfprintf_r+0xe28>)
 8013df4:	4276      	negs	r6, r6
 8013df6:	2410      	movs	r4, #16
 8013df8:	2e10      	cmp	r6, #16
 8013dfa:	601f      	str	r7, [r3, #0]
 8013dfc:	dc38      	bgt.n	8013e70 <_vfprintf_r+0xc78>
 8013dfe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e00:	605e      	str	r6, [r3, #4]
 8013e02:	4416      	add	r6, r2
 8013e04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013e06:	9621      	str	r6, [sp, #132]	; 0x84
 8013e08:	3201      	adds	r2, #1
 8013e0a:	2a07      	cmp	r2, #7
 8013e0c:	f103 0308 	add.w	r3, r3, #8
 8013e10:	9220      	str	r2, [sp, #128]	; 0x80
 8013e12:	dd08      	ble.n	8013e26 <_vfprintf_r+0xc2e>
 8013e14:	aa1f      	add	r2, sp, #124	; 0x7c
 8013e16:	4641      	mov	r1, r8
 8013e18:	4658      	mov	r0, fp
 8013e1a:	f001 fe57 	bl	8015acc <__sprint_r>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	f040 81a5 	bne.w	801416e <_vfprintf_r+0xf76>
 8013e24:	ab2c      	add	r3, sp, #176	; 0xb0
 8013e26:	9a03      	ldr	r2, [sp, #12]
 8013e28:	605a      	str	r2, [r3, #4]
 8013e2a:	9903      	ldr	r1, [sp, #12]
 8013e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e2e:	f8c3 9000 	str.w	r9, [r3]
 8013e32:	440a      	add	r2, r1
 8013e34:	9221      	str	r2, [sp, #132]	; 0x84
 8013e36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013e38:	3201      	adds	r2, #1
 8013e3a:	2a07      	cmp	r2, #7
 8013e3c:	9220      	str	r2, [sp, #128]	; 0x80
 8013e3e:	f73f ad5b 	bgt.w	80138f8 <_vfprintf_r+0x700>
 8013e42:	f103 0408 	add.w	r4, r3, #8
 8013e46:	e560      	b.n	801390a <_vfprintf_r+0x712>
 8013e48:	aa1f      	add	r2, sp, #124	; 0x7c
 8013e4a:	4641      	mov	r1, r8
 8013e4c:	4658      	mov	r0, fp
 8013e4e:	f001 fe3d 	bl	8015acc <__sprint_r>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	f040 818b 	bne.w	801416e <_vfprintf_r+0xf76>
 8013e58:	ac2c      	add	r4, sp, #176	; 0xb0
 8013e5a:	e7b1      	b.n	8013dc0 <_vfprintf_r+0xbc8>
 8013e5c:	aa1f      	add	r2, sp, #124	; 0x7c
 8013e5e:	4641      	mov	r1, r8
 8013e60:	4658      	mov	r0, fp
 8013e62:	f001 fe33 	bl	8015acc <__sprint_r>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	f040 8181 	bne.w	801416e <_vfprintf_r+0xf76>
 8013e6c:	ab2c      	add	r3, sp, #176	; 0xb0
 8013e6e:	e7bd      	b.n	8013dec <_vfprintf_r+0xbf4>
 8013e70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e72:	605c      	str	r4, [r3, #4]
 8013e74:	3210      	adds	r2, #16
 8013e76:	9221      	str	r2, [sp, #132]	; 0x84
 8013e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013e7a:	3201      	adds	r2, #1
 8013e7c:	2a07      	cmp	r2, #7
 8013e7e:	9220      	str	r2, [sp, #128]	; 0x80
 8013e80:	dc02      	bgt.n	8013e88 <_vfprintf_r+0xc90>
 8013e82:	3308      	adds	r3, #8
 8013e84:	3e10      	subs	r6, #16
 8013e86:	e7b7      	b.n	8013df8 <_vfprintf_r+0xc00>
 8013e88:	aa1f      	add	r2, sp, #124	; 0x7c
 8013e8a:	4641      	mov	r1, r8
 8013e8c:	4658      	mov	r0, fp
 8013e8e:	f001 fe1d 	bl	8015acc <__sprint_r>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	f040 816b 	bne.w	801416e <_vfprintf_r+0xf76>
 8013e98:	ab2c      	add	r3, sp, #176	; 0xb0
 8013e9a:	e7f3      	b.n	8013e84 <_vfprintf_r+0xc8c>
 8013e9c:	9b08      	ldr	r3, [sp, #32]
 8013e9e:	9a03      	ldr	r2, [sp, #12]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	bfa8      	it	ge
 8013ea4:	4613      	movge	r3, r2
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	461e      	mov	r6, r3
 8013eaa:	dd0b      	ble.n	8013ec4 <_vfprintf_r+0xccc>
 8013eac:	6063      	str	r3, [r4, #4]
 8013eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013eb0:	f8c4 9000 	str.w	r9, [r4]
 8013eb4:	4433      	add	r3, r6
 8013eb6:	9321      	str	r3, [sp, #132]	; 0x84
 8013eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013eba:	3301      	adds	r3, #1
 8013ebc:	2b07      	cmp	r3, #7
 8013ebe:	9320      	str	r3, [sp, #128]	; 0x80
 8013ec0:	dc62      	bgt.n	8013f88 <_vfprintf_r+0xd90>
 8013ec2:	3408      	adds	r4, #8
 8013ec4:	9b08      	ldr	r3, [sp, #32]
 8013ec6:	2e00      	cmp	r6, #0
 8013ec8:	bfa8      	it	ge
 8013eca:	1b9b      	subge	r3, r3, r6
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	461e      	mov	r6, r3
 8013ed0:	dd0f      	ble.n	8013ef2 <_vfprintf_r+0xcfa>
 8013ed2:	4f53      	ldr	r7, [pc, #332]	; (8014020 <_vfprintf_r+0xe28>)
 8013ed4:	f04f 0a10 	mov.w	sl, #16
 8013ed8:	2e10      	cmp	r6, #16
 8013eda:	6027      	str	r7, [r4, #0]
 8013edc:	dc5e      	bgt.n	8013f9c <_vfprintf_r+0xda4>
 8013ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ee0:	6066      	str	r6, [r4, #4]
 8013ee2:	441e      	add	r6, r3
 8013ee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013ee6:	9621      	str	r6, [sp, #132]	; 0x84
 8013ee8:	3301      	adds	r3, #1
 8013eea:	2b07      	cmp	r3, #7
 8013eec:	9320      	str	r3, [sp, #128]	; 0x80
 8013eee:	dc6c      	bgt.n	8013fca <_vfprintf_r+0xdd2>
 8013ef0:	3408      	adds	r4, #8
 8013ef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ef4:	9a03      	ldr	r2, [sp, #12]
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	db01      	blt.n	8013efe <_vfprintf_r+0xd06>
 8013efa:	07ef      	lsls	r7, r5, #31
 8013efc:	d50d      	bpl.n	8013f1a <_vfprintf_r+0xd22>
 8013efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f00:	6023      	str	r3, [r4, #0]
 8013f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f04:	6063      	str	r3, [r4, #4]
 8013f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f0a:	4413      	add	r3, r2
 8013f0c:	9321      	str	r3, [sp, #132]	; 0x84
 8013f0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013f10:	3301      	adds	r3, #1
 8013f12:	2b07      	cmp	r3, #7
 8013f14:	9320      	str	r3, [sp, #128]	; 0x80
 8013f16:	dc62      	bgt.n	8013fde <_vfprintf_r+0xde6>
 8013f18:	3408      	adds	r4, #8
 8013f1a:	9b03      	ldr	r3, [sp, #12]
 8013f1c:	9a08      	ldr	r2, [sp, #32]
 8013f1e:	1a9e      	subs	r6, r3, r2
 8013f20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f22:	9a03      	ldr	r2, [sp, #12]
 8013f24:	1ad3      	subs	r3, r2, r3
 8013f26:	429e      	cmp	r6, r3
 8013f28:	bfa8      	it	ge
 8013f2a:	461e      	movge	r6, r3
 8013f2c:	2e00      	cmp	r6, #0
 8013f2e:	dd0c      	ble.n	8013f4a <_vfprintf_r+0xd52>
 8013f30:	9b08      	ldr	r3, [sp, #32]
 8013f32:	444b      	add	r3, r9
 8013f34:	e884 0048 	stmia.w	r4, {r3, r6}
 8013f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f3a:	4433      	add	r3, r6
 8013f3c:	9321      	str	r3, [sp, #132]	; 0x84
 8013f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013f40:	3301      	adds	r3, #1
 8013f42:	2b07      	cmp	r3, #7
 8013f44:	9320      	str	r3, [sp, #128]	; 0x80
 8013f46:	dc54      	bgt.n	8013ff2 <_vfprintf_r+0xdfa>
 8013f48:	3408      	adds	r4, #8
 8013f4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f4c:	9a03      	ldr	r2, [sp, #12]
 8013f4e:	2e00      	cmp	r6, #0
 8013f50:	eba2 0303 	sub.w	r3, r2, r3
 8013f54:	bfac      	ite	ge
 8013f56:	1b9e      	subge	r6, r3, r6
 8013f58:	461e      	movlt	r6, r3
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	f77f acd5 	ble.w	801390a <_vfprintf_r+0x712>
 8013f60:	4f2f      	ldr	r7, [pc, #188]	; (8014020 <_vfprintf_r+0xe28>)
 8013f62:	f04f 0910 	mov.w	r9, #16
 8013f66:	2e10      	cmp	r6, #16
 8013f68:	6027      	str	r7, [r4, #0]
 8013f6a:	f77f aee3 	ble.w	8013d34 <_vfprintf_r+0xb3c>
 8013f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f70:	f8c4 9004 	str.w	r9, [r4, #4]
 8013f74:	3310      	adds	r3, #16
 8013f76:	9321      	str	r3, [sp, #132]	; 0x84
 8013f78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	2b07      	cmp	r3, #7
 8013f7e:	9320      	str	r3, [sp, #128]	; 0x80
 8013f80:	dc41      	bgt.n	8014006 <_vfprintf_r+0xe0e>
 8013f82:	3408      	adds	r4, #8
 8013f84:	3e10      	subs	r6, #16
 8013f86:	e7ee      	b.n	8013f66 <_vfprintf_r+0xd6e>
 8013f88:	aa1f      	add	r2, sp, #124	; 0x7c
 8013f8a:	4641      	mov	r1, r8
 8013f8c:	4658      	mov	r0, fp
 8013f8e:	f001 fd9d 	bl	8015acc <__sprint_r>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	f040 80eb 	bne.w	801416e <_vfprintf_r+0xf76>
 8013f98:	ac2c      	add	r4, sp, #176	; 0xb0
 8013f9a:	e793      	b.n	8013ec4 <_vfprintf_r+0xccc>
 8013f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f9e:	f8c4 a004 	str.w	sl, [r4, #4]
 8013fa2:	3310      	adds	r3, #16
 8013fa4:	9321      	str	r3, [sp, #132]	; 0x84
 8013fa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013fa8:	3301      	adds	r3, #1
 8013faa:	2b07      	cmp	r3, #7
 8013fac:	9320      	str	r3, [sp, #128]	; 0x80
 8013fae:	dc02      	bgt.n	8013fb6 <_vfprintf_r+0xdbe>
 8013fb0:	3408      	adds	r4, #8
 8013fb2:	3e10      	subs	r6, #16
 8013fb4:	e790      	b.n	8013ed8 <_vfprintf_r+0xce0>
 8013fb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8013fb8:	4641      	mov	r1, r8
 8013fba:	4658      	mov	r0, fp
 8013fbc:	f001 fd86 	bl	8015acc <__sprint_r>
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	f040 80d4 	bne.w	801416e <_vfprintf_r+0xf76>
 8013fc6:	ac2c      	add	r4, sp, #176	; 0xb0
 8013fc8:	e7f3      	b.n	8013fb2 <_vfprintf_r+0xdba>
 8013fca:	aa1f      	add	r2, sp, #124	; 0x7c
 8013fcc:	4641      	mov	r1, r8
 8013fce:	4658      	mov	r0, fp
 8013fd0:	f001 fd7c 	bl	8015acc <__sprint_r>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f040 80ca 	bne.w	801416e <_vfprintf_r+0xf76>
 8013fda:	ac2c      	add	r4, sp, #176	; 0xb0
 8013fdc:	e789      	b.n	8013ef2 <_vfprintf_r+0xcfa>
 8013fde:	aa1f      	add	r2, sp, #124	; 0x7c
 8013fe0:	4641      	mov	r1, r8
 8013fe2:	4658      	mov	r0, fp
 8013fe4:	f001 fd72 	bl	8015acc <__sprint_r>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	f040 80c0 	bne.w	801416e <_vfprintf_r+0xf76>
 8013fee:	ac2c      	add	r4, sp, #176	; 0xb0
 8013ff0:	e793      	b.n	8013f1a <_vfprintf_r+0xd22>
 8013ff2:	aa1f      	add	r2, sp, #124	; 0x7c
 8013ff4:	4641      	mov	r1, r8
 8013ff6:	4658      	mov	r0, fp
 8013ff8:	f001 fd68 	bl	8015acc <__sprint_r>
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	f040 80b6 	bne.w	801416e <_vfprintf_r+0xf76>
 8014002:	ac2c      	add	r4, sp, #176	; 0xb0
 8014004:	e7a1      	b.n	8013f4a <_vfprintf_r+0xd52>
 8014006:	aa1f      	add	r2, sp, #124	; 0x7c
 8014008:	4641      	mov	r1, r8
 801400a:	4658      	mov	r0, fp
 801400c:	f001 fd5e 	bl	8015acc <__sprint_r>
 8014010:	2800      	cmp	r0, #0
 8014012:	f040 80ac 	bne.w	801416e <_vfprintf_r+0xf76>
 8014016:	ac2c      	add	r4, sp, #176	; 0xb0
 8014018:	e7b4      	b.n	8013f84 <_vfprintf_r+0xd8c>
 801401a:	bf00      	nop
 801401c:	08017db8 	.word	0x08017db8
 8014020:	08017dea 	.word	0x08017dea
 8014024:	9b03      	ldr	r3, [sp, #12]
 8014026:	2b01      	cmp	r3, #1
 8014028:	dc01      	bgt.n	801402e <_vfprintf_r+0xe36>
 801402a:	07ee      	lsls	r6, r5, #31
 801402c:	d576      	bpl.n	801411c <_vfprintf_r+0xf24>
 801402e:	2301      	movs	r3, #1
 8014030:	6063      	str	r3, [r4, #4]
 8014032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014034:	f8c4 9000 	str.w	r9, [r4]
 8014038:	3301      	adds	r3, #1
 801403a:	9321      	str	r3, [sp, #132]	; 0x84
 801403c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801403e:	3301      	adds	r3, #1
 8014040:	2b07      	cmp	r3, #7
 8014042:	9320      	str	r3, [sp, #128]	; 0x80
 8014044:	dc36      	bgt.n	80140b4 <_vfprintf_r+0xebc>
 8014046:	3408      	adds	r4, #8
 8014048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801404a:	6023      	str	r3, [r4, #0]
 801404c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801404e:	6063      	str	r3, [r4, #4]
 8014050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014054:	4413      	add	r3, r2
 8014056:	9321      	str	r3, [sp, #132]	; 0x84
 8014058:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801405a:	3301      	adds	r3, #1
 801405c:	2b07      	cmp	r3, #7
 801405e:	9320      	str	r3, [sp, #128]	; 0x80
 8014060:	dc31      	bgt.n	80140c6 <_vfprintf_r+0xece>
 8014062:	3408      	adds	r4, #8
 8014064:	2300      	movs	r3, #0
 8014066:	2200      	movs	r2, #0
 8014068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801406c:	f7f3 f88a 	bl	8007184 <__aeabi_dcmpeq>
 8014070:	9b03      	ldr	r3, [sp, #12]
 8014072:	1e5e      	subs	r6, r3, #1
 8014074:	2800      	cmp	r0, #0
 8014076:	d12f      	bne.n	80140d8 <_vfprintf_r+0xee0>
 8014078:	f109 0301 	add.w	r3, r9, #1
 801407c:	e884 0048 	stmia.w	r4, {r3, r6}
 8014080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014082:	9a03      	ldr	r2, [sp, #12]
 8014084:	3b01      	subs	r3, #1
 8014086:	4413      	add	r3, r2
 8014088:	9321      	str	r3, [sp, #132]	; 0x84
 801408a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801408c:	3301      	adds	r3, #1
 801408e:	2b07      	cmp	r3, #7
 8014090:	9320      	str	r3, [sp, #128]	; 0x80
 8014092:	dd4a      	ble.n	801412a <_vfprintf_r+0xf32>
 8014094:	aa1f      	add	r2, sp, #124	; 0x7c
 8014096:	4641      	mov	r1, r8
 8014098:	4658      	mov	r0, fp
 801409a:	f001 fd17 	bl	8015acc <__sprint_r>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d165      	bne.n	801416e <_vfprintf_r+0xf76>
 80140a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80140a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80140a6:	6023      	str	r3, [r4, #0]
 80140a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140aa:	6063      	str	r3, [r4, #4]
 80140ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80140ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140b0:	4413      	add	r3, r2
 80140b2:	e41a      	b.n	80138ea <_vfprintf_r+0x6f2>
 80140b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80140b6:	4641      	mov	r1, r8
 80140b8:	4658      	mov	r0, fp
 80140ba:	f001 fd07 	bl	8015acc <__sprint_r>
 80140be:	2800      	cmp	r0, #0
 80140c0:	d155      	bne.n	801416e <_vfprintf_r+0xf76>
 80140c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80140c4:	e7c0      	b.n	8014048 <_vfprintf_r+0xe50>
 80140c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80140c8:	4641      	mov	r1, r8
 80140ca:	4658      	mov	r0, fp
 80140cc:	f001 fcfe 	bl	8015acc <__sprint_r>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	d14c      	bne.n	801416e <_vfprintf_r+0xf76>
 80140d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80140d6:	e7c5      	b.n	8014064 <_vfprintf_r+0xe6c>
 80140d8:	2e00      	cmp	r6, #0
 80140da:	dde3      	ble.n	80140a4 <_vfprintf_r+0xeac>
 80140dc:	4f60      	ldr	r7, [pc, #384]	; (8014260 <_vfprintf_r+0x1068>)
 80140de:	f04f 0910 	mov.w	r9, #16
 80140e2:	2e10      	cmp	r6, #16
 80140e4:	6027      	str	r7, [r4, #0]
 80140e6:	dc04      	bgt.n	80140f2 <_vfprintf_r+0xefa>
 80140e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140ea:	6066      	str	r6, [r4, #4]
 80140ec:	441e      	add	r6, r3
 80140ee:	9621      	str	r6, [sp, #132]	; 0x84
 80140f0:	e7cb      	b.n	801408a <_vfprintf_r+0xe92>
 80140f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140f4:	f8c4 9004 	str.w	r9, [r4, #4]
 80140f8:	3310      	adds	r3, #16
 80140fa:	9321      	str	r3, [sp, #132]	; 0x84
 80140fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80140fe:	3301      	adds	r3, #1
 8014100:	2b07      	cmp	r3, #7
 8014102:	9320      	str	r3, [sp, #128]	; 0x80
 8014104:	dc02      	bgt.n	801410c <_vfprintf_r+0xf14>
 8014106:	3408      	adds	r4, #8
 8014108:	3e10      	subs	r6, #16
 801410a:	e7ea      	b.n	80140e2 <_vfprintf_r+0xeea>
 801410c:	aa1f      	add	r2, sp, #124	; 0x7c
 801410e:	4641      	mov	r1, r8
 8014110:	4658      	mov	r0, fp
 8014112:	f001 fcdb 	bl	8015acc <__sprint_r>
 8014116:	bb50      	cbnz	r0, 801416e <_vfprintf_r+0xf76>
 8014118:	ac2c      	add	r4, sp, #176	; 0xb0
 801411a:	e7f5      	b.n	8014108 <_vfprintf_r+0xf10>
 801411c:	2301      	movs	r3, #1
 801411e:	6063      	str	r3, [r4, #4]
 8014120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014122:	f8c4 9000 	str.w	r9, [r4]
 8014126:	3301      	adds	r3, #1
 8014128:	e7ae      	b.n	8014088 <_vfprintf_r+0xe90>
 801412a:	3408      	adds	r4, #8
 801412c:	e7ba      	b.n	80140a4 <_vfprintf_r+0xeac>
 801412e:	3408      	adds	r4, #8
 8014130:	f7ff bbeb 	b.w	801390a <_vfprintf_r+0x712>
 8014134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014138:	1a9d      	subs	r5, r3, r2
 801413a:	2d00      	cmp	r5, #0
 801413c:	f77f abe8 	ble.w	8013910 <_vfprintf_r+0x718>
 8014140:	2610      	movs	r6, #16
 8014142:	4b48      	ldr	r3, [pc, #288]	; (8014264 <_vfprintf_r+0x106c>)
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	2d10      	cmp	r5, #16
 8014148:	dc24      	bgt.n	8014194 <_vfprintf_r+0xf9c>
 801414a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801414c:	6065      	str	r5, [r4, #4]
 801414e:	441d      	add	r5, r3
 8014150:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014152:	9521      	str	r5, [sp, #132]	; 0x84
 8014154:	3301      	adds	r3, #1
 8014156:	2b07      	cmp	r3, #7
 8014158:	9320      	str	r3, [sp, #128]	; 0x80
 801415a:	f77f abd9 	ble.w	8013910 <_vfprintf_r+0x718>
 801415e:	aa1f      	add	r2, sp, #124	; 0x7c
 8014160:	4641      	mov	r1, r8
 8014162:	4658      	mov	r0, fp
 8014164:	f001 fcb2 	bl	8015acc <__sprint_r>
 8014168:	2800      	cmp	r0, #0
 801416a:	f43f abd1 	beq.w	8013910 <_vfprintf_r+0x718>
 801416e:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8014172:	07d9      	lsls	r1, r3, #31
 8014174:	d407      	bmi.n	8014186 <_vfprintf_r+0xf8e>
 8014176:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801417a:	059a      	lsls	r2, r3, #22
 801417c:	d403      	bmi.n	8014186 <_vfprintf_r+0xf8e>
 801417e:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8014182:	f7fd f85b 	bl	801123c <__retarget_lock_release_recursive>
 8014186:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801418a:	065b      	lsls	r3, r3, #25
 801418c:	f57f a8af 	bpl.w	80132ee <_vfprintf_r+0xf6>
 8014190:	f7ff b882 	b.w	8013298 <_vfprintf_r+0xa0>
 8014194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014196:	6066      	str	r6, [r4, #4]
 8014198:	3310      	adds	r3, #16
 801419a:	9321      	str	r3, [sp, #132]	; 0x84
 801419c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801419e:	3301      	adds	r3, #1
 80141a0:	2b07      	cmp	r3, #7
 80141a2:	9320      	str	r3, [sp, #128]	; 0x80
 80141a4:	dc02      	bgt.n	80141ac <_vfprintf_r+0xfb4>
 80141a6:	3408      	adds	r4, #8
 80141a8:	3d10      	subs	r5, #16
 80141aa:	e7ca      	b.n	8014142 <_vfprintf_r+0xf4a>
 80141ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80141ae:	4641      	mov	r1, r8
 80141b0:	4658      	mov	r0, fp
 80141b2:	f001 fc8b 	bl	8015acc <__sprint_r>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	d1d9      	bne.n	801416e <_vfprintf_r+0xf76>
 80141ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80141bc:	e7f4      	b.n	80141a8 <_vfprintf_r+0xfb0>
 80141be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141c0:	b913      	cbnz	r3, 80141c8 <_vfprintf_r+0xfd0>
 80141c2:	2300      	movs	r3, #0
 80141c4:	9320      	str	r3, [sp, #128]	; 0x80
 80141c6:	e7d2      	b.n	801416e <_vfprintf_r+0xf76>
 80141c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80141ca:	4641      	mov	r1, r8
 80141cc:	4658      	mov	r0, fp
 80141ce:	f001 fc7d 	bl	8015acc <__sprint_r>
 80141d2:	2800      	cmp	r0, #0
 80141d4:	d0f5      	beq.n	80141c2 <_vfprintf_r+0xfca>
 80141d6:	e7ca      	b.n	801416e <_vfprintf_r+0xf76>
 80141d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80141dc:	4610      	mov	r0, r2
 80141de:	4619      	mov	r1, r3
 80141e0:	f7f3 f802 	bl	80071e8 <__aeabi_dcmpun>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	f43f aa36 	beq.w	8013656 <_vfprintf_r+0x45e>
 80141ea:	4b1f      	ldr	r3, [pc, #124]	; (8014268 <_vfprintf_r+0x1070>)
 80141ec:	4a1f      	ldr	r2, [pc, #124]	; (801426c <_vfprintf_r+0x1074>)
 80141ee:	f7ff ba26 	b.w	801363e <_vfprintf_r+0x446>
 80141f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141f4:	1a1b      	subs	r3, r3, r0
 80141f6:	9303      	str	r3, [sp, #12]
 80141f8:	f7ff baa9 	b.w	801374e <_vfprintf_r+0x556>
 80141fc:	ea56 0207 	orrs.w	r2, r6, r7
 8014200:	9508      	str	r5, [sp, #32]
 8014202:	f43f ac1e 	beq.w	8013a42 <_vfprintf_r+0x84a>
 8014206:	2b01      	cmp	r3, #1
 8014208:	f43f ac8f 	beq.w	8013b2a <_vfprintf_r+0x932>
 801420c:	2b02      	cmp	r3, #2
 801420e:	f43f acaf 	beq.w	8013b70 <_vfprintf_r+0x978>
 8014212:	ab2c      	add	r3, sp, #176	; 0xb0
 8014214:	08f1      	lsrs	r1, r6, #3
 8014216:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801421a:	08f8      	lsrs	r0, r7, #3
 801421c:	f006 0207 	and.w	r2, r6, #7
 8014220:	4607      	mov	r7, r0
 8014222:	460e      	mov	r6, r1
 8014224:	3230      	adds	r2, #48	; 0x30
 8014226:	ea56 0107 	orrs.w	r1, r6, r7
 801422a:	f103 39ff 	add.w	r9, r3, #4294967295
 801422e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014232:	f47f ac78 	bne.w	8013b26 <_vfprintf_r+0x92e>
 8014236:	9908      	ldr	r1, [sp, #32]
 8014238:	07cd      	lsls	r5, r1, #31
 801423a:	d506      	bpl.n	801424a <_vfprintf_r+0x1052>
 801423c:	2a30      	cmp	r2, #48	; 0x30
 801423e:	d004      	beq.n	801424a <_vfprintf_r+0x1052>
 8014240:	2230      	movs	r2, #48	; 0x30
 8014242:	f809 2c01 	strb.w	r2, [r9, #-1]
 8014246:	f1a3 0902 	sub.w	r9, r3, #2
 801424a:	4656      	mov	r6, sl
 801424c:	2300      	movs	r3, #0
 801424e:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 8014252:	9d08      	ldr	r5, [sp, #32]
 8014254:	9308      	str	r3, [sp, #32]
 8014256:	ebaa 0a09 	sub.w	sl, sl, r9
 801425a:	f7ff bac6 	b.w	80137ea <_vfprintf_r+0x5f2>
 801425e:	bf00      	nop
 8014260:	08017dea 	.word	0x08017dea
 8014264:	08017dda 	.word	0x08017dda
 8014268:	08017d8e 	.word	0x08017d8e
 801426c:	08017d92 	.word	0x08017d92

08014270 <__sbprintf>:
 8014270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014272:	460c      	mov	r4, r1
 8014274:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8014278:	461f      	mov	r7, r3
 801427a:	8989      	ldrh	r1, [r1, #12]
 801427c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801427e:	9319      	str	r3, [sp, #100]	; 0x64
 8014280:	89e3      	ldrh	r3, [r4, #14]
 8014282:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014286:	f021 0102 	bic.w	r1, r1, #2
 801428a:	6a23      	ldr	r3, [r4, #32]
 801428c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8014290:	9308      	str	r3, [sp, #32]
 8014292:	a91a      	add	r1, sp, #104	; 0x68
 8014294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014296:	930a      	str	r3, [sp, #40]	; 0x28
 8014298:	4615      	mov	r5, r2
 801429a:	2300      	movs	r3, #0
 801429c:	4606      	mov	r6, r0
 801429e:	9100      	str	r1, [sp, #0]
 80142a0:	9104      	str	r1, [sp, #16]
 80142a2:	a816      	add	r0, sp, #88	; 0x58
 80142a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80142a8:	9102      	str	r1, [sp, #8]
 80142aa:	9105      	str	r1, [sp, #20]
 80142ac:	9306      	str	r3, [sp, #24]
 80142ae:	f7fc ffc1 	bl	8011234 <__retarget_lock_init_recursive>
 80142b2:	462a      	mov	r2, r5
 80142b4:	463b      	mov	r3, r7
 80142b6:	4669      	mov	r1, sp
 80142b8:	4630      	mov	r0, r6
 80142ba:	f7fe ff9d 	bl	80131f8 <_vfprintf_r>
 80142be:	1e05      	subs	r5, r0, #0
 80142c0:	db07      	blt.n	80142d2 <__sbprintf+0x62>
 80142c2:	4669      	mov	r1, sp
 80142c4:	4630      	mov	r0, r6
 80142c6:	f7fc facb 	bl	8010860 <_fflush_r>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	bf18      	it	ne
 80142ce:	f04f 35ff 	movne.w	r5, #4294967295
 80142d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80142d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80142d8:	065b      	lsls	r3, r3, #25
 80142da:	bf42      	ittt	mi
 80142dc:	89a3      	ldrhmi	r3, [r4, #12]
 80142de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80142e2:	81a3      	strhmi	r3, [r4, #12]
 80142e4:	f7fc ffa7 	bl	8011236 <__retarget_lock_close_recursive>
 80142e8:	4628      	mov	r0, r5
 80142ea:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80142ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142f0 <__swbuf_r>:
 80142f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142f2:	460e      	mov	r6, r1
 80142f4:	4614      	mov	r4, r2
 80142f6:	4605      	mov	r5, r0
 80142f8:	b118      	cbz	r0, 8014302 <__swbuf_r+0x12>
 80142fa:	6983      	ldr	r3, [r0, #24]
 80142fc:	b90b      	cbnz	r3, 8014302 <__swbuf_r+0x12>
 80142fe:	f7fc fb55 	bl	80109ac <__sinit>
 8014302:	4b27      	ldr	r3, [pc, #156]	; (80143a0 <__swbuf_r+0xb0>)
 8014304:	429c      	cmp	r4, r3
 8014306:	d12f      	bne.n	8014368 <__swbuf_r+0x78>
 8014308:	686c      	ldr	r4, [r5, #4]
 801430a:	69a3      	ldr	r3, [r4, #24]
 801430c:	60a3      	str	r3, [r4, #8]
 801430e:	89a3      	ldrh	r3, [r4, #12]
 8014310:	0719      	lsls	r1, r3, #28
 8014312:	d533      	bpl.n	801437c <__swbuf_r+0x8c>
 8014314:	6923      	ldr	r3, [r4, #16]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d030      	beq.n	801437c <__swbuf_r+0x8c>
 801431a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801431e:	b2f6      	uxtb	r6, r6
 8014320:	049a      	lsls	r2, r3, #18
 8014322:	4637      	mov	r7, r6
 8014324:	d534      	bpl.n	8014390 <__swbuf_r+0xa0>
 8014326:	6923      	ldr	r3, [r4, #16]
 8014328:	6820      	ldr	r0, [r4, #0]
 801432a:	1ac0      	subs	r0, r0, r3
 801432c:	6963      	ldr	r3, [r4, #20]
 801432e:	4298      	cmp	r0, r3
 8014330:	db04      	blt.n	801433c <__swbuf_r+0x4c>
 8014332:	4621      	mov	r1, r4
 8014334:	4628      	mov	r0, r5
 8014336:	f7fc fa93 	bl	8010860 <_fflush_r>
 801433a:	bb28      	cbnz	r0, 8014388 <__swbuf_r+0x98>
 801433c:	68a3      	ldr	r3, [r4, #8]
 801433e:	3b01      	subs	r3, #1
 8014340:	60a3      	str	r3, [r4, #8]
 8014342:	6823      	ldr	r3, [r4, #0]
 8014344:	1c5a      	adds	r2, r3, #1
 8014346:	6022      	str	r2, [r4, #0]
 8014348:	701e      	strb	r6, [r3, #0]
 801434a:	6963      	ldr	r3, [r4, #20]
 801434c:	3001      	adds	r0, #1
 801434e:	4298      	cmp	r0, r3
 8014350:	d004      	beq.n	801435c <__swbuf_r+0x6c>
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	07db      	lsls	r3, r3, #31
 8014356:	d519      	bpl.n	801438c <__swbuf_r+0x9c>
 8014358:	2e0a      	cmp	r6, #10
 801435a:	d117      	bne.n	801438c <__swbuf_r+0x9c>
 801435c:	4621      	mov	r1, r4
 801435e:	4628      	mov	r0, r5
 8014360:	f7fc fa7e 	bl	8010860 <_fflush_r>
 8014364:	b190      	cbz	r0, 801438c <__swbuf_r+0x9c>
 8014366:	e00f      	b.n	8014388 <__swbuf_r+0x98>
 8014368:	4b0e      	ldr	r3, [pc, #56]	; (80143a4 <__swbuf_r+0xb4>)
 801436a:	429c      	cmp	r4, r3
 801436c:	d101      	bne.n	8014372 <__swbuf_r+0x82>
 801436e:	68ac      	ldr	r4, [r5, #8]
 8014370:	e7cb      	b.n	801430a <__swbuf_r+0x1a>
 8014372:	4b0d      	ldr	r3, [pc, #52]	; (80143a8 <__swbuf_r+0xb8>)
 8014374:	429c      	cmp	r4, r3
 8014376:	bf08      	it	eq
 8014378:	68ec      	ldreq	r4, [r5, #12]
 801437a:	e7c6      	b.n	801430a <__swbuf_r+0x1a>
 801437c:	4621      	mov	r1, r4
 801437e:	4628      	mov	r0, r5
 8014380:	f000 f85c 	bl	801443c <__swsetup_r>
 8014384:	2800      	cmp	r0, #0
 8014386:	d0c8      	beq.n	801431a <__swbuf_r+0x2a>
 8014388:	f04f 37ff 	mov.w	r7, #4294967295
 801438c:	4638      	mov	r0, r7
 801438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014394:	81a3      	strh	r3, [r4, #12]
 8014396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801439c:	6663      	str	r3, [r4, #100]	; 0x64
 801439e:	e7c2      	b.n	8014326 <__swbuf_r+0x36>
 80143a0:	080176a0 	.word	0x080176a0
 80143a4:	080176c0 	.word	0x080176c0
 80143a8:	08017680 	.word	0x08017680

080143ac <_wcrtomb_r>:
 80143ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ae:	4605      	mov	r5, r0
 80143b0:	b085      	sub	sp, #20
 80143b2:	461e      	mov	r6, r3
 80143b4:	460f      	mov	r7, r1
 80143b6:	4c0f      	ldr	r4, [pc, #60]	; (80143f4 <_wcrtomb_r+0x48>)
 80143b8:	b991      	cbnz	r1, 80143e0 <_wcrtomb_r+0x34>
 80143ba:	6822      	ldr	r2, [r4, #0]
 80143bc:	490e      	ldr	r1, [pc, #56]	; (80143f8 <_wcrtomb_r+0x4c>)
 80143be:	6a12      	ldr	r2, [r2, #32]
 80143c0:	2a00      	cmp	r2, #0
 80143c2:	bf08      	it	eq
 80143c4:	460a      	moveq	r2, r1
 80143c6:	a901      	add	r1, sp, #4
 80143c8:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 80143cc:	463a      	mov	r2, r7
 80143ce:	47a0      	blx	r4
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	bf01      	itttt	eq
 80143d4:	2300      	moveq	r3, #0
 80143d6:	6033      	streq	r3, [r6, #0]
 80143d8:	238a      	moveq	r3, #138	; 0x8a
 80143da:	602b      	streq	r3, [r5, #0]
 80143dc:	b005      	add	sp, #20
 80143de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143e0:	6824      	ldr	r4, [r4, #0]
 80143e2:	4f05      	ldr	r7, [pc, #20]	; (80143f8 <_wcrtomb_r+0x4c>)
 80143e4:	6a24      	ldr	r4, [r4, #32]
 80143e6:	2c00      	cmp	r4, #0
 80143e8:	bf08      	it	eq
 80143ea:	463c      	moveq	r4, r7
 80143ec:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80143f0:	e7ed      	b.n	80143ce <_wcrtomb_r+0x22>
 80143f2:	bf00      	nop
 80143f4:	20000050 	.word	0x20000050
 80143f8:	20000144 	.word	0x20000144

080143fc <__ascii_wctomb>:
 80143fc:	b149      	cbz	r1, 8014412 <__ascii_wctomb+0x16>
 80143fe:	2aff      	cmp	r2, #255	; 0xff
 8014400:	bf85      	ittet	hi
 8014402:	238a      	movhi	r3, #138	; 0x8a
 8014404:	6003      	strhi	r3, [r0, #0]
 8014406:	700a      	strbls	r2, [r1, #0]
 8014408:	f04f 30ff 	movhi.w	r0, #4294967295
 801440c:	bf98      	it	ls
 801440e:	2001      	movls	r0, #1
 8014410:	4770      	bx	lr
 8014412:	4608      	mov	r0, r1
 8014414:	4770      	bx	lr
	...

08014418 <_write_r>:
 8014418:	b538      	push	{r3, r4, r5, lr}
 801441a:	4c07      	ldr	r4, [pc, #28]	; (8014438 <_write_r+0x20>)
 801441c:	4605      	mov	r5, r0
 801441e:	4608      	mov	r0, r1
 8014420:	4611      	mov	r1, r2
 8014422:	2200      	movs	r2, #0
 8014424:	6022      	str	r2, [r4, #0]
 8014426:	461a      	mov	r2, r3
 8014428:	f7fa fb16 	bl	800ea58 <_write>
 801442c:	1c43      	adds	r3, r0, #1
 801442e:	d102      	bne.n	8014436 <_write_r+0x1e>
 8014430:	6823      	ldr	r3, [r4, #0]
 8014432:	b103      	cbz	r3, 8014436 <_write_r+0x1e>
 8014434:	602b      	str	r3, [r5, #0]
 8014436:	bd38      	pop	{r3, r4, r5, pc}
 8014438:	20001fc8 	.word	0x20001fc8

0801443c <__swsetup_r>:
 801443c:	4b32      	ldr	r3, [pc, #200]	; (8014508 <__swsetup_r+0xcc>)
 801443e:	b570      	push	{r4, r5, r6, lr}
 8014440:	681d      	ldr	r5, [r3, #0]
 8014442:	4606      	mov	r6, r0
 8014444:	460c      	mov	r4, r1
 8014446:	b125      	cbz	r5, 8014452 <__swsetup_r+0x16>
 8014448:	69ab      	ldr	r3, [r5, #24]
 801444a:	b913      	cbnz	r3, 8014452 <__swsetup_r+0x16>
 801444c:	4628      	mov	r0, r5
 801444e:	f7fc faad 	bl	80109ac <__sinit>
 8014452:	4b2e      	ldr	r3, [pc, #184]	; (801450c <__swsetup_r+0xd0>)
 8014454:	429c      	cmp	r4, r3
 8014456:	d10f      	bne.n	8014478 <__swsetup_r+0x3c>
 8014458:	686c      	ldr	r4, [r5, #4]
 801445a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801445e:	b29a      	uxth	r2, r3
 8014460:	0715      	lsls	r5, r2, #28
 8014462:	d42c      	bmi.n	80144be <__swsetup_r+0x82>
 8014464:	06d0      	lsls	r0, r2, #27
 8014466:	d411      	bmi.n	801448c <__swsetup_r+0x50>
 8014468:	2209      	movs	r2, #9
 801446a:	6032      	str	r2, [r6, #0]
 801446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014470:	81a3      	strh	r3, [r4, #12]
 8014472:	f04f 30ff 	mov.w	r0, #4294967295
 8014476:	bd70      	pop	{r4, r5, r6, pc}
 8014478:	4b25      	ldr	r3, [pc, #148]	; (8014510 <__swsetup_r+0xd4>)
 801447a:	429c      	cmp	r4, r3
 801447c:	d101      	bne.n	8014482 <__swsetup_r+0x46>
 801447e:	68ac      	ldr	r4, [r5, #8]
 8014480:	e7eb      	b.n	801445a <__swsetup_r+0x1e>
 8014482:	4b24      	ldr	r3, [pc, #144]	; (8014514 <__swsetup_r+0xd8>)
 8014484:	429c      	cmp	r4, r3
 8014486:	bf08      	it	eq
 8014488:	68ec      	ldreq	r4, [r5, #12]
 801448a:	e7e6      	b.n	801445a <__swsetup_r+0x1e>
 801448c:	0751      	lsls	r1, r2, #29
 801448e:	d512      	bpl.n	80144b6 <__swsetup_r+0x7a>
 8014490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014492:	b141      	cbz	r1, 80144a6 <__swsetup_r+0x6a>
 8014494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014498:	4299      	cmp	r1, r3
 801449a:	d002      	beq.n	80144a2 <__swsetup_r+0x66>
 801449c:	4630      	mov	r0, r6
 801449e:	f7fc fbf1 	bl	8010c84 <_free_r>
 80144a2:	2300      	movs	r3, #0
 80144a4:	6363      	str	r3, [r4, #52]	; 0x34
 80144a6:	89a3      	ldrh	r3, [r4, #12]
 80144a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144ac:	81a3      	strh	r3, [r4, #12]
 80144ae:	2300      	movs	r3, #0
 80144b0:	6063      	str	r3, [r4, #4]
 80144b2:	6923      	ldr	r3, [r4, #16]
 80144b4:	6023      	str	r3, [r4, #0]
 80144b6:	89a3      	ldrh	r3, [r4, #12]
 80144b8:	f043 0308 	orr.w	r3, r3, #8
 80144bc:	81a3      	strh	r3, [r4, #12]
 80144be:	6923      	ldr	r3, [r4, #16]
 80144c0:	b94b      	cbnz	r3, 80144d6 <__swsetup_r+0x9a>
 80144c2:	89a3      	ldrh	r3, [r4, #12]
 80144c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144cc:	d003      	beq.n	80144d6 <__swsetup_r+0x9a>
 80144ce:	4621      	mov	r1, r4
 80144d0:	4630      	mov	r0, r6
 80144d2:	f7fc fedf 	bl	8011294 <__smakebuf_r>
 80144d6:	89a2      	ldrh	r2, [r4, #12]
 80144d8:	f012 0301 	ands.w	r3, r2, #1
 80144dc:	d00c      	beq.n	80144f8 <__swsetup_r+0xbc>
 80144de:	2300      	movs	r3, #0
 80144e0:	60a3      	str	r3, [r4, #8]
 80144e2:	6963      	ldr	r3, [r4, #20]
 80144e4:	425b      	negs	r3, r3
 80144e6:	61a3      	str	r3, [r4, #24]
 80144e8:	6923      	ldr	r3, [r4, #16]
 80144ea:	b953      	cbnz	r3, 8014502 <__swsetup_r+0xc6>
 80144ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80144f4:	d1ba      	bne.n	801446c <__swsetup_r+0x30>
 80144f6:	bd70      	pop	{r4, r5, r6, pc}
 80144f8:	0792      	lsls	r2, r2, #30
 80144fa:	bf58      	it	pl
 80144fc:	6963      	ldrpl	r3, [r4, #20]
 80144fe:	60a3      	str	r3, [r4, #8]
 8014500:	e7f2      	b.n	80144e8 <__swsetup_r+0xac>
 8014502:	2000      	movs	r0, #0
 8014504:	e7f7      	b.n	80144f6 <__swsetup_r+0xba>
 8014506:	bf00      	nop
 8014508:	20000050 	.word	0x20000050
 801450c:	080176a0 	.word	0x080176a0
 8014510:	080176c0 	.word	0x080176c0
 8014514:	08017680 	.word	0x08017680

08014518 <__register_exitproc>:
 8014518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801451c:	4d35      	ldr	r5, [pc, #212]	; (80145f4 <__register_exitproc+0xdc>)
 801451e:	4680      	mov	r8, r0
 8014520:	6828      	ldr	r0, [r5, #0]
 8014522:	4699      	mov	r9, r3
 8014524:	460f      	mov	r7, r1
 8014526:	4692      	mov	sl, r2
 8014528:	f7fc fe86 	bl	8011238 <__retarget_lock_acquire_recursive>
 801452c:	4b32      	ldr	r3, [pc, #200]	; (80145f8 <__register_exitproc+0xe0>)
 801452e:	681e      	ldr	r6, [r3, #0]
 8014530:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8014532:	b93c      	cbnz	r4, 8014544 <__register_exitproc+0x2c>
 8014534:	4b31      	ldr	r3, [pc, #196]	; (80145fc <__register_exitproc+0xe4>)
 8014536:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 801453a:	64b4      	str	r4, [r6, #72]	; 0x48
 801453c:	b113      	cbz	r3, 8014544 <__register_exitproc+0x2c>
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8014544:	6863      	ldr	r3, [r4, #4]
 8014546:	2b1f      	cmp	r3, #31
 8014548:	dd46      	ble.n	80145d8 <__register_exitproc+0xc0>
 801454a:	4b2d      	ldr	r3, [pc, #180]	; (8014600 <__register_exitproc+0xe8>)
 801454c:	b933      	cbnz	r3, 801455c <__register_exitproc+0x44>
 801454e:	6828      	ldr	r0, [r5, #0]
 8014550:	f7fc fe74 	bl	801123c <__retarget_lock_release_recursive>
 8014554:	f04f 30ff 	mov.w	r0, #4294967295
 8014558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801455c:	208c      	movs	r0, #140	; 0x8c
 801455e:	f7fc fed9 	bl	8011314 <malloc>
 8014562:	4604      	mov	r4, r0
 8014564:	2800      	cmp	r0, #0
 8014566:	d0f2      	beq.n	801454e <__register_exitproc+0x36>
 8014568:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801456a:	6003      	str	r3, [r0, #0]
 801456c:	2200      	movs	r2, #0
 801456e:	6042      	str	r2, [r0, #4]
 8014570:	64b0      	str	r0, [r6, #72]	; 0x48
 8014572:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8014576:	f1b8 0f00 	cmp.w	r8, #0
 801457a:	d021      	beq.n	80145c0 <__register_exitproc+0xa8>
 801457c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014580:	f7fc fec8 	bl	8011314 <malloc>
 8014584:	b390      	cbz	r0, 80145ec <__register_exitproc+0xd4>
 8014586:	2300      	movs	r3, #0
 8014588:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801458c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8014590:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8014594:	6862      	ldr	r2, [r4, #4]
 8014596:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 801459a:	2301      	movs	r3, #1
 801459c:	4093      	lsls	r3, r2
 801459e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80145a2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80145a6:	431a      	orrs	r2, r3
 80145a8:	f1b8 0f02 	cmp.w	r8, #2
 80145ac:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80145b0:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 80145b4:	bf02      	ittt	eq
 80145b6:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80145ba:	4313      	orreq	r3, r2
 80145bc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80145c0:	6863      	ldr	r3, [r4, #4]
 80145c2:	6828      	ldr	r0, [r5, #0]
 80145c4:	1c5a      	adds	r2, r3, #1
 80145c6:	3302      	adds	r3, #2
 80145c8:	6062      	str	r2, [r4, #4]
 80145ca:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80145ce:	f7fc fe35 	bl	801123c <__retarget_lock_release_recursive>
 80145d2:	2000      	movs	r0, #0
 80145d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145d8:	f1b8 0f00 	cmp.w	r8, #0
 80145dc:	d0f0      	beq.n	80145c0 <__register_exitproc+0xa8>
 80145de:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d1d6      	bne.n	8014594 <__register_exitproc+0x7c>
 80145e6:	4b06      	ldr	r3, [pc, #24]	; (8014600 <__register_exitproc+0xe8>)
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d1c7      	bne.n	801457c <__register_exitproc+0x64>
 80145ec:	6828      	ldr	r0, [r5, #0]
 80145ee:	f7fc fe24 	bl	801123a <__retarget_lock_release>
 80145f2:	e7af      	b.n	8014554 <__register_exitproc+0x3c>
 80145f4:	200006c0 	.word	0x200006c0
 80145f8:	080176e0 	.word	0x080176e0
 80145fc:	080176ec 	.word	0x080176ec
 8014600:	08011315 	.word	0x08011315

08014604 <_close_r>:
 8014604:	b538      	push	{r3, r4, r5, lr}
 8014606:	4c06      	ldr	r4, [pc, #24]	; (8014620 <_close_r+0x1c>)
 8014608:	2300      	movs	r3, #0
 801460a:	4605      	mov	r5, r0
 801460c:	4608      	mov	r0, r1
 801460e:	6023      	str	r3, [r4, #0]
 8014610:	f7fa fa4a 	bl	800eaa8 <_close>
 8014614:	1c43      	adds	r3, r0, #1
 8014616:	d102      	bne.n	801461e <_close_r+0x1a>
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	b103      	cbz	r3, 801461e <_close_r+0x1a>
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	bd38      	pop	{r3, r4, r5, pc}
 8014620:	20001fc8 	.word	0x20001fc8

08014624 <quorem>:
 8014624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014628:	6903      	ldr	r3, [r0, #16]
 801462a:	690c      	ldr	r4, [r1, #16]
 801462c:	429c      	cmp	r4, r3
 801462e:	4680      	mov	r8, r0
 8014630:	f300 8082 	bgt.w	8014738 <quorem+0x114>
 8014634:	3c01      	subs	r4, #1
 8014636:	f101 0714 	add.w	r7, r1, #20
 801463a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801463e:	f100 0614 	add.w	r6, r0, #20
 8014642:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014646:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801464a:	eb06 030e 	add.w	r3, r6, lr
 801464e:	3501      	adds	r5, #1
 8014650:	eb07 090e 	add.w	r9, r7, lr
 8014654:	9301      	str	r3, [sp, #4]
 8014656:	fbb0 f5f5 	udiv	r5, r0, r5
 801465a:	b395      	cbz	r5, 80146c2 <quorem+0x9e>
 801465c:	f04f 0a00 	mov.w	sl, #0
 8014660:	4638      	mov	r0, r7
 8014662:	46b4      	mov	ip, r6
 8014664:	46d3      	mov	fp, sl
 8014666:	f850 2b04 	ldr.w	r2, [r0], #4
 801466a:	b293      	uxth	r3, r2
 801466c:	fb05 a303 	mla	r3, r5, r3, sl
 8014670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014674:	b29b      	uxth	r3, r3
 8014676:	ebab 0303 	sub.w	r3, fp, r3
 801467a:	0c12      	lsrs	r2, r2, #16
 801467c:	f8bc b000 	ldrh.w	fp, [ip]
 8014680:	fb05 a202 	mla	r2, r5, r2, sl
 8014684:	fa13 f38b 	uxtah	r3, r3, fp
 8014688:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801468c:	fa1f fb82 	uxth.w	fp, r2
 8014690:	f8dc 2000 	ldr.w	r2, [ip]
 8014694:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801469c:	b29b      	uxth	r3, r3
 801469e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146a2:	4581      	cmp	r9, r0
 80146a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80146a8:	f84c 3b04 	str.w	r3, [ip], #4
 80146ac:	d2db      	bcs.n	8014666 <quorem+0x42>
 80146ae:	f856 300e 	ldr.w	r3, [r6, lr]
 80146b2:	b933      	cbnz	r3, 80146c2 <quorem+0x9e>
 80146b4:	9b01      	ldr	r3, [sp, #4]
 80146b6:	3b04      	subs	r3, #4
 80146b8:	429e      	cmp	r6, r3
 80146ba:	461a      	mov	r2, r3
 80146bc:	d330      	bcc.n	8014720 <quorem+0xfc>
 80146be:	f8c8 4010 	str.w	r4, [r8, #16]
 80146c2:	4640      	mov	r0, r8
 80146c4:	f001 f8af 	bl	8015826 <__mcmp>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	db25      	blt.n	8014718 <quorem+0xf4>
 80146cc:	3501      	adds	r5, #1
 80146ce:	4630      	mov	r0, r6
 80146d0:	f04f 0e00 	mov.w	lr, #0
 80146d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80146d8:	f8d0 c000 	ldr.w	ip, [r0]
 80146dc:	b293      	uxth	r3, r2
 80146de:	ebae 0303 	sub.w	r3, lr, r3
 80146e2:	0c12      	lsrs	r2, r2, #16
 80146e4:	fa13 f38c 	uxtah	r3, r3, ip
 80146e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80146ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146f6:	45b9      	cmp	r9, r7
 80146f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80146fc:	f840 3b04 	str.w	r3, [r0], #4
 8014700:	d2e8      	bcs.n	80146d4 <quorem+0xb0>
 8014702:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014706:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801470a:	b92a      	cbnz	r2, 8014718 <quorem+0xf4>
 801470c:	3b04      	subs	r3, #4
 801470e:	429e      	cmp	r6, r3
 8014710:	461a      	mov	r2, r3
 8014712:	d30b      	bcc.n	801472c <quorem+0x108>
 8014714:	f8c8 4010 	str.w	r4, [r8, #16]
 8014718:	4628      	mov	r0, r5
 801471a:	b003      	add	sp, #12
 801471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014720:	6812      	ldr	r2, [r2, #0]
 8014722:	3b04      	subs	r3, #4
 8014724:	2a00      	cmp	r2, #0
 8014726:	d1ca      	bne.n	80146be <quorem+0x9a>
 8014728:	3c01      	subs	r4, #1
 801472a:	e7c5      	b.n	80146b8 <quorem+0x94>
 801472c:	6812      	ldr	r2, [r2, #0]
 801472e:	3b04      	subs	r3, #4
 8014730:	2a00      	cmp	r2, #0
 8014732:	d1ef      	bne.n	8014714 <quorem+0xf0>
 8014734:	3c01      	subs	r4, #1
 8014736:	e7ea      	b.n	801470e <quorem+0xea>
 8014738:	2000      	movs	r0, #0
 801473a:	e7ee      	b.n	801471a <quorem+0xf6>
 801473c:	0000      	movs	r0, r0
	...

08014740 <_dtoa_r>:
 8014740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014744:	ec57 6b10 	vmov	r6, r7, d0
 8014748:	b097      	sub	sp, #92	; 0x5c
 801474a:	e9cd 6700 	strd	r6, r7, [sp]
 801474e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014750:	9107      	str	r1, [sp, #28]
 8014752:	4604      	mov	r4, r0
 8014754:	920a      	str	r2, [sp, #40]	; 0x28
 8014756:	930f      	str	r3, [sp, #60]	; 0x3c
 8014758:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801475a:	b93e      	cbnz	r6, 801476c <_dtoa_r+0x2c>
 801475c:	2010      	movs	r0, #16
 801475e:	f7fc fdd9 	bl	8011314 <malloc>
 8014762:	6260      	str	r0, [r4, #36]	; 0x24
 8014764:	6046      	str	r6, [r0, #4]
 8014766:	6086      	str	r6, [r0, #8]
 8014768:	6006      	str	r6, [r0, #0]
 801476a:	60c6      	str	r6, [r0, #12]
 801476c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801476e:	6819      	ldr	r1, [r3, #0]
 8014770:	b151      	cbz	r1, 8014788 <_dtoa_r+0x48>
 8014772:	685a      	ldr	r2, [r3, #4]
 8014774:	604a      	str	r2, [r1, #4]
 8014776:	2301      	movs	r3, #1
 8014778:	4093      	lsls	r3, r2
 801477a:	608b      	str	r3, [r1, #8]
 801477c:	4620      	mov	r0, r4
 801477e:	f000 fe7d 	bl	801547c <_Bfree>
 8014782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014784:	2200      	movs	r2, #0
 8014786:	601a      	str	r2, [r3, #0]
 8014788:	9b01      	ldr	r3, [sp, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	bfbf      	itttt	lt
 801478e:	2301      	movlt	r3, #1
 8014790:	602b      	strlt	r3, [r5, #0]
 8014792:	9b01      	ldrlt	r3, [sp, #4]
 8014794:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014798:	bfb2      	itee	lt
 801479a:	9301      	strlt	r3, [sp, #4]
 801479c:	2300      	movge	r3, #0
 801479e:	602b      	strge	r3, [r5, #0]
 80147a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80147a4:	4ba8      	ldr	r3, [pc, #672]	; (8014a48 <_dtoa_r+0x308>)
 80147a6:	ea33 0308 	bics.w	r3, r3, r8
 80147aa:	d11b      	bne.n	80147e4 <_dtoa_r+0xa4>
 80147ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80147b2:	6013      	str	r3, [r2, #0]
 80147b4:	9b00      	ldr	r3, [sp, #0]
 80147b6:	b923      	cbnz	r3, 80147c2 <_dtoa_r+0x82>
 80147b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80147bc:	2800      	cmp	r0, #0
 80147be:	f000 8578 	beq.w	80152b2 <_dtoa_r+0xb72>
 80147c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147c4:	b953      	cbnz	r3, 80147dc <_dtoa_r+0x9c>
 80147c6:	4ba1      	ldr	r3, [pc, #644]	; (8014a4c <_dtoa_r+0x30c>)
 80147c8:	e021      	b.n	801480e <_dtoa_r+0xce>
 80147ca:	4ba1      	ldr	r3, [pc, #644]	; (8014a50 <_dtoa_r+0x310>)
 80147cc:	9302      	str	r3, [sp, #8]
 80147ce:	3308      	adds	r3, #8
 80147d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147d2:	6013      	str	r3, [r2, #0]
 80147d4:	9802      	ldr	r0, [sp, #8]
 80147d6:	b017      	add	sp, #92	; 0x5c
 80147d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147dc:	4b9b      	ldr	r3, [pc, #620]	; (8014a4c <_dtoa_r+0x30c>)
 80147de:	9302      	str	r3, [sp, #8]
 80147e0:	3303      	adds	r3, #3
 80147e2:	e7f5      	b.n	80147d0 <_dtoa_r+0x90>
 80147e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80147e8:	2200      	movs	r2, #0
 80147ea:	2300      	movs	r3, #0
 80147ec:	4630      	mov	r0, r6
 80147ee:	4639      	mov	r1, r7
 80147f0:	f7f2 fcc8 	bl	8007184 <__aeabi_dcmpeq>
 80147f4:	4681      	mov	r9, r0
 80147f6:	b160      	cbz	r0, 8014812 <_dtoa_r+0xd2>
 80147f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147fa:	2301      	movs	r3, #1
 80147fc:	6013      	str	r3, [r2, #0]
 80147fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014800:	2b00      	cmp	r3, #0
 8014802:	f000 8553 	beq.w	80152ac <_dtoa_r+0xb6c>
 8014806:	4b93      	ldr	r3, [pc, #588]	; (8014a54 <_dtoa_r+0x314>)
 8014808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801480a:	6013      	str	r3, [r2, #0]
 801480c:	3b01      	subs	r3, #1
 801480e:	9302      	str	r3, [sp, #8]
 8014810:	e7e0      	b.n	80147d4 <_dtoa_r+0x94>
 8014812:	aa14      	add	r2, sp, #80	; 0x50
 8014814:	a915      	add	r1, sp, #84	; 0x54
 8014816:	ec47 6b10 	vmov	d0, r6, r7
 801481a:	4620      	mov	r0, r4
 801481c:	f001 f87b 	bl	8015916 <__d2b>
 8014820:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014824:	4682      	mov	sl, r0
 8014826:	2d00      	cmp	r5, #0
 8014828:	d07e      	beq.n	8014928 <_dtoa_r+0x1e8>
 801482a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801482e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014832:	4630      	mov	r0, r6
 8014834:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014838:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801483c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8014840:	2200      	movs	r2, #0
 8014842:	4b85      	ldr	r3, [pc, #532]	; (8014a58 <_dtoa_r+0x318>)
 8014844:	f7f2 f882 	bl	800694c <__aeabi_dsub>
 8014848:	a379      	add	r3, pc, #484	; (adr r3, 8014a30 <_dtoa_r+0x2f0>)
 801484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484e:	f7f2 fa31 	bl	8006cb4 <__aeabi_dmul>
 8014852:	a379      	add	r3, pc, #484	; (adr r3, 8014a38 <_dtoa_r+0x2f8>)
 8014854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014858:	f7f2 f87a 	bl	8006950 <__adddf3>
 801485c:	4606      	mov	r6, r0
 801485e:	4628      	mov	r0, r5
 8014860:	460f      	mov	r7, r1
 8014862:	f7f2 f9c1 	bl	8006be8 <__aeabi_i2d>
 8014866:	a376      	add	r3, pc, #472	; (adr r3, 8014a40 <_dtoa_r+0x300>)
 8014868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486c:	f7f2 fa22 	bl	8006cb4 <__aeabi_dmul>
 8014870:	4602      	mov	r2, r0
 8014872:	460b      	mov	r3, r1
 8014874:	4630      	mov	r0, r6
 8014876:	4639      	mov	r1, r7
 8014878:	f7f2 f86a 	bl	8006950 <__adddf3>
 801487c:	4606      	mov	r6, r0
 801487e:	460f      	mov	r7, r1
 8014880:	f7f2 fcc8 	bl	8007214 <__aeabi_d2iz>
 8014884:	2200      	movs	r2, #0
 8014886:	4683      	mov	fp, r0
 8014888:	2300      	movs	r3, #0
 801488a:	4630      	mov	r0, r6
 801488c:	4639      	mov	r1, r7
 801488e:	f7f2 fc83 	bl	8007198 <__aeabi_dcmplt>
 8014892:	b158      	cbz	r0, 80148ac <_dtoa_r+0x16c>
 8014894:	4658      	mov	r0, fp
 8014896:	f7f2 f9a7 	bl	8006be8 <__aeabi_i2d>
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	4630      	mov	r0, r6
 80148a0:	4639      	mov	r1, r7
 80148a2:	f7f2 fc6f 	bl	8007184 <__aeabi_dcmpeq>
 80148a6:	b908      	cbnz	r0, 80148ac <_dtoa_r+0x16c>
 80148a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148ac:	f1bb 0f16 	cmp.w	fp, #22
 80148b0:	d859      	bhi.n	8014966 <_dtoa_r+0x226>
 80148b2:	496a      	ldr	r1, [pc, #424]	; (8014a5c <_dtoa_r+0x31c>)
 80148b4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80148b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148c0:	f7f2 fc88 	bl	80071d4 <__aeabi_dcmpgt>
 80148c4:	2800      	cmp	r0, #0
 80148c6:	d050      	beq.n	801496a <_dtoa_r+0x22a>
 80148c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148cc:	2300      	movs	r3, #0
 80148ce:	930e      	str	r3, [sp, #56]	; 0x38
 80148d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148d2:	1b5d      	subs	r5, r3, r5
 80148d4:	1e6b      	subs	r3, r5, #1
 80148d6:	9306      	str	r3, [sp, #24]
 80148d8:	bf45      	ittet	mi
 80148da:	f1c5 0301 	rsbmi	r3, r5, #1
 80148de:	9305      	strmi	r3, [sp, #20]
 80148e0:	2300      	movpl	r3, #0
 80148e2:	2300      	movmi	r3, #0
 80148e4:	bf4c      	ite	mi
 80148e6:	9306      	strmi	r3, [sp, #24]
 80148e8:	9305      	strpl	r3, [sp, #20]
 80148ea:	f1bb 0f00 	cmp.w	fp, #0
 80148ee:	db3e      	blt.n	801496e <_dtoa_r+0x22e>
 80148f0:	9b06      	ldr	r3, [sp, #24]
 80148f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80148f6:	445b      	add	r3, fp
 80148f8:	9306      	str	r3, [sp, #24]
 80148fa:	2300      	movs	r3, #0
 80148fc:	9308      	str	r3, [sp, #32]
 80148fe:	9b07      	ldr	r3, [sp, #28]
 8014900:	2b09      	cmp	r3, #9
 8014902:	f200 80af 	bhi.w	8014a64 <_dtoa_r+0x324>
 8014906:	2b05      	cmp	r3, #5
 8014908:	bfc4      	itt	gt
 801490a:	3b04      	subgt	r3, #4
 801490c:	9307      	strgt	r3, [sp, #28]
 801490e:	9b07      	ldr	r3, [sp, #28]
 8014910:	f1a3 0302 	sub.w	r3, r3, #2
 8014914:	bfcc      	ite	gt
 8014916:	2600      	movgt	r6, #0
 8014918:	2601      	movle	r6, #1
 801491a:	2b03      	cmp	r3, #3
 801491c:	f200 80ae 	bhi.w	8014a7c <_dtoa_r+0x33c>
 8014920:	e8df f003 	tbb	[pc, r3]
 8014924:	772f8482 	.word	0x772f8482
 8014928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801492a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801492c:	441d      	add	r5, r3
 801492e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014932:	2b20      	cmp	r3, #32
 8014934:	dd11      	ble.n	801495a <_dtoa_r+0x21a>
 8014936:	9a00      	ldr	r2, [sp, #0]
 8014938:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801493c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014940:	fa22 f000 	lsr.w	r0, r2, r0
 8014944:	fa08 f303 	lsl.w	r3, r8, r3
 8014948:	4318      	orrs	r0, r3
 801494a:	f7f2 f93d 	bl	8006bc8 <__aeabi_ui2d>
 801494e:	2301      	movs	r3, #1
 8014950:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014954:	3d01      	subs	r5, #1
 8014956:	9312      	str	r3, [sp, #72]	; 0x48
 8014958:	e772      	b.n	8014840 <_dtoa_r+0x100>
 801495a:	f1c3 0020 	rsb	r0, r3, #32
 801495e:	9b00      	ldr	r3, [sp, #0]
 8014960:	fa03 f000 	lsl.w	r0, r3, r0
 8014964:	e7f1      	b.n	801494a <_dtoa_r+0x20a>
 8014966:	2301      	movs	r3, #1
 8014968:	e7b1      	b.n	80148ce <_dtoa_r+0x18e>
 801496a:	900e      	str	r0, [sp, #56]	; 0x38
 801496c:	e7b0      	b.n	80148d0 <_dtoa_r+0x190>
 801496e:	9b05      	ldr	r3, [sp, #20]
 8014970:	eba3 030b 	sub.w	r3, r3, fp
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	f1cb 0300 	rsb	r3, fp, #0
 801497a:	9308      	str	r3, [sp, #32]
 801497c:	2300      	movs	r3, #0
 801497e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014980:	e7bd      	b.n	80148fe <_dtoa_r+0x1be>
 8014982:	2301      	movs	r3, #1
 8014984:	9309      	str	r3, [sp, #36]	; 0x24
 8014986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014988:	2b00      	cmp	r3, #0
 801498a:	dd7a      	ble.n	8014a82 <_dtoa_r+0x342>
 801498c:	9304      	str	r3, [sp, #16]
 801498e:	9303      	str	r3, [sp, #12]
 8014990:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014992:	2200      	movs	r2, #0
 8014994:	606a      	str	r2, [r5, #4]
 8014996:	2104      	movs	r1, #4
 8014998:	f101 0214 	add.w	r2, r1, #20
 801499c:	429a      	cmp	r2, r3
 801499e:	d975      	bls.n	8014a8c <_dtoa_r+0x34c>
 80149a0:	6869      	ldr	r1, [r5, #4]
 80149a2:	4620      	mov	r0, r4
 80149a4:	f000 fd36 	bl	8015414 <_Balloc>
 80149a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149aa:	6028      	str	r0, [r5, #0]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	9302      	str	r3, [sp, #8]
 80149b0:	9b03      	ldr	r3, [sp, #12]
 80149b2:	2b0e      	cmp	r3, #14
 80149b4:	f200 80e5 	bhi.w	8014b82 <_dtoa_r+0x442>
 80149b8:	2e00      	cmp	r6, #0
 80149ba:	f000 80e2 	beq.w	8014b82 <_dtoa_r+0x442>
 80149be:	ed9d 7b00 	vldr	d7, [sp]
 80149c2:	f1bb 0f00 	cmp.w	fp, #0
 80149c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80149ca:	dd74      	ble.n	8014ab6 <_dtoa_r+0x376>
 80149cc:	4a23      	ldr	r2, [pc, #140]	; (8014a5c <_dtoa_r+0x31c>)
 80149ce:	f00b 030f 	and.w	r3, fp, #15
 80149d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80149d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80149da:	06f0      	lsls	r0, r6, #27
 80149dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80149e0:	d559      	bpl.n	8014a96 <_dtoa_r+0x356>
 80149e2:	4b1f      	ldr	r3, [pc, #124]	; (8014a60 <_dtoa_r+0x320>)
 80149e4:	ec51 0b17 	vmov	r0, r1, d7
 80149e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80149ec:	f7f2 fa8c 	bl	8006f08 <__aeabi_ddiv>
 80149f0:	e9cd 0100 	strd	r0, r1, [sp]
 80149f4:	f006 060f 	and.w	r6, r6, #15
 80149f8:	2503      	movs	r5, #3
 80149fa:	4f19      	ldr	r7, [pc, #100]	; (8014a60 <_dtoa_r+0x320>)
 80149fc:	2e00      	cmp	r6, #0
 80149fe:	d14c      	bne.n	8014a9a <_dtoa_r+0x35a>
 8014a00:	4642      	mov	r2, r8
 8014a02:	464b      	mov	r3, r9
 8014a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a08:	f7f2 fa7e 	bl	8006f08 <__aeabi_ddiv>
 8014a0c:	e9cd 0100 	strd	r0, r1, [sp]
 8014a10:	e06a      	b.n	8014ae8 <_dtoa_r+0x3a8>
 8014a12:	2301      	movs	r3, #1
 8014a14:	9309      	str	r3, [sp, #36]	; 0x24
 8014a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a18:	445b      	add	r3, fp
 8014a1a:	9304      	str	r3, [sp, #16]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	9303      	str	r3, [sp, #12]
 8014a22:	bfb8      	it	lt
 8014a24:	2301      	movlt	r3, #1
 8014a26:	e7b3      	b.n	8014990 <_dtoa_r+0x250>
 8014a28:	2300      	movs	r3, #0
 8014a2a:	e7ab      	b.n	8014984 <_dtoa_r+0x244>
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	e7f1      	b.n	8014a14 <_dtoa_r+0x2d4>
 8014a30:	636f4361 	.word	0x636f4361
 8014a34:	3fd287a7 	.word	0x3fd287a7
 8014a38:	8b60c8b3 	.word	0x8b60c8b3
 8014a3c:	3fc68a28 	.word	0x3fc68a28
 8014a40:	509f79fb 	.word	0x509f79fb
 8014a44:	3fd34413 	.word	0x3fd34413
 8014a48:	7ff00000 	.word	0x7ff00000
 8014a4c:	08017e03 	.word	0x08017e03
 8014a50:	08017dfa 	.word	0x08017dfa
 8014a54:	08017db9 	.word	0x08017db9
 8014a58:	3ff80000 	.word	0x3ff80000
 8014a5c:	08017e30 	.word	0x08017e30
 8014a60:	08017e08 	.word	0x08017e08
 8014a64:	2601      	movs	r6, #1
 8014a66:	2300      	movs	r3, #0
 8014a68:	9307      	str	r3, [sp, #28]
 8014a6a:	9609      	str	r6, [sp, #36]	; 0x24
 8014a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a70:	9304      	str	r3, [sp, #16]
 8014a72:	9303      	str	r3, [sp, #12]
 8014a74:	2200      	movs	r2, #0
 8014a76:	2312      	movs	r3, #18
 8014a78:	920a      	str	r2, [sp, #40]	; 0x28
 8014a7a:	e789      	b.n	8014990 <_dtoa_r+0x250>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a80:	e7f4      	b.n	8014a6c <_dtoa_r+0x32c>
 8014a82:	2301      	movs	r3, #1
 8014a84:	9304      	str	r3, [sp, #16]
 8014a86:	9303      	str	r3, [sp, #12]
 8014a88:	461a      	mov	r2, r3
 8014a8a:	e7f5      	b.n	8014a78 <_dtoa_r+0x338>
 8014a8c:	686a      	ldr	r2, [r5, #4]
 8014a8e:	3201      	adds	r2, #1
 8014a90:	606a      	str	r2, [r5, #4]
 8014a92:	0049      	lsls	r1, r1, #1
 8014a94:	e780      	b.n	8014998 <_dtoa_r+0x258>
 8014a96:	2502      	movs	r5, #2
 8014a98:	e7af      	b.n	80149fa <_dtoa_r+0x2ba>
 8014a9a:	07f1      	lsls	r1, r6, #31
 8014a9c:	d508      	bpl.n	8014ab0 <_dtoa_r+0x370>
 8014a9e:	4640      	mov	r0, r8
 8014aa0:	4649      	mov	r1, r9
 8014aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aa6:	f7f2 f905 	bl	8006cb4 <__aeabi_dmul>
 8014aaa:	3501      	adds	r5, #1
 8014aac:	4680      	mov	r8, r0
 8014aae:	4689      	mov	r9, r1
 8014ab0:	1076      	asrs	r6, r6, #1
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	e7a2      	b.n	80149fc <_dtoa_r+0x2bc>
 8014ab6:	f000 809d 	beq.w	8014bf4 <_dtoa_r+0x4b4>
 8014aba:	f1cb 0600 	rsb	r6, fp, #0
 8014abe:	4b9f      	ldr	r3, [pc, #636]	; (8014d3c <_dtoa_r+0x5fc>)
 8014ac0:	4f9f      	ldr	r7, [pc, #636]	; (8014d40 <_dtoa_r+0x600>)
 8014ac2:	f006 020f 	and.w	r2, r6, #15
 8014ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ad2:	f7f2 f8ef 	bl	8006cb4 <__aeabi_dmul>
 8014ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8014ada:	1136      	asrs	r6, r6, #4
 8014adc:	2300      	movs	r3, #0
 8014ade:	2502      	movs	r5, #2
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	d17c      	bne.n	8014bde <_dtoa_r+0x49e>
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d191      	bne.n	8014a0c <_dtoa_r+0x2cc>
 8014ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f000 8084 	beq.w	8014bf8 <_dtoa_r+0x4b8>
 8014af0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8014af4:	2200      	movs	r2, #0
 8014af6:	4b93      	ldr	r3, [pc, #588]	; (8014d44 <_dtoa_r+0x604>)
 8014af8:	4640      	mov	r0, r8
 8014afa:	4649      	mov	r1, r9
 8014afc:	f7f2 fb4c 	bl	8007198 <__aeabi_dcmplt>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d079      	beq.n	8014bf8 <_dtoa_r+0x4b8>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d076      	beq.n	8014bf8 <_dtoa_r+0x4b8>
 8014b0a:	9b04      	ldr	r3, [sp, #16]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	dd34      	ble.n	8014b7a <_dtoa_r+0x43a>
 8014b10:	2200      	movs	r2, #0
 8014b12:	4b8d      	ldr	r3, [pc, #564]	; (8014d48 <_dtoa_r+0x608>)
 8014b14:	4640      	mov	r0, r8
 8014b16:	4649      	mov	r1, r9
 8014b18:	f7f2 f8cc 	bl	8006cb4 <__aeabi_dmul>
 8014b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8014b20:	9e04      	ldr	r6, [sp, #16]
 8014b22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014b26:	3501      	adds	r5, #1
 8014b28:	4628      	mov	r0, r5
 8014b2a:	f7f2 f85d 	bl	8006be8 <__aeabi_i2d>
 8014b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b32:	f7f2 f8bf 	bl	8006cb4 <__aeabi_dmul>
 8014b36:	2200      	movs	r2, #0
 8014b38:	4b84      	ldr	r3, [pc, #528]	; (8014d4c <_dtoa_r+0x60c>)
 8014b3a:	f7f1 ff09 	bl	8006950 <__adddf3>
 8014b3e:	4680      	mov	r8, r0
 8014b40:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8014b44:	2e00      	cmp	r6, #0
 8014b46:	d15a      	bne.n	8014bfe <_dtoa_r+0x4be>
 8014b48:	2200      	movs	r2, #0
 8014b4a:	4b81      	ldr	r3, [pc, #516]	; (8014d50 <_dtoa_r+0x610>)
 8014b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b50:	f7f1 fefc 	bl	800694c <__aeabi_dsub>
 8014b54:	4642      	mov	r2, r8
 8014b56:	464b      	mov	r3, r9
 8014b58:	e9cd 0100 	strd	r0, r1, [sp]
 8014b5c:	f7f2 fb3a 	bl	80071d4 <__aeabi_dcmpgt>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	f040 829b 	bne.w	801509c <_dtoa_r+0x95c>
 8014b66:	4642      	mov	r2, r8
 8014b68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b70:	f7f2 fb12 	bl	8007198 <__aeabi_dcmplt>
 8014b74:	2800      	cmp	r0, #0
 8014b76:	f040 828f 	bne.w	8015098 <_dtoa_r+0x958>
 8014b7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b7e:	e9cd 2300 	strd	r2, r3, [sp]
 8014b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	f2c0 8150 	blt.w	8014e2a <_dtoa_r+0x6ea>
 8014b8a:	f1bb 0f0e 	cmp.w	fp, #14
 8014b8e:	f300 814c 	bgt.w	8014e2a <_dtoa_r+0x6ea>
 8014b92:	4b6a      	ldr	r3, [pc, #424]	; (8014d3c <_dtoa_r+0x5fc>)
 8014b94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014b98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f280 80da 	bge.w	8014d58 <_dtoa_r+0x618>
 8014ba4:	9b03      	ldr	r3, [sp, #12]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	f300 80d6 	bgt.w	8014d58 <_dtoa_r+0x618>
 8014bac:	f040 8273 	bne.w	8015096 <_dtoa_r+0x956>
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	4b67      	ldr	r3, [pc, #412]	; (8014d50 <_dtoa_r+0x610>)
 8014bb4:	4640      	mov	r0, r8
 8014bb6:	4649      	mov	r1, r9
 8014bb8:	f7f2 f87c 	bl	8006cb4 <__aeabi_dmul>
 8014bbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014bc0:	f7f2 fafe 	bl	80071c0 <__aeabi_dcmpge>
 8014bc4:	9e03      	ldr	r6, [sp, #12]
 8014bc6:	4637      	mov	r7, r6
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	f040 824a 	bne.w	8015062 <_dtoa_r+0x922>
 8014bce:	9b02      	ldr	r3, [sp, #8]
 8014bd0:	9a02      	ldr	r2, [sp, #8]
 8014bd2:	1c5d      	adds	r5, r3, #1
 8014bd4:	2331      	movs	r3, #49	; 0x31
 8014bd6:	7013      	strb	r3, [r2, #0]
 8014bd8:	f10b 0b01 	add.w	fp, fp, #1
 8014bdc:	e245      	b.n	801506a <_dtoa_r+0x92a>
 8014bde:	07f2      	lsls	r2, r6, #31
 8014be0:	d505      	bpl.n	8014bee <_dtoa_r+0x4ae>
 8014be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014be6:	f7f2 f865 	bl	8006cb4 <__aeabi_dmul>
 8014bea:	3501      	adds	r5, #1
 8014bec:	2301      	movs	r3, #1
 8014bee:	1076      	asrs	r6, r6, #1
 8014bf0:	3708      	adds	r7, #8
 8014bf2:	e775      	b.n	8014ae0 <_dtoa_r+0x3a0>
 8014bf4:	2502      	movs	r5, #2
 8014bf6:	e777      	b.n	8014ae8 <_dtoa_r+0x3a8>
 8014bf8:	465f      	mov	r7, fp
 8014bfa:	9e03      	ldr	r6, [sp, #12]
 8014bfc:	e794      	b.n	8014b28 <_dtoa_r+0x3e8>
 8014bfe:	9a02      	ldr	r2, [sp, #8]
 8014c00:	4b4e      	ldr	r3, [pc, #312]	; (8014d3c <_dtoa_r+0x5fc>)
 8014c02:	4432      	add	r2, r6
 8014c04:	9213      	str	r2, [sp, #76]	; 0x4c
 8014c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c08:	1e71      	subs	r1, r6, #1
 8014c0a:	2a00      	cmp	r2, #0
 8014c0c:	d048      	beq.n	8014ca0 <_dtoa_r+0x560>
 8014c0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	2000      	movs	r0, #0
 8014c18:	494e      	ldr	r1, [pc, #312]	; (8014d54 <_dtoa_r+0x614>)
 8014c1a:	f7f2 f975 	bl	8006f08 <__aeabi_ddiv>
 8014c1e:	4642      	mov	r2, r8
 8014c20:	464b      	mov	r3, r9
 8014c22:	f7f1 fe93 	bl	800694c <__aeabi_dsub>
 8014c26:	9d02      	ldr	r5, [sp, #8]
 8014c28:	4680      	mov	r8, r0
 8014c2a:	4689      	mov	r9, r1
 8014c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c30:	f7f2 faf0 	bl	8007214 <__aeabi_d2iz>
 8014c34:	4606      	mov	r6, r0
 8014c36:	f7f1 ffd7 	bl	8006be8 <__aeabi_i2d>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c42:	f7f1 fe83 	bl	800694c <__aeabi_dsub>
 8014c46:	3630      	adds	r6, #48	; 0x30
 8014c48:	f805 6b01 	strb.w	r6, [r5], #1
 8014c4c:	4642      	mov	r2, r8
 8014c4e:	464b      	mov	r3, r9
 8014c50:	e9cd 0100 	strd	r0, r1, [sp]
 8014c54:	f7f2 faa0 	bl	8007198 <__aeabi_dcmplt>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d165      	bne.n	8014d28 <_dtoa_r+0x5e8>
 8014c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c60:	2000      	movs	r0, #0
 8014c62:	4938      	ldr	r1, [pc, #224]	; (8014d44 <_dtoa_r+0x604>)
 8014c64:	f7f1 fe72 	bl	800694c <__aeabi_dsub>
 8014c68:	4642      	mov	r2, r8
 8014c6a:	464b      	mov	r3, r9
 8014c6c:	f7f2 fa94 	bl	8007198 <__aeabi_dcmplt>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	f040 80ba 	bne.w	8014dea <_dtoa_r+0x6aa>
 8014c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c78:	429d      	cmp	r5, r3
 8014c7a:	f43f af7e 	beq.w	8014b7a <_dtoa_r+0x43a>
 8014c7e:	2200      	movs	r2, #0
 8014c80:	4b31      	ldr	r3, [pc, #196]	; (8014d48 <_dtoa_r+0x608>)
 8014c82:	4640      	mov	r0, r8
 8014c84:	4649      	mov	r1, r9
 8014c86:	f7f2 f815 	bl	8006cb4 <__aeabi_dmul>
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	4680      	mov	r8, r0
 8014c8e:	4689      	mov	r9, r1
 8014c90:	4b2d      	ldr	r3, [pc, #180]	; (8014d48 <_dtoa_r+0x608>)
 8014c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c96:	f7f2 f80d 	bl	8006cb4 <__aeabi_dmul>
 8014c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8014c9e:	e7c5      	b.n	8014c2c <_dtoa_r+0x4ec>
 8014ca0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014ca4:	4642      	mov	r2, r8
 8014ca6:	464b      	mov	r3, r9
 8014ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cac:	f7f2 f802 	bl	8006cb4 <__aeabi_dmul>
 8014cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014cb4:	9d02      	ldr	r5, [sp, #8]
 8014cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cba:	f7f2 faab 	bl	8007214 <__aeabi_d2iz>
 8014cbe:	4606      	mov	r6, r0
 8014cc0:	f7f1 ff92 	bl	8006be8 <__aeabi_i2d>
 8014cc4:	3630      	adds	r6, #48	; 0x30
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	460b      	mov	r3, r1
 8014cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cce:	f7f1 fe3d 	bl	800694c <__aeabi_dsub>
 8014cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8014cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cd8:	42ab      	cmp	r3, r5
 8014cda:	4680      	mov	r8, r0
 8014cdc:	4689      	mov	r9, r1
 8014cde:	f04f 0200 	mov.w	r2, #0
 8014ce2:	d125      	bne.n	8014d30 <_dtoa_r+0x5f0>
 8014ce4:	4b1b      	ldr	r3, [pc, #108]	; (8014d54 <_dtoa_r+0x614>)
 8014ce6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cea:	f7f1 fe31 	bl	8006950 <__adddf3>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	4640      	mov	r0, r8
 8014cf4:	4649      	mov	r1, r9
 8014cf6:	f7f2 fa6d 	bl	80071d4 <__aeabi_dcmpgt>
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d175      	bne.n	8014dea <_dtoa_r+0x6aa>
 8014cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d02:	2000      	movs	r0, #0
 8014d04:	4913      	ldr	r1, [pc, #76]	; (8014d54 <_dtoa_r+0x614>)
 8014d06:	f7f1 fe21 	bl	800694c <__aeabi_dsub>
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	4640      	mov	r0, r8
 8014d10:	4649      	mov	r1, r9
 8014d12:	f7f2 fa41 	bl	8007198 <__aeabi_dcmplt>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	f43f af2f 	beq.w	8014b7a <_dtoa_r+0x43a>
 8014d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d20:	2b30      	cmp	r3, #48	; 0x30
 8014d22:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d26:	d001      	beq.n	8014d2c <_dtoa_r+0x5ec>
 8014d28:	46bb      	mov	fp, r7
 8014d2a:	e04d      	b.n	8014dc8 <_dtoa_r+0x688>
 8014d2c:	4615      	mov	r5, r2
 8014d2e:	e7f5      	b.n	8014d1c <_dtoa_r+0x5dc>
 8014d30:	4b05      	ldr	r3, [pc, #20]	; (8014d48 <_dtoa_r+0x608>)
 8014d32:	f7f1 ffbf 	bl	8006cb4 <__aeabi_dmul>
 8014d36:	e9cd 0100 	strd	r0, r1, [sp]
 8014d3a:	e7bc      	b.n	8014cb6 <_dtoa_r+0x576>
 8014d3c:	08017e30 	.word	0x08017e30
 8014d40:	08017e08 	.word	0x08017e08
 8014d44:	3ff00000 	.word	0x3ff00000
 8014d48:	40240000 	.word	0x40240000
 8014d4c:	401c0000 	.word	0x401c0000
 8014d50:	40140000 	.word	0x40140000
 8014d54:	3fe00000 	.word	0x3fe00000
 8014d58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014d5c:	9d02      	ldr	r5, [sp, #8]
 8014d5e:	4642      	mov	r2, r8
 8014d60:	464b      	mov	r3, r9
 8014d62:	4630      	mov	r0, r6
 8014d64:	4639      	mov	r1, r7
 8014d66:	f7f2 f8cf 	bl	8006f08 <__aeabi_ddiv>
 8014d6a:	f7f2 fa53 	bl	8007214 <__aeabi_d2iz>
 8014d6e:	9000      	str	r0, [sp, #0]
 8014d70:	f7f1 ff3a 	bl	8006be8 <__aeabi_i2d>
 8014d74:	4642      	mov	r2, r8
 8014d76:	464b      	mov	r3, r9
 8014d78:	f7f1 ff9c 	bl	8006cb4 <__aeabi_dmul>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	460b      	mov	r3, r1
 8014d80:	4630      	mov	r0, r6
 8014d82:	4639      	mov	r1, r7
 8014d84:	f7f1 fde2 	bl	800694c <__aeabi_dsub>
 8014d88:	9e00      	ldr	r6, [sp, #0]
 8014d8a:	9f03      	ldr	r7, [sp, #12]
 8014d8c:	3630      	adds	r6, #48	; 0x30
 8014d8e:	f805 6b01 	strb.w	r6, [r5], #1
 8014d92:	9e02      	ldr	r6, [sp, #8]
 8014d94:	1bae      	subs	r6, r5, r6
 8014d96:	42b7      	cmp	r7, r6
 8014d98:	4602      	mov	r2, r0
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	d138      	bne.n	8014e10 <_dtoa_r+0x6d0>
 8014d9e:	f7f1 fdd7 	bl	8006950 <__adddf3>
 8014da2:	4606      	mov	r6, r0
 8014da4:	460f      	mov	r7, r1
 8014da6:	4602      	mov	r2, r0
 8014da8:	460b      	mov	r3, r1
 8014daa:	4640      	mov	r0, r8
 8014dac:	4649      	mov	r1, r9
 8014dae:	f7f2 f9f3 	bl	8007198 <__aeabi_dcmplt>
 8014db2:	b9c8      	cbnz	r0, 8014de8 <_dtoa_r+0x6a8>
 8014db4:	4632      	mov	r2, r6
 8014db6:	463b      	mov	r3, r7
 8014db8:	4640      	mov	r0, r8
 8014dba:	4649      	mov	r1, r9
 8014dbc:	f7f2 f9e2 	bl	8007184 <__aeabi_dcmpeq>
 8014dc0:	b110      	cbz	r0, 8014dc8 <_dtoa_r+0x688>
 8014dc2:	9b00      	ldr	r3, [sp, #0]
 8014dc4:	07db      	lsls	r3, r3, #31
 8014dc6:	d40f      	bmi.n	8014de8 <_dtoa_r+0x6a8>
 8014dc8:	4651      	mov	r1, sl
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f000 fb56 	bl	801547c <_Bfree>
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014dd4:	702b      	strb	r3, [r5, #0]
 8014dd6:	f10b 0301 	add.w	r3, fp, #1
 8014dda:	6013      	str	r3, [r2, #0]
 8014ddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f43f acf8 	beq.w	80147d4 <_dtoa_r+0x94>
 8014de4:	601d      	str	r5, [r3, #0]
 8014de6:	e4f5      	b.n	80147d4 <_dtoa_r+0x94>
 8014de8:	465f      	mov	r7, fp
 8014dea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014dee:	2a39      	cmp	r2, #57	; 0x39
 8014df0:	f105 33ff 	add.w	r3, r5, #4294967295
 8014df4:	d106      	bne.n	8014e04 <_dtoa_r+0x6c4>
 8014df6:	9a02      	ldr	r2, [sp, #8]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d107      	bne.n	8014e0c <_dtoa_r+0x6cc>
 8014dfc:	2330      	movs	r3, #48	; 0x30
 8014dfe:	7013      	strb	r3, [r2, #0]
 8014e00:	3701      	adds	r7, #1
 8014e02:	4613      	mov	r3, r2
 8014e04:	781a      	ldrb	r2, [r3, #0]
 8014e06:	3201      	adds	r2, #1
 8014e08:	701a      	strb	r2, [r3, #0]
 8014e0a:	e78d      	b.n	8014d28 <_dtoa_r+0x5e8>
 8014e0c:	461d      	mov	r5, r3
 8014e0e:	e7ec      	b.n	8014dea <_dtoa_r+0x6aa>
 8014e10:	2200      	movs	r2, #0
 8014e12:	4ba4      	ldr	r3, [pc, #656]	; (80150a4 <_dtoa_r+0x964>)
 8014e14:	f7f1 ff4e 	bl	8006cb4 <__aeabi_dmul>
 8014e18:	2200      	movs	r2, #0
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	4606      	mov	r6, r0
 8014e1e:	460f      	mov	r7, r1
 8014e20:	f7f2 f9b0 	bl	8007184 <__aeabi_dcmpeq>
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d09a      	beq.n	8014d5e <_dtoa_r+0x61e>
 8014e28:	e7ce      	b.n	8014dc8 <_dtoa_r+0x688>
 8014e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e2c:	2a00      	cmp	r2, #0
 8014e2e:	f000 80cd 	beq.w	8014fcc <_dtoa_r+0x88c>
 8014e32:	9a07      	ldr	r2, [sp, #28]
 8014e34:	2a01      	cmp	r2, #1
 8014e36:	f300 80af 	bgt.w	8014f98 <_dtoa_r+0x858>
 8014e3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e3c:	2a00      	cmp	r2, #0
 8014e3e:	f000 80a7 	beq.w	8014f90 <_dtoa_r+0x850>
 8014e42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014e46:	9e08      	ldr	r6, [sp, #32]
 8014e48:	9d05      	ldr	r5, [sp, #20]
 8014e4a:	9a05      	ldr	r2, [sp, #20]
 8014e4c:	441a      	add	r2, r3
 8014e4e:	9205      	str	r2, [sp, #20]
 8014e50:	9a06      	ldr	r2, [sp, #24]
 8014e52:	2101      	movs	r1, #1
 8014e54:	441a      	add	r2, r3
 8014e56:	4620      	mov	r0, r4
 8014e58:	9206      	str	r2, [sp, #24]
 8014e5a:	f000 fbaf 	bl	80155bc <__i2b>
 8014e5e:	4607      	mov	r7, r0
 8014e60:	2d00      	cmp	r5, #0
 8014e62:	dd0c      	ble.n	8014e7e <_dtoa_r+0x73e>
 8014e64:	9b06      	ldr	r3, [sp, #24]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	dd09      	ble.n	8014e7e <_dtoa_r+0x73e>
 8014e6a:	42ab      	cmp	r3, r5
 8014e6c:	9a05      	ldr	r2, [sp, #20]
 8014e6e:	bfa8      	it	ge
 8014e70:	462b      	movge	r3, r5
 8014e72:	1ad2      	subs	r2, r2, r3
 8014e74:	9205      	str	r2, [sp, #20]
 8014e76:	9a06      	ldr	r2, [sp, #24]
 8014e78:	1aed      	subs	r5, r5, r3
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	9306      	str	r3, [sp, #24]
 8014e7e:	9b08      	ldr	r3, [sp, #32]
 8014e80:	b1f3      	cbz	r3, 8014ec0 <_dtoa_r+0x780>
 8014e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 80a5 	beq.w	8014fd4 <_dtoa_r+0x894>
 8014e8a:	2e00      	cmp	r6, #0
 8014e8c:	dd10      	ble.n	8014eb0 <_dtoa_r+0x770>
 8014e8e:	4639      	mov	r1, r7
 8014e90:	4632      	mov	r2, r6
 8014e92:	4620      	mov	r0, r4
 8014e94:	f000 fc28 	bl	80156e8 <__pow5mult>
 8014e98:	4652      	mov	r2, sl
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	4607      	mov	r7, r0
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f000 fb95 	bl	80155ce <__multiply>
 8014ea4:	4651      	mov	r1, sl
 8014ea6:	4680      	mov	r8, r0
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f000 fae7 	bl	801547c <_Bfree>
 8014eae:	46c2      	mov	sl, r8
 8014eb0:	9b08      	ldr	r3, [sp, #32]
 8014eb2:	1b9a      	subs	r2, r3, r6
 8014eb4:	d004      	beq.n	8014ec0 <_dtoa_r+0x780>
 8014eb6:	4651      	mov	r1, sl
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f000 fc15 	bl	80156e8 <__pow5mult>
 8014ebe:	4682      	mov	sl, r0
 8014ec0:	2101      	movs	r1, #1
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f000 fb7a 	bl	80155bc <__i2b>
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	4606      	mov	r6, r0
 8014ece:	f340 8083 	ble.w	8014fd8 <_dtoa_r+0x898>
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	4601      	mov	r1, r0
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f000 fc06 	bl	80156e8 <__pow5mult>
 8014edc:	9b07      	ldr	r3, [sp, #28]
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	4606      	mov	r6, r0
 8014ee2:	dd7c      	ble.n	8014fde <_dtoa_r+0x89e>
 8014ee4:	f04f 0800 	mov.w	r8, #0
 8014ee8:	6933      	ldr	r3, [r6, #16]
 8014eea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014eee:	6918      	ldr	r0, [r3, #16]
 8014ef0:	f000 fb16 	bl	8015520 <__hi0bits>
 8014ef4:	f1c0 0020 	rsb	r0, r0, #32
 8014ef8:	9b06      	ldr	r3, [sp, #24]
 8014efa:	4418      	add	r0, r3
 8014efc:	f010 001f 	ands.w	r0, r0, #31
 8014f00:	f000 8096 	beq.w	8015030 <_dtoa_r+0x8f0>
 8014f04:	f1c0 0320 	rsb	r3, r0, #32
 8014f08:	2b04      	cmp	r3, #4
 8014f0a:	f340 8087 	ble.w	801501c <_dtoa_r+0x8dc>
 8014f0e:	9b05      	ldr	r3, [sp, #20]
 8014f10:	f1c0 001c 	rsb	r0, r0, #28
 8014f14:	4403      	add	r3, r0
 8014f16:	9305      	str	r3, [sp, #20]
 8014f18:	9b06      	ldr	r3, [sp, #24]
 8014f1a:	4405      	add	r5, r0
 8014f1c:	4403      	add	r3, r0
 8014f1e:	9306      	str	r3, [sp, #24]
 8014f20:	9b05      	ldr	r3, [sp, #20]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	dd05      	ble.n	8014f32 <_dtoa_r+0x7f2>
 8014f26:	4651      	mov	r1, sl
 8014f28:	461a      	mov	r2, r3
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f000 fc2a 	bl	8015784 <__lshift>
 8014f30:	4682      	mov	sl, r0
 8014f32:	9b06      	ldr	r3, [sp, #24]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	dd05      	ble.n	8014f44 <_dtoa_r+0x804>
 8014f38:	4631      	mov	r1, r6
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f000 fc21 	bl	8015784 <__lshift>
 8014f42:	4606      	mov	r6, r0
 8014f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d074      	beq.n	8015034 <_dtoa_r+0x8f4>
 8014f4a:	4631      	mov	r1, r6
 8014f4c:	4650      	mov	r0, sl
 8014f4e:	f000 fc6a 	bl	8015826 <__mcmp>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	da6e      	bge.n	8015034 <_dtoa_r+0x8f4>
 8014f56:	2300      	movs	r3, #0
 8014f58:	4651      	mov	r1, sl
 8014f5a:	220a      	movs	r2, #10
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f000 faa4 	bl	80154aa <__multadd>
 8014f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f68:	4682      	mov	sl, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	f000 81a8 	beq.w	80152c0 <_dtoa_r+0xb80>
 8014f70:	2300      	movs	r3, #0
 8014f72:	4639      	mov	r1, r7
 8014f74:	220a      	movs	r2, #10
 8014f76:	4620      	mov	r0, r4
 8014f78:	f000 fa97 	bl	80154aa <__multadd>
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	4607      	mov	r7, r0
 8014f82:	f300 80c8 	bgt.w	8015116 <_dtoa_r+0x9d6>
 8014f86:	9b07      	ldr	r3, [sp, #28]
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	f340 80c4 	ble.w	8015116 <_dtoa_r+0x9d6>
 8014f8e:	e059      	b.n	8015044 <_dtoa_r+0x904>
 8014f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014f96:	e756      	b.n	8014e46 <_dtoa_r+0x706>
 8014f98:	9b03      	ldr	r3, [sp, #12]
 8014f9a:	1e5e      	subs	r6, r3, #1
 8014f9c:	9b08      	ldr	r3, [sp, #32]
 8014f9e:	42b3      	cmp	r3, r6
 8014fa0:	bfbf      	itttt	lt
 8014fa2:	9b08      	ldrlt	r3, [sp, #32]
 8014fa4:	9608      	strlt	r6, [sp, #32]
 8014fa6:	1af2      	sublt	r2, r6, r3
 8014fa8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8014faa:	bfb6      	itet	lt
 8014fac:	189b      	addlt	r3, r3, r2
 8014fae:	1b9e      	subge	r6, r3, r6
 8014fb0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8014fb2:	9b03      	ldr	r3, [sp, #12]
 8014fb4:	bfb8      	it	lt
 8014fb6:	2600      	movlt	r6, #0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	bfb9      	ittee	lt
 8014fbc:	9b05      	ldrlt	r3, [sp, #20]
 8014fbe:	9a03      	ldrlt	r2, [sp, #12]
 8014fc0:	9d05      	ldrge	r5, [sp, #20]
 8014fc2:	9b03      	ldrge	r3, [sp, #12]
 8014fc4:	bfbc      	itt	lt
 8014fc6:	1a9d      	sublt	r5, r3, r2
 8014fc8:	2300      	movlt	r3, #0
 8014fca:	e73e      	b.n	8014e4a <_dtoa_r+0x70a>
 8014fcc:	9e08      	ldr	r6, [sp, #32]
 8014fce:	9d05      	ldr	r5, [sp, #20]
 8014fd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014fd2:	e745      	b.n	8014e60 <_dtoa_r+0x720>
 8014fd4:	9a08      	ldr	r2, [sp, #32]
 8014fd6:	e76e      	b.n	8014eb6 <_dtoa_r+0x776>
 8014fd8:	9b07      	ldr	r3, [sp, #28]
 8014fda:	2b01      	cmp	r3, #1
 8014fdc:	dc19      	bgt.n	8015012 <_dtoa_r+0x8d2>
 8014fde:	9b00      	ldr	r3, [sp, #0]
 8014fe0:	b9bb      	cbnz	r3, 8015012 <_dtoa_r+0x8d2>
 8014fe2:	9b01      	ldr	r3, [sp, #4]
 8014fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014fe8:	b99b      	cbnz	r3, 8015012 <_dtoa_r+0x8d2>
 8014fea:	9b01      	ldr	r3, [sp, #4]
 8014fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ff0:	0d1b      	lsrs	r3, r3, #20
 8014ff2:	051b      	lsls	r3, r3, #20
 8014ff4:	b183      	cbz	r3, 8015018 <_dtoa_r+0x8d8>
 8014ff6:	9b05      	ldr	r3, [sp, #20]
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	9305      	str	r3, [sp, #20]
 8014ffc:	9b06      	ldr	r3, [sp, #24]
 8014ffe:	3301      	adds	r3, #1
 8015000:	9306      	str	r3, [sp, #24]
 8015002:	f04f 0801 	mov.w	r8, #1
 8015006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015008:	2b00      	cmp	r3, #0
 801500a:	f47f af6d 	bne.w	8014ee8 <_dtoa_r+0x7a8>
 801500e:	2001      	movs	r0, #1
 8015010:	e772      	b.n	8014ef8 <_dtoa_r+0x7b8>
 8015012:	f04f 0800 	mov.w	r8, #0
 8015016:	e7f6      	b.n	8015006 <_dtoa_r+0x8c6>
 8015018:	4698      	mov	r8, r3
 801501a:	e7f4      	b.n	8015006 <_dtoa_r+0x8c6>
 801501c:	d080      	beq.n	8014f20 <_dtoa_r+0x7e0>
 801501e:	9a05      	ldr	r2, [sp, #20]
 8015020:	331c      	adds	r3, #28
 8015022:	441a      	add	r2, r3
 8015024:	9205      	str	r2, [sp, #20]
 8015026:	9a06      	ldr	r2, [sp, #24]
 8015028:	441a      	add	r2, r3
 801502a:	441d      	add	r5, r3
 801502c:	4613      	mov	r3, r2
 801502e:	e776      	b.n	8014f1e <_dtoa_r+0x7de>
 8015030:	4603      	mov	r3, r0
 8015032:	e7f4      	b.n	801501e <_dtoa_r+0x8de>
 8015034:	9b03      	ldr	r3, [sp, #12]
 8015036:	2b00      	cmp	r3, #0
 8015038:	dc36      	bgt.n	80150a8 <_dtoa_r+0x968>
 801503a:	9b07      	ldr	r3, [sp, #28]
 801503c:	2b02      	cmp	r3, #2
 801503e:	dd33      	ble.n	80150a8 <_dtoa_r+0x968>
 8015040:	9b03      	ldr	r3, [sp, #12]
 8015042:	9304      	str	r3, [sp, #16]
 8015044:	9b04      	ldr	r3, [sp, #16]
 8015046:	b963      	cbnz	r3, 8015062 <_dtoa_r+0x922>
 8015048:	4631      	mov	r1, r6
 801504a:	2205      	movs	r2, #5
 801504c:	4620      	mov	r0, r4
 801504e:	f000 fa2c 	bl	80154aa <__multadd>
 8015052:	4601      	mov	r1, r0
 8015054:	4606      	mov	r6, r0
 8015056:	4650      	mov	r0, sl
 8015058:	f000 fbe5 	bl	8015826 <__mcmp>
 801505c:	2800      	cmp	r0, #0
 801505e:	f73f adb6 	bgt.w	8014bce <_dtoa_r+0x48e>
 8015062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015064:	9d02      	ldr	r5, [sp, #8]
 8015066:	ea6f 0b03 	mvn.w	fp, r3
 801506a:	2300      	movs	r3, #0
 801506c:	9303      	str	r3, [sp, #12]
 801506e:	4631      	mov	r1, r6
 8015070:	4620      	mov	r0, r4
 8015072:	f000 fa03 	bl	801547c <_Bfree>
 8015076:	2f00      	cmp	r7, #0
 8015078:	f43f aea6 	beq.w	8014dc8 <_dtoa_r+0x688>
 801507c:	9b03      	ldr	r3, [sp, #12]
 801507e:	b12b      	cbz	r3, 801508c <_dtoa_r+0x94c>
 8015080:	42bb      	cmp	r3, r7
 8015082:	d003      	beq.n	801508c <_dtoa_r+0x94c>
 8015084:	4619      	mov	r1, r3
 8015086:	4620      	mov	r0, r4
 8015088:	f000 f9f8 	bl	801547c <_Bfree>
 801508c:	4639      	mov	r1, r7
 801508e:	4620      	mov	r0, r4
 8015090:	f000 f9f4 	bl	801547c <_Bfree>
 8015094:	e698      	b.n	8014dc8 <_dtoa_r+0x688>
 8015096:	2600      	movs	r6, #0
 8015098:	4637      	mov	r7, r6
 801509a:	e7e2      	b.n	8015062 <_dtoa_r+0x922>
 801509c:	46bb      	mov	fp, r7
 801509e:	4637      	mov	r7, r6
 80150a0:	e595      	b.n	8014bce <_dtoa_r+0x48e>
 80150a2:	bf00      	nop
 80150a4:	40240000 	.word	0x40240000
 80150a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150aa:	bb93      	cbnz	r3, 8015112 <_dtoa_r+0x9d2>
 80150ac:	9b03      	ldr	r3, [sp, #12]
 80150ae:	9304      	str	r3, [sp, #16]
 80150b0:	9d02      	ldr	r5, [sp, #8]
 80150b2:	4631      	mov	r1, r6
 80150b4:	4650      	mov	r0, sl
 80150b6:	f7ff fab5 	bl	8014624 <quorem>
 80150ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80150be:	f805 9b01 	strb.w	r9, [r5], #1
 80150c2:	9b02      	ldr	r3, [sp, #8]
 80150c4:	9a04      	ldr	r2, [sp, #16]
 80150c6:	1aeb      	subs	r3, r5, r3
 80150c8:	429a      	cmp	r2, r3
 80150ca:	f300 80dc 	bgt.w	8015286 <_dtoa_r+0xb46>
 80150ce:	9b02      	ldr	r3, [sp, #8]
 80150d0:	2a01      	cmp	r2, #1
 80150d2:	bfac      	ite	ge
 80150d4:	189b      	addge	r3, r3, r2
 80150d6:	3301      	addlt	r3, #1
 80150d8:	4698      	mov	r8, r3
 80150da:	2300      	movs	r3, #0
 80150dc:	9303      	str	r3, [sp, #12]
 80150de:	4651      	mov	r1, sl
 80150e0:	2201      	movs	r2, #1
 80150e2:	4620      	mov	r0, r4
 80150e4:	f000 fb4e 	bl	8015784 <__lshift>
 80150e8:	4631      	mov	r1, r6
 80150ea:	4682      	mov	sl, r0
 80150ec:	f000 fb9b 	bl	8015826 <__mcmp>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	f300 808d 	bgt.w	8015210 <_dtoa_r+0xad0>
 80150f6:	d103      	bne.n	8015100 <_dtoa_r+0x9c0>
 80150f8:	f019 0f01 	tst.w	r9, #1
 80150fc:	f040 8088 	bne.w	8015210 <_dtoa_r+0xad0>
 8015100:	4645      	mov	r5, r8
 8015102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015106:	2b30      	cmp	r3, #48	; 0x30
 8015108:	f105 32ff 	add.w	r2, r5, #4294967295
 801510c:	d1af      	bne.n	801506e <_dtoa_r+0x92e>
 801510e:	4615      	mov	r5, r2
 8015110:	e7f7      	b.n	8015102 <_dtoa_r+0x9c2>
 8015112:	9b03      	ldr	r3, [sp, #12]
 8015114:	9304      	str	r3, [sp, #16]
 8015116:	2d00      	cmp	r5, #0
 8015118:	dd05      	ble.n	8015126 <_dtoa_r+0x9e6>
 801511a:	4639      	mov	r1, r7
 801511c:	462a      	mov	r2, r5
 801511e:	4620      	mov	r0, r4
 8015120:	f000 fb30 	bl	8015784 <__lshift>
 8015124:	4607      	mov	r7, r0
 8015126:	f1b8 0f00 	cmp.w	r8, #0
 801512a:	d04c      	beq.n	80151c6 <_dtoa_r+0xa86>
 801512c:	6879      	ldr	r1, [r7, #4]
 801512e:	4620      	mov	r0, r4
 8015130:	f000 f970 	bl	8015414 <_Balloc>
 8015134:	693a      	ldr	r2, [r7, #16]
 8015136:	3202      	adds	r2, #2
 8015138:	4605      	mov	r5, r0
 801513a:	0092      	lsls	r2, r2, #2
 801513c:	f107 010c 	add.w	r1, r7, #12
 8015140:	300c      	adds	r0, #12
 8015142:	f7fc fb26 	bl	8011792 <memcpy>
 8015146:	2201      	movs	r2, #1
 8015148:	4629      	mov	r1, r5
 801514a:	4620      	mov	r0, r4
 801514c:	f000 fb1a 	bl	8015784 <__lshift>
 8015150:	9b00      	ldr	r3, [sp, #0]
 8015152:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015156:	9703      	str	r7, [sp, #12]
 8015158:	f003 0301 	and.w	r3, r3, #1
 801515c:	4607      	mov	r7, r0
 801515e:	9305      	str	r3, [sp, #20]
 8015160:	4631      	mov	r1, r6
 8015162:	4650      	mov	r0, sl
 8015164:	f7ff fa5e 	bl	8014624 <quorem>
 8015168:	9903      	ldr	r1, [sp, #12]
 801516a:	4605      	mov	r5, r0
 801516c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015170:	4650      	mov	r0, sl
 8015172:	f000 fb58 	bl	8015826 <__mcmp>
 8015176:	463a      	mov	r2, r7
 8015178:	9000      	str	r0, [sp, #0]
 801517a:	4631      	mov	r1, r6
 801517c:	4620      	mov	r0, r4
 801517e:	f000 fb6c 	bl	801585a <__mdiff>
 8015182:	68c3      	ldr	r3, [r0, #12]
 8015184:	4602      	mov	r2, r0
 8015186:	bb03      	cbnz	r3, 80151ca <_dtoa_r+0xa8a>
 8015188:	4601      	mov	r1, r0
 801518a:	9006      	str	r0, [sp, #24]
 801518c:	4650      	mov	r0, sl
 801518e:	f000 fb4a 	bl	8015826 <__mcmp>
 8015192:	9a06      	ldr	r2, [sp, #24]
 8015194:	4603      	mov	r3, r0
 8015196:	4611      	mov	r1, r2
 8015198:	4620      	mov	r0, r4
 801519a:	9306      	str	r3, [sp, #24]
 801519c:	f000 f96e 	bl	801547c <_Bfree>
 80151a0:	9b06      	ldr	r3, [sp, #24]
 80151a2:	b9a3      	cbnz	r3, 80151ce <_dtoa_r+0xa8e>
 80151a4:	9a07      	ldr	r2, [sp, #28]
 80151a6:	b992      	cbnz	r2, 80151ce <_dtoa_r+0xa8e>
 80151a8:	9a05      	ldr	r2, [sp, #20]
 80151aa:	b982      	cbnz	r2, 80151ce <_dtoa_r+0xa8e>
 80151ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80151b0:	d029      	beq.n	8015206 <_dtoa_r+0xac6>
 80151b2:	9b00      	ldr	r3, [sp, #0]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dd01      	ble.n	80151bc <_dtoa_r+0xa7c>
 80151b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80151bc:	f108 0501 	add.w	r5, r8, #1
 80151c0:	f888 9000 	strb.w	r9, [r8]
 80151c4:	e753      	b.n	801506e <_dtoa_r+0x92e>
 80151c6:	4638      	mov	r0, r7
 80151c8:	e7c2      	b.n	8015150 <_dtoa_r+0xa10>
 80151ca:	2301      	movs	r3, #1
 80151cc:	e7e3      	b.n	8015196 <_dtoa_r+0xa56>
 80151ce:	9a00      	ldr	r2, [sp, #0]
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	db04      	blt.n	80151de <_dtoa_r+0xa9e>
 80151d4:	d125      	bne.n	8015222 <_dtoa_r+0xae2>
 80151d6:	9a07      	ldr	r2, [sp, #28]
 80151d8:	bb1a      	cbnz	r2, 8015222 <_dtoa_r+0xae2>
 80151da:	9a05      	ldr	r2, [sp, #20]
 80151dc:	bb0a      	cbnz	r2, 8015222 <_dtoa_r+0xae2>
 80151de:	2b00      	cmp	r3, #0
 80151e0:	ddec      	ble.n	80151bc <_dtoa_r+0xa7c>
 80151e2:	4651      	mov	r1, sl
 80151e4:	2201      	movs	r2, #1
 80151e6:	4620      	mov	r0, r4
 80151e8:	f000 facc 	bl	8015784 <__lshift>
 80151ec:	4631      	mov	r1, r6
 80151ee:	4682      	mov	sl, r0
 80151f0:	f000 fb19 	bl	8015826 <__mcmp>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	dc03      	bgt.n	8015200 <_dtoa_r+0xac0>
 80151f8:	d1e0      	bne.n	80151bc <_dtoa_r+0xa7c>
 80151fa:	f019 0f01 	tst.w	r9, #1
 80151fe:	d0dd      	beq.n	80151bc <_dtoa_r+0xa7c>
 8015200:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015204:	d1d8      	bne.n	80151b8 <_dtoa_r+0xa78>
 8015206:	2339      	movs	r3, #57	; 0x39
 8015208:	f888 3000 	strb.w	r3, [r8]
 801520c:	f108 0801 	add.w	r8, r8, #1
 8015210:	4645      	mov	r5, r8
 8015212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015216:	2b39      	cmp	r3, #57	; 0x39
 8015218:	f105 32ff 	add.w	r2, r5, #4294967295
 801521c:	d03b      	beq.n	8015296 <_dtoa_r+0xb56>
 801521e:	3301      	adds	r3, #1
 8015220:	e040      	b.n	80152a4 <_dtoa_r+0xb64>
 8015222:	2b00      	cmp	r3, #0
 8015224:	f108 0501 	add.w	r5, r8, #1
 8015228:	dd05      	ble.n	8015236 <_dtoa_r+0xaf6>
 801522a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801522e:	d0ea      	beq.n	8015206 <_dtoa_r+0xac6>
 8015230:	f109 0901 	add.w	r9, r9, #1
 8015234:	e7c4      	b.n	80151c0 <_dtoa_r+0xa80>
 8015236:	9b02      	ldr	r3, [sp, #8]
 8015238:	9a04      	ldr	r2, [sp, #16]
 801523a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801523e:	1aeb      	subs	r3, r5, r3
 8015240:	4293      	cmp	r3, r2
 8015242:	46a8      	mov	r8, r5
 8015244:	f43f af4b 	beq.w	80150de <_dtoa_r+0x99e>
 8015248:	4651      	mov	r1, sl
 801524a:	2300      	movs	r3, #0
 801524c:	220a      	movs	r2, #10
 801524e:	4620      	mov	r0, r4
 8015250:	f000 f92b 	bl	80154aa <__multadd>
 8015254:	9b03      	ldr	r3, [sp, #12]
 8015256:	9903      	ldr	r1, [sp, #12]
 8015258:	42bb      	cmp	r3, r7
 801525a:	4682      	mov	sl, r0
 801525c:	f04f 0300 	mov.w	r3, #0
 8015260:	f04f 020a 	mov.w	r2, #10
 8015264:	4620      	mov	r0, r4
 8015266:	d104      	bne.n	8015272 <_dtoa_r+0xb32>
 8015268:	f000 f91f 	bl	80154aa <__multadd>
 801526c:	9003      	str	r0, [sp, #12]
 801526e:	4607      	mov	r7, r0
 8015270:	e776      	b.n	8015160 <_dtoa_r+0xa20>
 8015272:	f000 f91a 	bl	80154aa <__multadd>
 8015276:	2300      	movs	r3, #0
 8015278:	9003      	str	r0, [sp, #12]
 801527a:	220a      	movs	r2, #10
 801527c:	4639      	mov	r1, r7
 801527e:	4620      	mov	r0, r4
 8015280:	f000 f913 	bl	80154aa <__multadd>
 8015284:	e7f3      	b.n	801526e <_dtoa_r+0xb2e>
 8015286:	4651      	mov	r1, sl
 8015288:	2300      	movs	r3, #0
 801528a:	220a      	movs	r2, #10
 801528c:	4620      	mov	r0, r4
 801528e:	f000 f90c 	bl	80154aa <__multadd>
 8015292:	4682      	mov	sl, r0
 8015294:	e70d      	b.n	80150b2 <_dtoa_r+0x972>
 8015296:	9b02      	ldr	r3, [sp, #8]
 8015298:	4293      	cmp	r3, r2
 801529a:	d105      	bne.n	80152a8 <_dtoa_r+0xb68>
 801529c:	9a02      	ldr	r2, [sp, #8]
 801529e:	f10b 0b01 	add.w	fp, fp, #1
 80152a2:	2331      	movs	r3, #49	; 0x31
 80152a4:	7013      	strb	r3, [r2, #0]
 80152a6:	e6e2      	b.n	801506e <_dtoa_r+0x92e>
 80152a8:	4615      	mov	r5, r2
 80152aa:	e7b2      	b.n	8015212 <_dtoa_r+0xad2>
 80152ac:	4b09      	ldr	r3, [pc, #36]	; (80152d4 <_dtoa_r+0xb94>)
 80152ae:	f7ff baae 	b.w	801480e <_dtoa_r+0xce>
 80152b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f47f aa88 	bne.w	80147ca <_dtoa_r+0x8a>
 80152ba:	4b07      	ldr	r3, [pc, #28]	; (80152d8 <_dtoa_r+0xb98>)
 80152bc:	f7ff baa7 	b.w	801480e <_dtoa_r+0xce>
 80152c0:	9b04      	ldr	r3, [sp, #16]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f73f aef4 	bgt.w	80150b0 <_dtoa_r+0x970>
 80152c8:	9b07      	ldr	r3, [sp, #28]
 80152ca:	2b02      	cmp	r3, #2
 80152cc:	f77f aef0 	ble.w	80150b0 <_dtoa_r+0x970>
 80152d0:	e6b8      	b.n	8015044 <_dtoa_r+0x904>
 80152d2:	bf00      	nop
 80152d4:	08017db8 	.word	0x08017db8
 80152d8:	08017dfa 	.word	0x08017dfa

080152dc <_fclose_r>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	4605      	mov	r5, r0
 80152e0:	460c      	mov	r4, r1
 80152e2:	b911      	cbnz	r1, 80152ea <_fclose_r+0xe>
 80152e4:	2600      	movs	r6, #0
 80152e6:	4630      	mov	r0, r6
 80152e8:	bd70      	pop	{r4, r5, r6, pc}
 80152ea:	b118      	cbz	r0, 80152f4 <_fclose_r+0x18>
 80152ec:	6983      	ldr	r3, [r0, #24]
 80152ee:	b90b      	cbnz	r3, 80152f4 <_fclose_r+0x18>
 80152f0:	f7fb fb5c 	bl	80109ac <__sinit>
 80152f4:	4b2c      	ldr	r3, [pc, #176]	; (80153a8 <_fclose_r+0xcc>)
 80152f6:	429c      	cmp	r4, r3
 80152f8:	d114      	bne.n	8015324 <_fclose_r+0x48>
 80152fa:	686c      	ldr	r4, [r5, #4]
 80152fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152fe:	07d8      	lsls	r0, r3, #31
 8015300:	d405      	bmi.n	801530e <_fclose_r+0x32>
 8015302:	89a3      	ldrh	r3, [r4, #12]
 8015304:	0599      	lsls	r1, r3, #22
 8015306:	d402      	bmi.n	801530e <_fclose_r+0x32>
 8015308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801530a:	f7fb ff95 	bl	8011238 <__retarget_lock_acquire_recursive>
 801530e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015312:	b98b      	cbnz	r3, 8015338 <_fclose_r+0x5c>
 8015314:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8015316:	f016 0601 	ands.w	r6, r6, #1
 801531a:	d1e3      	bne.n	80152e4 <_fclose_r+0x8>
 801531c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801531e:	f7fb ff8d 	bl	801123c <__retarget_lock_release_recursive>
 8015322:	e7e0      	b.n	80152e6 <_fclose_r+0xa>
 8015324:	4b21      	ldr	r3, [pc, #132]	; (80153ac <_fclose_r+0xd0>)
 8015326:	429c      	cmp	r4, r3
 8015328:	d101      	bne.n	801532e <_fclose_r+0x52>
 801532a:	68ac      	ldr	r4, [r5, #8]
 801532c:	e7e6      	b.n	80152fc <_fclose_r+0x20>
 801532e:	4b20      	ldr	r3, [pc, #128]	; (80153b0 <_fclose_r+0xd4>)
 8015330:	429c      	cmp	r4, r3
 8015332:	bf08      	it	eq
 8015334:	68ec      	ldreq	r4, [r5, #12]
 8015336:	e7e1      	b.n	80152fc <_fclose_r+0x20>
 8015338:	4621      	mov	r1, r4
 801533a:	4628      	mov	r0, r5
 801533c:	f7fb f9fe 	bl	801073c <__sflush_r>
 8015340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015342:	4606      	mov	r6, r0
 8015344:	b133      	cbz	r3, 8015354 <_fclose_r+0x78>
 8015346:	6a21      	ldr	r1, [r4, #32]
 8015348:	4628      	mov	r0, r5
 801534a:	4798      	blx	r3
 801534c:	2800      	cmp	r0, #0
 801534e:	bfb8      	it	lt
 8015350:	f04f 36ff 	movlt.w	r6, #4294967295
 8015354:	89a3      	ldrh	r3, [r4, #12]
 8015356:	061a      	lsls	r2, r3, #24
 8015358:	d503      	bpl.n	8015362 <_fclose_r+0x86>
 801535a:	6921      	ldr	r1, [r4, #16]
 801535c:	4628      	mov	r0, r5
 801535e:	f7fb fc91 	bl	8010c84 <_free_r>
 8015362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015364:	b141      	cbz	r1, 8015378 <_fclose_r+0x9c>
 8015366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801536a:	4299      	cmp	r1, r3
 801536c:	d002      	beq.n	8015374 <_fclose_r+0x98>
 801536e:	4628      	mov	r0, r5
 8015370:	f7fb fc88 	bl	8010c84 <_free_r>
 8015374:	2300      	movs	r3, #0
 8015376:	6363      	str	r3, [r4, #52]	; 0x34
 8015378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801537a:	b121      	cbz	r1, 8015386 <_fclose_r+0xaa>
 801537c:	4628      	mov	r0, r5
 801537e:	f7fb fc81 	bl	8010c84 <_free_r>
 8015382:	2300      	movs	r3, #0
 8015384:	64a3      	str	r3, [r4, #72]	; 0x48
 8015386:	f7fb faf9 	bl	801097c <__sfp_lock_acquire>
 801538a:	2300      	movs	r3, #0
 801538c:	81a3      	strh	r3, [r4, #12]
 801538e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015390:	07db      	lsls	r3, r3, #31
 8015392:	d402      	bmi.n	801539a <_fclose_r+0xbe>
 8015394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015396:	f7fb ff51 	bl	801123c <__retarget_lock_release_recursive>
 801539a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801539c:	f7fb ff4b 	bl	8011236 <__retarget_lock_close_recursive>
 80153a0:	f7fb faf2 	bl	8010988 <__sfp_lock_release>
 80153a4:	e79f      	b.n	80152e6 <_fclose_r+0xa>
 80153a6:	bf00      	nop
 80153a8:	080176a0 	.word	0x080176a0
 80153ac:	080176c0 	.word	0x080176c0
 80153b0:	08017680 	.word	0x08017680

080153b4 <_isatty_r>:
 80153b4:	b538      	push	{r3, r4, r5, lr}
 80153b6:	4c06      	ldr	r4, [pc, #24]	; (80153d0 <_isatty_r+0x1c>)
 80153b8:	2300      	movs	r3, #0
 80153ba:	4605      	mov	r5, r0
 80153bc:	4608      	mov	r0, r1
 80153be:	6023      	str	r3, [r4, #0]
 80153c0:	f7f9 fb7a 	bl	800eab8 <_isatty>
 80153c4:	1c43      	adds	r3, r0, #1
 80153c6:	d102      	bne.n	80153ce <_isatty_r+0x1a>
 80153c8:	6823      	ldr	r3, [r4, #0]
 80153ca:	b103      	cbz	r3, 80153ce <_isatty_r+0x1a>
 80153cc:	602b      	str	r3, [r5, #0]
 80153ce:	bd38      	pop	{r3, r4, r5, pc}
 80153d0:	20001fc8 	.word	0x20001fc8

080153d4 <_localeconv_r>:
 80153d4:	4b04      	ldr	r3, [pc, #16]	; (80153e8 <_localeconv_r+0x14>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	6a18      	ldr	r0, [r3, #32]
 80153da:	4b04      	ldr	r3, [pc, #16]	; (80153ec <_localeconv_r+0x18>)
 80153dc:	2800      	cmp	r0, #0
 80153de:	bf08      	it	eq
 80153e0:	4618      	moveq	r0, r3
 80153e2:	30f0      	adds	r0, #240	; 0xf0
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	20000050 	.word	0x20000050
 80153ec:	20000144 	.word	0x20000144

080153f0 <_lseek_r>:
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	4c07      	ldr	r4, [pc, #28]	; (8015410 <_lseek_r+0x20>)
 80153f4:	4605      	mov	r5, r0
 80153f6:	4608      	mov	r0, r1
 80153f8:	4611      	mov	r1, r2
 80153fa:	2200      	movs	r2, #0
 80153fc:	6022      	str	r2, [r4, #0]
 80153fe:	461a      	mov	r2, r3
 8015400:	f7f9 fb5c 	bl	800eabc <_lseek>
 8015404:	1c43      	adds	r3, r0, #1
 8015406:	d102      	bne.n	801540e <_lseek_r+0x1e>
 8015408:	6823      	ldr	r3, [r4, #0]
 801540a:	b103      	cbz	r3, 801540e <_lseek_r+0x1e>
 801540c:	602b      	str	r3, [r5, #0]
 801540e:	bd38      	pop	{r3, r4, r5, pc}
 8015410:	20001fc8 	.word	0x20001fc8

08015414 <_Balloc>:
 8015414:	b570      	push	{r4, r5, r6, lr}
 8015416:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015418:	4604      	mov	r4, r0
 801541a:	460e      	mov	r6, r1
 801541c:	b93d      	cbnz	r5, 801542e <_Balloc+0x1a>
 801541e:	2010      	movs	r0, #16
 8015420:	f7fb ff78 	bl	8011314 <malloc>
 8015424:	6260      	str	r0, [r4, #36]	; 0x24
 8015426:	6045      	str	r5, [r0, #4]
 8015428:	6085      	str	r5, [r0, #8]
 801542a:	6005      	str	r5, [r0, #0]
 801542c:	60c5      	str	r5, [r0, #12]
 801542e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015430:	68eb      	ldr	r3, [r5, #12]
 8015432:	b183      	cbz	r3, 8015456 <_Balloc+0x42>
 8015434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801543c:	b9b8      	cbnz	r0, 801546e <_Balloc+0x5a>
 801543e:	2101      	movs	r1, #1
 8015440:	fa01 f506 	lsl.w	r5, r1, r6
 8015444:	1d6a      	adds	r2, r5, #5
 8015446:	0092      	lsls	r2, r2, #2
 8015448:	4620      	mov	r0, r4
 801544a:	f000 fb74 	bl	8015b36 <_calloc_r>
 801544e:	b160      	cbz	r0, 801546a <_Balloc+0x56>
 8015450:	6046      	str	r6, [r0, #4]
 8015452:	6085      	str	r5, [r0, #8]
 8015454:	e00e      	b.n	8015474 <_Balloc+0x60>
 8015456:	2221      	movs	r2, #33	; 0x21
 8015458:	2104      	movs	r1, #4
 801545a:	4620      	mov	r0, r4
 801545c:	f000 fb6b 	bl	8015b36 <_calloc_r>
 8015460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015462:	60e8      	str	r0, [r5, #12]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d1e4      	bne.n	8015434 <_Balloc+0x20>
 801546a:	2000      	movs	r0, #0
 801546c:	bd70      	pop	{r4, r5, r6, pc}
 801546e:	6802      	ldr	r2, [r0, #0]
 8015470:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015474:	2300      	movs	r3, #0
 8015476:	6103      	str	r3, [r0, #16]
 8015478:	60c3      	str	r3, [r0, #12]
 801547a:	bd70      	pop	{r4, r5, r6, pc}

0801547c <_Bfree>:
 801547c:	b570      	push	{r4, r5, r6, lr}
 801547e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015480:	4606      	mov	r6, r0
 8015482:	460d      	mov	r5, r1
 8015484:	b93c      	cbnz	r4, 8015496 <_Bfree+0x1a>
 8015486:	2010      	movs	r0, #16
 8015488:	f7fb ff44 	bl	8011314 <malloc>
 801548c:	6270      	str	r0, [r6, #36]	; 0x24
 801548e:	6044      	str	r4, [r0, #4]
 8015490:	6084      	str	r4, [r0, #8]
 8015492:	6004      	str	r4, [r0, #0]
 8015494:	60c4      	str	r4, [r0, #12]
 8015496:	b13d      	cbz	r5, 80154a8 <_Bfree+0x2c>
 8015498:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801549a:	686a      	ldr	r2, [r5, #4]
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154a2:	6029      	str	r1, [r5, #0]
 80154a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80154a8:	bd70      	pop	{r4, r5, r6, pc}

080154aa <__multadd>:
 80154aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ae:	690d      	ldr	r5, [r1, #16]
 80154b0:	461f      	mov	r7, r3
 80154b2:	4606      	mov	r6, r0
 80154b4:	460c      	mov	r4, r1
 80154b6:	f101 0e14 	add.w	lr, r1, #20
 80154ba:	2300      	movs	r3, #0
 80154bc:	f8de 0000 	ldr.w	r0, [lr]
 80154c0:	b281      	uxth	r1, r0
 80154c2:	fb02 7101 	mla	r1, r2, r1, r7
 80154c6:	0c0f      	lsrs	r7, r1, #16
 80154c8:	0c00      	lsrs	r0, r0, #16
 80154ca:	fb02 7000 	mla	r0, r2, r0, r7
 80154ce:	b289      	uxth	r1, r1
 80154d0:	3301      	adds	r3, #1
 80154d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80154d6:	429d      	cmp	r5, r3
 80154d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80154dc:	f84e 1b04 	str.w	r1, [lr], #4
 80154e0:	dcec      	bgt.n	80154bc <__multadd+0x12>
 80154e2:	b1d7      	cbz	r7, 801551a <__multadd+0x70>
 80154e4:	68a3      	ldr	r3, [r4, #8]
 80154e6:	429d      	cmp	r5, r3
 80154e8:	db12      	blt.n	8015510 <__multadd+0x66>
 80154ea:	6861      	ldr	r1, [r4, #4]
 80154ec:	4630      	mov	r0, r6
 80154ee:	3101      	adds	r1, #1
 80154f0:	f7ff ff90 	bl	8015414 <_Balloc>
 80154f4:	6922      	ldr	r2, [r4, #16]
 80154f6:	3202      	adds	r2, #2
 80154f8:	f104 010c 	add.w	r1, r4, #12
 80154fc:	4680      	mov	r8, r0
 80154fe:	0092      	lsls	r2, r2, #2
 8015500:	300c      	adds	r0, #12
 8015502:	f7fc f946 	bl	8011792 <memcpy>
 8015506:	4621      	mov	r1, r4
 8015508:	4630      	mov	r0, r6
 801550a:	f7ff ffb7 	bl	801547c <_Bfree>
 801550e:	4644      	mov	r4, r8
 8015510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015514:	3501      	adds	r5, #1
 8015516:	615f      	str	r7, [r3, #20]
 8015518:	6125      	str	r5, [r4, #16]
 801551a:	4620      	mov	r0, r4
 801551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015520 <__hi0bits>:
 8015520:	0c02      	lsrs	r2, r0, #16
 8015522:	0412      	lsls	r2, r2, #16
 8015524:	4603      	mov	r3, r0
 8015526:	b9b2      	cbnz	r2, 8015556 <__hi0bits+0x36>
 8015528:	0403      	lsls	r3, r0, #16
 801552a:	2010      	movs	r0, #16
 801552c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015530:	bf04      	itt	eq
 8015532:	021b      	lsleq	r3, r3, #8
 8015534:	3008      	addeq	r0, #8
 8015536:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801553a:	bf04      	itt	eq
 801553c:	011b      	lsleq	r3, r3, #4
 801553e:	3004      	addeq	r0, #4
 8015540:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015544:	bf04      	itt	eq
 8015546:	009b      	lsleq	r3, r3, #2
 8015548:	3002      	addeq	r0, #2
 801554a:	2b00      	cmp	r3, #0
 801554c:	db06      	blt.n	801555c <__hi0bits+0x3c>
 801554e:	005b      	lsls	r3, r3, #1
 8015550:	d503      	bpl.n	801555a <__hi0bits+0x3a>
 8015552:	3001      	adds	r0, #1
 8015554:	4770      	bx	lr
 8015556:	2000      	movs	r0, #0
 8015558:	e7e8      	b.n	801552c <__hi0bits+0xc>
 801555a:	2020      	movs	r0, #32
 801555c:	4770      	bx	lr

0801555e <__lo0bits>:
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	f013 0207 	ands.w	r2, r3, #7
 8015564:	4601      	mov	r1, r0
 8015566:	d00b      	beq.n	8015580 <__lo0bits+0x22>
 8015568:	07da      	lsls	r2, r3, #31
 801556a:	d423      	bmi.n	80155b4 <__lo0bits+0x56>
 801556c:	0798      	lsls	r0, r3, #30
 801556e:	bf49      	itett	mi
 8015570:	085b      	lsrmi	r3, r3, #1
 8015572:	089b      	lsrpl	r3, r3, #2
 8015574:	2001      	movmi	r0, #1
 8015576:	600b      	strmi	r3, [r1, #0]
 8015578:	bf5c      	itt	pl
 801557a:	600b      	strpl	r3, [r1, #0]
 801557c:	2002      	movpl	r0, #2
 801557e:	4770      	bx	lr
 8015580:	b298      	uxth	r0, r3
 8015582:	b9a8      	cbnz	r0, 80155b0 <__lo0bits+0x52>
 8015584:	0c1b      	lsrs	r3, r3, #16
 8015586:	2010      	movs	r0, #16
 8015588:	f013 0fff 	tst.w	r3, #255	; 0xff
 801558c:	bf04      	itt	eq
 801558e:	0a1b      	lsreq	r3, r3, #8
 8015590:	3008      	addeq	r0, #8
 8015592:	071a      	lsls	r2, r3, #28
 8015594:	bf04      	itt	eq
 8015596:	091b      	lsreq	r3, r3, #4
 8015598:	3004      	addeq	r0, #4
 801559a:	079a      	lsls	r2, r3, #30
 801559c:	bf04      	itt	eq
 801559e:	089b      	lsreq	r3, r3, #2
 80155a0:	3002      	addeq	r0, #2
 80155a2:	07da      	lsls	r2, r3, #31
 80155a4:	d402      	bmi.n	80155ac <__lo0bits+0x4e>
 80155a6:	085b      	lsrs	r3, r3, #1
 80155a8:	d006      	beq.n	80155b8 <__lo0bits+0x5a>
 80155aa:	3001      	adds	r0, #1
 80155ac:	600b      	str	r3, [r1, #0]
 80155ae:	4770      	bx	lr
 80155b0:	4610      	mov	r0, r2
 80155b2:	e7e9      	b.n	8015588 <__lo0bits+0x2a>
 80155b4:	2000      	movs	r0, #0
 80155b6:	4770      	bx	lr
 80155b8:	2020      	movs	r0, #32
 80155ba:	4770      	bx	lr

080155bc <__i2b>:
 80155bc:	b510      	push	{r4, lr}
 80155be:	460c      	mov	r4, r1
 80155c0:	2101      	movs	r1, #1
 80155c2:	f7ff ff27 	bl	8015414 <_Balloc>
 80155c6:	2201      	movs	r2, #1
 80155c8:	6144      	str	r4, [r0, #20]
 80155ca:	6102      	str	r2, [r0, #16]
 80155cc:	bd10      	pop	{r4, pc}

080155ce <__multiply>:
 80155ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155d2:	4614      	mov	r4, r2
 80155d4:	690a      	ldr	r2, [r1, #16]
 80155d6:	6923      	ldr	r3, [r4, #16]
 80155d8:	429a      	cmp	r2, r3
 80155da:	bfb8      	it	lt
 80155dc:	460b      	movlt	r3, r1
 80155de:	4689      	mov	r9, r1
 80155e0:	bfbc      	itt	lt
 80155e2:	46a1      	movlt	r9, r4
 80155e4:	461c      	movlt	r4, r3
 80155e6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80155ea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80155ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80155f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80155f6:	eb07 060a 	add.w	r6, r7, sl
 80155fa:	429e      	cmp	r6, r3
 80155fc:	bfc8      	it	gt
 80155fe:	3101      	addgt	r1, #1
 8015600:	f7ff ff08 	bl	8015414 <_Balloc>
 8015604:	f100 0514 	add.w	r5, r0, #20
 8015608:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801560c:	462b      	mov	r3, r5
 801560e:	2200      	movs	r2, #0
 8015610:	4543      	cmp	r3, r8
 8015612:	d316      	bcc.n	8015642 <__multiply+0x74>
 8015614:	f104 0214 	add.w	r2, r4, #20
 8015618:	f109 0114 	add.w	r1, r9, #20
 801561c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8015620:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015624:	9301      	str	r3, [sp, #4]
 8015626:	9c01      	ldr	r4, [sp, #4]
 8015628:	4294      	cmp	r4, r2
 801562a:	4613      	mov	r3, r2
 801562c:	d80c      	bhi.n	8015648 <__multiply+0x7a>
 801562e:	2e00      	cmp	r6, #0
 8015630:	dd03      	ble.n	801563a <__multiply+0x6c>
 8015632:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015636:	2b00      	cmp	r3, #0
 8015638:	d054      	beq.n	80156e4 <__multiply+0x116>
 801563a:	6106      	str	r6, [r0, #16]
 801563c:	b003      	add	sp, #12
 801563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015642:	f843 2b04 	str.w	r2, [r3], #4
 8015646:	e7e3      	b.n	8015610 <__multiply+0x42>
 8015648:	f8b3 a000 	ldrh.w	sl, [r3]
 801564c:	3204      	adds	r2, #4
 801564e:	f1ba 0f00 	cmp.w	sl, #0
 8015652:	d020      	beq.n	8015696 <__multiply+0xc8>
 8015654:	46ae      	mov	lr, r5
 8015656:	4689      	mov	r9, r1
 8015658:	f04f 0c00 	mov.w	ip, #0
 801565c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015660:	f8be b000 	ldrh.w	fp, [lr]
 8015664:	b2a3      	uxth	r3, r4
 8015666:	fb0a b303 	mla	r3, sl, r3, fp
 801566a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801566e:	f8de 4000 	ldr.w	r4, [lr]
 8015672:	4463      	add	r3, ip
 8015674:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8015678:	fb0a c40b 	mla	r4, sl, fp, ip
 801567c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015680:	b29b      	uxth	r3, r3
 8015682:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015686:	454f      	cmp	r7, r9
 8015688:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801568c:	f84e 3b04 	str.w	r3, [lr], #4
 8015690:	d8e4      	bhi.n	801565c <__multiply+0x8e>
 8015692:	f8ce c000 	str.w	ip, [lr]
 8015696:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801569a:	f1b9 0f00 	cmp.w	r9, #0
 801569e:	d01f      	beq.n	80156e0 <__multiply+0x112>
 80156a0:	682b      	ldr	r3, [r5, #0]
 80156a2:	46ae      	mov	lr, r5
 80156a4:	468c      	mov	ip, r1
 80156a6:	f04f 0a00 	mov.w	sl, #0
 80156aa:	f8bc 4000 	ldrh.w	r4, [ip]
 80156ae:	f8be b002 	ldrh.w	fp, [lr, #2]
 80156b2:	fb09 b404 	mla	r4, r9, r4, fp
 80156b6:	44a2      	add	sl, r4
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80156be:	f84e 3b04 	str.w	r3, [lr], #4
 80156c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80156c6:	f8be 4000 	ldrh.w	r4, [lr]
 80156ca:	0c1b      	lsrs	r3, r3, #16
 80156cc:	fb09 4303 	mla	r3, r9, r3, r4
 80156d0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80156d4:	4567      	cmp	r7, ip
 80156d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80156da:	d8e6      	bhi.n	80156aa <__multiply+0xdc>
 80156dc:	f8ce 3000 	str.w	r3, [lr]
 80156e0:	3504      	adds	r5, #4
 80156e2:	e7a0      	b.n	8015626 <__multiply+0x58>
 80156e4:	3e01      	subs	r6, #1
 80156e6:	e7a2      	b.n	801562e <__multiply+0x60>

080156e8 <__pow5mult>:
 80156e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156ec:	4615      	mov	r5, r2
 80156ee:	f012 0203 	ands.w	r2, r2, #3
 80156f2:	4606      	mov	r6, r0
 80156f4:	460f      	mov	r7, r1
 80156f6:	d007      	beq.n	8015708 <__pow5mult+0x20>
 80156f8:	3a01      	subs	r2, #1
 80156fa:	4c21      	ldr	r4, [pc, #132]	; (8015780 <__pow5mult+0x98>)
 80156fc:	2300      	movs	r3, #0
 80156fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015702:	f7ff fed2 	bl	80154aa <__multadd>
 8015706:	4607      	mov	r7, r0
 8015708:	10ad      	asrs	r5, r5, #2
 801570a:	d035      	beq.n	8015778 <__pow5mult+0x90>
 801570c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801570e:	b93c      	cbnz	r4, 8015720 <__pow5mult+0x38>
 8015710:	2010      	movs	r0, #16
 8015712:	f7fb fdff 	bl	8011314 <malloc>
 8015716:	6270      	str	r0, [r6, #36]	; 0x24
 8015718:	6044      	str	r4, [r0, #4]
 801571a:	6084      	str	r4, [r0, #8]
 801571c:	6004      	str	r4, [r0, #0]
 801571e:	60c4      	str	r4, [r0, #12]
 8015720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015728:	b94c      	cbnz	r4, 801573e <__pow5mult+0x56>
 801572a:	f240 2171 	movw	r1, #625	; 0x271
 801572e:	4630      	mov	r0, r6
 8015730:	f7ff ff44 	bl	80155bc <__i2b>
 8015734:	2300      	movs	r3, #0
 8015736:	f8c8 0008 	str.w	r0, [r8, #8]
 801573a:	4604      	mov	r4, r0
 801573c:	6003      	str	r3, [r0, #0]
 801573e:	f04f 0800 	mov.w	r8, #0
 8015742:	07eb      	lsls	r3, r5, #31
 8015744:	d50a      	bpl.n	801575c <__pow5mult+0x74>
 8015746:	4639      	mov	r1, r7
 8015748:	4622      	mov	r2, r4
 801574a:	4630      	mov	r0, r6
 801574c:	f7ff ff3f 	bl	80155ce <__multiply>
 8015750:	4639      	mov	r1, r7
 8015752:	4681      	mov	r9, r0
 8015754:	4630      	mov	r0, r6
 8015756:	f7ff fe91 	bl	801547c <_Bfree>
 801575a:	464f      	mov	r7, r9
 801575c:	106d      	asrs	r5, r5, #1
 801575e:	d00b      	beq.n	8015778 <__pow5mult+0x90>
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	b938      	cbnz	r0, 8015774 <__pow5mult+0x8c>
 8015764:	4622      	mov	r2, r4
 8015766:	4621      	mov	r1, r4
 8015768:	4630      	mov	r0, r6
 801576a:	f7ff ff30 	bl	80155ce <__multiply>
 801576e:	6020      	str	r0, [r4, #0]
 8015770:	f8c0 8000 	str.w	r8, [r0]
 8015774:	4604      	mov	r4, r0
 8015776:	e7e4      	b.n	8015742 <__pow5mult+0x5a>
 8015778:	4638      	mov	r0, r7
 801577a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801577e:	bf00      	nop
 8015780:	08017ef8 	.word	0x08017ef8

08015784 <__lshift>:
 8015784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015788:	460c      	mov	r4, r1
 801578a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801578e:	6923      	ldr	r3, [r4, #16]
 8015790:	6849      	ldr	r1, [r1, #4]
 8015792:	eb0a 0903 	add.w	r9, sl, r3
 8015796:	68a3      	ldr	r3, [r4, #8]
 8015798:	4607      	mov	r7, r0
 801579a:	4616      	mov	r6, r2
 801579c:	f109 0501 	add.w	r5, r9, #1
 80157a0:	42ab      	cmp	r3, r5
 80157a2:	db31      	blt.n	8015808 <__lshift+0x84>
 80157a4:	4638      	mov	r0, r7
 80157a6:	f7ff fe35 	bl	8015414 <_Balloc>
 80157aa:	2200      	movs	r2, #0
 80157ac:	4680      	mov	r8, r0
 80157ae:	f100 0314 	add.w	r3, r0, #20
 80157b2:	4611      	mov	r1, r2
 80157b4:	4552      	cmp	r2, sl
 80157b6:	db2a      	blt.n	801580e <__lshift+0x8a>
 80157b8:	6920      	ldr	r0, [r4, #16]
 80157ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80157be:	f104 0114 	add.w	r1, r4, #20
 80157c2:	f016 021f 	ands.w	r2, r6, #31
 80157c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80157ca:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80157ce:	d022      	beq.n	8015816 <__lshift+0x92>
 80157d0:	f1c2 0c20 	rsb	ip, r2, #32
 80157d4:	2000      	movs	r0, #0
 80157d6:	680e      	ldr	r6, [r1, #0]
 80157d8:	4096      	lsls	r6, r2
 80157da:	4330      	orrs	r0, r6
 80157dc:	f843 0b04 	str.w	r0, [r3], #4
 80157e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80157e4:	458e      	cmp	lr, r1
 80157e6:	fa20 f00c 	lsr.w	r0, r0, ip
 80157ea:	d8f4      	bhi.n	80157d6 <__lshift+0x52>
 80157ec:	6018      	str	r0, [r3, #0]
 80157ee:	b108      	cbz	r0, 80157f4 <__lshift+0x70>
 80157f0:	f109 0502 	add.w	r5, r9, #2
 80157f4:	3d01      	subs	r5, #1
 80157f6:	4638      	mov	r0, r7
 80157f8:	f8c8 5010 	str.w	r5, [r8, #16]
 80157fc:	4621      	mov	r1, r4
 80157fe:	f7ff fe3d 	bl	801547c <_Bfree>
 8015802:	4640      	mov	r0, r8
 8015804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015808:	3101      	adds	r1, #1
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	e7c8      	b.n	80157a0 <__lshift+0x1c>
 801580e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015812:	3201      	adds	r2, #1
 8015814:	e7ce      	b.n	80157b4 <__lshift+0x30>
 8015816:	3b04      	subs	r3, #4
 8015818:	f851 2b04 	ldr.w	r2, [r1], #4
 801581c:	f843 2f04 	str.w	r2, [r3, #4]!
 8015820:	458e      	cmp	lr, r1
 8015822:	d8f9      	bhi.n	8015818 <__lshift+0x94>
 8015824:	e7e6      	b.n	80157f4 <__lshift+0x70>

08015826 <__mcmp>:
 8015826:	6903      	ldr	r3, [r0, #16]
 8015828:	690a      	ldr	r2, [r1, #16]
 801582a:	1a9b      	subs	r3, r3, r2
 801582c:	b530      	push	{r4, r5, lr}
 801582e:	d10c      	bne.n	801584a <__mcmp+0x24>
 8015830:	0092      	lsls	r2, r2, #2
 8015832:	3014      	adds	r0, #20
 8015834:	3114      	adds	r1, #20
 8015836:	1884      	adds	r4, r0, r2
 8015838:	4411      	add	r1, r2
 801583a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801583e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015842:	4295      	cmp	r5, r2
 8015844:	d003      	beq.n	801584e <__mcmp+0x28>
 8015846:	d305      	bcc.n	8015854 <__mcmp+0x2e>
 8015848:	2301      	movs	r3, #1
 801584a:	4618      	mov	r0, r3
 801584c:	bd30      	pop	{r4, r5, pc}
 801584e:	42a0      	cmp	r0, r4
 8015850:	d3f3      	bcc.n	801583a <__mcmp+0x14>
 8015852:	e7fa      	b.n	801584a <__mcmp+0x24>
 8015854:	f04f 33ff 	mov.w	r3, #4294967295
 8015858:	e7f7      	b.n	801584a <__mcmp+0x24>

0801585a <__mdiff>:
 801585a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801585e:	460d      	mov	r5, r1
 8015860:	4607      	mov	r7, r0
 8015862:	4611      	mov	r1, r2
 8015864:	4628      	mov	r0, r5
 8015866:	4614      	mov	r4, r2
 8015868:	f7ff ffdd 	bl	8015826 <__mcmp>
 801586c:	1e06      	subs	r6, r0, #0
 801586e:	d108      	bne.n	8015882 <__mdiff+0x28>
 8015870:	4631      	mov	r1, r6
 8015872:	4638      	mov	r0, r7
 8015874:	f7ff fdce 	bl	8015414 <_Balloc>
 8015878:	2301      	movs	r3, #1
 801587a:	6103      	str	r3, [r0, #16]
 801587c:	6146      	str	r6, [r0, #20]
 801587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015882:	bfa4      	itt	ge
 8015884:	4623      	movge	r3, r4
 8015886:	462c      	movge	r4, r5
 8015888:	4638      	mov	r0, r7
 801588a:	6861      	ldr	r1, [r4, #4]
 801588c:	bfa6      	itte	ge
 801588e:	461d      	movge	r5, r3
 8015890:	2600      	movge	r6, #0
 8015892:	2601      	movlt	r6, #1
 8015894:	f7ff fdbe 	bl	8015414 <_Balloc>
 8015898:	692b      	ldr	r3, [r5, #16]
 801589a:	60c6      	str	r6, [r0, #12]
 801589c:	6926      	ldr	r6, [r4, #16]
 801589e:	f105 0914 	add.w	r9, r5, #20
 80158a2:	f104 0214 	add.w	r2, r4, #20
 80158a6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80158aa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80158ae:	f100 0514 	add.w	r5, r0, #20
 80158b2:	f04f 0c00 	mov.w	ip, #0
 80158b6:	f852 ab04 	ldr.w	sl, [r2], #4
 80158ba:	f859 4b04 	ldr.w	r4, [r9], #4
 80158be:	fa1c f18a 	uxtah	r1, ip, sl
 80158c2:	b2a3      	uxth	r3, r4
 80158c4:	1ac9      	subs	r1, r1, r3
 80158c6:	0c23      	lsrs	r3, r4, #16
 80158c8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80158cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80158d0:	b289      	uxth	r1, r1
 80158d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80158d6:	45c8      	cmp	r8, r9
 80158d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80158dc:	4696      	mov	lr, r2
 80158de:	f845 3b04 	str.w	r3, [r5], #4
 80158e2:	d8e8      	bhi.n	80158b6 <__mdiff+0x5c>
 80158e4:	45be      	cmp	lr, r7
 80158e6:	d305      	bcc.n	80158f4 <__mdiff+0x9a>
 80158e8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80158ec:	b18b      	cbz	r3, 8015912 <__mdiff+0xb8>
 80158ee:	6106      	str	r6, [r0, #16]
 80158f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80158f8:	fa1c f381 	uxtah	r3, ip, r1
 80158fc:	141a      	asrs	r2, r3, #16
 80158fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015902:	b29b      	uxth	r3, r3
 8015904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801590c:	f845 3b04 	str.w	r3, [r5], #4
 8015910:	e7e8      	b.n	80158e4 <__mdiff+0x8a>
 8015912:	3e01      	subs	r6, #1
 8015914:	e7e8      	b.n	80158e8 <__mdiff+0x8e>

08015916 <__d2b>:
 8015916:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801591a:	460e      	mov	r6, r1
 801591c:	2101      	movs	r1, #1
 801591e:	ec59 8b10 	vmov	r8, r9, d0
 8015922:	4615      	mov	r5, r2
 8015924:	f7ff fd76 	bl	8015414 <_Balloc>
 8015928:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801592c:	4607      	mov	r7, r0
 801592e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015932:	bb34      	cbnz	r4, 8015982 <__d2b+0x6c>
 8015934:	9301      	str	r3, [sp, #4]
 8015936:	f1b8 0f00 	cmp.w	r8, #0
 801593a:	d027      	beq.n	801598c <__d2b+0x76>
 801593c:	a802      	add	r0, sp, #8
 801593e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8015942:	f7ff fe0c 	bl	801555e <__lo0bits>
 8015946:	9900      	ldr	r1, [sp, #0]
 8015948:	b1f0      	cbz	r0, 8015988 <__d2b+0x72>
 801594a:	9a01      	ldr	r2, [sp, #4]
 801594c:	f1c0 0320 	rsb	r3, r0, #32
 8015950:	fa02 f303 	lsl.w	r3, r2, r3
 8015954:	430b      	orrs	r3, r1
 8015956:	40c2      	lsrs	r2, r0
 8015958:	617b      	str	r3, [r7, #20]
 801595a:	9201      	str	r2, [sp, #4]
 801595c:	9b01      	ldr	r3, [sp, #4]
 801595e:	61bb      	str	r3, [r7, #24]
 8015960:	2b00      	cmp	r3, #0
 8015962:	bf14      	ite	ne
 8015964:	2102      	movne	r1, #2
 8015966:	2101      	moveq	r1, #1
 8015968:	6139      	str	r1, [r7, #16]
 801596a:	b1c4      	cbz	r4, 801599e <__d2b+0x88>
 801596c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015970:	4404      	add	r4, r0
 8015972:	6034      	str	r4, [r6, #0]
 8015974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015978:	6028      	str	r0, [r5, #0]
 801597a:	4638      	mov	r0, r7
 801597c:	b003      	add	sp, #12
 801597e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015986:	e7d5      	b.n	8015934 <__d2b+0x1e>
 8015988:	6179      	str	r1, [r7, #20]
 801598a:	e7e7      	b.n	801595c <__d2b+0x46>
 801598c:	a801      	add	r0, sp, #4
 801598e:	f7ff fde6 	bl	801555e <__lo0bits>
 8015992:	9b01      	ldr	r3, [sp, #4]
 8015994:	617b      	str	r3, [r7, #20]
 8015996:	2101      	movs	r1, #1
 8015998:	6139      	str	r1, [r7, #16]
 801599a:	3020      	adds	r0, #32
 801599c:	e7e5      	b.n	801596a <__d2b+0x54>
 801599e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80159a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80159a6:	6030      	str	r0, [r6, #0]
 80159a8:	6918      	ldr	r0, [r3, #16]
 80159aa:	f7ff fdb9 	bl	8015520 <__hi0bits>
 80159ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80159b2:	e7e1      	b.n	8015978 <__d2b+0x62>

080159b4 <_read_r>:
 80159b4:	b538      	push	{r3, r4, r5, lr}
 80159b6:	4c07      	ldr	r4, [pc, #28]	; (80159d4 <_read_r+0x20>)
 80159b8:	4605      	mov	r5, r0
 80159ba:	4608      	mov	r0, r1
 80159bc:	4611      	mov	r1, r2
 80159be:	2200      	movs	r2, #0
 80159c0:	6022      	str	r2, [r4, #0]
 80159c2:	461a      	mov	r2, r3
 80159c4:	f7f9 f83a 	bl	800ea3c <_read>
 80159c8:	1c43      	adds	r3, r0, #1
 80159ca:	d102      	bne.n	80159d2 <_read_r+0x1e>
 80159cc:	6823      	ldr	r3, [r4, #0]
 80159ce:	b103      	cbz	r3, 80159d2 <_read_r+0x1e>
 80159d0:	602b      	str	r3, [r5, #0]
 80159d2:	bd38      	pop	{r3, r4, r5, pc}
 80159d4:	20001fc8 	.word	0x20001fc8

080159d8 <__ssprint_r>:
 80159d8:	6893      	ldr	r3, [r2, #8]
 80159da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159de:	4681      	mov	r9, r0
 80159e0:	460c      	mov	r4, r1
 80159e2:	4617      	mov	r7, r2
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d060      	beq.n	8015aaa <__ssprint_r+0xd2>
 80159e8:	f04f 0b00 	mov.w	fp, #0
 80159ec:	f8d2 a000 	ldr.w	sl, [r2]
 80159f0:	465e      	mov	r6, fp
 80159f2:	b356      	cbz	r6, 8015a4a <__ssprint_r+0x72>
 80159f4:	68a3      	ldr	r3, [r4, #8]
 80159f6:	429e      	cmp	r6, r3
 80159f8:	d344      	bcc.n	8015a84 <__ssprint_r+0xac>
 80159fa:	89a2      	ldrh	r2, [r4, #12]
 80159fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015a00:	d03e      	beq.n	8015a80 <__ssprint_r+0xa8>
 8015a02:	6825      	ldr	r5, [r4, #0]
 8015a04:	6921      	ldr	r1, [r4, #16]
 8015a06:	eba5 0801 	sub.w	r8, r5, r1
 8015a0a:	6965      	ldr	r5, [r4, #20]
 8015a0c:	2302      	movs	r3, #2
 8015a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a12:	fb95 f5f3 	sdiv	r5, r5, r3
 8015a16:	f108 0301 	add.w	r3, r8, #1
 8015a1a:	4433      	add	r3, r6
 8015a1c:	429d      	cmp	r5, r3
 8015a1e:	bf38      	it	cc
 8015a20:	461d      	movcc	r5, r3
 8015a22:	0553      	lsls	r3, r2, #21
 8015a24:	d546      	bpl.n	8015ab4 <__ssprint_r+0xdc>
 8015a26:	4629      	mov	r1, r5
 8015a28:	4648      	mov	r0, r9
 8015a2a:	f7fb fc83 	bl	8011334 <_malloc_r>
 8015a2e:	b998      	cbnz	r0, 8015a58 <__ssprint_r+0x80>
 8015a30:	230c      	movs	r3, #12
 8015a32:	f8c9 3000 	str.w	r3, [r9]
 8015a36:	89a3      	ldrh	r3, [r4, #12]
 8015a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a3c:	81a3      	strh	r3, [r4, #12]
 8015a3e:	2300      	movs	r3, #0
 8015a40:	60bb      	str	r3, [r7, #8]
 8015a42:	607b      	str	r3, [r7, #4]
 8015a44:	f04f 30ff 	mov.w	r0, #4294967295
 8015a48:	e031      	b.n	8015aae <__ssprint_r+0xd6>
 8015a4a:	f8da b000 	ldr.w	fp, [sl]
 8015a4e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8015a52:	f10a 0a08 	add.w	sl, sl, #8
 8015a56:	e7cc      	b.n	80159f2 <__ssprint_r+0x1a>
 8015a58:	4642      	mov	r2, r8
 8015a5a:	6921      	ldr	r1, [r4, #16]
 8015a5c:	9001      	str	r0, [sp, #4]
 8015a5e:	f7fb fe98 	bl	8011792 <memcpy>
 8015a62:	89a2      	ldrh	r2, [r4, #12]
 8015a64:	9b01      	ldr	r3, [sp, #4]
 8015a66:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8015a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015a6e:	81a2      	strh	r2, [r4, #12]
 8015a70:	6123      	str	r3, [r4, #16]
 8015a72:	6165      	str	r5, [r4, #20]
 8015a74:	4443      	add	r3, r8
 8015a76:	eba5 0508 	sub.w	r5, r5, r8
 8015a7a:	6023      	str	r3, [r4, #0]
 8015a7c:	60a5      	str	r5, [r4, #8]
 8015a7e:	4633      	mov	r3, r6
 8015a80:	429e      	cmp	r6, r3
 8015a82:	d200      	bcs.n	8015a86 <__ssprint_r+0xae>
 8015a84:	4633      	mov	r3, r6
 8015a86:	461a      	mov	r2, r3
 8015a88:	4659      	mov	r1, fp
 8015a8a:	6820      	ldr	r0, [r4, #0]
 8015a8c:	9301      	str	r3, [sp, #4]
 8015a8e:	f7fb fe8b 	bl	80117a8 <memmove>
 8015a92:	68a2      	ldr	r2, [r4, #8]
 8015a94:	9b01      	ldr	r3, [sp, #4]
 8015a96:	1ad2      	subs	r2, r2, r3
 8015a98:	60a2      	str	r2, [r4, #8]
 8015a9a:	6822      	ldr	r2, [r4, #0]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	6023      	str	r3, [r4, #0]
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	1b9e      	subs	r6, r3, r6
 8015aa4:	60be      	str	r6, [r7, #8]
 8015aa6:	2e00      	cmp	r6, #0
 8015aa8:	d1cf      	bne.n	8015a4a <__ssprint_r+0x72>
 8015aaa:	2000      	movs	r0, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	b003      	add	sp, #12
 8015ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ab4:	462a      	mov	r2, r5
 8015ab6:	4648      	mov	r0, r9
 8015ab8:	f7fb ff88 	bl	80119cc <_realloc_r>
 8015abc:	4603      	mov	r3, r0
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d1d6      	bne.n	8015a70 <__ssprint_r+0x98>
 8015ac2:	6921      	ldr	r1, [r4, #16]
 8015ac4:	4648      	mov	r0, r9
 8015ac6:	f7fb f8dd 	bl	8010c84 <_free_r>
 8015aca:	e7b1      	b.n	8015a30 <__ssprint_r+0x58>

08015acc <__sprint_r>:
 8015acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	6893      	ldr	r3, [r2, #8]
 8015ad2:	4680      	mov	r8, r0
 8015ad4:	460f      	mov	r7, r1
 8015ad6:	4614      	mov	r4, r2
 8015ad8:	b91b      	cbnz	r3, 8015ae2 <__sprint_r+0x16>
 8015ada:	6053      	str	r3, [r2, #4]
 8015adc:	4618      	mov	r0, r3
 8015ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8015ae4:	049d      	lsls	r5, r3, #18
 8015ae6:	d523      	bpl.n	8015b30 <__sprint_r+0x64>
 8015ae8:	6815      	ldr	r5, [r2, #0]
 8015aea:	68a0      	ldr	r0, [r4, #8]
 8015aec:	3508      	adds	r5, #8
 8015aee:	b920      	cbnz	r0, 8015afa <__sprint_r+0x2e>
 8015af0:	2300      	movs	r3, #0
 8015af2:	60a3      	str	r3, [r4, #8]
 8015af4:	6063      	str	r3, [r4, #4]
 8015af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015afa:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8015afe:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8015b02:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8015b06:	f04f 0900 	mov.w	r9, #0
 8015b0a:	45ca      	cmp	sl, r9
 8015b0c:	dc05      	bgt.n	8015b1a <__sprint_r+0x4e>
 8015b0e:	68a3      	ldr	r3, [r4, #8]
 8015b10:	f026 0603 	bic.w	r6, r6, #3
 8015b14:	1b9e      	subs	r6, r3, r6
 8015b16:	60a6      	str	r6, [r4, #8]
 8015b18:	e7e7      	b.n	8015aea <__sprint_r+0x1e>
 8015b1a:	463a      	mov	r2, r7
 8015b1c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8015b20:	4640      	mov	r0, r8
 8015b22:	f000 f876 	bl	8015c12 <_fputwc_r>
 8015b26:	1c43      	adds	r3, r0, #1
 8015b28:	d0e2      	beq.n	8015af0 <__sprint_r+0x24>
 8015b2a:	f109 0901 	add.w	r9, r9, #1
 8015b2e:	e7ec      	b.n	8015b0a <__sprint_r+0x3e>
 8015b30:	f7fb f976 	bl	8010e20 <__sfvwrite_r>
 8015b34:	e7dc      	b.n	8015af0 <__sprint_r+0x24>

08015b36 <_calloc_r>:
 8015b36:	b510      	push	{r4, lr}
 8015b38:	4351      	muls	r1, r2
 8015b3a:	f7fb fbfb 	bl	8011334 <_malloc_r>
 8015b3e:	4604      	mov	r4, r0
 8015b40:	b198      	cbz	r0, 8015b6a <_calloc_r+0x34>
 8015b42:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015b46:	f022 0203 	bic.w	r2, r2, #3
 8015b4a:	3a04      	subs	r2, #4
 8015b4c:	2a24      	cmp	r2, #36	; 0x24
 8015b4e:	d81b      	bhi.n	8015b88 <_calloc_r+0x52>
 8015b50:	2a13      	cmp	r2, #19
 8015b52:	d917      	bls.n	8015b84 <_calloc_r+0x4e>
 8015b54:	2100      	movs	r1, #0
 8015b56:	2a1b      	cmp	r2, #27
 8015b58:	6001      	str	r1, [r0, #0]
 8015b5a:	6041      	str	r1, [r0, #4]
 8015b5c:	d807      	bhi.n	8015b6e <_calloc_r+0x38>
 8015b5e:	f100 0308 	add.w	r3, r0, #8
 8015b62:	2200      	movs	r2, #0
 8015b64:	601a      	str	r2, [r3, #0]
 8015b66:	605a      	str	r2, [r3, #4]
 8015b68:	609a      	str	r2, [r3, #8]
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	bd10      	pop	{r4, pc}
 8015b6e:	2a24      	cmp	r2, #36	; 0x24
 8015b70:	6081      	str	r1, [r0, #8]
 8015b72:	60c1      	str	r1, [r0, #12]
 8015b74:	bf11      	iteee	ne
 8015b76:	f100 0310 	addne.w	r3, r0, #16
 8015b7a:	6101      	streq	r1, [r0, #16]
 8015b7c:	f100 0318 	addeq.w	r3, r0, #24
 8015b80:	6141      	streq	r1, [r0, #20]
 8015b82:	e7ee      	b.n	8015b62 <_calloc_r+0x2c>
 8015b84:	4603      	mov	r3, r0
 8015b86:	e7ec      	b.n	8015b62 <_calloc_r+0x2c>
 8015b88:	2100      	movs	r1, #0
 8015b8a:	f7fb fe27 	bl	80117dc <memset>
 8015b8e:	e7ec      	b.n	8015b6a <_calloc_r+0x34>

08015b90 <__fputwc>:
 8015b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b94:	4680      	mov	r8, r0
 8015b96:	460e      	mov	r6, r1
 8015b98:	4614      	mov	r4, r2
 8015b9a:	f7fb fb3d 	bl	8011218 <__locale_mb_cur_max>
 8015b9e:	2801      	cmp	r0, #1
 8015ba0:	d11c      	bne.n	8015bdc <__fputwc+0x4c>
 8015ba2:	1e73      	subs	r3, r6, #1
 8015ba4:	2bfe      	cmp	r3, #254	; 0xfe
 8015ba6:	d819      	bhi.n	8015bdc <__fputwc+0x4c>
 8015ba8:	f88d 6004 	strb.w	r6, [sp, #4]
 8015bac:	4605      	mov	r5, r0
 8015bae:	2700      	movs	r7, #0
 8015bb0:	f10d 0904 	add.w	r9, sp, #4
 8015bb4:	42af      	cmp	r7, r5
 8015bb6:	d020      	beq.n	8015bfa <__fputwc+0x6a>
 8015bb8:	68a3      	ldr	r3, [r4, #8]
 8015bba:	f817 1009 	ldrb.w	r1, [r7, r9]
 8015bbe:	3b01      	subs	r3, #1
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	60a3      	str	r3, [r4, #8]
 8015bc4:	da04      	bge.n	8015bd0 <__fputwc+0x40>
 8015bc6:	69a2      	ldr	r2, [r4, #24]
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	db1a      	blt.n	8015c02 <__fputwc+0x72>
 8015bcc:	290a      	cmp	r1, #10
 8015bce:	d018      	beq.n	8015c02 <__fputwc+0x72>
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	1c5a      	adds	r2, r3, #1
 8015bd4:	6022      	str	r2, [r4, #0]
 8015bd6:	7019      	strb	r1, [r3, #0]
 8015bd8:	3701      	adds	r7, #1
 8015bda:	e7eb      	b.n	8015bb4 <__fputwc+0x24>
 8015bdc:	4632      	mov	r2, r6
 8015bde:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8015be2:	a901      	add	r1, sp, #4
 8015be4:	4640      	mov	r0, r8
 8015be6:	f7fe fbe1 	bl	80143ac <_wcrtomb_r>
 8015bea:	1c42      	adds	r2, r0, #1
 8015bec:	4605      	mov	r5, r0
 8015bee:	d1de      	bne.n	8015bae <__fputwc+0x1e>
 8015bf0:	89a3      	ldrh	r3, [r4, #12]
 8015bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf6:	81a3      	strh	r3, [r4, #12]
 8015bf8:	4606      	mov	r6, r0
 8015bfa:	4630      	mov	r0, r6
 8015bfc:	b003      	add	sp, #12
 8015bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c02:	4622      	mov	r2, r4
 8015c04:	4640      	mov	r0, r8
 8015c06:	f7fe fb73 	bl	80142f0 <__swbuf_r>
 8015c0a:	1c43      	adds	r3, r0, #1
 8015c0c:	d1e4      	bne.n	8015bd8 <__fputwc+0x48>
 8015c0e:	4606      	mov	r6, r0
 8015c10:	e7f3      	b.n	8015bfa <__fputwc+0x6a>

08015c12 <_fputwc_r>:
 8015c12:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015c14:	07db      	lsls	r3, r3, #31
 8015c16:	b570      	push	{r4, r5, r6, lr}
 8015c18:	4605      	mov	r5, r0
 8015c1a:	460e      	mov	r6, r1
 8015c1c:	4614      	mov	r4, r2
 8015c1e:	d405      	bmi.n	8015c2c <_fputwc_r+0x1a>
 8015c20:	8993      	ldrh	r3, [r2, #12]
 8015c22:	0598      	lsls	r0, r3, #22
 8015c24:	d402      	bmi.n	8015c2c <_fputwc_r+0x1a>
 8015c26:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8015c28:	f7fb fb06 	bl	8011238 <__retarget_lock_acquire_recursive>
 8015c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c30:	0499      	lsls	r1, r3, #18
 8015c32:	d406      	bmi.n	8015c42 <_fputwc_r+0x30>
 8015c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015c38:	81a3      	strh	r3, [r4, #12]
 8015c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015c40:	6663      	str	r3, [r4, #100]	; 0x64
 8015c42:	4622      	mov	r2, r4
 8015c44:	4628      	mov	r0, r5
 8015c46:	4631      	mov	r1, r6
 8015c48:	f7ff ffa2 	bl	8015b90 <__fputwc>
 8015c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c4e:	07da      	lsls	r2, r3, #31
 8015c50:	4605      	mov	r5, r0
 8015c52:	d405      	bmi.n	8015c60 <_fputwc_r+0x4e>
 8015c54:	89a3      	ldrh	r3, [r4, #12]
 8015c56:	059b      	lsls	r3, r3, #22
 8015c58:	d402      	bmi.n	8015c60 <_fputwc_r+0x4e>
 8015c5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c5c:	f7fb faee 	bl	801123c <__retarget_lock_release_recursive>
 8015c60:	4628      	mov	r0, r5
 8015c62:	bd70      	pop	{r4, r5, r6, pc}

08015c64 <_init>:
 8015c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c66:	bf00      	nop
 8015c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c6a:	bc08      	pop	{r3}
 8015c6c:	469e      	mov	lr, r3
 8015c6e:	4770      	bx	lr

08015c70 <_fini>:
 8015c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c72:	bf00      	nop
 8015c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c76:	bc08      	pop	{r3}
 8015c78:	469e      	mov	lr, r3
 8015c7a:	4770      	bx	lr
