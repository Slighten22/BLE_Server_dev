
BLE_Server_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800cde0  0800cde0  0001cde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000138  0800d4d8  0800d4d8  0001d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001d8  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000000c  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000006ac  20000000  0800d7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001720  200006ac  0800dea4  000206ac  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001dcc  0800dea4  00021dcc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003d4de  00000000  00000000  000206dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006db5  00000000  00000000  0005dbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000143d9  00000000  00000000  0006496f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  00078d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020e0  00000000  00000000  0007a968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012125  00000000  00000000  0007ca48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b9b1  00000000  00000000  0008eb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0009a51e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007018  00000000  00000000  0009a59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006ac 	.word	0x200006ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdc8 	.word	0x0800cdc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006b0 	.word	0x200006b0
 80001cc:	0800cdc8 	.word	0x0800cdc8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f001 b8f6 	b.w	8001e04 <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	468c      	mov	ip, r1
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	9e08      	ldr	r6, [sp, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d151      	bne.n	8000ce4 <__udivmoddi4+0xb4>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d96d      	bls.n	8000d22 <__udivmoddi4+0xf2>
 8000c46:	fab2 fe82 	clz	lr, r2
 8000c4a:	f1be 0f00 	cmp.w	lr, #0
 8000c4e:	d00b      	beq.n	8000c68 <__udivmoddi4+0x38>
 8000c50:	f1ce 0c20 	rsb	ip, lr, #32
 8000c54:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c58:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c5c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c60:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c64:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c6c:	0c25      	lsrs	r5, r4, #16
 8000c6e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7e:	fb08 f309 	mul.w	r3, r8, r9
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x6c>
 8000c86:	19ed      	adds	r5, r5, r7
 8000c88:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c8c:	f080 8123 	bcs.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	f240 8120 	bls.w	8000ed6 <__udivmoddi4+0x2a6>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	443d      	add	r5, r7
 8000c9c:	1aed      	subs	r5, r5, r3
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ca4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ca8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cac:	fb00 f909 	mul.w	r9, r0, r9
 8000cb0:	45a1      	cmp	r9, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x98>
 8000cb4:	19e4      	adds	r4, r4, r7
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 810a 	bcs.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cbe:	45a1      	cmp	r9, r4
 8000cc0:	f240 8107 	bls.w	8000ed2 <__udivmoddi4+0x2a2>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	eba4 0409 	sub.w	r4, r4, r9
 8000ccc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d061      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000cd6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6034      	str	r4, [r6, #0]
 8000cde:	6073      	str	r3, [r6, #4]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0xc8>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d054      	beq.n	8000d96 <__udivmoddi4+0x166>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	f040 808e 	bne.w	8000e1e <__udivmoddi4+0x1ee>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xdc>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fa 	bhi.w	8000f00 <__udivmoddi4+0x2d0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	46ac      	mov	ip, r5
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d03f      	beq.n	8000d9a <__udivmoddi4+0x16a>
 8000d1a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b912      	cbnz	r2, 8000d2a <__udivmoddi4+0xfa>
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d2a:	fab7 fe87 	clz	lr, r7
 8000d2e:	f1be 0f00 	cmp.w	lr, #0
 8000d32:	d134      	bne.n	8000d9e <__udivmoddi4+0x16e>
 8000d34:	1beb      	subs	r3, r5, r7
 8000d36:	0c3a      	lsrs	r2, r7, #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d42:	0c25      	lsrs	r5, r4, #16
 8000d44:	fb02 3318 	mls	r3, r2, r8, r3
 8000d48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d4c:	fb0c f308 	mul.w	r3, ip, r8
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x134>
 8000d54:	19ed      	adds	r5, r5, r7
 8000d56:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x132>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	f200 80d1 	bhi.w	8000f04 <__udivmoddi4+0x2d4>
 8000d62:	4680      	mov	r8, r0
 8000d64:	1aed      	subs	r5, r5, r3
 8000d66:	b2a3      	uxth	r3, r4
 8000d68:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d6c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d74:	fb0c fc00 	mul.w	ip, ip, r0
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x15c>
 8000d7c:	19e4      	adds	r4, r4, r7
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x15a>
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	f200 80b8 	bhi.w	8000efa <__udivmoddi4+0x2ca>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d94:	e79d      	b.n	8000cd2 <__udivmoddi4+0xa2>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1ce 0420 	rsb	r4, lr, #32
 8000da2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000da6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000daa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dae:	0c3a      	lsrs	r2, r7, #16
 8000db0:	fa25 f404 	lsr.w	r4, r5, r4
 8000db4:	ea48 0803 	orr.w	r8, r8, r3
 8000db8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dc0:	fb02 4411 	mls	r4, r2, r1, r4
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dcc:	fb01 f30c 	mul.w	r3, r1, ip
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1bc>
 8000dd8:	19ed      	adds	r5, r5, r7
 8000dda:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dde:	f080 808a 	bcs.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	f240 8087 	bls.w	8000ef6 <__udivmoddi4+0x2c6>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443d      	add	r5, r7
 8000dec:	1aeb      	subs	r3, r5, r3
 8000dee:	fa1f f588 	uxth.w	r5, r8
 8000df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000df6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfe:	fb00 f30c 	mul.w	r3, r0, ip
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x1e6>
 8000e06:	19ed      	adds	r5, r5, r7
 8000e08:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0c:	d26f      	bcs.n	8000eee <__udivmoddi4+0x2be>
 8000e0e:	42ab      	cmp	r3, r5
 8000e10:	d96d      	bls.n	8000eee <__udivmoddi4+0x2be>
 8000e12:	3802      	subs	r0, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	1aeb      	subs	r3, r5, r3
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	e78f      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000e1e:	f1c1 0720 	rsb	r7, r1, #32
 8000e22:	fa22 f807 	lsr.w	r8, r2, r7
 8000e26:	408b      	lsls	r3, r1
 8000e28:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2c:	ea48 0303 	orr.w	r3, r8, r3
 8000e30:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e3e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e42:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e46:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e4a:	fa1f f883 	uxth.w	r8, r3
 8000e4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e52:	fb09 f408 	mul.w	r4, r9, r8
 8000e56:	42ac      	cmp	r4, r5
 8000e58:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x244>
 8000e62:	18ed      	adds	r5, r5, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d243      	bcs.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	d941      	bls.n	8000ef2 <__udivmoddi4+0x2c2>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	441d      	add	r5, r3
 8000e74:	1b2d      	subs	r5, r5, r4
 8000e76:	fa1f fe8e 	uxth.w	lr, lr
 8000e7a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e7e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x26e>
 8000e8e:	18e4      	adds	r4, r4, r3
 8000e90:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e94:	d229      	bcs.n	8000eea <__udivmoddi4+0x2ba>
 8000e96:	45a0      	cmp	r8, r4
 8000e98:	d927      	bls.n	8000eea <__udivmoddi4+0x2ba>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	441c      	add	r4, r3
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba4 0408 	sub.w	r4, r4, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454c      	cmp	r4, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	d315      	bcc.n	8000ede <__udivmoddi4+0x2ae>
 8000eb2:	d012      	beq.n	8000eda <__udivmoddi4+0x2aa>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x29c>
 8000eb6:	ebba 030e 	subs.w	r3, sl, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	40cc      	lsrs	r4, r1
 8000ec8:	6037      	str	r7, [r6, #0]
 8000eca:	6074      	str	r4, [r6, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e6f8      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	e6e0      	b.n	8000c9c <__udivmoddi4+0x6c>
 8000eda:	45c2      	cmp	sl, r8
 8000edc:	d2ea      	bcs.n	8000eb4 <__udivmoddi4+0x284>
 8000ede:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7e4      	b.n	8000eb4 <__udivmoddi4+0x284>
 8000eea:	4628      	mov	r0, r5
 8000eec:	e7d7      	b.n	8000e9e <__udivmoddi4+0x26e>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	e791      	b.n	8000e16 <__udivmoddi4+0x1e6>
 8000ef2:	4681      	mov	r9, r0
 8000ef4:	e7be      	b.n	8000e74 <__udivmoddi4+0x244>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	e778      	b.n	8000dec <__udivmoddi4+0x1bc>
 8000efa:	3802      	subs	r0, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	e745      	b.n	8000d8c <__udivmoddi4+0x15c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e708      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000f04:	f1a8 0802 	sub.w	r8, r8, #2
 8000f08:	443d      	add	r5, r7
 8000f0a:	e72b      	b.n	8000d64 <__udivmoddi4+0x134>

08000f0c <selfrel_offset31>:
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	005a      	lsls	r2, r3, #1
 8000f10:	bf4c      	ite	mi
 8000f12:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000f16:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000f1a:	4418      	add	r0, r3
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <search_EIT_table>:
 8000f20:	b361      	cbz	r1, 8000f7c <search_EIT_table+0x5c>
 8000f22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f26:	f101 3aff 	add.w	sl, r1, #4294967295
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	46d1      	mov	r9, sl
 8000f30:	2700      	movs	r7, #0
 8000f32:	eb07 0409 	add.w	r4, r7, r9
 8000f36:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000f3a:	1064      	asrs	r4, r4, #1
 8000f3c:	00e5      	lsls	r5, r4, #3
 8000f3e:	1971      	adds	r1, r6, r5
 8000f40:	4608      	mov	r0, r1
 8000f42:	f7ff ffe3 	bl	8000f0c <selfrel_offset31>
 8000f46:	45a2      	cmp	sl, r4
 8000f48:	4683      	mov	fp, r0
 8000f4a:	f105 0008 	add.w	r0, r5, #8
 8000f4e:	4430      	add	r0, r6
 8000f50:	d009      	beq.n	8000f66 <search_EIT_table+0x46>
 8000f52:	f7ff ffdb 	bl	8000f0c <selfrel_offset31>
 8000f56:	45c3      	cmp	fp, r8
 8000f58:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f5c:	d805      	bhi.n	8000f6a <search_EIT_table+0x4a>
 8000f5e:	4540      	cmp	r0, r8
 8000f60:	d209      	bcs.n	8000f76 <search_EIT_table+0x56>
 8000f62:	1c67      	adds	r7, r4, #1
 8000f64:	e7e5      	b.n	8000f32 <search_EIT_table+0x12>
 8000f66:	45c3      	cmp	fp, r8
 8000f68:	d905      	bls.n	8000f76 <search_EIT_table+0x56>
 8000f6a:	42a7      	cmp	r7, r4
 8000f6c:	d002      	beq.n	8000f74 <search_EIT_table+0x54>
 8000f6e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000f72:	e7de      	b.n	8000f32 <search_EIT_table+0x12>
 8000f74:	2100      	movs	r1, #0
 8000f76:	4608      	mov	r0, r1
 8000f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4770      	bx	lr

08000f80 <__gnu_unwind_get_pr_addr>:
 8000f80:	2801      	cmp	r0, #1
 8000f82:	d007      	beq.n	8000f94 <__gnu_unwind_get_pr_addr+0x14>
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d007      	beq.n	8000f98 <__gnu_unwind_get_pr_addr+0x18>
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__gnu_unwind_get_pr_addr+0x1c>)
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	bf0c      	ite	eq
 8000f8e:	4618      	moveq	r0, r3
 8000f90:	2000      	movne	r0, #0
 8000f92:	4770      	bx	lr
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <__gnu_unwind_get_pr_addr+0x20>)
 8000f96:	4770      	bx	lr
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <__gnu_unwind_get_pr_addr+0x24>)
 8000f9a:	4770      	bx	lr
 8000f9c:	08001685 	.word	0x08001685
 8000fa0:	08001689 	.word	0x08001689
 8000fa4:	0800168d 	.word	0x0800168d

08000fa8 <get_eit_entry>:
 8000fa8:	b530      	push	{r4, r5, lr}
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <get_eit_entry+0x94>)
 8000fac:	b083      	sub	sp, #12
 8000fae:	4604      	mov	r4, r0
 8000fb0:	1e8d      	subs	r5, r1, #2
 8000fb2:	b37b      	cbz	r3, 8001014 <get_eit_entry+0x6c>
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	b320      	cbz	r0, 8001008 <get_eit_entry+0x60>
 8000fbe:	9901      	ldr	r1, [sp, #4]
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	f7ff ffad 	bl	8000f20 <search_EIT_table>
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	b1f0      	cbz	r0, 8001008 <get_eit_entry+0x60>
 8000fca:	f7ff ff9f 	bl	8000f0c <selfrel_offset31>
 8000fce:	684b      	ldr	r3, [r1, #4]
 8000fd0:	64a0      	str	r0, [r4, #72]	; 0x48
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d012      	beq.n	8000ffc <get_eit_entry+0x54>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f101 0004 	add.w	r0, r1, #4
 8000fdc:	db20      	blt.n	8001020 <get_eit_entry+0x78>
 8000fde:	f7ff ff95 	bl	8000f0c <selfrel_offset31>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000fe6:	6523      	str	r3, [r4, #80]	; 0x50
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db1c      	blt.n	8001028 <get_eit_entry+0x80>
 8000fee:	f7ff ff8d 	bl	8000f0c <selfrel_offset31>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	6120      	str	r0, [r4, #16]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd30      	pop	{r4, r5, pc}
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6123      	str	r3, [r4, #16]
 8001000:	2305      	movs	r3, #5
 8001002:	4618      	mov	r0, r3
 8001004:	b003      	add	sp, #12
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	2300      	movs	r3, #0
 800100a:	6123      	str	r3, [r4, #16]
 800100c:	2309      	movs	r3, #9
 800100e:	4618      	mov	r0, r3
 8001010:	b003      	add	sp, #12
 8001012:	bd30      	pop	{r4, r5, pc}
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <get_eit_entry+0x98>)
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <get_eit_entry+0x9c>)
 8001018:	1a09      	subs	r1, r1, r0
 800101a:	10c9      	asrs	r1, r1, #3
 800101c:	9101      	str	r1, [sp, #4]
 800101e:	e7cf      	b.n	8000fc0 <get_eit_entry+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001024:	6523      	str	r3, [r4, #80]	; 0x50
 8001026:	e7df      	b.n	8000fe8 <get_eit_entry+0x40>
 8001028:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800102c:	f7ff ffa8 	bl	8000f80 <__gnu_unwind_get_pr_addr>
 8001030:	2800      	cmp	r0, #0
 8001032:	6120      	str	r0, [r4, #16]
 8001034:	bf14      	ite	ne
 8001036:	2300      	movne	r3, #0
 8001038:	2309      	moveq	r3, #9
 800103a:	e7dc      	b.n	8000ff6 <get_eit_entry+0x4e>
 800103c:	00000000 	.word	0x00000000
 8001040:	0800d7e8 	.word	0x0800d7e8
 8001044:	0800d610 	.word	0x0800d610

08001048 <restore_non_core_regs>:
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	07da      	lsls	r2, r3, #31
 800104c:	b510      	push	{r4, lr}
 800104e:	4604      	mov	r4, r0
 8001050:	d406      	bmi.n	8001060 <restore_non_core_regs+0x18>
 8001052:	079b      	lsls	r3, r3, #30
 8001054:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001058:	d509      	bpl.n	800106e <restore_non_core_regs+0x26>
 800105a:	f000 fc51 	bl	8001900 <__gnu_Unwind_Restore_VFP_D>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	0759      	lsls	r1, r3, #29
 8001062:	d509      	bpl.n	8001078 <restore_non_core_regs+0x30>
 8001064:	071a      	lsls	r2, r3, #28
 8001066:	d50e      	bpl.n	8001086 <restore_non_core_regs+0x3e>
 8001068:	06db      	lsls	r3, r3, #27
 800106a:	d513      	bpl.n	8001094 <restore_non_core_regs+0x4c>
 800106c:	bd10      	pop	{r4, pc}
 800106e:	f000 fc3f 	bl	80018f0 <__gnu_Unwind_Restore_VFP>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	0759      	lsls	r1, r3, #29
 8001076:	d4f5      	bmi.n	8001064 <restore_non_core_regs+0x1c>
 8001078:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800107c:	f000 fc48 	bl	8001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	071a      	lsls	r2, r3, #28
 8001084:	d4f0      	bmi.n	8001068 <restore_non_core_regs+0x20>
 8001086:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800108a:	f000 fc49 	bl	8001920 <__gnu_Unwind_Restore_WMMXD>
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	06db      	lsls	r3, r3, #27
 8001092:	d4eb      	bmi.n	800106c <restore_non_core_regs+0x24>
 8001094:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800109c:	f000 bc84 	b.w	80019a8 <__gnu_Unwind_Restore_WMMXC>

080010a0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	b103      	cbz	r3, 80010a6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80010a4:	4403      	add	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__gnu_unwind_24bit.isra.1>:
 80010ac:	2009      	movs	r0, #9
 80010ae:	4770      	bx	lr

080010b0 <_Unwind_DebugHook>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <unwind_phase2>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	e008      	b.n	80010ce <unwind_phase2+0x1a>
 80010bc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80010be:	6163      	str	r3, [r4, #20]
 80010c0:	462a      	mov	r2, r5
 80010c2:	6923      	ldr	r3, [r4, #16]
 80010c4:	4621      	mov	r1, r4
 80010c6:	2001      	movs	r0, #1
 80010c8:	4798      	blx	r3
 80010ca:	2808      	cmp	r0, #8
 80010cc:	d108      	bne.n	80010e0 <unwind_phase2+0x2c>
 80010ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff69 	bl	8000fa8 <get_eit_entry>
 80010d6:	4606      	mov	r6, r0
 80010d8:	2800      	cmp	r0, #0
 80010da:	d0ef      	beq.n	80010bc <unwind_phase2+0x8>
 80010dc:	f00b fe29 	bl	800cd32 <abort>
 80010e0:	2807      	cmp	r0, #7
 80010e2:	d1fb      	bne.n	80010dc <unwind_phase2+0x28>
 80010e4:	4630      	mov	r0, r6
 80010e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010e8:	f7ff ffe2 	bl	80010b0 <_Unwind_DebugHook>
 80010ec:	1d28      	adds	r0, r5, #4
 80010ee:	f000 fbf3 	bl	80018d8 <__restore_core_regs>
 80010f2:	bf00      	nop

080010f4 <unwind_phase2_forced>:
 80010f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f8:	1d0c      	adds	r4, r1, #4
 80010fa:	4605      	mov	r5, r0
 80010fc:	4692      	mov	sl, r2
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001104:	ae03      	add	r6, sp, #12
 8001106:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001110:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001114:	ac02      	add	r4, sp, #8
 8001116:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800111a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800111e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001122:	2300      	movs	r3, #0
 8001124:	4628      	mov	r0, r5
 8001126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	f7ff ff3d 	bl	8000fa8 <get_eit_entry>
 800112e:	f1ba 0f00 	cmp.w	sl, #0
 8001132:	4607      	mov	r7, r0
 8001134:	bf14      	ite	ne
 8001136:	260a      	movne	r6, #10
 8001138:	2609      	moveq	r6, #9
 800113a:	b17f      	cbz	r7, 800115c <unwind_phase2_forced+0x68>
 800113c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800113e:	f046 0110 	orr.w	r1, r6, #16
 8001142:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001146:	462a      	mov	r2, r5
 8001148:	6463      	str	r3, [r4, #68]	; 0x44
 800114a:	2001      	movs	r0, #1
 800114c:	462b      	mov	r3, r5
 800114e:	47c0      	blx	r8
 8001150:	bb78      	cbnz	r0, 80011b2 <unwind_phase2_forced+0xbe>
 8001152:	4638      	mov	r0, r7
 8001154:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115e:	616b      	str	r3, [r5, #20]
 8001160:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001164:	4621      	mov	r1, r4
 8001166:	a87a      	add	r0, sp, #488	; 0x1e8
 8001168:	f007 fc56 	bl	8008a18 <memcpy>
 800116c:	692b      	ldr	r3, [r5, #16]
 800116e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001170:	4629      	mov	r1, r5
 8001172:	4630      	mov	r0, r6
 8001174:	4798      	blx	r3
 8001176:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001178:	4682      	mov	sl, r0
 800117a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800117e:	4631      	mov	r1, r6
 8001180:	6463      	str	r3, [r4, #68]	; 0x44
 8001182:	462a      	mov	r2, r5
 8001184:	462b      	mov	r3, r5
 8001186:	2001      	movs	r0, #1
 8001188:	47c0      	blx	r8
 800118a:	b990      	cbnz	r0, 80011b2 <unwind_phase2_forced+0xbe>
 800118c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001190:	a97a      	add	r1, sp, #488	; 0x1e8
 8001192:	4620      	mov	r0, r4
 8001194:	f007 fc40 	bl	8008a18 <memcpy>
 8001198:	f1ba 0f08 	cmp.w	sl, #8
 800119c:	d106      	bne.n	80011ac <unwind_phase2_forced+0xb8>
 800119e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011a0:	4628      	mov	r0, r5
 80011a2:	f7ff ff01 	bl	8000fa8 <get_eit_entry>
 80011a6:	2609      	movs	r6, #9
 80011a8:	4607      	mov	r7, r0
 80011aa:	e7c6      	b.n	800113a <unwind_phase2_forced+0x46>
 80011ac:	f1ba 0f07 	cmp.w	sl, #7
 80011b0:	d005      	beq.n	80011be <unwind_phase2_forced+0xca>
 80011b2:	2709      	movs	r7, #9
 80011b4:	4638      	mov	r0, r7
 80011b6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	4638      	mov	r0, r7
 80011c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011c2:	f7ff ff75 	bl	80010b0 <_Unwind_DebugHook>
 80011c6:	a803      	add	r0, sp, #12
 80011c8:	f000 fb86 	bl	80018d8 <__restore_core_regs>

080011cc <_Unwind_GetCFA>:
 80011cc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80011ce:	4770      	bx	lr

080011d0 <__gnu_Unwind_RaiseException>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80011d4:	640b      	str	r3, [r1, #64]	; 0x40
 80011d6:	1d0e      	adds	r6, r1, #4
 80011d8:	460f      	mov	r7, r1
 80011da:	4604      	mov	r4, r0
 80011dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011de:	b0f9      	sub	sp, #484	; 0x1e4
 80011e0:	ad01      	add	r5, sp, #4
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011f0:	f04f 36ff 	mov.w	r6, #4294967295
 80011f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011f8:	9600      	str	r6, [sp, #0]
 80011fa:	e006      	b.n	800120a <__gnu_Unwind_RaiseException+0x3a>
 80011fc:	6923      	ldr	r3, [r4, #16]
 80011fe:	466a      	mov	r2, sp
 8001200:	4621      	mov	r1, r4
 8001202:	4798      	blx	r3
 8001204:	2808      	cmp	r0, #8
 8001206:	4605      	mov	r5, r0
 8001208:	d108      	bne.n	800121c <__gnu_Unwind_RaiseException+0x4c>
 800120a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fecb 	bl	8000fa8 <get_eit_entry>
 8001212:	2800      	cmp	r0, #0
 8001214:	d0f2      	beq.n	80011fc <__gnu_Unwind_RaiseException+0x2c>
 8001216:	2009      	movs	r0, #9
 8001218:	b079      	add	sp, #484	; 0x1e4
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121c:	4668      	mov	r0, sp
 800121e:	f7ff ff13 	bl	8001048 <restore_non_core_regs>
 8001222:	2d06      	cmp	r5, #6
 8001224:	d1f7      	bne.n	8001216 <__gnu_Unwind_RaiseException+0x46>
 8001226:	4639      	mov	r1, r7
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff43 	bl	80010b4 <unwind_phase2>
 800122e:	bf00      	nop

08001230 <__gnu_Unwind_ForcedUnwind>:
 8001230:	b430      	push	{r4, r5}
 8001232:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001234:	60c1      	str	r1, [r0, #12]
 8001236:	6182      	str	r2, [r0, #24]
 8001238:	4619      	mov	r1, r3
 800123a:	641d      	str	r5, [r3, #64]	; 0x40
 800123c:	2200      	movs	r2, #0
 800123e:	bc30      	pop	{r4, r5}
 8001240:	e758      	b.n	80010f4 <unwind_phase2_forced>
 8001242:	bf00      	nop

08001244 <__gnu_Unwind_Resume>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	68c6      	ldr	r6, [r0, #12]
 8001248:	6943      	ldr	r3, [r0, #20]
 800124a:	640b      	str	r3, [r1, #64]	; 0x40
 800124c:	b126      	cbz	r6, 8001258 <__gnu_Unwind_Resume+0x14>
 800124e:	2201      	movs	r2, #1
 8001250:	f7ff ff50 	bl	80010f4 <unwind_phase2_forced>
 8001254:	f00b fd6d 	bl	800cd32 <abort>
 8001258:	6903      	ldr	r3, [r0, #16]
 800125a:	460a      	mov	r2, r1
 800125c:	4604      	mov	r4, r0
 800125e:	460d      	mov	r5, r1
 8001260:	4601      	mov	r1, r0
 8001262:	2002      	movs	r0, #2
 8001264:	4798      	blx	r3
 8001266:	2807      	cmp	r0, #7
 8001268:	d007      	beq.n	800127a <__gnu_Unwind_Resume+0x36>
 800126a:	2808      	cmp	r0, #8
 800126c:	d103      	bne.n	8001276 <__gnu_Unwind_Resume+0x32>
 800126e:	4629      	mov	r1, r5
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff1f 	bl	80010b4 <unwind_phase2>
 8001276:	f00b fd5c 	bl	800cd32 <abort>
 800127a:	4630      	mov	r0, r6
 800127c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800127e:	f7ff ff17 	bl	80010b0 <_Unwind_DebugHook>
 8001282:	1d28      	adds	r0, r5, #4
 8001284:	f000 fb28 	bl	80018d8 <__restore_core_regs>

08001288 <__gnu_Unwind_Resume_or_Rethrow>:
 8001288:	68c2      	ldr	r2, [r0, #12]
 800128a:	b11a      	cbz	r2, 8001294 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800128c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800128e:	640a      	str	r2, [r1, #64]	; 0x40
 8001290:	2200      	movs	r2, #0
 8001292:	e72f      	b.n	80010f4 <unwind_phase2_forced>
 8001294:	e79c      	b.n	80011d0 <__gnu_Unwind_RaiseException>
 8001296:	bf00      	nop

08001298 <_Unwind_Complete>:
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <_Unwind_DeleteException>:
 800129c:	6883      	ldr	r3, [r0, #8]
 800129e:	b113      	cbz	r3, 80012a6 <_Unwind_DeleteException+0xa>
 80012a0:	4601      	mov	r1, r0
 80012a2:	2001      	movs	r0, #1
 80012a4:	4718      	bx	r3
 80012a6:	4770      	bx	lr

080012a8 <_Unwind_VRS_Get>:
 80012a8:	b500      	push	{lr}
 80012aa:	2904      	cmp	r1, #4
 80012ac:	d807      	bhi.n	80012be <_Unwind_VRS_Get+0x16>
 80012ae:	e8df f001 	tbb	[pc, r1]
 80012b2:	0903      	.short	0x0903
 80012b4:	0906      	.short	0x0906
 80012b6:	09          	.byte	0x09
 80012b7:	00          	.byte	0x00
 80012b8:	b90b      	cbnz	r3, 80012be <_Unwind_VRS_Get+0x16>
 80012ba:	2a0f      	cmp	r2, #15
 80012bc:	d905      	bls.n	80012ca <_Unwind_VRS_Get+0x22>
 80012be:	2002      	movs	r0, #2
 80012c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c4:	2001      	movs	r0, #1
 80012c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	6853      	ldr	r3, [r2, #4]
 80012d2:	9a01      	ldr	r2, [sp, #4]
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012da:	bf00      	nop

080012dc <_Unwind_GetGR>:
 80012dc:	b510      	push	{r4, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	2300      	movs	r3, #0
 80012e2:	ac03      	add	r4, sp, #12
 80012e4:	460a      	mov	r2, r1
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff ffdd 	bl	80012a8 <_Unwind_VRS_Get>
 80012ee:	9803      	ldr	r0, [sp, #12]
 80012f0:	b004      	add	sp, #16
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <_Unwind_VRS_Set>:
 80012f4:	b500      	push	{lr}
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d807      	bhi.n	800130a <_Unwind_VRS_Set+0x16>
 80012fa:	e8df f001 	tbb	[pc, r1]
 80012fe:	0903      	.short	0x0903
 8001300:	0906      	.short	0x0906
 8001302:	09          	.byte	0x09
 8001303:	00          	.byte	0x00
 8001304:	b90b      	cbnz	r3, 800130a <_Unwind_VRS_Set+0x16>
 8001306:	2a0f      	cmp	r2, #15
 8001308:	d905      	bls.n	8001316 <_Unwind_VRS_Set+0x22>
 800130a:	2002      	movs	r0, #2
 800130c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001310:	2001      	movs	r0, #1
 8001312:	f85d fb04 	ldr.w	pc, [sp], #4
 8001316:	9901      	ldr	r1, [sp, #4]
 8001318:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800131c:	6809      	ldr	r1, [r1, #0]
 800131e:	6051      	str	r1, [r2, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	f85d fb04 	ldr.w	pc, [sp], #4
 8001326:	bf00      	nop

08001328 <_Unwind_SetGR>:
 8001328:	b510      	push	{r4, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	ac04      	add	r4, sp, #16
 800132e:	2300      	movs	r3, #0
 8001330:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001334:	460a      	mov	r2, r1
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff ffdb 	bl	80012f4 <_Unwind_VRS_Set>
 800133e:	b004      	add	sp, #16
 8001340:	bd10      	pop	{r4, pc}
 8001342:	bf00      	nop

08001344 <__gnu_Unwind_Backtrace>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	1d15      	adds	r5, r2, #4
 800134c:	4607      	mov	r7, r0
 800134e:	460e      	mov	r6, r1
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001356:	ac17      	add	r4, sp, #92	; 0x5c
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001366:	f04f 35ff 	mov.w	r5, #4294967295
 800136a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800136e:	9516      	str	r5, [sp, #88]	; 0x58
 8001370:	e010      	b.n	8001394 <__gnu_Unwind_Backtrace+0x50>
 8001372:	a816      	add	r0, sp, #88	; 0x58
 8001374:	f7ff ffd8 	bl	8001328 <_Unwind_SetGR>
 8001378:	4631      	mov	r1, r6
 800137a:	a816      	add	r0, sp, #88	; 0x58
 800137c:	47b8      	blx	r7
 800137e:	aa16      	add	r2, sp, #88	; 0x58
 8001380:	4669      	mov	r1, sp
 8001382:	b978      	cbnz	r0, 80013a4 <__gnu_Unwind_Backtrace+0x60>
 8001384:	9b04      	ldr	r3, [sp, #16]
 8001386:	2008      	movs	r0, #8
 8001388:	4798      	blx	r3
 800138a:	2805      	cmp	r0, #5
 800138c:	4604      	mov	r4, r0
 800138e:	d00a      	beq.n	80013a6 <__gnu_Unwind_Backtrace+0x62>
 8001390:	2809      	cmp	r0, #9
 8001392:	d007      	beq.n	80013a4 <__gnu_Unwind_Backtrace+0x60>
 8001394:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001396:	4668      	mov	r0, sp
 8001398:	f7ff fe06 	bl	8000fa8 <get_eit_entry>
 800139c:	466a      	mov	r2, sp
 800139e:	210c      	movs	r1, #12
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0e6      	beq.n	8001372 <__gnu_Unwind_Backtrace+0x2e>
 80013a4:	2409      	movs	r4, #9
 80013a6:	a816      	add	r0, sp, #88	; 0x58
 80013a8:	f7ff fe4e 	bl	8001048 <restore_non_core_regs>
 80013ac:	4620      	mov	r0, r4
 80013ae:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013b4 <__gnu_unwind_pr_common>:
 80013b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b8:	460d      	mov	r5, r1
 80013ba:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80013bc:	b08b      	sub	sp, #44	; 0x2c
 80013be:	1d0c      	adds	r4, r1, #4
 80013c0:	6809      	ldr	r1, [r1, #0]
 80013c2:	9107      	str	r1, [sp, #28]
 80013c4:	4691      	mov	r9, r2
 80013c6:	9408      	str	r4, [sp, #32]
 80013c8:	f000 0b03 	and.w	fp, r0, #3
 80013cc:	461e      	mov	r6, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d160      	bne.n	8001494 <__gnu_unwind_pr_common+0xe0>
 80013d2:	0209      	lsls	r1, r1, #8
 80013d4:	2303      	movs	r3, #3
 80013d6:	9107      	str	r1, [sp, #28]
 80013d8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80013dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80013e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80013e2:	f1bb 0f02 	cmp.w	fp, #2
 80013e6:	bf08      	it	eq
 80013e8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80013ea:	f013 0301 	ands.w	r3, r3, #1
 80013ee:	d140      	bne.n	8001472 <__gnu_unwind_pr_common+0xbe>
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f000 0308 	and.w	r3, r0, #8
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	f8d4 8000 	ldr.w	r8, [r4]
 80013fc:	f1b8 0f00 	cmp.w	r8, #0
 8001400:	d039      	beq.n	8001476 <__gnu_unwind_pr_common+0xc2>
 8001402:	2e02      	cmp	r6, #2
 8001404:	d043      	beq.n	800148e <__gnu_unwind_pr_common+0xda>
 8001406:	f8b4 8000 	ldrh.w	r8, [r4]
 800140a:	8867      	ldrh	r7, [r4, #2]
 800140c:	3404      	adds	r4, #4
 800140e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001410:	f027 0a01 	bic.w	sl, r7, #1
 8001414:	210f      	movs	r1, #15
 8001416:	4648      	mov	r0, r9
 8001418:	449a      	add	sl, r3
 800141a:	f7ff ff5f 	bl	80012dc <_Unwind_GetGR>
 800141e:	4582      	cmp	sl, r0
 8001420:	d833      	bhi.n	800148a <__gnu_unwind_pr_common+0xd6>
 8001422:	f028 0301 	bic.w	r3, r8, #1
 8001426:	449a      	add	sl, r3
 8001428:	4550      	cmp	r0, sl
 800142a:	bf2c      	ite	cs
 800142c:	2000      	movcs	r0, #0
 800142e:	2001      	movcc	r0, #1
 8001430:	007f      	lsls	r7, r7, #1
 8001432:	f007 0702 	and.w	r7, r7, #2
 8001436:	f008 0801 	and.w	r8, r8, #1
 800143a:	ea47 0708 	orr.w	r7, r7, r8
 800143e:	2f01      	cmp	r7, #1
 8001440:	d03e      	beq.n	80014c0 <__gnu_unwind_pr_common+0x10c>
 8001442:	d335      	bcc.n	80014b0 <__gnu_unwind_pr_common+0xfc>
 8001444:	2f02      	cmp	r7, #2
 8001446:	d11c      	bne.n	8001482 <__gnu_unwind_pr_common+0xce>
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144e:	9202      	str	r2, [sp, #8]
 8001450:	f1bb 0f00 	cmp.w	fp, #0
 8001454:	d176      	bne.n	8001544 <__gnu_unwind_pr_common+0x190>
 8001456:	b128      	cbz	r0, 8001464 <__gnu_unwind_pr_common+0xb0>
 8001458:	9903      	ldr	r1, [sp, #12]
 800145a:	2900      	cmp	r1, #0
 800145c:	d07e      	beq.n	800155c <__gnu_unwind_pr_common+0x1a8>
 800145e:	2a00      	cmp	r2, #0
 8001460:	f000 80a6 	beq.w	80015b0 <__gnu_unwind_pr_common+0x1fc>
 8001464:	2b00      	cmp	r3, #0
 8001466:	db77      	blt.n	8001558 <__gnu_unwind_pr_common+0x1a4>
 8001468:	9b02      	ldr	r3, [sp, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001470:	e7c2      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 8001472:	2300      	movs	r3, #0
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	2e02      	cmp	r6, #2
 8001478:	dd3e      	ble.n	80014f8 <__gnu_unwind_pr_common+0x144>
 800147a:	f7ff fe17 	bl	80010ac <__gnu_unwind_24bit.isra.1>
 800147e:	2800      	cmp	r0, #0
 8001480:	d040      	beq.n	8001504 <__gnu_unwind_pr_common+0x150>
 8001482:	2009      	movs	r0, #9
 8001484:	b00b      	add	sp, #44	; 0x2c
 8001486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148a:	2000      	movs	r0, #0
 800148c:	e7d0      	b.n	8001430 <__gnu_unwind_pr_common+0x7c>
 800148e:	6867      	ldr	r7, [r4, #4]
 8001490:	3408      	adds	r4, #8
 8001492:	e7bc      	b.n	800140e <__gnu_unwind_pr_common+0x5a>
 8001494:	2b02      	cmp	r3, #2
 8001496:	dca3      	bgt.n	80013e0 <__gnu_unwind_pr_common+0x2c>
 8001498:	0c0b      	lsrs	r3, r1, #16
 800149a:	b2da      	uxtb	r2, r3
 800149c:	0409      	lsls	r1, r1, #16
 800149e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80014a2:	2302      	movs	r3, #2
 80014a4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80014a8:	9107      	str	r1, [sp, #28]
 80014aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80014ae:	e797      	b.n	80013e0 <__gnu_unwind_pr_common+0x2c>
 80014b0:	f1bb 0f00 	cmp.w	fp, #0
 80014b4:	d002      	beq.n	80014bc <__gnu_unwind_pr_common+0x108>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	f040 80bd 	bne.w	8001636 <__gnu_unwind_pr_common+0x282>
 80014bc:	3404      	adds	r4, #4
 80014be:	e79b      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 80014c0:	f1bb 0f00 	cmp.w	fp, #0
 80014c4:	d125      	bne.n	8001512 <__gnu_unwind_pr_common+0x15e>
 80014c6:	b1a8      	cbz	r0, 80014f4 <__gnu_unwind_pr_common+0x140>
 80014c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014cc:	1c99      	adds	r1, r3, #2
 80014ce:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80014d2:	d0d6      	beq.n	8001482 <__gnu_unwind_pr_common+0xce>
 80014d4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80014d8:	3301      	adds	r3, #1
 80014da:	9106      	str	r1, [sp, #24]
 80014dc:	f000 80a3 	beq.w	8001626 <__gnu_unwind_pr_common+0x272>
 80014e0:	1d20      	adds	r0, r4, #4
 80014e2:	f7ff fddd 	bl	80010a0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80014e6:	ab06      	add	r3, sp, #24
 80014e8:	4601      	mov	r1, r0
 80014ea:	4628      	mov	r0, r5
 80014ec:	f3af 8000 	nop.w
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d177      	bne.n	80015e4 <__gnu_unwind_pr_common+0x230>
 80014f4:	3408      	adds	r4, #8
 80014f6:	e77f      	b.n	80013f8 <__gnu_unwind_pr_common+0x44>
 80014f8:	a907      	add	r1, sp, #28
 80014fa:	4648      	mov	r0, r9
 80014fc:	f000 faee 	bl	8001adc <__gnu_unwind_execute>
 8001500:	2800      	cmp	r0, #0
 8001502:	d1be      	bne.n	8001482 <__gnu_unwind_pr_common+0xce>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d15c      	bne.n	80015c4 <__gnu_unwind_pr_common+0x210>
 800150a:	2008      	movs	r0, #8
 800150c:	b00b      	add	sp, #44	; 0x2c
 800150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001512:	210d      	movs	r1, #13
 8001514:	4648      	mov	r0, r9
 8001516:	6a2f      	ldr	r7, [r5, #32]
 8001518:	f7ff fee0 	bl	80012dc <_Unwind_GetGR>
 800151c:	4287      	cmp	r7, r0
 800151e:	d1e9      	bne.n	80014f4 <__gnu_unwind_pr_common+0x140>
 8001520:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001522:	429c      	cmp	r4, r3
 8001524:	d1e6      	bne.n	80014f4 <__gnu_unwind_pr_common+0x140>
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fcf0 	bl	8000f0c <selfrel_offset31>
 800152c:	210f      	movs	r1, #15
 800152e:	4602      	mov	r2, r0
 8001530:	4648      	mov	r0, r9
 8001532:	f7ff fef9 	bl	8001328 <_Unwind_SetGR>
 8001536:	4648      	mov	r0, r9
 8001538:	462a      	mov	r2, r5
 800153a:	2100      	movs	r1, #0
 800153c:	f7ff fef4 	bl	8001328 <_Unwind_SetGR>
 8001540:	2007      	movs	r0, #7
 8001542:	e79f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001544:	210d      	movs	r1, #13
 8001546:	4648      	mov	r0, r9
 8001548:	6a2f      	ldr	r7, [r5, #32]
 800154a:	f7ff fec7 	bl	80012dc <_Unwind_GetGR>
 800154e:	4287      	cmp	r7, r0
 8001550:	d058      	beq.n	8001604 <__gnu_unwind_pr_common+0x250>
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da87      	bge.n	8001468 <__gnu_unwind_pr_common+0xb4>
 8001558:	3404      	adds	r4, #4
 800155a:	e785      	b.n	8001468 <__gnu_unwind_pr_common+0xb4>
 800155c:	9b02      	ldr	r3, [sp, #8]
 800155e:	b33b      	cbz	r3, 80015b0 <__gnu_unwind_pr_common+0x1fc>
 8001560:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001564:	1d27      	adds	r7, r4, #4
 8001566:	f8cd b010 	str.w	fp, [sp, #16]
 800156a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800156e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001572:	9605      	str	r6, [sp, #20]
 8001574:	46a3      	mov	fp, r4
 8001576:	461c      	mov	r4, r3
 8001578:	e002      	b.n	8001580 <__gnu_unwind_pr_common+0x1cc>
 800157a:	45b2      	cmp	sl, r6
 800157c:	46b0      	mov	r8, r6
 800157e:	d016      	beq.n	80015ae <__gnu_unwind_pr_common+0x1fa>
 8001580:	4638      	mov	r0, r7
 8001582:	9406      	str	r4, [sp, #24]
 8001584:	f7ff fd8c 	bl	80010a0 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001588:	ab06      	add	r3, sp, #24
 800158a:	4601      	mov	r1, r0
 800158c:	2200      	movs	r2, #0
 800158e:	4628      	mov	r0, r5
 8001590:	f3af 8000 	nop.w
 8001594:	f108 0601 	add.w	r6, r8, #1
 8001598:	3704      	adds	r7, #4
 800159a:	2800      	cmp	r0, #0
 800159c:	d0ed      	beq.n	800157a <__gnu_unwind_pr_common+0x1c6>
 800159e:	9b02      	ldr	r3, [sp, #8]
 80015a0:	9e05      	ldr	r6, [sp, #20]
 80015a2:	4543      	cmp	r3, r8
 80015a4:	465c      	mov	r4, fp
 80015a6:	f8dd b010 	ldr.w	fp, [sp, #16]
 80015aa:	d1d2      	bne.n	8001552 <__gnu_unwind_pr_common+0x19e>
 80015ac:	e000      	b.n	80015b0 <__gnu_unwind_pr_common+0x1fc>
 80015ae:	465c      	mov	r4, fp
 80015b0:	4648      	mov	r0, r9
 80015b2:	210d      	movs	r1, #13
 80015b4:	f7ff fe92 	bl	80012dc <_Unwind_GetGR>
 80015b8:	9b06      	ldr	r3, [sp, #24]
 80015ba:	6228      	str	r0, [r5, #32]
 80015bc:	62ac      	str	r4, [r5, #40]	; 0x28
 80015be:	626b      	str	r3, [r5, #36]	; 0x24
 80015c0:	2006      	movs	r0, #6
 80015c2:	e75f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 80015c4:	210f      	movs	r1, #15
 80015c6:	4648      	mov	r0, r9
 80015c8:	f7ff fe88 	bl	80012dc <_Unwind_GetGR>
 80015cc:	210e      	movs	r1, #14
 80015ce:	4602      	mov	r2, r0
 80015d0:	4648      	mov	r0, r9
 80015d2:	f7ff fea9 	bl	8001328 <_Unwind_SetGR>
 80015d6:	4648      	mov	r0, r9
 80015d8:	4a29      	ldr	r2, [pc, #164]	; (8001680 <__gnu_unwind_pr_common+0x2cc>)
 80015da:	210f      	movs	r1, #15
 80015dc:	f7ff fea4 	bl	8001328 <_Unwind_SetGR>
 80015e0:	2007      	movs	r0, #7
 80015e2:	e74f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 80015e4:	4607      	mov	r7, r0
 80015e6:	210d      	movs	r1, #13
 80015e8:	4648      	mov	r0, r9
 80015ea:	f7ff fe77 	bl	80012dc <_Unwind_GetGR>
 80015ee:	2f02      	cmp	r7, #2
 80015f0:	6228      	str	r0, [r5, #32]
 80015f2:	d11d      	bne.n	8001630 <__gnu_unwind_pr_common+0x27c>
 80015f4:	462b      	mov	r3, r5
 80015f6:	9a06      	ldr	r2, [sp, #24]
 80015f8:	f843 2f2c 	str.w	r2, [r3, #44]!
 80015fc:	626b      	str	r3, [r5, #36]	; 0x24
 80015fe:	62ac      	str	r4, [r5, #40]	; 0x28
 8001600:	2006      	movs	r0, #6
 8001602:	e73f      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001604:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001606:	429c      	cmp	r4, r3
 8001608:	d1a3      	bne.n	8001552 <__gnu_unwind_pr_common+0x19e>
 800160a:	2204      	movs	r2, #4
 800160c:	2700      	movs	r7, #0
 800160e:	18a3      	adds	r3, r4, r2
 8001610:	9902      	ldr	r1, [sp, #8]
 8001612:	62a9      	str	r1, [r5, #40]	; 0x28
 8001614:	62ef      	str	r7, [r5, #44]	; 0x2c
 8001616:	632a      	str	r2, [r5, #48]	; 0x30
 8001618:	636b      	str	r3, [r5, #52]	; 0x34
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	42bb      	cmp	r3, r7
 800161e:	db1d      	blt.n	800165c <__gnu_unwind_pr_common+0x2a8>
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	e720      	b.n	8001468 <__gnu_unwind_pr_common+0xb4>
 8001626:	4648      	mov	r0, r9
 8001628:	210d      	movs	r1, #13
 800162a:	f7ff fe57 	bl	80012dc <_Unwind_GetGR>
 800162e:	6228      	str	r0, [r5, #32]
 8001630:	9b06      	ldr	r3, [sp, #24]
 8001632:	626b      	str	r3, [r5, #36]	; 0x24
 8001634:	e7e3      	b.n	80015fe <__gnu_unwind_pr_common+0x24a>
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff fc68 	bl	8000f0c <selfrel_offset31>
 800163c:	3404      	adds	r4, #4
 800163e:	4606      	mov	r6, r0
 8001640:	63ac      	str	r4, [r5, #56]	; 0x38
 8001642:	4628      	mov	r0, r5
 8001644:	f3af 8000 	nop.w
 8001648:	2800      	cmp	r0, #0
 800164a:	f43f af1a 	beq.w	8001482 <__gnu_unwind_pr_common+0xce>
 800164e:	4648      	mov	r0, r9
 8001650:	4632      	mov	r2, r6
 8001652:	210f      	movs	r1, #15
 8001654:	f7ff fe68 	bl	8001328 <_Unwind_SetGR>
 8001658:	2007      	movs	r0, #7
 800165a:	e713      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 800165c:	4608      	mov	r0, r1
 800165e:	3001      	adds	r0, #1
 8001660:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001664:	f7ff fc52 	bl	8000f0c <selfrel_offset31>
 8001668:	210f      	movs	r1, #15
 800166a:	4602      	mov	r2, r0
 800166c:	4648      	mov	r0, r9
 800166e:	f7ff fe5b 	bl	8001328 <_Unwind_SetGR>
 8001672:	4648      	mov	r0, r9
 8001674:	462a      	mov	r2, r5
 8001676:	4639      	mov	r1, r7
 8001678:	f7ff fe56 	bl	8001328 <_Unwind_SetGR>
 800167c:	2007      	movs	r0, #7
 800167e:	e701      	b.n	8001484 <__gnu_unwind_pr_common+0xd0>
 8001680:	00000000 	.word	0x00000000

08001684 <__aeabi_unwind_cpp_pr0>:
 8001684:	2300      	movs	r3, #0
 8001686:	e695      	b.n	80013b4 <__gnu_unwind_pr_common>

08001688 <__aeabi_unwind_cpp_pr1>:
 8001688:	2301      	movs	r3, #1
 800168a:	e693      	b.n	80013b4 <__gnu_unwind_pr_common>

0800168c <__aeabi_unwind_cpp_pr2>:
 800168c:	2302      	movs	r3, #2
 800168e:	e691      	b.n	80013b4 <__gnu_unwind_pr_common>

08001690 <_Unwind_VRS_Pop>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	b0c5      	sub	sp, #276	; 0x114
 8001696:	2904      	cmp	r1, #4
 8001698:	d80d      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800169a:	e8df f001 	tbb	[pc, r1]
 800169e:	0353      	.short	0x0353
 80016a0:	310c      	.short	0x310c
 80016a2:	0f          	.byte	0x0f
 80016a3:	00          	.byte	0x00
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80016aa:	b295      	uxth	r5, r2
 80016ac:	d162      	bne.n	8001774 <_Unwind_VRS_Pop+0xe4>
 80016ae:	1972      	adds	r2, r6, r5
 80016b0:	2a10      	cmp	r2, #16
 80016b2:	f240 809b 	bls.w	80017ec <_Unwind_VRS_Pop+0x15c>
 80016b6:	2002      	movs	r0, #2
 80016b8:	b045      	add	sp, #276	; 0x114
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1fa      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 80016c0:	2a10      	cmp	r2, #16
 80016c2:	d8f8      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	06d8      	lsls	r0, r3, #27
 80016c8:	f100 80c6 	bmi.w	8001858 <_Unwind_VRS_Pop+0x1c8>
 80016cc:	ae22      	add	r6, sp, #136	; 0x88
 80016ce:	4630      	mov	r0, r6
 80016d0:	9201      	str	r2, [sp, #4]
 80016d2:	f000 f973 	bl	80019bc <__gnu_Unwind_Save_WMMXC>
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	9a01      	ldr	r2, [sp, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	2501      	movs	r5, #1
 80016de:	fa05 f103 	lsl.w	r1, r5, r3
 80016e2:	4211      	tst	r1, r2
 80016e4:	d003      	beq.n	80016ee <_Unwind_VRS_Pop+0x5e>
 80016e6:	6801      	ldr	r1, [r0, #0]
 80016e8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80016ec:	3004      	adds	r0, #4
 80016ee:	3301      	adds	r3, #1
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d1f4      	bne.n	80016de <_Unwind_VRS_Pop+0x4e>
 80016f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80016f6:	4630      	mov	r0, r6
 80016f8:	f000 f956 	bl	80019a8 <__gnu_Unwind_Restore_WMMXC>
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7db      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001700:	2b03      	cmp	r3, #3
 8001702:	d1d8      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001704:	0c15      	lsrs	r5, r2, #16
 8001706:	b297      	uxth	r7, r2
 8001708:	19eb      	adds	r3, r5, r7
 800170a:	2b10      	cmp	r3, #16
 800170c:	d8d3      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	071e      	lsls	r6, r3, #28
 8001712:	f100 80b5 	bmi.w	8001880 <_Unwind_VRS_Pop+0x1f0>
 8001716:	ae22      	add	r6, sp, #136	; 0x88
 8001718:	4630      	mov	r0, r6
 800171a:	f000 f923 	bl	8001964 <__gnu_Unwind_Save_WMMXD>
 800171e:	00ed      	lsls	r5, r5, #3
 8001720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001722:	b14f      	cbz	r7, 8001738 <_Unwind_VRS_Pop+0xa8>
 8001724:	3d04      	subs	r5, #4
 8001726:	1971      	adds	r1, r6, r5
 8001728:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 800172c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001730:	f841 2f04 	str.w	r2, [r1, #4]!
 8001734:	4283      	cmp	r3, r0
 8001736:	d1f9      	bne.n	800172c <_Unwind_VRS_Pop+0x9c>
 8001738:	4630      	mov	r0, r6
 800173a:	63a3      	str	r3, [r4, #56]	; 0x38
 800173c:	f000 f8f0 	bl	8001920 <__gnu_Unwind_Restore_WMMXD>
 8001740:	2000      	movs	r0, #0
 8001742:	e7b9      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1b6      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001748:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800174a:	b297      	uxth	r7, r2
 800174c:	1d20      	adds	r0, r4, #4
 800174e:	2601      	movs	r6, #1
 8001750:	fa06 f103 	lsl.w	r1, r6, r3
 8001754:	4239      	tst	r1, r7
 8001756:	f103 0301 	add.w	r3, r3, #1
 800175a:	d002      	beq.n	8001762 <_Unwind_VRS_Pop+0xd2>
 800175c:	6829      	ldr	r1, [r5, #0]
 800175e:	6001      	str	r1, [r0, #0]
 8001760:	3504      	adds	r5, #4
 8001762:	2b10      	cmp	r3, #16
 8001764:	f100 0004 	add.w	r0, r0, #4
 8001768:	d1f2      	bne.n	8001750 <_Unwind_VRS_Pop+0xc0>
 800176a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800176e:	d13b      	bne.n	80017e8 <_Unwind_VRS_Pop+0x158>
 8001770:	63a5      	str	r5, [r4, #56]	; 0x38
 8001772:	e7a1      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 8001774:	2b05      	cmp	r3, #5
 8001776:	d19e      	bne.n	80016b6 <_Unwind_VRS_Pop+0x26>
 8001778:	1977      	adds	r7, r6, r5
 800177a:	2f20      	cmp	r7, #32
 800177c:	d89b      	bhi.n	80016b6 <_Unwind_VRS_Pop+0x26>
 800177e:	2e0f      	cmp	r6, #15
 8001780:	d966      	bls.n	8001850 <_Unwind_VRS_Pop+0x1c0>
 8001782:	462f      	mov	r7, r5
 8001784:	2d00      	cmp	r5, #0
 8001786:	d13a      	bne.n	80017fe <_Unwind_VRS_Pop+0x16e>
 8001788:	462a      	mov	r2, r5
 800178a:	2700      	movs	r7, #0
 800178c:	2a00      	cmp	r2, #0
 800178e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001790:	dd72      	ble.n	8001878 <_Unwind_VRS_Pop+0x1e8>
 8001792:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001796:	4601      	mov	r1, r0
 8001798:	a844      	add	r0, sp, #272	; 0x110
 800179a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800179e:	388c      	subs	r0, #140	; 0x8c
 80017a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80017a4:	f840 5f04 	str.w	r5, [r0, #4]!
 80017a8:	4291      	cmp	r1, r2
 80017aa:	d1f9      	bne.n	80017a0 <_Unwind_VRS_Pop+0x110>
 80017ac:	4608      	mov	r0, r1
 80017ae:	b197      	cbz	r7, 80017d6 <_Unwind_VRS_Pop+0x146>
 80017b0:	2e10      	cmp	r6, #16
 80017b2:	4632      	mov	r2, r6
 80017b4:	a944      	add	r1, sp, #272	; 0x110
 80017b6:	bf38      	it	cc
 80017b8:	2210      	movcc	r2, #16
 80017ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80017be:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80017c2:	0079      	lsls	r1, r7, #1
 80017c4:	3a04      	subs	r2, #4
 80017c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80017ca:	f850 5b04 	ldr.w	r5, [r0], #4
 80017ce:	f842 5f04 	str.w	r5, [r2, #4]!
 80017d2:	4288      	cmp	r0, r1
 80017d4:	d1f9      	bne.n	80017ca <_Unwind_VRS_Pop+0x13a>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d048      	beq.n	800186c <_Unwind_VRS_Pop+0x1dc>
 80017da:	2e0f      	cmp	r6, #15
 80017dc:	63a1      	str	r1, [r4, #56]	; 0x38
 80017de:	d933      	bls.n	8001848 <_Unwind_VRS_Pop+0x1b8>
 80017e0:	b117      	cbz	r7, 80017e8 <_Unwind_VRS_Pop+0x158>
 80017e2:	a802      	add	r0, sp, #8
 80017e4:	f000 f894 	bl	8001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80017e8:	2000      	movs	r0, #0
 80017ea:	e765      	b.n	80016b8 <_Unwind_VRS_Pop+0x28>
 80017ec:	2e0f      	cmp	r6, #15
 80017ee:	f63f af62 	bhi.w	80016b6 <_Unwind_VRS_Pop+0x26>
 80017f2:	2700      	movs	r7, #0
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	07d1      	lsls	r1, r2, #31
 80017f8:	d417      	bmi.n	800182a <_Unwind_VRS_Pop+0x19a>
 80017fa:	2f00      	cmp	r7, #0
 80017fc:	d060      	beq.n	80018c0 <_Unwind_VRS_Pop+0x230>
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	0751      	lsls	r1, r2, #29
 8001802:	d445      	bmi.n	8001890 <_Unwind_VRS_Pop+0x200>
 8001804:	2b01      	cmp	r3, #1
 8001806:	d04d      	beq.n	80018a4 <_Unwind_VRS_Pop+0x214>
 8001808:	2e0f      	cmp	r6, #15
 800180a:	d806      	bhi.n	800181a <_Unwind_VRS_Pop+0x18a>
 800180c:	a822      	add	r0, sp, #136	; 0x88
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f000 f87a 	bl	8001908 <__gnu_Unwind_Save_VFP_D>
 8001814:	9b01      	ldr	r3, [sp, #4]
 8001816:	2f00      	cmp	r7, #0
 8001818:	d0b6      	beq.n	8001788 <_Unwind_VRS_Pop+0xf8>
 800181a:	a802      	add	r0, sp, #8
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	f000 f87b 	bl	8001918 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	f1c6 0210 	rsb	r2, r6, #16
 8001828:	e7b0      	b.n	800178c <_Unwind_VRS_Pop+0xfc>
 800182a:	f022 0101 	bic.w	r1, r2, #1
 800182e:	2b05      	cmp	r3, #5
 8001830:	6021      	str	r1, [r4, #0]
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4620      	mov	r0, r4
 8001836:	d03b      	beq.n	80018b0 <_Unwind_VRS_Pop+0x220>
 8001838:	f022 0203 	bic.w	r2, r2, #3
 800183c:	f840 2b48 	str.w	r2, [r0], #72
 8001840:	f000 f85a 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 8001844:	9b01      	ldr	r3, [sp, #4]
 8001846:	e7d8      	b.n	80017fa <_Unwind_VRS_Pop+0x16a>
 8001848:	a822      	add	r0, sp, #136	; 0x88
 800184a:	f000 f859 	bl	8001900 <__gnu_Unwind_Restore_VFP_D>
 800184e:	e7c7      	b.n	80017e0 <_Unwind_VRS_Pop+0x150>
 8001850:	2f10      	cmp	r7, #16
 8001852:	d9ce      	bls.n	80017f2 <_Unwind_VRS_Pop+0x162>
 8001854:	3f10      	subs	r7, #16
 8001856:	e7cd      	b.n	80017f4 <_Unwind_VRS_Pop+0x164>
 8001858:	f023 0310 	bic.w	r3, r3, #16
 800185c:	6023      	str	r3, [r4, #0]
 800185e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	f000 f8aa 	bl	80019bc <__gnu_Unwind_Save_WMMXC>
 8001868:	9a01      	ldr	r2, [sp, #4]
 800186a:	e72f      	b.n	80016cc <_Unwind_VRS_Pop+0x3c>
 800186c:	3104      	adds	r1, #4
 800186e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001870:	a822      	add	r0, sp, #136	; 0x88
 8001872:	f000 f83d 	bl	80018f0 <__gnu_Unwind_Restore_VFP>
 8001876:	e7b7      	b.n	80017e8 <_Unwind_VRS_Pop+0x158>
 8001878:	2f00      	cmp	r7, #0
 800187a:	d199      	bne.n	80017b0 <_Unwind_VRS_Pop+0x120>
 800187c:	4601      	mov	r1, r0
 800187e:	e7aa      	b.n	80017d6 <_Unwind_VRS_Pop+0x146>
 8001880:	f023 0308 	bic.w	r3, r3, #8
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800188a:	f000 f86b 	bl	8001964 <__gnu_Unwind_Save_WMMXD>
 800188e:	e742      	b.n	8001716 <_Unwind_VRS_Pop+0x86>
 8001890:	4620      	mov	r0, r4
 8001892:	f022 0204 	bic.w	r2, r2, #4
 8001896:	f840 2bd0 	str.w	r2, [r0], #208
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f000 f83c 	bl	8001918 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018a0:	9b01      	ldr	r3, [sp, #4]
 80018a2:	e7af      	b.n	8001804 <_Unwind_VRS_Pop+0x174>
 80018a4:	a822      	add	r0, sp, #136	; 0x88
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	f000 f826 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 80018ac:	9b01      	ldr	r3, [sp, #4]
 80018ae:	e7b9      	b.n	8001824 <_Unwind_VRS_Pop+0x194>
 80018b0:	f041 0102 	orr.w	r1, r1, #2
 80018b4:	f840 1b48 	str.w	r1, [r0], #72
 80018b8:	f000 f826 	bl	8001908 <__gnu_Unwind_Save_VFP_D>
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	e79c      	b.n	80017fa <_Unwind_VRS_Pop+0x16a>
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d003      	beq.n	80018cc <_Unwind_VRS_Pop+0x23c>
 80018c4:	2e0f      	cmp	r6, #15
 80018c6:	f63f af5f 	bhi.w	8001788 <_Unwind_VRS_Pop+0xf8>
 80018ca:	e79f      	b.n	800180c <_Unwind_VRS_Pop+0x17c>
 80018cc:	a822      	add	r0, sp, #136	; 0x88
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f000 f812 	bl	80018f8 <__gnu_Unwind_Save_VFP>
 80018d4:	9b01      	ldr	r3, [sp, #4]
 80018d6:	e757      	b.n	8001788 <_Unwind_VRS_Pop+0xf8>

080018d8 <__restore_core_regs>:
 80018d8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80018dc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80018e0:	469c      	mov	ip, r3
 80018e2:	46a6      	mov	lr, r4
 80018e4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80018e8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80018ec:	46e5      	mov	sp, ip
 80018ee:	bd00      	pop	{pc}

080018f0 <__gnu_Unwind_Restore_VFP>:
 80018f0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <__gnu_Unwind_Save_VFP>:
 80018f8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <__gnu_Unwind_Restore_VFP_D>:
 8001900:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <__gnu_Unwind_Save_VFP_D>:
 8001908:	ec80 0b20 	vstmia	r0, {d0-d15}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001910:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001918:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <__gnu_Unwind_Restore_WMMXD>:
 8001920:	ecf0 0102 	ldfe	f0, [r0], #8
 8001924:	ecf0 1102 	ldfe	f1, [r0], #8
 8001928:	ecf0 2102 	ldfe	f2, [r0], #8
 800192c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001930:	ecf0 4102 	ldfe	f4, [r0], #8
 8001934:	ecf0 5102 	ldfe	f5, [r0], #8
 8001938:	ecf0 6102 	ldfe	f6, [r0], #8
 800193c:	ecf0 7102 	ldfe	f7, [r0], #8
 8001940:	ecf0 8102 	ldfp	f0, [r0], #8
 8001944:	ecf0 9102 	ldfp	f1, [r0], #8
 8001948:	ecf0 a102 	ldfp	f2, [r0], #8
 800194c:	ecf0 b102 	ldfp	f3, [r0], #8
 8001950:	ecf0 c102 	ldfp	f4, [r0], #8
 8001954:	ecf0 d102 	ldfp	f5, [r0], #8
 8001958:	ecf0 e102 	ldfp	f6, [r0], #8
 800195c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <__gnu_Unwind_Save_WMMXD>:
 8001964:	ece0 0102 	stfe	f0, [r0], #8
 8001968:	ece0 1102 	stfe	f1, [r0], #8
 800196c:	ece0 2102 	stfe	f2, [r0], #8
 8001970:	ece0 3102 	stfe	f3, [r0], #8
 8001974:	ece0 4102 	stfe	f4, [r0], #8
 8001978:	ece0 5102 	stfe	f5, [r0], #8
 800197c:	ece0 6102 	stfe	f6, [r0], #8
 8001980:	ece0 7102 	stfe	f7, [r0], #8
 8001984:	ece0 8102 	stfp	f0, [r0], #8
 8001988:	ece0 9102 	stfp	f1, [r0], #8
 800198c:	ece0 a102 	stfp	f2, [r0], #8
 8001990:	ece0 b102 	stfp	f3, [r0], #8
 8001994:	ece0 c102 	stfp	f4, [r0], #8
 8001998:	ece0 d102 	stfp	f5, [r0], #8
 800199c:	ece0 e102 	stfp	f6, [r0], #8
 80019a0:	ece0 f102 	stfp	f7, [r0], #8
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Restore_WMMXC>:
 80019a8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80019ac:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80019b0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80019b4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <__gnu_Unwind_Save_WMMXC>:
 80019bc:	fca0 8101 	stc2	1, cr8, [r0], #4
 80019c0:	fca0 9101 	stc2	1, cr9, [r0], #4
 80019c4:	fca0 a101 	stc2	1, cr10, [r0], #4
 80019c8:	fca0 b101 	stc2	1, cr11, [r0], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <_Unwind_RaiseException>:
 80019d0:	46ec      	mov	ip, sp
 80019d2:	b500      	push	{lr}
 80019d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80019e4:	a901      	add	r1, sp, #4
 80019e6:	f7ff fbf3 	bl	80011d0 <__gnu_Unwind_RaiseException>
 80019ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80019ee:	b012      	add	sp, #72	; 0x48
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <_Unwind_Resume>:
 80019f4:	46ec      	mov	ip, sp
 80019f6:	b500      	push	{lr}
 80019f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80019fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a08:	a901      	add	r1, sp, #4
 8001a0a:	f7ff fc1b 	bl	8001244 <__gnu_Unwind_Resume>
 8001a0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a12:	b012      	add	sp, #72	; 0x48
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <_Unwind_Resume_or_Rethrow>:
 8001a18:	46ec      	mov	ip, sp
 8001a1a:	b500      	push	{lr}
 8001a1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a2c:	a901      	add	r1, sp, #4
 8001a2e:	f7ff fc2b 	bl	8001288 <__gnu_Unwind_Resume_or_Rethrow>
 8001a32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a36:	b012      	add	sp, #72	; 0x48
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <_Unwind_ForcedUnwind>:
 8001a3c:	46ec      	mov	ip, sp
 8001a3e:	b500      	push	{lr}
 8001a40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a50:	ab01      	add	r3, sp, #4
 8001a52:	f7ff fbed 	bl	8001230 <__gnu_Unwind_ForcedUnwind>
 8001a56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a5a:	b012      	add	sp, #72	; 0x48
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <_Unwind_Backtrace>:
 8001a60:	46ec      	mov	ip, sp
 8001a62:	b500      	push	{lr}
 8001a64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a74:	aa01      	add	r2, sp, #4
 8001a76:	f7ff fc65 	bl	8001344 <__gnu_Unwind_Backtrace>
 8001a7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a7e:	b012      	add	sp, #72	; 0x48
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <next_unwind_byte>:
 8001a84:	7a02      	ldrb	r2, [r0, #8]
 8001a86:	b91a      	cbnz	r2, 8001a90 <next_unwind_byte+0xc>
 8001a88:	7a43      	ldrb	r3, [r0, #9]
 8001a8a:	b943      	cbnz	r3, 8001a9e <next_unwind_byte+0x1a>
 8001a8c:	20b0      	movs	r0, #176	; 0xb0
 8001a8e:	4770      	bx	lr
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	3a01      	subs	r2, #1
 8001a94:	7202      	strb	r2, [r0, #8]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	6002      	str	r2, [r0, #0]
 8001a9a:	0e18      	lsrs	r0, r3, #24
 8001a9c:	4770      	bx	lr
 8001a9e:	6842      	ldr	r2, [r0, #4]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b410      	push	{r4}
 8001aa4:	7243      	strb	r3, [r0, #9]
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	1d14      	adds	r4, r2, #4
 8001aac:	7201      	strb	r1, [r0, #8]
 8001aae:	021a      	lsls	r2, r3, #8
 8001ab0:	6044      	str	r4, [r0, #4]
 8001ab2:	6002      	str	r2, [r0, #0]
 8001ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ab8:	0e18      	lsrs	r0, r3, #24
 8001aba:	4770      	bx	lr

08001abc <_Unwind_GetGR.constprop.0>:
 8001abc:	b500      	push	{lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	aa03      	add	r2, sp, #12
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	220c      	movs	r2, #12
 8001aca:	f7ff fbed 	bl	80012a8 <_Unwind_VRS_Get>
 8001ace:	9803      	ldr	r0, [sp, #12]
 8001ad0:	b005      	add	sp, #20
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	bf00      	nop

08001ad8 <unwind_UCB_from_context>:
 8001ad8:	e7f0      	b.n	8001abc <_Unwind_GetGR.constprop.0>
 8001ada:	bf00      	nop

08001adc <__gnu_unwind_execute>:
 8001adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ae0:	4606      	mov	r6, r0
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	460f      	mov	r7, r1
 8001ae6:	f04f 0800 	mov.w	r8, #0
 8001aea:	4638      	mov	r0, r7
 8001aec:	f7ff ffca 	bl	8001a84 <next_unwind_byte>
 8001af0:	28b0      	cmp	r0, #176	; 0xb0
 8001af2:	4604      	mov	r4, r0
 8001af4:	d023      	beq.n	8001b3e <__gnu_unwind_execute+0x62>
 8001af6:	0605      	lsls	r5, r0, #24
 8001af8:	d427      	bmi.n	8001b4a <__gnu_unwind_execute+0x6e>
 8001afa:	2300      	movs	r3, #0
 8001afc:	f10d 090c 	add.w	r9, sp, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	0085      	lsls	r5, r0, #2
 8001b04:	220d      	movs	r2, #13
 8001b06:	f8cd 9000 	str.w	r9, [sp]
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff fbcc 	bl	80012a8 <_Unwind_VRS_Get>
 8001b10:	b2ed      	uxtb	r5, r5
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	f8cd 9000 	str.w	r9, [sp]
 8001b18:	0660      	lsls	r0, r4, #25
 8001b1a:	f105 0504 	add.w	r5, r5, #4
 8001b1e:	bf4c      	ite	mi
 8001b20:	1b5d      	submi	r5, r3, r5
 8001b22:	18ed      	addpl	r5, r5, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	220d      	movs	r2, #13
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	9503      	str	r5, [sp, #12]
 8001b2e:	f7ff fbe1 	bl	80012f4 <_Unwind_VRS_Set>
 8001b32:	4638      	mov	r0, r7
 8001b34:	f7ff ffa6 	bl	8001a84 <next_unwind_byte>
 8001b38:	28b0      	cmp	r0, #176	; 0xb0
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	d1db      	bne.n	8001af6 <__gnu_unwind_execute+0x1a>
 8001b3e:	f1b8 0f00 	cmp.w	r8, #0
 8001b42:	f000 8095 	beq.w	8001c70 <__gnu_unwind_execute+0x194>
 8001b46:	2000      	movs	r0, #0
 8001b48:	e01c      	b.n	8001b84 <__gnu_unwind_execute+0xa8>
 8001b4a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d05d      	beq.n	8001c0e <__gnu_unwind_execute+0x132>
 8001b52:	2b90      	cmp	r3, #144	; 0x90
 8001b54:	d019      	beq.n	8001b8a <__gnu_unwind_execute+0xae>
 8001b56:	2ba0      	cmp	r3, #160	; 0xa0
 8001b58:	d02c      	beq.n	8001bb4 <__gnu_unwind_execute+0xd8>
 8001b5a:	2bb0      	cmp	r3, #176	; 0xb0
 8001b5c:	d03f      	beq.n	8001bde <__gnu_unwind_execute+0x102>
 8001b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8001b60:	d06c      	beq.n	8001c3c <__gnu_unwind_execute+0x160>
 8001b62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b66:	2bd0      	cmp	r3, #208	; 0xd0
 8001b68:	d10b      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001b6a:	f000 0207 	and.w	r2, r0, #7
 8001b6e:	3201      	adds	r2, #1
 8001b70:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b74:	2305      	movs	r3, #5
 8001b76:	2101      	movs	r1, #1
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7ff fd89 	bl	8001690 <_Unwind_VRS_Pop>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0b3      	beq.n	8001aea <__gnu_unwind_execute+0xe>
 8001b82:	2009      	movs	r0, #9
 8001b84:	b005      	add	sp, #20
 8001b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b8a:	f000 030d 	and.w	r3, r0, #13
 8001b8e:	2b0d      	cmp	r3, #13
 8001b90:	d0f7      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001b92:	ad03      	add	r5, sp, #12
 8001b94:	2300      	movs	r3, #0
 8001b96:	f000 020f 	and.w	r2, r0, #15
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	9500      	str	r5, [sp, #0]
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff fb82 	bl	80012a8 <_Unwind_VRS_Get>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9500      	str	r5, [sp, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	220d      	movs	r2, #13
 8001bac:	4630      	mov	r0, r6
 8001bae:	f7ff fba1 	bl	80012f4 <_Unwind_VRS_Set>
 8001bb2:	e79a      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001bb4:	43c2      	mvns	r2, r0
 8001bb6:	f002 0307 	and.w	r3, r2, #7
 8001bba:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bbe:	411a      	asrs	r2, r3
 8001bc0:	0701      	lsls	r1, r0, #28
 8001bc2:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	bf48      	it	mi
 8001bcc:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7ff fd5c 	bl	8001690 <_Unwind_VRS_Pop>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1d2      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001bdc:	e785      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001bde:	28b1      	cmp	r0, #177	; 0xb1
 8001be0:	d057      	beq.n	8001c92 <__gnu_unwind_execute+0x1b6>
 8001be2:	28b2      	cmp	r0, #178	; 0xb2
 8001be4:	d068      	beq.n	8001cb8 <__gnu_unwind_execute+0x1dc>
 8001be6:	28b3      	cmp	r0, #179	; 0xb3
 8001be8:	f000 8095 	beq.w	8001d16 <__gnu_unwind_execute+0x23a>
 8001bec:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001bf0:	2bb4      	cmp	r3, #180	; 0xb4
 8001bf2:	d0c6      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001bf4:	f000 0207 	and.w	r2, r0, #7
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c00:	4619      	mov	r1, r3
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7ff fd44 	bl	8001690 <_Unwind_VRS_Pop>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1ba      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c0c:	e76d      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001c0e:	4638      	mov	r0, r7
 8001c10:	f7ff ff38 	bl	8001a84 <next_unwind_byte>
 8001c14:	0224      	lsls	r4, r4, #8
 8001c16:	4304      	orrs	r4, r0
 8001c18:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001c1c:	d0b1      	beq.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c1e:	0124      	lsls	r4, r4, #4
 8001c20:	2300      	movs	r3, #0
 8001c22:	b2a2      	uxth	r2, r4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff fd32 	bl	8001690 <_Unwind_VRS_Pop>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1a8      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c30:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001c34:	bf18      	it	ne
 8001c36:	f04f 0801 	movne.w	r8, #1
 8001c3a:	e756      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001c3c:	28c6      	cmp	r0, #198	; 0xc6
 8001c3e:	d07d      	beq.n	8001d3c <__gnu_unwind_execute+0x260>
 8001c40:	28c7      	cmp	r0, #199	; 0xc7
 8001c42:	f000 8086 	beq.w	8001d52 <__gnu_unwind_execute+0x276>
 8001c46:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8001c4c:	f000 8094 	beq.w	8001d78 <__gnu_unwind_execute+0x29c>
 8001c50:	28c8      	cmp	r0, #200	; 0xc8
 8001c52:	f000 809f 	beq.w	8001d94 <__gnu_unwind_execute+0x2b8>
 8001c56:	28c9      	cmp	r0, #201	; 0xc9
 8001c58:	d193      	bne.n	8001b82 <__gnu_unwind_execute+0xa6>
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f7ff ff12 	bl	8001a84 <next_unwind_byte>
 8001c60:	0302      	lsls	r2, r0, #12
 8001c62:	f000 000f 	and.w	r0, r0, #15
 8001c66:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	4302      	orrs	r2, r0
 8001c6e:	e781      	b.n	8001b74 <__gnu_unwind_execute+0x98>
 8001c70:	ac03      	add	r4, sp, #12
 8001c72:	4643      	mov	r3, r8
 8001c74:	220e      	movs	r2, #14
 8001c76:	4641      	mov	r1, r8
 8001c78:	9400      	str	r4, [sp, #0]
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff fb14 	bl	80012a8 <_Unwind_VRS_Get>
 8001c80:	9400      	str	r4, [sp, #0]
 8001c82:	4630      	mov	r0, r6
 8001c84:	4643      	mov	r3, r8
 8001c86:	220f      	movs	r2, #15
 8001c88:	4641      	mov	r1, r8
 8001c8a:	f7ff fb33 	bl	80012f4 <_Unwind_VRS_Set>
 8001c8e:	4640      	mov	r0, r8
 8001c90:	e778      	b.n	8001b84 <__gnu_unwind_execute+0xa8>
 8001c92:	4638      	mov	r0, r7
 8001c94:	f7ff fef6 	bl	8001a84 <next_unwind_byte>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f43f af72 	beq.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001c9e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ca2:	f47f af6e 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4630      	mov	r0, r6
 8001cac:	f7ff fcf0 	bl	8001690 <_Unwind_VRS_Pop>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	f47f af66 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001cb6:	e718      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f10d 090c 	add.w	r9, sp, #12
 8001cbe:	220d      	movs	r2, #13
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f8cd 9000 	str.w	r9, [sp]
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f7ff faee 	bl	80012a8 <_Unwind_VRS_Get>
 8001ccc:	4638      	mov	r0, r7
 8001cce:	f7ff fed9 	bl	8001a84 <next_unwind_byte>
 8001cd2:	0602      	lsls	r2, r0, #24
 8001cd4:	f04f 0402 	mov.w	r4, #2
 8001cd8:	d50c      	bpl.n	8001cf4 <__gnu_unwind_execute+0x218>
 8001cda:	9b03      	ldr	r3, [sp, #12]
 8001cdc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001ce0:	40a0      	lsls	r0, r4
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	f7ff fecc 	bl	8001a84 <next_unwind_byte>
 8001cec:	0603      	lsls	r3, r0, #24
 8001cee:	f104 0407 	add.w	r4, r4, #7
 8001cf2:	d4f2      	bmi.n	8001cda <__gnu_unwind_execute+0x1fe>
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	f8cd 9000 	str.w	r9, [sp]
 8001cfa:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001cfe:	40a2      	lsls	r2, r4
 8001d00:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001d04:	2300      	movs	r3, #0
 8001d06:	4414      	add	r4, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	220d      	movs	r2, #13
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	9403      	str	r4, [sp, #12]
 8001d10:	f7ff faf0 	bl	80012f4 <_Unwind_VRS_Set>
 8001d14:	e6e9      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d16:	4638      	mov	r0, r7
 8001d18:	f7ff feb4 	bl	8001a84 <next_unwind_byte>
 8001d1c:	0301      	lsls	r1, r0, #12
 8001d1e:	f000 000f 	and.w	r0, r0, #15
 8001d22:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001d26:	1c42      	adds	r2, r0, #1
 8001d28:	2301      	movs	r3, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7ff fcae 	bl	8001690 <_Unwind_VRS_Pop>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f47f af24 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d3a:	e6d6      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	f7ff fea1 	bl	8001a84 <next_unwind_byte>
 8001d42:	0301      	lsls	r1, r0, #12
 8001d44:	f000 000f 	and.w	r0, r0, #15
 8001d48:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001d4c:	1c42      	adds	r2, r0, #1
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e7eb      	b.n	8001d2a <__gnu_unwind_execute+0x24e>
 8001d52:	4638      	mov	r0, r7
 8001d54:	f7ff fe96 	bl	8001a84 <next_unwind_byte>
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f43f af12 	beq.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d5e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d62:	f47f af0e 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d66:	4602      	mov	r2, r0
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7ff fc90 	bl	8001690 <_Unwind_VRS_Pop>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	f47f af06 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d76:	e6b8      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d78:	f000 020f 	and.w	r2, r0, #15
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001d84:	4619      	mov	r1, r3
 8001d86:	4630      	mov	r0, r6
 8001d88:	f7ff fc82 	bl	8001690 <_Unwind_VRS_Pop>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f47f aef8 	bne.w	8001b82 <__gnu_unwind_execute+0xa6>
 8001d92:	e6aa      	b.n	8001aea <__gnu_unwind_execute+0xe>
 8001d94:	4638      	mov	r0, r7
 8001d96:	f7ff fe75 	bl	8001a84 <next_unwind_byte>
 8001d9a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001d9e:	f000 030f 	and.w	r3, r0, #15
 8001da2:	3210      	adds	r2, #16
 8001da4:	3301      	adds	r3, #1
 8001da6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001daa:	e6e3      	b.n	8001b74 <__gnu_unwind_execute+0x98>

08001dac <__gnu_unwind_frame>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001db0:	b084      	sub	sp, #16
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2003      	movs	r0, #3
 8001db6:	f88d 000c 	strb.w	r0, [sp, #12]
 8001dba:	79dc      	ldrb	r4, [r3, #7]
 8001dbc:	f88d 400d 	strb.w	r4, [sp, #13]
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	a901      	add	r1, sp, #4
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	f7ff fe86 	bl	8001adc <__gnu_unwind_execute>
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd10      	pop	{r4, pc}

08001dd4 <_Unwind_GetRegionStart>:
 8001dd4:	b508      	push	{r3, lr}
 8001dd6:	f7ff fe7f 	bl	8001ad8 <unwind_UCB_from_context>
 8001dda:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop

08001de0 <_Unwind_GetLanguageSpecificData>:
 8001de0:	b508      	push	{r3, lr}
 8001de2:	f7ff fe79 	bl	8001ad8 <unwind_UCB_from_context>
 8001de6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001de8:	79c3      	ldrb	r3, [r0, #7]
 8001dea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001dee:	3008      	adds	r0, #8
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop

08001df4 <_Unwind_GetTextRelBase>:
 8001df4:	b508      	push	{r3, lr}
 8001df6:	f00a ff9c 	bl	800cd32 <abort>
 8001dfa:	bf00      	nop

08001dfc <_Unwind_GetDataRelBase>:
 8001dfc:	b508      	push	{r3, lr}
 8001dfe:	f7ff fff9 	bl	8001df4 <_Unwind_GetTextRelBase>
 8001e02:	bf00      	nop

08001e04 <__aeabi_idiv0>:
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_Init+0x28>)
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001e10:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e12:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	f000 f833 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f005 fc9a 	bl	8007754 <HAL_InitTick>
 8001e20:	4604      	mov	r4, r0
 8001e22:	b918      	cbnz	r0, 8001e2c <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f005 fbf4 	bl	8007610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001e28:	4620      	mov	r0, r4
 8001e2a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001e2c:	2401      	movs	r4, #1
 8001e2e:	e7fb      	b.n	8001e28 <HAL_Init+0x20>
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e34:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_IncTick+0x10>)
 8001e36:	4904      	ldr	r1, [pc, #16]	; (8001e48 <HAL_IncTick+0x14>)
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	6809      	ldr	r1, [r1, #0]
 8001e3c:	440b      	add	r3, r1
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20001c70 	.word	0x20001c70
 8001e48:	2000001c 	.word	0x2000001c

08001e4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e4c:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <HAL_GetTick+0x8>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20001c70 	.word	0x20001c70

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff6 	bl	8001e4c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e60:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	bf1c      	itt	ne
 8001e64:	4b05      	ldrne	r3, [pc, #20]	; (8001e7c <HAL_Delay+0x24>)
 8001e66:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	bf18      	it	ne
 8001e6c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6e:	f7ff ffed 	bl	8001e4c <HAL_GetTick>
 8001e72:	1b40      	subs	r0, r0, r5
 8001e74:	4284      	cmp	r4, r0
 8001e76:	d8fa      	bhi.n	8001e6e <HAL_Delay+0x16>
  {
  }
}
 8001e78:	bd38      	pop	{r3, r4, r5, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000001c 	.word	0x2000001c

08001e80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e82:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	0200      	lsls	r0, r0, #8
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001e9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e9c:	60d3      	str	r3, [r2, #12]
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea6:	b530      	push	{r4, r5, lr}
 8001ea8:	68dc      	ldr	r4, [r3, #12]
 8001eaa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	bf28      	it	cs
 8001eb8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 0501 	mov.w	r5, #1
 8001ec0:	fa05 f303 	lsl.w	r3, r5, r3
 8001ec4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec8:	bf8c      	ite	hi
 8001eca:	3c03      	subhi	r4, #3
 8001ecc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ece:	4019      	ands	r1, r3
 8001ed0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed2:	fa05 f404 	lsl.w	r4, r5, r4
 8001ed6:	3c01      	subs	r4, #1
 8001ed8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001eda:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	ea42 0201 	orr.w	r2, r2, r1
 8001ee0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	bfad      	iteet	ge
 8001ee6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	f000 000f 	andlt.w	r0, r0, #15
 8001eee:	4b06      	ldrlt	r3, [pc, #24]	; (8001f08 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	bfb5      	itete	lt
 8001ef6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001f00:	bd30      	pop	{r4, r5, pc}
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	e000ed14 	.word	0xe000ed14

08001f0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	db08      	blt.n	8001f22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f10:	0942      	lsrs	r2, r0, #5
 8001f12:	2301      	movs	r3, #1
 8001f14:	f000 001f 	and.w	r0, r0, #31
 8001f18:	fa03 f000 	lsl.w	r0, r3, r0
 8001f1c:	4b01      	ldr	r3, [pc, #4]	; (8001f24 <HAL_NVIC_EnableIRQ+0x18>)
 8001f1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001f28:	b911      	cbnz	r1, 8001f30 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f2a:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	4608      	mov	r0, r1
      break;
 8001f2e:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8001f30:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8001f32:	4770      	bx	lr

08001f34 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f34:	b110      	cbz	r0, 8001f3c <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f36:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001f38:	2000      	movs	r0, #0
 8001f3a:	4770      	bx	lr
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
  }
}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f40:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001f42:	2201      	movs	r2, #1
 8001f44:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f48:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001f4c:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	4906      	ldr	r1, [pc, #24]	; (8001f6c <HAL_EXTI_IRQHandler+0x2c>)
{
 8001f52:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8001f54:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8001f56:	4222      	tst	r2, r4
 8001f58:	d005      	beq.n	8001f66 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f5a:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f5c:	6843      	ldr	r3, [r0, #4]
 8001f5e:	b113      	cbz	r3, 8001f66 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8001f60:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8001f64:	4718      	bx	r3
}
 8001f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40010414 	.word	0x40010414

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f74:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002124 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f7c:	4c67      	ldr	r4, [pc, #412]	; (800211c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001f80:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	9a01      	ldr	r2, [sp, #4]
 8001f84:	40da      	lsrs	r2, r3
 8001f86:	d102      	bne.n	8001f8e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001f88:	b005      	add	sp, #20
 8001f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f8e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001f90:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f92:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001f94:	ea12 0e06 	ands.w	lr, r2, r6
 8001f98:	f000 80b1 	beq.w	80020fe <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9c:	684a      	ldr	r2, [r1, #4]
 8001f9e:	f022 0710 	bic.w	r7, r2, #16
 8001fa2:	2f02      	cmp	r7, #2
 8001fa4:	d116      	bne.n	8001fd4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001fa6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001faa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fae:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001fb2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001fba:	f04f 0c0f 	mov.w	ip, #15
 8001fbe:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001fc2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc6:	690d      	ldr	r5, [r1, #16]
 8001fc8:	fa05 f50a 	lsl.w	r5, r5, sl
 8001fcc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001fd0:	f8c9 5020 	str.w	r5, [r9, #32]
 8001fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001fda:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fde:	fa05 f50c 	lsl.w	r5, r5, ip
 8001fe2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fe8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fec:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ff2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001ff8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ffc:	d811      	bhi.n	8002022 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001ffe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002000:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002004:	68cf      	ldr	r7, [r1, #12]
 8002006:	fa07 f70c 	lsl.w	r7, r7, ip
 800200a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800200e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002010:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002016:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800201a:	409f      	lsls	r7, r3
 800201c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8002020:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002022:	f1ba 0f03 	cmp.w	sl, #3
 8002026:	d107      	bne.n	8002038 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8002028:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800202a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800202e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002032:	409f      	lsls	r7, r3
 8002034:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8002036:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002038:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800203a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800203c:	688e      	ldr	r6, [r1, #8]
 800203e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002042:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8002044:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002046:	00d5      	lsls	r5, r2, #3
 8002048:	d559      	bpl.n	80020fe <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800204e:	f045 0501 	orr.w	r5, r5, #1
 8002052:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8002056:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800205a:	f023 0603 	bic.w	r6, r3, #3
 800205e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002062:	f005 0501 	and.w	r5, r5, #1
 8002066:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800206a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800206c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002070:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002072:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002074:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002078:	270f      	movs	r7, #15
 800207a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002082:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002086:	d03c      	beq.n	8002102 <HAL_GPIO_Init+0x192>
 8002088:	4d25      	ldr	r5, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x1b0>)
 800208a:	42a8      	cmp	r0, r5
 800208c:	d03b      	beq.n	8002106 <HAL_GPIO_Init+0x196>
 800208e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002092:	42a8      	cmp	r0, r5
 8002094:	d039      	beq.n	800210a <HAL_GPIO_Init+0x19a>
 8002096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800209a:	42a8      	cmp	r0, r5
 800209c:	d037      	beq.n	800210e <HAL_GPIO_Init+0x19e>
 800209e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020a2:	42a8      	cmp	r0, r5
 80020a4:	d035      	beq.n	8002112 <HAL_GPIO_Init+0x1a2>
 80020a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020aa:	42a8      	cmp	r0, r5
 80020ac:	d033      	beq.n	8002116 <HAL_GPIO_Init+0x1a6>
 80020ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020b2:	42a8      	cmp	r0, r5
 80020b4:	bf14      	ite	ne
 80020b6:	2507      	movne	r5, #7
 80020b8:	2506      	moveq	r5, #6
 80020ba:	fa05 f50c 	lsl.w	r5, r5, ip
 80020be:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80020c2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80020c4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80020ca:	bf54      	ite	pl
 80020cc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80020ce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80020d2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80020d4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80020d8:	bf54      	ite	pl
 80020da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80020dc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80020e0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80020e2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80020e6:	bf54      	ite	pl
 80020e8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80020ea:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80020ee:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80020f0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80020f4:	bf54      	ite	pl
 80020f6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80020f8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80020fc:	60e5      	str	r5, [r4, #12]
    position++;
 80020fe:	3301      	adds	r3, #1
 8002100:	e73f      	b.n	8001f82 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002102:	2500      	movs	r5, #0
 8002104:	e7d9      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 8002106:	2501      	movs	r5, #1
 8002108:	e7d7      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 800210a:	2502      	movs	r5, #2
 800210c:	e7d5      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 800210e:	2503      	movs	r5, #3
 8002110:	e7d3      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 8002112:	2504      	movs	r5, #4
 8002114:	e7d1      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 8002116:	2505      	movs	r5, #5
 8002118:	e7cf      	b.n	80020ba <HAL_GPIO_Init+0x14a>
 800211a:	bf00      	nop
 800211c:	40010400 	.word	0x40010400
 8002120:	48000400 	.word	0x48000400
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800212c:	4c40      	ldr	r4, [pc, #256]	; (8002230 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800212e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002238 <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002134:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002138:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 800213c:	fa31 f203 	lsrs.w	r2, r1, r3
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 8002142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002146:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 800214a:	ea11 0605 	ands.w	r6, r1, r5
 800214e:	d060      	beq.n	8002212 <HAL_GPIO_DeInit+0xea>
 8002150:	f023 0703 	bic.w	r7, r3, #3
 8002154:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002158:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800215c:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002160:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002162:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002166:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800216a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800216e:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002172:	d050      	beq.n	8002216 <HAL_GPIO_DeInit+0xee>
 8002174:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <HAL_GPIO_DeInit+0x10c>)
 8002176:	4290      	cmp	r0, r2
 8002178:	d04f      	beq.n	800221a <HAL_GPIO_DeInit+0xf2>
 800217a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800217e:	4290      	cmp	r0, r2
 8002180:	d04d      	beq.n	800221e <HAL_GPIO_DeInit+0xf6>
 8002182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002186:	4290      	cmp	r0, r2
 8002188:	d04b      	beq.n	8002222 <HAL_GPIO_DeInit+0xfa>
 800218a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800218e:	4290      	cmp	r0, r2
 8002190:	d049      	beq.n	8002226 <HAL_GPIO_DeInit+0xfe>
 8002192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002196:	4290      	cmp	r0, r2
 8002198:	d047      	beq.n	800222a <HAL_GPIO_DeInit+0x102>
 800219a:	4558      	cmp	r0, fp
 800219c:	bf0c      	ite	eq
 800219e:	2206      	moveq	r2, #6
 80021a0:	2207      	movne	r2, #7
 80021a2:	fa02 f20e 	lsl.w	r2, r2, lr
 80021a6:	4594      	cmp	ip, r2
 80021a8:	d110      	bne.n	80021cc <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	43f6      	mvns	r6, r6
 80021ae:	4032      	ands	r2, r6
 80021b0:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80021b2:	6862      	ldr	r2, [r4, #4]
 80021b4:	4032      	ands	r2, r6
 80021b6:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80021b8:	68a2      	ldr	r2, [r4, #8]
 80021ba:	4032      	ands	r2, r6
 80021bc:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80021be:	68e2      	ldr	r2, [r4, #12]
 80021c0:	4016      	ands	r6, r2
 80021c2:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	ea22 0209 	bic.w	r2, r2, r9
 80021ca:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80021cc:	6806      	ldr	r6, [r0, #0]
 80021ce:	2703      	movs	r7, #3
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80021d6:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80021da:	4316      	orrs	r6, r2
 80021dc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80021e0:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80021e2:	f003 0607 	and.w	r6, r3, #7
 80021e6:	f8d7 e020 	ldr.w	lr, [r7, #32]
 80021ea:	00b6      	lsls	r6, r6, #2
 80021ec:	fa08 f606 	lsl.w	r6, r8, r6
 80021f0:	ea2e 0606 	bic.w	r6, lr, r6
 80021f4:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f6:	6886      	ldr	r6, [r0, #8]
 80021f8:	43d2      	mvns	r2, r2
 80021fa:	4016      	ands	r6, r2
 80021fc:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fe:	6846      	ldr	r6, [r0, #4]
 8002200:	43ed      	mvns	r5, r5
 8002202:	402e      	ands	r6, r5
 8002204:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002206:	68c6      	ldr	r6, [r0, #12]
 8002208:	4032      	ands	r2, r6
 800220a:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800220c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800220e:	4015      	ands	r5, r2
 8002210:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 8002212:	3301      	adds	r3, #1
 8002214:	e792      	b.n	800213c <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002216:	2200      	movs	r2, #0
 8002218:	e7c3      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 800221a:	2201      	movs	r2, #1
 800221c:	e7c1      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 800221e:	2202      	movs	r2, #2
 8002220:	e7bf      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 8002222:	2203      	movs	r2, #3
 8002224:	e7bd      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 8002226:	2204      	movs	r2, #4
 8002228:	e7bb      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 800222a:	2205      	movs	r2, #5
 800222c:	e7b9      	b.n	80021a2 <HAL_GPIO_DeInit+0x7a>
 800222e:	bf00      	nop
 8002230:	40010400 	.word	0x40010400
 8002234:	48000400 	.word	0x48000400
 8002238:	48001800 	.word	0x48001800

0800223c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800223c:	6903      	ldr	r3, [r0, #16]
 800223e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002240:	bf14      	ite	ne
 8002242:	2001      	movne	r0, #1
 8002244:	2000      	moveq	r0, #0
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	b10a      	cbz	r2, 800224e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224a:	6181      	str	r1, [r0, #24]
 800224c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224e:	6281      	str	r1, [r0, #40]	; 0x28
 8002250:	4770      	bx	lr

08002252 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002252:	6943      	ldr	r3, [r0, #20]
 8002254:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	bf14      	ite	ne
 8002258:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800225a:	6181      	streq	r1, [r0, #24]
 800225c:	4770      	bx	lr
	...

08002260 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_PWREx_GetVoltageRange+0xc>)
 8002262:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002264:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40007000 	.word	0x40007000

08002270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002272:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002274:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002278:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	d11c      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800227e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002282:	d015      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002290:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	2232      	movs	r2, #50	; 0x32
 8002296:	434a      	muls	r2, r1
 8002298:	490f      	ldr	r1, [pc, #60]	; (80022d8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800229a:	fbb2 f2f1 	udiv	r2, r2, r1
 800229e:	4619      	mov	r1, r3
 80022a0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a2:	6958      	ldr	r0, [r3, #20]
 80022a4:	0540      	lsls	r0, r0, #21
 80022a6:	d500      	bpl.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x3a>
 80022a8:	b922      	cbnz	r2, 80022b4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022aa:	694b      	ldr	r3, [r1, #20]
 80022ac:	055b      	lsls	r3, r3, #21
 80022ae:	d40d      	bmi.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2000      	movs	r0, #0
 80022b2:	4770      	bx	lr
        wait_loop_index--;
 80022b4:	3a01      	subs	r2, #1
 80022b6:	e7f4      	b.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022bc:	bf1f      	itttt	ne
 80022be:	681a      	ldrne	r2, [r3, #0]
 80022c0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80022c4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80022c8:	601a      	strne	r2, [r3, #0]
 80022ca:	e7f1      	b.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80022cc:	2003      	movs	r0, #3
}
 80022ce:	4770      	bx	lr
 80022d0:	40007000 	.word	0x40007000
 80022d4:	20000038 	.word	0x20000038
 80022d8:	000f4240 	.word	0x000f4240

080022dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022de:	4d1e      	ldr	r5, [pc, #120]	; (8002358 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80022e0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022e2:	00da      	lsls	r2, r3, #3
{
 80022e4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e6:	d518      	bpl.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022e8:	f7ff ffba 	bl	8002260 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80022f0:	d123      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	2c80      	cmp	r4, #128	; 0x80
 80022f4:	d929      	bls.n	800234a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	bf8c      	ite	hi
 80022fa:	2002      	movhi	r0, #2
 80022fc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002300:	6813      	ldr	r3, [r2, #0]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	4303      	orrs	r3, r0
 8002308:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002310:	1a18      	subs	r0, r3, r0
 8002312:	bf18      	it	ne
 8002314:	2001      	movne	r0, #1
 8002316:	b003      	add	sp, #12
 8002318:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	65ab      	str	r3, [r5, #88]	; 0x58
 8002322:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800232c:	f7ff ff98 	bl	8002260 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	65ab      	str	r3, [r5, #88]	; 0x58
 8002338:	e7d8      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800233a:	2c80      	cmp	r4, #128	; 0x80
 800233c:	d807      	bhi.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800233e:	d008      	beq.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002340:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002344:	4258      	negs	r0, r3
 8002346:	4158      	adcs	r0, r3
 8002348:	e7d9      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800234a:	2000      	movs	r0, #0
 800234c:	e7d7      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800234e:	2003      	movs	r0, #3
 8002350:	e7d5      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002352:	2002      	movs	r0, #2
 8002354:	e7d3      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_RCC_GetSysClockFreq+0x8c>)
 8002362:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002364:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002366:	f012 020c 	ands.w	r2, r2, #12
 800236a:	d005      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x18>
 800236c:	2a0c      	cmp	r2, #12
 800236e:	d115      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002374:	2901      	cmp	r1, #1
 8002376:	d118      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002378:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800237a:	481d      	ldr	r0, [pc, #116]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237e:	bf55      	itete	pl
 8002380:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002384:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002386:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800238a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800238e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002392:	b34a      	cbz	r2, 80023e8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002394:	2a0c      	cmp	r2, #12
 8002396:	d009      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x4c>
 8002398:	2000      	movs	r0, #0
  return sysclockfreq;
 800239a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800239c:	2a04      	cmp	r2, #4
 800239e:	d022      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x86>
 80023a0:	2a08      	cmp	r2, #8
 80023a2:	4814      	ldr	r0, [pc, #80]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a4:	bf18      	it	ne
 80023a6:	2000      	movne	r0, #0
 80023a8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023aa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80023b2:	2a02      	cmp	r2, #2
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 80023b6:	490f      	ldr	r1, [pc, #60]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b8:	2a03      	cmp	r2, #3
 80023ba:	bf08      	it	eq
 80023bc:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023be:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c0:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023d0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d2:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d4:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023d6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d8:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 80023dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80023e0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023e4:	e7eb      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80023e6:	4804      	ldr	r0, [pc, #16]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	0800d0e0 	.word	0x0800d0e0
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	00f42400 	.word	0x00f42400

080023fc <HAL_RCC_OscConfig>:
{
 80023fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002400:	4605      	mov	r5, r0
 8002402:	b918      	cbnz	r0, 800240c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
}
 8002406:	b003      	add	sp, #12
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240c:	4ca7      	ldr	r4, [pc, #668]	; (80026ac <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002410:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002412:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002414:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002416:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241e:	d53d      	bpl.n	800249c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002420:	b11e      	cbz	r6, 800242a <HAL_RCC_OscConfig+0x2e>
 8002422:	2e0c      	cmp	r6, #12
 8002424:	d166      	bne.n	80024f4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002426:	2f01      	cmp	r7, #1
 8002428:	d164      	bne.n	80024f4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	0799      	lsls	r1, r3, #30
 800242e:	d502      	bpl.n	8002436 <HAL_RCC_OscConfig+0x3a>
 8002430:	69ab      	ldr	r3, [r5, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0e6      	beq.n	8002404 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	6a28      	ldr	r0, [r5, #32]
 800243a:	071a      	lsls	r2, r3, #28
 800243c:	bf56      	itet	pl
 800243e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002442:	6823      	ldrmi	r3, [r4, #0]
 8002444:	091b      	lsrpl	r3, r3, #4
 8002446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244a:	4283      	cmp	r3, r0
 800244c:	d23b      	bcs.n	80024c6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800244e:	f7ff ff45 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 8002452:	2800      	cmp	r0, #0
 8002454:	d1d6      	bne.n	8002404 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	6a2a      	ldr	r2, [r5, #32]
 8002462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002466:	4313      	orrs	r3, r2
 8002468:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	69ea      	ldr	r2, [r5, #28]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002476:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002478:	f7ff ff72 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800247c:	68a3      	ldr	r3, [r4, #8]
 800247e:	4a8c      	ldr	r2, [pc, #560]	; (80026b0 <HAL_RCC_OscConfig+0x2b4>)
 8002480:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	40d8      	lsrs	r0, r3
 800248c:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x2b8>)
 800248e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002490:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_RCC_OscConfig+0x2bc>)
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	f005 f95e 	bl	8007754 <HAL_InitTick>
        if(status != HAL_OK)
 8002498:	2800      	cmp	r0, #0
 800249a:	d1b4      	bne.n	8002406 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	07d9      	lsls	r1, r3, #31
 80024a0:	d45f      	bmi.n	8002562 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	079a      	lsls	r2, r3, #30
 80024a6:	f100 809e 	bmi.w	80025e6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	682b      	ldr	r3, [r5, #0]
 80024ac:	0719      	lsls	r1, r3, #28
 80024ae:	f100 80d2 	bmi.w	8002656 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	075a      	lsls	r2, r3, #29
 80024b6:	f100 8101 	bmi.w	80026bc <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 816a 	bne.w	8002796 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80024c2:	2000      	movs	r0, #0
 80024c4:	e79f      	b.n	8002406 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d4:	4303      	orrs	r3, r0
 80024d6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	69ea      	ldr	r2, [r5, #28]
 80024dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024e4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	d1c6      	bne.n	8002478 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ea:	f7ff fef7 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d0c2      	beq.n	8002478 <HAL_RCC_OscConfig+0x7c>
 80024f2:	e787      	b.n	8002404 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f4:	69ab      	ldr	r3, [r5, #24]
 80024f6:	b31b      	cbz	r3, 8002540 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002500:	f7ff fca4 	bl	8001e4c <HAL_GetTick>
 8002504:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	079b      	lsls	r3, r3, #30
 800250a:	d511      	bpl.n	8002530 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	6a2a      	ldr	r2, [r5, #32]
 8002518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251c:	4313      	orrs	r3, r2
 800251e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002520:	6863      	ldr	r3, [r4, #4]
 8002522:	69ea      	ldr	r2, [r5, #28]
 8002524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800252c:	6063      	str	r3, [r4, #4]
 800252e:	e7b5      	b.n	800249c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002530:	f7ff fc8c 	bl	8001e4c <HAL_GetTick>
 8002534:	eba0 0008 	sub.w	r0, r0, r8
 8002538:	2802      	cmp	r0, #2
 800253a:	d9e4      	bls.n	8002506 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800253c:	2003      	movs	r0, #3
 800253e:	e762      	b.n	8002406 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002548:	f7ff fc80 	bl	8001e4c <HAL_GetTick>
 800254c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	0798      	lsls	r0, r3, #30
 8002552:	d5a3      	bpl.n	800249c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002554:	f7ff fc7a 	bl	8001e4c <HAL_GetTick>
 8002558:	eba0 0008 	sub.w	r0, r0, r8
 800255c:	2802      	cmp	r0, #2
 800255e:	d9f6      	bls.n	800254e <HAL_RCC_OscConfig+0x152>
 8002560:	e7ec      	b.n	800253c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002562:	2e08      	cmp	r6, #8
 8002564:	d003      	beq.n	800256e <HAL_RCC_OscConfig+0x172>
 8002566:	2e0c      	cmp	r6, #12
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256a:	2f03      	cmp	r7, #3
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	039b      	lsls	r3, r3, #14
 8002572:	d596      	bpl.n	80024a2 <HAL_RCC_OscConfig+0xa6>
 8002574:	686b      	ldr	r3, [r5, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d193      	bne.n	80024a2 <HAL_RCC_OscConfig+0xa6>
 800257a:	e743      	b.n	8002404 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	686b      	ldr	r3, [r5, #4]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002582:	d110      	bne.n	80025a6 <HAL_RCC_OscConfig+0x1aa>
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800258c:	f7ff fc5e 	bl	8001e4c <HAL_GetTick>
 8002590:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	0398      	lsls	r0, r3, #14
 8002596:	d484      	bmi.n	80024a2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fc58 	bl	8001e4c <HAL_GetTick>
 800259c:	eba0 0008 	sub.w	r0, r0, r8
 80025a0:	2864      	cmp	r0, #100	; 0x64
 80025a2:	d9f6      	bls.n	8002592 <HAL_RCC_OscConfig+0x196>
 80025a4:	e7ca      	b.n	800253c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025aa:	d104      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1ba>
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	e7e6      	b.n	8002584 <HAL_RCC_OscConfig+0x188>
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025bc:	6022      	str	r2, [r4, #0]
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1e0      	bne.n	800258c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80025ca:	f7ff fc3f 	bl	8001e4c <HAL_GetTick>
 80025ce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	0399      	lsls	r1, r3, #14
 80025d4:	f57f af65 	bpl.w	80024a2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fc38 	bl	8001e4c <HAL_GetTick>
 80025dc:	eba0 0008 	sub.w	r0, r0, r8
 80025e0:	2864      	cmp	r0, #100	; 0x64
 80025e2:	d9f5      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1d4>
 80025e4:	e7aa      	b.n	800253c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025e6:	2e04      	cmp	r6, #4
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
 80025ea:	2e0c      	cmp	r6, #12
 80025ec:	d110      	bne.n	8002610 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ee:	2f02      	cmp	r7, #2
 80025f0:	d10e      	bne.n	8002610 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	055a      	lsls	r2, r3, #21
 80025f6:	d503      	bpl.n	8002600 <HAL_RCC_OscConfig+0x204>
 80025f8:	68eb      	ldr	r3, [r5, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f43f af02 	beq.w	8002404 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	6863      	ldr	r3, [r4, #4]
 8002602:	692a      	ldr	r2, [r5, #16]
 8002604:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002608:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	e74c      	b.n	80024aa <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002610:	68eb      	ldr	r3, [r5, #12]
 8002612:	b17b      	cbz	r3, 8002634 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800261c:	f7ff fc16 	bl	8001e4c <HAL_GetTick>
 8002620:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	055b      	lsls	r3, r3, #21
 8002626:	d4eb      	bmi.n	8002600 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff fc10 	bl	8001e4c <HAL_GetTick>
 800262c:	1bc0      	subs	r0, r0, r7
 800262e:	2802      	cmp	r0, #2
 8002630:	d9f7      	bls.n	8002622 <HAL_RCC_OscConfig+0x226>
 8002632:	e783      	b.n	800253c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800263c:	f7ff fc06 	bl	8001e4c <HAL_GetTick>
 8002640:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	0558      	lsls	r0, r3, #21
 8002646:	f57f af30 	bpl.w	80024aa <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff fbff 	bl	8001e4c <HAL_GetTick>
 800264e:	1bc0      	subs	r0, r0, r7
 8002650:	2802      	cmp	r0, #2
 8002652:	d9f6      	bls.n	8002642 <HAL_RCC_OscConfig+0x246>
 8002654:	e772      	b.n	800253c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002656:	696b      	ldr	r3, [r5, #20]
 8002658:	b19b      	cbz	r3, 8002682 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800265a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002666:	f7ff fbf1 	bl	8001e4c <HAL_GetTick>
 800266a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800266c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002670:	079b      	lsls	r3, r3, #30
 8002672:	f53f af1e 	bmi.w	80024b2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff fbe9 	bl	8001e4c <HAL_GetTick>
 800267a:	1bc0      	subs	r0, r0, r7
 800267c:	2802      	cmp	r0, #2
 800267e:	d9f5      	bls.n	800266c <HAL_RCC_OscConfig+0x270>
 8002680:	e75c      	b.n	800253c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002682:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800268e:	f7ff fbdd 	bl	8001e4c <HAL_GetTick>
 8002692:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002694:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002698:	0798      	lsls	r0, r3, #30
 800269a:	f57f af0a 	bpl.w	80024b2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7ff fbd5 	bl	8001e4c <HAL_GetTick>
 80026a2:	1bc0      	subs	r0, r0, r7
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9f5      	bls.n	8002694 <HAL_RCC_OscConfig+0x298>
 80026a8:	e748      	b.n	800253c <HAL_RCC_OscConfig+0x140>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800d0c6 	.word	0x0800d0c6
 80026b4:	20000038 	.word	0x20000038
 80026b8:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026be:	00d9      	lsls	r1, r3, #3
 80026c0:	d429      	bmi.n	8002716 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80026ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026d4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4f89      	ldr	r7, [pc, #548]	; (8002900 <HAL_RCC_OscConfig+0x504>)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	05da      	lsls	r2, r3, #23
 80026de:	d51d      	bpl.n	800271c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	68ab      	ldr	r3, [r5, #8]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12b      	bne.n	800273e <HAL_RCC_OscConfig+0x342>
 80026e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80026f2:	f7ff fbab 	bl	8001e4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80026fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002700:	0798      	lsls	r0, r3, #30
 8002702:	d542      	bpl.n	800278a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8002704:	f1b8 0f00 	cmp.w	r8, #0
 8002708:	f43f aed7 	beq.w	80024ba <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	65a3      	str	r3, [r4, #88]	; 0x58
 8002714:	e6d1      	b.n	80024ba <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8002716:	f04f 0800 	mov.w	r8, #0
 800271a:	e7dd      	b.n	80026d8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002724:	f7ff fb92 	bl	8001e4c <HAL_GetTick>
 8002728:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	d4d7      	bmi.n	80026e0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7ff fb8c 	bl	8001e4c <HAL_GetTick>
 8002734:	eba0 0009 	sub.w	r0, r0, r9
 8002738:	2802      	cmp	r0, #2
 800273a:	d9f6      	bls.n	800272a <HAL_RCC_OscConfig+0x32e>
 800273c:	e6fe      	b.n	800253c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273e:	2b05      	cmp	r3, #5
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x354>
 8002742:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800274e:	e7ca      	b.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
 8002750:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800275c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1c2      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800276c:	f7ff fb6e 	bl	8001e4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002774:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002776:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800277a:	0799      	lsls	r1, r3, #30
 800277c:	d5c2      	bpl.n	8002704 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff fb65 	bl	8001e4c <HAL_GetTick>
 8002782:	1bc0      	subs	r0, r0, r7
 8002784:	4548      	cmp	r0, r9
 8002786:	d9f6      	bls.n	8002776 <HAL_RCC_OscConfig+0x37a>
 8002788:	e6d8      	b.n	800253c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff fb5f 	bl	8001e4c <HAL_GetTick>
 800278e:	1bc0      	subs	r0, r0, r7
 8002790:	4548      	cmp	r0, r9
 8002792:	d9b3      	bls.n	80026fc <HAL_RCC_OscConfig+0x300>
 8002794:	e6d2      	b.n	800253c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002796:	2b02      	cmp	r3, #2
 8002798:	f040 808f 	bne.w	80028ba <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800279c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80027a0:	f003 0103 	and.w	r1, r3, #3
 80027a4:	4291      	cmp	r1, r2
 80027a6:	d124      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80027aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ae:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80027b4:	d11d      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80027b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027bc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80027c0:	d117      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027c2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80027c4:	3a07      	subs	r2, #7
 80027c6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80027ca:	bf18      	it	ne
 80027cc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ce:	4291      	cmp	r1, r2
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80027d4:	0852      	lsrs	r2, r2, #1
 80027d6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80027da:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027dc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80027e4:	0852      	lsrs	r2, r2, #1
 80027e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80027ea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ec:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80027f0:	d04a      	beq.n	8002888 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f2:	2e0c      	cmp	r6, #12
 80027f4:	f43f ae06 	beq.w	8002404 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	f53f ae02 	bmi.w	8002404 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	f53f adfe 	bmi.w	8002404 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002810:	f7ff fb1c 	bl	8001e4c <HAL_GetTick>
 8002814:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	019f      	lsls	r7, r3, #6
 800281a:	d42f      	bmi.n	800287c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	68e2      	ldr	r2, [r4, #12]
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_OscConfig+0x508>)
 8002820:	4013      	ands	r3, r2
 8002822:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002824:	4313      	orrs	r3, r2
 8002826:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800282c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800282e:	3a01      	subs	r2, #1
 8002830:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002834:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002836:	0912      	lsrs	r2, r2, #4
 8002838:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800283c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002846:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002848:	0852      	lsrs	r2, r2, #1
 800284a:	3a01      	subs	r2, #1
 800284c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002850:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002858:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285a:	68e3      	ldr	r3, [r4, #12]
 800285c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002860:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002862:	f7ff faf3 	bl	8001e4c <HAL_GetTick>
 8002866:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	0198      	lsls	r0, r3, #6
 800286c:	f53f ae29 	bmi.w	80024c2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7ff faec 	bl	8001e4c <HAL_GetTick>
 8002874:	1b40      	subs	r0, r0, r5
 8002876:	2802      	cmp	r0, #2
 8002878:	d9f6      	bls.n	8002868 <HAL_RCC_OscConfig+0x46c>
 800287a:	e65f      	b.n	800253c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff fae6 	bl	8001e4c <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	2802      	cmp	r0, #2
 8002884:	d9c7      	bls.n	8002816 <HAL_RCC_OscConfig+0x41a>
 8002886:	e659      	b.n	800253c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	0199      	lsls	r1, r3, #6
 800288c:	f53f ae19 	bmi.w	80024c2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002898:	68e3      	ldr	r3, [r4, #12]
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80028a0:	f7ff fad4 	bl	8001e4c <HAL_GetTick>
 80028a4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	019a      	lsls	r2, r3, #6
 80028aa:	f53f ae0a 	bmi.w	80024c2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7ff facd 	bl	8001e4c <HAL_GetTick>
 80028b2:	1b40      	subs	r0, r0, r5
 80028b4:	2802      	cmp	r0, #2
 80028b6:	d9f6      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
 80028b8:	e640      	b.n	800253c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ba:	2e0c      	cmp	r6, #12
 80028bc:	f43f ada2 	beq.w	8002404 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028ce:	bf02      	ittt	eq
 80028d0:	68e3      	ldreq	r3, [r4, #12]
 80028d2:	f023 0303 	biceq.w	r3, r3, #3
 80028d6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028d8:	68e3      	ldr	r3, [r4, #12]
 80028da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80028e4:	f7ff fab2 	bl	8001e4c <HAL_GetTick>
 80028e8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	f57f ade8 	bpl.w	80024c2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff faab 	bl	8001e4c <HAL_GetTick>
 80028f6:	1b40      	subs	r0, r0, r5
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d9f6      	bls.n	80028ea <HAL_RCC_OscConfig+0x4ee>
 80028fc:	e61e      	b.n	800253c <HAL_RCC_OscConfig+0x140>
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000
 8002904:	f99d808c 	.word	0xf99d808c

08002908 <HAL_RCC_ClockConfig>:
{
 8002908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800290c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800290e:	4604      	mov	r4, r0
 8002910:	b910      	cbnz	r0, 8002918 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
 8002914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4a41      	ldr	r2, [pc, #260]	; (8002a20 <HAL_RCC_ClockConfig+0x118>)
 800291a:	6813      	ldr	r3, [r2, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	428b      	cmp	r3, r1
 8002922:	d32a      	bcc.n	800297a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	07d9      	lsls	r1, r3, #31
 8002928:	d432      	bmi.n	8002990 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292a:	6821      	ldr	r1, [r4, #0]
 800292c:	078a      	lsls	r2, r1, #30
 800292e:	d45c      	bmi.n	80029ea <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x118>)
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	429e      	cmp	r6, r3
 800293a:	d35e      	bcc.n	80029fa <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	f011 0f04 	tst.w	r1, #4
 8002940:	4d38      	ldr	r5, [pc, #224]	; (8002a24 <HAL_RCC_ClockConfig+0x11c>)
 8002942:	d165      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	070b      	lsls	r3, r1, #28
 8002946:	d506      	bpl.n	8002956 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002948:	68ab      	ldr	r3, [r5, #8]
 800294a:	6922      	ldr	r2, [r4, #16]
 800294c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002950:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002954:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002956:	f7ff fd03 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800295a:	68ab      	ldr	r3, [r5, #8]
 800295c:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <HAL_RCC_ClockConfig+0x120>)
 800295e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	40d8      	lsrs	r0, r3
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_RCC_ClockConfig+0x124>)
 8002970:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCC_ClockConfig+0x128>)
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	f004 beed 	b.w	8007754 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	f023 0307 	bic.w	r3, r3, #7
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	4299      	cmp	r1, r3
 800298c:	d1c1      	bne.n	8002912 <HAL_RCC_ClockConfig+0xa>
 800298e:	e7c9      	b.n	8002924 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002990:	6862      	ldr	r2, [r4, #4]
 8002992:	4d24      	ldr	r5, [pc, #144]	; (8002a24 <HAL_RCC_ClockConfig+0x11c>)
 8002994:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002998:	d11b      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	d0b8      	beq.n	8002912 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a0:	68ab      	ldr	r3, [r5, #8]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80029aa:	f7ff fa4f 	bl	8001e4c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ae:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029b2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b4:	68ab      	ldr	r3, [r5, #8]
 80029b6:	6862      	ldr	r2, [r4, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029c0:	d0b3      	beq.n	800292a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7ff fa43 	bl	8001e4c <HAL_GetTick>
 80029c6:	1bc0      	subs	r0, r0, r7
 80029c8:	4540      	cmp	r0, r8
 80029ca:	d9f3      	bls.n	80029b4 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
}
 80029ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	2a02      	cmp	r2, #2
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029da:	e7e0      	b.n	800299e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029dc:	b912      	cbnz	r2, 80029e4 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029de:	f013 0f02 	tst.w	r3, #2
 80029e2:	e7dc      	b.n	800299e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80029e8:	e7d9      	b.n	800299e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x11c>)
 80029ec:	68a0      	ldr	r0, [r4, #8]
 80029ee:	6893      	ldr	r3, [r2, #8]
 80029f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f4:	4303      	orrs	r3, r0
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	e79a      	b.n	8002930 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	f023 0307 	bic.w	r3, r3, #7
 8002a00:	4333      	orrs	r3, r6
 8002a02:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	6813      	ldr	r3, [r2, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	429e      	cmp	r6, r3
 8002a0c:	d181      	bne.n	8002912 <HAL_RCC_ClockConfig+0xa>
 8002a0e:	e795      	b.n	800293c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	68ab      	ldr	r3, [r5, #8]
 8002a12:	68e2      	ldr	r2, [r4, #12]
 8002a14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60ab      	str	r3, [r5, #8]
 8002a1c:	e792      	b.n	8002944 <HAL_RCC_ClockConfig+0x3c>
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800d0c6 	.word	0x0800d0c6
 8002a2c:	20000038 	.word	0x20000038
 8002a30:	20000020 	.word	0x20000020

08002a34 <HAL_RCC_GetHCLKFreq>:
}
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000038 	.word	0x20000038

08002a40 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4e:	6810      	ldr	r0, [r2, #0]
 8002a50:	f003 031f 	and.w	r3, r3, #31
}
 8002a54:	40d8      	lsrs	r0, r3
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	0800d0d6 	.word	0x0800d0d6
 8002a60:	20000038 	.word	0x20000038

08002a64 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a72:	6810      	ldr	r0, [r2, #0]
 8002a74:	f003 031f 	and.w	r3, r3, #31
}
 8002a78:	40d8      	lsrs	r0, r3
 8002a7a:	4770      	bx	lr
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	0800d0d6 	.word	0x0800d0d6
 8002a84:	20000038 	.word	0x20000038

08002a88 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a88:	230f      	movs	r3, #15
 8002a8a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetClockConfig+0x34>)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002a9c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002aa4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aae:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetClockConfig+0x38>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	600b      	str	r3, [r1, #0]
 8002aba:	4770      	bx	lr
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <HAL_RCC_CSSCallback>:
{
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_RCC_NMI_IRQHandler>:
{
 8002ac8:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002aca:	4c05      	ldr	r4, [pc, #20]	; (8002ae0 <HAL_RCC_NMI_IRQHandler+0x18>)
 8002acc:	69e3      	ldr	r3, [r4, #28]
 8002ace:	05db      	lsls	r3, r3, #23
 8002ad0:	d504      	bpl.n	8002adc <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8002ad2:	f7ff fff7 	bl	8002ac4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ada:	6223      	str	r3, [r4, #32]
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <RCCEx_PLLSAI1_Config+0x118>)
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	f012 0f03 	tst.w	r2, #3
{
 8002aee:	4605      	mov	r5, r0
 8002af0:	460e      	mov	r6, r1
 8002af2:	461c      	mov	r4, r3
 8002af4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002af6:	d02a      	beq.n	8002b4e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	4282      	cmp	r2, r0
 8002b00:	d13c      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d03a      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b06:	68db      	ldr	r3, [r3, #12]
       ||
 8002b08:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b0e:	3301      	adds	r3, #1
       ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d133      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7ff f996 	bl	8001e4c <HAL_GetTick>
 8002b20:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	011a      	lsls	r2, r3, #4
 8002b26:	d432      	bmi.n	8002b8e <RCCEx_PLLSAI1_Config+0xaa>
 8002b28:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2a:	2e00      	cmp	r6, #0
 8002b2c:	d036      	beq.n	8002b9c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b2e:	2e01      	cmp	r6, #1
 8002b30:	d150      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b32:	6922      	ldr	r2, [r4, #16]
 8002b34:	6928      	ldr	r0, [r5, #16]
 8002b36:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b3a:	0840      	lsrs	r0, r0, #1
 8002b3c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002b40:	3801      	subs	r0, #1
 8002b42:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002b46:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002b4a:	6122      	str	r2, [r4, #16]
 8002b4c:	e032      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002b4e:	2802      	cmp	r0, #2
 8002b50:	d010      	beq.n	8002b74 <RCCEx_PLLSAI1_Config+0x90>
 8002b52:	2803      	cmp	r0, #3
 8002b54:	d014      	beq.n	8002b80 <RCCEx_PLLSAI1_Config+0x9c>
 8002b56:	2801      	cmp	r0, #1
 8002b58:	d110      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	079f      	lsls	r7, r3, #30
 8002b5e:	d538      	bpl.n	8002bd2 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b60:	68e3      	ldr	r3, [r4, #12]
 8002b62:	686a      	ldr	r2, [r5, #4]
 8002b64:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	4318      	orrs	r0, r3
 8002b6c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002b70:	60e0      	str	r0, [r4, #12]
 8002b72:	e7cf      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7a:	d1f1      	bne.n	8002b60 <RCCEx_PLLSAI1_Config+0x7c>
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	0391      	lsls	r1, r2, #14
 8002b84:	d4ec      	bmi.n	8002b60 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002b8c:	e7f5      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b8e:	f7ff f95d 	bl	8001e4c <HAL_GetTick>
 8002b92:	1bc0      	subs	r0, r0, r7
 8002b94:	2802      	cmp	r0, #2
 8002b96:	d9c4      	bls.n	8002b22 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9c:	6921      	ldr	r1, [r4, #16]
 8002b9e:	68eb      	ldr	r3, [r5, #12]
 8002ba0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002ba4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002ba8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002bb2:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bba:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff f946 	bl	8001e4c <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	d513      	bpl.n	8002bf0 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	69aa      	ldr	r2, [r5, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	6123      	str	r3, [r4, #16]
 8002bd0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd4:	6923      	ldr	r3, [r4, #16]
 8002bd6:	6968      	ldr	r0, [r5, #20]
 8002bd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bdc:	0840      	lsrs	r0, r0, #1
 8002bde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be2:	3801      	subs	r0, #1
 8002be4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002be8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002bec:	6123      	str	r3, [r4, #16]
 8002bee:	e7e1      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf0:	f7ff f92c 	bl	8001e4c <HAL_GetTick>
 8002bf4:	1b80      	subs	r0, r0, r6
 8002bf6:	2802      	cmp	r0, #2
 8002bf8:	d9e3      	bls.n	8002bc2 <RCCEx_PLLSAI1_Config+0xde>
 8002bfa:	e7cd      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0xb4>
 8002bfc:	40021000 	.word	0x40021000

08002c00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <RCCEx_PLLSAI2_Config+0xf8>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	f012 0f03 	tst.w	r2, #3
{
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	460e      	mov	r6, r1
 8002c0e:	461c      	mov	r4, r3
 8002c10:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c12:	d028      	beq.n	8002c66 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	4282      	cmp	r2, r0
 8002c1c:	d13a      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002c1e:	2a00      	cmp	r2, #0
 8002c20:	d038      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c22:	68db      	ldr	r3, [r3, #12]
       ||
 8002c24:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c2a:	3301      	adds	r3, #1
       ||
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d131      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7ff f908 	bl	8001e4c <HAL_GetTick>
 8002c3c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	d430      	bmi.n	8002ca6 <RCCEx_PLLSAI2_Config+0xa6>
 8002c44:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c46:	2e00      	cmp	r6, #0
 8002c48:	d034      	beq.n	8002cb4 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c4a:	6963      	ldr	r3, [r4, #20]
 8002c4c:	6929      	ldr	r1, [r5, #16]
 8002c4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c52:	0849      	lsrs	r1, r1, #1
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c58:	3901      	subs	r1, #1
 8002c5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c5e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002c62:	6163      	str	r3, [r4, #20]
 8002c64:	e032      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d010      	beq.n	8002c8c <RCCEx_PLLSAI2_Config+0x8c>
 8002c6a:	2803      	cmp	r0, #3
 8002c6c:	d014      	beq.n	8002c98 <RCCEx_PLLSAI2_Config+0x98>
 8002c6e:	2801      	cmp	r0, #1
 8002c70:	d110      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	079f      	lsls	r7, r3, #30
 8002c76:	d538      	bpl.n	8002cea <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c78:	68e3      	ldr	r3, [r4, #12]
 8002c7a:	686a      	ldr	r2, [r5, #4]
 8002c7c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002c80:	3a01      	subs	r2, #1
 8002c82:	4318      	orrs	r0, r3
 8002c84:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002c88:	60e0      	str	r0, [r4, #12]
 8002c8a:	e7d1      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c92:	d1f1      	bne.n	8002c78 <RCCEx_PLLSAI2_Config+0x78>
 8002c94:	2001      	movs	r0, #1
 8002c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	0391      	lsls	r1, r2, #14
 8002c9c:	d4ec      	bmi.n	8002c78 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002ca4:	e7f5      	b.n	8002c92 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ca6:	f7ff f8d1 	bl	8001e4c <HAL_GetTick>
 8002caa:	1bc0      	subs	r0, r0, r7
 8002cac:	2802      	cmp	r0, #2
 8002cae:	d9c6      	bls.n	8002c3e <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb4:	6962      	ldr	r2, [r4, #20]
 8002cb6:	68eb      	ldr	r3, [r5, #12]
 8002cb8:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002cbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cc0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002cca:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7ff f8ba 	bl	8001e4c <HAL_GetTick>
 8002cd8:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	d505      	bpl.n	8002cec <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ce0:	6963      	ldr	r3, [r4, #20]
 8002ce2:	696a      	ldr	r2, [r5, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	6163      	str	r3, [r4, #20]
 8002ce8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cec:	f7ff f8ae 	bl	8001e4c <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	2802      	cmp	r0, #2
 8002cf4:	d9f1      	bls.n	8002cda <RCCEx_PLLSAI2_Config+0xda>
 8002cf6:	e7db      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0xb0>
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
{
 8002cfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d00:	6806      	ldr	r6, [r0, #0]
 8002d02:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002d06:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d08:	d024      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d0a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002d0c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d10:	d02c      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002d12:	d802      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d14:	b1c1      	cbz	r1, 8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002d16:	2601      	movs	r6, #1
 8002d18:	e01c      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d1a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002d1e:	d00d      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d20:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002d24:	d1f7      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d26:	4a4d      	ldr	r2, [pc, #308]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d32:	430b      	orrs	r3, r1
 8002d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002d38:	2600      	movs	r6, #0
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d3c:	4a47      	ldr	r2, [pc, #284]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	68d3      	ldr	r3, [r2, #12]
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	60d3      	str	r3, [r2, #12]
      break;
 8002d46:	e7ee      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d48:	3004      	adds	r0, #4
 8002d4a:	f7ff fecb 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d4e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d0e8      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	04d8      	lsls	r0, r3, #19
 8002d58:	d506      	bpl.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d5a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d5c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002d60:	d074      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002d62:	d808      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d64:	b1a9      	cbz	r1, 8002d92 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002d66:	2601      	movs	r6, #1
 8002d68:	4635      	mov	r5, r6
 8002d6a:	e021      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	3020      	adds	r0, #32
 8002d70:	f7ff ff46 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 8002d74:	e7eb      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d76:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002d7c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002d80:	d1f1      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d82:	4635      	mov	r5, r6
 8002d84:	e009      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d86:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d88:	68d3      	ldr	r3, [r2, #12]
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	60d3      	str	r3, [r2, #12]
 8002d90:	e7f7      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d92:	1d20      	adds	r0, r4, #4
 8002d94:	f7ff fea6 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d98:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d15c      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002da2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002da6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	0399      	lsls	r1, r3, #14
 8002db4:	f140 814f 	bpl.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002db8:	4f28      	ldr	r7, [pc, #160]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dbc:	00da      	lsls	r2, r3, #3
 8002dbe:	f140 8176 	bpl.w	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002dca:	f8d9 3000 	ldr.w	r3, [r9]
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002dd6:	f7ff f839 	bl	8001e4c <HAL_GetTick>
 8002dda:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ddc:	f8d9 3000 	ldr.w	r3, [r9]
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	d53f      	bpl.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002de4:	2d00      	cmp	r5, #0
 8002de6:	d144      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002df0:	d015      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002df2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d011      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002e02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1e:	07d8      	lsls	r0, r3, #31
 8002e20:	d509      	bpl.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002e22:	f7ff f813 	bl	8001e4c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e2a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e30:	0799      	lsls	r1, r3, #30
 8002e32:	f140 8109 	bpl.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e48:	4635      	mov	r5, r6
 8002e4a:	e012      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f104 0020 	add.w	r0, r4, #32
 8002e52:	f7ff fed5 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 8002e56:	e79f      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002e58:	462e      	mov	r6, r5
 8002e5a:	e7a9      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fe fff2 	bl	8001e4c <HAL_GetTick>
 8002e68:	eba0 000a 	sub.w	r0, r0, sl
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9b5      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002e70:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002e72:	f1b8 0f00 	cmp.w	r8, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	07da      	lsls	r2, r3, #31
 8002e84:	d508      	bpl.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e86:	4990      	ldr	r1, [pc, #576]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002e8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e8e:	f022 0203 	bic.w	r2, r2, #3
 8002e92:	4302      	orrs	r2, r0
 8002e94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e98:	079f      	lsls	r7, r3, #30
 8002e9a:	d508      	bpl.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9c:	498a      	ldr	r1, [pc, #552]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ea0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ea4:	f022 020c 	bic.w	r2, r2, #12
 8002ea8:	4302      	orrs	r2, r0
 8002eaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eae:	075e      	lsls	r6, r3, #29
 8002eb0:	d508      	bpl.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb2:	4985      	ldr	r1, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002eb4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002eb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002eba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002ebe:	4302      	orrs	r2, r0
 8002ec0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec4:	0718      	lsls	r0, r3, #28
 8002ec6:	d508      	bpl.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ec8:	497f      	ldr	r1, [pc, #508]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002eca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002ecc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ed0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ed4:	4302      	orrs	r2, r0
 8002ed6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eda:	06d9      	lsls	r1, r3, #27
 8002edc:	d508      	bpl.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ede:	497a      	ldr	r1, [pc, #488]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ee0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002ee2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ee6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eea:	4302      	orrs	r2, r0
 8002eec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ef0:	069a      	lsls	r2, r3, #26
 8002ef2:	d508      	bpl.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef4:	4974      	ldr	r1, [pc, #464]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ef6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ef8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002efc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f00:	4302      	orrs	r2, r0
 8002f02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f06:	059f      	lsls	r7, r3, #22
 8002f08:	d508      	bpl.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0a:	496f      	ldr	r1, [pc, #444]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f0c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002f0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f12:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002f16:	4302      	orrs	r2, r0
 8002f18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f1c:	055e      	lsls	r6, r3, #21
 8002f1e:	d508      	bpl.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f20:	4969      	ldr	r1, [pc, #420]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f22:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002f24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f2c:	4302      	orrs	r2, r0
 8002f2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f32:	0658      	lsls	r0, r3, #25
 8002f34:	d508      	bpl.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f36:	4964      	ldr	r1, [pc, #400]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002f3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f42:	4302      	orrs	r2, r0
 8002f44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f48:	0619      	lsls	r1, r3, #24
 8002f4a:	d508      	bpl.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f4c:	495e      	ldr	r1, [pc, #376]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002f58:	4302      	orrs	r2, r0
 8002f5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5e:	05da      	lsls	r2, r3, #23
 8002f60:	d508      	bpl.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f62:	4959      	ldr	r1, [pc, #356]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f6a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002f6e:	4302      	orrs	r2, r0
 8002f70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f74:	049b      	lsls	r3, r3, #18
 8002f76:	d50f      	bpl.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f78:	4a53      	ldr	r2, [pc, #332]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f7a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002f7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f80:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f84:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f86:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f8e:	d164      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f90:	68d3      	ldr	r3, [r2, #12]
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	031f      	lsls	r7, r3, #12
 8002f9c:	d50f      	bpl.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f9e:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fa0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002fa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002fa6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002faa:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fb4:	d15c      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb6:	68d3      	ldr	r3, [r2, #12]
 8002fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	035e      	lsls	r6, r3, #13
 8002fc2:	d50f      	bpl.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fc4:	4a40      	ldr	r2, [pc, #256]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fc6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002fc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002fcc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002fd0:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fd2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fda:	d154      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fdc:	68d3      	ldr	r3, [r2, #12]
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	0458      	lsls	r0, r3, #17
 8002fe8:	d512      	bpl.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fea:	4937      	ldr	r1, [pc, #220]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fec:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002fee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ff2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ff6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ff8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003000:	d14c      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003002:	2102      	movs	r1, #2
 8003004:	1d20      	adds	r0, r4, #4
 8003006:	f7ff fd6d 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800300a:	2800      	cmp	r0, #0
 800300c:	bf18      	it	ne
 800300e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	0411      	lsls	r1, r2, #16
 8003014:	d508      	bpl.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003018:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800301a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800301e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003022:	4303      	orrs	r3, r0
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003028:	03d3      	lsls	r3, r2, #15
 800302a:	d509      	bpl.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800302e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003032:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800303a:	430b      	orrs	r3, r1
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003040:	4628      	mov	r0, r5
 8003042:	b002      	add	sp, #8
 8003044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe ff00 	bl	8001e4c <HAL_GetTick>
 800304c:	1b40      	subs	r0, r0, r5
 800304e:	4548      	cmp	r0, r9
 8003050:	f67f aeec 	bls.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003054:	e70c      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003056:	4635      	mov	r5, r6
 8003058:	e712      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800305a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800305e:	d19b      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003060:	2101      	movs	r1, #1
 8003062:	1d20      	adds	r0, r4, #4
 8003064:	f7ff fd3e 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003068:	2800      	cmp	r0, #0
 800306a:	bf18      	it	ne
 800306c:	4605      	movne	r5, r0
 800306e:	e793      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003070:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003074:	d1a3      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003076:	2101      	movs	r1, #1
 8003078:	1d20      	adds	r0, r4, #4
 800307a:	f7ff fd33 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800307e:	2800      	cmp	r0, #0
 8003080:	bf18      	it	ne
 8003082:	4605      	movne	r5, r0
 8003084:	e79b      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003086:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800308a:	d1ab      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800308c:	2101      	movs	r1, #1
 800308e:	1d20      	adds	r0, r4, #4
 8003090:	f7ff fd28 	bl	8002ae4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003094:	2800      	cmp	r0, #0
 8003096:	bf18      	it	ne
 8003098:	4605      	movne	r5, r0
 800309a:	e7a3      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800309c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80030a0:	d1b6      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030a2:	2102      	movs	r1, #2
 80030a4:	f104 0020 	add.w	r0, r4, #32
 80030a8:	f7ff fdaa 	bl	8002c00 <RCCEx_PLLSAI2_Config>
 80030ac:	e7ad      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80030c0:	f04f 0801 	mov.w	r8, #1
 80030c4:	e67f      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000

080030cc <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d6:	6842      	ldr	r2, [r0, #4]
 80030d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80030dc:	d10a      	bne.n	80030f4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80030de:	6882      	ldr	r2, [r0, #8]
 80030e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80030e4:	d002      	beq.n	80030ec <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80030ea:	d103      	bne.n	80030f4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80030f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80030fa:	d107      	bne.n	800310c <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310c:	2301      	movs	r3, #1
 800310e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003112:	2300      	movs	r3, #0
 8003114:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8003118:	2003      	movs	r0, #3
 800311a:	4770      	bx	lr

0800311c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	460d      	mov	r5, r1
 8003122:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	6898      	ldr	r0, [r3, #8]
 8003128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800312c:	d100      	bne.n	8003130 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003130:	1c6a      	adds	r2, r5, #1
 8003132:	d0f8      	beq.n	8003126 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003134:	f7fe fe8a 	bl	8001e4c <HAL_GetTick>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	4285      	cmp	r5, r0
 800313c:	d8f2      	bhi.n	8003124 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800313e:	4620      	mov	r0, r4
}
 8003140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003144:	f7ff bfc2 	b.w	80030cc <SPI_WaitFifoStateUntilTimeout.part.1>

08003148 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	4605      	mov	r5, r0
 800314c:	460c      	mov	r4, r1
 800314e:	4616      	mov	r6, r2
 8003150:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8003152:	6829      	ldr	r1, [r5, #0]
 8003154:	6888      	ldr	r0, [r1, #8]
 8003156:	4020      	ands	r0, r4
 8003158:	d100      	bne.n	800315c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 800315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800315c:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003160:	bf08      	it	eq
 8003162:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8003164:	1c73      	adds	r3, r6, #1
 8003166:	d0f5      	beq.n	8003154 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003168:	f7fe fe70 	bl	8001e4c <HAL_GetTick>
 800316c:	1bc0      	subs	r0, r0, r7
 800316e:	4286      	cmp	r6, r0
 8003170:	d8ef      	bhi.n	8003152 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8003172:	4628      	mov	r0, r5
}
 8003174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003178:	f7ff bfa8 	b.w	80030cc <SPI_WaitFifoStateUntilTimeout.part.1>

0800317c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800317e:	4613      	mov	r3, r2
{
 8003180:	460d      	mov	r5, r1
 8003182:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003184:	460a      	mov	r2, r1
 8003186:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800318a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800318c:	f7ff ffdc 	bl	8003148 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8003190:	b128      	cbz	r0, 800319e <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003192:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003194:	f043 0320 	orr.w	r3, r3, #32
 8003198:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800319a:	2003      	movs	r0, #3
 800319c:	e00f      	b.n	80031be <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	4632      	mov	r2, r6
 80031a0:	4629      	mov	r1, r5
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff ffba 	bl	800311c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d1f2      	bne.n	8003192 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031ac:	4633      	mov	r3, r6
 80031ae:	462a      	mov	r2, r5
 80031b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ffc7 	bl	8003148 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d1e9      	bne.n	8003192 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80031be:	bd70      	pop	{r4, r5, r6, pc}

080031c0 <HAL_SPI_MspInit>:
 80031c0:	4770      	bx	lr

080031c2 <HAL_SPI_Init>:
{
 80031c2:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80031c4:	4604      	mov	r4, r0
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d04a      	beq.n	8003260 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ce:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80031d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031d6:	b91b      	cbnz	r3, 80031e0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80031d8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80031e0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80031e2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80031e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80031e8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ea:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80031f4:	600b      	str	r3, [r1, #0]
 80031f6:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031fa:	d92e      	bls.n	800325a <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031fc:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031fe:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003202:	bf18      	it	ne
 8003204:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003206:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003208:	b92b      	cbnz	r3, 8003216 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800320e:	bf8c      	ite	hi
 8003210:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003212:	2301      	movls	r3, #1
 8003214:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003216:	68a6      	ldr	r6, [r4, #8]
 8003218:	6863      	ldr	r3, [r4, #4]
 800321a:	69a5      	ldr	r5, [r4, #24]
 800321c:	4333      	orrs	r3, r6
 800321e:	6926      	ldr	r6, [r4, #16]
 8003220:	4333      	orrs	r3, r6
 8003222:	6966      	ldr	r6, [r4, #20]
 8003224:	4333      	orrs	r3, r6
 8003226:	69e6      	ldr	r6, [r4, #28]
 8003228:	4333      	orrs	r3, r6
 800322a:	6a26      	ldr	r6, [r4, #32]
 800322c:	4333      	orrs	r3, r6
 800322e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003230:	4333      	orrs	r3, r6
 8003232:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8003236:	4333      	orrs	r3, r6
 8003238:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800323a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800323c:	431a      	orrs	r2, r3
 800323e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003240:	0c2d      	lsrs	r5, r5, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	f005 0504 	and.w	r5, r5, #4
 8003248:	432a      	orrs	r2, r5
 800324a:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 800324c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800324e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003250:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003254:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8003258:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800325a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800325e:	e7d0      	b.n	8003202 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <HAL_SPI_TransmitReceive>:
{
 8003264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003268:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800326a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800326e:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8003270:	2b01      	cmp	r3, #1
{
 8003272:	4604      	mov	r4, r0
 8003274:	460d      	mov	r5, r1
 8003276:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003278:	f000 8115 	beq.w	80034a6 <HAL_SPI_TransmitReceive+0x242>
 800327c:	2301      	movs	r3, #1
 800327e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003282:	f7fe fde3 	bl	8001e4c <HAL_GetTick>
  tmp_state           = hspi->State;
 8003286:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800328a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800328c:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003290:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003292:	d00a      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x46>
 8003294:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003298:	f040 8103 	bne.w	80034a2 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800329c:	68a0      	ldr	r0, [r4, #8]
 800329e:	2800      	cmp	r0, #0
 80032a0:	f040 80ff 	bne.w	80034a2 <HAL_SPI_TransmitReceive+0x23e>
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	f040 80fc 	bne.w	80034a2 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	d049      	beq.n	8003342 <HAL_SPI_TransmitReceive+0xde>
 80032ae:	f1b9 0f00 	cmp.w	r9, #0
 80032b2:	d046      	beq.n	8003342 <HAL_SPI_TransmitReceive+0xde>
 80032b4:	2e00      	cmp	r6, #0
 80032b6:	d044      	beq.n	8003342 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032b8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032bc:	68e2      	ldr	r2, [r4, #12]
 80032be:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032c0:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032c4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032c6:	bf1c      	itt	ne
 80032c8:	2305      	movne	r3, #5
 80032ca:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032d2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 80032d6:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80032da:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80032dc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032de:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80032e0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032e4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032e6:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032e8:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032ea:	d801      	bhi.n	80032f0 <HAL_SPI_TransmitReceive+0x8c>
 80032ec:	2e01      	cmp	r6, #1
 80032ee:	d92a      	bls.n	8003346 <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f4:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80032fa:	bf5e      	ittt	pl
 80032fc:	6803      	ldrpl	r3, [r0, #0]
 80032fe:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003302:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003304:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8003308:	d956      	bls.n	80033b8 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330a:	b109      	cbz	r1, 8003310 <HAL_SPI_TransmitReceive+0xac>
 800330c:	2e01      	cmp	r6, #1
 800330e:	d107      	bne.n	8003320 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003310:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003314:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8003316:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800331a:	3b01      	subs	r3, #1
 800331c:	b29b      	uxth	r3, r3
 800331e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003320:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003322:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	b98b      	cbnz	r3, 800334c <HAL_SPI_TransmitReceive+0xe8>
 8003328:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800332c:	b29b      	uxth	r3, r3
 800332e:	b96b      	cbnz	r3, 800334c <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003330:	4642      	mov	r2, r8
 8003332:	4639      	mov	r1, r7
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff ff21 	bl	800317c <SPI_EndRxTxTransaction>
 800333a:	2800      	cmp	r0, #0
 800333c:	d034      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333e:	2320      	movs	r3, #32
 8003340:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003342:	2001      	movs	r0, #1
 8003344:	e030      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334a:	e7d3      	b.n	80032f4 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6893      	ldr	r3, [r2, #8]
 8003350:	0799      	lsls	r1, r3, #30
 8003352:	d50d      	bpl.n	8003370 <HAL_SPI_TransmitReceive+0x10c>
 8003354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	b153      	cbz	r3, 8003370 <HAL_SPI_TransmitReceive+0x10c>
 800335a:	b14d      	cbz	r5, 8003370 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800335e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003362:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003366:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003368:	3b01      	subs	r3, #1
 800336a:	b29b      	uxth	r3, r3
 800336c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800336e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	6893      	ldr	r3, [r2, #8]
 8003372:	07db      	lsls	r3, r3, #31
 8003374:	d50f      	bpl.n	8003396 <HAL_SPI_TransmitReceive+0x132>
 8003376:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800337a:	b29b      	uxth	r3, r3
 800337c:	b15b      	cbz	r3, 8003396 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800337e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003386:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003388:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800338c:	3b01      	subs	r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003394:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003396:	f7fe fd59 	bl	8001e4c <HAL_GetTick>
 800339a:	eba0 0008 	sub.w	r0, r0, r8
 800339e:	4287      	cmp	r7, r0
 80033a0:	d8bf      	bhi.n	8003322 <HAL_SPI_TransmitReceive+0xbe>
 80033a2:	1c7e      	adds	r6, r7, #1
 80033a4:	d0bd      	beq.n	8003322 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 80033a6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033ae:	2300      	movs	r3, #0
 80033b0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80033b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b8:	b109      	cbz	r1, 80033be <HAL_SPI_TransmitReceive+0x15a>
 80033ba:	2e01      	cmp	r6, #1
 80033bc:	d10b      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80033be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d951      	bls.n	800346a <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80033ca:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 80033cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ce:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033d0:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80033d6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	b923      	cbnz	r3, 80033e8 <HAL_SPI_TransmitReceive+0x184>
 80033de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0a3      	beq.n	8003330 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	6893      	ldr	r3, [r2, #8]
 80033ec:	0798      	lsls	r0, r3, #30
 80033ee:	d511      	bpl.n	8003414 <HAL_SPI_TransmitReceive+0x1b0>
 80033f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b173      	cbz	r3, 8003414 <HAL_SPI_TransmitReceive+0x1b0>
 80033f6:	b16d      	cbz	r5, 8003414 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80033f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003400:	d93b      	bls.n	800347a <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003402:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003406:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800340a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800340c:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800340e:	b29b      	uxth	r3, r3
 8003410:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003412:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	6893      	ldr	r3, [r2, #8]
 8003418:	07d9      	lsls	r1, r3, #31
 800341a:	d51d      	bpl.n	8003458 <HAL_SPI_TransmitReceive+0x1f4>
 800341c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003420:	b29b      	uxth	r3, r3
 8003422:	b1cb      	cbz	r3, 8003458 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8003424:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800342e:	d92c      	bls.n	800348a <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003430:	68d1      	ldr	r1, [r2, #12]
 8003432:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003436:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003438:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800343c:	3b02      	subs	r3, #2
 800343e:	b29b      	uxth	r3, r3
 8003440:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003444:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d803      	bhi.n	8003456 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344e:	6853      	ldr	r3, [r2, #4]
 8003450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003454:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003456:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003458:	f7fe fcf8 	bl	8001e4c <HAL_GetTick>
 800345c:	eba0 0008 	sub.w	r0, r0, r8
 8003460:	4287      	cmp	r7, r0
 8003462:	d8b9      	bhi.n	80033d8 <HAL_SPI_TransmitReceive+0x174>
 8003464:	1c7b      	adds	r3, r7, #1
 8003466:	d0b7      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0x174>
 8003468:	e79d      	b.n	80033a6 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800346a:	782b      	ldrb	r3, [r5, #0]
 800346c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 800346e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003470:	3301      	adds	r3, #1
 8003472:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003474:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003476:	3b01      	subs	r3, #1
 8003478:	e7ab      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800347e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003480:	3301      	adds	r3, #1
 8003482:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003484:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003486:	3b01      	subs	r3, #1
 8003488:	e7c1      	b.n	800340e <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800348a:	7b12      	ldrb	r2, [r2, #12]
 800348c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800348e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003490:	3301      	adds	r3, #1
 8003492:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003494:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003498:	3b01      	subs	r3, #1
 800349a:	b29b      	uxth	r3, r3
 800349c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80034a0:	e7d9      	b.n	8003456 <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 80034a2:	2002      	movs	r0, #2
 80034a4:	e780      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 80034a6:	2002      	movs	r0, #2
}
 80034a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080034ac <HAL_SPI_GetState>:
  return hspi->State;
 80034ac:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034b8:	6803      	ldr	r3, [r0, #0]
 80034ba:	6a19      	ldr	r1, [r3, #32]
 80034bc:	f241 1211 	movw	r2, #4369	; 0x1111
 80034c0:	4211      	tst	r1, r2
 80034c2:	d108      	bne.n	80034d6 <HAL_TIM_Base_Stop+0x24>
 80034c4:	6a19      	ldr	r1, [r3, #32]
 80034c6:	f240 4244 	movw	r2, #1092	; 0x444
 80034ca:	4211      	tst	r1, r2
 80034cc:	bf02      	ittt	eq
 80034ce:	681a      	ldreq	r2, [r3, #0]
 80034d0:	f022 0201 	biceq.w	r2, r2, #1
 80034d4:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80034dc:	2000      	movs	r0, #0
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_TIM_Base_Start_IT+0x28>)
 80034ee:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	2a06      	cmp	r2, #6
 80034f2:	d006      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x22>
 80034f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80034f8:	bf1e      	ittt	ne
 80034fa:	681a      	ldrne	r2, [r3, #0]
 80034fc:	f042 0201 	orrne.w	r2, r2, #1
 8003500:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003502:	2000      	movs	r0, #0
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_OC_DelayElapsedCallback>:
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_IC_CaptureCallback>:
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003510:	4770      	bx	lr

08003512 <HAL_TIM_TriggerCallback>:
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	0791      	lsls	r1, r2, #30
{
 800351a:	b510      	push	{r4, lr}
 800351c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800351e:	d50f      	bpl.n	8003540 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	0792      	lsls	r2, r2, #30
 8003524:	d50c      	bpl.n	8003540 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003526:	f06f 0202 	mvn.w	r2, #2
 800352a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003530:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003534:	f000 8085 	beq.w	8003642 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003538:	f7ff ffe9 	bl	800350e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	2300      	movs	r3, #0
 800353e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	0752      	lsls	r2, r2, #29
 8003546:	d510      	bpl.n	800356a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	0750      	lsls	r0, r2, #29
 800354c:	d50d      	bpl.n	800356a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800354e:	f06f 0204 	mvn.w	r2, #4
 8003552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003554:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003556:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	d075      	beq.n	800364e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	f7ff ffd4 	bl	800350e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	2300      	movs	r3, #0
 8003568:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	0711      	lsls	r1, r2, #28
 8003570:	d50f      	bpl.n	8003592 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	0712      	lsls	r2, r2, #28
 8003576:	d50c      	bpl.n	8003592 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	f06f 0208 	mvn.w	r2, #8
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800357e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003580:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003582:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003584:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	d067      	beq.n	800365a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800358a:	f7ff ffc0 	bl	800350e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	2300      	movs	r3, #0
 8003590:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	06d0      	lsls	r0, r2, #27
 8003598:	d510      	bpl.n	80035bc <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	06d1      	lsls	r1, r2, #27
 800359e:	d50d      	bpl.n	80035bc <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035aa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ae:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b2:	d058      	beq.n	8003666 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80035b4:	f7ff ffab 	bl	800350e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b8:	2300      	movs	r3, #0
 80035ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	07d2      	lsls	r2, r2, #31
 80035c2:	d508      	bpl.n	80035d6 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	07d0      	lsls	r0, r2, #31
 80035c8:	d505      	bpl.n	80035d6 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ca:	f06f 0201 	mvn.w	r2, #1
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d0:	4620      	mov	r0, r4
 80035d2:	f003 fc1b 	bl	8006e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	0611      	lsls	r1, r2, #24
 80035dc:	d508      	bpl.n	80035f0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	0612      	lsls	r2, r2, #24
 80035e2:	d505      	bpl.n	80035f0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 f90d 	bl	800380a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	05d0      	lsls	r0, r2, #23
 80035f6:	d508      	bpl.n	800360a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	0611      	lsls	r1, r2, #24
 80035fc:	d505      	bpl.n	800360a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003604:	4620      	mov	r0, r4
 8003606:	f000 f901 	bl	800380c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	0652      	lsls	r2, r2, #25
 8003610:	d508      	bpl.n	8003624 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	0650      	lsls	r0, r2, #25
 8003616:	d505      	bpl.n	8003624 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800361e:	4620      	mov	r0, r4
 8003620:	f7ff ff77 	bl	8003512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	0691      	lsls	r1, r2, #26
 800362a:	d522      	bpl.n	8003672 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	0692      	lsls	r2, r2, #26
 8003630:	d51f      	bpl.n	8003672 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003632:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003636:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003638:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800363e:	f000 b8e3 	b.w	8003808 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	f7ff ff63 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003646:	4620      	mov	r0, r4
 8003648:	f7ff ff62 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
 800364c:	e776      	b.n	800353c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	f7ff ff5d 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff ff5c 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
 8003658:	e785      	b.n	8003566 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	f7ff ff57 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff ff56 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
 8003664:	e793      	b.n	800358e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	f7ff ff51 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366a:	4620      	mov	r0, r4
 800366c:	f7ff ff50 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
 8003670:	e7a2      	b.n	80035b8 <HAL_TIM_IRQHandler+0xa4>
 8003672:	bd10      	pop	{r4, pc}

08003674 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003674:	4a30      	ldr	r2, [pc, #192]	; (8003738 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003676:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	4290      	cmp	r0, r2
 800367a:	d012      	beq.n	80036a2 <TIM_Base_SetConfig+0x2e>
 800367c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0x2e>
 8003682:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003686:	4290      	cmp	r0, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x2e>
 800368a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800368e:	4290      	cmp	r0, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x2e>
 8003692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003696:	4290      	cmp	r0, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x2e>
 800369a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800369e:	4290      	cmp	r0, r2
 80036a0:	d119      	bne.n	80036d6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80036a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036a8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	4a23      	ldr	r2, [pc, #140]	; (8003738 <TIM_Base_SetConfig+0xc4>)
 80036ac:	4290      	cmp	r0, r2
 80036ae:	d01d      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036b4:	d01a      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ba:	4290      	cmp	r0, r2
 80036bc:	d016      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d012      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ca:	4290      	cmp	r0, r2
 80036cc:	d00e      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036ce:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80036d2:	4290      	cmp	r0, r2
 80036d4:	d00a      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036d6:	4a19      	ldr	r2, [pc, #100]	; (800373c <TIM_Base_SetConfig+0xc8>)
 80036d8:	4290      	cmp	r0, r2
 80036da:	d007      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036e0:	4290      	cmp	r0, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0x78>
 80036e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036e8:	4290      	cmp	r0, r2
 80036ea:	d103      	bne.n	80036f4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ec:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	694a      	ldr	r2, [r1, #20]
 80036f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80036fc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fe:	688b      	ldr	r3, [r1, #8]
 8003700:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003702:	680b      	ldr	r3, [r1, #0]
 8003704:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <TIM_Base_SetConfig+0xc4>)
 8003708:	4298      	cmp	r0, r3
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0xb8>
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	4298      	cmp	r0, r3
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0xb8>
 8003714:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003718:	4298      	cmp	r0, r3
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0xb8>
 800371c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003720:	4298      	cmp	r0, r3
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0xb8>
 8003724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003728:	4298      	cmp	r0, r3
 800372a:	d101      	bne.n	8003730 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372c:	690b      	ldr	r3, [r1, #16]
 800372e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	2301      	movs	r3, #1
 8003732:	6143      	str	r3, [r0, #20]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014000 	.word	0x40014000

08003740 <HAL_TIM_Base_Init>:
{
 8003740:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003742:	4604      	mov	r4, r0
 8003744:	b1a0      	cbz	r0, 8003770 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003746:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800374a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800374e:	b91b      	cbnz	r3, 8003758 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003750:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003754:	f003 ff7c 	bl	8007650 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1d21      	adds	r1, r4, #4
 8003762:	f7ff ff87 	bl	8003674 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003766:	2301      	movs	r3, #1
 8003768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800376c:	2000      	movs	r0, #0
 800376e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003770:	2001      	movs	r0, #1
}
 8003772:	bd10      	pop	{r4, pc}

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003774:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
{
 800377a:	b570      	push	{r4, r5, r6, lr}
 800377c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003780:	d039      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003782:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003786:	4d1d      	ldr	r5, [pc, #116]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8003788:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800378a:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800378c:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800378e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8003792:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003794:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003796:	d002      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003798:	4e19      	ldr	r6, [pc, #100]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800379a:	42b3      	cmp	r3, r6
 800379c:	d103      	bne.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800379e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037a4:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a6:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80037b0:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	d015      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d012      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00f      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00b      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d007      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037d0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80037d8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80037dc:	4293      	cmp	r3, r2
 80037de:	d104      	bne.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	2300      	movs	r3, #0
 80037f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80037f6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40013400 	.word	0x40013400
 8003804:	40000400 	.word	0x40000400

08003808 <HAL_TIMEx_CommutCallback>:
 8003808:	4770      	bx	lr

0800380a <HAL_TIMEx_BreakCallback>:
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800380c:	4770      	bx	lr
	...

08003810 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003810:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003812:	69c1      	ldr	r1, [r0, #28]
{
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	6883      	ldr	r3, [r0, #8]
 800381a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800381e:	4303      	orrs	r3, r0
 8003820:	6960      	ldr	r0, [r4, #20]
 8003822:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003824:	48ba      	ldr	r0, [pc, #744]	; (8003b10 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003826:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003828:	4028      	ands	r0, r5
 800382a:	4303      	orrs	r3, r0
 800382c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382e:	6853      	ldr	r3, [r2, #4]
 8003830:	68e0      	ldr	r0, [r4, #12]
 8003832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003836:	4303      	orrs	r3, r0
 8003838:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800383a:	4bb6      	ldr	r3, [pc, #728]	; (8003b14 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800383e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003840:	bf1c      	itt	ne
 8003842:	6a23      	ldrne	r3, [r4, #32]
 8003844:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003846:	6893      	ldr	r3, [r2, #8]
 8003848:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800384c:	4303      	orrs	r3, r0
 800384e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003850:	4bb1      	ldr	r3, [pc, #708]	; (8003b18 <UART_SetConfig+0x308>)
 8003852:	429a      	cmp	r2, r3
 8003854:	d119      	bne.n	800388a <UART_SetConfig+0x7a>
 8003856:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800385a:	4ab0      	ldr	r2, [pc, #704]	; (8003b1c <UART_SetConfig+0x30c>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003864:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	f040 8138 	bne.w	8003ade <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800386e:	2b08      	cmp	r3, #8
 8003870:	f200 808f 	bhi.w	8003992 <UART_SetConfig+0x182>
 8003874:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003878:	00ca011a 	.word	0x00ca011a
 800387c:	008d00f9 	.word	0x008d00f9
 8003880:	008d0114 	.word	0x008d0114
 8003884:	008d008d 	.word	0x008d008d
 8003888:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800388a:	4ba5      	ldr	r3, [pc, #660]	; (8003b20 <UART_SetConfig+0x310>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <UART_SetConfig+0x90>
 8003890:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003894:	4aa3      	ldr	r2, [pc, #652]	; (8003b24 <UART_SetConfig+0x314>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	e7e1      	b.n	8003864 <UART_SetConfig+0x54>
 80038a0:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <UART_SetConfig+0x318>)
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d123      	bne.n	80038ee <UART_SetConfig+0xde>
 80038a6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	f000 80f1 	beq.w	8003a9a <UART_SetConfig+0x28a>
 80038b8:	d80b      	bhi.n	80038d2 <UART_SetConfig+0xc2>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80f3 	beq.w	8003aa6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 80038c4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80038c8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038cc:	f000 80f8 	beq.w	8003ac0 <UART_SetConfig+0x2b0>
 80038d0:	e0a8      	b.n	8003a24 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	f000 80c6 	beq.w	8003a64 <UART_SetConfig+0x254>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d1f1      	bne.n	80038c0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80038e0:	f040 80b8 	bne.w	8003a54 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038e4:	6860      	ldr	r0, [r4, #4]
 80038e6:	0843      	lsrs	r3, r0, #1
 80038e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80038ec:	e0c3      	b.n	8003a76 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ee:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <UART_SetConfig+0x31c>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d11e      	bne.n	8003932 <UART_SetConfig+0x122>
 80038f4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	f000 80bb 	beq.w	8003a7c <UART_SetConfig+0x26c>
 8003906:	d80a      	bhi.n	800391e <UART_SetConfig+0x10e>
 8003908:	b97b      	cbnz	r3, 800392a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800390a:	4b82      	ldr	r3, [pc, #520]	; (8003b14 <UART_SetConfig+0x304>)
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 80ca 	bne.w	8003aa6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003912:	f7ff f895 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
        break;
 8003916:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003918:	bbb0      	cbnz	r0, 8003988 <UART_SetConfig+0x178>
 800391a:	4602      	mov	r2, r0
 800391c:	e03a      	b.n	8003994 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	f000 809d 	beq.w	8003a5e <UART_SetConfig+0x24e>
 8003924:	2bc0      	cmp	r3, #192	; 0xc0
 8003926:	f000 80b0 	beq.w	8003a8a <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <UART_SetConfig+0x304>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d1c7      	bne.n	80038c0 <UART_SetConfig+0xb0>
 8003930:	e02f      	b.n	8003992 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <UART_SetConfig+0x320>)
 8003934:	429a      	cmp	r2, r3
 8003936:	d111      	bne.n	800395c <UART_SetConfig+0x14c>
 8003938:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003948:	f000 8098 	beq.w	8003a7c <UART_SetConfig+0x26c>
 800394c:	d9dc      	bls.n	8003908 <UART_SetConfig+0xf8>
 800394e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003952:	f000 8084 	beq.w	8003a5e <UART_SetConfig+0x24e>
 8003956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395a:	e7e4      	b.n	8003926 <UART_SetConfig+0x116>
 800395c:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <UART_SetConfig+0x304>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d1ae      	bne.n	80038c0 <UART_SetConfig+0xb0>
 8003962:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	f000 8083 	beq.w	8003a7c <UART_SetConfig+0x26c>
 8003976:	d9c7      	bls.n	8003908 <UART_SetConfig+0xf8>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d06f      	beq.n	8003a5e <UART_SetConfig+0x24e>
 800397e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003982:	e7d0      	b.n	8003926 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003984:	486b      	ldr	r0, [pc, #428]	; (8003b34 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003986:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800398e:	4281      	cmp	r1, r0
 8003990:	d905      	bls.n	800399e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003992:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003998:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800399a:	4610      	mov	r0, r2
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800399e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80039a2:	d8f6      	bhi.n	8003992 <UART_SetConfig+0x182>
        switch (clocksource)
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d82e      	bhi.n	8003a06 <UART_SetConfig+0x1f6>
 80039a8:	e8df f003 	tbb	[pc, r3]
 80039ac:	2d1c2d05 	.word	0x2d1c2d05
 80039b0:	2d2d2d24 	.word	0x2d2d2d24
 80039b4:	27          	.byte	0x27
 80039b5:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7ff f843 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039c0:	0856      	lsrs	r6, r2, #1
 80039c2:	2700      	movs	r7, #0
 80039c4:	fbe1 6700 	umlal	r6, r7, r1, r0
 80039c8:	2300      	movs	r3, #0
 80039ca:	4630      	mov	r0, r6
 80039cc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80039ce:	f7fd f917 	bl	8000c00 <__aeabi_uldivmod>
            break;
 80039d2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039d4:	4b58      	ldr	r3, [pc, #352]	; (8003b38 <UART_SetConfig+0x328>)
 80039d6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80039da:	4299      	cmp	r1, r3
 80039dc:	d8d9      	bhi.n	8003992 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	60d8      	str	r0, [r3, #12]
 80039e2:	e7d7      	b.n	8003994 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80039e4:	4855      	ldr	r0, [pc, #340]	; (8003b3c <UART_SetConfig+0x32c>)
 80039e6:	0855      	lsrs	r5, r2, #1
 80039e8:	2300      	movs	r3, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80039ee:	f141 0100 	adc.w	r1, r1, #0
 80039f2:	e7ec      	b.n	80039ce <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 80039f4:	f7fe fcb4 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 80039f8:	e7df      	b.n	80039ba <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80039fa:	0850      	lsrs	r0, r2, #1
 80039fc:	2100      	movs	r1, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003a04:	e7f3      	b.n	80039ee <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003a06:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e7e3      	b.n	80039d4 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff f82a 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8003a10:	e04e      	b.n	8003ab0 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a12:	f7ff f815 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a16:	6862      	ldr	r2, [r4, #4]
 8003a18:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a20:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a22:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a24:	f1a3 0010 	sub.w	r0, r3, #16
 8003a28:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003a2c:	4288      	cmp	r0, r1
 8003a2e:	d8b0      	bhi.n	8003992 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003a30:	6821      	ldr	r1, [r4, #0]
 8003a32:	60cb      	str	r3, [r1, #12]
 8003a34:	e7ae      	b.n	8003994 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a36:	f7ff f815 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8003a3a:	e7ec      	b.n	8003a16 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a3c:	6860      	ldr	r0, [r4, #4]
 8003a3e:	0843      	lsrs	r3, r0, #1
 8003a40:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003a44:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a48:	fbb3 f3f0 	udiv	r3, r3, r0
 8003a4c:	e7e8      	b.n	8003a20 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7fe fc87 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003a52:	e7e0      	b.n	8003a16 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a54:	6860      	ldr	r0, [r4, #4]
 8003a56:	0843      	lsrs	r3, r0, #1
 8003a58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a5c:	e7f4      	b.n	8003a48 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <UART_SetConfig+0x304>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d08f      	beq.n	8003984 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003a68:	d1e8      	bne.n	8003a3c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a6a:	6860      	ldr	r0, [r4, #4]
 8003a6c:	0843      	lsrs	r3, r0, #1
 8003a6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003a72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a76:	fbb3 f3f0 	udiv	r3, r3, r0
 8003a7a:	e01f      	b.n	8003abc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <UART_SetConfig+0x304>)
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d10b      	bne.n	8003a9a <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003a82:	f7fe fc6d 	bl	8002360 <HAL_RCC_GetSysClockFreq>
        break;
 8003a86:	2304      	movs	r3, #4
 8003a88:	e746      	b.n	8003918 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <UART_SetConfig+0x304>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f47f af25 	bne.w	80038dc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003a92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a96:	2308      	movs	r3, #8
 8003a98:	e776      	b.n	8003988 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003a9e:	d1d6      	bne.n	8003a4e <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa0:	f7fe fc5e 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8003aa4:	e004      	b.n	8003ab0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003aaa:	d1b2      	bne.n	8003a12 <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe ffc8 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	084a      	lsrs	r2, r1, #1
 8003ab4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003abc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003abe:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac0:	f1a3 0010 	sub.w	r0, r3, #16
 8003ac4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003ac8:	4288      	cmp	r0, r1
 8003aca:	f63f af62 	bhi.w	8003992 <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ace:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003ad2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	60c3      	str	r3, [r0, #12]
 8003adc:	e75a      	b.n	8003994 <UART_SetConfig+0x184>
    switch (clocksource)
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	f63f af57 	bhi.w	8003992 <UART_SetConfig+0x182>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x2dc>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003a13 	.word	0x08003a13
 8003af0:	08003a37 	.word	0x08003a37
 8003af4:	08003a3d 	.word	0x08003a3d
 8003af8:	08003993 	.word	0x08003993
 8003afc:	08003a4f 	.word	0x08003a4f
 8003b00:	08003993 	.word	0x08003993
 8003b04:	08003993 	.word	0x08003993
 8003b08:	08003993 	.word	0x08003993
 8003b0c:	08003a55 	.word	0x08003a55
 8003b10:	efff69f3 	.word	0xefff69f3
 8003b14:	40008000 	.word	0x40008000
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	0800cf13 	.word	0x0800cf13
 8003b20:	40004400 	.word	0x40004400
 8003b24:	0800cf17 	.word	0x0800cf17
 8003b28:	40004800 	.word	0x40004800
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	40005000 	.word	0x40005000
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	000ffcff 	.word	0x000ffcff
 8003b3c:	f4240000 	.word	0xf4240000

08003b40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b42:	07da      	lsls	r2, r3, #31
{
 8003b44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b46:	d506      	bpl.n	8003b56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b48:	6801      	ldr	r1, [r0, #0]
 8003b4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003b4c:	684a      	ldr	r2, [r1, #4]
 8003b4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003b52:	4322      	orrs	r2, r4
 8003b54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b56:	079c      	lsls	r4, r3, #30
 8003b58:	d506      	bpl.n	8003b68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5a:	6801      	ldr	r1, [r0, #0]
 8003b5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003b5e:	684a      	ldr	r2, [r1, #4]
 8003b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b64:	4322      	orrs	r2, r4
 8003b66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b68:	0759      	lsls	r1, r3, #29
 8003b6a:	d506      	bpl.n	8003b7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b6c:	6801      	ldr	r1, [r0, #0]
 8003b6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003b70:	684a      	ldr	r2, [r1, #4]
 8003b72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b76:	4322      	orrs	r2, r4
 8003b78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b7a:	071a      	lsls	r2, r3, #28
 8003b7c:	d506      	bpl.n	8003b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b7e:	6801      	ldr	r1, [r0, #0]
 8003b80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003b82:	684a      	ldr	r2, [r1, #4]
 8003b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b88:	4322      	orrs	r2, r4
 8003b8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b8c:	06dc      	lsls	r4, r3, #27
 8003b8e:	d506      	bpl.n	8003b9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b90:	6801      	ldr	r1, [r0, #0]
 8003b92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003b94:	688a      	ldr	r2, [r1, #8]
 8003b96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b9a:	4322      	orrs	r2, r4
 8003b9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b9e:	0699      	lsls	r1, r3, #26
 8003ba0:	d506      	bpl.n	8003bb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ba2:	6801      	ldr	r1, [r0, #0]
 8003ba4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003ba6:	688a      	ldr	r2, [r1, #8]
 8003ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bac:	4322      	orrs	r2, r4
 8003bae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bb0:	065a      	lsls	r2, r3, #25
 8003bb2:	d50f      	bpl.n	8003bd4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb4:	6801      	ldr	r1, [r0, #0]
 8003bb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003bb8:	684a      	ldr	r2, [r1, #4]
 8003bba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003bbe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc6:	d105      	bne.n	8003bd4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc8:	684a      	ldr	r2, [r1, #4]
 8003bca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003bcc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003bd0:	4322      	orrs	r2, r4
 8003bd2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	d506      	bpl.n	8003be6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd8:	6802      	ldr	r2, [r0, #0]
 8003bda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003bdc:	6853      	ldr	r3, [r2, #4]
 8003bde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6053      	str	r3, [r2, #4]
 8003be6:	bd10      	pop	{r4, pc}

08003be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	9d06      	ldr	r5, [sp, #24]
 8003bee:	4604      	mov	r4, r0
 8003bf0:	460f      	mov	r7, r1
 8003bf2:	4616      	mov	r6, r2
 8003bf4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf6:	6821      	ldr	r1, [r4, #0]
 8003bf8:	69ca      	ldr	r2, [r1, #28]
 8003bfa:	ea37 0302 	bics.w	r3, r7, r2
 8003bfe:	bf0c      	ite	eq
 8003c00:	2201      	moveq	r2, #1
 8003c02:	2200      	movne	r2, #0
 8003c04:	42b2      	cmp	r2, r6
 8003c06:	d002      	beq.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2000      	movs	r0, #0
}
 8003c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	1c68      	adds	r0, r5, #1
 8003c10:	d0f2      	beq.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe f91b 	bl	8001e4c <HAL_GetTick>
 8003c16:	eba0 0008 	sub.w	r0, r0, r8
 8003c1a:	4285      	cmp	r5, r0
 8003c1c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c1e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	d300      	bcc.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003c22:	b97d      	cbnz	r5, 8003c44 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c28:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	6883      	ldr	r3, [r0, #8]
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003c32:	2320      	movs	r3, #32
 8003c34:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c36:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8003c3e:	2003      	movs	r0, #3
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c44:	075a      	lsls	r2, r3, #29
 8003c46:	d5d6      	bpl.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c48:	69c3      	ldr	r3, [r0, #28]
 8003c4a:	051b      	lsls	r3, r3, #20
 8003c4c:	d5d3      	bpl.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c52:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c54:	6803      	ldr	r3, [r0, #0]
 8003c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c5a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	6883      	ldr	r3, [r0, #8]
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003c64:	2320      	movs	r3, #32
 8003c66:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c68:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c6a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8003c6c:	e7e4      	b.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x50>

08003c6e <HAL_UART_Transmit>:
{
 8003c6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c72:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003c74:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003c76:	2b20      	cmp	r3, #32
{
 8003c78:	4604      	mov	r4, r0
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c7e:	d14c      	bne.n	8003d1a <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8003c80:	2900      	cmp	r1, #0
 8003c82:	d048      	beq.n	8003d16 <HAL_UART_Transmit+0xa8>
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	d046      	beq.n	8003d16 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8003c88:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d044      	beq.n	8003d1a <HAL_UART_Transmit+0xac>
 8003c90:	2301      	movs	r3, #1
 8003c92:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c98:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9a:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003c9e:	f7fe f8d5 	bl	8001e4c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003ca4:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003cac:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003cae:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb2:	d103      	bne.n	8003cbc <HAL_UART_Transmit+0x4e>
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	b90b      	cbnz	r3, 8003cbc <HAL_UART_Transmit+0x4e>
 8003cb8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003cba:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8003cc2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003cca:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003cce:	b93a      	cbnz	r2, 8003ce0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff ff88 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003cd8:	b940      	cbnz	r0, 8003cec <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8003cde:	e006      	b.n	8003cee <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff ff7f 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003cea:	b118      	cbz	r0, 8003cf4 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8003cec:	2003      	movs	r0, #3
}
 8003cee:	b003      	add	sp, #12
 8003cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cf4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003cf6:	b95e      	cbnz	r6, 8003d10 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d00:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003d02:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003d0e:	e7d8      	b.n	8003cc2 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d10:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003d14:	e7f4      	b.n	8003d00 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7e9      	b.n	8003cee <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003d1a:	2002      	movs	r0, #2
 8003d1c:	e7e7      	b.n	8003cee <HAL_UART_Transmit+0x80>

08003d1e <UART_CheckIdleState>:
{
 8003d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	2600      	movs	r6, #0
 8003d24:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003d26:	f7fe f891 	bl	8001e4c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003d30:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d32:	d415      	bmi.n	8003d60 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	075b      	lsls	r3, r3, #29
 8003d3a:	d50a      	bpl.n	8003d52 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	462b      	mov	r3, r5
 8003d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f7ff ff4c 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003d50:	b990      	cbnz	r0, 8003d78 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8003d52:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003d54:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003d56:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8003d58:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8003d5e:	e00c      	b.n	8003d7a <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4632      	mov	r2, r6
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f7ff ff3a 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d0dd      	beq.n	8003d34 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
}
 8003d7a:	b002      	add	sp, #8
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}

08003d7e <HAL_UART_Init>:
{
 8003d7e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003d80:	4604      	mov	r4, r0
 8003d82:	b340      	cbz	r0, 8003dd6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d84:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003d86:	b91b      	cbnz	r3, 8003d90 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003d88:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003d8c:	f003 fcb0 	bl	80076f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003d90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d92:	2324      	movs	r3, #36	; 0x24
 8003d94:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fd36 	bl	8003810 <UART_SetConfig>
 8003da4:	2801      	cmp	r0, #1
 8003da6:	d016      	beq.n	8003dd6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003daa:	b113      	cbz	r3, 8003db2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff fec7 	bl	8003b40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003dca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003dd2:	f7ff bfa4 	b.w	8003d1e <UART_CheckIdleState>
}
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	bd10      	pop	{r4, pc}

08003dda <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003dda:	b570      	push	{r4, r5, r6, lr}
 8003ddc:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003dde:	2400      	movs	r4, #0
  cp.role = role;
 8003de0:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 8003de4:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 8003de8:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003dec:	4621      	mov	r1, r4
 8003dee:	2218      	movs	r2, #24
 8003df0:	a804      	add	r0, sp, #16
{
 8003df2:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003df4:	9402      	str	r4, [sp, #8]
 8003df6:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003dfa:	f004 fe18 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003dfe:	233f      	movs	r3, #63	; 0x3f
 8003e00:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003e04:	238a      	movs	r3, #138	; 0x8a
 8003e06:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003e0a:	ab01      	add	r3, sp, #4
 8003e0c:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003e0e:	2303      	movs	r3, #3
 8003e10:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e12:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003e14:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003e16:	4621      	mov	r1, r4
 8003e18:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003e1a:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003e1c:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003e1e:	f000 fc2b 	bl	8004678 <hci_send_req>
 8003e22:	42a0      	cmp	r0, r4
 8003e24:	db15      	blt.n	8003e52 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003e26:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e2a:	b980      	cbnz	r0, 8003e4e <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003e2c:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003e2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8003e32:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003e36:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003e38:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e42:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e48:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003e4c:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8003e4e:	b00a      	add	sp, #40	; 0x28
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003e52:	20ff      	movs	r0, #255	; 0xff
 8003e54:	e7fb      	b.n	8003e4e <aci_gap_init_IDB05A1+0x74>

08003e56 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e5c:	2400      	movs	r4, #0
  cp.role = role;
 8003e5e:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8003e62:	4688      	mov	r8, r1
 8003e64:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e66:	4621      	mov	r1, r4
 8003e68:	2218      	movs	r2, #24
 8003e6a:	a804      	add	r0, sp, #16
{
 8003e6c:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e6e:	9402      	str	r4, [sp, #8]
 8003e70:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e74:	f004 fddb 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e78:	233f      	movs	r3, #63	; 0x3f
 8003e7a:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003e7e:	238a      	movs	r3, #138	; 0x8a
 8003e80:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003e84:	ab01      	add	r3, sp, #4
 8003e86:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003e88:	2301      	movs	r3, #1
 8003e8a:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e8c:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003e8e:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003e90:	4621      	mov	r1, r4
 8003e92:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003e94:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003e96:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003e98:	f000 fbee 	bl	8004678 <hci_send_req>
 8003e9c:	42a0      	cmp	r0, r4
 8003e9e:	db15      	blt.n	8003ecc <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003ea0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ea4:	b978      	cbnz	r0, 8003ec6 <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003ea6:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003ea8:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 8003eac:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003eb0:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003eb4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003eb8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003ebc:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003ebe:	9a03      	ldr	r2, [sp, #12]
 8003ec0:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003ec4:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 8003ec6:	b00a      	add	sp, #40	; 0x28
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8003ecc:	20ff      	movs	r0, #255	; 0xff
 8003ece:	e7fa      	b.n	8003ec6 <aci_gap_init_IDB04A1+0x70>

08003ed0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	b092      	sub	sp, #72	; 0x48
 8003ed4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8003ed8:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003edc:	192e      	adds	r6, r5, r4
 8003ede:	2e1a      	cmp	r6, #26
 8003ee0:	dc4f      	bgt.n	8003f82 <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8003ee2:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8003ee6:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8003eea:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8003eee:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003ef2:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 8003ef4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003ef8:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8003efa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003efe:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 8003f00:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003f04:	f004 fd88 	bl	8008a18 <memcpy>
  indx +=  LocalNameLen;
 8003f08:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8003f0c:	aa12      	add	r2, sp, #72	; 0x48
 8003f0e:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 8003f12:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003f14:	ae08      	add	r6, sp, #32
  indx++;
 8003f16:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 8003f18:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f20:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 8003f22:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8003f24:	f004 fd78 	bl	8008a18 <memcpy>
  indx +=  ServiceUUIDLen;  
 8003f28:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8003f2a:	ab12      	add	r3, sp, #72	; 0x48
 8003f2c:	4423      	add	r3, r4
 8003f2e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8003f32:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 8003f36:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8003f38:	aa12      	add	r2, sp, #72	; 0x48
 8003f3a:	fa52 f383 	uxtab	r3, r2, r3
 8003f3e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8003f42:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f46:	2100      	movs	r1, #0
 8003f48:	2218      	movs	r2, #24
 8003f4a:	a802      	add	r0, sp, #8
 8003f4c:	f004 fd6f 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003f50:	233f      	movs	r3, #63	; 0x3f
 8003f52:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8003f56:	2383      	movs	r3, #131	; 0x83
 8003f58:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 8003f5c:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8003f5e:	f10d 0307 	add.w	r3, sp, #7
 8003f62:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003f64:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003f66:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8003f6c:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8003f6e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003f70:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003f72:	f000 fb81 	bl	8004678 <hci_send_req>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	db05      	blt.n	8003f86 <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003f7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8003f7e:	b012      	add	sp, #72	; 0x48
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003f82:	2042      	movs	r0, #66	; 0x42
 8003f84:	e7fb      	b.n	8003f7e <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 8003f86:	20ff      	movs	r0, #255	; 0xff
 8003f88:	e7f9      	b.n	8003f7e <aci_gap_set_discoverable+0xae>

08003f8a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003f8a:	b510      	push	{r4, lr}
 8003f8c:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003f8e:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8003f92:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003f96:	f102 0010 	add.w	r0, r2, #16
 8003f9a:	f10d 011e 	add.w	r1, sp, #30
 8003f9e:	f852 4b04 	ldr.w	r4, [r2], #4
 8003fa2:	f841 4b04 	str.w	r4, [r1], #4
 8003fa6:	4282      	cmp	r2, r0
 8003fa8:	d1f9      	bne.n	8003f9e <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8003faa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8003fae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003fb2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8003fb6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003fba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8003fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fc0:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003fc4:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8003fc6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003fca:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003fce:	2100      	movs	r1, #0
 8003fd0:	a801      	add	r0, sp, #4
 8003fd2:	f004 fd2c 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003fd6:	233f      	movs	r3, #63	; 0x3f
 8003fd8:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8003fdc:	2386      	movs	r3, #134	; 0x86
 8003fde:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8003fe2:	ab07      	add	r3, sp, #28
 8003fe4:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8003fe6:	231a      	movs	r3, #26
 8003fe8:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8003fea:	f10d 0303 	add.w	r3, sp, #3
 8003fee:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003ff0:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003ff2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003ff4:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8003ff6:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003ff8:	f000 fb3e 	bl	8004678 <hci_send_req>
 8003ffc:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003ffe:	bfac      	ite	ge
 8004000:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8004004:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8004006:	b00e      	add	sp, #56	; 0x38
 8004008:	bd10      	pop	{r4, pc}

0800400a <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 800400a:	b510      	push	{r4, lr}
 800400c:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800400e:	2418      	movs	r4, #24
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8004010:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 800401c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8004020:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 8004024:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8004028:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 800402c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8004030:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 8004034:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8004038:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 800403c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8004040:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8004044:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
  cp.scanInterval = htobs(scanInterval);
 8004048:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 800404c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8004050:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.min_conn_length = htobs(min_conn_length);
 8004054:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004058:	4622      	mov	r2, r4
  cp.max_conn_length = htobs(max_conn_length);
 800405a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800405e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004062:	2100      	movs	r1, #0
 8004064:	a802      	add	r0, sp, #8
 8004066:	f004 fce2 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800406a:	233f      	movs	r3, #63	; 0x3f
 800406c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8004070:	239c      	movs	r3, #156	; 0x9c
 8004072:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8004076:	ab08      	add	r3, sp, #32
 8004078:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 800407a:	230f      	movs	r3, #15
 800407c:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 800407e:	f10d 0307 	add.w	r3, sp, #7
 8004082:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004084:	2100      	movs	r1, #0
  rq.rlen = 1;
 8004086:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004088:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 800408a:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800408c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800408e:	f000 faf3 	bl	8004678 <hci_send_req>
 8004092:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8004094:	bfac      	ite	ge
 8004096:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800409a:	20ff      	movlt	r0, #255	; 0xff
}
 800409c:	b00e      	add	sp, #56	; 0x38
 800409e:	bd10      	pop	{r4, pc}

080040a0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80040a0:	b500      	push	{lr}
 80040a2:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80040a4:	2218      	movs	r2, #24
 80040a6:	2100      	movs	r1, #0
 80040a8:	a802      	add	r0, sp, #8
 80040aa:	f004 fcc0 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80040ae:	233f      	movs	r3, #63	; 0x3f
 80040b0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80040b4:	f240 1301 	movw	r3, #257	; 0x101
 80040b8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80040bc:	f10d 0307 	add.w	r3, sp, #7
 80040c0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80040c2:	2100      	movs	r1, #0
  rq.rlen = 1;
 80040c4:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80040c6:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80040c8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80040ca:	f000 fad5 	bl	8004678 <hci_send_req>
 80040ce:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80040d0:	bfac      	ite	ge
 80040d2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80040d6:	20ff      	movlt	r0, #255	; 0xff
}
 80040d8:	b009      	add	sp, #36	; 0x24
 80040da:	f85d fb04 	ldr.w	pc, [sp], #4

080040de <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80040de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e0:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80040e2:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 80040e4:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 80040e6:	bf0c      	ite	eq
 80040e8:	2402      	moveq	r4, #2
 80040ea:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 80040ec:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 80040f0:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80040f2:	f10d 0005 	add.w	r0, sp, #5
 80040f6:	4622      	mov	r2, r4
{
 80040f8:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80040fa:	f004 fc8d 	bl	8008a18 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 80040fe:	ab0c      	add	r3, sp, #48	; 0x30
 8004100:	4423      	add	r3, r4
 8004102:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8004106:	ab0c      	add	r3, sp, #48	; 0x30
 8004108:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800410a:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 800410c:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004110:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004112:	2218      	movs	r2, #24
 8004114:	4629      	mov	r1, r5
 8004116:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800411a:	f8ad 5000 	strh.w	r5, [sp]
 800411e:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004122:	f004 fc84 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004126:	233f      	movs	r3, #63	; 0x3f
 8004128:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800412c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004130:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 8004134:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004136:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8004138:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 800413a:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 800413c:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800413e:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8004142:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8004144:	f000 fa98 	bl	8004678 <hci_send_req>
 8004148:	42a8      	cmp	r0, r5
 800414a:	db09      	blt.n	8004160 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800414c:	f89d 0000 	ldrb.w	r0, [sp]
 8004150:	b920      	cbnz	r0, 800415c <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8004152:	9b00      	ldr	r3, [sp, #0]
 8004154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004156:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800415a:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800415c:	b00d      	add	sp, #52	; 0x34
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8004160:	20ff      	movs	r0, #255	; 0xff
 8004162:	e7fb      	b.n	800415c <aci_gatt_add_serv+0x7e>

08004164 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8004164:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8004166:	2901      	cmp	r1, #1
{
 8004168:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 800416a:	bf0c      	ite	eq
 800416c:	2402      	moveq	r4, #2
 800416e:	2410      	movne	r4, #16
{
 8004170:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8004172:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004176:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 8004178:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800417c:	f10d 001f 	add.w	r0, sp, #31
 8004180:	4631      	mov	r1, r6
{
 8004182:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004184:	f004 fc48 	bl	8008a18 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8004188:	ab0e      	add	r3, sp, #56	; 0x38
 800418a:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800418c:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 800418e:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8004192:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8004196:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 800419a:	ab0e      	add	r3, sp, #56	; 0x38
 800419c:	4423      	add	r3, r4
 800419e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80041a2:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80041a6:	ab0e      	add	r3, sp, #56	; 0x38
 80041a8:	4423      	add	r3, r4
 80041aa:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80041ae:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 80041b2:	ab0e      	add	r3, sp, #56	; 0x38
 80041b4:	4423      	add	r3, r4
 80041b6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80041ba:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 80041be:	ab0e      	add	r3, sp, #56	; 0x38
 80041c0:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80041c2:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 80041c4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80041c8:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80041cc:	4629      	mov	r1, r5
 80041ce:	2218      	movs	r2, #24
 80041d0:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80041d2:	f8ad 5000 	strh.w	r5, [sp]
 80041d6:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80041da:	f004 fc28 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80041de:	233f      	movs	r3, #63	; 0x3f
 80041e0:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80041e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80041e8:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 80041ec:	ab07      	add	r3, sp, #28
 80041ee:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 80041f0:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80041f2:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 80041f4:	4629      	mov	r1, r5
 80041f6:	a801      	add	r0, sp, #4
  rq.clen = indx;
 80041f8:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 80041fa:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80041fe:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8004200:	f000 fa3a 	bl	8004678 <hci_send_req>
 8004204:	42a8      	cmp	r0, r5
 8004206:	db09      	blt.n	800421c <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8004208:	f89d 0000 	ldrb.w	r0, [sp]
 800420c:	b920      	cbnz	r0, 8004218 <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800420e:	9b00      	ldr	r3, [sp, #0]
 8004210:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004212:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004216:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8004218:	b00e      	add	sp, #56	; 0x38
 800421a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800421c:	20ff      	movs	r0, #255	; 0xff
 800421e:	e7fb      	b.n	8004218 <aci_gatt_add_char+0xb4>

08004220 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8004220:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8004222:	2b7a      	cmp	r3, #122	; 0x7a
{
 8004224:	b0a8      	sub	sp, #160	; 0xa0
 8004226:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8004228:	dc2d      	bgt.n	8004286 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800422a:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800422e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8004232:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8004236:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 8004238:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800423c:	461a      	mov	r2, r3
 800423e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8004242:	f004 fbe9 	bl	8008a18 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004246:	2218      	movs	r2, #24
 8004248:	2100      	movs	r1, #0
 800424a:	a802      	add	r0, sp, #8
 800424c:	f004 fbef 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004250:	233f      	movs	r3, #63	; 0x3f
 8004252:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8004256:	f44f 7383 	mov.w	r3, #262	; 0x106
 800425a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800425e:	ab08      	add	r3, sp, #32
 8004260:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 8004262:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 8004264:	f10d 0307 	add.w	r3, sp, #7
 8004268:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800426a:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800426c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800426e:	2100      	movs	r1, #0
 8004270:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8004272:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8004274:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004276:	f000 f9ff 	bl	8004678 <hci_send_req>
 800427a:	2800      	cmp	r0, #0
 800427c:	db05      	blt.n	800428a <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800427e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8004282:	b028      	add	sp, #160	; 0xa0
 8004284:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8004286:	2042      	movs	r0, #66	; 0x42
 8004288:	e7fb      	b.n	8004282 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 800428a:	20ff      	movs	r0, #255	; 0xff
 800428c:	e7f9      	b.n	8004282 <aci_gatt_update_char_value+0x62>

0800428e <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800428e:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 8004290:	2b01      	cmp	r3, #1
{
 8004292:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8004294:	bf0c      	ite	eq
 8004296:	2402      	moveq	r4, #2
 8004298:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800429a:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800429e:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80042a2:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80042a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 80042a8:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80042ac:	4622      	mov	r2, r4
 80042ae:	f10d 000f 	add.w	r0, sp, #15
 80042b2:	f004 fbb1 	bl	8008a18 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80042b6:	2218      	movs	r2, #24
 80042b8:	2100      	movs	r1, #0
 80042ba:	a808      	add	r0, sp, #32
 80042bc:	f004 fbb7 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80042c0:	233f      	movs	r3, #63	; 0x3f
 80042c2:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80042c6:	f44f 738b 	mov.w	r3, #278	; 0x116
 80042ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80042ce:	ab02      	add	r3, sp, #8
 80042d0:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 80042d2:	230f      	movs	r3, #15
 80042d4:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 80042d6:	f10d 0307 	add.w	r3, sp, #7
 80042da:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 80042dc:	3407      	adds	r4, #7
  rq.rlen = 1;
 80042de:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80042e0:	2100      	movs	r1, #0
 80042e2:	a808      	add	r0, sp, #32
  rq.clen = indx;
 80042e4:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 80042e6:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80042e8:	f000 f9c6 	bl	8004678 <hci_send_req>
 80042ec:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80042ee:	bfac      	ite	ge
 80042f0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80042f4:	20ff      	movlt	r0, #255	; 0xff
}
 80042f6:	b00e      	add	sp, #56	; 0x38
 80042f8:	bd10      	pop	{r4, pc}

080042fa <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80042fa:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80042fc:	2a7b      	cmp	r2, #123	; 0x7b
{
 80042fe:	b0a8      	sub	sp, #160	; 0xa0
 8004300:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8004302:	dc2c      	bgt.n	800435e <aci_gatt_write_charac_descriptor+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8004304:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8004308:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800430c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8004310:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 8004312:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8004316:	f004 fb7f 	bl	8008a18 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800431a:	2218      	movs	r2, #24
 800431c:	2100      	movs	r1, #0
 800431e:	a802      	add	r0, sp, #8
 8004320:	f004 fb85 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004324:	233f      	movs	r3, #63	; 0x3f
 8004326:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800432a:	f240 1321 	movw	r3, #289	; 0x121
 800432e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8004332:	ab08      	add	r3, sp, #32
 8004334:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 8004336:	230f      	movs	r3, #15
 8004338:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 800433a:	3405      	adds	r4, #5
  rq.rparam = &status;
 800433c:	f10d 0307 	add.w	r3, sp, #7
 8004340:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8004342:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8004344:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8004346:	2100      	movs	r1, #0
 8004348:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800434a:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800434c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800434e:	f000 f993 	bl	8004678 <hci_send_req>
 8004352:	2800      	cmp	r0, #0
 8004354:	db05      	blt.n	8004362 <aci_gatt_write_charac_descriptor+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 8004356:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800435a:	b028      	add	sp, #160	; 0xa0
 800435c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800435e:	2042      	movs	r0, #66	; 0x42
 8004360:	e7fb      	b.n	800435a <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;
 8004362:	20ff      	movs	r0, #255	; 0xff
 8004364:	e7f9      	b.n	800435a <aci_gatt_write_charac_descriptor+0x60>

08004366 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8004366:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8004368:	2a14      	cmp	r2, #20
{
 800436a:	b08e      	sub	sp, #56	; 0x38
 800436c:	4614      	mov	r4, r2
  if(val_len > sizeof(cp.attr_val))
 800436e:	d829      	bhi.n	80043c4 <aci_gatt_write_without_response+0x5e>
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8004370:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp.attr_handle = htobs(attr_handle);
 8004374:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp.val_len = val_len;
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8004378:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800437c:	4619      	mov	r1, r3
  cp.val_len = val_len;
 800437e:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8004382:	f004 fb49 	bl	8008a18 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004386:	2218      	movs	r2, #24
 8004388:	2100      	movs	r1, #0
 800438a:	a801      	add	r0, sp, #4
 800438c:	f004 fb4f 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004390:	233f      	movs	r3, #63	; 0x3f
 8004392:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8004396:	f240 1323 	movw	r3, #291	; 0x123
 800439a:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 800439e:	ab07      	add	r3, sp, #28
 80043a0:	9303      	str	r3, [sp, #12]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
 80043a2:	f10d 0303 	add.w	r3, sp, #3
 80043a6:	9305      	str	r3, [sp, #20]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80043a8:	3405      	adds	r4, #5
  rq.rlen = 1;
 80043aa:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80043ac:	2100      	movs	r1, #0
 80043ae:	a801      	add	r0, sp, #4
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80043b0:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 80043b2:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80043b4:	f000 f960 	bl	8004678 <hci_send_req>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	db05      	blt.n	80043c8 <aci_gatt_write_without_response+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 80043bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 80043c0:	b00e      	add	sp, #56	; 0x38
 80043c2:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80043c4:	2042      	movs	r0, #66	; 0x42
 80043c6:	e7fb      	b.n	80043c0 <aci_gatt_write_without_response+0x5a>
    return BLE_STATUS_TIMEOUT;
 80043c8:	20ff      	movs	r0, #255	; 0xff
 80043ca:	e7f9      	b.n	80043c0 <aci_gatt_write_without_response+0x5a>

080043cc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80043cc:	b510      	push	{r4, lr}
 80043ce:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80043d0:	2c7e      	cmp	r4, #126	; 0x7e
{
 80043d2:	b0a8      	sub	sp, #160	; 0xa0
 80043d4:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80043d6:	dc27      	bgt.n	8004428 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80043d8:	4622      	mov	r2, r4
  buffer[indx] = offset;
 80043da:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 80043de:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 80043e2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 80043e6:	f004 fb17 	bl	8008a18 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80043ea:	2218      	movs	r2, #24
 80043ec:	2100      	movs	r1, #0
 80043ee:	a802      	add	r0, sp, #8
 80043f0:	f004 fb1d 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80043f4:	233f      	movs	r3, #63	; 0x3f
 80043f6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80043fa:	230c      	movs	r3, #12
 80043fc:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8004400:	ab08      	add	r3, sp, #32
 8004402:	9304      	str	r3, [sp, #16]
  indx +=  len;
 8004404:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8004406:	f10d 0307 	add.w	r3, sp, #7
 800440a:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800440c:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800440e:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8004410:	2100      	movs	r1, #0
 8004412:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8004414:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8004416:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004418:	f000 f92e 	bl	8004678 <hci_send_req>
 800441c:	2800      	cmp	r0, #0
 800441e:	db05      	blt.n	800442c <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 8004420:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004424:	b028      	add	sp, #160	; 0xa0
 8004426:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8004428:	2042      	movs	r0, #66	; 0x42
 800442a:	e7fb      	b.n	8004424 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 800442c:	20ff      	movs	r0, #255	; 0xff
 800442e:	e7f9      	b.n	8004424 <aci_hal_write_config_data+0x58>

08004430 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8004430:	b500      	push	{lr}
 8004432:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004434:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8004436:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800443a:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800443e:	a802      	add	r0, sp, #8
 8004440:	2100      	movs	r1, #0
 8004442:	f004 faf4 	bl	8008a2e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004446:	233f      	movs	r3, #63	; 0x3f
 8004448:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800444c:	230f      	movs	r3, #15
 800444e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8004452:	ab01      	add	r3, sp, #4
 8004454:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8004456:	2302      	movs	r3, #2
 8004458:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800445a:	f10d 0303 	add.w	r3, sp, #3
 800445e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8004460:	2100      	movs	r1, #0
  rq.rlen = 1;
 8004462:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004464:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004466:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004468:	f000 f906 	bl	8004678 <hci_send_req>
 800446c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800446e:	bfac      	ite	ge
 8004470:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8004474:	20ff      	movlt	r0, #255	; 0xff
}
 8004476:	b009      	add	sp, #36	; 0x24
 8004478:	f85d fb04 	ldr.w	pc, [sp], #4

0800447c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800447c:	b530      	push	{r4, r5, lr}
 800447e:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8004480:	f10d 030e 	add.w	r3, sp, #14
 8004484:	9300      	str	r3, [sp, #0]
{
 8004486:	4605      	mov	r5, r0
 8004488:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800448a:	ab03      	add	r3, sp, #12
 800448c:	f10d 0209 	add.w	r2, sp, #9
 8004490:	f10d 010a 	add.w	r1, sp, #10
 8004494:	a802      	add	r0, sp, #8
 8004496:	f000 f82f 	bl	80044f8 <hci_le_read_local_version>
 800449a:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800449c:	b968      	cbnz	r0, 80044ba <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800449e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80044a2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 80044a6:	0a0b      	lsrs	r3, r1, #8
 80044a8:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80044aa:	f002 030f 	and.w	r3, r2, #15
 80044ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80044b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80044b6:	4313      	orrs	r3, r2
 80044b8:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 80044ba:	b005      	add	sp, #20
 80044bc:	bd30      	pop	{r4, r5, pc}

080044be <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80044be:	b500      	push	{lr}
 80044c0:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80044c2:	2218      	movs	r2, #24
 80044c4:	2100      	movs	r1, #0
 80044c6:	a802      	add	r0, sp, #8
 80044c8:	f004 fab1 	bl	8008a2e <memset>
  rq.ogf = OGF_HOST_CTL;
 80044cc:	2303      	movs	r3, #3
 80044ce:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 80044d2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80044d6:	f10d 0307 	add.w	r3, sp, #7
 80044da:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80044dc:	2100      	movs	r1, #0
  rq.rlen = 1;
 80044de:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80044e0:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80044e2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80044e4:	f000 f8c8 	bl	8004678 <hci_send_req>
 80044e8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80044ea:	bfac      	ite	ge
 80044ec:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 80044f0:	20ff      	movlt	r0, #255	; 0xff
}
 80044f2:	b009      	add	sp, #36	; 0x24
 80044f4:	f85d fb04 	ldr.w	pc, [sp], #4

080044f8 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80044f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80044fc:	2400      	movs	r4, #0
{
 80044fe:	b08b      	sub	sp, #44	; 0x2c
 8004500:	4681      	mov	r9, r0
 8004502:	4688      	mov	r8, r1
 8004504:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004506:	4621      	mov	r1, r4
 8004508:	2218      	movs	r2, #24
 800450a:	a804      	add	r0, sp, #16
{
 800450c:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800450e:	9401      	str	r4, [sp, #4]
 8004510:	9402      	str	r4, [sp, #8]
 8004512:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004516:	f004 fa8a 	bl	8008a2e <memset>
  rq.ogf = OGF_INFO_PARAM;
 800451a:	2304      	movs	r3, #4
 800451c:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8004520:	2301      	movs	r3, #1
 8004522:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004526:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004528:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 800452a:	4621      	mov	r1, r4
 800452c:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800452e:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004530:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8004532:	f000 f8a1 	bl	8004678 <hci_send_req>
 8004536:	42a0      	cmp	r0, r4
 8004538:	db1c      	blt.n	8004574 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800453a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800453e:	b9b0      	cbnz	r0, 800456e <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8004540:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004544:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 8004548:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800454c:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 8004550:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004554:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8004556:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8004558:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800455c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8004560:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8004562:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800456a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800456c:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800456e:	b00b      	add	sp, #44	; 0x2c
 8004570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 8004574:	20ff      	movs	r0, #255	; 0xff
 8004576:	e7fa      	b.n	800456e <hci_le_read_local_version+0x76>

08004578 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800457c:	ad08      	add	r5, sp, #32
 800457e:	2420      	movs	r4, #32
{
 8004580:	4606      	mov	r6, r0
 8004582:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8004584:	4622      	mov	r2, r4
 8004586:	2100      	movs	r1, #0
 8004588:	4628      	mov	r0, r5
 800458a:	f004 fa50 	bl	8008a2e <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800458e:	2e1f      	cmp	r6, #31
 8004590:	4632      	mov	r2, r6
 8004592:	4639      	mov	r1, r7
 8004594:	bf28      	it	cs
 8004596:	221f      	movcs	r2, #31
 8004598:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 800459c:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80045a0:	f004 fa3a 	bl	8008a18 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80045a4:	2218      	movs	r2, #24
 80045a6:	2100      	movs	r1, #0
 80045a8:	a802      	add	r0, sp, #8
 80045aa:	f004 fa40 	bl	8008a2e <memset>
  rq.ogf = OGF_LE_CTL;
 80045ae:	2308      	movs	r3, #8
 80045b0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80045b4:	2309      	movs	r3, #9
 80045b6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 80045ba:	f10d 0307 	add.w	r3, sp, #7
 80045be:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80045c0:	2100      	movs	r1, #0
  rq.rlen = 1;
 80045c2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80045c4:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 80045c6:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80045c8:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80045ca:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80045cc:	f000 f854 	bl	8004678 <hci_send_req>
 80045d0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 80045d2:	bfac      	ite	ge
 80045d4:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 80045d8:	20ff      	movlt	r0, #255	; 0xff
}
 80045da:	b011      	add	sp, #68	; 0x44
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080045e0 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 80045e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 80045e2:	4d08      	ldr	r5, [pc, #32]	; (8004604 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 80045e4:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f959 	bl	800489e <list_is_empty>
 80045ec:	b108      	cbz	r0, 80045f2 <move_list.constprop.0+0x12>
  }
}
 80045ee:	b003      	add	sp, #12
 80045f0:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 80045f2:	a901      	add	r1, sp, #4
 80045f4:	4620      	mov	r0, r4
 80045f6:	f000 f991 	bl	800491c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80045fa:	9901      	ldr	r1, [sp, #4]
 80045fc:	4628      	mov	r0, r5
 80045fe:	f000 f958 	bl	80048b2 <list_insert_head>
 8004602:	e7f0      	b.n	80045e6 <move_list.constprop.0+0x6>
 8004604:	20001c7c 	.word	0x20001c7c

08004608 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004608:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800460a:	b108      	cbz	r0, 8004610 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <hci_init+0x44>)
 800460e:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8004610:	f001 ff6a 	bl	80064e8 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004614:	480e      	ldr	r0, [pc, #56]	; (8004650 <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004616:	4e0f      	ldr	r6, [pc, #60]	; (8004654 <hci_init+0x4c>)
 8004618:	4d0d      	ldr	r5, [pc, #52]	; (8004650 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 800461a:	f000 f93d 	bl	8004898 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800461e:	480e      	ldr	r0, [pc, #56]	; (8004658 <hci_init+0x50>)
 8004620:	f000 f93a 	bl	8004898 <list_init_head>
 8004624:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004626:	1931      	adds	r1, r6, r4
 8004628:	4628      	mov	r0, r5
 800462a:	348c      	adds	r4, #140	; 0x8c
 800462c:	f000 f94d 	bl	80048ca <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8004630:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8004634:	d1f7      	bne.n	8004626 <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004636:	4c05      	ldr	r4, [pc, #20]	; (800464c <hci_init+0x44>)
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	b10a      	cbz	r2, 8004640 <hci_init+0x38>
 800463c:	2000      	movs	r0, #0
 800463e:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	b113      	cbz	r3, 800464a <hci_init+0x42>
}
 8004644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8004648:	4718      	bx	r3
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	200008e4 	.word	0x200008e4
 8004650:	20001c74 	.word	0x20001c74
 8004654:	20000904 	.word	0x20000904
 8004658:	20001c7c 	.word	0x20001c7c

0800465c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <hci_register_io_bus+0x18>)
 800465e:	6802      	ldr	r2, [r0, #0]
 8004660:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8004662:	68c2      	ldr	r2, [r0, #12]
 8004664:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8004666:	6902      	ldr	r2, [r0, #16]
 8004668:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800466a:	6982      	ldr	r2, [r0, #24]
 800466c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800466e:	6882      	ldr	r2, [r0, #8]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	4770      	bx	lr
 8004674:	200008e4 	.word	0x200008e4

08004678 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8004678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800467c:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800467e:	8846      	ldrh	r6, [r0, #2]
 8004680:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004684:	4f59      	ldr	r7, [pc, #356]	; (80047ec <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8004686:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80047f4 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800468a:	2300      	movs	r3, #0
{
 800468c:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800468e:	a802      	add	r0, sp, #8
{
 8004690:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 8004692:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 8004694:	f000 f900 	bl	8004898 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004698:	4638      	mov	r0, r7
 800469a:	f000 f951 	bl	8004940 <list_get_size>
 800469e:	2801      	cmp	r0, #1
 80046a0:	dd53      	ble.n	800474a <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80046a2:	8863      	ldrh	r3, [r4, #2]
 80046a4:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80046a6:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80046a8:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80046aa:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 80046b6:	2201      	movs	r2, #1
 80046b8:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80046bc:	a805      	add	r0, sp, #20
 80046be:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80046c0:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80046c4:	f004 f9a8 	bl	8008a18 <memcpy>
  if (hciContext.io.Send)
 80046c8:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <hci_send_req+0x178>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	b113      	cbz	r3, 80046d4 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80046ce:	1d39      	adds	r1, r7, #4
 80046d0:	a804      	add	r0, sp, #16
 80046d2:	4798      	blx	r3
  
  if (async)
 80046d4:	2d00      	cmp	r5, #0
 80046d6:	d178      	bne.n	80047ca <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80046d8:	f3c6 0509 	ubfx	r5, r6, #0, #10
 80046dc:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80046e0:	4e44      	ldr	r6, [pc, #272]	; (80047f4 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80046e2:	4f42      	ldr	r7, [pc, #264]	; (80047ec <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80046e4:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 80046e6:	f7fd fbb1 	bl	8001e4c <HAL_GetTick>
 80046ea:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80046ec:	f7fd fbae 	bl	8001e4c <HAL_GetTick>
 80046f0:	eba0 0008 	sub.w	r0, r0, r8
 80046f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80046f8:	d84a      	bhi.n	8004790 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80046fa:	4630      	mov	r0, r6
 80046fc:	f000 f8cf 	bl	800489e <list_is_empty>
 8004700:	2800      	cmp	r0, #0
 8004702:	d1f3      	bne.n	80046ec <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004704:	a901      	add	r1, sp, #4
 8004706:	4630      	mov	r0, r6
 8004708:	f000 f8f6 	bl	80048f8 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800470c:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800470e:	7a0b      	ldrb	r3, [r1, #8]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d109      	bne.n	8004728 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 8004714:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004716:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800471a:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800471c:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8004720:	d02c      	beq.n	800477c <hci_send_req+0x104>
 8004722:	d81b      	bhi.n	800475c <hci_send_req+0xe4>
 8004724:	280e      	cmp	r0, #14
 8004726:	d052      	beq.n	80047ce <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004728:	4638      	mov	r0, r7
 800472a:	f000 f8b8 	bl	800489e <list_is_empty>
 800472e:	2800      	cmp	r0, #0
 8004730:	d058      	beq.n	80047e4 <hci_send_req+0x16c>
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f8b3 	bl	800489e <list_is_empty>
 8004738:	2800      	cmp	r0, #0
 800473a:	d053      	beq.n	80047e4 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800473c:	9901      	ldr	r1, [sp, #4]
 800473e:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004740:	f000 f8c3 	bl	80048ca <list_insert_tail>
      hciReadPacket=NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	e7cd      	b.n	80046e6 <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800474a:	a904      	add	r1, sp, #16
 800474c:	4648      	mov	r0, r9
 800474e:	f000 f8d3 	bl	80048f8 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004752:	9904      	ldr	r1, [sp, #16]
 8004754:	4638      	mov	r0, r7
 8004756:	f000 f8b8 	bl	80048ca <list_insert_tail>
 800475a:	e79d      	b.n	8004698 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800475c:	2810      	cmp	r0, #16
 800475e:	d017      	beq.n	8004790 <hci_send_req+0x118>
 8004760:	283e      	cmp	r0, #62	; 0x3e
 8004762:	d1e1      	bne.n	8004728 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 8004764:	7ac8      	ldrb	r0, [r1, #11]
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	4290      	cmp	r0, r2
 800476a:	d1dd      	bne.n	8004728 <hci_send_req+0xb0>
        len -= 1;
 800476c:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 800476e:	6963      	ldr	r3, [r4, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	bf28      	it	cs
 8004774:	461a      	movcs	r2, r3
 8004776:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004778:	310c      	adds	r1, #12
 800477a:	e01c      	b.n	80047b6 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 800477c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8004780:	42ab      	cmp	r3, r5
 8004782:	d105      	bne.n	8004790 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d00f      	beq.n	80047aa <hci_send_req+0x132>
          if (cs->status) {
 800478a:	7acb      	ldrb	r3, [r1, #11]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0cb      	beq.n	8004728 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8004790:	9901      	ldr	r1, [sp, #4]
 8004792:	b111      	cbz	r1, 800479a <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004794:	4815      	ldr	r0, [pc, #84]	; (80047ec <hci_send_req+0x174>)
 8004796:	f000 f88c 	bl	80048b2 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800479a:	a802      	add	r0, sp, #8
 800479c:	f7ff ff20 	bl	80045e0 <move_list.constprop.0>
  return -1;
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 80047a4:	b025      	add	sp, #148	; 0x94
 80047a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 80047aa:	6963      	ldr	r3, [r4, #20]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	bf28      	it	cs
 80047b0:	461a      	movcs	r2, r3
 80047b2:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80047b4:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80047b6:	6920      	ldr	r0, [r4, #16]
 80047b8:	f004 f92e 	bl	8008a18 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80047bc:	480b      	ldr	r0, [pc, #44]	; (80047ec <hci_send_req+0x174>)
 80047be:	9901      	ldr	r1, [sp, #4]
 80047c0:	f000 f877 	bl	80048b2 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80047c4:	a802      	add	r0, sp, #8
 80047c6:	f7ff ff0b 	bl	80045e0 <move_list.constprop.0>
    return 0;
 80047ca:	2000      	movs	r0, #0
 80047cc:	e7ea      	b.n	80047a4 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 80047ce:	898a      	ldrh	r2, [r1, #12]
 80047d0:	42aa      	cmp	r2, r5
 80047d2:	d1dd      	bne.n	8004790 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 80047d4:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 80047d6:	6963      	ldr	r3, [r4, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	bf28      	it	cs
 80047dc:	461a      	movcs	r2, r3
 80047de:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80047e0:	310e      	adds	r1, #14
 80047e2:	e7e8      	b.n	80047b6 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80047e4:	9901      	ldr	r1, [sp, #4]
 80047e6:	a802      	add	r0, sp, #8
 80047e8:	e7aa      	b.n	8004740 <hci_send_req+0xc8>
 80047ea:	bf00      	nop
 80047ec:	20001c74 	.word	0x20001c74
 80047f0:	200008e4 	.word	0x200008e4
 80047f4:	20001c7c 	.word	0x20001c7c

080047f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80047f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 80047fa:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80047fc:	4c0b      	ldr	r4, [pc, #44]	; (800482c <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); // TU jest
    if (hciContext.UserEvtRx != NULL)
 80047fe:	4d0c      	ldr	r5, [pc, #48]	; (8004830 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff); //TU sa  zaladowane wyslane dane!!
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004800:	4e0c      	ldr	r6, [pc, #48]	; (8004834 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 8004802:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004804:	4620      	mov	r0, r4
 8004806:	f000 f84a 	bl	800489e <list_is_empty>
 800480a:	b108      	cbz	r0, 8004810 <hci_user_evt_proc+0x18>
  }
}
 800480c:	b002      	add	sp, #8
 800480e:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); // TU jest
 8004810:	a901      	add	r1, sp, #4
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f870 	bl	80048f8 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8004818:	69eb      	ldr	r3, [r5, #28]
 800481a:	b113      	cbz	r3, 8004822 <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff); //TU sa  zaladowane wyslane dane!!
 800481c:	9801      	ldr	r0, [sp, #4]
 800481e:	3008      	adds	r0, #8
 8004820:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004822:	9901      	ldr	r1, [sp, #4]
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f850 	bl	80048ca <list_insert_tail>
 800482a:	e7eb      	b.n	8004804 <hci_user_evt_proc+0xc>
 800482c:	20001c7c 	.word	0x20001c7c
 8004830:	200008e4 	.word	0x200008e4
 8004834:	20001c74 	.word	0x20001c74

08004838 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8004838:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800483a:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800483c:	4813      	ldr	r0, [pc, #76]	; (800488c <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 800483e:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8004840:	f000 f82d 	bl	800489e <list_is_empty>
 8004844:	b9d8      	cbnz	r0, 800487e <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004846:	a901      	add	r1, sp, #4
 8004848:	4810      	ldr	r0, [pc, #64]	; (800488c <hci_notify_asynch_evt+0x54>)
 800484a:	f000 f855 	bl	80048f8 <list_remove_head>
    
    if (hciContext.io.Receive)
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <hci_notify_asynch_evt+0x58>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	b193      	cbz	r3, 800487a <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8004854:	9801      	ldr	r0, [sp, #4]
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	3008      	adds	r0, #8
 800485a:	4798      	blx	r3
 800485c:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 800485e:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8004860:	b185      	cbz	r5, 8004884 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004862:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8004864:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004868:	2b04      	cmp	r3, #4
 800486a:	d10b      	bne.n	8004884 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800486c:	7a8b      	ldrb	r3, [r1, #10]
 800486e:	1ee8      	subs	r0, r5, #3
 8004870:	4283      	cmp	r3, r0
 8004872:	d107      	bne.n	8004884 <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8004874:	4807      	ldr	r0, [pc, #28]	; (8004894 <hci_notify_asynch_evt+0x5c>)
 8004876:	f000 f828 	bl	80048ca <list_insert_tail>
  int32_t ret = 0;
 800487a:	2000      	movs	r0, #0
 800487c:	e000      	b.n	8004880 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 800487e:	2001      	movs	r0, #1
  }
  return ret;

}
 8004880:	b003      	add	sp, #12
 8004882:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8004884:	4801      	ldr	r0, [pc, #4]	; (800488c <hci_notify_asynch_evt+0x54>)
 8004886:	f000 f814 	bl	80048b2 <list_insert_head>
 800488a:	e7f6      	b.n	800487a <hci_notify_asynch_evt+0x42>
 800488c:	20001c74 	.word	0x20001c74
 8004890:	200008e4 	.word	0x200008e4
 8004894:	20001c7c 	.word	0x20001c7c

08004898 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8004898:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800489a:	6040      	str	r0, [r0, #4]
 800489c:	4770      	bx	lr

0800489e <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80048a2:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80048a4:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 80048a6:	1a1b      	subs	r3, r3, r0
 80048a8:	4258      	negs	r0, r3
 80048aa:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 80048b0:	4770      	bx	lr

080048b2 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80048b6:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80048b8:	6802      	ldr	r2, [r0, #0]
 80048ba:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 80048bc:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 80048be:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 80048c0:	680a      	ldr	r2, [r1, #0]
 80048c2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	f383 8810 	msr	PRIMASK, r3
 80048c8:	4770      	bx	lr

080048ca <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80048ce:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 80048d0:	6842      	ldr	r2, [r0, #4]
 80048d2:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 80048d4:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 80048d6:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80048d8:	684a      	ldr	r2, [r1, #4]
 80048da:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	f383 8810 	msr	PRIMASK, r3
 80048e0:	4770      	bx	lr

080048e2 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80048e6:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80048e8:	e890 000a 	ldmia.w	r0, {r1, r3}
 80048ec:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 80048ee:	6801      	ldr	r1, [r0, #0]
 80048f0:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	f382 8810 	msr	PRIMASK, r2
 80048f6:	4770      	bx	lr

080048f8 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004900:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8004906:	6800      	ldr	r0, [r0, #0]
 8004908:	f7ff ffeb 	bl	80048e2 <list_remove_node>
  (*node)->next = NULL;
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	2300      	movs	r3, #0
 8004910:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004916:	f385 8810 	msr	PRIMASK, r5
 800491a:	bd38      	pop	{r3, r4, r5, pc}

0800491c <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004920:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004924:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004926:	6843      	ldr	r3, [r0, #4]
 8004928:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 800492a:	6840      	ldr	r0, [r0, #4]
 800492c:	f7ff ffd9 	bl	80048e2 <list_remove_node>
  (*node)->next = NULL;
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	f385 8810 	msr	PRIMASK, r5
 800493e:	bd38      	pop	{r3, r4, r5, pc}

08004940 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004944:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004946:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8004948:	2300      	movs	r3, #0
  while (temp != listHead)
 800494a:	4282      	cmp	r2, r0
 800494c:	d103      	bne.n	8004956 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8004952:	4618      	mov	r0, r3
 8004954:	4770      	bx	lr
    size++;
 8004956:	3301      	adds	r3, #1
    temp = temp->next;		
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	e7f6      	b.n	800494a <list_get_size+0xa>

0800495c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800495c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800495e:	f000 fe9f 	bl	80056a0 <vTaskStartScheduler>
  
  return osOK;
}
 8004962:	2000      	movs	r0, #0
 8004964:	bd08      	pop	{r3, pc}

08004966 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004966:	b570      	push	{r4, r5, r6, lr}
 8004968:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800496a:	6946      	ldr	r6, [r0, #20]
 800496c:	692a      	ldr	r2, [r5, #16]
 800496e:	6840      	ldr	r0, [r0, #4]
 8004970:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8004974:	460b      	mov	r3, r1
 8004976:	b086      	sub	sp, #24
 8004978:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800497a:	b176      	cbz	r6, 800499a <osThreadCreate+0x34>
 800497c:	69ad      	ldr	r5, [r5, #24]
 800497e:	b165      	cbz	r5, 800499a <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8004980:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004982:	bf14      	ite	ne
 8004984:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004986:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004988:	9502      	str	r5, [sp, #8]
 800498a:	e88d 0050 	stmia.w	sp, {r4, r6}
 800498e:	f000 fe28 	bl	80055e2 <xTaskCreateStatic>
 8004992:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004994:	9805      	ldr	r0, [sp, #20]
}
 8004996:	b006      	add	sp, #24
 8004998:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800499a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800499c:	bf14      	ite	ne
 800499e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049a0:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049a2:	ad05      	add	r5, sp, #20
 80049a4:	b292      	uxth	r2, r2
 80049a6:	e88d 0030 	stmia.w	sp, {r4, r5}
 80049aa:	f000 fe4b 	bl	8005644 <xTaskCreate>
 80049ae:	2801      	cmp	r0, #1
 80049b0:	d0f0      	beq.n	8004994 <osThreadCreate+0x2e>
      return NULL;
 80049b2:	2000      	movs	r0, #0
 80049b4:	e7ef      	b.n	8004996 <osThreadCreate+0x30>

080049b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049b6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049b8:	2800      	cmp	r0, #0
 80049ba:	bf08      	it	eq
 80049bc:	2001      	moveq	r0, #1
 80049be:	f000 ffb7 	bl	8005930 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049c2:	2000      	movs	r0, #0
 80049c4:	bd08      	pop	{r3, pc}
	...

080049c8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049c8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <prvInsertBlockIntoFreeList+0x40>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4282      	cmp	r2, r0
 80049d0:	d318      	bcc.n	8004a04 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049d2:	685c      	ldr	r4, [r3, #4]
 80049d4:	1919      	adds	r1, r3, r4
 80049d6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d8:	bf01      	itttt	eq
 80049da:	6841      	ldreq	r1, [r0, #4]
 80049dc:	4618      	moveq	r0, r3
 80049de:	1909      	addeq	r1, r1, r4
 80049e0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049e2:	6844      	ldr	r4, [r0, #4]
 80049e4:	1901      	adds	r1, r0, r4
 80049e6:	428a      	cmp	r2, r1
 80049e8:	d107      	bne.n	80049fa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ea:	4908      	ldr	r1, [pc, #32]	; (8004a0c <prvInsertBlockIntoFreeList+0x44>)
 80049ec:	6809      	ldr	r1, [r1, #0]
 80049ee:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049f0:	bf1f      	itttt	ne
 80049f2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049f4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049f6:	1909      	addne	r1, r1, r4
 80049f8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049fa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049fc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049fe:	bf18      	it	ne
 8004a00:	6018      	strne	r0, [r3, #0]
 8004a02:	bd10      	pop	{r4, pc}
 8004a04:	4613      	mov	r3, r2
 8004a06:	e7e1      	b.n	80049cc <prvInsertBlockIntoFreeList+0x4>
 8004a08:	20001788 	.word	0x20001788
 8004a0c:	20000bc0 	.word	0x20000bc0

08004a10 <pvPortMalloc>:
{
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004a16:	f000 fe79 	bl	800570c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004a1a:	493e      	ldr	r1, [pc, #248]	; (8004b14 <pvPortMalloc+0x104>)
 8004a1c:	4d3e      	ldr	r5, [pc, #248]	; (8004b18 <pvPortMalloc+0x108>)
 8004a1e:	680b      	ldr	r3, [r1, #0]
 8004a20:	bb0b      	cbnz	r3, 8004a66 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004a22:	4a3e      	ldr	r2, [pc, #248]	; (8004b1c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a24:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a26:	bf1f      	itttt	ne
 8004a28:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a2a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a2e:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 8004a32:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a34:	bf14      	ite	ne
 8004a36:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a38:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a3c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004a3e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a40:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a44:	4e36      	ldr	r6, [pc, #216]	; (8004b20 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8004a46:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a48:	2000      	movs	r0, #0
 8004a4a:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a4c:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8004a4e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a50:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a52:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a54:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a56:	4b33      	ldr	r3, [pc, #204]	; (8004b24 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a58:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a5a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a5c:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <pvPortMalloc+0x118>)
 8004a5e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a64:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a66:	682f      	ldr	r7, [r5, #0]
 8004a68:	4227      	tst	r7, r4
 8004a6a:	d116      	bne.n	8004a9a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	d041      	beq.n	8004af4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8004a70:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a74:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a76:	bf1c      	itt	ne
 8004a78:	f023 0307 	bicne.w	r3, r3, #7
 8004a7c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a7e:	b163      	cbz	r3, 8004a9a <pvPortMalloc+0x8a>
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <pvPortMalloc+0x118>)
 8004a82:	6816      	ldr	r6, [r2, #0]
 8004a84:	42b3      	cmp	r3, r6
 8004a86:	4690      	mov	r8, r2
 8004a88:	d807      	bhi.n	8004a9a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004a8a:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <pvPortMalloc+0x110>)
 8004a8c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8e:	6868      	ldr	r0, [r5, #4]
 8004a90:	4283      	cmp	r3, r0
 8004a92:	d804      	bhi.n	8004a9e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004a94:	6809      	ldr	r1, [r1, #0]
 8004a96:	428d      	cmp	r5, r1
 8004a98:	d107      	bne.n	8004aaa <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004a9a:	2400      	movs	r4, #0
 8004a9c:	e02a      	b.n	8004af4 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9e:	682c      	ldr	r4, [r5, #0]
 8004aa0:	2c00      	cmp	r4, #0
 8004aa2:	d0f7      	beq.n	8004a94 <pvPortMalloc+0x84>
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4625      	mov	r5, r4
 8004aa8:	e7f1      	b.n	8004a8e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aaa:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aac:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aae:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ab0:	1ac2      	subs	r2, r0, r3
 8004ab2:	2a10      	cmp	r2, #16
 8004ab4:	d90f      	bls.n	8004ad6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ab6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab8:	0741      	lsls	r1, r0, #29
 8004aba:	d008      	beq.n	8004ace <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	e7fe      	b.n	8004acc <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ace:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ad0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ad2:	f7ff ff79 	bl	80049c8 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ad6:	4913      	ldr	r1, [pc, #76]	; (8004b24 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ad8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ada:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004adc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ade:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ae0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8004ae2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ae6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aea:	bf38      	it	cc
 8004aec:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aee:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004af0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004af2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004af4:	f000 fea4 	bl	8005840 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af8:	0763      	lsls	r3, r4, #29
 8004afa:	d008      	beq.n	8004b0e <pvPortMalloc+0xfe>
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	e7fe      	b.n	8004b0c <pvPortMalloc+0xfc>
}
 8004b0e:	4620      	mov	r0, r4
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	20000bc0 	.word	0x20000bc0
 8004b18:	2000177c 	.word	0x2000177c
 8004b1c:	20000bc4 	.word	0x20000bc4
 8004b20:	20001788 	.word	0x20001788
 8004b24:	20001784 	.word	0x20001784
 8004b28:	20001780 	.word	0x20001780

08004b2c <vPortFree>:
{
 8004b2c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004b2e:	4604      	mov	r4, r0
 8004b30:	b370      	cbz	r0, 8004b90 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b32:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <vPortFree+0x68>)
 8004b34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4213      	tst	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <vPortFree+0x24>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	e7fe      	b.n	8004b4e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b50:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004b54:	b141      	cbz	r1, 8004b68 <vPortFree+0x3c>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	e7fe      	b.n	8004b66 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b68:	ea23 0302 	bic.w	r3, r3, r2
 8004b6c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004b70:	f000 fdcc 	bl	800570c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <vPortFree+0x6c>)
 8004b76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004b7a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b7c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b80:	440b      	add	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b84:	f7ff ff20 	bl	80049c8 <prvInsertBlockIntoFreeList>
}
 8004b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004b8c:	f000 be58 	b.w	8005840 <xTaskResumeAll>
 8004b90:	bd10      	pop	{r4, pc}
 8004b92:	bf00      	nop
 8004b94:	2000177c 	.word	0x2000177c
 8004b98:	20001780 	.word	0x20001780

08004b9c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b9c:	f100 0308 	add.w	r3, r0, #8
 8004ba0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004baa:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bac:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bae:	6003      	str	r3, [r0, #0]
 8004bb0:	4770      	bx	lr

08004bb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6103      	str	r3, [r0, #16]
 8004bb6:	4770      	bx	lr

08004bb8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bb8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bc4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004bc6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004bc8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004bca:	3301      	adds	r3, #1
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	4770      	bx	lr

08004bd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bd0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bd2:	1c53      	adds	r3, r2, #1
{
 8004bd4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004bd6:	d10a      	bne.n	8004bee <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bde:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004be0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004be2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004be4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004be6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004be8:	3301      	adds	r3, #1
 8004bea:	6003      	str	r3, [r0, #0]
 8004bec:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bee:	f100 0308 	add.w	r3, r0, #8
 8004bf2:	685c      	ldr	r4, [r3, #4]
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	42aa      	cmp	r2, r5
 8004bf8:	d3ef      	bcc.n	8004bda <vListInsert+0xa>
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	e7f9      	b.n	8004bf2 <vListInsert+0x22>

08004bfe <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bfe:	6841      	ldr	r1, [r0, #4]
 8004c00:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c02:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c04:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c06:	6882      	ldr	r2, [r0, #8]
 8004c08:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c0e:	bf08      	it	eq
 8004c10:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c12:	2200      	movs	r2, #0
 8004c14:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c1c:	6818      	ldr	r0, [r3, #0]
}
 8004c1e:	4770      	bx	lr

08004c20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <prvTaskExitError+0x3c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d008      	beq.n	8004c40 <prvTaskExitError+0x20>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	e7fe      	b.n	8004c3e <prvTaskExitError+0x1e>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0fc      	beq.n	8004c50 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c56:	b002      	add	sp, #8
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000024 	.word	0x20000024

08004c60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c60:	4808      	ldr	r0, [pc, #32]	; (8004c84 <prvPortStartFirstTask+0x24>)
 8004c62:	6800      	ldr	r0, [r0, #0]
 8004c64:	6800      	ldr	r0, [r0, #0]
 8004c66:	f380 8808 	msr	MSP, r0
 8004c6a:	f04f 0000 	mov.w	r0, #0
 8004c6e:	f380 8814 	msr	CONTROL, r0
 8004c72:	b662      	cpsie	i
 8004c74:	b661      	cpsie	f
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	df00      	svc	0
 8004c80:	bf00      	nop
 8004c82:	0000      	.short	0x0000
 8004c84:	e000ed08 	.word	0xe000ed08

08004c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c98 <vPortEnableVFP+0x10>
 8004c8c:	6801      	ldr	r1, [r0, #0]
 8004c8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c92:	6001      	str	r1, [r0, #0]
 8004c94:	4770      	bx	lr
 8004c96:	0000      	.short	0x0000
 8004c98:	e000ed88 	.word	0xe000ed88

08004c9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ca0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <pxPortInitialiseStack+0x28>)
 8004ca6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004caa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cae:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cb2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cb6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cba:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004cbe:	3844      	subs	r0, #68	; 0x44
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	08004c21 	.word	0x08004c21
	...

08004cd0 <SVC_Handler>:
	__asm volatile (
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <pxCurrentTCBConst2>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	6808      	ldr	r0, [r1, #0]
 8004cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	f380 8809 	msr	PSP, r0
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8811 	msr	BASEPRI, r0
 8004cea:	4770      	bx	lr
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst2>:
 8004cf0:	20001798 	.word	0x20001798

08004cf4 <vPortEnterCritical>:
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <vPortEnterCritical+0x3c>)
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004d0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004d0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004d0e:	d10d      	bne.n	8004d2c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d10:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <vPortEnterCritical+0x40>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d18:	d008      	beq.n	8004d2c <vPortEnterCritical+0x38>
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	e7fe      	b.n	8004d2a <vPortEnterCritical+0x36>
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000024 	.word	0x20000024
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004d38:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <vPortExitCritical+0x24>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	b943      	cbnz	r3, 8004d50 <vPortExitCritical+0x18>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	e7fe      	b.n	8004d4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004d50:	3b01      	subs	r3, #1
 8004d52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d54:	b90b      	cbnz	r3, 8004d5a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	4770      	bx	lr
 8004d5c:	20000024 	.word	0x20000024

08004d60 <PendSV_Handler>:
	__asm volatile
 8004d60:	f3ef 8009 	mrs	r0, PSP
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <pxCurrentTCBConst>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f01e 0f10 	tst.w	lr, #16
 8004d70:	bf08      	it	eq
 8004d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	6010      	str	r0, [r2, #0]
 8004d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d84:	f380 8811 	msr	BASEPRI, r0
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f000 fdf2 	bl	8005978 <vTaskSwitchContext>
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f380 8811 	msr	BASEPRI, r0
 8004d9c:	bc09      	pop	{r0, r3}
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6808      	ldr	r0, [r1, #0]
 8004da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da6:	f01e 0f10 	tst.w	lr, #16
 8004daa:	bf08      	it	eq
 8004dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004db0:	f380 8809 	msr	PSP, r0
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <pxCurrentTCBConst>:
 8004dc0:	20001798 	.word	0x20001798

08004dc4 <SysTick_Handler>:
{
 8004dc4:	b508      	push	{r3, lr}
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004dd6:	f000 fca1 	bl	800571c <xTaskIncrementTick>
 8004dda:	b118      	cbz	r0, 8004de4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <SysTick_Handler+0x28>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004de4:	2300      	movs	r3, #0
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	bd08      	pop	{r3, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df2:	4909      	ldr	r1, [pc, #36]	; (8004e18 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004df8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <vPortSetupTimerInterrupt+0x2c>)
 8004dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e06:	4906      	ldr	r1, [pc, #24]	; (8004e20 <vPortSetupTimerInterrupt+0x30>)
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e0c:	2307      	movs	r3, #7
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	e000e010 	.word	0xe000e010
 8004e18:	e000e018 	.word	0xe000e018
 8004e1c:	20000038 	.word	0x20000038
 8004e20:	e000e014 	.word	0xe000e014

08004e24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e24:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <xPortStartScheduler+0xe8>)
 8004e26:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <xPortStartScheduler+0xec>)
{
 8004e28:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	4291      	cmp	r1, r2
 8004e2e:	d108      	bne.n	8004e42 <xPortStartScheduler+0x1e>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	e7fe      	b.n	8004e40 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <xPortStartScheduler+0xf0>)
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d108      	bne.n	8004e5c <xPortStartScheduler+0x38>
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	e7fe      	b.n	8004e5a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e5c:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <xPortStartScheduler+0xf4>)
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e68:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004e76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e7a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e7c:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <xPortStartScheduler+0xfc>)
 8004e7e:	2207      	movs	r2, #7
 8004e80:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e82:	2100      	movs	r1, #0
 8004e84:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004e88:	0600      	lsls	r0, r0, #24
 8004e8a:	f102 34ff 	add.w	r4, r2, #4294967295
 8004e8e:	d40d      	bmi.n	8004eac <xPortStartScheduler+0x88>
 8004e90:	b101      	cbz	r1, 8004e94 <xPortStartScheduler+0x70>
 8004e92:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2a03      	cmp	r2, #3
 8004e98:	d011      	beq.n	8004ebe <xPortStartScheduler+0x9a>
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	e7fe      	b.n	8004eaa <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004eb0:	0052      	lsls	r2, r2, #1
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f88d 2003 	strb.w	r2, [sp, #3]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4622      	mov	r2, r4
 8004ebc:	e7e2      	b.n	8004e84 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ebe:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004ec4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <xPortStartScheduler+0xf4>)
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <xPortStartScheduler+0x100>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ed6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004ede:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004ee0:	f7ff ff86 	bl	8004df0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <xPortStartScheduler+0x104>)
 8004ee6:	2400      	movs	r4, #0
 8004ee8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004eea:	f7ff fecd 	bl	8004c88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eee:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <xPortStartScheduler+0x108>)
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ef6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004ef8:	f7ff feb2 	bl	8004c60 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004efc:	f000 fd3c 	bl	8005978 <vTaskSwitchContext>
	prvTaskExitError();
 8004f00:	f7ff fe8e 	bl	8004c20 <prvTaskExitError>
}
 8004f04:	4620      	mov	r0, r4
 8004f06:	b002      	add	sp, #8
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000ed00 	.word	0xe000ed00
 8004f10:	410fc271 	.word	0x410fc271
 8004f14:	410fc270 	.word	0x410fc270
 8004f18:	e000e400 	.word	0xe000e400
 8004f1c:	20001790 	.word	0x20001790
 8004f20:	20001794 	.word	0x20001794
 8004f24:	e000ed20 	.word	0xe000ed20
 8004f28:	20000024 	.word	0x20000024
 8004f2c:	e000ef34 	.word	0xe000ef34

08004f30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f34:	2b0f      	cmp	r3, #15
 8004f36:	d90e      	bls.n	8004f56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f38:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <vPortValidateInterruptPriority+0x4c>)
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f3c:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <vPortValidateInterruptPriority+0x50>)
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d908      	bls.n	8004f56 <vPortValidateInterruptPriority+0x26>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	e7fe      	b.n	8004f54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <vPortValidateInterruptPriority+0x54>)
 8004f58:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <vPortValidateInterruptPriority+0x58>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d908      	bls.n	8004f78 <vPortValidateInterruptPriority+0x48>
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	e7fe      	b.n	8004f76 <vPortValidateInterruptPriority+0x46>
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000e3f0 	.word	0xe000e3f0
 8004f80:	20001790 	.word	0x20001790
 8004f84:	e000ed0c 	.word	0xe000ed0c
 8004f88:	20001794 	.word	0x20001794

08004f8c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f90:	f7ff feb0 	bl	8004cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004f96:	f7ff fecf 	bl	8004d38 <vPortExitCritical>

	return xReturn;
}
 8004f9a:	fab4 f084 	clz	r0, r4
 8004f9e:	0940      	lsrs	r0, r0, #5
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <prvUnlockQueue>:
{
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004fa6:	f7ff fea5 	bl	8004cf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004faa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fae:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004fb2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	dc14      	bgt.n	8004fe2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004fb8:	23ff      	movs	r3, #255	; 0xff
 8004fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004fbe:	f7ff febb 	bl	8004d38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004fc2:	f7ff fe97 	bl	8004cf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004fc6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fca:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004fce:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	dc12      	bgt.n	8004ffa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004fd4:	23ff      	movs	r3, #255	; 0xff
 8004fd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004fde:	f7ff beab 	b.w	8004d38 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0e7      	beq.n	8004fb8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 fd19 	bl	8005a20 <xTaskRemoveFromEventList>
 8004fee:	b108      	cbz	r0, 8004ff4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004ff0:	f000 fda0 	bl	8005b34 <vTaskMissedYield>
 8004ff4:	3d01      	subs	r5, #1
 8004ff6:	b26d      	sxtb	r5, r5
 8004ff8:	e7dc      	b.n	8004fb4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0e9      	beq.n	8004fd4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005000:	4630      	mov	r0, r6
 8005002:	f000 fd0d 	bl	8005a20 <xTaskRemoveFromEventList>
 8005006:	b108      	cbz	r0, 800500c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005008:	f000 fd94 	bl	8005b34 <vTaskMissedYield>
 800500c:	3d01      	subs	r5, #1
 800500e:	b26d      	sxtb	r5, r5
 8005010:	e7de      	b.n	8004fd0 <prvUnlockQueue+0x2e>
	...

08005014 <xQueueGenericReset>:
{
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005018:	4604      	mov	r4, r0
 800501a:	b940      	cbnz	r0, 800502e <xQueueGenericReset+0x1a>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	e7fe      	b.n	800502c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800502e:	f7ff fe61 	bl	8004cf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005032:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005036:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005038:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800503a:	4343      	muls	r3, r0
 800503c:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800503e:	1a1b      	subs	r3, r3, r0
 8005040:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005042:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005044:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005046:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005048:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800504a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800504c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005054:	b995      	cbnz	r5, 800507c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	b163      	cbz	r3, 8005074 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505a:	f104 0010 	add.w	r0, r4, #16
 800505e:	f000 fcdf 	bl	8005a20 <xTaskRemoveFromEventList>
 8005062:	b138      	cbz	r0, 8005074 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <xQueueGenericReset+0x7c>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005074:	f7ff fe60 	bl	8004d38 <vPortExitCritical>
}
 8005078:	2001      	movs	r0, #1
 800507a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800507c:	f104 0010 	add.w	r0, r4, #16
 8005080:	f7ff fd8c 	bl	8004b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005084:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005088:	f7ff fd88 	bl	8004b9c <vListInitialise>
 800508c:	e7f2      	b.n	8005074 <xQueueGenericReset+0x60>
 800508e:	bf00      	nop
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <xQueueGenericCreate>:
	{
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005098:	4606      	mov	r6, r0
 800509a:	b940      	cbnz	r0, 80050ae <xQueueGenericCreate+0x1a>
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ae:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80050b0:	3048      	adds	r0, #72	; 0x48
 80050b2:	f7ff fcad 	bl	8004a10 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80050b6:	4604      	mov	r4, r0
 80050b8:	b150      	cbz	r0, 80050d0 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80050c0:	b945      	cbnz	r5, 80050d4 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050c2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80050c4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050c6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050c8:	2101      	movs	r1, #1
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7ff ffa2 	bl	8005014 <xQueueGenericReset>
	}
 80050d0:	4620      	mov	r0, r4
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d4:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	e7f3      	b.n	80050c4 <xQueueGenericCreate+0x30>

080050dc <xQueueGiveFromISR>:
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80050e0:	4604      	mov	r4, r0
 80050e2:	b940      	cbnz	r0, 80050f6 <xQueueGiveFromISR+0x1a>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	e7fe      	b.n	80050f4 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80050f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050f8:	b143      	cbz	r3, 800510c <xQueueGiveFromISR+0x30>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	e7fe      	b.n	800510a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800510c:	6803      	ldr	r3, [r0, #0]
 800510e:	b90b      	cbnz	r3, 8005114 <xQueueGiveFromISR+0x38>
 8005110:	6883      	ldr	r3, [r0, #8]
 8005112:	bb73      	cbnz	r3, 8005172 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005114:	f7ff ff0c 	bl	8004f30 <vPortValidateInterruptPriority>
	__asm volatile
 8005118:	f3ef 8611 	mrs	r6, BASEPRI
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800512c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800512e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005130:	429a      	cmp	r2, r3
 8005132:	d301      	bcc.n	8005138 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8005134:	2000      	movs	r0, #0
 8005136:	e014      	b.n	8005162 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005138:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800513c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800513e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005140:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	d110      	bne.n	8005168 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005148:	b90b      	cbnz	r3, 800514e <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 800514a:	2001      	movs	r0, #1
 800514c:	e009      	b.n	8005162 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005152:	f000 fc65 	bl	8005a20 <xTaskRemoveFromEventList>
 8005156:	2800      	cmp	r0, #0
 8005158:	d0f7      	beq.n	800514a <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 800515a:	2d00      	cmp	r5, #0
 800515c:	d0f5      	beq.n	800514a <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800515e:	2001      	movs	r0, #1
 8005160:	6028      	str	r0, [r5, #0]
	__asm volatile
 8005162:	f386 8811 	msr	BASEPRI, r6
}
 8005166:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005168:	3301      	adds	r3, #1
 800516a:	b25b      	sxtb	r3, r3
 800516c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005170:	e7eb      	b.n	800514a <xQueueGiveFromISR+0x6e>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	e7fe      	b.n	8005182 <xQueueGiveFromISR+0xa6>

08005184 <xQueueSemaphoreTake>:
{
 8005184:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8005188:	4604      	mov	r4, r0
{
 800518a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800518c:	b940      	cbnz	r0, 80051a0 <xQueueSemaphoreTake+0x1c>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	e7fe      	b.n	800519e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80051a0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80051a2:	b145      	cbz	r5, 80051b6 <xQueueSemaphoreTake+0x32>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	e7fe      	b.n	80051b4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b6:	f000 fcc3 	bl	8005b40 <xTaskGetSchedulerState>
 80051ba:	b918      	cbnz	r0, 80051c4 <xQueueSemaphoreTake+0x40>
 80051bc:	9d01      	ldr	r5, [sp, #4]
 80051be:	2d00      	cmp	r5, #0
 80051c0:	f040 8095 	bne.w	80052ee <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 80051c4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8005300 <xQueueSemaphoreTake+0x17c>
 80051c8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80051ca:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80051cc:	f7ff fd92 	bl	8004cf4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051d2:	b1e3      	cbz	r3, 800520e <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051d4:	3b01      	subs	r3, #1
 80051d6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	b913      	cbnz	r3, 80051e2 <xQueueSemaphoreTake+0x5e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80051dc:	f000 fd6e 	bl	8005cbc <pvTaskIncrementMutexHeldCount>
 80051e0:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	b163      	cbz	r3, 8005200 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051e6:	f104 0010 	add.w	r0, r4, #16
 80051ea:	f000 fc19 	bl	8005a20 <xTaskRemoveFromEventList>
 80051ee:	b138      	cbz	r0, 8005200 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 80051f0:	4b43      	ldr	r3, [pc, #268]	; (8005300 <xQueueSemaphoreTake+0x17c>)
 80051f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005200:	f7ff fd9a 	bl	8004d38 <vPortExitCritical>
				return pdPASS;
 8005204:	2501      	movs	r5, #1
}
 8005206:	4628      	mov	r0, r5
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	b963      	cbnz	r3, 800522c <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005212:	b145      	cbz	r5, 8005226 <xQueueSemaphoreTake+0xa2>
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	e7fe      	b.n	8005224 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8005226:	f7ff fd87 	bl	8004d38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800522a:	e7ec      	b.n	8005206 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 800522c:	b916      	cbnz	r6, 8005234 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800522e:	a802      	add	r0, sp, #8
 8005230:	f000 fc38 	bl	8005aa4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005234:	f7ff fd80 	bl	8004d38 <vPortExitCritical>
		vTaskSuspendAll();
 8005238:	f000 fa68 	bl	800570c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800523c:	f7ff fd5a 	bl	8004cf4 <vPortEnterCritical>
 8005240:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005244:	2bff      	cmp	r3, #255	; 0xff
 8005246:	bf08      	it	eq
 8005248:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800524c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005250:	2bff      	cmp	r3, #255	; 0xff
 8005252:	bf08      	it	eq
 8005254:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005258:	f7ff fd6e 	bl	8004d38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800525c:	a901      	add	r1, sp, #4
 800525e:	a802      	add	r0, sp, #8
 8005260:	f000 fc2c 	bl	8005abc <xTaskCheckForTimeOut>
 8005264:	bb40      	cbnz	r0, 80052b8 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005266:	4620      	mov	r0, r4
 8005268:	f7ff fe90 	bl	8004f8c <prvIsQueueEmpty>
 800526c:	b1f0      	cbz	r0, 80052ac <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	b93b      	cbnz	r3, 8005282 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8005272:	f7ff fd3f 	bl	8004cf4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005276:	68a0      	ldr	r0, [r4, #8]
 8005278:	f000 fc72 	bl	8005b60 <xTaskPriorityInherit>
 800527c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800527e:	f7ff fd5b 	bl	8004d38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005282:	9901      	ldr	r1, [sp, #4]
 8005284:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005288:	f000 fbb0 	bl	80059ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800528c:	4620      	mov	r0, r4
 800528e:	f7ff fe88 	bl	8004fa2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005292:	f000 fad5 	bl	8005840 <xTaskResumeAll>
 8005296:	b938      	cbnz	r0, 80052a8 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8005298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800529c:	f8c8 3000 	str.w	r3, [r8]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	2601      	movs	r6, #1
 80052aa:	e78f      	b.n	80051cc <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff fe78 	bl	8004fa2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b2:	f000 fac5 	bl	8005840 <xTaskResumeAll>
 80052b6:	e7f7      	b.n	80052a8 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 80052b8:	4620      	mov	r0, r4
 80052ba:	f7ff fe72 	bl	8004fa2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052be:	f000 fabf 	bl	8005840 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff fe62 	bl	8004f8c <prvIsQueueEmpty>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d0ed      	beq.n	80052a8 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	d09a      	beq.n	8005206 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 80052d0:	f7ff fd10 	bl	8004cf4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052d6:	b119      	cbz	r1, 80052e0 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052e0:	68a0      	ldr	r0, [r4, #8]
 80052e2:	f000 fc91 	bl	8005c08 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80052e6:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80052e8:	f7ff fd26 	bl	8004d38 <vPortExitCritical>
 80052ec:	e78b      	b.n	8005206 <xQueueSemaphoreTake+0x82>
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	e7fe      	b.n	80052fe <xQueueSemaphoreTake+0x17a>
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005308:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800530a:	f7ff fcf3 	bl	8004cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800530e:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8005310:	4c2d      	ldr	r4, [pc, #180]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4f2d      	ldr	r7, [pc, #180]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005316:	3201      	adds	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	2d00      	cmp	r5, #0
 800531e:	d145      	bne.n	80053ac <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005320:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11c      	bne.n	8005362 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005328:	1978      	adds	r0, r7, r5
 800532a:	3514      	adds	r5, #20
 800532c:	f7ff fc36 	bl	8004b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005330:	2d8c      	cmp	r5, #140	; 0x8c
 8005332:	d1f9      	bne.n	8005328 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005334:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80053f8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8005338:	4d25      	ldr	r5, [pc, #148]	; (80053d0 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800533a:	4640      	mov	r0, r8
 800533c:	f7ff fc2e 	bl	8004b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff fc2b 	bl	8004b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005346:	4823      	ldr	r0, [pc, #140]	; (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 8005348:	f7ff fc28 	bl	8004b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800534c:	4822      	ldr	r0, [pc, #136]	; (80053d8 <prvAddNewTaskToReadyList+0xd4>)
 800534e:	f7ff fc25 	bl	8004b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005352:	4822      	ldr	r0, [pc, #136]	; (80053dc <prvAddNewTaskToReadyList+0xd8>)
 8005354:	f7ff fc22 	bl	8004b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005358:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <prvAddNewTaskToReadyList+0xdc>)
 800535a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <prvAddNewTaskToReadyList+0xe0>)
 8005360:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8005362:	4a21      	ldr	r2, [pc, #132]	; (80053e8 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8005364:	4921      	ldr	r1, [pc, #132]	; (80053ec <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005366:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005368:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800536a:	3301      	adds	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800536e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005370:	2301      	movs	r3, #1
 8005372:	4093      	lsls	r3, r2
 8005374:	4303      	orrs	r3, r0
 8005376:	2014      	movs	r0, #20
 8005378:	600b      	str	r3, [r1, #0]
 800537a:	fb00 7002 	mla	r0, r0, r2, r7
 800537e:	1d31      	adds	r1, r6, #4
 8005380:	f7ff fc1a 	bl	8004bb8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005384:	f7ff fcd8 	bl	8004d38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <prvAddNewTaskToReadyList+0xec>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	b163      	cbz	r3, 80053a8 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d207      	bcs.n	80053a8 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <prvAddNewTaskToReadyList+0xf0>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <prvAddNewTaskToReadyList+0xec>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1d6      	bne.n	8005362 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80053ba:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80053bc:	bf98      	it	ls
 80053be:	6026      	strls	r6, [r4, #0]
 80053c0:	e7cf      	b.n	8005362 <prvAddNewTaskToReadyList+0x5e>
 80053c2:	bf00      	nop
 80053c4:	20001830 	.word	0x20001830
 80053c8:	20001798 	.word	0x20001798
 80053cc:	200017a4 	.word	0x200017a4
 80053d0:	2000185c 	.word	0x2000185c
 80053d4:	20001878 	.word	0x20001878
 80053d8:	200018a4 	.word	0x200018a4
 80053dc:	20001890 	.word	0x20001890
 80053e0:	2000179c 	.word	0x2000179c
 80053e4:	200017a0 	.word	0x200017a0
 80053e8:	20001840 	.word	0x20001840
 80053ec:	20001844 	.word	0x20001844
 80053f0:	2000188c 	.word	0x2000188c
 80053f4:	e000ed04 	.word	0xe000ed04
 80053f8:	20001848 	.word	0x20001848

080053fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <prvResetNextTaskUnblockTime+0x1c>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <prvResetNextTaskUnblockTime+0x20>)
 8005404:	b919      	cbnz	r1, 800540e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005412:	68d2      	ldr	r2, [r2, #12]
 8005414:	6852      	ldr	r2, [r2, #4]
 8005416:	e7f8      	b.n	800540a <prvResetNextTaskUnblockTime+0xe>
 8005418:	2000179c 	.word	0x2000179c
 800541c:	20001870 	.word	0x20001870

08005420 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005426:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005428:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800542a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800542e:	3a01      	subs	r2, #1
 8005430:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005434:	4680      	mov	r8, r0
 8005436:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005438:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800543c:	b391      	cbz	r1, 80054a4 <prvInitialiseNewTask.isra.2+0x84>
 800543e:	1e4b      	subs	r3, r1, #1
 8005440:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8005444:	311f      	adds	r1, #31
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005446:	7858      	ldrb	r0, [r3, #1]
 8005448:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800544c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005450:	b108      	cbz	r0, 8005456 <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005452:	428b      	cmp	r3, r1
 8005454:	d1f7      	bne.n	8005446 <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005456:	2300      	movs	r3, #0
 8005458:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800545c:	9d08      	ldr	r5, [sp, #32]
 800545e:	2d06      	cmp	r5, #6
 8005460:	bf28      	it	cs
 8005462:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005464:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8005468:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800546a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800546c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800546e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005472:	f7ff fb9e 	bl	8004bb2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005476:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800547a:	f104 0018 	add.w	r0, r4, #24
 800547e:	f7ff fb98 	bl	8004bb2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005482:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005486:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005488:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800548a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800548c:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005490:	464a      	mov	r2, r9
 8005492:	4641      	mov	r1, r8
 8005494:	4630      	mov	r0, r6
 8005496:	f7ff fc01 	bl	8004c9c <pxPortInitialiseStack>
 800549a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800549c:	b107      	cbz	r7, 80054a0 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800549e:	603c      	str	r4, [r7, #0]
 80054a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054a4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80054a8:	e7d8      	b.n	800545c <prvInitialiseNewTask.isra.2+0x3c>

080054aa <prvDeleteTCB>:
	{
 80054aa:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054ac:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 80054b0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054b2:	b93b      	cbnz	r3, 80054c4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80054b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80054b6:	f7ff fb39 	bl	8004b2c <vPortFree>
				vPortFree( pxTCB );
 80054ba:	4620      	mov	r0, r4
	}
 80054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80054c0:	f7ff bb34 	b.w	8004b2c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d0f9      	beq.n	80054bc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d008      	beq.n	80054de <prvDeleteTCB+0x34>
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	e7fe      	b.n	80054dc <prvDeleteTCB+0x32>
 80054de:	bd10      	pop	{r4, pc}

080054e0 <prvIdleTask>:
{
 80054e0:	b580      	push	{r7, lr}
				taskYIELD();
 80054e2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005540 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e6:	4f12      	ldr	r7, [pc, #72]	; (8005530 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e8:	4c12      	ldr	r4, [pc, #72]	; (8005534 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80054ea:	4d13      	ldr	r5, [pc, #76]	; (8005538 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	b963      	cbnz	r3, 800550a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <prvIdleTask+0x5c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d9f8      	bls.n	80054ea <prvIdleTask+0xa>
				taskYIELD();
 80054f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054fc:	f8c8 3000 	str.w	r3, [r8]
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	e7ee      	b.n	80054e8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800550a:	f7ff fbf3 	bl	8004cf4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005512:	1d30      	adds	r0, r6, #4
 8005514:	f7ff fb73 	bl	8004bfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005524:	f7ff fc08 	bl	8004d38 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005528:	4630      	mov	r0, r6
 800552a:	f7ff ffbe 	bl	80054aa <prvDeleteTCB>
 800552e:	e7dd      	b.n	80054ec <prvIdleTask+0xc>
 8005530:	200018a4 	.word	0x200018a4
 8005534:	20001834 	.word	0x20001834
 8005538:	20001830 	.word	0x20001830
 800553c:	200017a4 	.word	0x200017a4
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005548:	4e1b      	ldr	r6, [pc, #108]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800554a:	681d      	ldr	r5, [r3, #0]
{
 800554c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800554e:	6830      	ldr	r0, [r6, #0]
 8005550:	3004      	adds	r0, #4
{
 8005552:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005554:	f7ff fb53 	bl	8004bfe <uxListRemove>
 8005558:	4633      	mov	r3, r6
 800555a:	b940      	cbnz	r0, 800556e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800555c:	6831      	ldr	r1, [r6, #0]
 800555e:	4e17      	ldr	r6, [pc, #92]	; (80055bc <prvAddCurrentTaskToDelayedList+0x78>)
 8005560:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005562:	6832      	ldr	r2, [r6, #0]
 8005564:	2001      	movs	r0, #1
 8005566:	4088      	lsls	r0, r1
 8005568:	ea22 0200 	bic.w	r2, r2, r0
 800556c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800556e:	1c62      	adds	r2, r4, #1
 8005570:	d107      	bne.n	8005582 <prvAddCurrentTaskToDelayedList+0x3e>
 8005572:	b137      	cbz	r7, 8005582 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	4812      	ldr	r0, [pc, #72]	; (80055c0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005578:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800557a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557e:	f7ff bb1b 	b.w	8004bb8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005582:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005584:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8005586:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005588:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800558a:	d907      	bls.n	800559c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <prvAddCurrentTaskToDelayedList+0x80>)
 800558e:	6810      	ldr	r0, [r2, #0]
 8005590:	6819      	ldr	r1, [r3, #0]
}
 8005592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005596:	3104      	adds	r1, #4
 8005598:	f7ff bb1a 	b.w	8004bd0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800559c:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <prvAddCurrentTaskToDelayedList+0x84>)
 800559e:	6810      	ldr	r0, [r2, #0]
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	3104      	adds	r1, #4
 80055a4:	f7ff fb14 	bl	8004bd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <prvAddCurrentTaskToDelayedList+0x88>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80055ae:	bf38      	it	cc
 80055b0:	601c      	strcc	r4, [r3, #0]
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b4:	200018b8 	.word	0x200018b8
 80055b8:	20001798 	.word	0x20001798
 80055bc:	20001844 	.word	0x20001844
 80055c0:	20001890 	.word	0x20001890
 80055c4:	200017a0 	.word	0x200017a0
 80055c8:	2000179c 	.word	0x2000179c
 80055cc:	20001870 	.word	0x20001870

080055d0 <prvTaskIsTaskSuspended.part.0>:
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	e7fe      	b.n	80055e0 <prvTaskIsTaskSuspended.part.0+0x10>

080055e2 <xTaskCreateStatic>:
	{
 80055e2:	b570      	push	{r4, r5, r6, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80055e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80055ea:	b90d      	cbnz	r5, 80055f0 <xTaskCreateStatic+0xe>
 80055ec:	f7ff fff0 	bl	80055d0 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 80055f0:	b944      	cbnz	r4, 8005604 <xTaskCreateStatic+0x22>
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	e7fe      	b.n	8005602 <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005604:	2664      	movs	r6, #100	; 0x64
 8005606:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005608:	9e05      	ldr	r6, [sp, #20]
 800560a:	2e64      	cmp	r6, #100	; 0x64
 800560c:	d008      	beq.n	8005620 <xTaskCreateStatic+0x3e>
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	e7fe      	b.n	800561e <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005620:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005622:	2502      	movs	r5, #2
 8005624:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005628:	ad04      	add	r5, sp, #16
 800562a:	9501      	str	r5, [sp, #4]
 800562c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800562e:	9402      	str	r4, [sp, #8]
 8005630:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005632:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005634:	f7ff fef4 	bl	8005420 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005638:	4620      	mov	r0, r4
 800563a:	f7ff fe63 	bl	8005304 <prvAddNewTaskToReadyList>
	}
 800563e:	9804      	ldr	r0, [sp, #16]
 8005640:	b006      	add	sp, #24
 8005642:	bd70      	pop	{r4, r5, r6, pc}

08005644 <xTaskCreate>:
	{
 8005644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005648:	4607      	mov	r7, r0
 800564a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800564c:	0090      	lsls	r0, r2, #2
	{
 800564e:	4688      	mov	r8, r1
 8005650:	4616      	mov	r6, r2
 8005652:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005654:	f7ff f9dc 	bl	8004a10 <pvPortMalloc>
			if( pxStack != NULL )
 8005658:	4605      	mov	r5, r0
 800565a:	b1e8      	cbz	r0, 8005698 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800565c:	2064      	movs	r0, #100	; 0x64
 800565e:	f7ff f9d7 	bl	8004a10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005662:	4604      	mov	r4, r0
 8005664:	b1a8      	cbz	r0, 8005692 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005666:	2300      	movs	r3, #0
 8005668:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800566c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800566e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005674:	9002      	str	r0, [sp, #8]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4632      	mov	r2, r6
 800567a:	464b      	mov	r3, r9
 800567c:	4641      	mov	r1, r8
 800567e:	4638      	mov	r0, r7
 8005680:	f7ff fece 	bl	8005420 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff fe3d 	bl	8005304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800568a:	2001      	movs	r0, #1
	}
 800568c:	b005      	add	sp, #20
 800568e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005692:	4628      	mov	r0, r5
 8005694:	f7ff fa4a 	bl	8004b2c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800569c:	e7f6      	b.n	800568c <xTaskCreate+0x48>
	...

080056a0 <vTaskStartScheduler>:
{
 80056a0:	b510      	push	{r4, lr}
 80056a2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056a4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056a6:	aa07      	add	r2, sp, #28
 80056a8:	a906      	add	r1, sp, #24
 80056aa:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ac:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ae:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056b0:	f000 fe10 	bl	80062d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056b4:	9b05      	ldr	r3, [sp, #20]
 80056b6:	9302      	str	r3, [sp, #8]
 80056b8:	9b06      	ldr	r3, [sp, #24]
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	9400      	str	r4, [sp, #0]
 80056be:	4623      	mov	r3, r4
 80056c0:	9a07      	ldr	r2, [sp, #28]
 80056c2:	490d      	ldr	r1, [pc, #52]	; (80056f8 <vTaskStartScheduler+0x58>)
 80056c4:	480d      	ldr	r0, [pc, #52]	; (80056fc <vTaskStartScheduler+0x5c>)
 80056c6:	f7ff ff8c 	bl	80055e2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80056ca:	b190      	cbz	r0, 80056f2 <vTaskStartScheduler+0x52>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <vTaskStartScheduler+0x60>)
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <vTaskStartScheduler+0x64>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <vTaskStartScheduler+0x68>)
 80056ec:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80056ee:	f7ff fb99 	bl	8004e24 <xPortStartScheduler>
}
 80056f2:	b008      	add	sp, #32
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	0800cf24 	.word	0x0800cf24
 80056fc:	080054e1 	.word	0x080054e1
 8005700:	20001870 	.word	0x20001870
 8005704:	2000188c 	.word	0x2000188c
 8005708:	200018b8 	.word	0x200018b8

0800570c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800570c:	4a02      	ldr	r2, [pc, #8]	; (8005718 <vTaskSuspendAll+0xc>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	2000183c 	.word	0x2000183c

0800571c <xTaskIncrementTick>:
{
 800571c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005720:	4b3c      	ldr	r3, [pc, #240]	; (8005814 <xTaskIncrementTick+0xf8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d16d      	bne.n	8005804 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005728:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <xTaskIncrementTick+0xfc>)
 800572a:	681c      	ldr	r4, [r3, #0]
 800572c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800572e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005730:	b9bc      	cbnz	r4, 8005762 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005732:	4b3a      	ldr	r3, [pc, #232]	; (800581c <xTaskIncrementTick+0x100>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	b142      	cbz	r2, 800574c <xTaskIncrementTick+0x30>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	e7fe      	b.n	800574a <xTaskIncrementTick+0x2e>
 800574c:	4a34      	ldr	r2, [pc, #208]	; (8005820 <xTaskIncrementTick+0x104>)
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	6810      	ldr	r0, [r2, #0]
 8005752:	6018      	str	r0, [r3, #0]
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	4a33      	ldr	r2, [pc, #204]	; (8005824 <xTaskIncrementTick+0x108>)
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	3301      	adds	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	f7ff fe4d 	bl	80053fc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005762:	4d31      	ldr	r5, [pc, #196]	; (8005828 <xTaskIncrementTick+0x10c>)
 8005764:	4f31      	ldr	r7, [pc, #196]	; (800582c <xTaskIncrementTick+0x110>)
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	429c      	cmp	r4, r3
 800576a:	f04f 0b00 	mov.w	fp, #0
 800576e:	d30a      	bcc.n	8005786 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800581c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8005774:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800583c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005778:	f8da 2000 	ldr.w	r2, [sl]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	b9a2      	cbnz	r2, 80057aa <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005780:	f04f 32ff 	mov.w	r2, #4294967295
 8005784:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	4b29      	ldr	r3, [pc, #164]	; (8005830 <xTaskIncrementTick+0x114>)
 800578a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800578c:	2214      	movs	r2, #20
 800578e:	434a      	muls	r2, r1
 8005790:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005792:	2a02      	cmp	r2, #2
 8005794:	bf28      	it	cs
 8005796:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <xTaskIncrementTick+0x118>)
 800579c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800579e:	2a00      	cmp	r2, #0
}
 80057a0:	bf0c      	ite	eq
 80057a2:	4658      	moveq	r0, fp
 80057a4:	2001      	movne	r0, #1
 80057a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057aa:	f8da 2000 	ldr.w	r2, [sl]
 80057ae:	68d2      	ldr	r2, [r2, #12]
 80057b0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057b2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80057b4:	428c      	cmp	r4, r1
 80057b6:	d201      	bcs.n	80057bc <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 80057b8:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057ba:	e7e4      	b.n	8005786 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057bc:	f106 0804 	add.w	r8, r6, #4
 80057c0:	4640      	mov	r0, r8
 80057c2:	f7ff fa1c 	bl	8004bfe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057c6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80057c8:	b119      	cbz	r1, 80057d2 <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ca:	f106 0018 	add.w	r0, r6, #24
 80057ce:	f7ff fa16 	bl	8004bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057d2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80057d4:	f8d9 3000 	ldr.w	r3, [r9]
 80057d8:	2201      	movs	r2, #1
 80057da:	fa02 f100 	lsl.w	r1, r2, r0
 80057de:	4319      	orrs	r1, r3
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <xTaskIncrementTick+0x114>)
 80057e2:	f8c9 1000 	str.w	r1, [r9]
 80057e6:	f04f 0e14 	mov.w	lr, #20
 80057ea:	4641      	mov	r1, r8
 80057ec:	fb0e 3000 	mla	r0, lr, r0, r3
 80057f0:	f7ff f9e2 	bl	8004bb8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f4:	6838      	ldr	r0, [r7, #0]
 80057f6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80057f8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80057fa:	4291      	cmp	r1, r2
 80057fc:	bf28      	it	cs
 80057fe:	f04f 0b01 	movcs.w	fp, #1
 8005802:	e7b9      	b.n	8005778 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8005804:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <xTaskIncrementTick+0x11c>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800580c:	f04f 0b00 	mov.w	fp, #0
 8005810:	e7c3      	b.n	800579a <xTaskIncrementTick+0x7e>
 8005812:	bf00      	nop
 8005814:	2000183c 	.word	0x2000183c
 8005818:	200018b8 	.word	0x200018b8
 800581c:	2000179c 	.word	0x2000179c
 8005820:	200017a0 	.word	0x200017a0
 8005824:	20001874 	.word	0x20001874
 8005828:	20001870 	.word	0x20001870
 800582c:	20001798 	.word	0x20001798
 8005830:	200017a4 	.word	0x200017a4
 8005834:	200018bc 	.word	0x200018bc
 8005838:	20001838 	.word	0x20001838
 800583c:	20001844 	.word	0x20001844

08005840 <xTaskResumeAll>:
{
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005844:	4c31      	ldr	r4, [pc, #196]	; (800590c <xTaskResumeAll+0xcc>)
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	b943      	cbnz	r3, 800585c <xTaskResumeAll+0x1c>
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	e7fe      	b.n	800585a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800585c:	f7ff fa4a 	bl	8004cf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005866:	6824      	ldr	r4, [r4, #0]
 8005868:	b12c      	cbz	r4, 8005876 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800586a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800586c:	f7ff fa64 	bl	8004d38 <vPortExitCritical>
}
 8005870:	4620      	mov	r0, r4
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <xTaskResumeAll+0xd0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f5      	beq.n	800586a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005928 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8005882:	4f24      	ldr	r7, [pc, #144]	; (8005914 <xTaskResumeAll+0xd4>)
 8005884:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800592c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005888:	f8d9 3000 	ldr.w	r3, [r9]
 800588c:	b9e3      	cbnz	r3, 80058c8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800588e:	b10c      	cbz	r4, 8005894 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8005890:	f7ff fdb4 	bl	80053fc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005894:	4d20      	ldr	r5, [pc, #128]	; (8005918 <xTaskResumeAll+0xd8>)
 8005896:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005898:	b144      	cbz	r4, 80058ac <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800589a:	4e20      	ldr	r6, [pc, #128]	; (800591c <xTaskResumeAll+0xdc>)
 800589c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800589e:	f7ff ff3d 	bl	800571c <xTaskIncrementTick>
 80058a2:	b100      	cbz	r0, 80058a6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80058a4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058a6:	3c01      	subs	r4, #1
 80058a8:	d1f9      	bne.n	800589e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80058aa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <xTaskResumeAll+0xdc>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0da      	beq.n	800586a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <xTaskResumeAll+0xe0>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80058c4:	2401      	movs	r4, #1
 80058c6:	e7d1      	b.n	800586c <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80058cc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ce:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058d0:	f104 0018 	add.w	r0, r4, #24
 80058d4:	f7ff f993 	bl	8004bfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff f990 	bl	8004bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	2501      	movs	r5, #1
 80058e4:	fa05 f302 	lsl.w	r3, r5, r2
 80058e8:	2014      	movs	r0, #20
 80058ea:	430b      	orrs	r3, r1
 80058ec:	fb00 8002 	mla	r0, r0, r2, r8
 80058f0:	4631      	mov	r1, r6
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	f7ff f960 	bl	8004bb8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <xTaskResumeAll+0xe4>)
 80058fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8005902:	bf24      	itt	cs
 8005904:	4b05      	ldrcs	r3, [pc, #20]	; (800591c <xTaskResumeAll+0xdc>)
 8005906:	601d      	strcs	r5, [r3, #0]
 8005908:	e7be      	b.n	8005888 <xTaskResumeAll+0x48>
 800590a:	bf00      	nop
 800590c:	2000183c 	.word	0x2000183c
 8005910:	20001830 	.word	0x20001830
 8005914:	20001844 	.word	0x20001844
 8005918:	20001838 	.word	0x20001838
 800591c:	200018bc 	.word	0x200018bc
 8005920:	e000ed04 	.word	0xe000ed04
 8005924:	20001798 	.word	0x20001798
 8005928:	20001878 	.word	0x20001878
 800592c:	200017a4 	.word	0x200017a4

08005930 <vTaskDelay>:
	{
 8005930:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005932:	b940      	cbnz	r0, 8005946 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <vTaskDelay+0x40>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <vTaskDelay+0x44>)
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	b141      	cbz	r1, 800595e <vTaskDelay+0x2e>
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	e7fe      	b.n	800595c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800595e:	f7ff fed5 	bl	800570c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005962:	f7ff fdef 	bl	8005544 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005966:	f7ff ff6b 	bl	8005840 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800596a:	2800      	cmp	r0, #0
 800596c:	d0e2      	beq.n	8005934 <vTaskDelay+0x4>
 800596e:	bd08      	pop	{r3, pc}
 8005970:	e000ed04 	.word	0xe000ed04
 8005974:	2000183c 	.word	0x2000183c

08005978 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005978:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <vTaskSwitchContext+0x60>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <vTaskSwitchContext+0x64>)
{
 800597e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005980:	b112      	cbz	r2, 8005988 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005982:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005988:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598a:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <vTaskSwitchContext+0x68>)
 800598c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f1c3 031f 	rsb	r3, r3, #31
 8005998:	2214      	movs	r2, #20
 800599a:	4912      	ldr	r1, [pc, #72]	; (80059e4 <vTaskSwitchContext+0x6c>)
 800599c:	435a      	muls	r2, r3
 800599e:	1888      	adds	r0, r1, r2
 80059a0:	588c      	ldr	r4, [r1, r2]
 80059a2:	b944      	cbnz	r4, 80059b6 <vTaskSwitchContext+0x3e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	e7fe      	b.n	80059b4 <vTaskSwitchContext+0x3c>
 80059b6:	6844      	ldr	r4, [r0, #4]
 80059b8:	3208      	adds	r2, #8
 80059ba:	6864      	ldr	r4, [r4, #4]
 80059bc:	6044      	str	r4, [r0, #4]
 80059be:	440a      	add	r2, r1
 80059c0:	4294      	cmp	r4, r2
 80059c2:	bf04      	itt	eq
 80059c4:	6862      	ldreq	r2, [r4, #4]
 80059c6:	6042      	streq	r2, [r0, #4]
 80059c8:	2214      	movs	r2, #20
 80059ca:	fb02 1303 	mla	r3, r2, r3, r1
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <vTaskSwitchContext+0x70>)
 80059d4:	e7d6      	b.n	8005984 <vTaskSwitchContext+0xc>
 80059d6:	bf00      	nop
 80059d8:	2000183c 	.word	0x2000183c
 80059dc:	200018bc 	.word	0x200018bc
 80059e0:	20001844 	.word	0x20001844
 80059e4:	200017a4 	.word	0x200017a4
 80059e8:	20001798 	.word	0x20001798

080059ec <vTaskPlaceOnEventList>:
{
 80059ec:	b510      	push	{r4, lr}
 80059ee:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80059f0:	b940      	cbnz	r0, 8005a04 <vTaskPlaceOnEventList+0x18>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	e7fe      	b.n	8005a02 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <vTaskPlaceOnEventList+0x30>)
 8005a06:	6819      	ldr	r1, [r3, #0]
 8005a08:	3118      	adds	r1, #24
 8005a0a:	f7ff f8e1 	bl	8004bd0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a0e:	4620      	mov	r0, r4
 8005a10:	2101      	movs	r1, #1
}
 8005a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a16:	f7ff bd95 	b.w	8005544 <prvAddCurrentTaskToDelayedList>
 8005a1a:	bf00      	nop
 8005a1c:	20001798 	.word	0x20001798

08005a20 <xTaskRemoveFromEventList>:
{
 8005a20:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a22:	68c3      	ldr	r3, [r0, #12]
 8005a24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005a26:	b944      	cbnz	r4, 8005a3a <xTaskRemoveFromEventList+0x1a>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	e7fe      	b.n	8005a38 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a3a:	f104 0518 	add.w	r5, r4, #24
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f7ff f8dd 	bl	8004bfe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <xTaskRemoveFromEventList+0x6c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	b9e3      	cbnz	r3, 8005a84 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a4a:	1d25      	adds	r5, r4, #4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff f8d6 	bl	8004bfe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a52:	490f      	ldr	r1, [pc, #60]	; (8005a90 <xTaskRemoveFromEventList+0x70>)
 8005a54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a56:	6808      	ldr	r0, [r1, #0]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4093      	lsls	r3, r2
 8005a5c:	4303      	orrs	r3, r0
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <xTaskRemoveFromEventList+0x74>)
 8005a62:	2014      	movs	r0, #20
 8005a64:	4629      	mov	r1, r5
 8005a66:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a6a:	f7ff f8a5 	bl	8004bb8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <xTaskRemoveFromEventList+0x78>)
 8005a70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005a78:	bf83      	ittte	hi
 8005a7a:	4b08      	ldrhi	r3, [pc, #32]	; (8005a9c <xTaskRemoveFromEventList+0x7c>)
 8005a7c:	2001      	movhi	r0, #1
 8005a7e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005a80:	2000      	movls	r0, #0
}
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a84:	4629      	mov	r1, r5
 8005a86:	4806      	ldr	r0, [pc, #24]	; (8005aa0 <xTaskRemoveFromEventList+0x80>)
 8005a88:	e7ef      	b.n	8005a6a <xTaskRemoveFromEventList+0x4a>
 8005a8a:	bf00      	nop
 8005a8c:	2000183c 	.word	0x2000183c
 8005a90:	20001844 	.word	0x20001844
 8005a94:	200017a4 	.word	0x200017a4
 8005a98:	20001798 	.word	0x20001798
 8005a9c:	200018bc 	.word	0x200018bc
 8005aa0:	20001878 	.word	0x20001878

08005aa4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <vTaskInternalSetTimeOutState+0x10>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aaa:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <vTaskInternalSetTimeOutState+0x14>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6043      	str	r3, [r0, #4]
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20001874 	.word	0x20001874
 8005ab8:	200018b8 	.word	0x200018b8

08005abc <xTaskCheckForTimeOut>:
{
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b940      	cbnz	r0, 8005ad6 <xTaskCheckForTimeOut+0x1a>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	e7fe      	b.n	8005ad4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005ad6:	b941      	cbnz	r1, 8005aea <xTaskCheckForTimeOut+0x2e>
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	e7fe      	b.n	8005ae8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005aea:	f7ff f903 	bl	8004cf4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005af0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8005af2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	1c58      	adds	r0, r3, #1
 8005af8:	d00e      	beq.n	8005b18 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005afa:	480d      	ldr	r0, [pc, #52]	; (8005b30 <xTaskCheckForTimeOut+0x74>)
 8005afc:	682e      	ldr	r6, [r5, #0]
 8005afe:	6800      	ldr	r0, [r0, #0]
 8005b00:	4286      	cmp	r6, r0
 8005b02:	d001      	beq.n	8005b08 <xTaskCheckForTimeOut+0x4c>
 8005b04:	428a      	cmp	r2, r1
 8005b06:	d20e      	bcs.n	8005b26 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b08:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d209      	bcs.n	8005b22 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7ff ffc6 	bl	8005aa4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005b18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005b1a:	f7ff f90d 	bl	8004d38 <vPortExitCritical>
}
 8005b1e:	4620      	mov	r0, r4
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005b26:	2401      	movs	r4, #1
 8005b28:	e7f7      	b.n	8005b1a <xTaskCheckForTimeOut+0x5e>
 8005b2a:	bf00      	nop
 8005b2c:	200018b8 	.word	0x200018b8
 8005b30:	20001874 	.word	0x20001874

08005b34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005b34:	4b01      	ldr	r3, [pc, #4]	; (8005b3c <vTaskMissedYield+0x8>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	4770      	bx	lr
 8005b3c:	200018bc 	.word	0x200018bc

08005b40 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <xTaskGetSchedulerState+0x18>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	b133      	cbz	r3, 8005b54 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <xTaskGetSchedulerState+0x1c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2002      	moveq	r0, #2
 8005b50:	2000      	movne	r0, #0
 8005b52:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b54:	2001      	movs	r0, #1
	}
 8005b56:	4770      	bx	lr
 8005b58:	2000188c 	.word	0x2000188c
 8005b5c:	2000183c 	.word	0x2000183c

08005b60 <xTaskPriorityInherit>:
	{
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005b64:	4604      	mov	r4, r0
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d035      	beq.n	8005bd6 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b6a:	4a24      	ldr	r2, [pc, #144]	; (8005bfc <xTaskPriorityInherit+0x9c>)
 8005b6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b6e:	6811      	ldr	r1, [r2, #0]
 8005b70:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005b72:	428b      	cmp	r3, r1
 8005b74:	4617      	mov	r7, r2
 8005b76:	d237      	bcs.n	8005be8 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b78:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b7a:	4d21      	ldr	r5, [pc, #132]	; (8005c00 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b7c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7e:	bfa1      	itttt	ge
 8005b80:	683a      	ldrge	r2, [r7, #0]
 8005b82:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005b84:	f1c2 0207 	rsbge	r2, r2, #7
 8005b88:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b8a:	2614      	movs	r6, #20
 8005b8c:	6942      	ldr	r2, [r0, #20]
 8005b8e:	fb06 5303 	mla	r3, r6, r3, r5
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d122      	bne.n	8005bdc <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b96:	f100 0804 	add.w	r8, r0, #4
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f7ff f82f 	bl	8004bfe <uxListRemove>
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <xTaskPriorityInherit+0xa4>)
 8005ba2:	b948      	cbnz	r0, 8005bb8 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005ba4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ba6:	4346      	muls	r6, r0
 8005ba8:	59aa      	ldr	r2, [r5, r6]
 8005baa:	b92a      	cbnz	r2, 8005bb8 <xTaskPriorityInherit+0x58>
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4081      	lsls	r1, r0
 8005bb2:	ea22 0201 	bic.w	r2, r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bb8:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bba:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bbe:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bc0:	2401      	movs	r4, #1
 8005bc2:	fa04 f002 	lsl.w	r0, r4, r2
 8005bc6:	4308      	orrs	r0, r1
 8005bc8:	6018      	str	r0, [r3, #0]
 8005bca:	2014      	movs	r0, #20
 8005bcc:	4641      	mov	r1, r8
 8005bce:	fb00 5002 	mla	r0, r0, r2, r5
 8005bd2:	f7fe fff1 	bl	8004bb8 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8005bd6:	4620      	mov	r0, r4
	}
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8005be2:	2001      	movs	r0, #1
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8005bec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005bee:	42a0      	cmp	r0, r4
 8005bf0:	bf2c      	ite	cs
 8005bf2:	2000      	movcs	r0, #0
 8005bf4:	2001      	movcc	r0, #1
 8005bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20001798 	.word	0x20001798
 8005c00:	200017a4 	.word	0x200017a4
 8005c04:	20001844 	.word	0x20001844

08005c08 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d04d      	beq.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c10:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005c12:	b942      	cbnz	r2, 8005c26 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	e7fe      	b.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005c26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	bf38      	it	cc
 8005c2c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c30:	428b      	cmp	r3, r1
 8005c32:	d03b      	beq.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c34:	2a01      	cmp	r2, #1
 8005c36:	d139      	bne.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4290      	cmp	r0, r2
 8005c3e:	d108      	bne.n	8005c52 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	e7fe      	b.n	8005c50 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c52:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c54:	4d17      	ldr	r5, [pc, #92]	; (8005cb4 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8005c56:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c58:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c5a:	f04f 0614 	mov.w	r6, #20
 8005c5e:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	bfa8      	it	ge
 8005c62:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c66:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	bfa8      	it	ge
 8005c6c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11c      	bne.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c72:	1d07      	adds	r7, r0, #4
 8005c74:	4638      	mov	r0, r7
 8005c76:	f7fe ffc2 	bl	8004bfe <uxListRemove>
 8005c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c7c:	4c0e      	ldr	r4, [pc, #56]	; (8005cb8 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005c7e:	b940      	cbnz	r0, 8005c92 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c80:	4356      	muls	r6, r2
 8005c82:	59ab      	ldr	r3, [r5, r6]
 8005c84:	b92b      	cbnz	r3, 8005c92 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4091      	lsls	r1, r2
 8005c8c:	ea23 0301 	bic.w	r3, r3, r1
 8005c90:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8005c92:	6821      	ldr	r1, [r4, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	4093      	lsls	r3, r2
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	2014      	movs	r0, #20
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8005ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8005ca8:	f7fe bf86 	b.w	8004bb8 <vListInsertEnd>
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20001798 	.word	0x20001798
 8005cb4:	200017a4 	.word	0x200017a4
 8005cb8:	20001844 	.word	0x20001844

08005cbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <pvTaskIncrementMutexHeldCount+0x14>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	b11a      	cbz	r2, 8005cca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	658a      	str	r2, [r1, #88]	; 0x58
		return pxCurrentTCB;
 8005cca:	6818      	ldr	r0, [r3, #0]
	}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20001798 	.word	0x20001798

08005cd4 <xTaskNotifyWait>:
	{
 8005cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005cd8:	4c1f      	ldr	r4, [pc, #124]	; (8005d58 <xTaskNotifyWait+0x84>)
	{
 8005cda:	461e      	mov	r6, r3
 8005cdc:	4680      	mov	r8, r0
 8005cde:	460f      	mov	r7, r1
 8005ce0:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8005ce2:	f7ff f807 	bl	8004cf4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d014      	beq.n	8005d1a <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf4:	ea22 0208 	bic.w	r2, r2, r8
 8005cf8:	65da      	str	r2, [r3, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8005d02:	b156      	cbz	r6, 8005d1a <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff fc1d 	bl	8005544 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <xTaskNotifyWait+0x88>)
 8005d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8005d1a:	f7ff f80d 	bl	8004d38 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005d1e:	f7fe ffe9 	bl	8004cf4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8005d22:	b115      	cbz	r5, 8005d2a <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005d30:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005d32:	bf01      	itttt	eq
 8005d34:	6823      	ldreq	r3, [r4, #0]
 8005d36:	6dd9      	ldreq	r1, [r3, #92]	; 0x5c
 8005d38:	43b9      	biceq	r1, r7
 8005d3a:	65d9      	streq	r1, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8005d42:	bf0c      	ite	eq
 8005d44:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8005d46:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8005d4c:	f7fe fff4 	bl	8004d38 <vPortExitCritical>
	}
 8005d50:	4628      	mov	r0, r5
 8005d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d56:	bf00      	nop
 8005d58:	20001798 	.word	0x20001798
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <xTaskGenericNotify>:
	{
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	460e      	mov	r6, r1
 8005d64:	4617      	mov	r7, r2
 8005d66:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8005d68:	4604      	mov	r4, r0
 8005d6a:	b940      	cbnz	r0, 8005d7e <xTaskGenericNotify+0x1e>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	e7fe      	b.n	8005d7c <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8005d7e:	f7fe ffb9 	bl	8004cf4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005d82:	b10d      	cbz	r5, 8005d88 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005d84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d86:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005d88:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005d8c:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005d8e:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005d90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			switch( eAction )
 8005d94:	2f04      	cmp	r7, #4
 8005d96:	d816      	bhi.n	8005dc6 <xTaskGenericNotify+0x66>
 8005d98:	e8df f007 	tbb	[pc, r7]
 8005d9c:	0507030a 	.word	0x0507030a
 8005da0:	11          	.byte	0x11
 8005da1:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005da2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005da4:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8005da6:	65e6      	str	r6, [r4, #92]	; 0x5c
 8005da8:	e002      	b.n	8005db0 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8005daa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005dac:	3301      	adds	r3, #1
 8005dae:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005db0:	2d01      	cmp	r5, #1
 8005db2:	d014      	beq.n	8005dde <xTaskGenericNotify+0x7e>
	{
 8005db4:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8005db6:	f7fe ffbf 	bl	8004d38 <vPortExitCritical>
	}
 8005dba:	4628      	mov	r0, r5
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005dbe:	2d02      	cmp	r5, #2
 8005dc0:	d1f1      	bne.n	8005da6 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	e7f7      	b.n	8005db6 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005dc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005dc8:	3301      	adds	r3, #1
 8005dca:	d0f1      	beq.n	8005db0 <xTaskGenericNotify+0x50>
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	e7fe      	b.n	8005ddc <xTaskGenericNotify+0x7c>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dde:	1d26      	adds	r6, r4, #4
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7fe ff0c 	bl	8004bfe <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005de6:	4914      	ldr	r1, [pc, #80]	; (8005e38 <xTaskGenericNotify+0xd8>)
 8005de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dea:	6808      	ldr	r0, [r1, #0]
 8005dec:	fa05 f302 	lsl.w	r3, r5, r2
 8005df0:	4303      	orrs	r3, r0
 8005df2:	600b      	str	r3, [r1, #0]
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <xTaskGenericNotify+0xdc>)
 8005df6:	2014      	movs	r0, #20
 8005df8:	fb00 3002 	mla	r0, r0, r2, r3
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	f7fe fedb 	bl	8004bb8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e04:	b143      	cbz	r3, 8005e18 <xTaskGenericNotify+0xb8>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	e7fe      	b.n	8005e16 <xTaskGenericNotify+0xb6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <xTaskGenericNotify+0xe0>)
 8005e1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d9c7      	bls.n	8005db4 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <xTaskGenericNotify+0xe4>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	e7bf      	b.n	8005db6 <xTaskGenericNotify+0x56>
 8005e36:	bf00      	nop
 8005e38:	20001844 	.word	0x20001844
 8005e3c:	200017a4 	.word	0x200017a4
 8005e40:	20001798 	.word	0x20001798
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8005e48:	b530      	push	{r4, r5, lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005e4a:	2101      	movs	r1, #1
{
 8005e4c:	b08b      	sub	sp, #44	; 0x2c
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005e4e:	2000      	movs	r0, #0
 8005e50:	f001 fd1a 	bl	8007888 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8005e54:	2000      	movs	r0, #0
 8005e56:	f001 fcd9 	bl	800780c <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f001 fd8a 	bl	8007974 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005e60:	2000      	movs	r0, #0
 8005e62:	f001 fd5d 	bl	8007920 <BSP_PB_GetState>
 8005e66:	4b4a      	ldr	r3, [pc, #296]	; (8005f90 <MX_BlueNRG_MS_Init+0x148>)
 8005e68:	4d4a      	ldr	r5, [pc, #296]	; (8005f94 <MX_BlueNRG_MS_Init+0x14c>)
  if (BLE_Role == CLIENT) {
 8005e6a:	4c4b      	ldr	r4, [pc, #300]	; (8005f98 <MX_BlueNRG_MS_Init+0x150>)
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005e6c:	b2c0      	uxtb	r0, r0
 8005e6e:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 8005e70:	2100      	movs	r1, #0
 8005e72:	484a      	ldr	r0, [pc, #296]	; (8005f9c <MX_BlueNRG_MS_Init+0x154>)
 8005e74:	f7fe fbc8 	bl	8004608 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8005e78:	f10d 011e 	add.w	r1, sp, #30
 8005e7c:	f10d 0017 	add.w	r0, sp, #23
 8005e80:	f7fe fafc 	bl	800447c <getBlueNRGVersion>
  hci_reset();
 8005e84:	f7fe fb1b 	bl	80044be <hci_reset>
  delayMicroseconds(100000);
 8005e88:	4845      	ldr	r0, [pc, #276]	; (8005fa0 <MX_BlueNRG_MS_Init+0x158>)
 8005e8a:	f000 ff69 	bl	8006d60 <delayMicroseconds>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8005e8e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005e92:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8005e96:	4843      	ldr	r0, [pc, #268]	; (8005fa4 <MX_BlueNRG_MS_Init+0x15c>)
 8005e98:	f002 fdde 	bl	8008a58 <printf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8005e9c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 8005ea2:	bf84      	itt	hi
 8005ea4:	2301      	movhi	r3, #1
 8005ea6:	702b      	strbhi	r3, [r5, #0]
  if (BLE_Role == CLIENT) {
 8005ea8:	7823      	ldrb	r3, [r4, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d156      	bne.n	8005f5c <MX_BlueNRG_MS_Init+0x114>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8005eae:	22bb      	movs	r2, #187	; 0xbb
 8005eb0:	f88d 2020 	strb.w	r2, [sp, #32]
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005eb4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005eb8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8005ebc:	23e1      	movs	r3, #225	; 0xe1
 8005ebe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ec8:	2106      	movs	r1, #6
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005eca:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ecc:	aa08      	add	r2, sp, #32
 8005ece:	2000      	movs	r0, #0
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005ed0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005ed4:	f7fe fa7a 	bl	80043cc <aci_hal_write_config_data>
  if (ret) {
 8005ed8:	4601      	mov	r1, r0
 8005eda:	b110      	cbz	r0, 8005ee2 <MX_BlueNRG_MS_Init+0x9a>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8005edc:	4832      	ldr	r0, [pc, #200]	; (8005fa8 <MX_BlueNRG_MS_Init+0x160>)
 8005ede:	f002 fdbb 	bl	8008a58 <printf>
  ret = aci_gatt_init();    
 8005ee2:	f7fe f8dd 	bl	80040a0 <aci_gatt_init>
  if (ret) {
 8005ee6:	b110      	cbz	r0, 8005eee <MX_BlueNRG_MS_Init+0xa6>
    printf("GATT_Init failed.\n");
 8005ee8:	4830      	ldr	r0, [pc, #192]	; (8005fac <MX_BlueNRG_MS_Init+0x164>)
 8005eea:	f002 fe41 	bl	8008b70 <puts>
  if (BLE_Role == SERVER) {
 8005eee:	7820      	ldrb	r0, [r4, #0]
 8005ef0:	2801      	cmp	r0, #1
 8005ef2:	ab07      	add	r3, sp, #28
 8005ef4:	f10d 021a 	add.w	r2, sp, #26
 8005ef8:	d139      	bne.n	8005f6e <MX_BlueNRG_MS_Init+0x126>
    if (bnrg_expansion_board == IDB05A1) {
 8005efa:	782d      	ldrb	r5, [r5, #0]
 8005efc:	2d01      	cmp	r5, #1
 8005efe:	d132      	bne.n	8005f66 <MX_BlueNRG_MS_Init+0x11e>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f00:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005f04:	2100      	movs	r1, #0
 8005f06:	ab06      	add	r3, sp, #24
 8005f08:	2207      	movs	r2, #7
 8005f0a:	4628      	mov	r0, r5
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f0c:	f7fd ff65 	bl	8003dda <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 8005f10:	b110      	cbz	r0, 8005f18 <MX_BlueNRG_MS_Init+0xd0>
    printf("GAP_Init failed.\n");
 8005f12:	4827      	ldr	r0, [pc, #156]	; (8005fb0 <MX_BlueNRG_MS_Init+0x168>)
 8005f14:	f002 fe2c 	bl	8008b70 <puts>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8005f18:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <MX_BlueNRG_MS_Init+0x16c>)
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2310      	movs	r3, #16
 8005f20:	2001      	movs	r0, #1
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	9003      	str	r0, [sp, #12]
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	2307      	movs	r3, #7
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	f7fe f82d 	bl	8003f8a <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 8005f30:	b910      	cbnz	r0, 8005f38 <MX_BlueNRG_MS_Init+0xf0>
    printf("BLE Stack Initialized.\n");
 8005f32:	4821      	ldr	r0, [pc, #132]	; (8005fb8 <MX_BlueNRG_MS_Init+0x170>)
 8005f34:	f002 fe1c 	bl	8008b70 <puts>
  if (BLE_Role == SERVER) {
 8005f38:	7823      	ldrb	r3, [r4, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d126      	bne.n	8005f8c <MX_BlueNRG_MS_Init+0x144>
    printf("SERVER: BLE Stack Initialized\n");
 8005f3e:	481f      	ldr	r0, [pc, #124]	; (8005fbc <MX_BlueNRG_MS_Init+0x174>)
 8005f40:	f002 fe16 	bl	8008b70 <puts>
    ret = Add_Sample_Service();
 8005f44:	f001 f8f8 	bl	8007138 <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS)
 8005f48:	b9f0      	cbnz	r0, 8005f88 <MX_BlueNRG_MS_Init+0x140>
      printf("Service added successfully.\n");
 8005f4a:	481d      	ldr	r0, [pc, #116]	; (8005fc0 <MX_BlueNRG_MS_Init+0x178>)
    printf("CLIENT: BLE Stack Initialized\n");
 8005f4c:	f002 fe10 	bl	8008b70 <puts>
  ret = aci_hal_set_tx_power_level(1,4);
 8005f50:	2104      	movs	r1, #4
 8005f52:	2001      	movs	r0, #1
 8005f54:	f7fe fa6c 	bl	8004430 <aci_hal_set_tx_power_level>
}
 8005f58:	b00b      	add	sp, #44	; 0x2c
 8005f5a:	bd30      	pop	{r4, r5, pc}
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8005f5c:	23aa      	movs	r3, #170	; 0xaa
 8005f5e:	f88d 3020 	strb.w	r3, [sp, #32]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e7a6      	b.n	8005eb4 <MX_BlueNRG_MS_Init+0x6c>
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f66:	a906      	add	r1, sp, #24
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f68:	f7fd ff75 	bl	8003e56 <aci_gap_init_IDB04A1>
 8005f6c:	e7d0      	b.n	8005f10 <MX_BlueNRG_MS_Init+0xc8>
    if (bnrg_expansion_board == IDB05A1) {
 8005f6e:	7829      	ldrb	r1, [r5, #0]
 8005f70:	2901      	cmp	r1, #1
 8005f72:	d106      	bne.n	8005f82 <MX_BlueNRG_MS_Init+0x13a>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f74:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005f78:	2100      	movs	r1, #0
 8005f7a:	ab06      	add	r3, sp, #24
 8005f7c:	2207      	movs	r2, #7
 8005f7e:	2004      	movs	r0, #4
 8005f80:	e7c4      	b.n	8005f0c <MX_BlueNRG_MS_Init+0xc4>
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8005f82:	a906      	add	r1, sp, #24
 8005f84:	2003      	movs	r0, #3
 8005f86:	e7ef      	b.n	8005f68 <MX_BlueNRG_MS_Init+0x120>
      printf("Error while adding service.\n");
 8005f88:	480e      	ldr	r0, [pc, #56]	; (8005fc4 <MX_BlueNRG_MS_Init+0x17c>)
 8005f8a:	e7df      	b.n	8005f4c <MX_BlueNRG_MS_Init+0x104>
    printf("CLIENT: BLE Stack Initialized\n");
 8005f8c:	480e      	ldr	r0, [pc, #56]	; (8005fc8 <MX_BlueNRG_MS_Init+0x180>)
 8005f8e:	e7dd      	b.n	8005f4c <MX_BlueNRG_MS_Init+0x104>
 8005f90:	20000029 	.word	0x20000029
 8005f94:	200018c0 	.word	0x200018c0
 8005f98:	20000028 	.word	0x20000028
 8005f9c:	0800750d 	.word	0x0800750d
 8005fa0:	000186a0 	.word	0x000186a0
 8005fa4:	0800cf29 	.word	0x0800cf29
 8005fa8:	0800cf3d 	.word	0x0800cf3d
 8005fac:	0800cf5d 	.word	0x0800cf5d
 8005fb0:	0800cf6f 	.word	0x0800cf6f
 8005fb4:	0001e240 	.word	0x0001e240
 8005fb8:	0800cf80 	.word	0x0800cf80
 8005fbc:	0800cf97 	.word	0x0800cf97
 8005fc0:	0800cfb5 	.word	0x0800cfb5
 8005fc4:	0800cfd1 	.word	0x0800cfd1
 8005fc8:	0800cfed 	.word	0x0800cfed

08005fcc <MX_BlueNRG_MS_Process>:
{
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 * @param  None
 * @retval None
 */
static void User_Process(uint8_t *data, uint8_t length)
{
  if (set_connectable) 
 8005fce:	4c22      	ldr	r4, [pc, #136]	; (8006058 <MX_BlueNRG_MS_Process+0x8c>)
 8005fd0:	7823      	ldrb	r3, [r4, #0]
{
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	460e      	mov	r6, r1
  if (set_connectable) 
 8005fd6:	b143      	cbz	r3, 8005fea <MX_BlueNRG_MS_Process+0x1e>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8005fd8:	f001 f916 	bl	8007208 <Make_Connection>
    set_connectable = FALSE;
 8005fdc:	2000      	movs	r0, #0
 8005fde:	7020      	strb	r0, [r4, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005fe0:	f001 fc9e 	bl	8007920 <BSP_PB_GetState>
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <MX_BlueNRG_MS_Process+0x90>)
 8005fe6:	b2c0      	uxtb	r0, r0
 8005fe8:	7018      	strb	r0, [r3, #0]
  }
  
  if (BLE_Role == CLIENT) 
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <MX_BlueNRG_MS_Process+0x94>)
 8005fec:	4c1d      	ldr	r4, [pc, #116]	; (8006064 <MX_BlueNRG_MS_Process+0x98>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b9bb      	cbnz	r3, 8006022 <MX_BlueNRG_MS_Process+0x56>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	b32b      	cbz	r3, 8006042 <MX_BlueNRG_MS_Process+0x76>
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <MX_BlueNRG_MS_Process+0x9c>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	bb13      	cbnz	r3, 8006042 <MX_BlueNRG_MS_Process+0x76>
      startReadTXCharHandle();
 8005ffc:	f001 f960 	bl	80072c0 <startReadTXCharHandle>
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
      startReadRXCharHandle();
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	b173      	cbz	r3, 8006022 <MX_BlueNRG_MS_Process+0x56>
 8006004:	4b18      	ldr	r3, [pc, #96]	; (8006068 <MX_BlueNRG_MS_Process+0x9c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b15b      	cbz	r3, 8006022 <MX_BlueNRG_MS_Process+0x56>
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <MX_BlueNRG_MS_Process+0xa0>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b143      	cbz	r3, 8006022 <MX_BlueNRG_MS_Process+0x56>
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <MX_BlueNRG_MS_Process+0xa4>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006018:	b91b      	cbnz	r3, 8006022 <MX_BlueNRG_MS_Process+0x56>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800601a:	f001 fc24 	bl	8007866 <BSP_LED_Off>
      enableNotification();
 800601e:	f001 f9db 	bl	80073d8 <enableNotification>
//    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
//
//    /* Debouncing */
//    HAL_Delay(50);

	delayMicroseconds(100000);
 8006022:	4814      	ldr	r0, [pc, #80]	; (8006074 <MX_BlueNRG_MS_Process+0xa8>)
 8006024:	f000 fe9c 	bl	8006d60 <delayMicroseconds>

    if (connected /*&& notification_enabled*/)
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	b133      	cbz	r3, 800603a <MX_BlueNRG_MS_Process+0x6e>
    {
      /* Send a toggle command to the remote device */
//      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};

      sendData(data, length); //data - argument (info o temp.)
 800602c:	4628      	mov	r0, r5
 800602e:	4631      	mov	r1, r6
 8006030:	f001 f9aa 	bl	8007388 <sendData>

      BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
 8006034:	2000      	movs	r0, #0
 8006036:	f001 fc1f 	bl	8007878 <BSP_LED_Toggle>
}
 800603a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  hci_user_evt_proc();
 800603e:	f7fe bbdb 	b.w	80047f8 <hci_user_evt_proc>
    else if (connected && !end_read_rx_char_handle){      
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0db      	beq.n	8006000 <MX_BlueNRG_MS_Process+0x34>
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <MX_BlueNRG_MS_Process+0xa0>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1d7      	bne.n	8006000 <MX_BlueNRG_MS_Process+0x34>
      startReadRXCharHandle();
 8006050:	f001 f95c 	bl	800730c <startReadRXCharHandle>
 8006054:	e7d4      	b.n	8006000 <MX_BlueNRG_MS_Process+0x34>
 8006056:	bf00      	nop
 8006058:	2000002a 	.word	0x2000002a
 800605c:	20000029 	.word	0x20000029
 8006060:	20000028 	.word	0x20000028
 8006064:	20001c28 	.word	0x20001c28
 8006068:	20001c2f 	.word	0x20001c2f
 800606c:	20001c2e 	.word	0x20001c2e
 8006070:	20001c30 	.word	0x20001c30
 8006074:	000186a0 	.word	0x000186a0

08006078 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8006078:	4b01      	ldr	r3, [pc, #4]	; (8006080 <BSP_PB_Callback+0x8>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	4770      	bx	lr
 8006080:	200018c1 	.word	0x200018c1

08006084 <_ZN13DeviceManagerC1Ev>:
Timer tim6(&htim6);
Timer tim4(&htim4);
//docelowo cala tablica Timerow globalna
Timer *timers[] = {&tim7, &tim6/*, &tim4*/}; //TODO: wiecej timerow + fix tim6, tim4

DeviceManager::DeviceManager(){
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	occupiedPinsCount = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
	usedTimersCount = 0;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	705a      	strb	r2, [r3, #1]
	hardwarePinsList[0].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800609e:	605a      	str	r2, [r3, #4]
	hardwarePinsList[0].GPIO_Pin  = ((uint16_t)0x0010);			   //GPIO_PIN_4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2210      	movs	r2, #16
 80060a4:	811a      	strh	r2, [r3, #8]
	hardwarePinsList[1].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060ac:	60da      	str	r2, [r3, #12]
	hardwarePinsList[1].GPIO_Pin  = ((uint16_t)0x0200);			   //GPIO_PIN_9
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b4:	821a      	strh	r2, [r3, #16]
	hardwarePinsList[2].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060bc:	615a      	str	r2, [r3, #20]
	hardwarePinsList[2].GPIO_Pin  = ((uint16_t)0x0400);			   //GPIO_PIN_10
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060c4:	831a      	strh	r2, [r3, #24]
	hardwarePinsList[3].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060cc:	61da      	str	r2, [r3, #28]
	hardwarePinsList[3].GPIO_Pin  =	((uint16_t)0x0800); 		   //GPIO_PIN_11
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d4:	841a      	strh	r2, [r3, #32]
	hardwarePinsList[4].GPIO_Port = ((GPIO_TypeDef *) GPIOA_BASE); //GPIOA
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24
	hardwarePinsList[4].GPIO_Pin  =	((uint16_t)0x1000); 		   //GPIO_PIN_12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
	hardwarePinsList[0].occupied  = false;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	729a      	strb	r2, [r3, #10]
	hardwarePinsList[1].occupied  = false;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	749a      	strb	r2, [r3, #18]
	hardwarePinsList[2].occupied  = false;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	769a      	strb	r2, [r3, #26]
	hardwarePinsList[3].occupied  = false;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hardwarePinsList[4].occupied  = false;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <_ZN13DeviceManager14checkIfPinFreeEP7PinData>:

bool DeviceManager::checkIfPinFree(PinData *pinData){
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
	GPIO_TypeDef* reqPort = pinData->GPIO_Port;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	613b      	str	r3, [r7, #16]
	uint16_t reqPin = pinData->GPIO_Pin;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	889b      	ldrh	r3, [r3, #4]
 800612a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800612c:	2300      	movs	r3, #0
 800612e:	75fb      	strb	r3, [r7, #23]
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d825      	bhi.n	8006182 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6c>
			if(reqPort == hardwarePinsList[i].GPIO_Port
 8006136:	7dfb      	ldrb	r3, [r7, #23]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	d119      	bne.n	800617a <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && reqPin == hardwarePinsList[i].GPIO_Pin
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	891b      	ldrh	r3, [r3, #8]
 8006150:	89fa      	ldrh	r2, [r7, #14]
 8006152:	429a      	cmp	r2, r3
 8006154:	d111      	bne.n	800617a <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
			   && hardwarePinsList[i].occupied == false){
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4413      	add	r3, r2
 800615e:	7a9b      	ldrb	r3, [r3, #10]
 8006160:	f083 0301 	eor.w	r3, r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x64>
					hardwarePinsList[i].occupied = true;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4413      	add	r3, r2
 8006172:	2201      	movs	r2, #1
 8006174:	729a      	strb	r2, [r3, #10]
					return true;
 8006176:	2301      	movs	r3, #1
 8006178:	e004      	b.n	8006184 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x6e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	3301      	adds	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
 8006180:	e7d6      	b.n	8006130 <_ZN13DeviceManager14checkIfPinFreeEP7PinData+0x1a>
			}
	}
	return false;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_ZN13DeviceManager10getFreePinEv>:

PinData* DeviceManager::getFreePin(void){
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d813      	bhi.n	80061ca <_ZN13DeviceManager10getFreePinEv+0x3a>
		if(hardwarePinsList[i].occupied == false)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	7a9b      	ldrb	r3, [r3, #10]
 80061ac:	f083 0301 	eor.w	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <_ZN13DeviceManager10getFreePinEv+0x32>
			return &hardwarePinsList[i];
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	e005      	b.n	80061ce <_ZN13DeviceManager10getFreePinEv+0x3e>
	for(uint8_t i=0; i<(sizeof(hardwarePinsList)/sizeof(hardwarePinsList[0])); i++){
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	3301      	adds	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e7e8      	b.n	800619c <_ZN13DeviceManager10getFreePinEv+0xc>
	}
	//TODO
	//return new PinData();
	return &hardwarePinsList[0];
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <_ZN13DeviceManager17getNewTimerHandleEv>:

Timer* DeviceManager::getNewTimerHandle(void){
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	if(usedTimersCount < (sizeof(timers)/sizeof(timers[0]))){
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d80a      	bhi.n	8006202 <_ZN13DeviceManager17getNewTimerHandleEv+0x26>
		return timers[usedTimersCount++];
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	b2d1      	uxtb	r1, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7051      	strb	r1, [r2, #1]
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b06      	ldr	r3, [pc, #24]	; (8006214 <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 80061fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006200:	e001      	b.n	8006206 <_ZN13DeviceManager17getNewTimerHandleEv+0x2a>
	}
	else{
		return timers[0]; //TODO
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <_ZN13DeviceManager17getNewTimerHandleEv+0x38>)
 8006204:	681b      	ldr	r3, [r3, #0]
	}
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000000 	.word	0x20000000

08006218 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>:

uint8_t DeviceManager::getUsedTimersCount(void){
	return this->usedTimersCount;
}

int DeviceManager::getTimerIndex(TIM_HandleTypeDef *htim){
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	int timersElemNumber = (sizeof(timers)/sizeof(timers[0]));
 8006222:	2302      	movs	r3, #2
 8006224:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<timersElemNumber; i++){
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	da15      	bge.n	800625e <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x46>
		if(htim == timers[i]->getHandle())
 8006232:	4a0e      	ldr	r2, [pc, #56]	; (800626c <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x54>)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fd0b 	bl	8007c56 <_ZN5Timer9getHandleEv>
 8006240:	4602      	mov	r2, r0
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x3e>
			return i;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	e005      	b.n	8006262 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x4a>
	for(int i=0; i<timersElemNumber; i++){
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e7e5      	b.n	800622a <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef+0x12>
	}
	return -1; //TODO: zabezpieczyc to!
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000000 	.word	0x20000000

08006270 <_Z41__static_initialization_and_destruction_0ii>:
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d110      	bne.n	80062a2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006286:	4293      	cmp	r3, r2
 8006288:	d10b      	bne.n	80062a2 <_Z41__static_initialization_and_destruction_0ii+0x32>
Timer tim7(&htim7);
 800628a:	4908      	ldr	r1, [pc, #32]	; (80062ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800628c:	4808      	ldr	r0, [pc, #32]	; (80062b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800628e:	f001 fcd3 	bl	8007c38 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer tim6(&htim6);
 8006292:	4908      	ldr	r1, [pc, #32]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006294:	4808      	ldr	r0, [pc, #32]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006296:	f001 fccf 	bl	8007c38 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer tim4(&htim4);
 800629a:	4908      	ldr	r1, [pc, #32]	; (80062bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800629c:	4808      	ldr	r0, [pc, #32]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800629e:	f001 fccb 	bl	8007c38 <_ZN5TimerC1EP17TIM_HandleTypeDef>
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	200006c8 	.word	0x200006c8
 80062b0:	20000788 	.word	0x20000788
 80062b4:	20000708 	.word	0x20000708
 80062b8:	20000790 	.word	0x20000790
 80062bc:	20000748 	.word	0x20000748
 80062c0:	20000798 	.word	0x20000798

080062c4 <_GLOBAL__sub_I_htim7>:
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062cc:	2001      	movs	r0, #1
 80062ce:	f7ff ffcf 	bl	8006270 <_Z41__static_initialization_and_destruction_0ii>
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <vApplicationGetIdleTaskMemory+0x10>)
 80062d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80062d8:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <vApplicationGetIdleTaskMemory+0x14>)
 80062da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80062dc:	2380      	movs	r3, #128	; 0x80
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20001ac4 	.word	0x20001ac4
 80062e8:	200018c4 	.word	0x200018c4

080062ec <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <HCI_TL_SPI_Init+0x60>)
{
 80062ee:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80062fa:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8006304:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006306:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <HCI_TL_SPI_Init+0x64>)
 800630a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800630c:	a901      	add	r1, sp, #4
 800630e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8006312:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006314:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8006316:	f7fb fe2b 	bl	8001f70 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800631a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800631e:	a901      	add	r1, sp, #4
 8006320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8006324:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006326:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006328:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800632a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800632c:	f7fb fe20 	bl	8001f70 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8006330:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8006332:	a901      	add	r1, sp, #4
 8006334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8006338:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800633a:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800633e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8006340:	f7fb fe16 	bl	8001f70 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8006344:	f001 fba4 	bl	8007a90 <BSP_SPI1_Init>
}
 8006348:	b007      	add	sp, #28
 800634a:	bd30      	pop	{r4, r5, pc}
 800634c:	40021000 	.word	0x40021000
 8006350:	10110000 	.word	0x10110000

08006354 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8006354:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8006356:	2101      	movs	r1, #1
 8006358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800635c:	f7fb fee4 	bl	8002128 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8006360:	2102      	movs	r1, #2
 8006362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006366:	f7fb fedf 	bl	8002128 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800636a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800636e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006372:	f7fb fed9 	bl	8002128 <HAL_GPIO_DeInit>
  return 0;
}
 8006376:	2000      	movs	r0, #0
 8006378:	bd08      	pop	{r3, pc}

0800637a <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800637a:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006386:	f7fb ff5f 	bl	8002248 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800638a:	2005      	movs	r0, #5
 800638c:	f7fb fd64 	bl	8001e58 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8006390:	2201      	movs	r2, #1
 8006392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800639a:	f7fb ff55 	bl	8002248 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800639e:	2005      	movs	r0, #5
 80063a0:	f7fb fd5a 	bl	8001e58 <HAL_Delay>
  return 0;
}  
 80063a4:	2000      	movs	r0, #0
 80063a6:	bd08      	pop	{r3, pc}

080063a8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80063ac:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 80063ae:	23ff      	movs	r3, #255	; 0xff
 80063b0:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80063b4:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80063b6:	230b      	movs	r3, #11
{
 80063b8:	4607      	mov	r7, r0
 80063ba:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80063bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063c0:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80063c2:	f88d 3008 	strb.w	r3, [sp, #8]
 80063c6:	f88d 4009 	strb.w	r4, [sp, #9]
 80063ca:	f88d 400a 	strb.w	r4, [sp, #10]
 80063ce:	f88d 400b 	strb.w	r4, [sp, #11]
 80063d2:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80063d6:	f7fb ff37 	bl	8002248 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80063da:	2205      	movs	r2, #5
 80063dc:	a904      	add	r1, sp, #16
 80063de:	a802      	add	r0, sp, #8
 80063e0:	f001 fb1e 	bl	8007a20 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 80063e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d122      	bne.n	8006432 <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80063ec:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80063f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 80063f4:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 80063f8:	d007      	beq.n	800640a <HCI_TL_SPI_Receive+0x62>
 80063fa:	42ae      	cmp	r6, r5
 80063fc:	bf28      	it	cs
 80063fe:	462e      	movcs	r6, r5
 8006400:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 8006402:	42b5      	cmp	r5, r6
 8006404:	f104 0401 	add.w	r4, r4, #1
 8006408:	d308      	bcc.n	800641c <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800640a:	2201      	movs	r2, #1
 800640c:	2102      	movs	r1, #2
 800640e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006412:	f7fb ff19 	bl	8002248 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8006416:	4628      	mov	r0, r5
 8006418:	b007      	add	sp, #28
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800641c:	2201      	movs	r2, #1
 800641e:	f10d 0107 	add.w	r1, sp, #7
 8006422:	f10d 0006 	add.w	r0, sp, #6
 8006426:	f001 fafb 	bl	8007a20 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800642a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800642e:	557b      	strb	r3, [r7, r5]
 8006430:	e7e6      	b.n	8006400 <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 8006432:	4625      	mov	r5, r4
 8006434:	e7e9      	b.n	800640a <HCI_TL_SPI_Receive+0x62>
	...

08006438 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8006438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800643c:	230a      	movs	r3, #10
 800643e:	f88d 3000 	strb.w	r3, [sp]
 8006442:	2300      	movs	r3, #0
{  
 8006444:	4607      	mov	r7, r0
 8006446:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8006448:	f88d 3001 	strb.w	r3, [sp, #1]
 800644c:	f88d 3002 	strb.w	r3, [sp, #2]
 8006450:	f88d 3003 	strb.w	r3, [sp, #3]
 8006454:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8006458:	f7fb fcf8 	bl	8001e4c <HAL_GetTick>
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800645c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80064c8 <HCI_TL_SPI_Send+0x90>
  uint32_t tickstart = HAL_GetTick();
 8006460:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	2102      	movs	r1, #2
 8006466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800646a:	f7fb feed 	bl	8002248 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800646e:	2205      	movs	r2, #5
 8006470:	a902      	add	r1, sp, #8
 8006472:	4668      	mov	r0, sp
 8006474:	f001 fad4 	bl	8007a20 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8006478:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d11a      	bne.n	80064b6 <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 8006480:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8006484:	42ab      	cmp	r3, r5
 8006486:	d319      	bcc.n	80064bc <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8006488:	462a      	mov	r2, r5
 800648a:	4641      	mov	r1, r8
 800648c:	4638      	mov	r0, r7
 800648e:	f001 fac7 	bl	8007a20 <BSP_SPI1_SendRecv>
    result = 0;
 8006492:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8006494:	2201      	movs	r2, #1
 8006496:	2102      	movs	r1, #2
 8006498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800649c:	f7fb fed4 	bl	8002248 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80064a0:	f7fb fcd4 	bl	8001e4c <HAL_GetTick>
 80064a4:	1b80      	subs	r0, r0, r6
 80064a6:	280f      	cmp	r0, #15
 80064a8:	d80b      	bhi.n	80064c2 <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	d1d9      	bne.n	8006462 <HCI_TL_SPI_Send+0x2a>
  
  return result;
}
 80064ae:	4620      	mov	r0, r4
 80064b0:	b004      	add	sp, #16
 80064b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = -1;
 80064b6:	f04f 34ff 	mov.w	r4, #4294967295
 80064ba:	e7eb      	b.n	8006494 <HCI_TL_SPI_Send+0x5c>
        result = -2;
 80064bc:	f06f 0401 	mvn.w	r4, #1
 80064c0:	e7e8      	b.n	8006494 <HCI_TL_SPI_Send+0x5c>
      result = -3;
 80064c2:	f06f 0402 	mvn.w	r4, #2
  return result;
 80064c6:	e7f2      	b.n	80064ae <HCI_TL_SPI_Send+0x76>
 80064c8:	20001b28 	.word	0x20001b28

080064cc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80064cc:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80064ce:	2101      	movs	r1, #1
 80064d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064d4:	f7fb feb2 	bl	800223c <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80064d8:	2801      	cmp	r0, #1
 80064da:	d104      	bne.n	80064e6 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 80064dc:	2000      	movs	r0, #0
 80064de:	f7fe f9ab 	bl	8004838 <hci_notify_asynch_evt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d0f3      	beq.n	80064ce <hci_tl_lowlevel_isr+0x2>
 80064e6:	bd08      	pop	{r3, pc}

080064e8 <hci_tl_lowlevel_init>:
{
 80064e8:	b510      	push	{r4, lr}
 80064ea:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <hci_tl_lowlevel_init+0x4c>)
 80064ee:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80064f0:	4b11      	ldr	r3, [pc, #68]	; (8006538 <hci_tl_lowlevel_init+0x50>)
 80064f2:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <hci_tl_lowlevel_init+0x54>)
 80064f6:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <hci_tl_lowlevel_init+0x58>)
 80064fa:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80064fc:	4c11      	ldr	r4, [pc, #68]	; (8006544 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <hci_tl_lowlevel_init+0x60>)
 8006500:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8006502:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <hci_tl_lowlevel_init+0x64>)
 8006506:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8006508:	f7fe f8a8 	bl	800465c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800650c:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8006510:	4620      	mov	r0, r4
 8006512:	f7fb fd0f 	bl	8001f34 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8006516:	4a0e      	ldr	r2, [pc, #56]	; (8006550 <hci_tl_lowlevel_init+0x68>)
 8006518:	2100      	movs	r1, #0
 800651a:	4620      	mov	r0, r4
 800651c:	f7fb fd04 	bl	8001f28 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006520:	2200      	movs	r2, #0
 8006522:	4611      	mov	r1, r2
 8006524:	2006      	movs	r0, #6
 8006526:	f7fb fcbd 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800652a:	2006      	movs	r0, #6
 800652c:	f7fb fcee 	bl	8001f0c <HAL_NVIC_EnableIRQ>
}
 8006530:	b008      	add	sp, #32
 8006532:	bd10      	pop	{r4, pc}
 8006534:	080062ed 	.word	0x080062ed
 8006538:	08006355 	.word	0x08006355
 800653c:	08006439 	.word	0x08006439
 8006540:	080063a9 	.word	0x080063a9
 8006544:	20001c84 	.word	0x20001c84
 8006548:	0800637b 	.word	0x0800637b
 800654c:	08007a49 	.word	0x08007a49
 8006550:	080064cd 	.word	0x080064cd

08006554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006554:	b5b0      	push	{r4, r5, r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800655a:	f7fb fc55 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800655e:	f000 f845 	bl	80065ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006562:	f000 f903 	bl	800676c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8006566:	f000 f8cd 	bl	8006704 <MX_USART3_UART_Init>
  MX_BlueNRG_MS_Init();
 800656a:	f7ff fc6d 	bl	8005e48 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM7_Init();
 800656e:	f000 f985 	bl	800687c <MX_TIM7_Init>
  MX_TIM6_Init();
 8006572:	f000 f9c3 	bl	80068fc <MX_TIM6_Init>
  MX_TIM4_Init();
 8006576:	f000 fa01 	bl	800697c <MX_TIM4_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  binarySem = xSemaphoreCreateBinary();
 800657a:	2203      	movs	r2, #3
 800657c:	2100      	movs	r1, #0
 800657e:	2001      	movs	r0, #1
 8006580:	f7fe fd88 	bl	8005094 <xQueueGenericCreate>
 8006584:	4602      	mov	r2, r0
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <main+0x84>)
 8006588:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800658a:	4b14      	ldr	r3, [pc, #80]	; (80065dc <main+0x88>)
 800658c:	f107 041c 	add.w	r4, r7, #28
 8006590:	461d      	mov	r5, r3
 8006592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800659a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800659e:	f107 031c 	add.w	r3, r7, #28
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f9de 	bl	8004966 <osThreadCreate>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <main+0x8c>)
 80065ae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readoutTask, ReadoutTask, osPriorityNormal, 0, 256);
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <main+0x90>)
 80065b2:	463c      	mov	r4, r7
 80065b4:	461d      	mov	r5, r3
 80065b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readoutTaskHandle = osThreadCreate(osThread(readoutTask), NULL);
 80065c2:	463b      	mov	r3, r7
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe f9cd 	bl	8004966 <osThreadCreate>
 80065cc:	4602      	mov	r2, r0
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <main+0x94>)
 80065d0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80065d2:	f7fe f9c3 	bl	800495c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80065d6:	e7fe      	b.n	80065d6 <main+0x82>
 80065d8:	20000828 	.word	0x20000828
 80065dc:	0800cdec 	.word	0x0800cdec
 80065e0:	20000820 	.word	0x20000820
 80065e4:	0800ce14 	.word	0x0800ce14
 80065e8:	20000824 	.word	0x20000824

080065ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b0b8      	sub	sp, #224	; 0xe0
 80065f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80065f6:	2244      	movs	r2, #68	; 0x44
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f002 fa17 	bl	8008a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006600:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006610:	463b      	mov	r3, r7
 8006612:	2288      	movs	r2, #136	; 0x88
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f002 fa09 	bl	8008a2e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800661c:	2302      	movs	r3, #2
 800661e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800662a:	2310      	movs	r3, #16
 800662c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006630:	2302      	movs	r3, #2
 8006632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006636:	2302      	movs	r3, #2
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800663c:	2301      	movs	r3, #1
 800663e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006642:	230a      	movs	r3, #10
 8006644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006648:	2307      	movs	r3, #7
 800664a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800664e:	2302      	movs	r3, #2
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006654:	2302      	movs	r3, #2
 8006656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800665a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800665e:	4618      	mov	r0, r3
 8006660:	f7fb fecc 	bl	80023fc <HAL_RCC_OscConfig>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8006674:	f000 fbf2 	bl	8006e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006678:	230f      	movs	r3, #15
 800667a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800667e:	2303      	movs	r3, #3
 8006680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800668a:	2300      	movs	r3, #0
 800668c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006690:	2300      	movs	r3, #0
 8006692:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006696:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800669a:	2104      	movs	r1, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fc f933 	bl	8002908 <HAL_RCC_ClockConfig>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80066b2:	f000 fbd3 	bl	8006e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80066b6:	2306      	movs	r3, #6
 80066b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80066ba:	2300      	movs	r3, #0
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80066be:	2300      	movs	r3, #0
 80066c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066c2:	463b      	mov	r3, r7
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fc fb19 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80066da:	f000 fbbf 	bl	8006e5c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80066de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80066e2:	f7fb fdc5 	bl	8002270 <HAL_PWREx_ControlVoltageScaling>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80066f6:	f000 fbb1 	bl	8006e5c <Error_Handler>
  }
}
 80066fa:	bf00      	nop
 80066fc:	37e0      	adds	r7, #224	; 0xe0
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006708:	4b16      	ldr	r3, [pc, #88]	; (8006764 <MX_USART3_UART_Init+0x60>)
 800670a:	4a17      	ldr	r2, [pc, #92]	; (8006768 <MX_USART3_UART_Init+0x64>)
 800670c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006716:	4b13      	ldr	r3, [pc, #76]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006718:	2200      	movs	r2, #0
 800671a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800671c:	4b11      	ldr	r3, [pc, #68]	; (8006764 <MX_USART3_UART_Init+0x60>)
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <MX_USART3_UART_Init+0x60>)
 800672a:	220c      	movs	r2, #12
 800672c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006730:	2200      	movs	r2, #0
 8006732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <MX_USART3_UART_Init+0x60>)
 800673c:	2200      	movs	r2, #0
 800673e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006740:	4b08      	ldr	r3, [pc, #32]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006742:	2200      	movs	r2, #0
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006746:	4807      	ldr	r0, [pc, #28]	; (8006764 <MX_USART3_UART_Init+0x60>)
 8006748:	f7fd fb19 	bl	8003d7e <HAL_UART_Init>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 800675c:	f000 fb7e 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006760:	bf00      	nop
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200007a0 	.word	0x200007a0
 8006768:	40004800 	.word	0x40004800

0800676c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006772:	f107 0314 	add.w	r3, r7, #20
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	609a      	str	r2, [r3, #8]
 800677e:	60da      	str	r2, [r3, #12]
 8006780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006782:	4a3a      	ldr	r2, [pc, #232]	; (800686c <MX_GPIO_Init+0x100>)
 8006784:	4b39      	ldr	r3, [pc, #228]	; (800686c <MX_GPIO_Init+0x100>)
 8006786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006788:	f043 0304 	orr.w	r3, r3, #4
 800678c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800678e:	4b37      	ldr	r3, [pc, #220]	; (800686c <MX_GPIO_Init+0x100>)
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800679a:	4a34      	ldr	r2, [pc, #208]	; (800686c <MX_GPIO_Init+0x100>)
 800679c:	4b33      	ldr	r3, [pc, #204]	; (800686c <MX_GPIO_Init+0x100>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067a6:	4b31      	ldr	r3, [pc, #196]	; (800686c <MX_GPIO_Init+0x100>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067b2:	4a2e      	ldr	r2, [pc, #184]	; (800686c <MX_GPIO_Init+0x100>)
 80067b4:	4b2d      	ldr	r3, [pc, #180]	; (800686c <MX_GPIO_Init+0x100>)
 80067b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067be:	4b2b      	ldr	r3, [pc, #172]	; (800686c <MX_GPIO_Init+0x100>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ca:	4a28      	ldr	r2, [pc, #160]	; (800686c <MX_GPIO_Init+0x100>)
 80067cc:	4b27      	ldr	r3, [pc, #156]	; (800686c <MX_GPIO_Init+0x100>)
 80067ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067d6:	4b25      	ldr	r3, [pc, #148]	; (800686c <MX_GPIO_Init+0x100>)
 80067d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80067e2:	2200      	movs	r2, #0
 80067e4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80067e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ec:	f7fb fd2c 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80067f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80067f6:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <MX_GPIO_Init+0x104>)
 80067f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	4619      	mov	r1, r3
 8006804:	481b      	ldr	r0, [pc, #108]	; (8006874 <MX_GPIO_Init+0x108>)
 8006806:	f7fb fbb3 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800680a:	2301      	movs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800680e:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <MX_GPIO_Init+0x10c>)
 8006810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006816:	f107 0314 	add.w	r3, r7, #20
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006820:	f7fb fba6 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8006824:	f44f 7391 	mov.w	r3, #290	; 0x122
 8006828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800682a:	2301      	movs	r3, #1
 800682c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006832:	2300      	movs	r3, #0
 8006834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006836:	f107 0314 	add.w	r3, r7, #20
 800683a:	4619      	mov	r1, r3
 800683c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006840:	f7fb fb96 	bl	8001f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8006844:	2200      	movs	r2, #0
 8006846:	2105      	movs	r1, #5
 8006848:	2006      	movs	r0, #6
 800684a:	f7fb fb2b 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800684e:	2006      	movs	r0, #6
 8006850:	f7fb fb5c 	bl	8001f0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006854:	2200      	movs	r2, #0
 8006856:	2105      	movs	r1, #5
 8006858:	2028      	movs	r0, #40	; 0x28
 800685a:	f7fb fb23 	bl	8001ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800685e:	2028      	movs	r0, #40	; 0x28
 8006860:	f7fb fb54 	bl	8001f0c <HAL_NVIC_EnableIRQ>

}
 8006864:	bf00      	nop
 8006866:	3728      	adds	r7, #40	; 0x28
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000
 8006870:	10210000 	.word	0x10210000
 8006874:	48000800 	.word	0x48000800
 8006878:	10110000 	.word	0x10110000

0800687c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */
  /* USER CODE END TIM7_Init 0 */
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM7_Init 1 */
  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <MX_TIM7_Init+0x78>)
 800688e:	4a1a      	ldr	r2, [pc, #104]	; (80068f8 <MX_TIM7_Init+0x7c>)
 8006890:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <MX_TIM7_Init+0x78>)
 8006894:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006898:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <MX_TIM7_Init+0x78>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <MX_TIM7_Init+0x78>)
 80068a2:	2209      	movs	r2, #9
 80068a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068a6:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <MX_TIM7_Init+0x78>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80068ac:	4811      	ldr	r0, [pc, #68]	; (80068f4 <MX_TIM7_Init+0x78>)
 80068ae:	f7fc ff47 	bl	8003740 <HAL_TIM_Base_Init>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <MX_TIM7_Init+0x4a>
  {
    Error_Handler();
 80068c2:	f000 facb 	bl	8006e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4808      	ldr	r0, [pc, #32]	; (80068f4 <MX_TIM7_Init+0x78>)
 80068d4:	f7fc ff4e 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <MX_TIM7_Init+0x70>
  {
    Error_Handler();
 80068e8:	f000 fab8 	bl	8006e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /* USER CODE END TIM7_Init 2 */
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	200006c8 	.word	0x200006c8
 80068f8:	40001400 	.word	0x40001400

080068fc <MX_TIM6_Init>:

static void MX_TIM6_Init(void) //TODO: check&fix
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	609a      	str	r2, [r3, #8]
  htim6.Instance = TIM6;
 800690c:	4b19      	ldr	r3, [pc, #100]	; (8006974 <MX_TIM6_Init+0x78>)
 800690e:	4a1a      	ldr	r2, [pc, #104]	; (8006978 <MX_TIM6_Init+0x7c>)
 8006910:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <MX_TIM6_Init+0x78>)
 8006914:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006918:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800691a:	4b16      	ldr	r3, [pc, #88]	; (8006974 <MX_TIM6_Init+0x78>)
 800691c:	2200      	movs	r2, #0
 800691e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8006920:	4b14      	ldr	r3, [pc, #80]	; (8006974 <MX_TIM6_Init+0x78>)
 8006922:	2209      	movs	r2, #9
 8006924:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <MX_TIM6_Init+0x78>)
 8006928:	2200      	movs	r2, #0
 800692a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800692c:	4811      	ldr	r0, [pc, #68]	; (8006974 <MX_TIM6_Init+0x78>)
 800692e:	f7fc ff07 	bl	8003740 <HAL_TIM_Base_Init>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <MX_TIM6_Init+0x4a>
  {
    Error_Handler();
 8006942:	f000 fa8b 	bl	8006e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006946:	2300      	movs	r3, #0
 8006948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4808      	ldr	r0, [pc, #32]	; (8006974 <MX_TIM6_Init+0x78>)
 8006954:	f7fc ff0e 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 8006968:	f000 fa78 	bl	8006e5c <Error_Handler>
  }
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000708 	.word	0x20000708
 8006978:	40001000 	.word	0x40001000

0800697c <MX_TIM4_Init>:

static void MX_TIM4_Init(void) //TODO: check&fix
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 800698c:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <MX_TIM4_Init+0x78>)
 800698e:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <MX_TIM4_Init+0x7c>)
 8006990:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <MX_TIM4_Init+0x78>)
 8006994:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006998:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800699a:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <MX_TIM4_Init+0x78>)
 800699c:	2200      	movs	r2, #0
 800699e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80069a0:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <MX_TIM4_Init+0x78>)
 80069a2:	2209      	movs	r2, #9
 80069a4:	60da      	str	r2, [r3, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <MX_TIM4_Init+0x78>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80069ac:	4811      	ldr	r0, [pc, #68]	; (80069f4 <MX_TIM4_Init+0x78>)
 80069ae:	f7fc fec7 	bl	8003740 <HAL_TIM_Base_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_TIM4_Init+0x4a>
  {
    Error_Handler();
 80069c2:	f000 fa4b 	bl	8006e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4808      	ldr	r0, [pc, #32]	; (80069f4 <MX_TIM4_Init+0x78>)
 80069d4:	f7fc fece 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80069e8:	f000 fa38 	bl	8006e5c <Error_Handler>
  }
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000748 	.word	0x20000748
 80069f8:	40000800 	.word	0x40000800

080069fc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		//wyslij sygnal do taska drivera zeby pryzgotowal dane (ew. parametry = zmienne globalne?)
		xTaskNotify(readoutTaskHandle, 0x01, eSetBits); //a domyslnie kolejka (queue) requestow
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <StartDefaultTask+0x48>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	f7ff f9a7 	bl	8005d60 <xTaskGenericNotify>

		TickType_t maxBlockTime = pdMS_TO_TICKS(300UL);
 8006a12:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006a16:	60fb      	str	r3, [r7, #12]
		xSemaphoreTake(binarySem, maxBlockTime);
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <StartDefaultTask+0x4c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fbb0 	bl	8005184 <xQueueSemaphoreTake>
		//zeby tu dojsc, musial byc oddany semafor
		HAL_UART_Transmit(&huart3, (uint8_t *)"notified\r\n", 10, 10);
 8006a24:	230a      	movs	r3, #10
 8006a26:	220a      	movs	r2, #10
 8006a28:	4908      	ldr	r1, [pc, #32]	; (8006a4c <StartDefaultTask+0x50>)
 8006a2a:	4809      	ldr	r0, [pc, #36]	; (8006a50 <StartDefaultTask+0x54>)
 8006a2c:	f7fd f91f 	bl	8003c6e <HAL_UART_Transmit>
		MX_BlueNRG_MS_Process(data, 5);
 8006a30:	2105      	movs	r1, #5
 8006a32:	4808      	ldr	r0, [pc, #32]	; (8006a54 <StartDefaultTask+0x58>)
 8006a34:	f7ff faca 	bl	8005fcc <MX_BlueNRG_MS_Process>

		osDelay(delayTime);
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <StartDefaultTask+0x5c>)
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fd ffba 	bl	80049b6 <osDelay>
	}
 8006a42:	e7df      	b.n	8006a04 <StartDefaultTask+0x8>
 8006a44:	20000824 	.word	0x20000824
 8006a48:	20000828 	.word	0x20000828
 8006a4c:	0800ce30 	.word	0x0800ce30
 8006a50:	200007a0 	.word	0x200007a0
 8006a54:	200008a8 	.word	0x200008a8
 8006a58:	20000018 	.word	0x20000018

08006a5c <ReadoutTask>:
	/* USER CODE END 5 */
}

/* USER CODE BEGIN 6 */
void ReadoutTask(void const * argument){
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	uint32_t notifValue;
	/* Infinite loop */
	for (;;) {
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8006a64:	f107 020c 	add.w	r2, r7, #12
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6c:	21ff      	movs	r1, #255	; 0xff
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f7ff f930 	bl	8005cd4 <xTaskNotifyWait>
		if ((notifValue & 0x01) != 0x00){
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f2      	beq.n	8006a64 <ReadoutTask+0x8>
			tempSensor1.startNewReadout();
 8006a7e:	4802      	ldr	r0, [pc, #8]	; (8006a88 <ReadoutTask+0x2c>)
 8006a80:	f000 fb4d 	bl	800711e <_ZN13OneWireSensor15startNewReadoutEv>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8006a84:	e7ee      	b.n	8006a64 <ReadoutTask+0x8>
 8006a86:	bf00      	nop
 8006a88:	20000858 	.word	0x20000858

08006a8c <_ZN13OneWireDriver17firstStateHandlerEv>:
			//tempSensor2.startNewReadout();
		}
	}
}

void OneWireDriver::firstStateHandler(void){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"First state!\r\n", 14, 10);
 8006a94:	230a      	movs	r3, #10
 8006a96:	220e      	movs	r2, #14
 8006a98:	490e      	ldr	r1, [pc, #56]	; (8006ad4 <_ZN13OneWireDriver17firstStateHandlerEv+0x48>)
 8006a9a:	480f      	ldr	r0, [pc, #60]	; (8006ad8 <_ZN13OneWireDriver17firstStateHandlerEv+0x4c>)
 8006a9c:	f7fd f8e7 	bl	8003c6e <HAL_UART_Transmit>
	this->changePinMode(ONE_WIRE_OUTPUT);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fab0 	bl	8007008 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	this->writePin(0);
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fad2 	bl	8007054 <_ZN13OneWireDriver8writePinEb>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::secondStateHandler;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <_ZN13OneWireDriver17firstStateHandlerEv+0x50>)
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	611a      	str	r2, [r3, #16]
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(800);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f8ec 	bl	8007ca2 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0800ce3c 	.word	0x0800ce3c
 8006ad8:	200007a0 	.word	0x200007a0
 8006adc:	08006ae1 	.word	0x08006ae1

08006ae0 <_ZN13OneWireDriver18secondStateHandlerEv>:

void OneWireDriver::secondStateHandler(void){
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	HAL_UART_Transmit(&huart3, (uint8_t *)"Second state!\r\n", 15, 10);
 8006ae8:	230a      	movs	r3, #10
 8006aea:	220f      	movs	r2, #15
 8006aec:	490d      	ldr	r1, [pc, #52]	; (8006b24 <_ZN13OneWireDriver18secondStateHandlerEv+0x44>)
 8006aee:	480e      	ldr	r0, [pc, #56]	; (8006b28 <_ZN13OneWireDriver18secondStateHandlerEv+0x48>)
 8006af0:	f7fd f8bd 	bl	8003c6e <HAL_UART_Transmit>
	this->writePin(1);
 8006af4:	2101      	movs	r1, #1
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 faac 	bl	8007054 <_ZN13OneWireDriver8writePinEb>
	this->changePinMode(ONE_WIRE_INPUT);
 8006afc:	2101      	movs	r1, #1
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa82 	bl	8007008 <_ZN13OneWireDriver13changePinModeE11oneWireMode>
	//ustaw kolejny stan
	this->stateHandler = &OneWireDriver::thirdStateHandler;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <_ZN13OneWireDriver18secondStateHandlerEv+0x4c>)
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	611a      	str	r2, [r3, #16]
	//przestaw i uruchom timer
	this->timer->wakeMeUpAfterMicroseconds(10);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	210a      	movs	r1, #10
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 f8c3 	bl	8007ca2 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	0800ce4c 	.word	0x0800ce4c
 8006b28:	200007a0 	.word	0x200007a0
 8006b2c:	08006b31 	.word	0x08006b31

08006b30 <_ZN13OneWireDriver17thirdStateHandlerEv>:

void OneWireDriver::thirdStateHandler(void){
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b099      	sub	sp, #100	; 0x64
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
	//to co ma zrobic w tym stanie
	while(this->readPin()); //kolejne state'y
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 faa4 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d000      	beq.n	8006b46 <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
 8006b44:	e7f8      	b.n	8006b38 <_ZN13OneWireDriver17thirdStateHandlerEv+0x8>
	while(!this->readPin());//..
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa9d 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f083 0301 	eor.w	r3, r3, #1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d000      	beq.n	8006b5a <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
 8006b58:	e7f5      	b.n	8006b46 <_ZN13OneWireDriver17thirdStateHandlerEv+0x16>
	while(this->readPin());
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa93 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d000      	beq.n	8006b68 <_ZN13OneWireDriver17thirdStateHandlerEv+0x38>
 8006b66:	e7f8      	b.n	8006b5a <_ZN13OneWireDriver17thirdStateHandlerEv+0x2a>
	uint32_t rawBits = 0UL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t checksumBits = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	//glowna czesc - odczyt danych i sumy kontrolnej
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 8006b72:	231f      	movs	r3, #31
 8006b74:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006b78:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	db29      	blt.n	8006bd4 <_ZN13OneWireDriver17thirdStateHandlerEv+0xa4>
		 * Bit data "1" signal: the level is LOW for 50ms and HIGH for 70ms;
		 * MAX FREQUENCY ON STM32L476RG = 80MHz
		 * SO IT TAKES 12,5 ns FOR ONE INSTRUCTION TO EXECUTE
		 * A DELAY OF 1 SECOND (x TICKS): 80 MILLION NOP INSTRUCTIONS TO EXECUTE
		 */
		while (!this->readPin());
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa80 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f083 0301 	eor.w	r3, r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d000      	beq.n	8006b94 <_ZN13OneWireDriver17thirdStateHandlerEv+0x64>
 8006b92:	e7f5      	b.n	8006b80 <_ZN13OneWireDriver17thirdStateHandlerEv+0x50>
		delayMicroseconds(50);
 8006b94:	2032      	movs	r0, #50	; 0x32
 8006b96:	f000 f8e3 	bl	8006d60 <delayMicroseconds>
		if (this->readPin()) {
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa73 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
			rawBits |= (1UL << i);
 8006ba6:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8006baa:	2201      	movs	r2, #1
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	657b      	str	r3, [r7, #84]	; 0x54
		}
		while (this->readPin());
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa65 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d000      	beq.n	8006bc4 <_ZN13OneWireDriver17thirdStateHandlerEv+0x94>
 8006bc2:	e7f8      	b.n	8006bb6 <_ZN13OneWireDriver17thirdStateHandlerEv+0x86>
	for (int8_t i = 31; i >= 0; i--){	//Read 32 bits of temp.&humidity data
 8006bc4:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006bd2:	e7d1      	b.n	8006b78 <_ZN13OneWireDriver17thirdStateHandlerEv+0x48>
	}
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 8006bd4:	2307      	movs	r3, #7
 8006bd6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8006bda:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	db2c      	blt.n	8006c3c <_ZN13OneWireDriver17thirdStateHandlerEv+0x10c>
		while (!this->readPin());
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa4f 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f083 0301 	eor.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d000      	beq.n	8006bf6 <_ZN13OneWireDriver17thirdStateHandlerEv+0xc6>
 8006bf4:	e7f5      	b.n	8006be2 <_ZN13OneWireDriver17thirdStateHandlerEv+0xb2>
		delayMicroseconds(50);
 8006bf6:	2032      	movs	r0, #50	; 0x32
 8006bf8:	f000 f8b2 	bl	8006d60 <delayMicroseconds>
		if (this->readPin()) {
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa42 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <_ZN13OneWireDriver17thirdStateHandlerEv+0xee>
			checksumBits |= (1UL << i);
 8006c08:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		}
		while (this->readPin());
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa31 	bl	8007086 <_ZN13OneWireDriver7readPinEv>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d000      	beq.n	8006c2c <_ZN13OneWireDriver17thirdStateHandlerEv+0xfc>
 8006c2a:	e7f8      	b.n	8006c1e <_ZN13OneWireDriver17thirdStateHandlerEv+0xee>
	for (int8_t i = 7; i >= 0; i--){		//Read 8 bits of checksum data
 8006c2c:	f997 3051 	ldrsb.w	r3, [r7, #81]	; 0x51
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8006c3a:	e7ce      	b.n	8006bda <_ZN13OneWireDriver17thirdStateHandlerEv+0xaa>
	}
	uint8_t data[5];
	data[0] = (rawBits >> 24) & 0xFF;//Copy raw data bits to an array of bytes
 8006c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3e:	0e1b      	lsrs	r3, r3, #24
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	data[1] = (rawBits >> 16) & 0xFF;
 8006c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	data[2] = (rawBits >> 8) & 0xFF;
 8006c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	data[3] = (rawBits >> 0) & 0xFF;
 8006c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	data[4] = (checksumBits) & 0xFF;
 8006c62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006c66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t humid = (data[0] << 8) | data[1];
 8006c6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	b21a      	sxth	r2, r3
 8006c72:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006c76:	b21b      	sxth	r3, r3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t temp = (data[2] << 8) | data[3];
 8006c80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t humidDecimal = humid % 10;
 8006c96:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	08d9      	lsrs	r1, r3, #3
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t tempDecimal = temp % 10;
 8006cb0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8006cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cba:	08d9      	lsrs	r1, r3, #3
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	temp = temp / (uint16_t) 10;
 8006cca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	humid = humid / (uint16_t) 10;
 8006cda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <_ZN13OneWireDriver17thirdStateHandlerEv+0x21c>)
 8006ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce4:	08db      	lsrs	r3, r3, #3
 8006ce6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	char uartData[50];
	sprintf(uartData, "\r\nTemperatura\t %hu.%huC\r\nWilgotnosc\t %hu.%hu%%\r\n",
 8006cea:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8006cee:	f8b7 4048 	ldrh.w	r4, [r7, #72]	; 0x48
 8006cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006cf6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
			temp, tempDecimal, humid, humidDecimal);
 8006cfa:	f107 000c 	add.w	r0, r7, #12
 8006cfe:	9201      	str	r2, [sp, #4]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	4623      	mov	r3, r4
 8006d04:	460a      	mov	r2, r1
 8006d06:	4912      	ldr	r1, [pc, #72]	; (8006d50 <_ZN13OneWireDriver17thirdStateHandlerEv+0x220>)
 8006d08:	f001 ff4a 	bl	8008ba0 <sprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)uartData, /*sizeof(uartData)*/ 42, 10);
 8006d0c:	f107 010c 	add.w	r1, r7, #12
 8006d10:	230a      	movs	r3, #10
 8006d12:	222a      	movs	r2, #42	; 0x2a
 8006d14:	480f      	ldr	r0, [pc, #60]	; (8006d54 <_ZN13OneWireDriver17thirdStateHandlerEv+0x224>)
 8006d16:	f7fc ffaa 	bl	8003c6e <HAL_UART_Transmit>
	//powiadom glowny task ze juz zakonczyla sie cala robota
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
	xSemaphoreGiveFromISR(binarySem, &xHigherPriorityTaskWoken);
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <_ZN13OneWireDriver17thirdStateHandlerEv+0x228>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f107 0208 	add.w	r2, r7, #8
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe f9d7 	bl	80050dc <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <_ZN13OneWireDriver17thirdStateHandlerEv+0x214>
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <_ZN13OneWireDriver17thirdStateHandlerEv+0x22c>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
}
 8006d44:	bf00      	nop
 8006d46:	375c      	adds	r7, #92	; 0x5c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd90      	pop	{r4, r7, pc}
 8006d4c:	cccccccd 	.word	0xcccccccd
 8006d50:	0800ce5c 	.word	0x0800ce5c
 8006d54:	200007a0 	.word	0x200007a0
 8006d58:	20000828 	.word	0x20000828
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <delayMicroseconds>:

void delayMicroseconds(uint32_t us){
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 8006d68:	f7fb fe64 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	613b      	str	r3, [r7, #16]
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor freq. relative to base of 80MHz
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d7a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006e08 <delayMicroseconds+0xa8>
 8006d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d82:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d019      	beq.n	8006dc0 <delayMicroseconds+0x60>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	ee17 0a90 	vmov	r0, s15
 8006da2:	f7f9 fbe1 	bl	8000568 <__aeabi_f2d>
 8006da6:	a316      	add	r3, pc, #88	; (adr r3, 8006e00 <delayMicroseconds+0xa0>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fc30 	bl	8000610 <__aeabi_dmul>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	4618      	mov	r0, r3
 8006db6:	4621      	mov	r1, r4
 8006db8:	f7f9 ff02 	bl	8000bc0 <__aeabi_d2uiz>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	e00e      	b.n	8006dde <delayMicroseconds+0x7e>
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7f9 fbd1 	bl	8000568 <__aeabi_f2d>
 8006dc6:	a30e      	add	r3, pc, #56	; (adr r3, 8006e00 <delayMicroseconds+0xa0>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fc20 	bl	8000610 <__aeabi_dmul>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f7f9 fef2 	bl	8000bc0 <__aeabi_d2uiz>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	60bb      	str	r3, [r7, #8]
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm volatile("nop");}
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d204      	bcs.n	8006df6 <delayMicroseconds+0x96>
 8006dec:	bf00      	nop
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	3301      	adds	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e7f6      	b.n	8006de4 <delayMicroseconds+0x84>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd90      	pop	{r4, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	978d4fdf 	.word	0x978d4fdf
 8006e04:	401c926e 	.word	0x401c926e
 8006e08:	4c989680 	.word	0x4c989680

08006e0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a0d      	ldr	r2, [pc, #52]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d102      	bne.n	8006e24 <HAL_TIM_PeriodElapsedCallback+0x18>
	HAL_IncTick();
 8006e1e:	f7fb f809 	bl	8001e34 <HAL_IncTick>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006e22:	e010      	b.n	8006e46 <HAL_TIM_PeriodElapsedCallback+0x3a>
	  timers[deviceManager.getTimerIndex(htim)]->getDriver()->executeState(); //TODO!
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	480b      	ldr	r0, [pc, #44]	; (8006e54 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8006e28:	f7ff f9f6 	bl	8006218 <_ZN13DeviceManager13getTimerIndexEP17TIM_HandleTypeDef>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff28 	bl	8007c8a <_ZN5Timer9getDriverEv>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6813      	ldr	r3, [r2, #0]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4610      	mov	r0, r2
 8006e44:	4798      	blx	r3
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40000400 	.word	0x40000400
 8006e54:	2000082c 	.word	0x2000082c
 8006e58:	20000000 	.word	0x20000000

08006e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, (uint8_t *)"Error Handler!\r\n", 20, 10);
 8006e60:	230a      	movs	r3, #10
 8006e62:	2214      	movs	r2, #20
 8006e64:	4902      	ldr	r1, [pc, #8]	; (8006e70 <Error_Handler+0x14>)
 8006e66:	4803      	ldr	r0, [pc, #12]	; (8006e74 <Error_Handler+0x18>)
 8006e68:	f7fc ff01 	bl	8003c6e <HAL_UART_Transmit>
  /* USER CODE END Error_Handler_Debug */
}
 8006e6c:	bf00      	nop
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	0800ce90 	.word	0x0800ce90
 8006e74:	200007a0 	.word	0x200007a0

08006e78 <_Z41__static_initialization_and_destruction_0ii>:

///
}
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10f      	bne.n	8006ea8 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d10a      	bne.n	8006ea8 <_Z41__static_initialization_and_destruction_0ii+0x30>
DeviceManager deviceManager;
 8006e92:	4807      	ldr	r0, [pc, #28]	; (8006eb0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8006e94:	f7ff f8f6 	bl	8006084 <_ZN13DeviceManagerC1Ev>
OneWireSensor tempSensor1(&sensor1Data);
 8006e98:	4906      	ldr	r1, [pc, #24]	; (8006eb4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006e9a:	4807      	ldr	r0, [pc, #28]	; (8006eb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006e9c:	f000 f92b 	bl	80070f6 <_ZN13OneWireSensorC1EP7PinData>
OneWireSensor tempSensor2(&sensor2Data);
 8006ea0:	4906      	ldr	r1, [pc, #24]	; (8006ebc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006ea2:	4807      	ldr	r0, [pc, #28]	; (8006ec0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006ea4:	f000 f927 	bl	80070f6 <_ZN13OneWireSensorC1EP7PinData>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	2000082c 	.word	0x2000082c
 8006eb4:	20000008 	.word	0x20000008
 8006eb8:	20000858 	.word	0x20000858
 8006ebc:	20000010 	.word	0x20000010
 8006ec0:	20000880 	.word	0x20000880

08006ec4 <_GLOBAL__sub_I_huart3>:
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f7ff ffd3 	bl	8006e78 <_Z41__static_initialization_and_destruction_0ii>
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <_ZN13GenericDriverC1EP7PinData>:
	PinData *pinData;
	Timer *timer;
//	StateHandler stateHandler; //TODO: ?stateHandler powinien nalezec do klady bazowej
public:
	GenericDriver(){}//TODO: NIE!
	GenericDriver(PinData *pinData) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <_ZN13GenericDriverC1EP7PinData+0x48>)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
		if(deviceManager.checkIfPinFree(pinData)){
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	480e      	ldr	r0, [pc, #56]	; (8006f20 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8006ee8:	f7ff f915 	bl	8006116 <_ZN13DeviceManager14checkIfPinFreeEP7PinData>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <_ZN13GenericDriverC1EP7PinData+0x26>
			this->pinData = pinData;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	e005      	b.n	8006f06 <_ZN13GenericDriverC1EP7PinData+0x32>
		}
		else {
			this->pinData = deviceManager.getFreePin();
 8006efa:	4809      	ldr	r0, [pc, #36]	; (8006f20 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8006efc:	f7ff f948 	bl	8006190 <_ZN13DeviceManager10getFreePinEv>
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]
		}
		this->timer = deviceManager.getNewTimerHandle();
 8006f06:	4806      	ldr	r0, [pc, #24]	; (8006f20 <_ZN13GenericDriverC1EP7PinData+0x4c>)
 8006f08:	f7ff f968 	bl	80061dc <_ZN13DeviceManager17getNewTimerHandleEv>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
	};
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	0800d014 	.word	0x0800d014
 8006f20:	2000082c 	.word	0x2000082c

08006f24 <_ZN13GenericDriver18driverStartReadoutEv>:
	virtual void driverStartReadout(void) {};//= 0; //TODO: chyba nie abstrakcyjna
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <_ZN13GenericDriver12executeStateEv>:
	virtual void executeState(void) {};//= 0;
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <_ZN13OneWireDriverC1EP7PinData>:
#include "one_wire_driver.hpp"

OneWireDriver::OneWireDriver(PinData *pinData) : GenericDriver(pinData) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff ffba 	bl	8006ed4 <_ZN13GenericDriverC1EP7PinData>
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <_ZN13OneWireDriverC1EP7PinData+0x40>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	this->timer->setDriver(this); //zamiast podczepiania callbacka-podczepanie obiektu drivera-TODO: podczepic obiekt generycznego drivera
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fe7d 	bl	8007c6e <_ZN5Timer9setDriverEP13GenericDriver>
	this->stateHandler = &OneWireDriver::firstStateHandler;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <_ZN13OneWireDriverC1EP7PinData+0x44>)
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	611a      	str	r2, [r3, #16]
};
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800ceac 	.word	0x0800ceac
 8006f90:	08006a8d 	.word	0x08006a8d

08006f94 <_ZN13OneWireDriver18driverStartReadoutEv>:

void OneWireDriver::driverStartReadout(void){
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	this->stateHandler = &OneWireDriver::firstStateHandler;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a07      	ldr	r2, [pc, #28]	; (8006fbc <_ZN13OneWireDriver18driverStartReadoutEv+0x28>)
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	611a      	str	r2, [r3, #16]
	this->executeState();
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3304      	adds	r3, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08006a8d 	.word	0x08006a8d

08006fc0 <_ZN13OneWireDriver12executeStateEv>:

void OneWireDriver::executeState(void){
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	(this->*stateHandler)();
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <_ZN13OneWireDriver12executeStateEv+0x1a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	e00a      	b.n	8006ff0 <_ZN13OneWireDriver12executeStateEv+0x30>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	105b      	asrs	r3, r3, #1
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6912      	ldr	r2, [r2, #16]
 8006ff4:	1052      	asrs	r2, r2, #1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZN13OneWireDriver13changePinModeE11oneWireMode>:

void OneWireDriver::changePinMode(oneWireMode mode){
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = this->pinData->GPIO_Pin;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	889b      	ldrh	r3, [r3, #4]
 800701a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
	if(mode == ONE_WIRE_OUTPUT){
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x28>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800702a:	2301      	movs	r3, #1
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	e004      	b.n	800703a <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
	}
	else if(mode == ONE_WIRE_INPUT){
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <_ZN13OneWireDriver13changePinModeE11oneWireMode+0x32>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(this->pinData->GPIO_Port, &GPIO_InitStruct);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f107 020c 	add.w	r2, r7, #12
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa ff92 	bl	8001f70 <HAL_GPIO_Init>
};
 800704c:	bf00      	nop
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZN13OneWireDriver8writePinEb>:

void OneWireDriver::writePin(bool state){
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
					  this->pinData->GPIO_Pin,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
	HAL_GPIO_WritePin(this->pinData->GPIO_Port,
 800706a:	8899      	ldrh	r1, [r3, #4]
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <_ZN13OneWireDriver8writePinEb+0x22>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <_ZN13OneWireDriver8writePinEb+0x24>
 8007076:	2300      	movs	r3, #0
					  state == true ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007078:	461a      	mov	r2, r3
 800707a:	f7fb f8e5 	bl	8002248 <HAL_GPIO_WritePin>
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <_ZN13OneWireDriver7readPinEv>:

bool OneWireDriver::readPin(void){
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
	return (1&HAL_GPIO_ReadPin(this->pinData->GPIO_Port, this->pinData->GPIO_Pin));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fb f8cd 	bl	800223c <HAL_GPIO_ReadPin>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <_ZN13GenericDriverC1Ev>:
	GenericDriver(){}//TODO: NIE!
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <_ZN13GenericDriverC1Ev+0x1c>)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	0800d014 	.word	0x0800d014

080070dc <_ZN6SensorC1Ev>:
#define SENSOR_HPP

#include "generic_driver.hpp"
#include "pin_data.hpp"

class Sensor { //generyczna klasa sensora, ?abstrakcyjna?
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff ffe8 	bl	80070bc <_ZN13GenericDriverC1Ev>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <_ZN13OneWireSensorC1EP7PinData>:
#include "one_wire_sensor.hpp"

OneWireSensor::OneWireSensor(PinData *pinData) : /*Sensor(pinData),*/ oneWireDriver(OneWireDriver(pinData)) {}
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff ffea 	bl	80070dc <_ZN6SensorC1Ev>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	330c      	adds	r3, #12
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff ff1c 	bl	8006f4c <_ZN13OneWireDriverC1EP7PinData>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <_ZN13OneWireSensor15startNewReadoutEv>:

void OneWireSensor::startNewReadout(void){
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
	this->oneWireDriver.driverStartReadout();
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	330c      	adds	r3, #12
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff32 	bl	8006f94 <_ZN13OneWireDriver18driverStartReadoutEv>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8007138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800713c:	4b2c      	ldr	r3, [pc, #176]	; (80071f0 <Add_Sample_Service+0xb8>)
{
 800713e:	b092      	sub	sp, #72	; 0x48
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8007140:	aa06      	add	r2, sp, #24
 8007142:	f103 0610 	add.w	r6, r3, #16
 8007146:	4615      	mov	r5, r2
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	4614      	mov	r4, r2
 800714e:	c403      	stmia	r4!, {r0, r1}
 8007150:	3308      	adds	r3, #8
 8007152:	42b3      	cmp	r3, r6
 8007154:	4622      	mov	r2, r4
 8007156:	d1f7      	bne.n	8007148 <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8007158:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <Add_Sample_Service+0xbc>)
 800715a:	aa0a      	add	r2, sp, #40	; 0x28
 800715c:	f103 0710 	add.w	r7, r3, #16
 8007160:	4616      	mov	r6, r2
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	6859      	ldr	r1, [r3, #4]
 8007166:	4614      	mov	r4, r2
 8007168:	c403      	stmia	r4!, {r0, r1}
 800716a:	3308      	adds	r3, #8
 800716c:	42bb      	cmp	r3, r7
 800716e:	4622      	mov	r2, r4
 8007170:	d1f7      	bne.n	8007162 <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8007172:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <Add_Sample_Service+0xc0>)
 8007174:	aa0e      	add	r2, sp, #56	; 0x38
 8007176:	f103 0e10 	add.w	lr, r3, #16
 800717a:	4617      	mov	r7, r2
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	4614      	mov	r4, r2
 8007182:	c403      	stmia	r4!, {r0, r1}
 8007184:	3308      	adds	r3, #8
 8007186:	4573      	cmp	r3, lr
 8007188:	4622      	mov	r2, r4
 800718a:	d1f7      	bne.n	800717c <Add_Sample_Service+0x44>
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 800718c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007204 <Add_Sample_Service+0xcc>
 8007190:	f8cd 8000 	str.w	r8, [sp]
 8007194:	2307      	movs	r3, #7
 8007196:	2201      	movs	r2, #1
 8007198:	4629      	mov	r1, r5
 800719a:	2002      	movs	r0, #2
 800719c:	f7fc ff9f 	bl	80040de <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 80071a0:	4603      	mov	r3, r0
 80071a2:	bb08      	cbnz	r0, 80071e8 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80071a4:	4a15      	ldr	r2, [pc, #84]	; (80071fc <Add_Sample_Service+0xc4>)
 80071a6:	9205      	str	r2, [sp, #20]
 80071a8:	2510      	movs	r5, #16
 80071aa:	2401      	movs	r4, #1
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	f8b8 0000 	ldrh.w	r0, [r8]
 80071b4:	9404      	str	r4, [sp, #16]
 80071b6:	2314      	movs	r3, #20
 80071b8:	9503      	str	r5, [sp, #12]
 80071ba:	9500      	str	r5, [sp, #0]
 80071bc:	4632      	mov	r2, r6
 80071be:	2102      	movs	r1, #2
 80071c0:	f7fc ffd0 	bl	8004164 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80071c4:	4603      	mov	r3, r0
 80071c6:	b978      	cbnz	r0, 80071e8 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80071c8:	4a0d      	ldr	r2, [pc, #52]	; (8007200 <Add_Sample_Service+0xc8>)
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	230c      	movs	r3, #12
 80071ce:	9205      	str	r2, [sp, #20]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	f8b8 0000 	ldrh.w	r0, [r8]
 80071d6:	9404      	str	r4, [sp, #16]
 80071d8:	9503      	str	r5, [sp, #12]
 80071da:	9402      	str	r4, [sp, #8]
 80071dc:	2314      	movs	r3, #20
 80071de:	463a      	mov	r2, r7
 80071e0:	2102      	movs	r1, #2
 80071e2:	f7fc ffbf 	bl	8004164 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80071e6:	b100      	cbz	r0, 80071ea <Add_Sample_Service+0xb2>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80071e8:	2047      	movs	r0, #71	; 0x47
}
 80071ea:	b012      	add	sp, #72	; 0x48
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	0800ced0 	.word	0x0800ced0
 80071f4:	0800cee0 	.word	0x0800cee0
 80071f8:	0800cef0 	.word	0x0800cef0
 80071fc:	20001c90 	.word	0x20001c90
 8007200:	20001c94 	.word	0x20001c94
 8007204:	20001c92 	.word	0x20001c92

08007208 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 8007208:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 800720a:	4b28      	ldr	r3, [pc, #160]	; (80072ac <Make_Connection+0xa4>)
 800720c:	781c      	ldrb	r4, [r3, #0]
{  
 800720e:	b08c      	sub	sp, #48	; 0x30
 8007210:	ad08      	add	r5, sp, #32
  if(BLE_Role == CLIENT) {
 8007212:	bb2c      	cbnz	r4, 8007260 <Make_Connection+0x58>
    
    printf("Client Create Connection\n");
 8007214:	4826      	ldr	r0, [pc, #152]	; (80072b0 <Make_Connection+0xa8>)
 8007216:	f001 fcab 	bl	8008b70 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800721a:	4b26      	ldr	r3, [pc, #152]	; (80072b4 <Make_Connection+0xac>)
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	9008      	str	r0, [sp, #32]
 8007220:	889b      	ldrh	r3, [r3, #4]
 8007222:	80ab      	strh	r3, [r5, #4]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fb15 	bl	8007854 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 800722a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800722e:	223c      	movs	r2, #60	; 0x3c
 8007230:	9306      	str	r3, [sp, #24]
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800723a:	2328      	movs	r3, #40	; 0x28
 800723c:	9204      	str	r2, [sp, #16]
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	9403      	str	r4, [sp, #12]
 8007242:	9400      	str	r4, [sp, #0]
 8007244:	462b      	mov	r3, r5
 8007246:	4622      	mov	r2, r4
 8007248:	4608      	mov	r0, r1
 800724a:	f7fc fede 	bl	800400a <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2); 
    
    if (ret != 0){
 800724e:	b128      	cbz	r0, 800725c <Make_Connection+0x54>
      printf("Error while starting connection.\n");
 8007250:	4819      	ldr	r0, [pc, #100]	; (80072b8 <Make_Connection+0xb0>)
 8007252:	f001 fc8d 	bl	8008b70 <puts>
      HAL_Delay(100);
 8007256:	2064      	movs	r0, #100	; 0x64
 8007258:	f7fa fdfe 	bl	8001e58 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 800725c:	b00c      	add	sp, #48	; 0x30
 800725e:	bd70      	pop	{r4, r5, r6, pc}
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8007260:	4b16      	ldr	r3, [pc, #88]	; (80072bc <Make_Connection+0xb4>)
 8007262:	462a      	mov	r2, r5
 8007264:	f103 0608 	add.w	r6, r3, #8
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	4614      	mov	r4, r2
 800726e:	c403      	stmia	r4!, {r0, r1}
 8007270:	3308      	adds	r3, #8
 8007272:	42b3      	cmp	r3, r6
 8007274:	4622      	mov	r2, r4
 8007276:	d1f7      	bne.n	8007268 <Make_Connection+0x60>
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	791b      	ldrb	r3, [r3, #4]
 800727c:	6020      	str	r0, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 800727e:	2100      	movs	r1, #0
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8007280:	7123      	strb	r3, [r4, #4]
    hci_le_set_scan_resp_data(0,NULL);
 8007282:	4608      	mov	r0, r1
 8007284:	f7fd f978 	bl	8004578 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR, 
 8007288:	2300      	movs	r3, #0
 800728a:	220d      	movs	r2, #13
 800728c:	9201      	str	r2, [sp, #4]
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	9502      	str	r5, [sp, #8]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800729e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fc fe14 	bl	8003ed0 <aci_gap_set_discoverable>
}
 80072a8:	e7d8      	b.n	800725c <Make_Connection+0x54>
 80072aa:	bf00      	nop
 80072ac:	20000028 	.word	0x20000028
 80072b0:	0800d062 	.word	0x0800d062
 80072b4:	0800cf00 	.word	0x0800cf00
 80072b8:	0800d07b 	.word	0x0800d07b
 80072bc:	0800cf06 	.word	0x0800cf06

080072c0 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 80072c2:	4d0f      	ldr	r5, [pc, #60]	; (8007300 <startReadTXCharHandle+0x40>)
 80072c4:	782a      	ldrb	r2, [r5, #0]
{
 80072c6:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 80072c8:	b9c2      	cbnz	r2, 80072fc <startReadTXCharHandle+0x3c>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <startReadTXCharHandle+0x44>)
 80072cc:	aa02      	add	r2, sp, #8
 80072ce:	f103 0710 	add.w	r7, r3, #16
 80072d2:	4616      	mov	r6, r2
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	6859      	ldr	r1, [r3, #4]
 80072d8:	4614      	mov	r4, r2
 80072da:	c403      	stmia	r4!, {r0, r1}
 80072dc:	3308      	adds	r3, #8
 80072de:	42bb      	cmp	r3, r7
 80072e0:	4622      	mov	r2, r4
 80072e2:	d1f7      	bne.n	80072d4 <startReadTXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <startReadTXCharHandle+0x48>)
 80072e6:	8818      	ldrh	r0, [r3, #0]
 80072e8:	9600      	str	r6, [sp, #0]
 80072ea:	2302      	movs	r3, #2
 80072ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072f0:	2101      	movs	r1, #1
 80072f2:	b280      	uxth	r0, r0
 80072f4:	f7fc ffcb 	bl	800428e <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	702b      	strb	r3, [r5, #0]
  }
}
 80072fc:	b007      	add	sp, #28
 80072fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007300:	20001c32 	.word	0x20001c32
 8007304:	0800cee0 	.word	0x0800cee0
 8007308:	20001c2c 	.word	0x20001c2c

0800730c <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 800730c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 800730e:	4d0f      	ldr	r5, [pc, #60]	; (800734c <startReadRXCharHandle+0x40>)
 8007310:	782a      	ldrb	r2, [r5, #0]
{  
 8007312:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 8007314:	b9c2      	cbnz	r2, 8007348 <startReadRXCharHandle+0x3c>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8007316:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <startReadRXCharHandle+0x44>)
 8007318:	aa02      	add	r2, sp, #8
 800731a:	f103 0710 	add.w	r7, r3, #16
 800731e:	4616      	mov	r6, r2
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	6859      	ldr	r1, [r3, #4]
 8007324:	4614      	mov	r4, r2
 8007326:	c403      	stmia	r4!, {r0, r1}
 8007328:	3308      	adds	r3, #8
 800732a:	42bb      	cmp	r3, r7
 800732c:	4622      	mov	r2, r4
 800732e:	d1f7      	bne.n	8007320 <startReadRXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <startReadRXCharHandle+0x48>)
 8007332:	8818      	ldrh	r0, [r3, #0]
 8007334:	9600      	str	r6, [sp, #0]
 8007336:	2302      	movs	r3, #2
 8007338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800733c:	2101      	movs	r1, #1
 800733e:	b280      	uxth	r0, r0
 8007340:	f7fc ffa5 	bl	800428e <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	702b      	strb	r3, [r5, #0]
  }
}
 8007348:	b007      	add	sp, #28
 800734a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734c:	20001c31 	.word	0x20001c31
 8007350:	0800cef0 	.word	0x0800cef0
 8007354:	20001c2c 	.word	0x20001c2c

08007358 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4605      	mov	r5, r0
  BSP_LED_Toggle(LED2);
 800735c:	2000      	movs	r0, #0
{
 800735e:	460e      	mov	r6, r1
  BSP_LED_Toggle(LED2);
 8007360:	f000 fa8a 	bl	8007878 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8007364:	462c      	mov	r4, r5
 8007366:	1b63      	subs	r3, r4, r5
 8007368:	429e      	cmp	r6, r3
 800736a:	dc06      	bgt.n	800737a <receiveData+0x22>
    printf("%c", data_buffer[i]);
  }
  fflush(stdout);
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <receiveData+0x2c>)
 800736e:	681b      	ldr	r3, [r3, #0]
}
 8007370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fflush(stdout);
 8007374:	6898      	ldr	r0, [r3, #8]
 8007376:	f000 beef 	b.w	8008158 <fflush>
    printf("%c", data_buffer[i]);
 800737a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800737e:	f001 fb83 	bl	8008a88 <putchar>
 8007382:	e7f0      	b.n	8007366 <receiveData+0xe>
 8007384:	2000003c 	.word	0x2000003c

08007388 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8007388:	b513      	push	{r0, r1, r4, lr}
 800738a:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {    
 800738c:	490d      	ldr	r1, [pc, #52]	; (80073c4 <sendData+0x3c>)
 800738e:	7809      	ldrb	r1, [r1, #0]
 8007390:	2901      	cmp	r1, #1
{
 8007392:	4603      	mov	r3, r0
  if(BLE_Role == SERVER) {    
 8007394:	d10a      	bne.n	80073ac <sendData+0x24>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 8007396:	490c      	ldr	r1, [pc, #48]	; (80073c8 <sendData+0x40>)
 8007398:	480c      	ldr	r0, [pc, #48]	; (80073cc <sendData+0x44>)
 800739a:	8809      	ldrh	r1, [r1, #0]
 800739c:	8800      	ldrh	r0, [r0, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	f7fc ff3c 	bl	8004220 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 80073a8:	b002      	add	sp, #8
 80073aa:	bd10      	pop	{r4, pc}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 80073ac:	4908      	ldr	r1, [pc, #32]	; (80073d0 <sendData+0x48>)
 80073ae:	8808      	ldrh	r0, [r1, #0]
 80073b0:	4908      	ldr	r1, [pc, #32]	; (80073d4 <sendData+0x4c>)
 80073b2:	880c      	ldrh	r4, [r1, #0]
 80073b4:	3401      	adds	r4, #1
 80073b6:	b2a1      	uxth	r1, r4
 80073b8:	b280      	uxth	r0, r0
}
 80073ba:	b002      	add	sp, #8
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 80073c0:	f7fc bfd1 	b.w	8004366 <aci_gatt_write_without_response>
 80073c4:	20000028 	.word	0x20000028
 80073c8:	20001c90 	.word	0x20001c90
 80073cc:	20001c92 	.word	0x20001c92
 80073d0:	20001c2c 	.word	0x20001c2c
 80073d4:	20001c8e 	.word	0x20001c8e

080073d8 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 80073d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 80073da:	2301      	movs	r3, #1
 80073dc:	f88d 3004 	strb.w	r3, [sp, #4]
 80073e0:	2300      	movs	r3, #0
 80073e2:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 80073e6:	f7fa fd31 	bl	8001e4c <HAL_GetTick>
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80073ea:	4d0d      	ldr	r5, [pc, #52]	; (8007420 <enableNotification+0x48>)
 80073ec:	4c0d      	ldr	r4, [pc, #52]	; (8007424 <enableNotification+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80073ee:	4606      	mov	r6, r0
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80073f0:	8821      	ldrh	r1, [r4, #0]
 80073f2:	8828      	ldrh	r0, [r5, #0]
 80073f4:	3102      	adds	r1, #2
 80073f6:	ab01      	add	r3, sp, #4
 80073f8:	2202      	movs	r2, #2
 80073fa:	b289      	uxth	r1, r1
 80073fc:	b280      	uxth	r0, r0
 80073fe:	f7fc ff7c 	bl	80042fa <aci_gatt_write_charac_descriptor>
 8007402:	2846      	cmp	r0, #70	; 0x46
 8007404:	d106      	bne.n	8007414 <enableNotification+0x3c>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8007406:	f7fa fd21 	bl	8001e4c <HAL_GetTick>
 800740a:	f242 7310 	movw	r3, #10000	; 0x2710
 800740e:	1b80      	subs	r0, r0, r6
 8007410:	4298      	cmp	r0, r3
 8007412:	d9ed      	bls.n	80073f0 <enableNotification+0x18>
  }
  notification_enabled = TRUE;
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <enableNotification+0x50>)
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
}
 800741a:	b002      	add	sp, #8
 800741c:	bd70      	pop	{r4, r5, r6, pc}
 800741e:	bf00      	nop
 8007420:	20001c2c 	.word	0x20001c2c
 8007424:	20001c8c 	.word	0x20001c8c
 8007428:	20001c30 	.word	0x20001c30

0800742c <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <Attribute_Modified_CB+0x28>)
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	4298      	cmp	r0, r3
 8007434:	d102      	bne.n	800743c <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 8007436:	4610      	mov	r0, r2
 8007438:	f7ff bf8e 	b.w	8007358 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <Attribute_Modified_CB+0x2c>)
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	3302      	adds	r3, #2
 8007442:	4298      	cmp	r0, r3
 8007444:	d104      	bne.n	8007450 <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 8007446:	7813      	ldrb	r3, [r2, #0]
 8007448:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 800744a:	bf04      	itt	eq
 800744c:	4a03      	ldreq	r2, [pc, #12]	; (800745c <Attribute_Modified_CB+0x30>)
 800744e:	7013      	strbeq	r3, [r2, #0]
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20001c94 	.word	0x20001c94
 8007458:	20001c90 	.word	0x20001c90
 800745c:	20001c30 	.word	0x20001c30

08007460 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  
  printf("Connected to device:");
  for(int i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 8007464:	4f0c      	ldr	r7, [pc, #48]	; (8007498 <GAP_ConnectionComplete_CB+0x38>)
  connected = TRUE;
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <GAP_ConnectionComplete_CB+0x3c>)
{  
 800746c:	4604      	mov	r4, r0
  printf("Connected to device:");
 800746e:	480c      	ldr	r0, [pc, #48]	; (80074a0 <GAP_ConnectionComplete_CB+0x40>)
  connection_handle = handle;
 8007470:	8019      	strh	r1, [r3, #0]
  printf("Connected to device:");
 8007472:	f001 faf1 	bl	8008a58 <printf>
 8007476:	1da5      	adds	r5, r4, #6
 8007478:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 800747a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800747e:	4638      	mov	r0, r7
 8007480:	f001 faea 	bl	8008a58 <printf>
  for(int i = 5; i > 0; i--){
 8007484:	42b5      	cmp	r5, r6
 8007486:	d1f8      	bne.n	800747a <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 8007488:	7821      	ldrb	r1, [r4, #0]
 800748a:	4806      	ldr	r0, [pc, #24]	; (80074a4 <GAP_ConnectionComplete_CB+0x44>)
}
 800748c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 8007490:	f001 bae2 	b.w	8008a58 <printf>
 8007494:	20001c28 	.word	0x20001c28
 8007498:	0800d049 	.word	0x0800d049
 800749c:	20001c2c 	.word	0x20001c2c
 80074a0:	0800d034 	.word	0x0800d034
 80074a4:	0800d04f 	.word	0x0800d04f

080074a8 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <GAP_DisconnectionComplete_CB+0x2c>)
  
  printf("Disconnected\n");
 80074aa:	480b      	ldr	r0, [pc, #44]	; (80074d8 <GAP_DisconnectionComplete_CB+0x30>)
{
 80074ac:	b510      	push	{r4, lr}
  connected = FALSE;
 80074ae:	2400      	movs	r4, #0
 80074b0:	601c      	str	r4, [r3, #0]
  printf("Disconnected\n");
 80074b2:	f001 fb5d 	bl	8008b70 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <GAP_DisconnectionComplete_CB+0x34>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <GAP_DisconnectionComplete_CB+0x38>)
 80074be:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <GAP_DisconnectionComplete_CB+0x3c>)
 80074c2:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 80074c4:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <GAP_DisconnectionComplete_CB+0x40>)
 80074c6:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <GAP_DisconnectionComplete_CB+0x44>)
 80074ca:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 80074cc:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <GAP_DisconnectionComplete_CB+0x48>)
 80074ce:	701c      	strb	r4, [r3, #0]
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	20001c28 	.word	0x20001c28
 80074d8:	0800d055 	.word	0x0800d055
 80074dc:	2000002a 	.word	0x2000002a
 80074e0:	20001c30 	.word	0x20001c30
 80074e4:	20001c32 	.word	0x20001c32
 80074e8:	20001c31 	.word	0x20001c31
 80074ec:	20001c2f 	.word	0x20001c2f
 80074f0:	20001c2e 	.word	0x20001c2e

080074f4 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <GATT_Notification_CB+0x14>)
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	4298      	cmp	r0, r3
 80074fc:	d102      	bne.n	8007504 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 80074fe:	4610      	mov	r0, r2
 8007500:	f7ff bf2a 	b.w	8007358 <receiveData>
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	20001c8c 	.word	0x20001c8c

0800750c <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 800750c:	7802      	ldrb	r2, [r0, #0]
 800750e:	2a04      	cmp	r2, #4
{
 8007510:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8007512:	d167      	bne.n	80075e4 <user_notify+0xd8>
    return;
  
  switch(event_pckt->evt){
 8007514:	7842      	ldrb	r2, [r0, #1]
 8007516:	2a3e      	cmp	r2, #62	; 0x3e
 8007518:	d005      	beq.n	8007526 <user_notify+0x1a>
 800751a:	2aff      	cmp	r2, #255	; 0xff
 800751c:	d00b      	beq.n	8007536 <user_notify+0x2a>
 800751e:	2a05      	cmp	r2, #5
 8007520:	d160      	bne.n	80075e4 <user_notify+0xd8>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8007522:	f7ff bfc1 	b.w	80074a8 <GAP_DisconnectionComplete_CB>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 8007526:	78c2      	ldrb	r2, [r0, #3]
 8007528:	2a01      	cmp	r2, #1
 800752a:	d15b      	bne.n	80075e4 <user_notify+0xd8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800752c:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8007530:	3009      	adds	r0, #9
 8007532:	f7ff bf95 	b.w	8007460 <GAP_ConnectionComplete_CB>
    break;
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8007536:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800753a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800753e:	428a      	cmp	r2, r1
 8007540:	d01a      	beq.n	8007578 <user_notify+0x6c>
 8007542:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8007546:	d204      	bcs.n	8007552 <user_notify+0x46>
 8007548:	f640 4101 	movw	r1, #3073	; 0xc01
 800754c:	428a      	cmp	r2, r1
 800754e:	d006      	beq.n	800755e <user_notify+0x52>
 8007550:	4770      	bx	lr
 8007552:	d034      	beq.n	80075be <user_notify+0xb2>
 8007554:	f640 4112 	movw	r1, #3090	; 0xc12
 8007558:	428a      	cmp	r2, r1
 800755a:	d015      	beq.n	8007588 <user_notify+0x7c>
 800755c:	4770      	bx	lr
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 800755e:	4a22      	ldr	r2, [pc, #136]	; (80075e8 <user_notify+0xdc>)
 8007560:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8007564:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8007566:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 8007568:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800756a:	bf0c      	ite	eq
 800756c:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8007570:	f103 020a 	addne.w	r2, r3, #10
 8007574:	f7ff bf5a 	b.w	800742c <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8007578:	79c1      	ldrb	r1, [r0, #7]
 800757a:	3902      	subs	r1, #2
 800757c:	f100 020a 	add.w	r2, r0, #10
 8007580:	b2c9      	uxtb	r1, r1
 8007582:	8900      	ldrh	r0, [r0, #8]
 8007584:	f7ff bfb6 	b.w	80074f4 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8007588:	4a18      	ldr	r2, [pc, #96]	; (80075ec <user_notify+0xe0>)
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	2a00      	cmp	r2, #0
 800758e:	d129      	bne.n	80075e4 <user_notify+0xd8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8007590:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <user_notify+0xe4>)
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	b142      	cbz	r2, 80075a8 <user_notify+0x9c>
 8007596:	4a17      	ldr	r2, [pc, #92]	; (80075f4 <user_notify+0xe8>)
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	b92a      	cbnz	r2, 80075a8 <user_notify+0x9c>
          {
            tx_handle = resp->attr_handle;
 800759c:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <user_notify+0xec>)
 800759e:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 80075a0:	4816      	ldr	r0, [pc, #88]	; (80075fc <user_notify+0xf0>)
            tx_handle = resp->attr_handle;
 80075a2:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 80075a4:	f001 ba58 	b.w	8008a58 <printf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <user_notify+0xf4>)
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	b1d2      	cbz	r2, 80075e4 <user_notify+0xd8>
 80075ae:	4a15      	ldr	r2, [pc, #84]	; (8007604 <user_notify+0xf8>)
 80075b0:	7812      	ldrb	r2, [r2, #0]
 80075b2:	b9ba      	cbnz	r2, 80075e4 <user_notify+0xd8>
            rx_handle = resp->attr_handle;
 80075b4:	8919      	ldrh	r1, [r3, #8]
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <user_notify+0xfc>)
            printf("RX Char Handle %04X\n", rx_handle);
 80075b8:	4814      	ldr	r0, [pc, #80]	; (800760c <user_notify+0x100>)
            rx_handle = resp->attr_handle;
 80075ba:	8019      	strh	r1, [r3, #0]
 80075bc:	e7f2      	b.n	80075a4 <user_notify+0x98>
          }
        }
        break;
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 80075be:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <user_notify+0xe0>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b97b      	cbnz	r3, 80075e4 <user_notify+0xd8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <user_notify+0xe4>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	b12b      	cbz	r3, 80075d6 <user_notify+0xca>
 80075ca:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <user_notify+0xe8>)
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	b912      	cbnz	r2, 80075d6 <user_notify+0xca>
          {
            end_read_tx_char_handle = TRUE;
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e006      	b.n	80075e4 <user_notify+0xd8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <user_notify+0xf4>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b11b      	cbz	r3, 80075e4 <user_notify+0xd8>
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <user_notify+0xf8>)
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d0f5      	beq.n	80075d0 <user_notify+0xc4>
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	200018c0 	.word	0x200018c0
 80075ec:	20000028 	.word	0x20000028
 80075f0:	20001c32 	.word	0x20001c32
 80075f4:	20001c2f 	.word	0x20001c2f
 80075f8:	20001c8c 	.word	0x20001c8c
 80075fc:	0800d09c 	.word	0x0800d09c
 8007600:	20001c31 	.word	0x20001c31
 8007604:	20001c2e 	.word	0x20001c2e
 8007608:	20001c8e 	.word	0x20001c8e
 800760c:	0800d0b1 	.word	0x0800d0b1

08007610 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007610:	4b0e      	ldr	r3, [pc, #56]	; (800764c <HAL_MspInit+0x3c>)
{
 8007612:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	661a      	str	r2, [r3, #96]	; 0x60
 800761c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800761e:	f002 0201 	and.w	r2, r2, #1
 8007622:	9200      	str	r2, [sp, #0]
 8007624:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007628:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800762c:	659a      	str	r2, [r3, #88]	; 0x58
 800762e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007634:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007636:	2200      	movs	r2, #0
 8007638:	210f      	movs	r1, #15
 800763a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800763e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007640:	f7fa fc30 	bl	8001ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007644:	b003      	add	sp, #12
 8007646:	f85d fb04 	ldr.w	pc, [sp], #4
 800764a:	bf00      	nop
 800764c:	40021000 	.word	0x40021000

08007650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM7)
 8007652:	6802      	ldr	r2, [r0, #0]
 8007654:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <HAL_TIM_Base_MspInit+0x94>)
 8007656:	429a      	cmp	r2, r3
{
 8007658:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM7)
 800765a:	d112      	bne.n	8007682 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800765c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007660:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007664:	f042 0220 	orr.w	r2, r2, #32
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007672:	2200      	movs	r2, #0
 8007674:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007676:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007678:	f7fa fc14 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800767c:	2037      	movs	r0, #55	; 0x37
 800767e:	f7fa fc45 	bl	8001f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM7_MspInit 1 */
  }

  //TODO: kolejne instancje timerow
  /* USER CODE BEGIN TIM4_MspInit 0 */
  if(htim_base->Instance==TIM4)
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <HAL_TIM_Base_MspInit+0x98>)
 8007686:	429a      	cmp	r2, r3
 8007688:	d112      	bne.n	80076b0 <HAL_TIM_Base_MspInit+0x60>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800768a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800768e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007692:	f042 0204 	orr.w	r2, r2, #4
 8007696:	659a      	str	r2, [r3, #88]	; 0x58
 8007698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80076a0:	2200      	movs	r2, #0
 80076a2:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 80076a4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80076a6:	f7fa fbfd 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80076aa:	201e      	movs	r0, #30
 80076ac:	f7fa fc2e 	bl	8001f0c <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM4_MspInit 0 */

  /* USER CODE BEGIN TIM6_MspInit 0 */
  if(htim_base->Instance==TIM6)
 80076b0:	6822      	ldr	r2, [r4, #0]
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <HAL_TIM_Base_MspInit+0x9c>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d112      	bne.n	80076de <HAL_TIM_Base_MspInit+0x8e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80076b8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80076bc:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80076be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076c0:	f042 0210 	orr.w	r2, r2, #16
 80076c4:	659a      	str	r2, [r3, #88]	; 0x58
 80076c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 80076d2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80076d4:	f7fa fbe6 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80076d8:	2036      	movs	r0, #54	; 0x36
 80076da:	f7fa fc17 	bl	8001f0c <HAL_NVIC_EnableIRQ>
  }
  /* USER CODE END TIM6_MspInit 0 */

}
 80076de:	b004      	add	sp, #16
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	40001400 	.word	0x40001400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40001000 	.word	0x40001000

080076f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f6:	2214      	movs	r2, #20
 80076f8:	2100      	movs	r1, #0
 80076fa:	a803      	add	r0, sp, #12
 80076fc:	f001 f997 	bl	8008a2e <memset>
  if(huart->Instance==USART3)
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <HAL_UART_MspInit+0x5c>)
 8007704:	429a      	cmp	r2, r3
 8007706:	d11f      	bne.n	8007748 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007708:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800770c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 800770e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007710:	480f      	ldr	r0, [pc, #60]	; (8007750 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8007712:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007716:	659a      	str	r2, [r3, #88]	; 0x58
 8007718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800771a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007724:	f042 0204 	orr.w	r2, r2, #4
 8007728:	64da      	str	r2, [r3, #76]	; 0x4c
 800772a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	9302      	str	r3, [sp, #8]
 8007732:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007734:	2330      	movs	r3, #48	; 0x30
 8007736:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007738:	2302      	movs	r3, #2
 800773a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800773c:	2303      	movs	r3, #3
 800773e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007740:	2307      	movs	r3, #7
 8007742:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007744:	f7fa fc14 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007748:	b008      	add	sp, #32
 800774a:	bd10      	pop	{r4, pc}
 800774c:	40004800 	.word	0x40004800
 8007750:	48000800 	.word	0x48000800

08007754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007754:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8007756:	4601      	mov	r1, r0
{
 8007758:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800775a:	2200      	movs	r2, #0
 800775c:	201d      	movs	r0, #29
 800775e:	f7fa fba1 	bl	8001ea4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8007762:	201d      	movs	r0, #29
 8007764:	f7fa fbd2 	bl	8001f0c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007768:	4b14      	ldr	r3, [pc, #80]	; (80077bc <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800776a:	4c15      	ldr	r4, [pc, #84]	; (80077c0 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 800776c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800776e:	f042 0202 	orr.w	r2, r2, #2
 8007772:	659a      	str	r2, [r3, #88]	; 0x58
 8007774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800777c:	a901      	add	r1, sp, #4
 800777e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007780:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007782:	f7fb f981 	bl	8002a88 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007786:	f7fb f95b 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <HAL_InitTick+0x70>)
 800778c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800778e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007792:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <HAL_InitTick+0x74>)
 8007796:	fbb0 f0f3 	udiv	r0, r0, r3
 800779a:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 800779c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 800779e:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80077a0:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 80077a2:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80077a6:	f7fb ffcb 	bl	8003740 <HAL_TIM_Base_Init>
 80077aa:	b920      	cbnz	r0, 80077b6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7fb fe97 	bl	80034e0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80077b2:	b008      	add	sp, #32
 80077b4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80077b6:	2001      	movs	r0, #1
 80077b8:	e7fb      	b.n	80077b2 <HAL_InitTick+0x5e>
 80077ba:	bf00      	nop
 80077bc:	40021000 	.word	0x40021000
 80077c0:	20001c98 	.word	0x20001c98
 80077c4:	40000400 	.word	0x40000400
 80077c8:	000f4240 	.word	0x000f4240

080077cc <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80077cc:	f7fb b97c 	b.w	8002ac8 <HAL_RCC_NMI_IRQHandler>

080077d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077d0:	e7fe      	b.n	80077d0 <HardFault_Handler>

080077d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077d2:	e7fe      	b.n	80077d2 <MemManage_Handler>

080077d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077d4:	e7fe      	b.n	80077d4 <BusFault_Handler>

080077d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077d6:	e7fe      	b.n	80077d6 <UsageFault_Handler>

080077d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077d8:	4770      	bx	lr
	...

080077dc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <EXTI0_IRQHandler+0x8>)
 80077de:	f7fa bbaf 	b.w	8001f40 <HAL_EXTI_IRQHandler>
 80077e2:	bf00      	nop
 80077e4:	20001c84 	.word	0x20001c84

080077e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <TIM3_IRQHandler+0x8>)
 80077ea:	f7fb be93 	b.w	8003514 <HAL_TIM_IRQHandler>
 80077ee:	bf00      	nop
 80077f0:	20001c98 	.word	0x20001c98

080077f4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <EXTI15_10_IRQHandler+0x8>)
 80077f6:	f7fa bba3 	b.w	8001f40 <HAL_EXTI_IRQHandler>
 80077fa:	bf00      	nop
 80077fc:	20000030 	.word	0x20000030

08007800 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <TIM7_IRQHandler+0x8>)
 8007802:	f7fb be87 	b.w	8003514 <HAL_TIM_IRQHandler>
 8007806:	bf00      	nop
 8007808:	200006c8 	.word	0x200006c8

0800780c <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <BSP_LED_Init+0x44>)
{
 800780e:	b510      	push	{r4, lr}
  LED2_GPIO_CLK_ENABLE();    
 8007810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	64da      	str	r2, [r3, #76]	; 0x4c
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800781a:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8007824:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8007826:	2420      	movs	r4, #32
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8007828:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800782a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800782c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800782e:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8007830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8007834:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8007836:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8007838:	f7fa fb9a 	bl	8001f70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800783c:	2200      	movs	r2, #0
 800783e:	4621      	mov	r1, r4
 8007840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007844:	f7fa fd00 	bl	8002248 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8007848:	2000      	movs	r0, #0
 800784a:	b006      	add	sp, #24
 800784c:	bd10      	pop	{r4, pc}
 800784e:	bf00      	nop
 8007850:	40021000 	.word	0x40021000

08007854 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8007854:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8007856:	2201      	movs	r2, #1
 8007858:	2120      	movs	r1, #32
 800785a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800785e:	f7fa fcf3 	bl	8002248 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8007862:	2000      	movs	r0, #0
 8007864:	bd08      	pop	{r3, pc}

08007866 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8007866:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8007868:	2200      	movs	r2, #0
 800786a:	2120      	movs	r1, #32
 800786c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007870:	f7fa fcea 	bl	8002248 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8007874:	2000      	movs	r0, #0
 8007876:	bd08      	pop	{r3, pc}

08007878 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8007878:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800787a:	2120      	movs	r1, #32
 800787c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007880:	f7fa fce7 	bl	8002252 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8007884:	2000      	movs	r0, #0
 8007886:	bd08      	pop	{r3, pc}

08007888 <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <BSP_PB_Init+0x80>)
{
 800788a:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800788c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800788e:	f042 0204 	orr.w	r2, r2, #4
 8007892:	64da      	str	r2, [r3, #76]	; 0x4c
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8007896:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80078a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078a4:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80078a6:	2302      	movs	r3, #2
{
 80078a8:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80078aa:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80078ac:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80078ae:	460c      	mov	r4, r1
 80078b0:	b931      	cbnz	r1, 80078c0 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80078b2:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80078b4:	4815      	ldr	r0, [pc, #84]	; (800790c <BSP_PB_Init+0x84>)
 80078b6:	a901      	add	r1, sp, #4
 80078b8:	f7fa fb5a 	bl	8001f70 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 80078bc:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 80078be:	e010      	b.n	80078e2 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80078c0:	4c13      	ldr	r4, [pc, #76]	; (8007910 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80078c2:	4b14      	ldr	r3, [pc, #80]	; (8007914 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80078c4:	4811      	ldr	r0, [pc, #68]	; (800790c <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80078c6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80078c8:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80078ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80078ce:	f7fa fb4f 	bl	8001f70 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80078d2:	4911      	ldr	r1, [pc, #68]	; (8007918 <BSP_PB_Init+0x90>)
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7fa fb2d 	bl	8001f34 <HAL_EXTI_GetHandle>
 80078da:	4601      	mov	r1, r0
 80078dc:	b118      	cbz	r0, 80078e6 <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80078de:	f06f 0003 	mvn.w	r0, #3
}
 80078e2:	b007      	add	sp, #28
 80078e4:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80078e6:	4620      	mov	r0, r4
 80078e8:	4a0c      	ldr	r2, [pc, #48]	; (800791c <BSP_PB_Init+0x94>)
 80078ea:	f7fa fb1d 	bl	8001f28 <HAL_EXTI_RegisterCallback>
 80078ee:	4604      	mov	r4, r0
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d1f4      	bne.n	80078de <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80078f4:	4602      	mov	r2, r0
 80078f6:	210f      	movs	r1, #15
 80078f8:	2028      	movs	r0, #40	; 0x28
 80078fa:	f7fa fad3 	bl	8001ea4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80078fe:	2028      	movs	r0, #40	; 0x28
 8007900:	f7fa fb04 	bl	8001f0c <HAL_NVIC_EnableIRQ>
 8007904:	e7da      	b.n	80078bc <BSP_PB_Init+0x34>
 8007906:	bf00      	nop
 8007908:	40021000 	.word	0x40021000
 800790c:	48000800 	.word	0x48000800
 8007910:	20000030 	.word	0x20000030
 8007914:	10110000 	.word	0x10110000
 8007918:	1600000d 	.word	0x1600000d
 800791c:	08007939 	.word	0x08007939

08007920 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007920:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8007922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007926:	4803      	ldr	r0, [pc, #12]	; (8007934 <BSP_PB_GetState+0x14>)
 8007928:	f7fa fc88 	bl	800223c <HAL_GPIO_ReadPin>
}
 800792c:	fab0 f080 	clz	r0, r0
 8007930:	0940      	lsrs	r0, r0, #5
 8007932:	bd08      	pop	{r3, pc}
 8007934:	48000800 	.word	0x48000800

08007938 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8007938:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 800793a:	2000      	movs	r0, #0
 800793c:	f7fe fb9c 	bl	8006078 <BSP_PB_Callback>
 8007940:	bd08      	pop	{r3, pc}
	...

08007944 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <MX_USART2_UART_Init+0x2c>)
 8007946:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 800794a:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 800794c:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 800794e:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8007952:	2200      	movs	r2, #0
 8007954:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8007956:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8007958:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800795a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800795c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800795e:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007960:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007962:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8007964:	f7fc fa0b 	bl	8003d7e <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8007968:	3000      	adds	r0, #0
 800796a:	bf18      	it	ne
 800796c:	2001      	movne	r0, #1
 800796e:	bd08      	pop	{r3, pc}
 8007970:	40004400 	.word	0x40004400

08007974 <BSP_COM_Init>:
{
 8007974:	b510      	push	{r4, lr}
  if(COM > COMn)
 8007976:	2801      	cmp	r0, #1
{
 8007978:	b088      	sub	sp, #32
  if(COM > COMn)
 800797a:	d832      	bhi.n	80079e2 <BSP_COM_Init+0x6e>
     hcom_uart[COM].Instance = COM_USART[COM];
 800797c:	491a      	ldr	r1, [pc, #104]	; (80079e8 <BSP_COM_Init+0x74>)
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <BSP_COM_Init+0x78>)
 8007980:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007984:	01c3      	lsls	r3, r0, #7
 8007986:	18d4      	adds	r4, r2, r3
 8007988:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <BSP_COM_Init+0x7c>)
 800798c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800798e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007992:	659a      	str	r2, [r3, #88]	; 0x58
 8007994:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007996:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800799e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	9302      	str	r3, [sp, #8]
 80079ae:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80079b0:	230c      	movs	r3, #12
 80079b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b4:	2302      	movs	r3, #2
 80079b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079bc:	2303      	movs	r3, #3
 80079be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80079c2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80079c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ca:	f7fa fad1 	bl	8001f70 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7ff ffb8 	bl	8007944 <MX_USART2_UART_Init>
 80079d4:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 80079d6:	bf0c      	ite	eq
 80079d8:	2000      	moveq	r0, #0
 80079da:	f06f 0003 	mvnne.w	r0, #3
}
 80079de:	b008      	add	sp, #32
 80079e0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80079e2:	f06f 0001 	mvn.w	r0, #1
 80079e6:	e7fa      	b.n	80079de <BSP_COM_Init+0x6a>
 80079e8:	2000002c 	.word	0x2000002c
 80079ec:	20001cd8 	.word	0x20001cd8
 80079f0:	40021000 	.word	0x40021000

080079f4 <__io_putchar>:
{ 
 80079f4:	b513      	push	{r0, r1, r4, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80079f6:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <__io_putchar+0x24>)
{ 
 80079f8:	a902      	add	r1, sp, #8
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80079fa:	781c      	ldrb	r4, [r3, #0]
{ 
 80079fc:	f841 0d04 	str.w	r0, [r1, #-4]!
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8007a00:	4806      	ldr	r0, [pc, #24]	; (8007a1c <__io_putchar+0x28>)
 8007a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a06:	2201      	movs	r2, #1
 8007a08:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8007a0c:	f7fc f92f 	bl	8003c6e <HAL_UART_Transmit>
}
 8007a10:	9801      	ldr	r0, [sp, #4]
 8007a12:	b002      	add	sp, #8
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	bf00      	nop
 8007a18:	20001c33 	.word	0x20001c33
 8007a1c:	20001cd8 	.word	0x20001cd8

08007a20 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8007a20:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8007a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4805      	ldr	r0, [pc, #20]	; (8007a44 <BSP_SPI1_SendRecv+0x24>)
 8007a30:	f7fb fc18 	bl	8003264 <HAL_SPI_TransmitReceive>
 8007a34:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 8007a36:	bf14      	ite	ne
 8007a38:	f06f 0005 	mvnne.w	r0, #5
 8007a3c:	2000      	moveq	r0, #0
 8007a3e:	b003      	add	sp, #12
 8007a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a44:	20001d58 	.word	0x20001d58

08007a48 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8007a48:	f7fa ba00 	b.w	8001e4c <HAL_GetTick>

08007a4c <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007a4c:	4a0f      	ldr	r2, [pc, #60]	; (8007a8c <MX_SPI1_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007a4e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8007a52:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007a54:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007a58:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8007a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007a5e:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8007a62:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007a64:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007a66:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007a68:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a6a:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a6c:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007a6e:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007a70:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8007a72:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8007a74:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a76:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007a78:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a7a:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 8007a7c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a7e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007a80:	f7fb fb9f 	bl	80031c2 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8007a84:	3000      	adds	r0, #0
 8007a86:	bf18      	it	ne
 8007a88:	2001      	movne	r0, #1
 8007a8a:	bd08      	pop	{r3, pc}
 8007a8c:	40013000 	.word	0x40013000

08007a90 <BSP_SPI1_Init>:
{
 8007a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 8007a94:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 8007a96:	4c29      	ldr	r4, [pc, #164]	; (8007b3c <BSP_SPI1_Init+0xac>)
 8007a98:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <BSP_SPI1_Init+0xb0>)
 8007a9a:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8007a9c:	6813      	ldr	r3, [r2, #0]
 8007a9e:	1c59      	adds	r1, r3, #1
{
 8007aa0:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 8007aa2:	6011      	str	r1, [r2, #0]
 8007aa4:	b11b      	cbz	r3, 8007aae <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8007aa6:	2000      	movs	r0, #0
}
 8007aa8:	b008      	add	sp, #32
 8007aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7fb fcfc 	bl	80034ac <HAL_SPI_GetState>
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d1f5      	bne.n	8007aa6 <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007aba:	4b22      	ldr	r3, [pc, #136]	; (8007b44 <BSP_SPI1_Init+0xb4>)
 8007abc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ac2:	661a      	str	r2, [r3, #96]	; 0x60
 8007ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ac6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007aca:	9200      	str	r2, [sp, #0]
 8007acc:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad0:	f042 0201 	orr.w	r2, r2, #1
 8007ad4:	64da      	str	r2, [r3, #76]	; 0x4c
 8007ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad8:	f002 0201 	and.w	r2, r2, #1
 8007adc:	9201      	str	r2, [sp, #4]
 8007ade:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ae2:	f042 0202 	orr.w	r2, r2, #2
 8007ae6:	64da      	str	r2, [r3, #76]	; 0x4c
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aea:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af4:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007af8:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afa:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007afc:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007afe:	a903      	add	r1, sp, #12
 8007b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b06:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b0a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b0c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0e:	f7fa fa2f 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b12:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b14:	480c      	ldr	r0, [pc, #48]	; (8007b48 <BSP_SPI1_Init+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b16:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b20:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b22:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b24:	f7fa fa24 	bl	8001f70 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff ff8f 	bl	8007a4c <MX_SPI1_Init>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0b9      	beq.n	8007aa6 <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 8007b32:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007b36:	e7b7      	b.n	8007aa8 <BSP_SPI1_Init+0x18>
 8007b38:	20001c34 	.word	0x20001c34
 8007b3c:	20001d58 	.word	0x20001d58
 8007b40:	40013000 	.word	0x40013000
 8007b44:	40021000 	.word	0x40021000
 8007b48:	48000400 	.word	0x48000400

08007b4c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	4770      	bx	lr

08007b50 <_kill>:

int _kill(int pid, int sig)
{
 8007b50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007b52:	f000 fa2d 	bl	8007fb0 <__errno>
 8007b56:	2316      	movs	r3, #22
 8007b58:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	bd08      	pop	{r3, pc}

08007b60 <_exit>:

void _exit (int status)
{
 8007b60:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007b62:	f000 fa25 	bl	8007fb0 <__errno>
 8007b66:	2316      	movs	r3, #22
 8007b68:	6003      	str	r3, [r0, #0]
 8007b6a:	e7fe      	b.n	8007b6a <_exit+0xa>

08007b6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460e      	mov	r6, r1
 8007b70:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b72:	460c      	mov	r4, r1
 8007b74:	1ba3      	subs	r3, r4, r6
 8007b76:	429d      	cmp	r5, r3
 8007b78:	dc01      	bgt.n	8007b7e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007b7e:	f3af 8000 	nop.w
 8007b82:	f804 0b01 	strb.w	r0, [r4], #1
 8007b86:	e7f5      	b.n	8007b74 <_read+0x8>

08007b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	460e      	mov	r6, r1
 8007b8c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b8e:	460c      	mov	r4, r1
 8007b90:	1ba3      	subs	r3, r4, r6
 8007b92:	429d      	cmp	r5, r3
 8007b94:	dc01      	bgt.n	8007b9a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007b96:	4628      	mov	r0, r5
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007b9a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b9e:	f7ff ff29 	bl	80079f4 <__io_putchar>
 8007ba2:	e7f5      	b.n	8007b90 <_write+0x8>

08007ba4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007ba4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <_sbrk+0x2c>)
 8007ba8:	6819      	ldr	r1, [r3, #0]
{
 8007baa:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007bac:	b909      	cbnz	r1, 8007bb2 <_sbrk+0xe>
		heap_end = &end;
 8007bae:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <_sbrk+0x30>)
 8007bb0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007bb2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007bb4:	4669      	mov	r1, sp
 8007bb6:	4402      	add	r2, r0
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d906      	bls.n	8007bca <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007bbc:	f000 f9f8 	bl	8007fb0 <__errno>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8007bca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8007bcc:	bd08      	pop	{r3, pc}
 8007bce:	bf00      	nop
 8007bd0:	20001c38 	.word	0x20001c38
 8007bd4:	20001dcc 	.word	0x20001dcc

08007bd8 <_close>:

int _close(int file)
{
	return -1;
}
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	4770      	bx	lr

08007bde <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007be2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007be4:	2000      	movs	r0, #0
 8007be6:	4770      	bx	lr

08007be8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007be8:	2001      	movs	r0, #1
 8007bea:	4770      	bx	lr

08007bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007bec:	2000      	movs	r0, #0
 8007bee:	4770      	bx	lr

08007bf0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bf0:	490f      	ldr	r1, [pc, #60]	; (8007c30 <SystemInit+0x40>)
 8007bf2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <SystemInit+0x44>)
 8007c00:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007c02:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8007c0a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8007c12:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007c16:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c24:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007c26:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c2c:	608b      	str	r3, [r1, #8]
 8007c2e:	4770      	bx	lr
 8007c30:	e000ed00 	.word	0xe000ed00
 8007c34:	40021000 	.word	0x40021000

08007c38 <_ZN5TimerC1EP17TIM_HandleTypeDef>:
#include <timer.hpp>

Timer::Timer(TIM_HandleTypeDef *htim){
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	this->handle = htim;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <_ZN5Timer9getHandleEv>:

TIM_HandleTypeDef* Timer::getHandle(void){
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
	return this->handle;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <_ZN5Timer9setDriverEP13GenericDriver>:

void Timer::setDriver(GenericDriver *genericDriver){
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
	this->myDriver = genericDriver;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <_ZN5Timer9getDriverEv>:

GenericDriver* Timer::getDriver(void){
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
	return this->myDriver;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt>:

void Timer::wakeMeUpAfterMicroseconds(uint16_t us){
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	807b      	strh	r3, [r7, #2]
	//bazowa czestotliwosc taktowania 80MHz => 80 taktow na us
	this->handle->Init.Prescaler = 79;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	224f      	movs	r2, #79	; 0x4f
 8007cb4:	605a      	str	r2, [r3, #4]
	this->handle->Init.Period = (us > 0) ? (us - 1) : 0;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	887a      	ldrh	r2, [r7, #2]
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	dd02      	ble.n	8007cc6 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x24>
 8007cc0:	887a      	ldrh	r2, [r7, #2]
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	e000      	b.n	8007cc8 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x26>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(this->handle) == HAL_OK){
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fb fd36 	bl	8003740 <HAL_TIM_Base_Init>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bf0c      	ite	eq
 8007cda:	2301      	moveq	r3, #1
 8007cdc:	2300      	movne	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <_ZN5Timer25wakeMeUpAfterMicrosecondsEt+0x56>
		HAL_TIM_Base_Start_IT(this->handle); //TODO: TIM6, TIM4 fix!
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fb fbf9 	bl	80034e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop(this->handle);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb fbdd 	bl	80034b2 <HAL_TIM_Base_Stop>
	}
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007d06:	e003      	b.n	8007d10 <LoopCopyDataInit>

08007d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007d0e:	3104      	adds	r1, #4

08007d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007d10:	480b      	ldr	r0, [pc, #44]	; (8007d40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007d18:	d3f6      	bcc.n	8007d08 <CopyDataInit>
	ldr	r2, =_sbss
 8007d1a:	4a0b      	ldr	r2, [pc, #44]	; (8007d48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007d1c:	e002      	b.n	8007d24 <LoopFillZerobss>

08007d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007d20:	f842 3b04 	str.w	r3, [r2], #4

08007d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <LoopForever+0x16>)
	cmp	r2, r3
 8007d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007d28:	d3f9      	bcc.n	8007d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d2a:	f7ff ff61 	bl	8007bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d2e:	f000 fc2d 	bl	800858c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007d32:	f7fe fc0f 	bl	8006554 <main>

08007d36 <LoopForever>:

LoopForever:
    b LoopForever
 8007d36:	e7fe      	b.n	8007d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007d38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007d3c:	0800d7f8 	.word	0x0800d7f8
	ldr	r0, =_sdata
 8007d40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007d44:	200006ac 	.word	0x200006ac
	ldr	r2, =_sbss
 8007d48:	200006ac 	.word	0x200006ac
	ldr	r3, = _ebss
 8007d4c:	20001dcc 	.word	0x20001dcc

08007d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d50:	e7fe      	b.n	8007d50 <ADC1_2_IRQHandler>
	...

08007d54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	f000 f8b2 	bl	8007ec4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	0800d14c 	.word	0x0800d14c

08007d68 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8007d6c:	6003      	str	r3, [r0, #0]
 8007d6e:	4604      	mov	r4, r0
 8007d70:	f000 f8a8 	bl	8007ec4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007d74:	4620      	mov	r0, r4
 8007d76:	210c      	movs	r1, #12
 8007d78:	f000 f880 	bl	8007e7c <_ZdlPvj>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	0800d14c 	.word	0x0800d14c

08007d84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	460d      	mov	r5, r1
 8007d8a:	9c06      	ldr	r4, [sp, #24]
 8007d8c:	4294      	cmp	r4, r2
 8007d8e:	4606      	mov	r6, r0
 8007d90:	d009      	beq.n	8007da6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 8007d92:	68b0      	ldr	r0, [r6, #8]
 8007d94:	6806      	ldr	r6, [r0, #0]
 8007d96:	9406      	str	r4, [sp, #24]
 8007d98:	6a34      	ldr	r4, [r6, #32]
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	46a4      	mov	ip, r4
 8007d9e:	b002      	add	sp, #8
 8007da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007da4:	4760      	bx	ip
 8007da6:	4619      	mov	r1, r3
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	f000 f8e8 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007db0:	9b00      	ldr	r3, [sp, #0]
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0ec      	beq.n	8007d92 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8007db8:	2006      	movs	r0, #6
 8007dba:	b002      	add	sp, #8
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	bf00      	nop

08007dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	b081      	sub	sp, #4
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	461f      	mov	r7, r3
 8007dcc:	4691      	mov	r9, r2
 8007dce:	4683      	mov	fp, r0
 8007dd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dd2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007dd6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007dda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007ddc:	f000 f8d0 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007de0:	b170      	cbz	r0, 8007e00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	602c      	str	r4, [r5, #0]
 8007de6:	f885 9004 	strb.w	r9, [r5, #4]
 8007dea:	db1f      	blt.n	8007e2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 8007dec:	4434      	add	r4, r6
 8007dee:	45a0      	cmp	r8, r4
 8007df0:	bf0c      	ite	eq
 8007df2:	2406      	moveq	r4, #6
 8007df4:	2401      	movne	r4, #1
 8007df6:	71ac      	strb	r4, [r5, #6]
 8007df8:	2000      	movs	r0, #0
 8007dfa:	b001      	add	sp, #4
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	4544      	cmp	r4, r8
 8007e02:	d018      	beq.n	8007e36 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 8007e04:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e08:	f8d0 e000 	ldr.w	lr, [r0]
 8007e0c:	950d      	str	r5, [sp, #52]	; 0x34
 8007e0e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007e12:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8007e16:	940a      	str	r4, [sp, #40]	; 0x28
 8007e18:	f8de 401c 	ldr.w	r4, [lr, #28]
 8007e1c:	463b      	mov	r3, r7
 8007e1e:	464a      	mov	r2, r9
 8007e20:	4631      	mov	r1, r6
 8007e22:	46a4      	mov	ip, r4
 8007e24:	b001      	add	sp, #4
 8007e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	4760      	bx	ip
 8007e2c:	3602      	adds	r6, #2
 8007e2e:	d1e3      	bne.n	8007df8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007e30:	2301      	movs	r3, #1
 8007e32:	71ab      	strb	r3, [r5, #6]
 8007e34:	e7e0      	b.n	8007df8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007e36:	4651      	mov	r1, sl
 8007e38:	4658      	mov	r0, fp
 8007e3a:	f000 f8a1 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0e0      	beq.n	8007e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 8007e42:	2000      	movs	r0, #0
 8007e44:	f885 9005 	strb.w	r9, [r5, #5]
 8007e48:	b001      	add	sp, #4
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	bf00      	nop

08007e50 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	4607      	mov	r7, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	4615      	mov	r5, r2
 8007e5a:	461e      	mov	r6, r3
 8007e5c:	f000 f84a 	bl	8007ef4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007e60:	b108      	cbz	r0, 8007e66 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 8007e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e66:	68b8      	ldr	r0, [r7, #8]
 8007e68:	6807      	ldr	r7, [r0, #0]
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	69bc      	ldr	r4, [r7, #24]
 8007e6e:	4633      	mov	r3, r6
 8007e70:	462a      	mov	r2, r5
 8007e72:	46a4      	mov	ip, r4
 8007e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	4760      	bx	ip
 8007e7a:	bf00      	nop

08007e7c <_ZdlPvj>:
 8007e7c:	f000 b896 	b.w	8007fac <_ZdlPv>

08007e80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	6803      	ldr	r3, [r0, #0]
 8007e84:	b084      	sub	sp, #16
 8007e86:	2400      	movs	r4, #0
 8007e88:	699e      	ldr	r6, [r3, #24]
 8007e8a:	9400      	str	r4, [sp, #0]
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	4615      	mov	r5, r2
 8007e90:	9302      	str	r3, [sp, #8]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	f88d 4004 	strb.w	r4, [sp, #4]
 8007e98:	466b      	mov	r3, sp
 8007e9a:	9403      	str	r4, [sp, #12]
 8007e9c:	47b0      	blx	r6
 8007e9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007ea2:	f003 0306 	and.w	r3, r3, #6
 8007ea6:	2b06      	cmp	r3, #6
 8007ea8:	bf03      	ittte	eq
 8007eaa:	9b00      	ldreq	r3, [sp, #0]
 8007eac:	602b      	streq	r3, [r5, #0]
 8007eae:	2001      	moveq	r0, #1
 8007eb0:	4620      	movne	r0, r4
 8007eb2:	b004      	add	sp, #16
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	bf00      	nop

08007eb8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007eb8:	9800      	ldr	r0, [sp, #0]
 8007eba:	4290      	cmp	r0, r2
 8007ebc:	bf0c      	ite	eq
 8007ebe:	2006      	moveq	r0, #6
 8007ec0:	2001      	movne	r0, #1
 8007ec2:	4770      	bx	lr

08007ec4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007ec8:	6003      	str	r3, [r0, #0]
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f000 f854 	bl	8007f78 <_ZNSt9type_infoD1Ev>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	bd10      	pop	{r4, pc}
 8007ed4:	0800d1a8 	.word	0x0800d1a8

08007ed8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	4604      	mov	r4, r0
 8007ee0:	f000 f84a 	bl	8007f78 <_ZNSt9type_infoD1Ev>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	2108      	movs	r1, #8
 8007ee8:	f7ff ffc8 	bl	8007e7c <_ZdlPvj>
 8007eec:	4620      	mov	r0, r4
 8007eee:	bd10      	pop	{r4, pc}
 8007ef0:	0800d1a8 	.word	0x0800d1a8

08007ef4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	461c      	mov	r4, r3
 8007efa:	f000 f841 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007efe:	b120      	cbz	r0, 8007f0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8007f00:	2208      	movs	r2, #8
 8007f02:	2306      	movs	r3, #6
 8007f04:	6025      	str	r5, [r4, #0]
 8007f06:	60e2      	str	r2, [r4, #12]
 8007f08:	7123      	strb	r3, [r4, #4]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}

08007f0c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	4617      	mov	r7, r2
 8007f12:	461c      	mov	r4, r3
 8007f14:	4606      	mov	r6, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	f000 f832 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007f1c:	b908      	cbnz	r0, 8007f22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 8007f1e:	2c03      	cmp	r4, #3
 8007f20:	d901      	bls.n	8007f26 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8007f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	463a      	mov	r2, r7
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4718      	bx	r3
 8007f36:	bf00      	nop

08007f38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	4617      	mov	r7, r2
 8007f3e:	9d08      	ldr	r5, [sp, #32]
 8007f40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f44:	428d      	cmp	r5, r1
 8007f46:	4606      	mov	r6, r0
 8007f48:	d00b      	beq.n	8007f62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 f817 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007f52:	b118      	cbz	r0, 8007f5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8007f54:	2301      	movs	r3, #1
 8007f56:	6025      	str	r5, [r4, #0]
 8007f58:	7127      	strb	r7, [r4, #4]
 8007f5a:	71a3      	strb	r3, [r4, #6]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	b003      	add	sp, #12
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	f000 f80b 	bl	8007f80 <_ZNKSt9type_infoeqERKS_>
 8007f6a:	b118      	cbz	r0, 8007f74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	7167      	strb	r7, [r4, #5]
 8007f70:	b003      	add	sp, #12
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	e7e8      	b.n	8007f4a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

08007f78 <_ZNSt9type_infoD1Ev>:
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <_ZNKSt9type_info14__is_pointer_pEv>:
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	4770      	bx	lr

08007f80 <_ZNKSt9type_infoeqERKS_>:
 8007f80:	4281      	cmp	r1, r0
 8007f82:	d011      	beq.n	8007fa8 <_ZNKSt9type_infoeqERKS_+0x28>
 8007f84:	b508      	push	{r3, lr}
 8007f86:	6840      	ldr	r0, [r0, #4]
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f8c:	d00a      	beq.n	8007fa4 <_ZNKSt9type_infoeqERKS_+0x24>
 8007f8e:	6849      	ldr	r1, [r1, #4]
 8007f90:	780b      	ldrb	r3, [r1, #0]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	bf08      	it	eq
 8007f96:	3101      	addeq	r1, #1
 8007f98:	f7f8 f91a 	bl	80001d0 <strcmp>
 8007f9c:	fab0 f080 	clz	r0, r0
 8007fa0:	0940      	lsrs	r0, r0, #5
 8007fa2:	bd08      	pop	{r3, pc}
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd08      	pop	{r3, pc}
 8007fa8:	2001      	movs	r0, #1
 8007faa:	4770      	bx	lr

08007fac <_ZdlPv>:
 8007fac:	f000 bb1e 	b.w	80085ec <free>

08007fb0 <__errno>:
 8007fb0:	4b01      	ldr	r3, [pc, #4]	; (8007fb8 <__errno+0x8>)
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000003c 	.word	0x2000003c

08007fbc <__sflush_r>:
 8007fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fc0:	b293      	uxth	r3, r2
 8007fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	0718      	lsls	r0, r3, #28
 8007fca:	460c      	mov	r4, r1
 8007fcc:	d461      	bmi.n	8008092 <__sflush_r+0xd6>
 8007fce:	684b      	ldr	r3, [r1, #4]
 8007fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	818a      	strh	r2, [r1, #12]
 8007fd8:	dc05      	bgt.n	8007fe6 <__sflush_r+0x2a>
 8007fda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dc02      	bgt.n	8007fe6 <__sflush_r+0x2a>
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fe8:	2e00      	cmp	r6, #0
 8007fea:	d0f9      	beq.n	8007fe0 <__sflush_r+0x24>
 8007fec:	2300      	movs	r3, #0
 8007fee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ff2:	682f      	ldr	r7, [r5, #0]
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	d037      	beq.n	8008068 <__sflush_r+0xac>
 8007ff8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	075a      	lsls	r2, r3, #29
 8007ffe:	d505      	bpl.n	800800c <__sflush_r+0x50>
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	1ac0      	subs	r0, r0, r3
 8008004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008006:	b10b      	cbz	r3, 800800c <__sflush_r+0x50>
 8008008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800800a:	1ac0      	subs	r0, r0, r3
 800800c:	2300      	movs	r3, #0
 800800e:	4602      	mov	r2, r0
 8008010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008012:	6a21      	ldr	r1, [r4, #32]
 8008014:	4628      	mov	r0, r5
 8008016:	47b0      	blx	r6
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	d106      	bne.n	800802c <__sflush_r+0x70>
 800801e:	6829      	ldr	r1, [r5, #0]
 8008020:	291d      	cmp	r1, #29
 8008022:	d84f      	bhi.n	80080c4 <__sflush_r+0x108>
 8008024:	4a2d      	ldr	r2, [pc, #180]	; (80080dc <__sflush_r+0x120>)
 8008026:	40ca      	lsrs	r2, r1
 8008028:	07d6      	lsls	r6, r2, #31
 800802a:	d54b      	bpl.n	80080c4 <__sflush_r+0x108>
 800802c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008030:	b21b      	sxth	r3, r3
 8008032:	2200      	movs	r2, #0
 8008034:	6062      	str	r2, [r4, #4]
 8008036:	04d9      	lsls	r1, r3, #19
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	d504      	bpl.n	800804a <__sflush_r+0x8e>
 8008040:	1c42      	adds	r2, r0, #1
 8008042:	d101      	bne.n	8008048 <__sflush_r+0x8c>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b903      	cbnz	r3, 800804a <__sflush_r+0x8e>
 8008048:	6560      	str	r0, [r4, #84]	; 0x54
 800804a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804c:	602f      	str	r7, [r5, #0]
 800804e:	2900      	cmp	r1, #0
 8008050:	d0c6      	beq.n	8007fe0 <__sflush_r+0x24>
 8008052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008056:	4299      	cmp	r1, r3
 8008058:	d002      	beq.n	8008060 <__sflush_r+0xa4>
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f9bc 	bl	80083d8 <_free_r>
 8008060:	2000      	movs	r0, #0
 8008062:	6360      	str	r0, [r4, #52]	; 0x34
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008068:	6a21      	ldr	r1, [r4, #32]
 800806a:	2301      	movs	r3, #1
 800806c:	4628      	mov	r0, r5
 800806e:	47b0      	blx	r6
 8008070:	1c41      	adds	r1, r0, #1
 8008072:	d1c2      	bne.n	8007ffa <__sflush_r+0x3e>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0bf      	beq.n	8007ffa <__sflush_r+0x3e>
 800807a:	2b1d      	cmp	r3, #29
 800807c:	d001      	beq.n	8008082 <__sflush_r+0xc6>
 800807e:	2b16      	cmp	r3, #22
 8008080:	d101      	bne.n	8008086 <__sflush_r+0xca>
 8008082:	602f      	str	r7, [r5, #0]
 8008084:	e7ac      	b.n	8007fe0 <__sflush_r+0x24>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008092:	690f      	ldr	r7, [r1, #16]
 8008094:	2f00      	cmp	r7, #0
 8008096:	d0a3      	beq.n	8007fe0 <__sflush_r+0x24>
 8008098:	079b      	lsls	r3, r3, #30
 800809a:	680e      	ldr	r6, [r1, #0]
 800809c:	bf08      	it	eq
 800809e:	694b      	ldreq	r3, [r1, #20]
 80080a0:	600f      	str	r7, [r1, #0]
 80080a2:	bf18      	it	ne
 80080a4:	2300      	movne	r3, #0
 80080a6:	eba6 0807 	sub.w	r8, r6, r7
 80080aa:	608b      	str	r3, [r1, #8]
 80080ac:	f1b8 0f00 	cmp.w	r8, #0
 80080b0:	dd96      	ble.n	8007fe0 <__sflush_r+0x24>
 80080b2:	4643      	mov	r3, r8
 80080b4:	463a      	mov	r2, r7
 80080b6:	6a21      	ldr	r1, [r4, #32]
 80080b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b0      	blx	r6
 80080be:	2800      	cmp	r0, #0
 80080c0:	dc07      	bgt.n	80080d2 <__sflush_r+0x116>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295
 80080ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d2:	4407      	add	r7, r0
 80080d4:	eba8 0800 	sub.w	r8, r8, r0
 80080d8:	e7e8      	b.n	80080ac <__sflush_r+0xf0>
 80080da:	bf00      	nop
 80080dc:	20400001 	.word	0x20400001

080080e0 <_fflush_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	690b      	ldr	r3, [r1, #16]
 80080e4:	4605      	mov	r5, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b913      	cbnz	r3, 80080f0 <_fflush_r+0x10>
 80080ea:	2500      	movs	r5, #0
 80080ec:	4628      	mov	r0, r5
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	b118      	cbz	r0, 80080fa <_fflush_r+0x1a>
 80080f2:	6983      	ldr	r3, [r0, #24]
 80080f4:	b90b      	cbnz	r3, 80080fa <_fflush_r+0x1a>
 80080f6:	f000 f899 	bl	800822c <__sinit>
 80080fa:	4b14      	ldr	r3, [pc, #80]	; (800814c <_fflush_r+0x6c>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	d11b      	bne.n	8008138 <_fflush_r+0x58>
 8008100:	686c      	ldr	r4, [r5, #4]
 8008102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0ef      	beq.n	80080ea <_fflush_r+0xa>
 800810a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800810c:	07d0      	lsls	r0, r2, #31
 800810e:	d404      	bmi.n	800811a <_fflush_r+0x3a>
 8008110:	0599      	lsls	r1, r3, #22
 8008112:	d402      	bmi.n	800811a <_fflush_r+0x3a>
 8008114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008116:	f000 fa5f 	bl	80085d8 <__retarget_lock_acquire_recursive>
 800811a:	4628      	mov	r0, r5
 800811c:	4621      	mov	r1, r4
 800811e:	f7ff ff4d 	bl	8007fbc <__sflush_r>
 8008122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008124:	07da      	lsls	r2, r3, #31
 8008126:	4605      	mov	r5, r0
 8008128:	d4e0      	bmi.n	80080ec <_fflush_r+0xc>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	059b      	lsls	r3, r3, #22
 800812e:	d4dd      	bmi.n	80080ec <_fflush_r+0xc>
 8008130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008132:	f000 fa52 	bl	80085da <__retarget_lock_release_recursive>
 8008136:	e7d9      	b.n	80080ec <_fflush_r+0xc>
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <_fflush_r+0x70>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d101      	bne.n	8008142 <_fflush_r+0x62>
 800813e:	68ac      	ldr	r4, [r5, #8]
 8008140:	e7df      	b.n	8008102 <_fflush_r+0x22>
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <_fflush_r+0x74>)
 8008144:	429c      	cmp	r4, r3
 8008146:	bf08      	it	eq
 8008148:	68ec      	ldreq	r4, [r5, #12]
 800814a:	e7da      	b.n	8008102 <_fflush_r+0x22>
 800814c:	0800d204 	.word	0x0800d204
 8008150:	0800d224 	.word	0x0800d224
 8008154:	0800d1e4 	.word	0x0800d1e4

08008158 <fflush>:
 8008158:	4601      	mov	r1, r0
 800815a:	b920      	cbnz	r0, 8008166 <fflush+0xe>
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <fflush+0x18>)
 800815e:	4905      	ldr	r1, [pc, #20]	; (8008174 <fflush+0x1c>)
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	f000 b9f5 	b.w	8008550 <_fwalk_reent>
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <fflush+0x20>)
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	f7ff bfb9 	b.w	80080e0 <_fflush_r>
 800816e:	bf00      	nop
 8008170:	0800d244 	.word	0x0800d244
 8008174:	080080e1 	.word	0x080080e1
 8008178:	2000003c 	.word	0x2000003c

0800817c <_cleanup_r>:
 800817c:	4901      	ldr	r1, [pc, #4]	; (8008184 <_cleanup_r+0x8>)
 800817e:	f000 b9e7 	b.w	8008550 <_fwalk_reent>
 8008182:	bf00      	nop
 8008184:	0800bae5 	.word	0x0800bae5

08008188 <std.isra.0>:
 8008188:	2300      	movs	r3, #0
 800818a:	b510      	push	{r4, lr}
 800818c:	4604      	mov	r4, r0
 800818e:	6003      	str	r3, [r0, #0]
 8008190:	6043      	str	r3, [r0, #4]
 8008192:	6083      	str	r3, [r0, #8]
 8008194:	8181      	strh	r1, [r0, #12]
 8008196:	6643      	str	r3, [r0, #100]	; 0x64
 8008198:	81c2      	strh	r2, [r0, #14]
 800819a:	6103      	str	r3, [r0, #16]
 800819c:	6143      	str	r3, [r0, #20]
 800819e:	6183      	str	r3, [r0, #24]
 80081a0:	4619      	mov	r1, r3
 80081a2:	2208      	movs	r2, #8
 80081a4:	305c      	adds	r0, #92	; 0x5c
 80081a6:	f000 fc42 	bl	8008a2e <memset>
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <std.isra.0+0x38>)
 80081ac:	6263      	str	r3, [r4, #36]	; 0x24
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <std.isra.0+0x3c>)
 80081b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <std.isra.0+0x40>)
 80081b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std.isra.0+0x44>)
 80081b8:	6224      	str	r4, [r4, #32]
 80081ba:	6323      	str	r3, [r4, #48]	; 0x30
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	08008be9 	.word	0x08008be9
 80081c4:	08008c0b 	.word	0x08008c0b
 80081c8:	08008c43 	.word	0x08008c43
 80081cc:	08008c67 	.word	0x08008c67

080081d0 <__sfmoreglue>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	1e4a      	subs	r2, r1, #1
 80081d4:	2568      	movs	r5, #104	; 0x68
 80081d6:	4355      	muls	r5, r2
 80081d8:	460e      	mov	r6, r1
 80081da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081de:	f000 fa0d 	bl	80085fc <_malloc_r>
 80081e2:	4604      	mov	r4, r0
 80081e4:	b140      	cbz	r0, 80081f8 <__sfmoreglue+0x28>
 80081e6:	2100      	movs	r1, #0
 80081e8:	e880 0042 	stmia.w	r0, {r1, r6}
 80081ec:	300c      	adds	r0, #12
 80081ee:	60a0      	str	r0, [r4, #8]
 80081f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081f4:	f000 fc1b 	bl	8008a2e <memset>
 80081f8:	4620      	mov	r0, r4
 80081fa:	bd70      	pop	{r4, r5, r6, pc}

080081fc <__sfp_lock_acquire>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__sfp_lock_acquire+0x8>)
 80081fe:	f000 b9eb 	b.w	80085d8 <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	20001dc4 	.word	0x20001dc4

08008208 <__sfp_lock_release>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__sfp_lock_release+0x8>)
 800820a:	f000 b9e6 	b.w	80085da <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	20001dc4 	.word	0x20001dc4

08008214 <__sinit_lock_acquire>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__sinit_lock_acquire+0x8>)
 8008216:	f000 b9df 	b.w	80085d8 <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20001dbf 	.word	0x20001dbf

08008220 <__sinit_lock_release>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sinit_lock_release+0x8>)
 8008222:	f000 b9da 	b.w	80085da <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20001dbf 	.word	0x20001dbf

0800822c <__sinit>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	f7ff fff0 	bl	8008214 <__sinit_lock_acquire>
 8008234:	69a3      	ldr	r3, [r4, #24]
 8008236:	b11b      	cbz	r3, 8008240 <__sinit+0x14>
 8008238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823c:	f7ff bff0 	b.w	8008220 <__sinit_lock_release>
 8008240:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8008244:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8008248:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <__sinit+0x6c>)
 800824e:	4a13      	ldr	r2, [pc, #76]	; (800829c <__sinit+0x70>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	62a2      	str	r2, [r4, #40]	; 0x28
 8008254:	429c      	cmp	r4, r3
 8008256:	bf04      	itt	eq
 8008258:	2301      	moveq	r3, #1
 800825a:	61a3      	streq	r3, [r4, #24]
 800825c:	4620      	mov	r0, r4
 800825e:	f000 f81f 	bl	80082a0 <__sfp>
 8008262:	6060      	str	r0, [r4, #4]
 8008264:	4620      	mov	r0, r4
 8008266:	f000 f81b 	bl	80082a0 <__sfp>
 800826a:	60a0      	str	r0, [r4, #8]
 800826c:	4620      	mov	r0, r4
 800826e:	f000 f817 	bl	80082a0 <__sfp>
 8008272:	2200      	movs	r2, #0
 8008274:	60e0      	str	r0, [r4, #12]
 8008276:	2104      	movs	r1, #4
 8008278:	6860      	ldr	r0, [r4, #4]
 800827a:	f7ff ff85 	bl	8008188 <std.isra.0>
 800827e:	2201      	movs	r2, #1
 8008280:	2109      	movs	r1, #9
 8008282:	68a0      	ldr	r0, [r4, #8]
 8008284:	f7ff ff80 	bl	8008188 <std.isra.0>
 8008288:	2202      	movs	r2, #2
 800828a:	2112      	movs	r1, #18
 800828c:	68e0      	ldr	r0, [r4, #12]
 800828e:	f7ff ff7b 	bl	8008188 <std.isra.0>
 8008292:	2301      	movs	r3, #1
 8008294:	61a3      	str	r3, [r4, #24]
 8008296:	e7cf      	b.n	8008238 <__sinit+0xc>
 8008298:	0800d244 	.word	0x0800d244
 800829c:	0800817d 	.word	0x0800817d

080082a0 <__sfp>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	4607      	mov	r7, r0
 80082a4:	f7ff ffaa 	bl	80081fc <__sfp_lock_acquire>
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <__sfp+0x88>)
 80082aa:	681e      	ldr	r6, [r3, #0]
 80082ac:	69b3      	ldr	r3, [r6, #24]
 80082ae:	b913      	cbnz	r3, 80082b6 <__sfp+0x16>
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff ffbb 	bl	800822c <__sinit>
 80082b6:	36d8      	adds	r6, #216	; 0xd8
 80082b8:	68b4      	ldr	r4, [r6, #8]
 80082ba:	6873      	ldr	r3, [r6, #4]
 80082bc:	3b01      	subs	r3, #1
 80082be:	d503      	bpl.n	80082c8 <__sfp+0x28>
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	b133      	cbz	r3, 80082d2 <__sfp+0x32>
 80082c4:	6836      	ldr	r6, [r6, #0]
 80082c6:	e7f7      	b.n	80082b8 <__sfp+0x18>
 80082c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082cc:	b17d      	cbz	r5, 80082ee <__sfp+0x4e>
 80082ce:	3468      	adds	r4, #104	; 0x68
 80082d0:	e7f4      	b.n	80082bc <__sfp+0x1c>
 80082d2:	2104      	movs	r1, #4
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff ff7b 	bl	80081d0 <__sfmoreglue>
 80082da:	4604      	mov	r4, r0
 80082dc:	6030      	str	r0, [r6, #0]
 80082de:	2800      	cmp	r0, #0
 80082e0:	d1f0      	bne.n	80082c4 <__sfp+0x24>
 80082e2:	f7ff ff91 	bl	8008208 <__sfp_lock_release>
 80082e6:	230c      	movs	r3, #12
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	4620      	mov	r0, r4
 80082ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082f2:	81e3      	strh	r3, [r4, #14]
 80082f4:	2301      	movs	r3, #1
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082fc:	6665      	str	r5, [r4, #100]	; 0x64
 80082fe:	f000 f969 	bl	80085d4 <__retarget_lock_init_recursive>
 8008302:	f7ff ff81 	bl	8008208 <__sfp_lock_release>
 8008306:	6025      	str	r5, [r4, #0]
 8008308:	60a5      	str	r5, [r4, #8]
 800830a:	6065      	str	r5, [r4, #4]
 800830c:	6125      	str	r5, [r4, #16]
 800830e:	6165      	str	r5, [r4, #20]
 8008310:	61a5      	str	r5, [r4, #24]
 8008312:	2208      	movs	r2, #8
 8008314:	4629      	mov	r1, r5
 8008316:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800831a:	f000 fb88 	bl	8008a2e <memset>
 800831e:	6365      	str	r5, [r4, #52]	; 0x34
 8008320:	63a5      	str	r5, [r4, #56]	; 0x38
 8008322:	64a5      	str	r5, [r4, #72]	; 0x48
 8008324:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008326:	e7e0      	b.n	80082ea <__sfp+0x4a>
 8008328:	0800d244 	.word	0x0800d244

0800832c <_malloc_trim_r>:
 800832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008330:	4f25      	ldr	r7, [pc, #148]	; (80083c8 <_malloc_trim_r+0x9c>)
 8008332:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80083d4 <_malloc_trim_r+0xa8>
 8008336:	4689      	mov	r9, r1
 8008338:	4606      	mov	r6, r0
 800833a:	f000 fb81 	bl	8008a40 <__malloc_lock>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	685d      	ldr	r5, [r3, #4]
 8008342:	f1a8 0411 	sub.w	r4, r8, #17
 8008346:	f025 0503 	bic.w	r5, r5, #3
 800834a:	eba4 0409 	sub.w	r4, r4, r9
 800834e:	442c      	add	r4, r5
 8008350:	fbb4 f4f8 	udiv	r4, r4, r8
 8008354:	3c01      	subs	r4, #1
 8008356:	fb08 f404 	mul.w	r4, r8, r4
 800835a:	4544      	cmp	r4, r8
 800835c:	da05      	bge.n	800836a <_malloc_trim_r+0x3e>
 800835e:	4630      	mov	r0, r6
 8008360:	f000 fb74 	bl	8008a4c <__malloc_unlock>
 8008364:	2000      	movs	r0, #0
 8008366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836a:	2100      	movs	r1, #0
 800836c:	4630      	mov	r0, r6
 800836e:	f000 fc07 	bl	8008b80 <_sbrk_r>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	442b      	add	r3, r5
 8008376:	4298      	cmp	r0, r3
 8008378:	d1f1      	bne.n	800835e <_malloc_trim_r+0x32>
 800837a:	4261      	negs	r1, r4
 800837c:	4630      	mov	r0, r6
 800837e:	f000 fbff 	bl	8008b80 <_sbrk_r>
 8008382:	3001      	adds	r0, #1
 8008384:	d110      	bne.n	80083a8 <_malloc_trim_r+0x7c>
 8008386:	2100      	movs	r1, #0
 8008388:	4630      	mov	r0, r6
 800838a:	f000 fbf9 	bl	8008b80 <_sbrk_r>
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	1a83      	subs	r3, r0, r2
 8008392:	2b0f      	cmp	r3, #15
 8008394:	dde3      	ble.n	800835e <_malloc_trim_r+0x32>
 8008396:	490d      	ldr	r1, [pc, #52]	; (80083cc <_malloc_trim_r+0xa0>)
 8008398:	6809      	ldr	r1, [r1, #0]
 800839a:	1a40      	subs	r0, r0, r1
 800839c:	490c      	ldr	r1, [pc, #48]	; (80083d0 <_malloc_trim_r+0xa4>)
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	6008      	str	r0, [r1, #0]
 80083a4:	6053      	str	r3, [r2, #4]
 80083a6:	e7da      	b.n	800835e <_malloc_trim_r+0x32>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <_malloc_trim_r+0xa4>)
 80083ac:	1b2d      	subs	r5, r5, r4
 80083ae:	f045 0501 	orr.w	r5, r5, #1
 80083b2:	605d      	str	r5, [r3, #4]
 80083b4:	6813      	ldr	r3, [r2, #0]
 80083b6:	4630      	mov	r0, r6
 80083b8:	1b1c      	subs	r4, r3, r4
 80083ba:	6014      	str	r4, [r2, #0]
 80083bc:	f000 fb46 	bl	8008a4c <__malloc_unlock>
 80083c0:	2001      	movs	r0, #1
 80083c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c6:	bf00      	nop
 80083c8:	20000130 	.word	0x20000130
 80083cc:	20000538 	.word	0x20000538
 80083d0:	20001c3c 	.word	0x20001c3c
 80083d4:	00001000 	.word	0x00001000

080083d8 <_free_r>:
 80083d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083dc:	4604      	mov	r4, r0
 80083de:	4688      	mov	r8, r1
 80083e0:	2900      	cmp	r1, #0
 80083e2:	f000 80ab 	beq.w	800853c <_free_r+0x164>
 80083e6:	f000 fb2b 	bl	8008a40 <__malloc_lock>
 80083ea:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80083ee:	4d54      	ldr	r5, [pc, #336]	; (8008540 <_free_r+0x168>)
 80083f0:	f022 0001 	bic.w	r0, r2, #1
 80083f4:	f1a8 0308 	sub.w	r3, r8, #8
 80083f8:	181f      	adds	r7, r3, r0
 80083fa:	68a9      	ldr	r1, [r5, #8]
 80083fc:	687e      	ldr	r6, [r7, #4]
 80083fe:	428f      	cmp	r7, r1
 8008400:	f026 0603 	bic.w	r6, r6, #3
 8008404:	f002 0201 	and.w	r2, r2, #1
 8008408:	d11b      	bne.n	8008442 <_free_r+0x6a>
 800840a:	4430      	add	r0, r6
 800840c:	b93a      	cbnz	r2, 800841e <_free_r+0x46>
 800840e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	4410      	add	r0, r2
 8008416:	6899      	ldr	r1, [r3, #8]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	60ca      	str	r2, [r1, #12]
 800841c:	6091      	str	r1, [r2, #8]
 800841e:	f040 0201 	orr.w	r2, r0, #1
 8008422:	605a      	str	r2, [r3, #4]
 8008424:	60ab      	str	r3, [r5, #8]
 8008426:	4b47      	ldr	r3, [pc, #284]	; (8008544 <_free_r+0x16c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4298      	cmp	r0, r3
 800842c:	d304      	bcc.n	8008438 <_free_r+0x60>
 800842e:	4b46      	ldr	r3, [pc, #280]	; (8008548 <_free_r+0x170>)
 8008430:	4620      	mov	r0, r4
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	f7ff ff7a 	bl	800832c <_malloc_trim_r>
 8008438:	4620      	mov	r0, r4
 800843a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	f000 bb05 	b.w	8008a4c <__malloc_unlock>
 8008442:	607e      	str	r6, [r7, #4]
 8008444:	2a00      	cmp	r2, #0
 8008446:	d139      	bne.n	80084bc <_free_r+0xe4>
 8008448:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800844c:	1a5b      	subs	r3, r3, r1
 800844e:	4408      	add	r0, r1
 8008450:	6899      	ldr	r1, [r3, #8]
 8008452:	f105 0e08 	add.w	lr, r5, #8
 8008456:	4571      	cmp	r1, lr
 8008458:	d032      	beq.n	80084c0 <_free_r+0xe8>
 800845a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800845e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8008462:	f8ce 1008 	str.w	r1, [lr, #8]
 8008466:	19b9      	adds	r1, r7, r6
 8008468:	6849      	ldr	r1, [r1, #4]
 800846a:	07c9      	lsls	r1, r1, #31
 800846c:	d40a      	bmi.n	8008484 <_free_r+0xac>
 800846e:	4430      	add	r0, r6
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	bb3a      	cbnz	r2, 80084c4 <_free_r+0xec>
 8008474:	4e35      	ldr	r6, [pc, #212]	; (800854c <_free_r+0x174>)
 8008476:	42b1      	cmp	r1, r6
 8008478:	d124      	bne.n	80084c4 <_free_r+0xec>
 800847a:	616b      	str	r3, [r5, #20]
 800847c:	612b      	str	r3, [r5, #16]
 800847e:	2201      	movs	r2, #1
 8008480:	60d9      	str	r1, [r3, #12]
 8008482:	6099      	str	r1, [r3, #8]
 8008484:	f040 0101 	orr.w	r1, r0, #1
 8008488:	6059      	str	r1, [r3, #4]
 800848a:	5018      	str	r0, [r3, r0]
 800848c:	2a00      	cmp	r2, #0
 800848e:	d1d3      	bne.n	8008438 <_free_r+0x60>
 8008490:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008494:	d21a      	bcs.n	80084cc <_free_r+0xf4>
 8008496:	08c0      	lsrs	r0, r0, #3
 8008498:	1081      	asrs	r1, r0, #2
 800849a:	2201      	movs	r2, #1
 800849c:	408a      	lsls	r2, r1
 800849e:	6869      	ldr	r1, [r5, #4]
 80084a0:	3001      	adds	r0, #1
 80084a2:	430a      	orrs	r2, r1
 80084a4:	606a      	str	r2, [r5, #4]
 80084a6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80084aa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80084ae:	6099      	str	r1, [r3, #8]
 80084b0:	3a08      	subs	r2, #8
 80084b2:	60da      	str	r2, [r3, #12]
 80084b4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80084b8:	60cb      	str	r3, [r1, #12]
 80084ba:	e7bd      	b.n	8008438 <_free_r+0x60>
 80084bc:	2200      	movs	r2, #0
 80084be:	e7d2      	b.n	8008466 <_free_r+0x8e>
 80084c0:	2201      	movs	r2, #1
 80084c2:	e7d0      	b.n	8008466 <_free_r+0x8e>
 80084c4:	68fe      	ldr	r6, [r7, #12]
 80084c6:	60ce      	str	r6, [r1, #12]
 80084c8:	60b1      	str	r1, [r6, #8]
 80084ca:	e7db      	b.n	8008484 <_free_r+0xac>
 80084cc:	0a42      	lsrs	r2, r0, #9
 80084ce:	2a04      	cmp	r2, #4
 80084d0:	d813      	bhi.n	80084fa <_free_r+0x122>
 80084d2:	0982      	lsrs	r2, r0, #6
 80084d4:	3238      	adds	r2, #56	; 0x38
 80084d6:	1c51      	adds	r1, r2, #1
 80084d8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80084dc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80084e0:	428e      	cmp	r6, r1
 80084e2:	d124      	bne.n	800852e <_free_r+0x156>
 80084e4:	2001      	movs	r0, #1
 80084e6:	1092      	asrs	r2, r2, #2
 80084e8:	fa00 f202 	lsl.w	r2, r0, r2
 80084ec:	6868      	ldr	r0, [r5, #4]
 80084ee:	4302      	orrs	r2, r0
 80084f0:	606a      	str	r2, [r5, #4]
 80084f2:	60de      	str	r6, [r3, #12]
 80084f4:	6099      	str	r1, [r3, #8]
 80084f6:	60b3      	str	r3, [r6, #8]
 80084f8:	e7de      	b.n	80084b8 <_free_r+0xe0>
 80084fa:	2a14      	cmp	r2, #20
 80084fc:	d801      	bhi.n	8008502 <_free_r+0x12a>
 80084fe:	325b      	adds	r2, #91	; 0x5b
 8008500:	e7e9      	b.n	80084d6 <_free_r+0xfe>
 8008502:	2a54      	cmp	r2, #84	; 0x54
 8008504:	d802      	bhi.n	800850c <_free_r+0x134>
 8008506:	0b02      	lsrs	r2, r0, #12
 8008508:	326e      	adds	r2, #110	; 0x6e
 800850a:	e7e4      	b.n	80084d6 <_free_r+0xfe>
 800850c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008510:	d802      	bhi.n	8008518 <_free_r+0x140>
 8008512:	0bc2      	lsrs	r2, r0, #15
 8008514:	3277      	adds	r2, #119	; 0x77
 8008516:	e7de      	b.n	80084d6 <_free_r+0xfe>
 8008518:	f240 5154 	movw	r1, #1364	; 0x554
 800851c:	428a      	cmp	r2, r1
 800851e:	bf9a      	itte	ls
 8008520:	0c82      	lsrls	r2, r0, #18
 8008522:	327c      	addls	r2, #124	; 0x7c
 8008524:	227e      	movhi	r2, #126	; 0x7e
 8008526:	e7d6      	b.n	80084d6 <_free_r+0xfe>
 8008528:	6889      	ldr	r1, [r1, #8]
 800852a:	428e      	cmp	r6, r1
 800852c:	d004      	beq.n	8008538 <_free_r+0x160>
 800852e:	684a      	ldr	r2, [r1, #4]
 8008530:	f022 0203 	bic.w	r2, r2, #3
 8008534:	4290      	cmp	r0, r2
 8008536:	d3f7      	bcc.n	8008528 <_free_r+0x150>
 8008538:	68ce      	ldr	r6, [r1, #12]
 800853a:	e7da      	b.n	80084f2 <_free_r+0x11a>
 800853c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008540:	20000130 	.word	0x20000130
 8008544:	2000053c 	.word	0x2000053c
 8008548:	20001c6c 	.word	0x20001c6c
 800854c:	20000138 	.word	0x20000138

08008550 <_fwalk_reent>:
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	4680      	mov	r8, r0
 8008556:	4689      	mov	r9, r1
 8008558:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800855c:	2600      	movs	r6, #0
 800855e:	b914      	cbnz	r4, 8008566 <_fwalk_reent+0x16>
 8008560:	4630      	mov	r0, r6
 8008562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008566:	68a5      	ldr	r5, [r4, #8]
 8008568:	6867      	ldr	r7, [r4, #4]
 800856a:	3f01      	subs	r7, #1
 800856c:	d501      	bpl.n	8008572 <_fwalk_reent+0x22>
 800856e:	6824      	ldr	r4, [r4, #0]
 8008570:	e7f5      	b.n	800855e <_fwalk_reent+0xe>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d907      	bls.n	8008588 <_fwalk_reent+0x38>
 8008578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800857c:	3301      	adds	r3, #1
 800857e:	d003      	beq.n	8008588 <_fwalk_reent+0x38>
 8008580:	4629      	mov	r1, r5
 8008582:	4640      	mov	r0, r8
 8008584:	47c8      	blx	r9
 8008586:	4306      	orrs	r6, r0
 8008588:	3568      	adds	r5, #104	; 0x68
 800858a:	e7ee      	b.n	800856a <_fwalk_reent+0x1a>

0800858c <__libc_init_array>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4e0d      	ldr	r6, [pc, #52]	; (80085c4 <__libc_init_array+0x38>)
 8008590:	4c0d      	ldr	r4, [pc, #52]	; (80085c8 <__libc_init_array+0x3c>)
 8008592:	1ba4      	subs	r4, r4, r6
 8008594:	10a4      	asrs	r4, r4, #2
 8008596:	2500      	movs	r5, #0
 8008598:	42a5      	cmp	r5, r4
 800859a:	d109      	bne.n	80085b0 <__libc_init_array+0x24>
 800859c:	4e0b      	ldr	r6, [pc, #44]	; (80085cc <__libc_init_array+0x40>)
 800859e:	4c0c      	ldr	r4, [pc, #48]	; (80085d0 <__libc_init_array+0x44>)
 80085a0:	f004 fc12 	bl	800cdc8 <_init>
 80085a4:	1ba4      	subs	r4, r4, r6
 80085a6:	10a4      	asrs	r4, r4, #2
 80085a8:	2500      	movs	r5, #0
 80085aa:	42a5      	cmp	r5, r4
 80085ac:	d105      	bne.n	80085ba <__libc_init_array+0x2e>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085b4:	4798      	blx	r3
 80085b6:	3501      	adds	r5, #1
 80085b8:	e7ee      	b.n	8008598 <__libc_init_array+0xc>
 80085ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085be:	4798      	blx	r3
 80085c0:	3501      	adds	r5, #1
 80085c2:	e7f2      	b.n	80085aa <__libc_init_array+0x1e>
 80085c4:	0800d7e8 	.word	0x0800d7e8
 80085c8:	0800d7e8 	.word	0x0800d7e8
 80085cc:	0800d7e8 	.word	0x0800d7e8
 80085d0:	0800d7f4 	.word	0x0800d7f4

080085d4 <__retarget_lock_init_recursive>:
 80085d4:	4770      	bx	lr

080085d6 <__retarget_lock_close_recursive>:
 80085d6:	4770      	bx	lr

080085d8 <__retarget_lock_acquire_recursive>:
 80085d8:	4770      	bx	lr

080085da <__retarget_lock_release_recursive>:
 80085da:	4770      	bx	lr

080085dc <malloc>:
 80085dc:	4b02      	ldr	r3, [pc, #8]	; (80085e8 <malloc+0xc>)
 80085de:	4601      	mov	r1, r0
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	f000 b80b 	b.w	80085fc <_malloc_r>
 80085e6:	bf00      	nop
 80085e8:	2000003c 	.word	0x2000003c

080085ec <free>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <free+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f7ff bef1 	b.w	80083d8 <_free_r>
 80085f6:	bf00      	nop
 80085f8:	2000003c 	.word	0x2000003c

080085fc <_malloc_r>:
 80085fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	f101 040b 	add.w	r4, r1, #11
 8008604:	2c16      	cmp	r4, #22
 8008606:	4681      	mov	r9, r0
 8008608:	d907      	bls.n	800861a <_malloc_r+0x1e>
 800860a:	f034 0407 	bics.w	r4, r4, #7
 800860e:	d505      	bpl.n	800861c <_malloc_r+0x20>
 8008610:	230c      	movs	r3, #12
 8008612:	f8c9 3000 	str.w	r3, [r9]
 8008616:	2600      	movs	r6, #0
 8008618:	e131      	b.n	800887e <_malloc_r+0x282>
 800861a:	2410      	movs	r4, #16
 800861c:	428c      	cmp	r4, r1
 800861e:	d3f7      	bcc.n	8008610 <_malloc_r+0x14>
 8008620:	4648      	mov	r0, r9
 8008622:	f000 fa0d 	bl	8008a40 <__malloc_lock>
 8008626:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800862a:	4d9c      	ldr	r5, [pc, #624]	; (800889c <_malloc_r+0x2a0>)
 800862c:	d236      	bcs.n	800869c <_malloc_r+0xa0>
 800862e:	f104 0208 	add.w	r2, r4, #8
 8008632:	442a      	add	r2, r5
 8008634:	f1a2 0108 	sub.w	r1, r2, #8
 8008638:	6856      	ldr	r6, [r2, #4]
 800863a:	428e      	cmp	r6, r1
 800863c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008640:	d102      	bne.n	8008648 <_malloc_r+0x4c>
 8008642:	68d6      	ldr	r6, [r2, #12]
 8008644:	42b2      	cmp	r2, r6
 8008646:	d010      	beq.n	800866a <_malloc_r+0x6e>
 8008648:	6873      	ldr	r3, [r6, #4]
 800864a:	68f2      	ldr	r2, [r6, #12]
 800864c:	68b1      	ldr	r1, [r6, #8]
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	60ca      	str	r2, [r1, #12]
 8008654:	4433      	add	r3, r6
 8008656:	6091      	str	r1, [r2, #8]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	605a      	str	r2, [r3, #4]
 8008660:	4648      	mov	r0, r9
 8008662:	f000 f9f3 	bl	8008a4c <__malloc_unlock>
 8008666:	3608      	adds	r6, #8
 8008668:	e109      	b.n	800887e <_malloc_r+0x282>
 800866a:	3302      	adds	r3, #2
 800866c:	4a8c      	ldr	r2, [pc, #560]	; (80088a0 <_malloc_r+0x2a4>)
 800866e:	692e      	ldr	r6, [r5, #16]
 8008670:	4296      	cmp	r6, r2
 8008672:	4611      	mov	r1, r2
 8008674:	d06d      	beq.n	8008752 <_malloc_r+0x156>
 8008676:	6870      	ldr	r0, [r6, #4]
 8008678:	f020 0003 	bic.w	r0, r0, #3
 800867c:	1b07      	subs	r7, r0, r4
 800867e:	2f0f      	cmp	r7, #15
 8008680:	dd47      	ble.n	8008712 <_malloc_r+0x116>
 8008682:	1933      	adds	r3, r6, r4
 8008684:	f044 0401 	orr.w	r4, r4, #1
 8008688:	6074      	str	r4, [r6, #4]
 800868a:	616b      	str	r3, [r5, #20]
 800868c:	612b      	str	r3, [r5, #16]
 800868e:	60da      	str	r2, [r3, #12]
 8008690:	609a      	str	r2, [r3, #8]
 8008692:	f047 0201 	orr.w	r2, r7, #1
 8008696:	605a      	str	r2, [r3, #4]
 8008698:	5037      	str	r7, [r6, r0]
 800869a:	e7e1      	b.n	8008660 <_malloc_r+0x64>
 800869c:	0a63      	lsrs	r3, r4, #9
 800869e:	d02a      	beq.n	80086f6 <_malloc_r+0xfa>
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d812      	bhi.n	80086ca <_malloc_r+0xce>
 80086a4:	09a3      	lsrs	r3, r4, #6
 80086a6:	3338      	adds	r3, #56	; 0x38
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80086ae:	f1a2 0008 	sub.w	r0, r2, #8
 80086b2:	6856      	ldr	r6, [r2, #4]
 80086b4:	4286      	cmp	r6, r0
 80086b6:	d006      	beq.n	80086c6 <_malloc_r+0xca>
 80086b8:	6872      	ldr	r2, [r6, #4]
 80086ba:	f022 0203 	bic.w	r2, r2, #3
 80086be:	1b11      	subs	r1, r2, r4
 80086c0:	290f      	cmp	r1, #15
 80086c2:	dd1c      	ble.n	80086fe <_malloc_r+0x102>
 80086c4:	3b01      	subs	r3, #1
 80086c6:	3301      	adds	r3, #1
 80086c8:	e7d0      	b.n	800866c <_malloc_r+0x70>
 80086ca:	2b14      	cmp	r3, #20
 80086cc:	d801      	bhi.n	80086d2 <_malloc_r+0xd6>
 80086ce:	335b      	adds	r3, #91	; 0x5b
 80086d0:	e7ea      	b.n	80086a8 <_malloc_r+0xac>
 80086d2:	2b54      	cmp	r3, #84	; 0x54
 80086d4:	d802      	bhi.n	80086dc <_malloc_r+0xe0>
 80086d6:	0b23      	lsrs	r3, r4, #12
 80086d8:	336e      	adds	r3, #110	; 0x6e
 80086da:	e7e5      	b.n	80086a8 <_malloc_r+0xac>
 80086dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80086e0:	d802      	bhi.n	80086e8 <_malloc_r+0xec>
 80086e2:	0be3      	lsrs	r3, r4, #15
 80086e4:	3377      	adds	r3, #119	; 0x77
 80086e6:	e7df      	b.n	80086a8 <_malloc_r+0xac>
 80086e8:	f240 5254 	movw	r2, #1364	; 0x554
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d804      	bhi.n	80086fa <_malloc_r+0xfe>
 80086f0:	0ca3      	lsrs	r3, r4, #18
 80086f2:	337c      	adds	r3, #124	; 0x7c
 80086f4:	e7d8      	b.n	80086a8 <_malloc_r+0xac>
 80086f6:	233f      	movs	r3, #63	; 0x3f
 80086f8:	e7d6      	b.n	80086a8 <_malloc_r+0xac>
 80086fa:	237e      	movs	r3, #126	; 0x7e
 80086fc:	e7d4      	b.n	80086a8 <_malloc_r+0xac>
 80086fe:	2900      	cmp	r1, #0
 8008700:	68f1      	ldr	r1, [r6, #12]
 8008702:	db04      	blt.n	800870e <_malloc_r+0x112>
 8008704:	68b3      	ldr	r3, [r6, #8]
 8008706:	60d9      	str	r1, [r3, #12]
 8008708:	608b      	str	r3, [r1, #8]
 800870a:	18b3      	adds	r3, r6, r2
 800870c:	e7a4      	b.n	8008658 <_malloc_r+0x5c>
 800870e:	460e      	mov	r6, r1
 8008710:	e7d0      	b.n	80086b4 <_malloc_r+0xb8>
 8008712:	2f00      	cmp	r7, #0
 8008714:	616a      	str	r2, [r5, #20]
 8008716:	612a      	str	r2, [r5, #16]
 8008718:	db05      	blt.n	8008726 <_malloc_r+0x12a>
 800871a:	4430      	add	r0, r6
 800871c:	6843      	ldr	r3, [r0, #4]
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	6043      	str	r3, [r0, #4]
 8008724:	e79c      	b.n	8008660 <_malloc_r+0x64>
 8008726:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800872a:	d244      	bcs.n	80087b6 <_malloc_r+0x1ba>
 800872c:	08c0      	lsrs	r0, r0, #3
 800872e:	1087      	asrs	r7, r0, #2
 8008730:	2201      	movs	r2, #1
 8008732:	fa02 f707 	lsl.w	r7, r2, r7
 8008736:	686a      	ldr	r2, [r5, #4]
 8008738:	3001      	adds	r0, #1
 800873a:	433a      	orrs	r2, r7
 800873c:	606a      	str	r2, [r5, #4]
 800873e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008742:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8008746:	60b7      	str	r7, [r6, #8]
 8008748:	3a08      	subs	r2, #8
 800874a:	60f2      	str	r2, [r6, #12]
 800874c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8008750:	60fe      	str	r6, [r7, #12]
 8008752:	2001      	movs	r0, #1
 8008754:	109a      	asrs	r2, r3, #2
 8008756:	fa00 f202 	lsl.w	r2, r0, r2
 800875a:	6868      	ldr	r0, [r5, #4]
 800875c:	4282      	cmp	r2, r0
 800875e:	f200 80a1 	bhi.w	80088a4 <_malloc_r+0x2a8>
 8008762:	4202      	tst	r2, r0
 8008764:	d106      	bne.n	8008774 <_malloc_r+0x178>
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	0052      	lsls	r2, r2, #1
 800876c:	4202      	tst	r2, r0
 800876e:	f103 0304 	add.w	r3, r3, #4
 8008772:	d0fa      	beq.n	800876a <_malloc_r+0x16e>
 8008774:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8008778:	46e0      	mov	r8, ip
 800877a:	469e      	mov	lr, r3
 800877c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008780:	4546      	cmp	r6, r8
 8008782:	d153      	bne.n	800882c <_malloc_r+0x230>
 8008784:	f10e 0e01 	add.w	lr, lr, #1
 8008788:	f01e 0f03 	tst.w	lr, #3
 800878c:	f108 0808 	add.w	r8, r8, #8
 8008790:	d1f4      	bne.n	800877c <_malloc_r+0x180>
 8008792:	0798      	lsls	r0, r3, #30
 8008794:	d179      	bne.n	800888a <_malloc_r+0x28e>
 8008796:	686b      	ldr	r3, [r5, #4]
 8008798:	ea23 0302 	bic.w	r3, r3, r2
 800879c:	606b      	str	r3, [r5, #4]
 800879e:	6868      	ldr	r0, [r5, #4]
 80087a0:	0052      	lsls	r2, r2, #1
 80087a2:	4282      	cmp	r2, r0
 80087a4:	d87e      	bhi.n	80088a4 <_malloc_r+0x2a8>
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d07c      	beq.n	80088a4 <_malloc_r+0x2a8>
 80087aa:	4673      	mov	r3, lr
 80087ac:	4202      	tst	r2, r0
 80087ae:	d1e1      	bne.n	8008774 <_malloc_r+0x178>
 80087b0:	3304      	adds	r3, #4
 80087b2:	0052      	lsls	r2, r2, #1
 80087b4:	e7fa      	b.n	80087ac <_malloc_r+0x1b0>
 80087b6:	0a42      	lsrs	r2, r0, #9
 80087b8:	2a04      	cmp	r2, #4
 80087ba:	d815      	bhi.n	80087e8 <_malloc_r+0x1ec>
 80087bc:	0982      	lsrs	r2, r0, #6
 80087be:	3238      	adds	r2, #56	; 0x38
 80087c0:	1c57      	adds	r7, r2, #1
 80087c2:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80087c6:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80087ca:	45be      	cmp	lr, r7
 80087cc:	d126      	bne.n	800881c <_malloc_r+0x220>
 80087ce:	2001      	movs	r0, #1
 80087d0:	1092      	asrs	r2, r2, #2
 80087d2:	fa00 f202 	lsl.w	r2, r0, r2
 80087d6:	6868      	ldr	r0, [r5, #4]
 80087d8:	4310      	orrs	r0, r2
 80087da:	6068      	str	r0, [r5, #4]
 80087dc:	f8c6 e00c 	str.w	lr, [r6, #12]
 80087e0:	60b7      	str	r7, [r6, #8]
 80087e2:	f8ce 6008 	str.w	r6, [lr, #8]
 80087e6:	e7b3      	b.n	8008750 <_malloc_r+0x154>
 80087e8:	2a14      	cmp	r2, #20
 80087ea:	d801      	bhi.n	80087f0 <_malloc_r+0x1f4>
 80087ec:	325b      	adds	r2, #91	; 0x5b
 80087ee:	e7e7      	b.n	80087c0 <_malloc_r+0x1c4>
 80087f0:	2a54      	cmp	r2, #84	; 0x54
 80087f2:	d802      	bhi.n	80087fa <_malloc_r+0x1fe>
 80087f4:	0b02      	lsrs	r2, r0, #12
 80087f6:	326e      	adds	r2, #110	; 0x6e
 80087f8:	e7e2      	b.n	80087c0 <_malloc_r+0x1c4>
 80087fa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80087fe:	d802      	bhi.n	8008806 <_malloc_r+0x20a>
 8008800:	0bc2      	lsrs	r2, r0, #15
 8008802:	3277      	adds	r2, #119	; 0x77
 8008804:	e7dc      	b.n	80087c0 <_malloc_r+0x1c4>
 8008806:	f240 5754 	movw	r7, #1364	; 0x554
 800880a:	42ba      	cmp	r2, r7
 800880c:	bf9a      	itte	ls
 800880e:	0c82      	lsrls	r2, r0, #18
 8008810:	327c      	addls	r2, #124	; 0x7c
 8008812:	227e      	movhi	r2, #126	; 0x7e
 8008814:	e7d4      	b.n	80087c0 <_malloc_r+0x1c4>
 8008816:	68bf      	ldr	r7, [r7, #8]
 8008818:	45be      	cmp	lr, r7
 800881a:	d004      	beq.n	8008826 <_malloc_r+0x22a>
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	f022 0203 	bic.w	r2, r2, #3
 8008822:	4290      	cmp	r0, r2
 8008824:	d3f7      	bcc.n	8008816 <_malloc_r+0x21a>
 8008826:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800882a:	e7d7      	b.n	80087dc <_malloc_r+0x1e0>
 800882c:	6870      	ldr	r0, [r6, #4]
 800882e:	68f7      	ldr	r7, [r6, #12]
 8008830:	f020 0003 	bic.w	r0, r0, #3
 8008834:	eba0 0a04 	sub.w	sl, r0, r4
 8008838:	f1ba 0f0f 	cmp.w	sl, #15
 800883c:	dd10      	ble.n	8008860 <_malloc_r+0x264>
 800883e:	68b2      	ldr	r2, [r6, #8]
 8008840:	1933      	adds	r3, r6, r4
 8008842:	f044 0401 	orr.w	r4, r4, #1
 8008846:	6074      	str	r4, [r6, #4]
 8008848:	60d7      	str	r7, [r2, #12]
 800884a:	60ba      	str	r2, [r7, #8]
 800884c:	f04a 0201 	orr.w	r2, sl, #1
 8008850:	616b      	str	r3, [r5, #20]
 8008852:	612b      	str	r3, [r5, #16]
 8008854:	60d9      	str	r1, [r3, #12]
 8008856:	6099      	str	r1, [r3, #8]
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	f846 a000 	str.w	sl, [r6, r0]
 800885e:	e6ff      	b.n	8008660 <_malloc_r+0x64>
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	db0f      	blt.n	8008886 <_malloc_r+0x28a>
 8008866:	4430      	add	r0, r6
 8008868:	6843      	ldr	r3, [r0, #4]
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	6043      	str	r3, [r0, #4]
 8008870:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008874:	4648      	mov	r0, r9
 8008876:	60df      	str	r7, [r3, #12]
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	f000 f8e7 	bl	8008a4c <__malloc_unlock>
 800887e:	4630      	mov	r0, r6
 8008880:	b003      	add	sp, #12
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	463e      	mov	r6, r7
 8008888:	e77a      	b.n	8008780 <_malloc_r+0x184>
 800888a:	f85c 0908 	ldr.w	r0, [ip], #-8
 800888e:	4584      	cmp	ip, r0
 8008890:	f103 33ff 	add.w	r3, r3, #4294967295
 8008894:	f43f af7d 	beq.w	8008792 <_malloc_r+0x196>
 8008898:	e781      	b.n	800879e <_malloc_r+0x1a2>
 800889a:	bf00      	nop
 800889c:	20000130 	.word	0x20000130
 80088a0:	20000138 	.word	0x20000138
 80088a4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80088a8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80088ac:	f026 0603 	bic.w	r6, r6, #3
 80088b0:	42b4      	cmp	r4, r6
 80088b2:	d803      	bhi.n	80088bc <_malloc_r+0x2c0>
 80088b4:	1b33      	subs	r3, r6, r4
 80088b6:	2b0f      	cmp	r3, #15
 80088b8:	f300 8096 	bgt.w	80089e8 <_malloc_r+0x3ec>
 80088bc:	4a4f      	ldr	r2, [pc, #316]	; (80089fc <_malloc_r+0x400>)
 80088be:	6817      	ldr	r7, [r2, #0]
 80088c0:	4a4f      	ldr	r2, [pc, #316]	; (8008a00 <_malloc_r+0x404>)
 80088c2:	6811      	ldr	r1, [r2, #0]
 80088c4:	3710      	adds	r7, #16
 80088c6:	3101      	adds	r1, #1
 80088c8:	eb0b 0306 	add.w	r3, fp, r6
 80088cc:	4427      	add	r7, r4
 80088ce:	d005      	beq.n	80088dc <_malloc_r+0x2e0>
 80088d0:	494c      	ldr	r1, [pc, #304]	; (8008a04 <_malloc_r+0x408>)
 80088d2:	3901      	subs	r1, #1
 80088d4:	440f      	add	r7, r1
 80088d6:	3101      	adds	r1, #1
 80088d8:	4249      	negs	r1, r1
 80088da:	400f      	ands	r7, r1
 80088dc:	4639      	mov	r1, r7
 80088de:	4648      	mov	r0, r9
 80088e0:	9201      	str	r2, [sp, #4]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	f000 f94c 	bl	8008b80 <_sbrk_r>
 80088e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088ec:	4680      	mov	r8, r0
 80088ee:	d056      	beq.n	800899e <_malloc_r+0x3a2>
 80088f0:	9b00      	ldr	r3, [sp, #0]
 80088f2:	9a01      	ldr	r2, [sp, #4]
 80088f4:	4283      	cmp	r3, r0
 80088f6:	d901      	bls.n	80088fc <_malloc_r+0x300>
 80088f8:	45ab      	cmp	fp, r5
 80088fa:	d150      	bne.n	800899e <_malloc_r+0x3a2>
 80088fc:	4842      	ldr	r0, [pc, #264]	; (8008a08 <_malloc_r+0x40c>)
 80088fe:	6801      	ldr	r1, [r0, #0]
 8008900:	4543      	cmp	r3, r8
 8008902:	eb07 0e01 	add.w	lr, r7, r1
 8008906:	f8c0 e000 	str.w	lr, [r0]
 800890a:	4940      	ldr	r1, [pc, #256]	; (8008a0c <_malloc_r+0x410>)
 800890c:	4682      	mov	sl, r0
 800890e:	d113      	bne.n	8008938 <_malloc_r+0x33c>
 8008910:	420b      	tst	r3, r1
 8008912:	d111      	bne.n	8008938 <_malloc_r+0x33c>
 8008914:	68ab      	ldr	r3, [r5, #8]
 8008916:	443e      	add	r6, r7
 8008918:	f046 0601 	orr.w	r6, r6, #1
 800891c:	605e      	str	r6, [r3, #4]
 800891e:	4a3c      	ldr	r2, [pc, #240]	; (8008a10 <_malloc_r+0x414>)
 8008920:	f8da 3000 	ldr.w	r3, [sl]
 8008924:	6811      	ldr	r1, [r2, #0]
 8008926:	428b      	cmp	r3, r1
 8008928:	bf88      	it	hi
 800892a:	6013      	strhi	r3, [r2, #0]
 800892c:	4a39      	ldr	r2, [pc, #228]	; (8008a14 <_malloc_r+0x418>)
 800892e:	6811      	ldr	r1, [r2, #0]
 8008930:	428b      	cmp	r3, r1
 8008932:	bf88      	it	hi
 8008934:	6013      	strhi	r3, [r2, #0]
 8008936:	e032      	b.n	800899e <_malloc_r+0x3a2>
 8008938:	6810      	ldr	r0, [r2, #0]
 800893a:	3001      	adds	r0, #1
 800893c:	bf1b      	ittet	ne
 800893e:	eba8 0303 	subne.w	r3, r8, r3
 8008942:	4473      	addne	r3, lr
 8008944:	f8c2 8000 	streq.w	r8, [r2]
 8008948:	f8ca 3000 	strne.w	r3, [sl]
 800894c:	f018 0007 	ands.w	r0, r8, #7
 8008950:	bf1c      	itt	ne
 8008952:	f1c0 0008 	rsbne	r0, r0, #8
 8008956:	4480      	addne	r8, r0
 8008958:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <_malloc_r+0x408>)
 800895a:	4447      	add	r7, r8
 800895c:	4418      	add	r0, r3
 800895e:	400f      	ands	r7, r1
 8008960:	1bc7      	subs	r7, r0, r7
 8008962:	4639      	mov	r1, r7
 8008964:	4648      	mov	r0, r9
 8008966:	f000 f90b 	bl	8008b80 <_sbrk_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	bf08      	it	eq
 800896e:	4640      	moveq	r0, r8
 8008970:	f8da 3000 	ldr.w	r3, [sl]
 8008974:	f8c5 8008 	str.w	r8, [r5, #8]
 8008978:	bf08      	it	eq
 800897a:	2700      	moveq	r7, #0
 800897c:	eba0 0008 	sub.w	r0, r0, r8
 8008980:	443b      	add	r3, r7
 8008982:	4407      	add	r7, r0
 8008984:	f047 0701 	orr.w	r7, r7, #1
 8008988:	45ab      	cmp	fp, r5
 800898a:	f8ca 3000 	str.w	r3, [sl]
 800898e:	f8c8 7004 	str.w	r7, [r8, #4]
 8008992:	d0c4      	beq.n	800891e <_malloc_r+0x322>
 8008994:	2e0f      	cmp	r6, #15
 8008996:	d810      	bhi.n	80089ba <_malloc_r+0x3be>
 8008998:	2301      	movs	r3, #1
 800899a:	f8c8 3004 	str.w	r3, [r8, #4]
 800899e:	68ab      	ldr	r3, [r5, #8]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	f022 0203 	bic.w	r2, r2, #3
 80089a6:	4294      	cmp	r4, r2
 80089a8:	eba2 0304 	sub.w	r3, r2, r4
 80089ac:	d801      	bhi.n	80089b2 <_malloc_r+0x3b6>
 80089ae:	2b0f      	cmp	r3, #15
 80089b0:	dc1a      	bgt.n	80089e8 <_malloc_r+0x3ec>
 80089b2:	4648      	mov	r0, r9
 80089b4:	f000 f84a 	bl	8008a4c <__malloc_unlock>
 80089b8:	e62d      	b.n	8008616 <_malloc_r+0x1a>
 80089ba:	f8db 3004 	ldr.w	r3, [fp, #4]
 80089be:	3e0c      	subs	r6, #12
 80089c0:	f026 0607 	bic.w	r6, r6, #7
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	4333      	orrs	r3, r6
 80089ca:	f8cb 3004 	str.w	r3, [fp, #4]
 80089ce:	eb0b 0306 	add.w	r3, fp, r6
 80089d2:	2205      	movs	r2, #5
 80089d4:	2e0f      	cmp	r6, #15
 80089d6:	605a      	str	r2, [r3, #4]
 80089d8:	609a      	str	r2, [r3, #8]
 80089da:	d9a0      	bls.n	800891e <_malloc_r+0x322>
 80089dc:	f10b 0108 	add.w	r1, fp, #8
 80089e0:	4648      	mov	r0, r9
 80089e2:	f7ff fcf9 	bl	80083d8 <_free_r>
 80089e6:	e79a      	b.n	800891e <_malloc_r+0x322>
 80089e8:	68ae      	ldr	r6, [r5, #8]
 80089ea:	f044 0201 	orr.w	r2, r4, #1
 80089ee:	4434      	add	r4, r6
 80089f0:	f043 0301 	orr.w	r3, r3, #1
 80089f4:	6072      	str	r2, [r6, #4]
 80089f6:	60ac      	str	r4, [r5, #8]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	e631      	b.n	8008660 <_malloc_r+0x64>
 80089fc:	20001c6c 	.word	0x20001c6c
 8008a00:	20000538 	.word	0x20000538
 8008a04:	00001000 	.word	0x00001000
 8008a08:	20001c3c 	.word	0x20001c3c
 8008a0c:	00000fff 	.word	0x00000fff
 8008a10:	20001c64 	.word	0x20001c64
 8008a14:	20001c68 	.word	0x20001c68

08008a18 <memcpy>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	1e43      	subs	r3, r0, #1
 8008a1c:	440a      	add	r2, r1
 8008a1e:	4291      	cmp	r1, r2
 8008a20:	d100      	bne.n	8008a24 <memcpy+0xc>
 8008a22:	bd10      	pop	{r4, pc}
 8008a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2c:	e7f7      	b.n	8008a1e <memcpy+0x6>

08008a2e <memset>:
 8008a2e:	4402      	add	r2, r0
 8008a30:	4603      	mov	r3, r0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d100      	bne.n	8008a38 <memset+0xa>
 8008a36:	4770      	bx	lr
 8008a38:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3c:	e7f9      	b.n	8008a32 <memset+0x4>
	...

08008a40 <__malloc_lock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__malloc_lock+0x8>)
 8008a42:	f7ff bdc9 	b.w	80085d8 <__retarget_lock_acquire_recursive>
 8008a46:	bf00      	nop
 8008a48:	20001dc0 	.word	0x20001dc0

08008a4c <__malloc_unlock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__malloc_unlock+0x8>)
 8008a4e:	f7ff bdc4 	b.w	80085da <__retarget_lock_release_recursive>
 8008a52:	bf00      	nop
 8008a54:	20001dc0 	.word	0x20001dc0

08008a58 <printf>:
 8008a58:	b40f      	push	{r0, r1, r2, r3}
 8008a5a:	4b0a      	ldr	r3, [pc, #40]	; (8008a84 <printf+0x2c>)
 8008a5c:	b513      	push	{r0, r1, r4, lr}
 8008a5e:	681c      	ldr	r4, [r3, #0]
 8008a60:	b124      	cbz	r4, 8008a6c <printf+0x14>
 8008a62:	69a3      	ldr	r3, [r4, #24]
 8008a64:	b913      	cbnz	r3, 8008a6c <printf+0x14>
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fbe0 	bl	800822c <__sinit>
 8008a6c:	ab05      	add	r3, sp, #20
 8008a6e:	9a04      	ldr	r2, [sp, #16]
 8008a70:	68a1      	ldr	r1, [r4, #8]
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	4620      	mov	r0, r4
 8008a76:	f001 f8cf 	bl	8009c18 <_vfprintf_r>
 8008a7a:	b002      	add	sp, #8
 8008a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a80:	b004      	add	sp, #16
 8008a82:	4770      	bx	lr
 8008a84:	2000003c 	.word	0x2000003c

08008a88 <putchar>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4b08      	ldr	r3, [pc, #32]	; (8008aac <putchar+0x24>)
 8008a8c:	681c      	ldr	r4, [r3, #0]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b124      	cbz	r4, 8008a9c <putchar+0x14>
 8008a92:	69a3      	ldr	r3, [r4, #24]
 8008a94:	b913      	cbnz	r3, 8008a9c <putchar+0x14>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff fbc8 	bl	800822c <__sinit>
 8008a9c:	68a2      	ldr	r2, [r4, #8]
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa6:	f003 bd4d 	b.w	800c544 <_putc_r>
 8008aaa:	bf00      	nop
 8008aac:	2000003c 	.word	0x2000003c

08008ab0 <_puts_r>:
 8008ab0:	b530      	push	{r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b089      	sub	sp, #36	; 0x24
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	460c      	mov	r4, r1
 8008aba:	f7f7 fb93 	bl	80001e4 <strlen>
 8008abe:	4b28      	ldr	r3, [pc, #160]	; (8008b60 <_puts_r+0xb0>)
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	9005      	str	r0, [sp, #20]
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	4418      	add	r0, r3
 8008aca:	ab04      	add	r3, sp, #16
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2302      	movs	r3, #2
 8008ad0:	9404      	str	r4, [sp, #16]
 8008ad2:	9003      	str	r0, [sp, #12]
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	b125      	cbz	r5, 8008ae2 <_puts_r+0x32>
 8008ad8:	69ab      	ldr	r3, [r5, #24]
 8008ada:	b913      	cbnz	r3, 8008ae2 <_puts_r+0x32>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f7ff fba5 	bl	800822c <__sinit>
 8008ae2:	69ab      	ldr	r3, [r5, #24]
 8008ae4:	68ac      	ldr	r4, [r5, #8]
 8008ae6:	b913      	cbnz	r3, 8008aee <_puts_r+0x3e>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7ff fb9f 	bl	800822c <__sinit>
 8008aee:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <_puts_r+0xb4>)
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d12a      	bne.n	8008b4a <_puts_r+0x9a>
 8008af4:	686c      	ldr	r4, [r5, #4]
 8008af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af8:	07db      	lsls	r3, r3, #31
 8008afa:	d405      	bmi.n	8008b08 <_puts_r+0x58>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	0598      	lsls	r0, r3, #22
 8008b00:	d402      	bmi.n	8008b08 <_puts_r+0x58>
 8008b02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b04:	f7ff fd68 	bl	80085d8 <__retarget_lock_acquire_recursive>
 8008b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0c:	0499      	lsls	r1, r3, #18
 8008b0e:	d406      	bmi.n	8008b1e <_puts_r+0x6e>
 8008b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b1c:	6663      	str	r3, [r4, #100]	; 0x64
 8008b1e:	4628      	mov	r0, r5
 8008b20:	aa01      	add	r2, sp, #4
 8008b22:	4621      	mov	r1, r4
 8008b24:	f003 f84a 	bl	800bbbc <__sfvwrite_r>
 8008b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	bf14      	ite	ne
 8008b2e:	f04f 35ff 	movne.w	r5, #4294967295
 8008b32:	250a      	moveq	r5, #10
 8008b34:	07da      	lsls	r2, r3, #31
 8008b36:	d405      	bmi.n	8008b44 <_puts_r+0x94>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	059b      	lsls	r3, r3, #22
 8008b3c:	d402      	bmi.n	8008b44 <_puts_r+0x94>
 8008b3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b40:	f7ff fd4b 	bl	80085da <__retarget_lock_release_recursive>
 8008b44:	4628      	mov	r0, r5
 8008b46:	b009      	add	sp, #36	; 0x24
 8008b48:	bd30      	pop	{r4, r5, pc}
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <_puts_r+0xb8>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d101      	bne.n	8008b54 <_puts_r+0xa4>
 8008b50:	68ac      	ldr	r4, [r5, #8]
 8008b52:	e7d0      	b.n	8008af6 <_puts_r+0x46>
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <_puts_r+0xbc>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	bf08      	it	eq
 8008b5a:	68ec      	ldreq	r4, [r5, #12]
 8008b5c:	e7cb      	b.n	8008af6 <_puts_r+0x46>
 8008b5e:	bf00      	nop
 8008b60:	0800cf5b 	.word	0x0800cf5b
 8008b64:	0800d204 	.word	0x0800d204
 8008b68:	0800d224 	.word	0x0800d224
 8008b6c:	0800d1e4 	.word	0x0800d1e4

08008b70 <puts>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <puts+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f7ff bf9b 	b.w	8008ab0 <_puts_r>
 8008b7a:	bf00      	nop
 8008b7c:	2000003c 	.word	0x2000003c

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4c06      	ldr	r4, [pc, #24]	; (8008b9c <_sbrk_r+0x1c>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4605      	mov	r5, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	f7ff f80a 	bl	8007ba4 <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20001dc8 	.word	0x20001dc8

08008ba0 <sprintf>:
 8008ba0:	b40e      	push	{r1, r2, r3}
 8008ba2:	b500      	push	{lr}
 8008ba4:	b09c      	sub	sp, #112	; 0x70
 8008ba6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008baa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bac:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008bb0:	9002      	str	r0, [sp, #8]
 8008bb2:	9006      	str	r0, [sp, #24]
 8008bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bb8:	480a      	ldr	r0, [pc, #40]	; (8008be4 <sprintf+0x44>)
 8008bba:	9104      	str	r1, [sp, #16]
 8008bbc:	9107      	str	r1, [sp, #28]
 8008bbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	a902      	add	r1, sp, #8
 8008bd0:	f000 f84e 	bl	8008c70 <_svfprintf_r>
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	b01c      	add	sp, #112	; 0x70
 8008bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be0:	b003      	add	sp, #12
 8008be2:	4770      	bx	lr
 8008be4:	2000003c 	.word	0x2000003c

08008be8 <__sread>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	460c      	mov	r4, r1
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	f003 fcf0 	bl	800c5d4 <_read_r>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	bfab      	itete	ge
 8008bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008bfc:	181b      	addge	r3, r3, r0
 8008bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c02:	bfac      	ite	ge
 8008c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c06:	81a3      	strhlt	r3, [r4, #12]
 8008c08:	bd10      	pop	{r4, pc}

08008c0a <__swrite>:
 8008c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0e:	461f      	mov	r7, r3
 8008c10:	898b      	ldrh	r3, [r1, #12]
 8008c12:	05db      	lsls	r3, r3, #23
 8008c14:	4605      	mov	r5, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4616      	mov	r6, r2
 8008c1a:	d505      	bpl.n	8008c28 <__swrite+0x1e>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c24:	f003 f926 	bl	800be74 <_lseek_r>
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	4632      	mov	r2, r6
 8008c36:	463b      	mov	r3, r7
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	f002 b867 	b.w	800ad10 <_write_r>

08008c42 <__sseek>:
 8008c42:	b510      	push	{r4, lr}
 8008c44:	460c      	mov	r4, r1
 8008c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4a:	f003 f913 	bl	800be74 <_lseek_r>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	bf15      	itete	ne
 8008c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c5e:	81a3      	strheq	r3, [r4, #12]
 8008c60:	bf18      	it	ne
 8008c62:	81a3      	strhne	r3, [r4, #12]
 8008c64:	bd10      	pop	{r4, pc}

08008c66 <__sclose>:
 8008c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6a:	f002 b8d1 	b.w	800ae10 <_close_r>
	...

08008c70 <_svfprintf_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	b0bd      	sub	sp, #244	; 0xf4
 8008c76:	468a      	mov	sl, r1
 8008c78:	4615      	mov	r5, r2
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	4683      	mov	fp, r0
 8008c7e:	f003 f8eb 	bl	800be58 <_localeconv_r>
 8008c82:	6803      	ldr	r3, [r0, #0]
 8008c84:	930d      	str	r3, [sp, #52]	; 0x34
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 faac 	bl	80001e4 <strlen>
 8008c8c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008c90:	9008      	str	r0, [sp, #32]
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	d518      	bpl.n	8008cc8 <_svfprintf_r+0x58>
 8008c96:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008c9a:	b9ab      	cbnz	r3, 8008cc8 <_svfprintf_r+0x58>
 8008c9c:	2140      	movs	r1, #64	; 0x40
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f7ff fcac 	bl	80085fc <_malloc_r>
 8008ca4:	f8ca 0000 	str.w	r0, [sl]
 8008ca8:	f8ca 0010 	str.w	r0, [sl, #16]
 8008cac:	b948      	cbnz	r0, 8008cc2 <_svfprintf_r+0x52>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	f8cb 3000 	str.w	r3, [fp]
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cbc:	b03d      	add	sp, #244	; 0xf4
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	2340      	movs	r3, #64	; 0x40
 8008cc4:	f8ca 3014 	str.w	r3, [sl, #20]
 8008cc8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008f30 <_svfprintf_r+0x2c0>
 8008ccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8008cd4:	941f      	str	r4, [sp, #124]	; 0x7c
 8008cd6:	9321      	str	r3, [sp, #132]	; 0x84
 8008cd8:	9320      	str	r3, [sp, #128]	; 0x80
 8008cda:	9505      	str	r5, [sp, #20]
 8008cdc:	9303      	str	r3, [sp, #12]
 8008cde:	9311      	str	r3, [sp, #68]	; 0x44
 8008ce0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce4:	9d05      	ldr	r5, [sp, #20]
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cec:	b112      	cbz	r2, 8008cf4 <_svfprintf_r+0x84>
 8008cee:	2a25      	cmp	r2, #37	; 0x25
 8008cf0:	f040 8083 	bne.w	8008dfa <_svfprintf_r+0x18a>
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	1aee      	subs	r6, r5, r3
 8008cf8:	d00d      	beq.n	8008d16 <_svfprintf_r+0xa6>
 8008cfa:	e884 0048 	stmia.w	r4, {r3, r6}
 8008cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d00:	4433      	add	r3, r6
 8008d02:	9321      	str	r3, [sp, #132]	; 0x84
 8008d04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d06:	3301      	adds	r3, #1
 8008d08:	2b07      	cmp	r3, #7
 8008d0a:	9320      	str	r3, [sp, #128]	; 0x80
 8008d0c:	dc77      	bgt.n	8008dfe <_svfprintf_r+0x18e>
 8008d0e:	3408      	adds	r4, #8
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	4433      	add	r3, r6
 8008d14:	9309      	str	r3, [sp, #36]	; 0x24
 8008d16:	782b      	ldrb	r3, [r5, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8729 	beq.w	8009b70 <_svfprintf_r+0xf00>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	1c69      	adds	r1, r5, #1
 8008d22:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008d26:	461a      	mov	r2, r3
 8008d28:	f04f 39ff 	mov.w	r9, #4294967295
 8008d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d2e:	461d      	mov	r5, r3
 8008d30:	200a      	movs	r0, #10
 8008d32:	1c4e      	adds	r6, r1, #1
 8008d34:	7809      	ldrb	r1, [r1, #0]
 8008d36:	9605      	str	r6, [sp, #20]
 8008d38:	9102      	str	r1, [sp, #8]
 8008d3a:	9902      	ldr	r1, [sp, #8]
 8008d3c:	3920      	subs	r1, #32
 8008d3e:	2958      	cmp	r1, #88	; 0x58
 8008d40:	f200 8418 	bhi.w	8009574 <_svfprintf_r+0x904>
 8008d44:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008d48:	041600a6 	.word	0x041600a6
 8008d4c:	00ab0416 	.word	0x00ab0416
 8008d50:	04160416 	.word	0x04160416
 8008d54:	04160416 	.word	0x04160416
 8008d58:	04160416 	.word	0x04160416
 8008d5c:	006500ae 	.word	0x006500ae
 8008d60:	00b70416 	.word	0x00b70416
 8008d64:	041600ba 	.word	0x041600ba
 8008d68:	00da00d7 	.word	0x00da00d7
 8008d6c:	00da00da 	.word	0x00da00da
 8008d70:	00da00da 	.word	0x00da00da
 8008d74:	00da00da 	.word	0x00da00da
 8008d78:	00da00da 	.word	0x00da00da
 8008d7c:	04160416 	.word	0x04160416
 8008d80:	04160416 	.word	0x04160416
 8008d84:	04160416 	.word	0x04160416
 8008d88:	04160416 	.word	0x04160416
 8008d8c:	04160416 	.word	0x04160416
 8008d90:	012b0115 	.word	0x012b0115
 8008d94:	012b0416 	.word	0x012b0416
 8008d98:	04160416 	.word	0x04160416
 8008d9c:	04160416 	.word	0x04160416
 8008da0:	041600ed 	.word	0x041600ed
 8008da4:	03400416 	.word	0x03400416
 8008da8:	04160416 	.word	0x04160416
 8008dac:	04160416 	.word	0x04160416
 8008db0:	03a80416 	.word	0x03a80416
 8008db4:	04160416 	.word	0x04160416
 8008db8:	04160086 	.word	0x04160086
 8008dbc:	04160416 	.word	0x04160416
 8008dc0:	04160416 	.word	0x04160416
 8008dc4:	04160416 	.word	0x04160416
 8008dc8:	04160416 	.word	0x04160416
 8008dcc:	01070416 	.word	0x01070416
 8008dd0:	012b006b 	.word	0x012b006b
 8008dd4:	012b012b 	.word	0x012b012b
 8008dd8:	006b00f0 	.word	0x006b00f0
 8008ddc:	04160416 	.word	0x04160416
 8008de0:	041600fa 	.word	0x041600fa
 8008de4:	03420322 	.word	0x03420322
 8008de8:	01010376 	.word	0x01010376
 8008dec:	03870416 	.word	0x03870416
 8008df0:	03aa0416 	.word	0x03aa0416
 8008df4:	04160416 	.word	0x04160416
 8008df8:	03c2      	.short	0x03c2
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	e773      	b.n	8008ce6 <_svfprintf_r+0x76>
 8008dfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e00:	4651      	mov	r1, sl
 8008e02:	4658      	mov	r0, fp
 8008e04:	f003 fd78 	bl	800c8f8 <__ssprint_r>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f040 8692 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8008e0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e10:	e77e      	b.n	8008d10 <_svfprintf_r+0xa0>
 8008e12:	2301      	movs	r3, #1
 8008e14:	222b      	movs	r2, #43	; 0x2b
 8008e16:	9905      	ldr	r1, [sp, #20]
 8008e18:	e78b      	b.n	8008d32 <_svfprintf_r+0xc2>
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	e7fb      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008e1e:	b10b      	cbz	r3, 8008e24 <_svfprintf_r+0x1b4>
 8008e20:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008e24:	06ae      	lsls	r6, r5, #26
 8008e26:	f140 80aa 	bpl.w	8008f7e <_svfprintf_r+0x30e>
 8008e2a:	3707      	adds	r7, #7
 8008e2c:	f027 0707 	bic.w	r7, r7, #7
 8008e30:	f107 0308 	add.w	r3, r7, #8
 8008e34:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	f177 0300 	sbcs.w	r3, r7, #0
 8008e40:	da06      	bge.n	8008e50 <_svfprintf_r+0x1e0>
 8008e42:	4276      	negs	r6, r6
 8008e44:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008e48:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008e4c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008e50:	2301      	movs	r3, #1
 8008e52:	e2ca      	b.n	80093ea <_svfprintf_r+0x77a>
 8008e54:	b10b      	cbz	r3, 8008e5a <_svfprintf_r+0x1ea>
 8008e56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008e5a:	4b37      	ldr	r3, [pc, #220]	; (8008f38 <_svfprintf_r+0x2c8>)
 8008e5c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e5e:	06ab      	lsls	r3, r5, #26
 8008e60:	f140 8339 	bpl.w	80094d6 <_svfprintf_r+0x866>
 8008e64:	3707      	adds	r7, #7
 8008e66:	f027 0707 	bic.w	r7, r7, #7
 8008e6a:	f107 0308 	add.w	r3, r7, #8
 8008e6e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	07e8      	lsls	r0, r5, #31
 8008e76:	d50b      	bpl.n	8008e90 <_svfprintf_r+0x220>
 8008e78:	ea56 0307 	orrs.w	r3, r6, r7
 8008e7c:	d008      	beq.n	8008e90 <_svfprintf_r+0x220>
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008e84:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008e88:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8008e8c:	f045 0502 	orr.w	r5, r5, #2
 8008e90:	2302      	movs	r3, #2
 8008e92:	e2a7      	b.n	80093e4 <_svfprintf_r+0x774>
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	d1be      	bne.n	8008e16 <_svfprintf_r+0x1a6>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	e7bb      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008e9e:	f045 0501 	orr.w	r5, r5, #1
 8008ea2:	e7b8      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008ea4:	683e      	ldr	r6, [r7, #0]
 8008ea6:	960a      	str	r6, [sp, #40]	; 0x28
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	f107 0104 	add.w	r1, r7, #4
 8008eae:	dab4      	bge.n	8008e1a <_svfprintf_r+0x1aa>
 8008eb0:	4276      	negs	r6, r6
 8008eb2:	960a      	str	r6, [sp, #40]	; 0x28
 8008eb4:	460f      	mov	r7, r1
 8008eb6:	f045 0504 	orr.w	r5, r5, #4
 8008eba:	e7ac      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008ebc:	9905      	ldr	r1, [sp, #20]
 8008ebe:	1c4e      	adds	r6, r1, #1
 8008ec0:	7809      	ldrb	r1, [r1, #0]
 8008ec2:	9102      	str	r1, [sp, #8]
 8008ec4:	292a      	cmp	r1, #42	; 0x2a
 8008ec6:	d010      	beq.n	8008eea <_svfprintf_r+0x27a>
 8008ec8:	f04f 0900 	mov.w	r9, #0
 8008ecc:	9605      	str	r6, [sp, #20]
 8008ece:	9902      	ldr	r1, [sp, #8]
 8008ed0:	3930      	subs	r1, #48	; 0x30
 8008ed2:	2909      	cmp	r1, #9
 8008ed4:	f63f af31 	bhi.w	8008d3a <_svfprintf_r+0xca>
 8008ed8:	fb00 1909 	mla	r9, r0, r9, r1
 8008edc:	9905      	ldr	r1, [sp, #20]
 8008ede:	460e      	mov	r6, r1
 8008ee0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8008ee4:	9102      	str	r1, [sp, #8]
 8008ee6:	9605      	str	r6, [sp, #20]
 8008ee8:	e7f1      	b.n	8008ece <_svfprintf_r+0x25e>
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	9605      	str	r6, [sp, #20]
 8008eee:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8008ef2:	3704      	adds	r7, #4
 8008ef4:	e78f      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008ef6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008efa:	e78c      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008efc:	2100      	movs	r1, #0
 8008efe:	910a      	str	r1, [sp, #40]	; 0x28
 8008f00:	9902      	ldr	r1, [sp, #8]
 8008f02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f04:	3930      	subs	r1, #48	; 0x30
 8008f06:	fb00 1106 	mla	r1, r0, r6, r1
 8008f0a:	910a      	str	r1, [sp, #40]	; 0x28
 8008f0c:	9905      	ldr	r1, [sp, #20]
 8008f0e:	460e      	mov	r6, r1
 8008f10:	f816 1b01 	ldrb.w	r1, [r6], #1
 8008f14:	9102      	str	r1, [sp, #8]
 8008f16:	9902      	ldr	r1, [sp, #8]
 8008f18:	9605      	str	r6, [sp, #20]
 8008f1a:	3930      	subs	r1, #48	; 0x30
 8008f1c:	2909      	cmp	r1, #9
 8008f1e:	d9ef      	bls.n	8008f00 <_svfprintf_r+0x290>
 8008f20:	e70b      	b.n	8008d3a <_svfprintf_r+0xca>
 8008f22:	f045 0508 	orr.w	r5, r5, #8
 8008f26:	e776      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008f28:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008f2c:	e773      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008f2e:	bf00      	nop
	...
 8008f38:	0800d258 	.word	0x0800d258
 8008f3c:	9905      	ldr	r1, [sp, #20]
 8008f3e:	7809      	ldrb	r1, [r1, #0]
 8008f40:	296c      	cmp	r1, #108	; 0x6c
 8008f42:	d105      	bne.n	8008f50 <_svfprintf_r+0x2e0>
 8008f44:	9905      	ldr	r1, [sp, #20]
 8008f46:	3101      	adds	r1, #1
 8008f48:	9105      	str	r1, [sp, #20]
 8008f4a:	f045 0520 	orr.w	r5, r5, #32
 8008f4e:	e762      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008f50:	f045 0510 	orr.w	r5, r5, #16
 8008f54:	e75f      	b.n	8008e16 <_svfprintf_r+0x1a6>
 8008f56:	1d3b      	adds	r3, r7, #4
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008f62:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008f66:	f04f 0901 	mov.w	r9, #1
 8008f6a:	4637      	mov	r7, r6
 8008f6c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008f70:	e11b      	b.n	80091aa <_svfprintf_r+0x53a>
 8008f72:	b10b      	cbz	r3, 8008f78 <_svfprintf_r+0x308>
 8008f74:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008f78:	f045 0510 	orr.w	r5, r5, #16
 8008f7c:	e752      	b.n	8008e24 <_svfprintf_r+0x1b4>
 8008f7e:	f015 0f10 	tst.w	r5, #16
 8008f82:	f107 0304 	add.w	r3, r7, #4
 8008f86:	d003      	beq.n	8008f90 <_svfprintf_r+0x320>
 8008f88:	683e      	ldr	r6, [r7, #0]
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	17f7      	asrs	r7, r6, #31
 8008f8e:	e754      	b.n	8008e3a <_svfprintf_r+0x1ca>
 8008f90:	683e      	ldr	r6, [r7, #0]
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f98:	bf18      	it	ne
 8008f9a:	b236      	sxthne	r6, r6
 8008f9c:	e7f6      	b.n	8008f8c <_svfprintf_r+0x31c>
 8008f9e:	b10b      	cbz	r3, 8008fa4 <_svfprintf_r+0x334>
 8008fa0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008fa4:	3707      	adds	r7, #7
 8008fa6:	f027 0707 	bic.w	r7, r7, #7
 8008faa:	f107 0308 	add.w	r3, r7, #8
 8008fae:	9304      	str	r3, [sp, #16]
 8008fb0:	ed97 7b00 	vldr	d7, [r7]
 8008fb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fb8:	9b06      	ldr	r3, [sp, #24]
 8008fba:	9312      	str	r3, [sp, #72]	; 0x48
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	4b4a      	ldr	r3, [pc, #296]	; (80090f4 <_svfprintf_r+0x484>)
 8008fca:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008fce:	f7f7 fdb9 	bl	8000b44 <__aeabi_dcmpun>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	f040 85d5 	bne.w	8009b82 <_svfprintf_r+0xf12>
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fdc:	4b45      	ldr	r3, [pc, #276]	; (80090f4 <_svfprintf_r+0x484>)
 8008fde:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008fe2:	f7f7 fd91 	bl	8000b08 <__aeabi_dcmple>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 85cb 	bne.w	8009b82 <_svfprintf_r+0xf12>
 8008fec:	2200      	movs	r2, #0
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff4:	f7f7 fd7e 	bl	8000af4 <__aeabi_dcmplt>
 8008ff8:	b110      	cbz	r0, 8009000 <_svfprintf_r+0x390>
 8008ffa:	232d      	movs	r3, #45	; 0x2d
 8008ffc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009000:	4b3d      	ldr	r3, [pc, #244]	; (80090f8 <_svfprintf_r+0x488>)
 8009002:	4a3e      	ldr	r2, [pc, #248]	; (80090fc <_svfprintf_r+0x48c>)
 8009004:	9902      	ldr	r1, [sp, #8]
 8009006:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800900a:	2947      	cmp	r1, #71	; 0x47
 800900c:	bfcc      	ite	gt
 800900e:	4690      	movgt	r8, r2
 8009010:	4698      	movle	r8, r3
 8009012:	f04f 0903 	mov.w	r9, #3
 8009016:	2600      	movs	r6, #0
 8009018:	4637      	mov	r7, r6
 800901a:	e0c6      	b.n	80091aa <_svfprintf_r+0x53a>
 800901c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009020:	d022      	beq.n	8009068 <_svfprintf_r+0x3f8>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	f023 0320 	bic.w	r3, r3, #32
 8009028:	2b47      	cmp	r3, #71	; 0x47
 800902a:	d104      	bne.n	8009036 <_svfprintf_r+0x3c6>
 800902c:	f1b9 0f00 	cmp.w	r9, #0
 8009030:	bf08      	it	eq
 8009032:	f04f 0901 	moveq.w	r9, #1
 8009036:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800903a:	930c      	str	r3, [sp, #48]	; 0x30
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	da15      	bge.n	800906e <_svfprintf_r+0x3fe>
 8009042:	9b06      	ldr	r3, [sp, #24]
 8009044:	930e      	str	r3, [sp, #56]	; 0x38
 8009046:	9b07      	ldr	r3, [sp, #28]
 8009048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800904c:	930f      	str	r3, [sp, #60]	; 0x3c
 800904e:	232d      	movs	r3, #45	; 0x2d
 8009050:	930b      	str	r3, [sp, #44]	; 0x2c
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	f023 0720 	bic.w	r7, r3, #32
 8009058:	2f46      	cmp	r7, #70	; 0x46
 800905a:	d00e      	beq.n	800907a <_svfprintf_r+0x40a>
 800905c:	2f45      	cmp	r7, #69	; 0x45
 800905e:	d146      	bne.n	80090ee <_svfprintf_r+0x47e>
 8009060:	f109 0601 	add.w	r6, r9, #1
 8009064:	2102      	movs	r1, #2
 8009066:	e00a      	b.n	800907e <_svfprintf_r+0x40e>
 8009068:	f04f 0906 	mov.w	r9, #6
 800906c:	e7e3      	b.n	8009036 <_svfprintf_r+0x3c6>
 800906e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009072:	2300      	movs	r3, #0
 8009074:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009078:	e7ea      	b.n	8009050 <_svfprintf_r+0x3e0>
 800907a:	464e      	mov	r6, r9
 800907c:	2103      	movs	r1, #3
 800907e:	ab1d      	add	r3, sp, #116	; 0x74
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	ab1a      	add	r3, sp, #104	; 0x68
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	4632      	mov	r2, r6
 8009088:	ab19      	add	r3, sp, #100	; 0x64
 800908a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800908e:	4658      	mov	r0, fp
 8009090:	f001 ff5a 	bl	800af48 <_dtoa_r>
 8009094:	2f47      	cmp	r7, #71	; 0x47
 8009096:	4680      	mov	r8, r0
 8009098:	d102      	bne.n	80090a0 <_svfprintf_r+0x430>
 800909a:	07e8      	lsls	r0, r5, #31
 800909c:	f140 857e 	bpl.w	8009b9c <_svfprintf_r+0xf2c>
 80090a0:	eb08 0306 	add.w	r3, r8, r6
 80090a4:	2f46      	cmp	r7, #70	; 0x46
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	d111      	bne.n	80090ce <_svfprintf_r+0x45e>
 80090aa:	f898 3000 	ldrb.w	r3, [r8]
 80090ae:	2b30      	cmp	r3, #48	; 0x30
 80090b0:	d109      	bne.n	80090c6 <_svfprintf_r+0x456>
 80090b2:	2200      	movs	r2, #0
 80090b4:	2300      	movs	r3, #0
 80090b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090ba:	f7f7 fd11 	bl	8000ae0 <__aeabi_dcmpeq>
 80090be:	b910      	cbnz	r0, 80090c6 <_svfprintf_r+0x456>
 80090c0:	f1c6 0601 	rsb	r6, r6, #1
 80090c4:	9619      	str	r6, [sp, #100]	; 0x64
 80090c6:	9a03      	ldr	r2, [sp, #12]
 80090c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ca:	441a      	add	r2, r3
 80090cc:	9203      	str	r2, [sp, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	2300      	movs	r3, #0
 80090d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090d6:	f7f7 fd03 	bl	8000ae0 <__aeabi_dcmpeq>
 80090da:	b988      	cbnz	r0, 8009100 <_svfprintf_r+0x490>
 80090dc:	2230      	movs	r2, #48	; 0x30
 80090de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090e0:	9903      	ldr	r1, [sp, #12]
 80090e2:	4299      	cmp	r1, r3
 80090e4:	d90e      	bls.n	8009104 <_svfprintf_r+0x494>
 80090e6:	1c59      	adds	r1, r3, #1
 80090e8:	911d      	str	r1, [sp, #116]	; 0x74
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e7f7      	b.n	80090de <_svfprintf_r+0x46e>
 80090ee:	464e      	mov	r6, r9
 80090f0:	e7b8      	b.n	8009064 <_svfprintf_r+0x3f4>
 80090f2:	bf00      	nop
 80090f4:	7fefffff 	.word	0x7fefffff
 80090f8:	0800d248 	.word	0x0800d248
 80090fc:	0800d24c 	.word	0x0800d24c
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	931d      	str	r3, [sp, #116]	; 0x74
 8009104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009106:	2f47      	cmp	r7, #71	; 0x47
 8009108:	eba3 0308 	sub.w	r3, r3, r8
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	f040 80fa 	bne.w	8009306 <_svfprintf_r+0x696>
 8009112:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009114:	1cd9      	adds	r1, r3, #3
 8009116:	db02      	blt.n	800911e <_svfprintf_r+0x4ae>
 8009118:	4599      	cmp	r9, r3
 800911a:	f280 8120 	bge.w	800935e <_svfprintf_r+0x6ee>
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	3b02      	subs	r3, #2
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009126:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800912a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800912e:	1e53      	subs	r3, r2, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	9319      	str	r3, [sp, #100]	; 0x64
 8009134:	bfb6      	itet	lt
 8009136:	f1c2 0301 	rsblt	r3, r2, #1
 800913a:	222b      	movge	r2, #43	; 0x2b
 800913c:	222d      	movlt	r2, #45	; 0x2d
 800913e:	2b09      	cmp	r3, #9
 8009140:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8009144:	f340 80fb 	ble.w	800933e <_svfprintf_r+0x6ce>
 8009148:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800914c:	260a      	movs	r6, #10
 800914e:	fb93 f0f6 	sdiv	r0, r3, r6
 8009152:	fb06 3310 	mls	r3, r6, r0, r3
 8009156:	3330      	adds	r3, #48	; 0x30
 8009158:	2809      	cmp	r0, #9
 800915a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800915e:	f102 31ff 	add.w	r1, r2, #4294967295
 8009162:	4603      	mov	r3, r0
 8009164:	f300 80e4 	bgt.w	8009330 <_svfprintf_r+0x6c0>
 8009168:	3330      	adds	r3, #48	; 0x30
 800916a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800916e:	3a02      	subs	r2, #2
 8009170:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8009174:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8009178:	4282      	cmp	r2, r0
 800917a:	4619      	mov	r1, r3
 800917c:	f0c0 80da 	bcc.w	8009334 <_svfprintf_r+0x6c4>
 8009180:	9a03      	ldr	r2, [sp, #12]
 8009182:	ab1b      	add	r3, sp, #108	; 0x6c
 8009184:	1acb      	subs	r3, r1, r3
 8009186:	2a01      	cmp	r2, #1
 8009188:	9310      	str	r3, [sp, #64]	; 0x40
 800918a:	eb03 0902 	add.w	r9, r3, r2
 800918e:	dc02      	bgt.n	8009196 <_svfprintf_r+0x526>
 8009190:	f015 0701 	ands.w	r7, r5, #1
 8009194:	d002      	beq.n	800919c <_svfprintf_r+0x52c>
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	2700      	movs	r7, #0
 800919a:	4499      	add	r9, r3
 800919c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919e:	b113      	cbz	r3, 80091a6 <_svfprintf_r+0x536>
 80091a0:	232d      	movs	r3, #45	; 0x2d
 80091a2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80091a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091a8:	2600      	movs	r6, #0
 80091aa:	454e      	cmp	r6, r9
 80091ac:	4633      	mov	r3, r6
 80091ae:	bfb8      	it	lt
 80091b0:	464b      	movlt	r3, r9
 80091b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80091b4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80091b8:	b113      	cbz	r3, 80091c0 <_svfprintf_r+0x550>
 80091ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091bc:	3301      	adds	r3, #1
 80091be:	930b      	str	r3, [sp, #44]	; 0x2c
 80091c0:	f015 0302 	ands.w	r3, r5, #2
 80091c4:	9314      	str	r3, [sp, #80]	; 0x50
 80091c6:	bf1e      	ittt	ne
 80091c8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80091ca:	3302      	addne	r3, #2
 80091cc:	930b      	strne	r3, [sp, #44]	; 0x2c
 80091ce:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80091d2:	9315      	str	r3, [sp, #84]	; 0x54
 80091d4:	d118      	bne.n	8009208 <_svfprintf_r+0x598>
 80091d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	930c      	str	r3, [sp, #48]	; 0x30
 80091e0:	dd12      	ble.n	8009208 <_svfprintf_r+0x598>
 80091e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	4ba9      	ldr	r3, [pc, #676]	; (800948c <_svfprintf_r+0x81c>)
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	f300 81d5 	bgt.w	8009598 <_svfprintf_r+0x928>
 80091ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f6:	4413      	add	r3, r2
 80091f8:	9321      	str	r3, [sp, #132]	; 0x84
 80091fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80091fc:	3301      	adds	r3, #1
 80091fe:	2b07      	cmp	r3, #7
 8009200:	9320      	str	r3, [sp, #128]	; 0x80
 8009202:	f300 81e2 	bgt.w	80095ca <_svfprintf_r+0x95a>
 8009206:	3408      	adds	r4, #8
 8009208:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800920c:	b173      	cbz	r3, 800922c <_svfprintf_r+0x5bc>
 800920e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	2301      	movs	r3, #1
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800921a:	3301      	adds	r3, #1
 800921c:	9321      	str	r3, [sp, #132]	; 0x84
 800921e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009220:	3301      	adds	r3, #1
 8009222:	2b07      	cmp	r3, #7
 8009224:	9320      	str	r3, [sp, #128]	; 0x80
 8009226:	f300 81da 	bgt.w	80095de <_svfprintf_r+0x96e>
 800922a:	3408      	adds	r4, #8
 800922c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800922e:	b16b      	cbz	r3, 800924c <_svfprintf_r+0x5dc>
 8009230:	ab18      	add	r3, sp, #96	; 0x60
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	2302      	movs	r3, #2
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800923a:	3302      	adds	r3, #2
 800923c:	9321      	str	r3, [sp, #132]	; 0x84
 800923e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009240:	3301      	adds	r3, #1
 8009242:	2b07      	cmp	r3, #7
 8009244:	9320      	str	r3, [sp, #128]	; 0x80
 8009246:	f300 81d4 	bgt.w	80095f2 <_svfprintf_r+0x982>
 800924a:	3408      	adds	r4, #8
 800924c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800924e:	2b80      	cmp	r3, #128	; 0x80
 8009250:	d114      	bne.n	800927c <_svfprintf_r+0x60c>
 8009252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	dd0f      	ble.n	800927c <_svfprintf_r+0x60c>
 800925c:	4a8c      	ldr	r2, [pc, #560]	; (8009490 <_svfprintf_r+0x820>)
 800925e:	6022      	str	r2, [r4, #0]
 8009260:	2b10      	cmp	r3, #16
 8009262:	f300 81d0 	bgt.w	8009606 <_svfprintf_r+0x996>
 8009266:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009268:	6063      	str	r3, [r4, #4]
 800926a:	4413      	add	r3, r2
 800926c:	9321      	str	r3, [sp, #132]	; 0x84
 800926e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009270:	3301      	adds	r3, #1
 8009272:	2b07      	cmp	r3, #7
 8009274:	9320      	str	r3, [sp, #128]	; 0x80
 8009276:	f300 81df 	bgt.w	8009638 <_svfprintf_r+0x9c8>
 800927a:	3408      	adds	r4, #8
 800927c:	eba6 0609 	sub.w	r6, r6, r9
 8009280:	2e00      	cmp	r6, #0
 8009282:	dd0f      	ble.n	80092a4 <_svfprintf_r+0x634>
 8009284:	4b82      	ldr	r3, [pc, #520]	; (8009490 <_svfprintf_r+0x820>)
 8009286:	6023      	str	r3, [r4, #0]
 8009288:	2e10      	cmp	r6, #16
 800928a:	f300 81df 	bgt.w	800964c <_svfprintf_r+0x9dc>
 800928e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009290:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009292:	6066      	str	r6, [r4, #4]
 8009294:	3301      	adds	r3, #1
 8009296:	4406      	add	r6, r0
 8009298:	2b07      	cmp	r3, #7
 800929a:	9621      	str	r6, [sp, #132]	; 0x84
 800929c:	9320      	str	r3, [sp, #128]	; 0x80
 800929e:	f300 81ec 	bgt.w	800967a <_svfprintf_r+0xa0a>
 80092a2:	3408      	adds	r4, #8
 80092a4:	05eb      	lsls	r3, r5, #23
 80092a6:	f100 81f2 	bmi.w	800968e <_svfprintf_r+0xa1e>
 80092aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ac:	e884 0300 	stmia.w	r4, {r8, r9}
 80092b0:	444b      	add	r3, r9
 80092b2:	9321      	str	r3, [sp, #132]	; 0x84
 80092b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092b6:	3301      	adds	r3, #1
 80092b8:	2b07      	cmp	r3, #7
 80092ba:	9320      	str	r3, [sp, #128]	; 0x80
 80092bc:	f340 8419 	ble.w	8009af2 <_svfprintf_r+0xe82>
 80092c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80092c2:	4651      	mov	r1, sl
 80092c4:	4658      	mov	r0, fp
 80092c6:	f003 fb17 	bl	800c8f8 <__ssprint_r>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f040 8431 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80092d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80092d2:	076b      	lsls	r3, r5, #29
 80092d4:	f100 8410 	bmi.w	8009af8 <_svfprintf_r+0xe88>
 80092d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092de:	428a      	cmp	r2, r1
 80092e0:	bfac      	ite	ge
 80092e2:	189b      	addge	r3, r3, r2
 80092e4:	185b      	addlt	r3, r3, r1
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ea:	b13b      	cbz	r3, 80092fc <_svfprintf_r+0x68c>
 80092ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80092ee:	4651      	mov	r1, sl
 80092f0:	4658      	mov	r0, fp
 80092f2:	f003 fb01 	bl	800c8f8 <__ssprint_r>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 841b 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80092fc:	2300      	movs	r3, #0
 80092fe:	9320      	str	r3, [sp, #128]	; 0x80
 8009300:	9f04      	ldr	r7, [sp, #16]
 8009302:	ac2c      	add	r4, sp, #176	; 0xb0
 8009304:	e4ee      	b.n	8008ce4 <_svfprintf_r+0x74>
 8009306:	9b02      	ldr	r3, [sp, #8]
 8009308:	2b65      	cmp	r3, #101	; 0x65
 800930a:	f77f af0b 	ble.w	8009124 <_svfprintf_r+0x4b4>
 800930e:	9b02      	ldr	r3, [sp, #8]
 8009310:	2b66      	cmp	r3, #102	; 0x66
 8009312:	d124      	bne.n	800935e <_svfprintf_r+0x6ee>
 8009314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd19      	ble.n	800934e <_svfprintf_r+0x6de>
 800931a:	f1b9 0f00 	cmp.w	r9, #0
 800931e:	d101      	bne.n	8009324 <_svfprintf_r+0x6b4>
 8009320:	07ea      	lsls	r2, r5, #31
 8009322:	d502      	bpl.n	800932a <_svfprintf_r+0x6ba>
 8009324:	9a08      	ldr	r2, [sp, #32]
 8009326:	4413      	add	r3, r2
 8009328:	444b      	add	r3, r9
 800932a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800932c:	4699      	mov	r9, r3
 800932e:	e735      	b.n	800919c <_svfprintf_r+0x52c>
 8009330:	460a      	mov	r2, r1
 8009332:	e70c      	b.n	800914e <_svfprintf_r+0x4de>
 8009334:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009338:	f803 1b01 	strb.w	r1, [r3], #1
 800933c:	e71c      	b.n	8009178 <_svfprintf_r+0x508>
 800933e:	2230      	movs	r2, #48	; 0x30
 8009340:	4413      	add	r3, r2
 8009342:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8009346:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800934a:	a91c      	add	r1, sp, #112	; 0x70
 800934c:	e718      	b.n	8009180 <_svfprintf_r+0x510>
 800934e:	f1b9 0f00 	cmp.w	r9, #0
 8009352:	d101      	bne.n	8009358 <_svfprintf_r+0x6e8>
 8009354:	07eb      	lsls	r3, r5, #31
 8009356:	d515      	bpl.n	8009384 <_svfprintf_r+0x714>
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	3301      	adds	r3, #1
 800935c:	e7e4      	b.n	8009328 <_svfprintf_r+0x6b8>
 800935e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	429a      	cmp	r2, r3
 8009364:	db06      	blt.n	8009374 <_svfprintf_r+0x704>
 8009366:	07ef      	lsls	r7, r5, #31
 8009368:	d50e      	bpl.n	8009388 <_svfprintf_r+0x718>
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	4413      	add	r3, r2
 800936e:	2267      	movs	r2, #103	; 0x67
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	e7da      	b.n	800932a <_svfprintf_r+0x6ba>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	9908      	ldr	r1, [sp, #32]
 8009378:	2a00      	cmp	r2, #0
 800937a:	440b      	add	r3, r1
 800937c:	dcf7      	bgt.n	800936e <_svfprintf_r+0x6fe>
 800937e:	f1c2 0201 	rsb	r2, r2, #1
 8009382:	e7f3      	b.n	800936c <_svfprintf_r+0x6fc>
 8009384:	2301      	movs	r3, #1
 8009386:	e7d0      	b.n	800932a <_svfprintf_r+0x6ba>
 8009388:	4613      	mov	r3, r2
 800938a:	e7f0      	b.n	800936e <_svfprintf_r+0x6fe>
 800938c:	b10b      	cbz	r3, 8009392 <_svfprintf_r+0x722>
 800938e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009392:	f015 0f20 	tst.w	r5, #32
 8009396:	f107 0304 	add.w	r3, r7, #4
 800939a:	d008      	beq.n	80093ae <_svfprintf_r+0x73e>
 800939c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	17ce      	asrs	r6, r1, #31
 80093a2:	4608      	mov	r0, r1
 80093a4:	4631      	mov	r1, r6
 80093a6:	e9c2 0100 	strd	r0, r1, [r2]
 80093aa:	461f      	mov	r7, r3
 80093ac:	e49a      	b.n	8008ce4 <_svfprintf_r+0x74>
 80093ae:	06ee      	lsls	r6, r5, #27
 80093b0:	d503      	bpl.n	80093ba <_svfprintf_r+0x74a>
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093b6:	6011      	str	r1, [r2, #0]
 80093b8:	e7f7      	b.n	80093aa <_svfprintf_r+0x73a>
 80093ba:	0668      	lsls	r0, r5, #25
 80093bc:	d5f9      	bpl.n	80093b2 <_svfprintf_r+0x742>
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80093c4:	8011      	strh	r1, [r2, #0]
 80093c6:	e7f0      	b.n	80093aa <_svfprintf_r+0x73a>
 80093c8:	f045 0510 	orr.w	r5, r5, #16
 80093cc:	f015 0320 	ands.w	r3, r5, #32
 80093d0:	d022      	beq.n	8009418 <_svfprintf_r+0x7a8>
 80093d2:	3707      	adds	r7, #7
 80093d4:	f027 0707 	bic.w	r7, r7, #7
 80093d8:	f107 0308 	add.w	r3, r7, #8
 80093dc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	2200      	movs	r2, #0
 80093e6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80093ea:	f1b9 3fff 	cmp.w	r9, #4294967295
 80093ee:	f000 83db 	beq.w	8009ba8 <_svfprintf_r+0xf38>
 80093f2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80093f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80093f8:	ea56 0207 	orrs.w	r2, r6, r7
 80093fc:	f040 83d9 	bne.w	8009bb2 <_svfprintf_r+0xf42>
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	f000 80aa 	beq.w	800955c <_svfprintf_r+0x8ec>
 8009408:	2b01      	cmp	r3, #1
 800940a:	d076      	beq.n	80094fa <_svfprintf_r+0x88a>
 800940c:	2b02      	cmp	r3, #2
 800940e:	f000 8091 	beq.w	8009534 <_svfprintf_r+0x8c4>
 8009412:	2600      	movs	r6, #0
 8009414:	2700      	movs	r7, #0
 8009416:	e3d2      	b.n	8009bbe <_svfprintf_r+0xf4e>
 8009418:	1d3a      	adds	r2, r7, #4
 800941a:	f015 0110 	ands.w	r1, r5, #16
 800941e:	9204      	str	r2, [sp, #16]
 8009420:	d002      	beq.n	8009428 <_svfprintf_r+0x7b8>
 8009422:	683e      	ldr	r6, [r7, #0]
 8009424:	2700      	movs	r7, #0
 8009426:	e7dd      	b.n	80093e4 <_svfprintf_r+0x774>
 8009428:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800942c:	d0f9      	beq.n	8009422 <_svfprintf_r+0x7b2>
 800942e:	883e      	ldrh	r6, [r7, #0]
 8009430:	2700      	movs	r7, #0
 8009432:	e7d6      	b.n	80093e2 <_svfprintf_r+0x772>
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	2330      	movs	r3, #48	; 0x30
 800943a:	2278      	movs	r2, #120	; 0x78
 800943c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8009440:	4b14      	ldr	r3, [pc, #80]	; (8009494 <_svfprintf_r+0x824>)
 8009442:	683e      	ldr	r6, [r7, #0]
 8009444:	9311      	str	r3, [sp, #68]	; 0x44
 8009446:	2700      	movs	r7, #0
 8009448:	f045 0502 	orr.w	r5, r5, #2
 800944c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8009450:	2302      	movs	r3, #2
 8009452:	9202      	str	r2, [sp, #8]
 8009454:	e7c6      	b.n	80093e4 <_svfprintf_r+0x774>
 8009456:	1d3b      	adds	r3, r7, #4
 8009458:	2600      	movs	r6, #0
 800945a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	f8d7 8000 	ldr.w	r8, [r7]
 8009464:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009468:	d00a      	beq.n	8009480 <_svfprintf_r+0x810>
 800946a:	464a      	mov	r2, r9
 800946c:	4631      	mov	r1, r6
 800946e:	4640      	mov	r0, r8
 8009470:	f7f6 fec6 	bl	8000200 <memchr>
 8009474:	2800      	cmp	r0, #0
 8009476:	f000 808d 	beq.w	8009594 <_svfprintf_r+0x924>
 800947a:	eba0 0908 	sub.w	r9, r0, r8
 800947e:	e5cb      	b.n	8009018 <_svfprintf_r+0x3a8>
 8009480:	4640      	mov	r0, r8
 8009482:	f7f6 feaf 	bl	80001e4 <strlen>
 8009486:	4681      	mov	r9, r0
 8009488:	e5c6      	b.n	8009018 <_svfprintf_r+0x3a8>
 800948a:	bf00      	nop
 800948c:	0800d27c 	.word	0x0800d27c
 8009490:	0800d28c 	.word	0x0800d28c
 8009494:	0800d269 	.word	0x0800d269
 8009498:	f045 0510 	orr.w	r5, r5, #16
 800949c:	06a9      	lsls	r1, r5, #26
 800949e:	d509      	bpl.n	80094b4 <_svfprintf_r+0x844>
 80094a0:	3707      	adds	r7, #7
 80094a2:	f027 0707 	bic.w	r7, r7, #7
 80094a6:	f107 0308 	add.w	r3, r7, #8
 80094aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	2301      	movs	r3, #1
 80094b2:	e797      	b.n	80093e4 <_svfprintf_r+0x774>
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	f015 0f10 	tst.w	r5, #16
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	d001      	beq.n	80094c2 <_svfprintf_r+0x852>
 80094be:	683e      	ldr	r6, [r7, #0]
 80094c0:	e002      	b.n	80094c8 <_svfprintf_r+0x858>
 80094c2:	066a      	lsls	r2, r5, #25
 80094c4:	d5fb      	bpl.n	80094be <_svfprintf_r+0x84e>
 80094c6:	883e      	ldrh	r6, [r7, #0]
 80094c8:	2700      	movs	r7, #0
 80094ca:	e7f1      	b.n	80094b0 <_svfprintf_r+0x840>
 80094cc:	b10b      	cbz	r3, 80094d2 <_svfprintf_r+0x862>
 80094ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80094d2:	4ba3      	ldr	r3, [pc, #652]	; (8009760 <_svfprintf_r+0xaf0>)
 80094d4:	e4c2      	b.n	8008e5c <_svfprintf_r+0x1ec>
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	f015 0f10 	tst.w	r5, #16
 80094dc:	9304      	str	r3, [sp, #16]
 80094de:	d001      	beq.n	80094e4 <_svfprintf_r+0x874>
 80094e0:	683e      	ldr	r6, [r7, #0]
 80094e2:	e002      	b.n	80094ea <_svfprintf_r+0x87a>
 80094e4:	066e      	lsls	r6, r5, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_svfprintf_r+0x870>
 80094e8:	883e      	ldrh	r6, [r7, #0]
 80094ea:	2700      	movs	r7, #0
 80094ec:	e4c2      	b.n	8008e74 <_svfprintf_r+0x204>
 80094ee:	4643      	mov	r3, r8
 80094f0:	e366      	b.n	8009bc0 <_svfprintf_r+0xf50>
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	bf08      	it	eq
 80094f6:	2e0a      	cmpeq	r6, #10
 80094f8:	d205      	bcs.n	8009506 <_svfprintf_r+0x896>
 80094fa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80094fe:	3630      	adds	r6, #48	; 0x30
 8009500:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8009504:	e377      	b.n	8009bf6 <_svfprintf_r+0xf86>
 8009506:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800950a:	4630      	mov	r0, r6
 800950c:	4639      	mov	r1, r7
 800950e:	220a      	movs	r2, #10
 8009510:	2300      	movs	r3, #0
 8009512:	f7f7 fb75 	bl	8000c00 <__aeabi_uldivmod>
 8009516:	3230      	adds	r2, #48	; 0x30
 8009518:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800951c:	2300      	movs	r3, #0
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	220a      	movs	r2, #10
 8009524:	f7f7 fb6c 	bl	8000c00 <__aeabi_uldivmod>
 8009528:	4606      	mov	r6, r0
 800952a:	460f      	mov	r7, r1
 800952c:	ea56 0307 	orrs.w	r3, r6, r7
 8009530:	d1eb      	bne.n	800950a <_svfprintf_r+0x89a>
 8009532:	e360      	b.n	8009bf6 <_svfprintf_r+0xf86>
 8009534:	2600      	movs	r6, #0
 8009536:	2700      	movs	r7, #0
 8009538:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800953c:	f006 030f 	and.w	r3, r6, #15
 8009540:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009542:	5cd3      	ldrb	r3, [r2, r3]
 8009544:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009548:	0933      	lsrs	r3, r6, #4
 800954a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800954e:	093a      	lsrs	r2, r7, #4
 8009550:	461e      	mov	r6, r3
 8009552:	4617      	mov	r7, r2
 8009554:	ea56 0307 	orrs.w	r3, r6, r7
 8009558:	d1f0      	bne.n	800953c <_svfprintf_r+0x8cc>
 800955a:	e34c      	b.n	8009bf6 <_svfprintf_r+0xf86>
 800955c:	b93b      	cbnz	r3, 800956e <_svfprintf_r+0x8fe>
 800955e:	07ea      	lsls	r2, r5, #31
 8009560:	d505      	bpl.n	800956e <_svfprintf_r+0x8fe>
 8009562:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8009566:	2330      	movs	r3, #48	; 0x30
 8009568:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800956c:	e343      	b.n	8009bf6 <_svfprintf_r+0xf86>
 800956e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8009572:	e340      	b.n	8009bf6 <_svfprintf_r+0xf86>
 8009574:	b10b      	cbz	r3, 800957a <_svfprintf_r+0x90a>
 8009576:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 82f7 	beq.w	8009b70 <_svfprintf_r+0xf00>
 8009582:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009586:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800958a:	2600      	movs	r6, #0
 800958c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009590:	9704      	str	r7, [sp, #16]
 8009592:	e4e8      	b.n	8008f66 <_svfprintf_r+0x2f6>
 8009594:	4606      	mov	r6, r0
 8009596:	e53f      	b.n	8009018 <_svfprintf_r+0x3a8>
 8009598:	2310      	movs	r3, #16
 800959a:	6063      	str	r3, [r4, #4]
 800959c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800959e:	3310      	adds	r3, #16
 80095a0:	9321      	str	r3, [sp, #132]	; 0x84
 80095a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80095a4:	3301      	adds	r3, #1
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	9320      	str	r3, [sp, #128]	; 0x80
 80095aa:	dc04      	bgt.n	80095b6 <_svfprintf_r+0x946>
 80095ac:	3408      	adds	r4, #8
 80095ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b0:	3b10      	subs	r3, #16
 80095b2:	930c      	str	r3, [sp, #48]	; 0x30
 80095b4:	e615      	b.n	80091e2 <_svfprintf_r+0x572>
 80095b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80095b8:	4651      	mov	r1, sl
 80095ba:	4658      	mov	r0, fp
 80095bc:	f003 f99c 	bl	800c8f8 <__ssprint_r>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f040 82b6 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80095c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80095c8:	e7f1      	b.n	80095ae <_svfprintf_r+0x93e>
 80095ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80095cc:	4651      	mov	r1, sl
 80095ce:	4658      	mov	r0, fp
 80095d0:	f003 f992 	bl	800c8f8 <__ssprint_r>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f040 82ac 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80095da:	ac2c      	add	r4, sp, #176	; 0xb0
 80095dc:	e614      	b.n	8009208 <_svfprintf_r+0x598>
 80095de:	aa1f      	add	r2, sp, #124	; 0x7c
 80095e0:	4651      	mov	r1, sl
 80095e2:	4658      	mov	r0, fp
 80095e4:	f003 f988 	bl	800c8f8 <__ssprint_r>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f040 82a2 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80095ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80095f0:	e61c      	b.n	800922c <_svfprintf_r+0x5bc>
 80095f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80095f4:	4651      	mov	r1, sl
 80095f6:	4658      	mov	r0, fp
 80095f8:	f003 f97e 	bl	800c8f8 <__ssprint_r>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f040 8298 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009602:	ac2c      	add	r4, sp, #176	; 0xb0
 8009604:	e622      	b.n	800924c <_svfprintf_r+0x5dc>
 8009606:	2210      	movs	r2, #16
 8009608:	6062      	str	r2, [r4, #4]
 800960a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800960c:	3210      	adds	r2, #16
 800960e:	9221      	str	r2, [sp, #132]	; 0x84
 8009610:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009612:	3201      	adds	r2, #1
 8009614:	2a07      	cmp	r2, #7
 8009616:	9220      	str	r2, [sp, #128]	; 0x80
 8009618:	dc02      	bgt.n	8009620 <_svfprintf_r+0x9b0>
 800961a:	3408      	adds	r4, #8
 800961c:	3b10      	subs	r3, #16
 800961e:	e61d      	b.n	800925c <_svfprintf_r+0x5ec>
 8009620:	aa1f      	add	r2, sp, #124	; 0x7c
 8009622:	4651      	mov	r1, sl
 8009624:	4658      	mov	r0, fp
 8009626:	930c      	str	r3, [sp, #48]	; 0x30
 8009628:	f003 f966 	bl	800c8f8 <__ssprint_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	f040 8280 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009632:	ac2c      	add	r4, sp, #176	; 0xb0
 8009634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009636:	e7f1      	b.n	800961c <_svfprintf_r+0x9ac>
 8009638:	aa1f      	add	r2, sp, #124	; 0x7c
 800963a:	4651      	mov	r1, sl
 800963c:	4658      	mov	r0, fp
 800963e:	f003 f95b 	bl	800c8f8 <__ssprint_r>
 8009642:	2800      	cmp	r0, #0
 8009644:	f040 8275 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009648:	ac2c      	add	r4, sp, #176	; 0xb0
 800964a:	e617      	b.n	800927c <_svfprintf_r+0x60c>
 800964c:	2310      	movs	r3, #16
 800964e:	6063      	str	r3, [r4, #4]
 8009650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009652:	3310      	adds	r3, #16
 8009654:	9321      	str	r3, [sp, #132]	; 0x84
 8009656:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009658:	3301      	adds	r3, #1
 800965a:	2b07      	cmp	r3, #7
 800965c:	9320      	str	r3, [sp, #128]	; 0x80
 800965e:	dc02      	bgt.n	8009666 <_svfprintf_r+0x9f6>
 8009660:	3408      	adds	r4, #8
 8009662:	3e10      	subs	r6, #16
 8009664:	e60e      	b.n	8009284 <_svfprintf_r+0x614>
 8009666:	aa1f      	add	r2, sp, #124	; 0x7c
 8009668:	4651      	mov	r1, sl
 800966a:	4658      	mov	r0, fp
 800966c:	f003 f944 	bl	800c8f8 <__ssprint_r>
 8009670:	2800      	cmp	r0, #0
 8009672:	f040 825e 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009676:	ac2c      	add	r4, sp, #176	; 0xb0
 8009678:	e7f3      	b.n	8009662 <_svfprintf_r+0x9f2>
 800967a:	aa1f      	add	r2, sp, #124	; 0x7c
 800967c:	4651      	mov	r1, sl
 800967e:	4658      	mov	r0, fp
 8009680:	f003 f93a 	bl	800c8f8 <__ssprint_r>
 8009684:	2800      	cmp	r0, #0
 8009686:	f040 8254 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800968a:	ac2c      	add	r4, sp, #176	; 0xb0
 800968c:	e60a      	b.n	80092a4 <_svfprintf_r+0x634>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	2b65      	cmp	r3, #101	; 0x65
 8009692:	f340 81a9 	ble.w	80099e8 <_svfprintf_r+0xd78>
 8009696:	2200      	movs	r2, #0
 8009698:	2300      	movs	r3, #0
 800969a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800969e:	f7f7 fa1f 	bl	8000ae0 <__aeabi_dcmpeq>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d062      	beq.n	800976c <_svfprintf_r+0xafc>
 80096a6:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <_svfprintf_r+0xaf4>)
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	2301      	movs	r3, #1
 80096ac:	6063      	str	r3, [r4, #4]
 80096ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b0:	3301      	adds	r3, #1
 80096b2:	9321      	str	r3, [sp, #132]	; 0x84
 80096b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80096b6:	3301      	adds	r3, #1
 80096b8:	2b07      	cmp	r3, #7
 80096ba:	9320      	str	r3, [sp, #128]	; 0x80
 80096bc:	dc25      	bgt.n	800970a <_svfprintf_r+0xa9a>
 80096be:	3408      	adds	r4, #8
 80096c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096c2:	9a03      	ldr	r2, [sp, #12]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	db02      	blt.n	80096ce <_svfprintf_r+0xa5e>
 80096c8:	07ee      	lsls	r6, r5, #31
 80096ca:	f57f ae02 	bpl.w	80092d2 <_svfprintf_r+0x662>
 80096ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	9b08      	ldr	r3, [sp, #32]
 80096d4:	6063      	str	r3, [r4, #4]
 80096d6:	9a08      	ldr	r2, [sp, #32]
 80096d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096da:	4413      	add	r3, r2
 80096dc:	9321      	str	r3, [sp, #132]	; 0x84
 80096de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80096e0:	3301      	adds	r3, #1
 80096e2:	2b07      	cmp	r3, #7
 80096e4:	9320      	str	r3, [sp, #128]	; 0x80
 80096e6:	dc1a      	bgt.n	800971e <_svfprintf_r+0xaae>
 80096e8:	3408      	adds	r4, #8
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	1e5e      	subs	r6, r3, #1
 80096ee:	2e00      	cmp	r6, #0
 80096f0:	f77f adef 	ble.w	80092d2 <_svfprintf_r+0x662>
 80096f4:	4f1c      	ldr	r7, [pc, #112]	; (8009768 <_svfprintf_r+0xaf8>)
 80096f6:	f04f 0810 	mov.w	r8, #16
 80096fa:	2e10      	cmp	r6, #16
 80096fc:	6027      	str	r7, [r4, #0]
 80096fe:	dc18      	bgt.n	8009732 <_svfprintf_r+0xac2>
 8009700:	6066      	str	r6, [r4, #4]
 8009702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009704:	441e      	add	r6, r3
 8009706:	9621      	str	r6, [sp, #132]	; 0x84
 8009708:	e5d4      	b.n	80092b4 <_svfprintf_r+0x644>
 800970a:	aa1f      	add	r2, sp, #124	; 0x7c
 800970c:	4651      	mov	r1, sl
 800970e:	4658      	mov	r0, fp
 8009710:	f003 f8f2 	bl	800c8f8 <__ssprint_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	f040 820c 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800971a:	ac2c      	add	r4, sp, #176	; 0xb0
 800971c:	e7d0      	b.n	80096c0 <_svfprintf_r+0xa50>
 800971e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009720:	4651      	mov	r1, sl
 8009722:	4658      	mov	r0, fp
 8009724:	f003 f8e8 	bl	800c8f8 <__ssprint_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	f040 8202 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800972e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009730:	e7db      	b.n	80096ea <_svfprintf_r+0xa7a>
 8009732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009734:	f8c4 8004 	str.w	r8, [r4, #4]
 8009738:	3310      	adds	r3, #16
 800973a:	9321      	str	r3, [sp, #132]	; 0x84
 800973c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800973e:	3301      	adds	r3, #1
 8009740:	2b07      	cmp	r3, #7
 8009742:	9320      	str	r3, [sp, #128]	; 0x80
 8009744:	dc02      	bgt.n	800974c <_svfprintf_r+0xadc>
 8009746:	3408      	adds	r4, #8
 8009748:	3e10      	subs	r6, #16
 800974a:	e7d6      	b.n	80096fa <_svfprintf_r+0xa8a>
 800974c:	aa1f      	add	r2, sp, #124	; 0x7c
 800974e:	4651      	mov	r1, sl
 8009750:	4658      	mov	r0, fp
 8009752:	f003 f8d1 	bl	800c8f8 <__ssprint_r>
 8009756:	2800      	cmp	r0, #0
 8009758:	f040 81eb 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800975c:	ac2c      	add	r4, sp, #176	; 0xb0
 800975e:	e7f3      	b.n	8009748 <_svfprintf_r+0xad8>
 8009760:	0800d269 	.word	0x0800d269
 8009764:	0800d27a 	.word	0x0800d27a
 8009768:	0800d28c 	.word	0x0800d28c
 800976c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800976e:	2b00      	cmp	r3, #0
 8009770:	dc7a      	bgt.n	8009868 <_svfprintf_r+0xbf8>
 8009772:	4b9b      	ldr	r3, [pc, #620]	; (80099e0 <_svfprintf_r+0xd70>)
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	2301      	movs	r3, #1
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800977c:	3301      	adds	r3, #1
 800977e:	9321      	str	r3, [sp, #132]	; 0x84
 8009780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009782:	3301      	adds	r3, #1
 8009784:	2b07      	cmp	r3, #7
 8009786:	9320      	str	r3, [sp, #128]	; 0x80
 8009788:	dc44      	bgt.n	8009814 <_svfprintf_r+0xba4>
 800978a:	3408      	adds	r4, #8
 800978c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800978e:	b923      	cbnz	r3, 800979a <_svfprintf_r+0xb2a>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	b913      	cbnz	r3, 800979a <_svfprintf_r+0xb2a>
 8009794:	07e8      	lsls	r0, r5, #31
 8009796:	f57f ad9c 	bpl.w	80092d2 <_svfprintf_r+0x662>
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	9b08      	ldr	r3, [sp, #32]
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	9a08      	ldr	r2, [sp, #32]
 80097a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097a6:	4413      	add	r3, r2
 80097a8:	9321      	str	r3, [sp, #132]	; 0x84
 80097aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80097ac:	3301      	adds	r3, #1
 80097ae:	2b07      	cmp	r3, #7
 80097b0:	9320      	str	r3, [sp, #128]	; 0x80
 80097b2:	dc39      	bgt.n	8009828 <_svfprintf_r+0xbb8>
 80097b4:	f104 0308 	add.w	r3, r4, #8
 80097b8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	da19      	bge.n	80097f2 <_svfprintf_r+0xb82>
 80097be:	4f89      	ldr	r7, [pc, #548]	; (80099e4 <_svfprintf_r+0xd74>)
 80097c0:	4276      	negs	r6, r6
 80097c2:	2410      	movs	r4, #16
 80097c4:	2e10      	cmp	r6, #16
 80097c6:	601f      	str	r7, [r3, #0]
 80097c8:	dc38      	bgt.n	800983c <_svfprintf_r+0xbcc>
 80097ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097cc:	605e      	str	r6, [r3, #4]
 80097ce:	4416      	add	r6, r2
 80097d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097d2:	9621      	str	r6, [sp, #132]	; 0x84
 80097d4:	3201      	adds	r2, #1
 80097d6:	2a07      	cmp	r2, #7
 80097d8:	f103 0308 	add.w	r3, r3, #8
 80097dc:	9220      	str	r2, [sp, #128]	; 0x80
 80097de:	dd08      	ble.n	80097f2 <_svfprintf_r+0xb82>
 80097e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80097e2:	4651      	mov	r1, sl
 80097e4:	4658      	mov	r0, fp
 80097e6:	f003 f887 	bl	800c8f8 <__ssprint_r>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f040 81a1 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80097f0:	ab2c      	add	r3, sp, #176	; 0xb0
 80097f2:	9a03      	ldr	r2, [sp, #12]
 80097f4:	605a      	str	r2, [r3, #4]
 80097f6:	9903      	ldr	r1, [sp, #12]
 80097f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097fa:	f8c3 8000 	str.w	r8, [r3]
 80097fe:	440a      	add	r2, r1
 8009800:	9221      	str	r2, [sp, #132]	; 0x84
 8009802:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009804:	3201      	adds	r2, #1
 8009806:	2a07      	cmp	r2, #7
 8009808:	9220      	str	r2, [sp, #128]	; 0x80
 800980a:	f73f ad59 	bgt.w	80092c0 <_svfprintf_r+0x650>
 800980e:	f103 0408 	add.w	r4, r3, #8
 8009812:	e55e      	b.n	80092d2 <_svfprintf_r+0x662>
 8009814:	aa1f      	add	r2, sp, #124	; 0x7c
 8009816:	4651      	mov	r1, sl
 8009818:	4658      	mov	r0, fp
 800981a:	f003 f86d 	bl	800c8f8 <__ssprint_r>
 800981e:	2800      	cmp	r0, #0
 8009820:	f040 8187 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009824:	ac2c      	add	r4, sp, #176	; 0xb0
 8009826:	e7b1      	b.n	800978c <_svfprintf_r+0xb1c>
 8009828:	aa1f      	add	r2, sp, #124	; 0x7c
 800982a:	4651      	mov	r1, sl
 800982c:	4658      	mov	r0, fp
 800982e:	f003 f863 	bl	800c8f8 <__ssprint_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	f040 817d 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009838:	ab2c      	add	r3, sp, #176	; 0xb0
 800983a:	e7bd      	b.n	80097b8 <_svfprintf_r+0xb48>
 800983c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800983e:	605c      	str	r4, [r3, #4]
 8009840:	3210      	adds	r2, #16
 8009842:	9221      	str	r2, [sp, #132]	; 0x84
 8009844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009846:	3201      	adds	r2, #1
 8009848:	2a07      	cmp	r2, #7
 800984a:	9220      	str	r2, [sp, #128]	; 0x80
 800984c:	dc02      	bgt.n	8009854 <_svfprintf_r+0xbe4>
 800984e:	3308      	adds	r3, #8
 8009850:	3e10      	subs	r6, #16
 8009852:	e7b7      	b.n	80097c4 <_svfprintf_r+0xb54>
 8009854:	aa1f      	add	r2, sp, #124	; 0x7c
 8009856:	4651      	mov	r1, sl
 8009858:	4658      	mov	r0, fp
 800985a:	f003 f84d 	bl	800c8f8 <__ssprint_r>
 800985e:	2800      	cmp	r0, #0
 8009860:	f040 8167 	bne.w	8009b32 <_svfprintf_r+0xec2>
 8009864:	ab2c      	add	r3, sp, #176	; 0xb0
 8009866:	e7f3      	b.n	8009850 <_svfprintf_r+0xbe0>
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	42bb      	cmp	r3, r7
 800986c:	bfa8      	it	ge
 800986e:	463b      	movge	r3, r7
 8009870:	2b00      	cmp	r3, #0
 8009872:	461e      	mov	r6, r3
 8009874:	dd0b      	ble.n	800988e <_svfprintf_r+0xc1e>
 8009876:	6063      	str	r3, [r4, #4]
 8009878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987a:	f8c4 8000 	str.w	r8, [r4]
 800987e:	4433      	add	r3, r6
 8009880:	9321      	str	r3, [sp, #132]	; 0x84
 8009882:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009884:	3301      	adds	r3, #1
 8009886:	2b07      	cmp	r3, #7
 8009888:	9320      	str	r3, [sp, #128]	; 0x80
 800988a:	dc5f      	bgt.n	800994c <_svfprintf_r+0xcdc>
 800988c:	3408      	adds	r4, #8
 800988e:	2e00      	cmp	r6, #0
 8009890:	bfac      	ite	ge
 8009892:	1bbe      	subge	r6, r7, r6
 8009894:	463e      	movlt	r6, r7
 8009896:	2e00      	cmp	r6, #0
 8009898:	dd0f      	ble.n	80098ba <_svfprintf_r+0xc4a>
 800989a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80099e4 <_svfprintf_r+0xd74>
 800989e:	f8c4 9000 	str.w	r9, [r4]
 80098a2:	2e10      	cmp	r6, #16
 80098a4:	dc5c      	bgt.n	8009960 <_svfprintf_r+0xcf0>
 80098a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a8:	6066      	str	r6, [r4, #4]
 80098aa:	441e      	add	r6, r3
 80098ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098ae:	9621      	str	r6, [sp, #132]	; 0x84
 80098b0:	3301      	adds	r3, #1
 80098b2:	2b07      	cmp	r3, #7
 80098b4:	9320      	str	r3, [sp, #128]	; 0x80
 80098b6:	dc6a      	bgt.n	800998e <_svfprintf_r+0xd1e>
 80098b8:	3408      	adds	r4, #8
 80098ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098bc:	9a03      	ldr	r2, [sp, #12]
 80098be:	4293      	cmp	r3, r2
 80098c0:	db01      	blt.n	80098c6 <_svfprintf_r+0xc56>
 80098c2:	07e9      	lsls	r1, r5, #31
 80098c4:	d50d      	bpl.n	80098e2 <_svfprintf_r+0xc72>
 80098c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	9a08      	ldr	r2, [sp, #32]
 80098d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d2:	4413      	add	r3, r2
 80098d4:	9321      	str	r3, [sp, #132]	; 0x84
 80098d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098d8:	3301      	adds	r3, #1
 80098da:	2b07      	cmp	r3, #7
 80098dc:	9320      	str	r3, [sp, #128]	; 0x80
 80098de:	dc60      	bgt.n	80099a2 <_svfprintf_r+0xd32>
 80098e0:	3408      	adds	r4, #8
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	9a03      	ldr	r2, [sp, #12]
 80098e6:	1bde      	subs	r6, r3, r7
 80098e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	429e      	cmp	r6, r3
 80098ee:	bfa8      	it	ge
 80098f0:	461e      	movge	r6, r3
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	dd0b      	ble.n	800990e <_svfprintf_r+0xc9e>
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	6066      	str	r6, [r4, #4]
 80098fa:	4433      	add	r3, r6
 80098fc:	9321      	str	r3, [sp, #132]	; 0x84
 80098fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009900:	3301      	adds	r3, #1
 8009902:	4447      	add	r7, r8
 8009904:	2b07      	cmp	r3, #7
 8009906:	6027      	str	r7, [r4, #0]
 8009908:	9320      	str	r3, [sp, #128]	; 0x80
 800990a:	dc54      	bgt.n	80099b6 <_svfprintf_r+0xd46>
 800990c:	3408      	adds	r4, #8
 800990e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009910:	9a03      	ldr	r2, [sp, #12]
 8009912:	2e00      	cmp	r6, #0
 8009914:	eba2 0303 	sub.w	r3, r2, r3
 8009918:	bfac      	ite	ge
 800991a:	1b9e      	subge	r6, r3, r6
 800991c:	461e      	movlt	r6, r3
 800991e:	2e00      	cmp	r6, #0
 8009920:	f77f acd7 	ble.w	80092d2 <_svfprintf_r+0x662>
 8009924:	4f2f      	ldr	r7, [pc, #188]	; (80099e4 <_svfprintf_r+0xd74>)
 8009926:	f04f 0810 	mov.w	r8, #16
 800992a:	2e10      	cmp	r6, #16
 800992c:	6027      	str	r7, [r4, #0]
 800992e:	f77f aee7 	ble.w	8009700 <_svfprintf_r+0xa90>
 8009932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009934:	f8c4 8004 	str.w	r8, [r4, #4]
 8009938:	3310      	adds	r3, #16
 800993a:	9321      	str	r3, [sp, #132]	; 0x84
 800993c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800993e:	3301      	adds	r3, #1
 8009940:	2b07      	cmp	r3, #7
 8009942:	9320      	str	r3, [sp, #128]	; 0x80
 8009944:	dc41      	bgt.n	80099ca <_svfprintf_r+0xd5a>
 8009946:	3408      	adds	r4, #8
 8009948:	3e10      	subs	r6, #16
 800994a:	e7ee      	b.n	800992a <_svfprintf_r+0xcba>
 800994c:	aa1f      	add	r2, sp, #124	; 0x7c
 800994e:	4651      	mov	r1, sl
 8009950:	4658      	mov	r0, fp
 8009952:	f002 ffd1 	bl	800c8f8 <__ssprint_r>
 8009956:	2800      	cmp	r0, #0
 8009958:	f040 80eb 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800995c:	ac2c      	add	r4, sp, #176	; 0xb0
 800995e:	e796      	b.n	800988e <_svfprintf_r+0xc1e>
 8009960:	2310      	movs	r3, #16
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009966:	3310      	adds	r3, #16
 8009968:	9321      	str	r3, [sp, #132]	; 0x84
 800996a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800996c:	3301      	adds	r3, #1
 800996e:	2b07      	cmp	r3, #7
 8009970:	9320      	str	r3, [sp, #128]	; 0x80
 8009972:	dc02      	bgt.n	800997a <_svfprintf_r+0xd0a>
 8009974:	3408      	adds	r4, #8
 8009976:	3e10      	subs	r6, #16
 8009978:	e791      	b.n	800989e <_svfprintf_r+0xc2e>
 800997a:	aa1f      	add	r2, sp, #124	; 0x7c
 800997c:	4651      	mov	r1, sl
 800997e:	4658      	mov	r0, fp
 8009980:	f002 ffba 	bl	800c8f8 <__ssprint_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80d4 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800998a:	ac2c      	add	r4, sp, #176	; 0xb0
 800998c:	e7f3      	b.n	8009976 <_svfprintf_r+0xd06>
 800998e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009990:	4651      	mov	r1, sl
 8009992:	4658      	mov	r0, fp
 8009994:	f002 ffb0 	bl	800c8f8 <__ssprint_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	f040 80ca 	bne.w	8009b32 <_svfprintf_r+0xec2>
 800999e:	ac2c      	add	r4, sp, #176	; 0xb0
 80099a0:	e78b      	b.n	80098ba <_svfprintf_r+0xc4a>
 80099a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80099a4:	4651      	mov	r1, sl
 80099a6:	4658      	mov	r0, fp
 80099a8:	f002 ffa6 	bl	800c8f8 <__ssprint_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f040 80c0 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80099b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80099b4:	e795      	b.n	80098e2 <_svfprintf_r+0xc72>
 80099b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80099b8:	4651      	mov	r1, sl
 80099ba:	4658      	mov	r0, fp
 80099bc:	f002 ff9c 	bl	800c8f8 <__ssprint_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f040 80b6 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80099c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80099c8:	e7a1      	b.n	800990e <_svfprintf_r+0xc9e>
 80099ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80099cc:	4651      	mov	r1, sl
 80099ce:	4658      	mov	r0, fp
 80099d0:	f002 ff92 	bl	800c8f8 <__ssprint_r>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 80ac 	bne.w	8009b32 <_svfprintf_r+0xec2>
 80099da:	ac2c      	add	r4, sp, #176	; 0xb0
 80099dc:	e7b4      	b.n	8009948 <_svfprintf_r+0xcd8>
 80099de:	bf00      	nop
 80099e0:	0800d27a 	.word	0x0800d27a
 80099e4:	0800d28c 	.word	0x0800d28c
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	dc01      	bgt.n	80099f2 <_svfprintf_r+0xd82>
 80099ee:	07ea      	lsls	r2, r5, #31
 80099f0:	d576      	bpl.n	8009ae0 <_svfprintf_r+0xe70>
 80099f2:	2301      	movs	r3, #1
 80099f4:	6063      	str	r3, [r4, #4]
 80099f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f8:	f8c4 8000 	str.w	r8, [r4]
 80099fc:	3301      	adds	r3, #1
 80099fe:	9321      	str	r3, [sp, #132]	; 0x84
 8009a00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a02:	3301      	adds	r3, #1
 8009a04:	2b07      	cmp	r3, #7
 8009a06:	9320      	str	r3, [sp, #128]	; 0x80
 8009a08:	dc36      	bgt.n	8009a78 <_svfprintf_r+0xe08>
 8009a0a:	3408      	adds	r4, #8
 8009a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	9a08      	ldr	r2, [sp, #32]
 8009a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a18:	4413      	add	r3, r2
 8009a1a:	9321      	str	r3, [sp, #132]	; 0x84
 8009a1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a1e:	3301      	adds	r3, #1
 8009a20:	2b07      	cmp	r3, #7
 8009a22:	9320      	str	r3, [sp, #128]	; 0x80
 8009a24:	dc31      	bgt.n	8009a8a <_svfprintf_r+0xe1a>
 8009a26:	3408      	adds	r4, #8
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a30:	f7f7 f856 	bl	8000ae0 <__aeabi_dcmpeq>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1e5e      	subs	r6, r3, #1
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d12f      	bne.n	8009a9c <_svfprintf_r+0xe2c>
 8009a3c:	f108 0301 	add.w	r3, r8, #1
 8009a40:	e884 0048 	stmia.w	r4, {r3, r6}
 8009a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a46:	9a03      	ldr	r2, [sp, #12]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	4413      	add	r3, r2
 8009a4c:	9321      	str	r3, [sp, #132]	; 0x84
 8009a4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a50:	3301      	adds	r3, #1
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	9320      	str	r3, [sp, #128]	; 0x80
 8009a56:	dd4a      	ble.n	8009aee <_svfprintf_r+0xe7e>
 8009a58:	aa1f      	add	r2, sp, #124	; 0x7c
 8009a5a:	4651      	mov	r1, sl
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f002 ff4b 	bl	800c8f8 <__ssprint_r>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d165      	bne.n	8009b32 <_svfprintf_r+0xec2>
 8009a66:	ac2c      	add	r4, sp, #176	; 0xb0
 8009a68:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a74:	4413      	add	r3, r2
 8009a76:	e41c      	b.n	80092b2 <_svfprintf_r+0x642>
 8009a78:	aa1f      	add	r2, sp, #124	; 0x7c
 8009a7a:	4651      	mov	r1, sl
 8009a7c:	4658      	mov	r0, fp
 8009a7e:	f002 ff3b 	bl	800c8f8 <__ssprint_r>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d155      	bne.n	8009b32 <_svfprintf_r+0xec2>
 8009a86:	ac2c      	add	r4, sp, #176	; 0xb0
 8009a88:	e7c0      	b.n	8009a0c <_svfprintf_r+0xd9c>
 8009a8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8009a8c:	4651      	mov	r1, sl
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f002 ff32 	bl	800c8f8 <__ssprint_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d14c      	bne.n	8009b32 <_svfprintf_r+0xec2>
 8009a98:	ac2c      	add	r4, sp, #176	; 0xb0
 8009a9a:	e7c5      	b.n	8009a28 <_svfprintf_r+0xdb8>
 8009a9c:	2e00      	cmp	r6, #0
 8009a9e:	dde3      	ble.n	8009a68 <_svfprintf_r+0xdf8>
 8009aa0:	4f59      	ldr	r7, [pc, #356]	; (8009c08 <_svfprintf_r+0xf98>)
 8009aa2:	f04f 0810 	mov.w	r8, #16
 8009aa6:	2e10      	cmp	r6, #16
 8009aa8:	6027      	str	r7, [r4, #0]
 8009aaa:	dc04      	bgt.n	8009ab6 <_svfprintf_r+0xe46>
 8009aac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aae:	6066      	str	r6, [r4, #4]
 8009ab0:	441e      	add	r6, r3
 8009ab2:	9621      	str	r6, [sp, #132]	; 0x84
 8009ab4:	e7cb      	b.n	8009a4e <_svfprintf_r+0xdde>
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	f8c4 8004 	str.w	r8, [r4, #4]
 8009abc:	3310      	adds	r3, #16
 8009abe:	9321      	str	r3, [sp, #132]	; 0x84
 8009ac0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	2b07      	cmp	r3, #7
 8009ac6:	9320      	str	r3, [sp, #128]	; 0x80
 8009ac8:	dc02      	bgt.n	8009ad0 <_svfprintf_r+0xe60>
 8009aca:	3408      	adds	r4, #8
 8009acc:	3e10      	subs	r6, #16
 8009ace:	e7ea      	b.n	8009aa6 <_svfprintf_r+0xe36>
 8009ad0:	aa1f      	add	r2, sp, #124	; 0x7c
 8009ad2:	4651      	mov	r1, sl
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f002 ff0f 	bl	800c8f8 <__ssprint_r>
 8009ada:	bb50      	cbnz	r0, 8009b32 <_svfprintf_r+0xec2>
 8009adc:	ac2c      	add	r4, sp, #176	; 0xb0
 8009ade:	e7f5      	b.n	8009acc <_svfprintf_r+0xe5c>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	6063      	str	r3, [r4, #4]
 8009ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae6:	f8c4 8000 	str.w	r8, [r4]
 8009aea:	3301      	adds	r3, #1
 8009aec:	e7ae      	b.n	8009a4c <_svfprintf_r+0xddc>
 8009aee:	3408      	adds	r4, #8
 8009af0:	e7ba      	b.n	8009a68 <_svfprintf_r+0xdf8>
 8009af2:	3408      	adds	r4, #8
 8009af4:	f7ff bbed 	b.w	80092d2 <_svfprintf_r+0x662>
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009afc:	1a9d      	subs	r5, r3, r2
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	f77f abea 	ble.w	80092d8 <_svfprintf_r+0x668>
 8009b04:	2610      	movs	r6, #16
 8009b06:	4b41      	ldr	r3, [pc, #260]	; (8009c0c <_svfprintf_r+0xf9c>)
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	2d10      	cmp	r5, #16
 8009b0c:	dc1b      	bgt.n	8009b46 <_svfprintf_r+0xed6>
 8009b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b10:	6065      	str	r5, [r4, #4]
 8009b12:	441d      	add	r5, r3
 8009b14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b16:	9521      	str	r5, [sp, #132]	; 0x84
 8009b18:	3301      	adds	r3, #1
 8009b1a:	2b07      	cmp	r3, #7
 8009b1c:	9320      	str	r3, [sp, #128]	; 0x80
 8009b1e:	f77f abdb 	ble.w	80092d8 <_svfprintf_r+0x668>
 8009b22:	aa1f      	add	r2, sp, #124	; 0x7c
 8009b24:	4651      	mov	r1, sl
 8009b26:	4658      	mov	r0, fp
 8009b28:	f002 fee6 	bl	800c8f8 <__ssprint_r>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f43f abd3 	beq.w	80092d8 <_svfprintf_r+0x668>
 8009b32:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009b36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3c:	bf18      	it	ne
 8009b3e:	f04f 33ff 	movne.w	r3, #4294967295
 8009b42:	f7ff b8b9 	b.w	8008cb8 <_svfprintf_r+0x48>
 8009b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b48:	6066      	str	r6, [r4, #4]
 8009b4a:	3310      	adds	r3, #16
 8009b4c:	9321      	str	r3, [sp, #132]	; 0x84
 8009b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b50:	3301      	adds	r3, #1
 8009b52:	2b07      	cmp	r3, #7
 8009b54:	9320      	str	r3, [sp, #128]	; 0x80
 8009b56:	dc02      	bgt.n	8009b5e <_svfprintf_r+0xeee>
 8009b58:	3408      	adds	r4, #8
 8009b5a:	3d10      	subs	r5, #16
 8009b5c:	e7d3      	b.n	8009b06 <_svfprintf_r+0xe96>
 8009b5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009b60:	4651      	mov	r1, sl
 8009b62:	4658      	mov	r0, fp
 8009b64:	f002 fec8 	bl	800c8f8 <__ssprint_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1e2      	bne.n	8009b32 <_svfprintf_r+0xec2>
 8009b6c:	ac2c      	add	r4, sp, #176	; 0xb0
 8009b6e:	e7f4      	b.n	8009b5a <_svfprintf_r+0xeea>
 8009b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0dd      	beq.n	8009b32 <_svfprintf_r+0xec2>
 8009b76:	aa1f      	add	r2, sp, #124	; 0x7c
 8009b78:	4651      	mov	r1, sl
 8009b7a:	4658      	mov	r0, fp
 8009b7c:	f002 febc 	bl	800c8f8 <__ssprint_r>
 8009b80:	e7d7      	b.n	8009b32 <_svfprintf_r+0xec2>
 8009b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b86:	4610      	mov	r0, r2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f7f6 ffdb 	bl	8000b44 <__aeabi_dcmpun>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f aa44 	beq.w	800901c <_svfprintf_r+0x3ac>
 8009b94:	4b1e      	ldr	r3, [pc, #120]	; (8009c10 <_svfprintf_r+0xfa0>)
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <_svfprintf_r+0xfa4>)
 8009b98:	f7ff ba34 	b.w	8009004 <_svfprintf_r+0x394>
 8009b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b9e:	eba3 0308 	sub.w	r3, r3, r8
 8009ba2:	9303      	str	r3, [sp, #12]
 8009ba4:	f7ff bab5 	b.w	8009112 <_svfprintf_r+0x4a2>
 8009ba8:	ea56 0207 	orrs.w	r2, r6, r7
 8009bac:	950b      	str	r5, [sp, #44]	; 0x2c
 8009bae:	f43f ac2b 	beq.w	8009408 <_svfprintf_r+0x798>
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	f43f ac9d 	beq.w	80094f2 <_svfprintf_r+0x882>
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	f43f acbd 	beq.w	8009538 <_svfprintf_r+0x8c8>
 8009bbe:	ab2c      	add	r3, sp, #176	; 0xb0
 8009bc0:	08f1      	lsrs	r1, r6, #3
 8009bc2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8009bc6:	08f8      	lsrs	r0, r7, #3
 8009bc8:	f006 0207 	and.w	r2, r6, #7
 8009bcc:	4607      	mov	r7, r0
 8009bce:	460e      	mov	r6, r1
 8009bd0:	3230      	adds	r2, #48	; 0x30
 8009bd2:	ea56 0107 	orrs.w	r1, r6, r7
 8009bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8009bda:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009bde:	f47f ac86 	bne.w	80094ee <_svfprintf_r+0x87e>
 8009be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009be4:	07c9      	lsls	r1, r1, #31
 8009be6:	d506      	bpl.n	8009bf6 <_svfprintf_r+0xf86>
 8009be8:	2a30      	cmp	r2, #48	; 0x30
 8009bea:	d004      	beq.n	8009bf6 <_svfprintf_r+0xf86>
 8009bec:	2230      	movs	r2, #48	; 0x30
 8009bee:	f808 2c01 	strb.w	r2, [r8, #-1]
 8009bf2:	f1a3 0802 	sub.w	r8, r3, #2
 8009bf6:	464e      	mov	r6, r9
 8009bf8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8009bfc:	eba9 0908 	sub.w	r9, r9, r8
 8009c00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009c02:	2700      	movs	r7, #0
 8009c04:	f7ff bad1 	b.w	80091aa <_svfprintf_r+0x53a>
 8009c08:	0800d28c 	.word	0x0800d28c
 8009c0c:	0800d27c 	.word	0x0800d27c
 8009c10:	0800d250 	.word	0x0800d250
 8009c14:	0800d254 	.word	0x0800d254

08009c18 <_vfprintf_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	b0bd      	sub	sp, #244	; 0xf4
 8009c1e:	4688      	mov	r8, r1
 8009c20:	4615      	mov	r5, r2
 8009c22:	461c      	mov	r4, r3
 8009c24:	461f      	mov	r7, r3
 8009c26:	4683      	mov	fp, r0
 8009c28:	f002 f916 	bl	800be58 <_localeconv_r>
 8009c2c:	6803      	ldr	r3, [r0, #0]
 8009c2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7f6 fad7 	bl	80001e4 <strlen>
 8009c36:	9009      	str	r0, [sp, #36]	; 0x24
 8009c38:	f1bb 0f00 	cmp.w	fp, #0
 8009c3c:	d005      	beq.n	8009c4a <_vfprintf_r+0x32>
 8009c3e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8009c42:	b913      	cbnz	r3, 8009c4a <_vfprintf_r+0x32>
 8009c44:	4658      	mov	r0, fp
 8009c46:	f7fe faf1 	bl	800822c <__sinit>
 8009c4a:	4b99      	ldr	r3, [pc, #612]	; (8009eb0 <_vfprintf_r+0x298>)
 8009c4c:	4598      	cmp	r8, r3
 8009c4e:	d137      	bne.n	8009cc0 <_vfprintf_r+0xa8>
 8009c50:	f8db 8004 	ldr.w	r8, [fp, #4]
 8009c54:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8009c58:	07d8      	lsls	r0, r3, #31
 8009c5a:	d407      	bmi.n	8009c6c <_vfprintf_r+0x54>
 8009c5c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009c60:	0599      	lsls	r1, r3, #22
 8009c62:	d403      	bmi.n	8009c6c <_vfprintf_r+0x54>
 8009c64:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8009c68:	f7fe fcb6 	bl	80085d8 <__retarget_lock_acquire_recursive>
 8009c6c:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8009c70:	049a      	lsls	r2, r3, #18
 8009c72:	d409      	bmi.n	8009c88 <_vfprintf_r+0x70>
 8009c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c78:	f8a8 300c 	strh.w	r3, [r8, #12]
 8009c7c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8009c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c84:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8009c88:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009c8c:	071e      	lsls	r6, r3, #28
 8009c8e:	d502      	bpl.n	8009c96 <_vfprintf_r+0x7e>
 8009c90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009c94:	bb03      	cbnz	r3, 8009cd8 <_vfprintf_r+0xc0>
 8009c96:	4641      	mov	r1, r8
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f001 f84b 	bl	800ad34 <__swsetup_r>
 8009c9e:	b1d8      	cbz	r0, 8009cd8 <_vfprintf_r+0xc0>
 8009ca0:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8009ca4:	07dd      	lsls	r5, r3, #31
 8009ca6:	d407      	bmi.n	8009cb8 <_vfprintf_r+0xa0>
 8009ca8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009cac:	059c      	lsls	r4, r3, #22
 8009cae:	d403      	bmi.n	8009cb8 <_vfprintf_r+0xa0>
 8009cb0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8009cb4:	f7fe fc91 	bl	80085da <__retarget_lock_release_recursive>
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009cbe:	e026      	b.n	8009d0e <_vfprintf_r+0xf6>
 8009cc0:	4b7c      	ldr	r3, [pc, #496]	; (8009eb4 <_vfprintf_r+0x29c>)
 8009cc2:	4598      	cmp	r8, r3
 8009cc4:	d102      	bne.n	8009ccc <_vfprintf_r+0xb4>
 8009cc6:	f8db 8008 	ldr.w	r8, [fp, #8]
 8009cca:	e7c3      	b.n	8009c54 <_vfprintf_r+0x3c>
 8009ccc:	4b7a      	ldr	r3, [pc, #488]	; (8009eb8 <_vfprintf_r+0x2a0>)
 8009cce:	4598      	cmp	r8, r3
 8009cd0:	bf08      	it	eq
 8009cd2:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8009cd6:	e7bd      	b.n	8009c54 <_vfprintf_r+0x3c>
 8009cd8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8009cdc:	f003 021a 	and.w	r2, r3, #26
 8009ce0:	2a0a      	cmp	r2, #10
 8009ce2:	d118      	bne.n	8009d16 <_vfprintf_r+0xfe>
 8009ce4:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	db14      	blt.n	8009d16 <_vfprintf_r+0xfe>
 8009cec:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8009cf0:	07d0      	lsls	r0, r2, #31
 8009cf2:	d405      	bmi.n	8009d00 <_vfprintf_r+0xe8>
 8009cf4:	0599      	lsls	r1, r3, #22
 8009cf6:	d403      	bmi.n	8009d00 <_vfprintf_r+0xe8>
 8009cf8:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8009cfc:	f7fe fc6d 	bl	80085da <__retarget_lock_release_recursive>
 8009d00:	4623      	mov	r3, r4
 8009d02:	462a      	mov	r2, r5
 8009d04:	4641      	mov	r1, r8
 8009d06:	4658      	mov	r0, fp
 8009d08:	f000 ffc2 	bl	800ac90 <__sbprintf>
 8009d0c:	900a      	str	r0, [sp, #40]	; 0x28
 8009d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d10:	b03d      	add	sp, #244	; 0xf4
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8009ea8 <_vfprintf_r+0x290>
 8009d1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	ac2c      	add	r4, sp, #176	; 0xb0
 8009d22:	941f      	str	r4, [sp, #124]	; 0x7c
 8009d24:	9321      	str	r3, [sp, #132]	; 0x84
 8009d26:	9320      	str	r3, [sp, #128]	; 0x80
 8009d28:	9505      	str	r5, [sp, #20]
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	9311      	str	r3, [sp, #68]	; 0x44
 8009d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d30:	930a      	str	r3, [sp, #40]	; 0x28
 8009d32:	9d05      	ldr	r5, [sp, #20]
 8009d34:	462b      	mov	r3, r5
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	b112      	cbz	r2, 8009d42 <_vfprintf_r+0x12a>
 8009d3c:	2a25      	cmp	r2, #37	; 0x25
 8009d3e:	f040 8083 	bne.w	8009e48 <_vfprintf_r+0x230>
 8009d42:	9b05      	ldr	r3, [sp, #20]
 8009d44:	1aee      	subs	r6, r5, r3
 8009d46:	d00d      	beq.n	8009d64 <_vfprintf_r+0x14c>
 8009d48:	e884 0048 	stmia.w	r4, {r3, r6}
 8009d4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d4e:	4433      	add	r3, r6
 8009d50:	9321      	str	r3, [sp, #132]	; 0x84
 8009d52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d54:	3301      	adds	r3, #1
 8009d56:	2b07      	cmp	r3, #7
 8009d58:	9320      	str	r3, [sp, #128]	; 0x80
 8009d5a:	dc77      	bgt.n	8009e4c <_vfprintf_r+0x234>
 8009d5c:	3408      	adds	r4, #8
 8009d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d60:	4433      	add	r3, r6
 8009d62:	930a      	str	r3, [sp, #40]	; 0x28
 8009d64:	782b      	ldrb	r3, [r5, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8739 	beq.w	800abde <_vfprintf_r+0xfc6>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	1c69      	adds	r1, r5, #1
 8009d70:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009d74:	461a      	mov	r2, r3
 8009d76:	f04f 3aff 	mov.w	sl, #4294967295
 8009d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7c:	461d      	mov	r5, r3
 8009d7e:	200a      	movs	r0, #10
 8009d80:	1c4e      	adds	r6, r1, #1
 8009d82:	7809      	ldrb	r1, [r1, #0]
 8009d84:	9605      	str	r6, [sp, #20]
 8009d86:	9102      	str	r1, [sp, #8]
 8009d88:	9902      	ldr	r1, [sp, #8]
 8009d8a:	3920      	subs	r1, #32
 8009d8c:	2958      	cmp	r1, #88	; 0x58
 8009d8e:	f200 841d 	bhi.w	800a5cc <_vfprintf_r+0x9b4>
 8009d92:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d96:	00b3      	.short	0x00b3
 8009d98:	041b041b 	.word	0x041b041b
 8009d9c:	041b00b8 	.word	0x041b00b8
 8009da0:	041b041b 	.word	0x041b041b
 8009da4:	041b041b 	.word	0x041b041b
 8009da8:	00bb041b 	.word	0x00bb041b
 8009dac:	041b0065 	.word	0x041b0065
 8009db0:	00c700c4 	.word	0x00c700c4
 8009db4:	00e4041b 	.word	0x00e4041b
 8009db8:	00e700e7 	.word	0x00e700e7
 8009dbc:	00e700e7 	.word	0x00e700e7
 8009dc0:	00e700e7 	.word	0x00e700e7
 8009dc4:	00e700e7 	.word	0x00e700e7
 8009dc8:	041b00e7 	.word	0x041b00e7
 8009dcc:	041b041b 	.word	0x041b041b
 8009dd0:	041b041b 	.word	0x041b041b
 8009dd4:	041b041b 	.word	0x041b041b
 8009dd8:	041b041b 	.word	0x041b041b
 8009ddc:	011b041b 	.word	0x011b041b
 8009de0:	041b0131 	.word	0x041b0131
 8009de4:	041b0131 	.word	0x041b0131
 8009de8:	041b041b 	.word	0x041b041b
 8009dec:	00fa041b 	.word	0x00fa041b
 8009df0:	041b041b 	.word	0x041b041b
 8009df4:	041b0346 	.word	0x041b0346
 8009df8:	041b041b 	.word	0x041b041b
 8009dfc:	041b041b 	.word	0x041b041b
 8009e00:	041b03ad 	.word	0x041b03ad
 8009e04:	0093041b 	.word	0x0093041b
 8009e08:	041b041b 	.word	0x041b041b
 8009e0c:	041b041b 	.word	0x041b041b
 8009e10:	041b041b 	.word	0x041b041b
 8009e14:	041b041b 	.word	0x041b041b
 8009e18:	041b041b 	.word	0x041b041b
 8009e1c:	006b010d 	.word	0x006b010d
 8009e20:	01310131 	.word	0x01310131
 8009e24:	00fd0131 	.word	0x00fd0131
 8009e28:	041b006b 	.word	0x041b006b
 8009e2c:	0100041b 	.word	0x0100041b
 8009e30:	0328041b 	.word	0x0328041b
 8009e34:	037c0348 	.word	0x037c0348
 8009e38:	041b0107 	.word	0x041b0107
 8009e3c:	041b038d 	.word	0x041b038d
 8009e40:	041b03af 	.word	0x041b03af
 8009e44:	03c7041b 	.word	0x03c7041b
 8009e48:	461d      	mov	r5, r3
 8009e4a:	e773      	b.n	8009d34 <_vfprintf_r+0x11c>
 8009e4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8009e4e:	4641      	mov	r1, r8
 8009e50:	4658      	mov	r0, fp
 8009e52:	f002 fdcb 	bl	800c9ec <__sprint_r>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 8699 	bne.w	800ab8e <_vfprintf_r+0xf76>
 8009e5c:	ac2c      	add	r4, sp, #176	; 0xb0
 8009e5e:	e77e      	b.n	8009d5e <_vfprintf_r+0x146>
 8009e60:	2301      	movs	r3, #1
 8009e62:	222b      	movs	r2, #43	; 0x2b
 8009e64:	9905      	ldr	r1, [sp, #20]
 8009e66:	e78b      	b.n	8009d80 <_vfprintf_r+0x168>
 8009e68:	460f      	mov	r7, r1
 8009e6a:	e7fb      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009e6c:	b10b      	cbz	r3, 8009e72 <_vfprintf_r+0x25a>
 8009e6e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009e72:	06aa      	lsls	r2, r5, #26
 8009e74:	f140 80b0 	bpl.w	8009fd8 <_vfprintf_r+0x3c0>
 8009e78:	3707      	adds	r7, #7
 8009e7a:	f027 0707 	bic.w	r7, r7, #7
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009e86:	9304      	str	r3, [sp, #16]
 8009e88:	2e00      	cmp	r6, #0
 8009e8a:	f177 0300 	sbcs.w	r3, r7, #0
 8009e8e:	da06      	bge.n	8009e9e <_vfprintf_r+0x286>
 8009e90:	4276      	negs	r6, r6
 8009e92:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009e96:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009e9a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e2d0      	b.n	800a444 <_vfprintf_r+0x82c>
 8009ea2:	bf00      	nop
 8009ea4:	f3af 8000 	nop.w
	...
 8009eb0:	0800d204 	.word	0x0800d204
 8009eb4:	0800d224 	.word	0x0800d224
 8009eb8:	0800d1e4 	.word	0x0800d1e4
 8009ebc:	b10b      	cbz	r3, 8009ec2 <_vfprintf_r+0x2aa>
 8009ebe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009ec2:	4ba2      	ldr	r3, [pc, #648]	; (800a14c <_vfprintf_r+0x534>)
 8009ec4:	9311      	str	r3, [sp, #68]	; 0x44
 8009ec6:	06a9      	lsls	r1, r5, #26
 8009ec8:	f140 8331 	bpl.w	800a52e <_vfprintf_r+0x916>
 8009ecc:	3707      	adds	r7, #7
 8009ece:	f027 0707 	bic.w	r7, r7, #7
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	07eb      	lsls	r3, r5, #31
 8009ede:	d50b      	bpl.n	8009ef8 <_vfprintf_r+0x2e0>
 8009ee0:	ea56 0307 	orrs.w	r3, r6, r7
 8009ee4:	d008      	beq.n	8009ef8 <_vfprintf_r+0x2e0>
 8009ee6:	2330      	movs	r3, #48	; 0x30
 8009ee8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8009eec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009ef0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8009ef4:	f045 0502 	orr.w	r5, r5, #2
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e2a0      	b.n	800a43e <_vfprintf_r+0x826>
 8009efc:	2a00      	cmp	r2, #0
 8009efe:	d1b1      	bne.n	8009e64 <_vfprintf_r+0x24c>
 8009f00:	2301      	movs	r3, #1
 8009f02:	2220      	movs	r2, #32
 8009f04:	e7ae      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f06:	f045 0501 	orr.w	r5, r5, #1
 8009f0a:	e7ab      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f0c:	683e      	ldr	r6, [r7, #0]
 8009f0e:	960b      	str	r6, [sp, #44]	; 0x2c
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	f107 0104 	add.w	r1, r7, #4
 8009f16:	daa7      	bge.n	8009e68 <_vfprintf_r+0x250>
 8009f18:	4276      	negs	r6, r6
 8009f1a:	960b      	str	r6, [sp, #44]	; 0x2c
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	f045 0504 	orr.w	r5, r5, #4
 8009f22:	e79f      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f24:	9905      	ldr	r1, [sp, #20]
 8009f26:	1c4e      	adds	r6, r1, #1
 8009f28:	7809      	ldrb	r1, [r1, #0]
 8009f2a:	9102      	str	r1, [sp, #8]
 8009f2c:	292a      	cmp	r1, #42	; 0x2a
 8009f2e:	d010      	beq.n	8009f52 <_vfprintf_r+0x33a>
 8009f30:	f04f 0a00 	mov.w	sl, #0
 8009f34:	9605      	str	r6, [sp, #20]
 8009f36:	9902      	ldr	r1, [sp, #8]
 8009f38:	3930      	subs	r1, #48	; 0x30
 8009f3a:	2909      	cmp	r1, #9
 8009f3c:	f63f af24 	bhi.w	8009d88 <_vfprintf_r+0x170>
 8009f40:	fb00 1a0a 	mla	sl, r0, sl, r1
 8009f44:	9905      	ldr	r1, [sp, #20]
 8009f46:	460e      	mov	r6, r1
 8009f48:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009f4c:	9102      	str	r1, [sp, #8]
 8009f4e:	9605      	str	r6, [sp, #20]
 8009f50:	e7f1      	b.n	8009f36 <_vfprintf_r+0x31e>
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	9605      	str	r6, [sp, #20]
 8009f56:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8009f5a:	3704      	adds	r7, #4
 8009f5c:	e782      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f5e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009f62:	e77f      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f64:	2100      	movs	r1, #0
 8009f66:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f68:	9902      	ldr	r1, [sp, #8]
 8009f6a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009f6c:	3930      	subs	r1, #48	; 0x30
 8009f6e:	fb00 1106 	mla	r1, r0, r6, r1
 8009f72:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f74:	9905      	ldr	r1, [sp, #20]
 8009f76:	460e      	mov	r6, r1
 8009f78:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009f7c:	9102      	str	r1, [sp, #8]
 8009f7e:	9902      	ldr	r1, [sp, #8]
 8009f80:	9605      	str	r6, [sp, #20]
 8009f82:	3930      	subs	r1, #48	; 0x30
 8009f84:	2909      	cmp	r1, #9
 8009f86:	d9ef      	bls.n	8009f68 <_vfprintf_r+0x350>
 8009f88:	e6fe      	b.n	8009d88 <_vfprintf_r+0x170>
 8009f8a:	f045 0508 	orr.w	r5, r5, #8
 8009f8e:	e769      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f90:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8009f94:	e766      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009f96:	9905      	ldr	r1, [sp, #20]
 8009f98:	7809      	ldrb	r1, [r1, #0]
 8009f9a:	296c      	cmp	r1, #108	; 0x6c
 8009f9c:	d105      	bne.n	8009faa <_vfprintf_r+0x392>
 8009f9e:	9905      	ldr	r1, [sp, #20]
 8009fa0:	3101      	adds	r1, #1
 8009fa2:	9105      	str	r1, [sp, #20]
 8009fa4:	f045 0520 	orr.w	r5, r5, #32
 8009fa8:	e75c      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009faa:	f045 0510 	orr.w	r5, r5, #16
 8009fae:	e759      	b.n	8009e64 <_vfprintf_r+0x24c>
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	2600      	movs	r6, #0
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8009fbc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009fc0:	f04f 0a01 	mov.w	sl, #1
 8009fc4:	9608      	str	r6, [sp, #32]
 8009fc6:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8009fca:	e11e      	b.n	800a20a <_vfprintf_r+0x5f2>
 8009fcc:	b10b      	cbz	r3, 8009fd2 <_vfprintf_r+0x3ba>
 8009fce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009fd2:	f045 0510 	orr.w	r5, r5, #16
 8009fd6:	e74c      	b.n	8009e72 <_vfprintf_r+0x25a>
 8009fd8:	f015 0f10 	tst.w	r5, #16
 8009fdc:	f107 0304 	add.w	r3, r7, #4
 8009fe0:	d003      	beq.n	8009fea <_vfprintf_r+0x3d2>
 8009fe2:	683e      	ldr	r6, [r7, #0]
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	17f7      	asrs	r7, r6, #31
 8009fe8:	e74e      	b.n	8009e88 <_vfprintf_r+0x270>
 8009fea:	683e      	ldr	r6, [r7, #0]
 8009fec:	9304      	str	r3, [sp, #16]
 8009fee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ff2:	bf18      	it	ne
 8009ff4:	b236      	sxthne	r6, r6
 8009ff6:	e7f6      	b.n	8009fe6 <_vfprintf_r+0x3ce>
 8009ff8:	b10b      	cbz	r3, 8009ffe <_vfprintf_r+0x3e6>
 8009ffa:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009ffe:	3707      	adds	r7, #7
 800a000:	f027 0707 	bic.w	r7, r7, #7
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	9304      	str	r3, [sp, #16]
 800a00a:	ed97 7b00 	vldr	d7, [r7]
 800a00e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a012:	9b06      	ldr	r3, [sp, #24]
 800a014:	9312      	str	r3, [sp, #72]	; 0x48
 800a016:	9b07      	ldr	r3, [sp, #28]
 800a018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a01c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a01e:	f04f 32ff 	mov.w	r2, #4294967295
 800a022:	4b4b      	ldr	r3, [pc, #300]	; (800a150 <_vfprintf_r+0x538>)
 800a024:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a028:	f7f6 fd8c 	bl	8000b44 <__aeabi_dcmpun>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	f040 85e3 	bne.w	800abf8 <_vfprintf_r+0xfe0>
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	4b46      	ldr	r3, [pc, #280]	; (800a150 <_vfprintf_r+0x538>)
 800a038:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a03c:	f7f6 fd64 	bl	8000b08 <__aeabi_dcmple>
 800a040:	2800      	cmp	r0, #0
 800a042:	f040 85d9 	bne.w	800abf8 <_vfprintf_r+0xfe0>
 800a046:	2200      	movs	r2, #0
 800a048:	2300      	movs	r3, #0
 800a04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04e:	f7f6 fd51 	bl	8000af4 <__aeabi_dcmplt>
 800a052:	b110      	cbz	r0, 800a05a <_vfprintf_r+0x442>
 800a054:	232d      	movs	r3, #45	; 0x2d
 800a056:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a05a:	4b3e      	ldr	r3, [pc, #248]	; (800a154 <_vfprintf_r+0x53c>)
 800a05c:	4a3e      	ldr	r2, [pc, #248]	; (800a158 <_vfprintf_r+0x540>)
 800a05e:	9902      	ldr	r1, [sp, #8]
 800a060:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a064:	2947      	cmp	r1, #71	; 0x47
 800a066:	bfcc      	ite	gt
 800a068:	4691      	movgt	r9, r2
 800a06a:	4699      	movle	r9, r3
 800a06c:	f04f 0a03 	mov.w	sl, #3
 800a070:	2600      	movs	r6, #0
 800a072:	9608      	str	r6, [sp, #32]
 800a074:	e0c9      	b.n	800a20a <_vfprintf_r+0x5f2>
 800a076:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a07a:	d022      	beq.n	800a0c2 <_vfprintf_r+0x4aa>
 800a07c:	9b02      	ldr	r3, [sp, #8]
 800a07e:	f023 0320 	bic.w	r3, r3, #32
 800a082:	2b47      	cmp	r3, #71	; 0x47
 800a084:	d104      	bne.n	800a090 <_vfprintf_r+0x478>
 800a086:	f1ba 0f00 	cmp.w	sl, #0
 800a08a:	bf08      	it	eq
 800a08c:	f04f 0a01 	moveq.w	sl, #1
 800a090:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800a094:	9314      	str	r3, [sp, #80]	; 0x50
 800a096:	9b07      	ldr	r3, [sp, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da15      	bge.n	800a0c8 <_vfprintf_r+0x4b0>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	930e      	str	r3, [sp, #56]	; 0x38
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0a8:	232d      	movs	r3, #45	; 0x2d
 800a0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	f023 0720 	bic.w	r7, r3, #32
 800a0b2:	2f46      	cmp	r7, #70	; 0x46
 800a0b4:	d00e      	beq.n	800a0d4 <_vfprintf_r+0x4bc>
 800a0b6:	2f45      	cmp	r7, #69	; 0x45
 800a0b8:	d146      	bne.n	800a148 <_vfprintf_r+0x530>
 800a0ba:	f10a 0601 	add.w	r6, sl, #1
 800a0be:	2102      	movs	r1, #2
 800a0c0:	e00a      	b.n	800a0d8 <_vfprintf_r+0x4c0>
 800a0c2:	f04f 0a06 	mov.w	sl, #6
 800a0c6:	e7e3      	b.n	800a090 <_vfprintf_r+0x478>
 800a0c8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a0d2:	e7ea      	b.n	800a0aa <_vfprintf_r+0x492>
 800a0d4:	4656      	mov	r6, sl
 800a0d6:	2103      	movs	r1, #3
 800a0d8:	ab1d      	add	r3, sp, #116	; 0x74
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	ab1a      	add	r3, sp, #104	; 0x68
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	ab19      	add	r3, sp, #100	; 0x64
 800a0e4:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800a0e8:	4658      	mov	r0, fp
 800a0ea:	f000 ff2d 	bl	800af48 <_dtoa_r>
 800a0ee:	2f47      	cmp	r7, #71	; 0x47
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	d102      	bne.n	800a0fa <_vfprintf_r+0x4e2>
 800a0f4:	07eb      	lsls	r3, r5, #31
 800a0f6:	f140 858c 	bpl.w	800ac12 <_vfprintf_r+0xffa>
 800a0fa:	eb09 0306 	add.w	r3, r9, r6
 800a0fe:	2f46      	cmp	r7, #70	; 0x46
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	d111      	bne.n	800a128 <_vfprintf_r+0x510>
 800a104:	f899 3000 	ldrb.w	r3, [r9]
 800a108:	2b30      	cmp	r3, #48	; 0x30
 800a10a:	d109      	bne.n	800a120 <_vfprintf_r+0x508>
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a114:	f7f6 fce4 	bl	8000ae0 <__aeabi_dcmpeq>
 800a118:	b910      	cbnz	r0, 800a120 <_vfprintf_r+0x508>
 800a11a:	f1c6 0601 	rsb	r6, r6, #1
 800a11e:	9619      	str	r6, [sp, #100]	; 0x64
 800a120:	9a03      	ldr	r2, [sp, #12]
 800a122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a124:	441a      	add	r2, r3
 800a126:	9203      	str	r2, [sp, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	2300      	movs	r3, #0
 800a12c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a130:	f7f6 fcd6 	bl	8000ae0 <__aeabi_dcmpeq>
 800a134:	b990      	cbnz	r0, 800a15c <_vfprintf_r+0x544>
 800a136:	2230      	movs	r2, #48	; 0x30
 800a138:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a13a:	9903      	ldr	r1, [sp, #12]
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d90f      	bls.n	800a160 <_vfprintf_r+0x548>
 800a140:	1c59      	adds	r1, r3, #1
 800a142:	911d      	str	r1, [sp, #116]	; 0x74
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	e7f7      	b.n	800a138 <_vfprintf_r+0x520>
 800a148:	4656      	mov	r6, sl
 800a14a:	e7b8      	b.n	800a0be <_vfprintf_r+0x4a6>
 800a14c:	0800d258 	.word	0x0800d258
 800a150:	7fefffff 	.word	0x7fefffff
 800a154:	0800d248 	.word	0x0800d248
 800a158:	0800d24c 	.word	0x0800d24c
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	931d      	str	r3, [sp, #116]	; 0x74
 800a160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a162:	2f47      	cmp	r7, #71	; 0x47
 800a164:	eba3 0309 	sub.w	r3, r3, r9
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	f040 80f8 	bne.w	800a35e <_vfprintf_r+0x746>
 800a16e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a170:	1cdf      	adds	r7, r3, #3
 800a172:	db02      	blt.n	800a17a <_vfprintf_r+0x562>
 800a174:	459a      	cmp	sl, r3
 800a176:	f280 811f 	bge.w	800a3b8 <_vfprintf_r+0x7a0>
 800a17a:	9b02      	ldr	r3, [sp, #8]
 800a17c:	3b02      	subs	r3, #2
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a182:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a186:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800a18a:	1e53      	subs	r3, r2, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	9319      	str	r3, [sp, #100]	; 0x64
 800a190:	bfb6      	itet	lt
 800a192:	f1c2 0301 	rsblt	r3, r2, #1
 800a196:	222b      	movge	r2, #43	; 0x2b
 800a198:	222d      	movlt	r2, #45	; 0x2d
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800a1a0:	f340 80fa 	ble.w	800a398 <_vfprintf_r+0x780>
 800a1a4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a1a8:	260a      	movs	r6, #10
 800a1aa:	fb93 f0f6 	sdiv	r0, r3, r6
 800a1ae:	fb06 3310 	mls	r3, r6, r0, r3
 800a1b2:	3330      	adds	r3, #48	; 0x30
 800a1b4:	2809      	cmp	r0, #9
 800a1b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1ba:	f102 31ff 	add.w	r1, r2, #4294967295
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f300 80e3 	bgt.w	800a38a <_vfprintf_r+0x772>
 800a1c4:	3330      	adds	r3, #48	; 0x30
 800a1c6:	f801 3c01 	strb.w	r3, [r1, #-1]
 800a1ca:	3a02      	subs	r2, #2
 800a1cc:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800a1d0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800a1d4:	4282      	cmp	r2, r0
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	f0c0 80d9 	bcc.w	800a38e <_vfprintf_r+0x776>
 800a1dc:	9a03      	ldr	r2, [sp, #12]
 800a1de:	ab1b      	add	r3, sp, #108	; 0x6c
 800a1e0:	1acb      	subs	r3, r1, r3
 800a1e2:	2a01      	cmp	r2, #1
 800a1e4:	9310      	str	r3, [sp, #64]	; 0x40
 800a1e6:	eb03 0a02 	add.w	sl, r3, r2
 800a1ea:	dc03      	bgt.n	800a1f4 <_vfprintf_r+0x5dc>
 800a1ec:	f015 0301 	ands.w	r3, r5, #1
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	d003      	beq.n	800a1fc <_vfprintf_r+0x5e4>
 800a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f6:	449a      	add	sl, r3
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9308      	str	r3, [sp, #32]
 800a1fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1fe:	b113      	cbz	r3, 800a206 <_vfprintf_r+0x5ee>
 800a200:	232d      	movs	r3, #45	; 0x2d
 800a202:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a206:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a208:	2600      	movs	r6, #0
 800a20a:	4556      	cmp	r6, sl
 800a20c:	4633      	mov	r3, r6
 800a20e:	bfb8      	it	lt
 800a210:	4653      	movlt	r3, sl
 800a212:	930c      	str	r3, [sp, #48]	; 0x30
 800a214:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a218:	b113      	cbz	r3, 800a220 <_vfprintf_r+0x608>
 800a21a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21c:	3301      	adds	r3, #1
 800a21e:	930c      	str	r3, [sp, #48]	; 0x30
 800a220:	f015 0302 	ands.w	r3, r5, #2
 800a224:	9314      	str	r3, [sp, #80]	; 0x50
 800a226:	bf1e      	ittt	ne
 800a228:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 800a22a:	3302      	addne	r3, #2
 800a22c:	930c      	strne	r3, [sp, #48]	; 0x30
 800a22e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800a232:	9315      	str	r3, [sp, #84]	; 0x54
 800a234:	d114      	bne.n	800a260 <_vfprintf_r+0x648>
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a23a:	1a9f      	subs	r7, r3, r2
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	dd0f      	ble.n	800a260 <_vfprintf_r+0x648>
 800a240:	4ba8      	ldr	r3, [pc, #672]	; (800a4e4 <_vfprintf_r+0x8cc>)
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	2f10      	cmp	r7, #16
 800a246:	f300 81d3 	bgt.w	800a5f0 <_vfprintf_r+0x9d8>
 800a24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a24c:	6067      	str	r7, [r4, #4]
 800a24e:	441f      	add	r7, r3
 800a250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a252:	9721      	str	r7, [sp, #132]	; 0x84
 800a254:	3301      	adds	r3, #1
 800a256:	2b07      	cmp	r3, #7
 800a258:	9320      	str	r3, [sp, #128]	; 0x80
 800a25a:	f300 81e0 	bgt.w	800a61e <_vfprintf_r+0xa06>
 800a25e:	3408      	adds	r4, #8
 800a260:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a264:	b173      	cbz	r3, 800a284 <_vfprintf_r+0x66c>
 800a266:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	2301      	movs	r3, #1
 800a26e:	6063      	str	r3, [r4, #4]
 800a270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a272:	3301      	adds	r3, #1
 800a274:	9321      	str	r3, [sp, #132]	; 0x84
 800a276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a278:	3301      	adds	r3, #1
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	9320      	str	r3, [sp, #128]	; 0x80
 800a27e:	f300 81d8 	bgt.w	800a632 <_vfprintf_r+0xa1a>
 800a282:	3408      	adds	r4, #8
 800a284:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a286:	b16b      	cbz	r3, 800a2a4 <_vfprintf_r+0x68c>
 800a288:	ab18      	add	r3, sp, #96	; 0x60
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	2302      	movs	r3, #2
 800a28e:	6063      	str	r3, [r4, #4]
 800a290:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a292:	3302      	adds	r3, #2
 800a294:	9321      	str	r3, [sp, #132]	; 0x84
 800a296:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a298:	3301      	adds	r3, #1
 800a29a:	2b07      	cmp	r3, #7
 800a29c:	9320      	str	r3, [sp, #128]	; 0x80
 800a29e:	f300 81d2 	bgt.w	800a646 <_vfprintf_r+0xa2e>
 800a2a2:	3408      	adds	r4, #8
 800a2a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a6:	2b80      	cmp	r3, #128	; 0x80
 800a2a8:	d114      	bne.n	800a2d4 <_vfprintf_r+0x6bc>
 800a2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ae:	1a9f      	subs	r7, r3, r2
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	dd0f      	ble.n	800a2d4 <_vfprintf_r+0x6bc>
 800a2b4:	4b8c      	ldr	r3, [pc, #560]	; (800a4e8 <_vfprintf_r+0x8d0>)
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	2f10      	cmp	r7, #16
 800a2ba:	f300 81ce 	bgt.w	800a65a <_vfprintf_r+0xa42>
 800a2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c0:	6067      	str	r7, [r4, #4]
 800a2c2:	441f      	add	r7, r3
 800a2c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2c6:	9721      	str	r7, [sp, #132]	; 0x84
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	2b07      	cmp	r3, #7
 800a2cc:	9320      	str	r3, [sp, #128]	; 0x80
 800a2ce:	f300 81dd 	bgt.w	800a68c <_vfprintf_r+0xa74>
 800a2d2:	3408      	adds	r4, #8
 800a2d4:	eba6 060a 	sub.w	r6, r6, sl
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	dd0f      	ble.n	800a2fc <_vfprintf_r+0x6e4>
 800a2dc:	4f82      	ldr	r7, [pc, #520]	; (800a4e8 <_vfprintf_r+0x8d0>)
 800a2de:	6027      	str	r7, [r4, #0]
 800a2e0:	2e10      	cmp	r6, #16
 800a2e2:	f300 81dd 	bgt.w	800a6a0 <_vfprintf_r+0xa88>
 800a2e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2e8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a2ea:	6066      	str	r6, [r4, #4]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	4406      	add	r6, r0
 800a2f0:	2b07      	cmp	r3, #7
 800a2f2:	9621      	str	r6, [sp, #132]	; 0x84
 800a2f4:	9320      	str	r3, [sp, #128]	; 0x80
 800a2f6:	f300 81ea 	bgt.w	800a6ce <_vfprintf_r+0xab6>
 800a2fa:	3408      	adds	r4, #8
 800a2fc:	05e9      	lsls	r1, r5, #23
 800a2fe:	f100 81f0 	bmi.w	800a6e2 <_vfprintf_r+0xaca>
 800a302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a304:	e884 0600 	stmia.w	r4, {r9, sl}
 800a308:	4453      	add	r3, sl
 800a30a:	9321      	str	r3, [sp, #132]	; 0x84
 800a30c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a30e:	3301      	adds	r3, #1
 800a310:	2b07      	cmp	r3, #7
 800a312:	9320      	str	r3, [sp, #128]	; 0x80
 800a314:	f340 841b 	ble.w	800ab4e <_vfprintf_r+0xf36>
 800a318:	aa1f      	add	r2, sp, #124	; 0x7c
 800a31a:	4641      	mov	r1, r8
 800a31c:	4658      	mov	r0, fp
 800a31e:	f002 fb65 	bl	800c9ec <__sprint_r>
 800a322:	2800      	cmp	r0, #0
 800a324:	f040 8433 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a328:	ac2c      	add	r4, sp, #176	; 0xb0
 800a32a:	0768      	lsls	r0, r5, #29
 800a32c:	f100 8412 	bmi.w	800ab54 <_vfprintf_r+0xf3c>
 800a330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a334:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a336:	428a      	cmp	r2, r1
 800a338:	bfac      	ite	ge
 800a33a:	189b      	addge	r3, r3, r2
 800a33c:	185b      	addlt	r3, r3, r1
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a342:	b13b      	cbz	r3, 800a354 <_vfprintf_r+0x73c>
 800a344:	aa1f      	add	r2, sp, #124	; 0x7c
 800a346:	4641      	mov	r1, r8
 800a348:	4658      	mov	r0, fp
 800a34a:	f002 fb4f 	bl	800c9ec <__sprint_r>
 800a34e:	2800      	cmp	r0, #0
 800a350:	f040 841d 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a354:	2300      	movs	r3, #0
 800a356:	9320      	str	r3, [sp, #128]	; 0x80
 800a358:	9f04      	ldr	r7, [sp, #16]
 800a35a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a35c:	e4e9      	b.n	8009d32 <_vfprintf_r+0x11a>
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	2b65      	cmp	r3, #101	; 0x65
 800a362:	f77f af0d 	ble.w	800a180 <_vfprintf_r+0x568>
 800a366:	9b02      	ldr	r3, [sp, #8]
 800a368:	2b66      	cmp	r3, #102	; 0x66
 800a36a:	d125      	bne.n	800a3b8 <_vfprintf_r+0x7a0>
 800a36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd1a      	ble.n	800a3a8 <_vfprintf_r+0x790>
 800a372:	f1ba 0f00 	cmp.w	sl, #0
 800a376:	d101      	bne.n	800a37c <_vfprintf_r+0x764>
 800a378:	07ee      	lsls	r6, r5, #31
 800a37a:	d502      	bpl.n	800a382 <_vfprintf_r+0x76a>
 800a37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a37e:	4413      	add	r3, r2
 800a380:	4453      	add	r3, sl
 800a382:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a384:	9208      	str	r2, [sp, #32]
 800a386:	469a      	mov	sl, r3
 800a388:	e738      	b.n	800a1fc <_vfprintf_r+0x5e4>
 800a38a:	460a      	mov	r2, r1
 800a38c:	e70d      	b.n	800a1aa <_vfprintf_r+0x592>
 800a38e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a392:	f803 1b01 	strb.w	r1, [r3], #1
 800a396:	e71d      	b.n	800a1d4 <_vfprintf_r+0x5bc>
 800a398:	2230      	movs	r2, #48	; 0x30
 800a39a:	4413      	add	r3, r2
 800a39c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800a3a0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a3a4:	a91c      	add	r1, sp, #112	; 0x70
 800a3a6:	e719      	b.n	800a1dc <_vfprintf_r+0x5c4>
 800a3a8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ac:	d101      	bne.n	800a3b2 <_vfprintf_r+0x79a>
 800a3ae:	07ed      	lsls	r5, r5, #31
 800a3b0:	d515      	bpl.n	800a3de <_vfprintf_r+0x7c6>
 800a3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	e7e3      	b.n	800a380 <_vfprintf_r+0x768>
 800a3b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	db06      	blt.n	800a3ce <_vfprintf_r+0x7b6>
 800a3c0:	07e8      	lsls	r0, r5, #31
 800a3c2:	d50e      	bpl.n	800a3e2 <_vfprintf_r+0x7ca>
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	4413      	add	r3, r2
 800a3c8:	2267      	movs	r2, #103	; 0x67
 800a3ca:	9202      	str	r2, [sp, #8]
 800a3cc:	e7d9      	b.n	800a382 <_vfprintf_r+0x76a>
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3d2:	2a00      	cmp	r2, #0
 800a3d4:	440b      	add	r3, r1
 800a3d6:	dcf7      	bgt.n	800a3c8 <_vfprintf_r+0x7b0>
 800a3d8:	f1c2 0201 	rsb	r2, r2, #1
 800a3dc:	e7f3      	b.n	800a3c6 <_vfprintf_r+0x7ae>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7cf      	b.n	800a382 <_vfprintf_r+0x76a>
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	e7f0      	b.n	800a3c8 <_vfprintf_r+0x7b0>
 800a3e6:	b10b      	cbz	r3, 800a3ec <_vfprintf_r+0x7d4>
 800a3e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a3ec:	f015 0f20 	tst.w	r5, #32
 800a3f0:	f107 0304 	add.w	r3, r7, #4
 800a3f4:	d008      	beq.n	800a408 <_vfprintf_r+0x7f0>
 800a3f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	17ce      	asrs	r6, r1, #31
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4631      	mov	r1, r6
 800a400:	e9c2 0100 	strd	r0, r1, [r2]
 800a404:	461f      	mov	r7, r3
 800a406:	e494      	b.n	8009d32 <_vfprintf_r+0x11a>
 800a408:	06e9      	lsls	r1, r5, #27
 800a40a:	d503      	bpl.n	800a414 <_vfprintf_r+0x7fc>
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a410:	6011      	str	r1, [r2, #0]
 800a412:	e7f7      	b.n	800a404 <_vfprintf_r+0x7ec>
 800a414:	066a      	lsls	r2, r5, #25
 800a416:	d5f9      	bpl.n	800a40c <_vfprintf_r+0x7f4>
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800a41e:	8011      	strh	r1, [r2, #0]
 800a420:	e7f0      	b.n	800a404 <_vfprintf_r+0x7ec>
 800a422:	f045 0510 	orr.w	r5, r5, #16
 800a426:	f015 0320 	ands.w	r3, r5, #32
 800a42a:	d022      	beq.n	800a472 <_vfprintf_r+0x85a>
 800a42c:	3707      	adds	r7, #7
 800a42e:	f027 0707 	bic.w	r7, r7, #7
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	2300      	movs	r3, #0
 800a43e:	2200      	movs	r2, #0
 800a440:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a444:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a448:	f000 83e8 	beq.w	800ac1c <_vfprintf_r+0x1004>
 800a44c:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800a450:	9208      	str	r2, [sp, #32]
 800a452:	ea56 0207 	orrs.w	r2, r6, r7
 800a456:	f040 83e6 	bne.w	800ac26 <_vfprintf_r+0x100e>
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	f000 80a9 	beq.w	800a5b4 <_vfprintf_r+0x99c>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d075      	beq.n	800a552 <_vfprintf_r+0x93a>
 800a466:	2b02      	cmp	r3, #2
 800a468:	f000 8090 	beq.w	800a58c <_vfprintf_r+0x974>
 800a46c:	2600      	movs	r6, #0
 800a46e:	2700      	movs	r7, #0
 800a470:	e3df      	b.n	800ac32 <_vfprintf_r+0x101a>
 800a472:	1d3a      	adds	r2, r7, #4
 800a474:	f015 0110 	ands.w	r1, r5, #16
 800a478:	9204      	str	r2, [sp, #16]
 800a47a:	d002      	beq.n	800a482 <_vfprintf_r+0x86a>
 800a47c:	683e      	ldr	r6, [r7, #0]
 800a47e:	2700      	movs	r7, #0
 800a480:	e7dd      	b.n	800a43e <_vfprintf_r+0x826>
 800a482:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800a486:	d0f9      	beq.n	800a47c <_vfprintf_r+0x864>
 800a488:	883e      	ldrh	r6, [r7, #0]
 800a48a:	2700      	movs	r7, #0
 800a48c:	e7d6      	b.n	800a43c <_vfprintf_r+0x824>
 800a48e:	1d3b      	adds	r3, r7, #4
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	2330      	movs	r3, #48	; 0x30
 800a494:	2278      	movs	r2, #120	; 0x78
 800a496:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <_vfprintf_r+0x8d4>)
 800a49c:	683e      	ldr	r6, [r7, #0]
 800a49e:	9311      	str	r3, [sp, #68]	; 0x44
 800a4a0:	2700      	movs	r7, #0
 800a4a2:	f045 0502 	orr.w	r5, r5, #2
 800a4a6:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	9202      	str	r2, [sp, #8]
 800a4ae:	e7c6      	b.n	800a43e <_vfprintf_r+0x826>
 800a4b0:	1d3b      	adds	r3, r7, #4
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	f8d7 9000 	ldr.w	r9, [r7]
 800a4be:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a4c2:	d00a      	beq.n	800a4da <_vfprintf_r+0x8c2>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4648      	mov	r0, r9
 800a4ca:	f7f5 fe99 	bl	8000200 <memchr>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f000 808c 	beq.w	800a5ec <_vfprintf_r+0x9d4>
 800a4d4:	eba0 0a09 	sub.w	sl, r0, r9
 800a4d8:	e5cb      	b.n	800a072 <_vfprintf_r+0x45a>
 800a4da:	4648      	mov	r0, r9
 800a4dc:	f7f5 fe82 	bl	80001e4 <strlen>
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	e5c6      	b.n	800a072 <_vfprintf_r+0x45a>
 800a4e4:	0800d29c 	.word	0x0800d29c
 800a4e8:	0800d2ac 	.word	0x0800d2ac
 800a4ec:	0800d269 	.word	0x0800d269
 800a4f0:	f045 0510 	orr.w	r5, r5, #16
 800a4f4:	06ae      	lsls	r6, r5, #26
 800a4f6:	d509      	bpl.n	800a50c <_vfprintf_r+0x8f4>
 800a4f8:	3707      	adds	r7, #7
 800a4fa:	f027 0707 	bic.w	r7, r7, #7
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	2301      	movs	r3, #1
 800a50a:	e798      	b.n	800a43e <_vfprintf_r+0x826>
 800a50c:	1d3b      	adds	r3, r7, #4
 800a50e:	f015 0f10 	tst.w	r5, #16
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	d001      	beq.n	800a51a <_vfprintf_r+0x902>
 800a516:	683e      	ldr	r6, [r7, #0]
 800a518:	e002      	b.n	800a520 <_vfprintf_r+0x908>
 800a51a:	0668      	lsls	r0, r5, #25
 800a51c:	d5fb      	bpl.n	800a516 <_vfprintf_r+0x8fe>
 800a51e:	883e      	ldrh	r6, [r7, #0]
 800a520:	2700      	movs	r7, #0
 800a522:	e7f1      	b.n	800a508 <_vfprintf_r+0x8f0>
 800a524:	b10b      	cbz	r3, 800a52a <_vfprintf_r+0x912>
 800a526:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a52a:	4ba2      	ldr	r3, [pc, #648]	; (800a7b4 <_vfprintf_r+0xb9c>)
 800a52c:	e4ca      	b.n	8009ec4 <_vfprintf_r+0x2ac>
 800a52e:	1d3b      	adds	r3, r7, #4
 800a530:	f015 0f10 	tst.w	r5, #16
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	d001      	beq.n	800a53c <_vfprintf_r+0x924>
 800a538:	683e      	ldr	r6, [r7, #0]
 800a53a:	e002      	b.n	800a542 <_vfprintf_r+0x92a>
 800a53c:	066a      	lsls	r2, r5, #25
 800a53e:	d5fb      	bpl.n	800a538 <_vfprintf_r+0x920>
 800a540:	883e      	ldrh	r6, [r7, #0]
 800a542:	2700      	movs	r7, #0
 800a544:	e4ca      	b.n	8009edc <_vfprintf_r+0x2c4>
 800a546:	464b      	mov	r3, r9
 800a548:	e374      	b.n	800ac34 <_vfprintf_r+0x101c>
 800a54a:	2f00      	cmp	r7, #0
 800a54c:	bf08      	it	eq
 800a54e:	2e0a      	cmpeq	r6, #10
 800a550:	d205      	bcs.n	800a55e <_vfprintf_r+0x946>
 800a552:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800a556:	3630      	adds	r6, #48	; 0x30
 800a558:	f809 6d41 	strb.w	r6, [r9, #-65]!
 800a55c:	e385      	b.n	800ac6a <_vfprintf_r+0x1052>
 800a55e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800a562:	4630      	mov	r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	220a      	movs	r2, #10
 800a568:	2300      	movs	r3, #0
 800a56a:	f7f6 fb49 	bl	8000c00 <__aeabi_uldivmod>
 800a56e:	3230      	adds	r2, #48	; 0x30
 800a570:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800a574:	2300      	movs	r3, #0
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	220a      	movs	r2, #10
 800a57c:	f7f6 fb40 	bl	8000c00 <__aeabi_uldivmod>
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	ea56 0307 	orrs.w	r3, r6, r7
 800a588:	d1eb      	bne.n	800a562 <_vfprintf_r+0x94a>
 800a58a:	e36e      	b.n	800ac6a <_vfprintf_r+0x1052>
 800a58c:	2600      	movs	r6, #0
 800a58e:	2700      	movs	r7, #0
 800a590:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800a594:	f006 030f 	and.w	r3, r6, #15
 800a598:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a59a:	5cd3      	ldrb	r3, [r2, r3]
 800a59c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a5a0:	0933      	lsrs	r3, r6, #4
 800a5a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800a5a6:	093a      	lsrs	r2, r7, #4
 800a5a8:	461e      	mov	r6, r3
 800a5aa:	4617      	mov	r7, r2
 800a5ac:	ea56 0307 	orrs.w	r3, r6, r7
 800a5b0:	d1f0      	bne.n	800a594 <_vfprintf_r+0x97c>
 800a5b2:	e35a      	b.n	800ac6a <_vfprintf_r+0x1052>
 800a5b4:	b93b      	cbnz	r3, 800a5c6 <_vfprintf_r+0x9ae>
 800a5b6:	07e8      	lsls	r0, r5, #31
 800a5b8:	d505      	bpl.n	800a5c6 <_vfprintf_r+0x9ae>
 800a5ba:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800a5be:	2330      	movs	r3, #48	; 0x30
 800a5c0:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800a5c4:	e351      	b.n	800ac6a <_vfprintf_r+0x1052>
 800a5c6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800a5ca:	e34e      	b.n	800ac6a <_vfprintf_r+0x1052>
 800a5cc:	b10b      	cbz	r3, 800a5d2 <_vfprintf_r+0x9ba>
 800a5ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 8302 	beq.w	800abde <_vfprintf_r+0xfc6>
 800a5da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a5de:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a5e8:	9704      	str	r7, [sp, #16]
 800a5ea:	e4e9      	b.n	8009fc0 <_vfprintf_r+0x3a8>
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	e540      	b.n	800a072 <_vfprintf_r+0x45a>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	6063      	str	r3, [r4, #4]
 800a5f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f6:	3310      	adds	r3, #16
 800a5f8:	9321      	str	r3, [sp, #132]	; 0x84
 800a5fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	2b07      	cmp	r3, #7
 800a600:	9320      	str	r3, [sp, #128]	; 0x80
 800a602:	dc02      	bgt.n	800a60a <_vfprintf_r+0x9f2>
 800a604:	3408      	adds	r4, #8
 800a606:	3f10      	subs	r7, #16
 800a608:	e61a      	b.n	800a240 <_vfprintf_r+0x628>
 800a60a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a60c:	4641      	mov	r1, r8
 800a60e:	4658      	mov	r0, fp
 800a610:	f002 f9ec 	bl	800c9ec <__sprint_r>
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 82ba 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a61a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a61c:	e7f3      	b.n	800a606 <_vfprintf_r+0x9ee>
 800a61e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a620:	4641      	mov	r1, r8
 800a622:	4658      	mov	r0, fp
 800a624:	f002 f9e2 	bl	800c9ec <__sprint_r>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f040 82b0 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a62e:	ac2c      	add	r4, sp, #176	; 0xb0
 800a630:	e616      	b.n	800a260 <_vfprintf_r+0x648>
 800a632:	aa1f      	add	r2, sp, #124	; 0x7c
 800a634:	4641      	mov	r1, r8
 800a636:	4658      	mov	r0, fp
 800a638:	f002 f9d8 	bl	800c9ec <__sprint_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 82a6 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a642:	ac2c      	add	r4, sp, #176	; 0xb0
 800a644:	e61e      	b.n	800a284 <_vfprintf_r+0x66c>
 800a646:	aa1f      	add	r2, sp, #124	; 0x7c
 800a648:	4641      	mov	r1, r8
 800a64a:	4658      	mov	r0, fp
 800a64c:	f002 f9ce 	bl	800c9ec <__sprint_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	f040 829c 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a656:	ac2c      	add	r4, sp, #176	; 0xb0
 800a658:	e624      	b.n	800a2a4 <_vfprintf_r+0x68c>
 800a65a:	2210      	movs	r2, #16
 800a65c:	6062      	str	r2, [r4, #4]
 800a65e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a660:	3210      	adds	r2, #16
 800a662:	9221      	str	r2, [sp, #132]	; 0x84
 800a664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a666:	3201      	adds	r2, #1
 800a668:	2a07      	cmp	r2, #7
 800a66a:	9220      	str	r2, [sp, #128]	; 0x80
 800a66c:	dc02      	bgt.n	800a674 <_vfprintf_r+0xa5c>
 800a66e:	3408      	adds	r4, #8
 800a670:	3f10      	subs	r7, #16
 800a672:	e620      	b.n	800a2b6 <_vfprintf_r+0x69e>
 800a674:	aa1f      	add	r2, sp, #124	; 0x7c
 800a676:	4641      	mov	r1, r8
 800a678:	4658      	mov	r0, fp
 800a67a:	9314      	str	r3, [sp, #80]	; 0x50
 800a67c:	f002 f9b6 	bl	800c9ec <__sprint_r>
 800a680:	2800      	cmp	r0, #0
 800a682:	f040 8284 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a686:	ac2c      	add	r4, sp, #176	; 0xb0
 800a688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a68a:	e7f1      	b.n	800a670 <_vfprintf_r+0xa58>
 800a68c:	aa1f      	add	r2, sp, #124	; 0x7c
 800a68e:	4641      	mov	r1, r8
 800a690:	4658      	mov	r0, fp
 800a692:	f002 f9ab 	bl	800c9ec <__sprint_r>
 800a696:	2800      	cmp	r0, #0
 800a698:	f040 8279 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a69c:	ac2c      	add	r4, sp, #176	; 0xb0
 800a69e:	e619      	b.n	800a2d4 <_vfprintf_r+0x6bc>
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6a6:	3310      	adds	r3, #16
 800a6a8:	9321      	str	r3, [sp, #132]	; 0x84
 800a6aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	2b07      	cmp	r3, #7
 800a6b0:	9320      	str	r3, [sp, #128]	; 0x80
 800a6b2:	dc02      	bgt.n	800a6ba <_vfprintf_r+0xaa2>
 800a6b4:	3408      	adds	r4, #8
 800a6b6:	3e10      	subs	r6, #16
 800a6b8:	e611      	b.n	800a2de <_vfprintf_r+0x6c6>
 800a6ba:	aa1f      	add	r2, sp, #124	; 0x7c
 800a6bc:	4641      	mov	r1, r8
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f002 f994 	bl	800c9ec <__sprint_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 8262 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a6ca:	ac2c      	add	r4, sp, #176	; 0xb0
 800a6cc:	e7f3      	b.n	800a6b6 <_vfprintf_r+0xa9e>
 800a6ce:	aa1f      	add	r2, sp, #124	; 0x7c
 800a6d0:	4641      	mov	r1, r8
 800a6d2:	4658      	mov	r0, fp
 800a6d4:	f002 f98a 	bl	800c9ec <__sprint_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f040 8258 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a6de:	ac2c      	add	r4, sp, #176	; 0xb0
 800a6e0:	e60c      	b.n	800a2fc <_vfprintf_r+0x6e4>
 800a6e2:	9b02      	ldr	r3, [sp, #8]
 800a6e4:	2b65      	cmp	r3, #101	; 0x65
 800a6e6:	f340 81ad 	ble.w	800aa44 <_vfprintf_r+0xe2c>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6f2:	f7f6 f9f5 	bl	8000ae0 <__aeabi_dcmpeq>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d062      	beq.n	800a7c0 <_vfprintf_r+0xba8>
 800a6fa:	4b2f      	ldr	r3, [pc, #188]	; (800a7b8 <_vfprintf_r+0xba0>)
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	2301      	movs	r3, #1
 800a700:	6063      	str	r3, [r4, #4]
 800a702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a704:	3301      	adds	r3, #1
 800a706:	9321      	str	r3, [sp, #132]	; 0x84
 800a708:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a70a:	3301      	adds	r3, #1
 800a70c:	2b07      	cmp	r3, #7
 800a70e:	9320      	str	r3, [sp, #128]	; 0x80
 800a710:	dc25      	bgt.n	800a75e <_vfprintf_r+0xb46>
 800a712:	3408      	adds	r4, #8
 800a714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a716:	9a03      	ldr	r2, [sp, #12]
 800a718:	4293      	cmp	r3, r2
 800a71a:	db02      	blt.n	800a722 <_vfprintf_r+0xb0a>
 800a71c:	07ea      	lsls	r2, r5, #31
 800a71e:	f57f ae04 	bpl.w	800a32a <_vfprintf_r+0x712>
 800a722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a72e:	4413      	add	r3, r2
 800a730:	9321      	str	r3, [sp, #132]	; 0x84
 800a732:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a734:	3301      	adds	r3, #1
 800a736:	2b07      	cmp	r3, #7
 800a738:	9320      	str	r3, [sp, #128]	; 0x80
 800a73a:	dc1a      	bgt.n	800a772 <_vfprintf_r+0xb5a>
 800a73c:	3408      	adds	r4, #8
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	1e5e      	subs	r6, r3, #1
 800a742:	2e00      	cmp	r6, #0
 800a744:	f77f adf1 	ble.w	800a32a <_vfprintf_r+0x712>
 800a748:	4f1c      	ldr	r7, [pc, #112]	; (800a7bc <_vfprintf_r+0xba4>)
 800a74a:	f04f 0910 	mov.w	r9, #16
 800a74e:	2e10      	cmp	r6, #16
 800a750:	6027      	str	r7, [r4, #0]
 800a752:	dc18      	bgt.n	800a786 <_vfprintf_r+0xb6e>
 800a754:	6066      	str	r6, [r4, #4]
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	441e      	add	r6, r3
 800a75a:	9621      	str	r6, [sp, #132]	; 0x84
 800a75c:	e5d6      	b.n	800a30c <_vfprintf_r+0x6f4>
 800a75e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a760:	4641      	mov	r1, r8
 800a762:	4658      	mov	r0, fp
 800a764:	f002 f942 	bl	800c9ec <__sprint_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	f040 8210 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a76e:	ac2c      	add	r4, sp, #176	; 0xb0
 800a770:	e7d0      	b.n	800a714 <_vfprintf_r+0xafc>
 800a772:	aa1f      	add	r2, sp, #124	; 0x7c
 800a774:	4641      	mov	r1, r8
 800a776:	4658      	mov	r0, fp
 800a778:	f002 f938 	bl	800c9ec <__sprint_r>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f040 8206 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a782:	ac2c      	add	r4, sp, #176	; 0xb0
 800a784:	e7db      	b.n	800a73e <_vfprintf_r+0xb26>
 800a786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a788:	f8c4 9004 	str.w	r9, [r4, #4]
 800a78c:	3310      	adds	r3, #16
 800a78e:	9321      	str	r3, [sp, #132]	; 0x84
 800a790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a792:	3301      	adds	r3, #1
 800a794:	2b07      	cmp	r3, #7
 800a796:	9320      	str	r3, [sp, #128]	; 0x80
 800a798:	dc02      	bgt.n	800a7a0 <_vfprintf_r+0xb88>
 800a79a:	3408      	adds	r4, #8
 800a79c:	3e10      	subs	r6, #16
 800a79e:	e7d6      	b.n	800a74e <_vfprintf_r+0xb36>
 800a7a0:	aa1f      	add	r2, sp, #124	; 0x7c
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	4658      	mov	r0, fp
 800a7a6:	f002 f921 	bl	800c9ec <__sprint_r>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f040 81ef 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a7b0:	ac2c      	add	r4, sp, #176	; 0xb0
 800a7b2:	e7f3      	b.n	800a79c <_vfprintf_r+0xb84>
 800a7b4:	0800d269 	.word	0x0800d269
 800a7b8:	0800d27a 	.word	0x0800d27a
 800a7bc:	0800d2ac 	.word	0x0800d2ac
 800a7c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dc7a      	bgt.n	800a8bc <_vfprintf_r+0xca4>
 800a7c6:	4b9d      	ldr	r3, [pc, #628]	; (800aa3c <_vfprintf_r+0xe24>)
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	9321      	str	r3, [sp, #132]	; 0x84
 800a7d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	2b07      	cmp	r3, #7
 800a7da:	9320      	str	r3, [sp, #128]	; 0x80
 800a7dc:	dc44      	bgt.n	800a868 <_vfprintf_r+0xc50>
 800a7de:	3408      	adds	r4, #8
 800a7e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7e2:	b923      	cbnz	r3, 800a7ee <_vfprintf_r+0xbd6>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	b913      	cbnz	r3, 800a7ee <_vfprintf_r+0xbd6>
 800a7e8:	07eb      	lsls	r3, r5, #31
 800a7ea:	f57f ad9e 	bpl.w	800a32a <_vfprintf_r+0x712>
 800a7ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f4:	6063      	str	r3, [r4, #4]
 800a7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7fa:	4413      	add	r3, r2
 800a7fc:	9321      	str	r3, [sp, #132]	; 0x84
 800a7fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a800:	3301      	adds	r3, #1
 800a802:	2b07      	cmp	r3, #7
 800a804:	9320      	str	r3, [sp, #128]	; 0x80
 800a806:	dc39      	bgt.n	800a87c <_vfprintf_r+0xc64>
 800a808:	f104 0308 	add.w	r3, r4, #8
 800a80c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a80e:	2e00      	cmp	r6, #0
 800a810:	da19      	bge.n	800a846 <_vfprintf_r+0xc2e>
 800a812:	4f8b      	ldr	r7, [pc, #556]	; (800aa40 <_vfprintf_r+0xe28>)
 800a814:	4276      	negs	r6, r6
 800a816:	2410      	movs	r4, #16
 800a818:	2e10      	cmp	r6, #16
 800a81a:	601f      	str	r7, [r3, #0]
 800a81c:	dc38      	bgt.n	800a890 <_vfprintf_r+0xc78>
 800a81e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a820:	605e      	str	r6, [r3, #4]
 800a822:	4416      	add	r6, r2
 800a824:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a826:	9621      	str	r6, [sp, #132]	; 0x84
 800a828:	3201      	adds	r2, #1
 800a82a:	2a07      	cmp	r2, #7
 800a82c:	f103 0308 	add.w	r3, r3, #8
 800a830:	9220      	str	r2, [sp, #128]	; 0x80
 800a832:	dd08      	ble.n	800a846 <_vfprintf_r+0xc2e>
 800a834:	aa1f      	add	r2, sp, #124	; 0x7c
 800a836:	4641      	mov	r1, r8
 800a838:	4658      	mov	r0, fp
 800a83a:	f002 f8d7 	bl	800c9ec <__sprint_r>
 800a83e:	2800      	cmp	r0, #0
 800a840:	f040 81a5 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a844:	ab2c      	add	r3, sp, #176	; 0xb0
 800a846:	9a03      	ldr	r2, [sp, #12]
 800a848:	605a      	str	r2, [r3, #4]
 800a84a:	9903      	ldr	r1, [sp, #12]
 800a84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a84e:	f8c3 9000 	str.w	r9, [r3]
 800a852:	440a      	add	r2, r1
 800a854:	9221      	str	r2, [sp, #132]	; 0x84
 800a856:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a858:	3201      	adds	r2, #1
 800a85a:	2a07      	cmp	r2, #7
 800a85c:	9220      	str	r2, [sp, #128]	; 0x80
 800a85e:	f73f ad5b 	bgt.w	800a318 <_vfprintf_r+0x700>
 800a862:	f103 0408 	add.w	r4, r3, #8
 800a866:	e560      	b.n	800a32a <_vfprintf_r+0x712>
 800a868:	aa1f      	add	r2, sp, #124	; 0x7c
 800a86a:	4641      	mov	r1, r8
 800a86c:	4658      	mov	r0, fp
 800a86e:	f002 f8bd 	bl	800c9ec <__sprint_r>
 800a872:	2800      	cmp	r0, #0
 800a874:	f040 818b 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a878:	ac2c      	add	r4, sp, #176	; 0xb0
 800a87a:	e7b1      	b.n	800a7e0 <_vfprintf_r+0xbc8>
 800a87c:	aa1f      	add	r2, sp, #124	; 0x7c
 800a87e:	4641      	mov	r1, r8
 800a880:	4658      	mov	r0, fp
 800a882:	f002 f8b3 	bl	800c9ec <__sprint_r>
 800a886:	2800      	cmp	r0, #0
 800a888:	f040 8181 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a88c:	ab2c      	add	r3, sp, #176	; 0xb0
 800a88e:	e7bd      	b.n	800a80c <_vfprintf_r+0xbf4>
 800a890:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a892:	605c      	str	r4, [r3, #4]
 800a894:	3210      	adds	r2, #16
 800a896:	9221      	str	r2, [sp, #132]	; 0x84
 800a898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a89a:	3201      	adds	r2, #1
 800a89c:	2a07      	cmp	r2, #7
 800a89e:	9220      	str	r2, [sp, #128]	; 0x80
 800a8a0:	dc02      	bgt.n	800a8a8 <_vfprintf_r+0xc90>
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	3e10      	subs	r6, #16
 800a8a6:	e7b7      	b.n	800a818 <_vfprintf_r+0xc00>
 800a8a8:	aa1f      	add	r2, sp, #124	; 0x7c
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f002 f89d 	bl	800c9ec <__sprint_r>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	f040 816b 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a8b8:	ab2c      	add	r3, sp, #176	; 0xb0
 800a8ba:	e7f3      	b.n	800a8a4 <_vfprintf_r+0xc8c>
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	9a03      	ldr	r2, [sp, #12]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bfa8      	it	ge
 800a8c4:	4613      	movge	r3, r2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	461e      	mov	r6, r3
 800a8ca:	dd0b      	ble.n	800a8e4 <_vfprintf_r+0xccc>
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d0:	f8c4 9000 	str.w	r9, [r4]
 800a8d4:	4433      	add	r3, r6
 800a8d6:	9321      	str	r3, [sp, #132]	; 0x84
 800a8d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a8da:	3301      	adds	r3, #1
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	9320      	str	r3, [sp, #128]	; 0x80
 800a8e0:	dc62      	bgt.n	800a9a8 <_vfprintf_r+0xd90>
 800a8e2:	3408      	adds	r4, #8
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	bfa8      	it	ge
 800a8ea:	1b9b      	subge	r3, r3, r6
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	461e      	mov	r6, r3
 800a8f0:	dd0f      	ble.n	800a912 <_vfprintf_r+0xcfa>
 800a8f2:	4f53      	ldr	r7, [pc, #332]	; (800aa40 <_vfprintf_r+0xe28>)
 800a8f4:	f04f 0a10 	mov.w	sl, #16
 800a8f8:	2e10      	cmp	r6, #16
 800a8fa:	6027      	str	r7, [r4, #0]
 800a8fc:	dc5e      	bgt.n	800a9bc <_vfprintf_r+0xda4>
 800a8fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a900:	6066      	str	r6, [r4, #4]
 800a902:	441e      	add	r6, r3
 800a904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a906:	9621      	str	r6, [sp, #132]	; 0x84
 800a908:	3301      	adds	r3, #1
 800a90a:	2b07      	cmp	r3, #7
 800a90c:	9320      	str	r3, [sp, #128]	; 0x80
 800a90e:	dc6c      	bgt.n	800a9ea <_vfprintf_r+0xdd2>
 800a910:	3408      	adds	r4, #8
 800a912:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a914:	9a03      	ldr	r2, [sp, #12]
 800a916:	4293      	cmp	r3, r2
 800a918:	db01      	blt.n	800a91e <_vfprintf_r+0xd06>
 800a91a:	07ef      	lsls	r7, r5, #31
 800a91c:	d50d      	bpl.n	800a93a <_vfprintf_r+0xd22>
 800a91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a924:	6063      	str	r3, [r4, #4]
 800a926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a92a:	4413      	add	r3, r2
 800a92c:	9321      	str	r3, [sp, #132]	; 0x84
 800a92e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a930:	3301      	adds	r3, #1
 800a932:	2b07      	cmp	r3, #7
 800a934:	9320      	str	r3, [sp, #128]	; 0x80
 800a936:	dc62      	bgt.n	800a9fe <_vfprintf_r+0xde6>
 800a938:	3408      	adds	r4, #8
 800a93a:	9b03      	ldr	r3, [sp, #12]
 800a93c:	9a08      	ldr	r2, [sp, #32]
 800a93e:	1a9e      	subs	r6, r3, r2
 800a940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a942:	9a03      	ldr	r2, [sp, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	429e      	cmp	r6, r3
 800a948:	bfa8      	it	ge
 800a94a:	461e      	movge	r6, r3
 800a94c:	2e00      	cmp	r6, #0
 800a94e:	dd0c      	ble.n	800a96a <_vfprintf_r+0xd52>
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	444b      	add	r3, r9
 800a954:	e884 0048 	stmia.w	r4, {r3, r6}
 800a958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a95a:	4433      	add	r3, r6
 800a95c:	9321      	str	r3, [sp, #132]	; 0x84
 800a95e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a960:	3301      	adds	r3, #1
 800a962:	2b07      	cmp	r3, #7
 800a964:	9320      	str	r3, [sp, #128]	; 0x80
 800a966:	dc54      	bgt.n	800aa12 <_vfprintf_r+0xdfa>
 800a968:	3408      	adds	r4, #8
 800a96a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a96c:	9a03      	ldr	r2, [sp, #12]
 800a96e:	2e00      	cmp	r6, #0
 800a970:	eba2 0303 	sub.w	r3, r2, r3
 800a974:	bfac      	ite	ge
 800a976:	1b9e      	subge	r6, r3, r6
 800a978:	461e      	movlt	r6, r3
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	f77f acd5 	ble.w	800a32a <_vfprintf_r+0x712>
 800a980:	4f2f      	ldr	r7, [pc, #188]	; (800aa40 <_vfprintf_r+0xe28>)
 800a982:	f04f 0910 	mov.w	r9, #16
 800a986:	2e10      	cmp	r6, #16
 800a988:	6027      	str	r7, [r4, #0]
 800a98a:	f77f aee3 	ble.w	800a754 <_vfprintf_r+0xb3c>
 800a98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a990:	f8c4 9004 	str.w	r9, [r4, #4]
 800a994:	3310      	adds	r3, #16
 800a996:	9321      	str	r3, [sp, #132]	; 0x84
 800a998:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a99a:	3301      	adds	r3, #1
 800a99c:	2b07      	cmp	r3, #7
 800a99e:	9320      	str	r3, [sp, #128]	; 0x80
 800a9a0:	dc41      	bgt.n	800aa26 <_vfprintf_r+0xe0e>
 800a9a2:	3408      	adds	r4, #8
 800a9a4:	3e10      	subs	r6, #16
 800a9a6:	e7ee      	b.n	800a986 <_vfprintf_r+0xd6e>
 800a9a8:	aa1f      	add	r2, sp, #124	; 0x7c
 800a9aa:	4641      	mov	r1, r8
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f002 f81d 	bl	800c9ec <__sprint_r>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f040 80eb 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a9b8:	ac2c      	add	r4, sp, #176	; 0xb0
 800a9ba:	e793      	b.n	800a8e4 <_vfprintf_r+0xccc>
 800a9bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9be:	f8c4 a004 	str.w	sl, [r4, #4]
 800a9c2:	3310      	adds	r3, #16
 800a9c4:	9321      	str	r3, [sp, #132]	; 0x84
 800a9c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	2b07      	cmp	r3, #7
 800a9cc:	9320      	str	r3, [sp, #128]	; 0x80
 800a9ce:	dc02      	bgt.n	800a9d6 <_vfprintf_r+0xdbe>
 800a9d0:	3408      	adds	r4, #8
 800a9d2:	3e10      	subs	r6, #16
 800a9d4:	e790      	b.n	800a8f8 <_vfprintf_r+0xce0>
 800a9d6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a9d8:	4641      	mov	r1, r8
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f002 f806 	bl	800c9ec <__sprint_r>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f040 80d4 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a9e6:	ac2c      	add	r4, sp, #176	; 0xb0
 800a9e8:	e7f3      	b.n	800a9d2 <_vfprintf_r+0xdba>
 800a9ea:	aa1f      	add	r2, sp, #124	; 0x7c
 800a9ec:	4641      	mov	r1, r8
 800a9ee:	4658      	mov	r0, fp
 800a9f0:	f001 fffc 	bl	800c9ec <__sprint_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	f040 80ca 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800a9fa:	ac2c      	add	r4, sp, #176	; 0xb0
 800a9fc:	e789      	b.n	800a912 <_vfprintf_r+0xcfa>
 800a9fe:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa00:	4641      	mov	r1, r8
 800aa02:	4658      	mov	r0, fp
 800aa04:	f001 fff2 	bl	800c9ec <__sprint_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f040 80c0 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800aa0e:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa10:	e793      	b.n	800a93a <_vfprintf_r+0xd22>
 800aa12:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa14:	4641      	mov	r1, r8
 800aa16:	4658      	mov	r0, fp
 800aa18:	f001 ffe8 	bl	800c9ec <__sprint_r>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f040 80b6 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800aa22:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa24:	e7a1      	b.n	800a96a <_vfprintf_r+0xd52>
 800aa26:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa28:	4641      	mov	r1, r8
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	f001 ffde 	bl	800c9ec <__sprint_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f040 80ac 	bne.w	800ab8e <_vfprintf_r+0xf76>
 800aa36:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa38:	e7b4      	b.n	800a9a4 <_vfprintf_r+0xd8c>
 800aa3a:	bf00      	nop
 800aa3c:	0800d27a 	.word	0x0800d27a
 800aa40:	0800d2ac 	.word	0x0800d2ac
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	dc01      	bgt.n	800aa4e <_vfprintf_r+0xe36>
 800aa4a:	07ee      	lsls	r6, r5, #31
 800aa4c:	d576      	bpl.n	800ab3c <_vfprintf_r+0xf24>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa54:	f8c4 9000 	str.w	r9, [r4]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	9321      	str	r3, [sp, #132]	; 0x84
 800aa5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa5e:	3301      	adds	r3, #1
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	9320      	str	r3, [sp, #128]	; 0x80
 800aa64:	dc36      	bgt.n	800aad4 <_vfprintf_r+0xebc>
 800aa66:	3408      	adds	r4, #8
 800aa68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6e:	6063      	str	r3, [r4, #4]
 800aa70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa74:	4413      	add	r3, r2
 800aa76:	9321      	str	r3, [sp, #132]	; 0x84
 800aa78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	2b07      	cmp	r3, #7
 800aa7e:	9320      	str	r3, [sp, #128]	; 0x80
 800aa80:	dc31      	bgt.n	800aae6 <_vfprintf_r+0xece>
 800aa82:	3408      	adds	r4, #8
 800aa84:	2300      	movs	r3, #0
 800aa86:	2200      	movs	r2, #0
 800aa88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8c:	f7f6 f828 	bl	8000ae0 <__aeabi_dcmpeq>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	1e5e      	subs	r6, r3, #1
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d12f      	bne.n	800aaf8 <_vfprintf_r+0xee0>
 800aa98:	f109 0301 	add.w	r3, r9, #1
 800aa9c:	e884 0048 	stmia.w	r4, {r3, r6}
 800aaa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa2:	9a03      	ldr	r2, [sp, #12]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	4413      	add	r3, r2
 800aaa8:	9321      	str	r3, [sp, #132]	; 0x84
 800aaaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aaac:	3301      	adds	r3, #1
 800aaae:	2b07      	cmp	r3, #7
 800aab0:	9320      	str	r3, [sp, #128]	; 0x80
 800aab2:	dd4a      	ble.n	800ab4a <_vfprintf_r+0xf32>
 800aab4:	aa1f      	add	r2, sp, #124	; 0x7c
 800aab6:	4641      	mov	r1, r8
 800aab8:	4658      	mov	r0, fp
 800aaba:	f001 ff97 	bl	800c9ec <__sprint_r>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d165      	bne.n	800ab8e <_vfprintf_r+0xf76>
 800aac2:	ac2c      	add	r4, sp, #176	; 0xb0
 800aac4:	ab1b      	add	r3, sp, #108	; 0x6c
 800aac6:	6023      	str	r3, [r4, #0]
 800aac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaca:	6063      	str	r3, [r4, #4]
 800aacc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aad0:	4413      	add	r3, r2
 800aad2:	e41a      	b.n	800a30a <_vfprintf_r+0x6f2>
 800aad4:	aa1f      	add	r2, sp, #124	; 0x7c
 800aad6:	4641      	mov	r1, r8
 800aad8:	4658      	mov	r0, fp
 800aada:	f001 ff87 	bl	800c9ec <__sprint_r>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d155      	bne.n	800ab8e <_vfprintf_r+0xf76>
 800aae2:	ac2c      	add	r4, sp, #176	; 0xb0
 800aae4:	e7c0      	b.n	800aa68 <_vfprintf_r+0xe50>
 800aae6:	aa1f      	add	r2, sp, #124	; 0x7c
 800aae8:	4641      	mov	r1, r8
 800aaea:	4658      	mov	r0, fp
 800aaec:	f001 ff7e 	bl	800c9ec <__sprint_r>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d14c      	bne.n	800ab8e <_vfprintf_r+0xf76>
 800aaf4:	ac2c      	add	r4, sp, #176	; 0xb0
 800aaf6:	e7c5      	b.n	800aa84 <_vfprintf_r+0xe6c>
 800aaf8:	2e00      	cmp	r6, #0
 800aafa:	dde3      	ble.n	800aac4 <_vfprintf_r+0xeac>
 800aafc:	4f60      	ldr	r7, [pc, #384]	; (800ac80 <_vfprintf_r+0x1068>)
 800aafe:	f04f 0910 	mov.w	r9, #16
 800ab02:	2e10      	cmp	r6, #16
 800ab04:	6027      	str	r7, [r4, #0]
 800ab06:	dc04      	bgt.n	800ab12 <_vfprintf_r+0xefa>
 800ab08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab0a:	6066      	str	r6, [r4, #4]
 800ab0c:	441e      	add	r6, r3
 800ab0e:	9621      	str	r6, [sp, #132]	; 0x84
 800ab10:	e7cb      	b.n	800aaaa <_vfprintf_r+0xe92>
 800ab12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab14:	f8c4 9004 	str.w	r9, [r4, #4]
 800ab18:	3310      	adds	r3, #16
 800ab1a:	9321      	str	r3, [sp, #132]	; 0x84
 800ab1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab1e:	3301      	adds	r3, #1
 800ab20:	2b07      	cmp	r3, #7
 800ab22:	9320      	str	r3, [sp, #128]	; 0x80
 800ab24:	dc02      	bgt.n	800ab2c <_vfprintf_r+0xf14>
 800ab26:	3408      	adds	r4, #8
 800ab28:	3e10      	subs	r6, #16
 800ab2a:	e7ea      	b.n	800ab02 <_vfprintf_r+0xeea>
 800ab2c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab2e:	4641      	mov	r1, r8
 800ab30:	4658      	mov	r0, fp
 800ab32:	f001 ff5b 	bl	800c9ec <__sprint_r>
 800ab36:	bb50      	cbnz	r0, 800ab8e <_vfprintf_r+0xf76>
 800ab38:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab3a:	e7f5      	b.n	800ab28 <_vfprintf_r+0xf10>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab42:	f8c4 9000 	str.w	r9, [r4]
 800ab46:	3301      	adds	r3, #1
 800ab48:	e7ae      	b.n	800aaa8 <_vfprintf_r+0xe90>
 800ab4a:	3408      	adds	r4, #8
 800ab4c:	e7ba      	b.n	800aac4 <_vfprintf_r+0xeac>
 800ab4e:	3408      	adds	r4, #8
 800ab50:	f7ff bbeb 	b.w	800a32a <_vfprintf_r+0x712>
 800ab54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab58:	1a9d      	subs	r5, r3, r2
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	f77f abe8 	ble.w	800a330 <_vfprintf_r+0x718>
 800ab60:	2610      	movs	r6, #16
 800ab62:	4b48      	ldr	r3, [pc, #288]	; (800ac84 <_vfprintf_r+0x106c>)
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	2d10      	cmp	r5, #16
 800ab68:	dc24      	bgt.n	800abb4 <_vfprintf_r+0xf9c>
 800ab6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab6c:	6065      	str	r5, [r4, #4]
 800ab6e:	441d      	add	r5, r3
 800ab70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab72:	9521      	str	r5, [sp, #132]	; 0x84
 800ab74:	3301      	adds	r3, #1
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	9320      	str	r3, [sp, #128]	; 0x80
 800ab7a:	f77f abd9 	ble.w	800a330 <_vfprintf_r+0x718>
 800ab7e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab80:	4641      	mov	r1, r8
 800ab82:	4658      	mov	r0, fp
 800ab84:	f001 ff32 	bl	800c9ec <__sprint_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f43f abd1 	beq.w	800a330 <_vfprintf_r+0x718>
 800ab8e:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800ab92:	07d9      	lsls	r1, r3, #31
 800ab94:	d407      	bmi.n	800aba6 <_vfprintf_r+0xf8e>
 800ab96:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ab9a:	059a      	lsls	r2, r3, #22
 800ab9c:	d403      	bmi.n	800aba6 <_vfprintf_r+0xf8e>
 800ab9e:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800aba2:	f7fd fd1a 	bl	80085da <__retarget_lock_release_recursive>
 800aba6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800abaa:	065b      	lsls	r3, r3, #25
 800abac:	f57f a8af 	bpl.w	8009d0e <_vfprintf_r+0xf6>
 800abb0:	f7ff b882 	b.w	8009cb8 <_vfprintf_r+0xa0>
 800abb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abb6:	6066      	str	r6, [r4, #4]
 800abb8:	3310      	adds	r3, #16
 800abba:	9321      	str	r3, [sp, #132]	; 0x84
 800abbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800abbe:	3301      	adds	r3, #1
 800abc0:	2b07      	cmp	r3, #7
 800abc2:	9320      	str	r3, [sp, #128]	; 0x80
 800abc4:	dc02      	bgt.n	800abcc <_vfprintf_r+0xfb4>
 800abc6:	3408      	adds	r4, #8
 800abc8:	3d10      	subs	r5, #16
 800abca:	e7ca      	b.n	800ab62 <_vfprintf_r+0xf4a>
 800abcc:	aa1f      	add	r2, sp, #124	; 0x7c
 800abce:	4641      	mov	r1, r8
 800abd0:	4658      	mov	r0, fp
 800abd2:	f001 ff0b 	bl	800c9ec <__sprint_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1d9      	bne.n	800ab8e <_vfprintf_r+0xf76>
 800abda:	ac2c      	add	r4, sp, #176	; 0xb0
 800abdc:	e7f4      	b.n	800abc8 <_vfprintf_r+0xfb0>
 800abde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abe0:	b913      	cbnz	r3, 800abe8 <_vfprintf_r+0xfd0>
 800abe2:	2300      	movs	r3, #0
 800abe4:	9320      	str	r3, [sp, #128]	; 0x80
 800abe6:	e7d2      	b.n	800ab8e <_vfprintf_r+0xf76>
 800abe8:	aa1f      	add	r2, sp, #124	; 0x7c
 800abea:	4641      	mov	r1, r8
 800abec:	4658      	mov	r0, fp
 800abee:	f001 fefd 	bl	800c9ec <__sprint_r>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d0f5      	beq.n	800abe2 <_vfprintf_r+0xfca>
 800abf6:	e7ca      	b.n	800ab8e <_vfprintf_r+0xf76>
 800abf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abfc:	4610      	mov	r0, r2
 800abfe:	4619      	mov	r1, r3
 800ac00:	f7f5 ffa0 	bl	8000b44 <__aeabi_dcmpun>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f43f aa36 	beq.w	800a076 <_vfprintf_r+0x45e>
 800ac0a:	4b1f      	ldr	r3, [pc, #124]	; (800ac88 <_vfprintf_r+0x1070>)
 800ac0c:	4a1f      	ldr	r2, [pc, #124]	; (800ac8c <_vfprintf_r+0x1074>)
 800ac0e:	f7ff ba26 	b.w	800a05e <_vfprintf_r+0x446>
 800ac12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac14:	1a1b      	subs	r3, r3, r0
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	f7ff baa9 	b.w	800a16e <_vfprintf_r+0x556>
 800ac1c:	ea56 0207 	orrs.w	r2, r6, r7
 800ac20:	9508      	str	r5, [sp, #32]
 800ac22:	f43f ac1e 	beq.w	800a462 <_vfprintf_r+0x84a>
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	f43f ac8f 	beq.w	800a54a <_vfprintf_r+0x932>
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	f43f acaf 	beq.w	800a590 <_vfprintf_r+0x978>
 800ac32:	ab2c      	add	r3, sp, #176	; 0xb0
 800ac34:	08f1      	lsrs	r1, r6, #3
 800ac36:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800ac3a:	08f8      	lsrs	r0, r7, #3
 800ac3c:	f006 0207 	and.w	r2, r6, #7
 800ac40:	4607      	mov	r7, r0
 800ac42:	460e      	mov	r6, r1
 800ac44:	3230      	adds	r2, #48	; 0x30
 800ac46:	ea56 0107 	orrs.w	r1, r6, r7
 800ac4a:	f103 39ff 	add.w	r9, r3, #4294967295
 800ac4e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ac52:	f47f ac78 	bne.w	800a546 <_vfprintf_r+0x92e>
 800ac56:	9908      	ldr	r1, [sp, #32]
 800ac58:	07cd      	lsls	r5, r1, #31
 800ac5a:	d506      	bpl.n	800ac6a <_vfprintf_r+0x1052>
 800ac5c:	2a30      	cmp	r2, #48	; 0x30
 800ac5e:	d004      	beq.n	800ac6a <_vfprintf_r+0x1052>
 800ac60:	2230      	movs	r2, #48	; 0x30
 800ac62:	f809 2c01 	strb.w	r2, [r9, #-1]
 800ac66:	f1a3 0902 	sub.w	r9, r3, #2
 800ac6a:	4656      	mov	r6, sl
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800ac72:	9d08      	ldr	r5, [sp, #32]
 800ac74:	9308      	str	r3, [sp, #32]
 800ac76:	ebaa 0a09 	sub.w	sl, sl, r9
 800ac7a:	f7ff bac6 	b.w	800a20a <_vfprintf_r+0x5f2>
 800ac7e:	bf00      	nop
 800ac80:	0800d2ac 	.word	0x0800d2ac
 800ac84:	0800d29c 	.word	0x0800d29c
 800ac88:	0800d250 	.word	0x0800d250
 800ac8c:	0800d254 	.word	0x0800d254

0800ac90 <__sbprintf>:
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800ac98:	461f      	mov	r7, r3
 800ac9a:	8989      	ldrh	r1, [r1, #12]
 800ac9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac9e:	9319      	str	r3, [sp, #100]	; 0x64
 800aca0:	89e3      	ldrh	r3, [r4, #14]
 800aca2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aca6:	f021 0102 	bic.w	r1, r1, #2
 800acaa:	6a23      	ldr	r3, [r4, #32]
 800acac:	f8ad 100c 	strh.w	r1, [sp, #12]
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	a91a      	add	r1, sp, #104	; 0x68
 800acb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acb6:	930a      	str	r3, [sp, #40]	; 0x28
 800acb8:	4615      	mov	r5, r2
 800acba:	2300      	movs	r3, #0
 800acbc:	4606      	mov	r6, r0
 800acbe:	9100      	str	r1, [sp, #0]
 800acc0:	9104      	str	r1, [sp, #16]
 800acc2:	a816      	add	r0, sp, #88	; 0x58
 800acc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800acc8:	9102      	str	r1, [sp, #8]
 800acca:	9105      	str	r1, [sp, #20]
 800accc:	9306      	str	r3, [sp, #24]
 800acce:	f7fd fc81 	bl	80085d4 <__retarget_lock_init_recursive>
 800acd2:	462a      	mov	r2, r5
 800acd4:	463b      	mov	r3, r7
 800acd6:	4669      	mov	r1, sp
 800acd8:	4630      	mov	r0, r6
 800acda:	f7fe ff9d 	bl	8009c18 <_vfprintf_r>
 800acde:	1e05      	subs	r5, r0, #0
 800ace0:	db07      	blt.n	800acf2 <__sbprintf+0x62>
 800ace2:	4669      	mov	r1, sp
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7fd f9fb 	bl	80080e0 <_fflush_r>
 800acea:	2800      	cmp	r0, #0
 800acec:	bf18      	it	ne
 800acee:	f04f 35ff 	movne.w	r5, #4294967295
 800acf2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800acf6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800acf8:	065b      	lsls	r3, r3, #25
 800acfa:	bf42      	ittt	mi
 800acfc:	89a3      	ldrhmi	r3, [r4, #12]
 800acfe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ad02:	81a3      	strhmi	r3, [r4, #12]
 800ad04:	f7fd fc67 	bl	80085d6 <__retarget_lock_close_recursive>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad10 <_write_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4c07      	ldr	r4, [pc, #28]	; (800ad30 <_write_r+0x20>)
 800ad14:	4605      	mov	r5, r0
 800ad16:	4608      	mov	r0, r1
 800ad18:	4611      	mov	r1, r2
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	6022      	str	r2, [r4, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7fc ff32 	bl	8007b88 <_write>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_write_r+0x1e>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_write_r+0x1e>
 800ad2c:	602b      	str	r3, [r5, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20001dc8 	.word	0x20001dc8

0800ad34 <__swsetup_r>:
 800ad34:	4b32      	ldr	r3, [pc, #200]	; (800ae00 <__swsetup_r+0xcc>)
 800ad36:	b570      	push	{r4, r5, r6, lr}
 800ad38:	681d      	ldr	r5, [r3, #0]
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	b125      	cbz	r5, 800ad4a <__swsetup_r+0x16>
 800ad40:	69ab      	ldr	r3, [r5, #24]
 800ad42:	b913      	cbnz	r3, 800ad4a <__swsetup_r+0x16>
 800ad44:	4628      	mov	r0, r5
 800ad46:	f7fd fa71 	bl	800822c <__sinit>
 800ad4a:	4b2e      	ldr	r3, [pc, #184]	; (800ae04 <__swsetup_r+0xd0>)
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	d10f      	bne.n	800ad70 <__swsetup_r+0x3c>
 800ad50:	686c      	ldr	r4, [r5, #4]
 800ad52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	0715      	lsls	r5, r2, #28
 800ad5a:	d42c      	bmi.n	800adb6 <__swsetup_r+0x82>
 800ad5c:	06d0      	lsls	r0, r2, #27
 800ad5e:	d411      	bmi.n	800ad84 <__swsetup_r+0x50>
 800ad60:	2209      	movs	r2, #9
 800ad62:	6032      	str	r2, [r6, #0]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	4b25      	ldr	r3, [pc, #148]	; (800ae08 <__swsetup_r+0xd4>)
 800ad72:	429c      	cmp	r4, r3
 800ad74:	d101      	bne.n	800ad7a <__swsetup_r+0x46>
 800ad76:	68ac      	ldr	r4, [r5, #8]
 800ad78:	e7eb      	b.n	800ad52 <__swsetup_r+0x1e>
 800ad7a:	4b24      	ldr	r3, [pc, #144]	; (800ae0c <__swsetup_r+0xd8>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	bf08      	it	eq
 800ad80:	68ec      	ldreq	r4, [r5, #12]
 800ad82:	e7e6      	b.n	800ad52 <__swsetup_r+0x1e>
 800ad84:	0751      	lsls	r1, r2, #29
 800ad86:	d512      	bpl.n	800adae <__swsetup_r+0x7a>
 800ad88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad8a:	b141      	cbz	r1, 800ad9e <__swsetup_r+0x6a>
 800ad8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad90:	4299      	cmp	r1, r3
 800ad92:	d002      	beq.n	800ad9a <__swsetup_r+0x66>
 800ad94:	4630      	mov	r0, r6
 800ad96:	f7fd fb1f 	bl	80083d8 <_free_r>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	2300      	movs	r3, #0
 800ada8:	6063      	str	r3, [r4, #4]
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	f043 0308 	orr.w	r3, r3, #8
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	b94b      	cbnz	r3, 800adce <__swsetup_r+0x9a>
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc4:	d003      	beq.n	800adce <__swsetup_r+0x9a>
 800adc6:	4621      	mov	r1, r4
 800adc8:	4630      	mov	r0, r6
 800adca:	f001 f891 	bl	800bef0 <__smakebuf_r>
 800adce:	89a2      	ldrh	r2, [r4, #12]
 800add0:	f012 0301 	ands.w	r3, r2, #1
 800add4:	d00c      	beq.n	800adf0 <__swsetup_r+0xbc>
 800add6:	2300      	movs	r3, #0
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	6963      	ldr	r3, [r4, #20]
 800addc:	425b      	negs	r3, r3
 800adde:	61a3      	str	r3, [r4, #24]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	b953      	cbnz	r3, 800adfa <__swsetup_r+0xc6>
 800ade4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800adec:	d1ba      	bne.n	800ad64 <__swsetup_r+0x30>
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	0792      	lsls	r2, r2, #30
 800adf2:	bf58      	it	pl
 800adf4:	6963      	ldrpl	r3, [r4, #20]
 800adf6:	60a3      	str	r3, [r4, #8]
 800adf8:	e7f2      	b.n	800ade0 <__swsetup_r+0xac>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e7f7      	b.n	800adee <__swsetup_r+0xba>
 800adfe:	bf00      	nop
 800ae00:	2000003c 	.word	0x2000003c
 800ae04:	0800d204 	.word	0x0800d204
 800ae08:	0800d224 	.word	0x0800d224
 800ae0c:	0800d1e4 	.word	0x0800d1e4

0800ae10 <_close_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4c06      	ldr	r4, [pc, #24]	; (800ae2c <_close_r+0x1c>)
 800ae14:	2300      	movs	r3, #0
 800ae16:	4605      	mov	r5, r0
 800ae18:	4608      	mov	r0, r1
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	f7fc fedc 	bl	8007bd8 <_close>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_close_r+0x1a>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_close_r+0x1a>
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	20001dc8 	.word	0x20001dc8

0800ae30 <quorem>:
 800ae30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	6903      	ldr	r3, [r0, #16]
 800ae36:	690c      	ldr	r4, [r1, #16]
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	f300 8082 	bgt.w	800af44 <quorem+0x114>
 800ae40:	3c01      	subs	r4, #1
 800ae42:	f101 0714 	add.w	r7, r1, #20
 800ae46:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800ae4a:	f100 0614 	add.w	r6, r0, #20
 800ae4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ae52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ae56:	eb06 030e 	add.w	r3, r6, lr
 800ae5a:	3501      	adds	r5, #1
 800ae5c:	eb07 090e 	add.w	r9, r7, lr
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	fbb0 f5f5 	udiv	r5, r0, r5
 800ae66:	b395      	cbz	r5, 800aece <quorem+0x9e>
 800ae68:	f04f 0a00 	mov.w	sl, #0
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	46b4      	mov	ip, r6
 800ae70:	46d3      	mov	fp, sl
 800ae72:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae76:	b293      	uxth	r3, r2
 800ae78:	fb05 a303 	mla	r3, r5, r3, sl
 800ae7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	ebab 0303 	sub.w	r3, fp, r3
 800ae86:	0c12      	lsrs	r2, r2, #16
 800ae88:	f8bc b000 	ldrh.w	fp, [ip]
 800ae8c:	fb05 a202 	mla	r2, r5, r2, sl
 800ae90:	fa13 f38b 	uxtah	r3, r3, fp
 800ae94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ae98:	fa1f fb82 	uxth.w	fp, r2
 800ae9c:	f8dc 2000 	ldr.w	r2, [ip]
 800aea0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeae:	4581      	cmp	r9, r0
 800aeb0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aeb4:	f84c 3b04 	str.w	r3, [ip], #4
 800aeb8:	d2db      	bcs.n	800ae72 <quorem+0x42>
 800aeba:	f856 300e 	ldr.w	r3, [r6, lr]
 800aebe:	b933      	cbnz	r3, 800aece <quorem+0x9e>
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	3b04      	subs	r3, #4
 800aec4:	429e      	cmp	r6, r3
 800aec6:	461a      	mov	r2, r3
 800aec8:	d330      	bcc.n	800af2c <quorem+0xfc>
 800aeca:	f8c8 4010 	str.w	r4, [r8, #16]
 800aece:	4640      	mov	r0, r8
 800aed0:	f001 fa71 	bl	800c3b6 <__mcmp>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	db25      	blt.n	800af24 <quorem+0xf4>
 800aed8:	3501      	adds	r5, #1
 800aeda:	4630      	mov	r0, r6
 800aedc:	f04f 0e00 	mov.w	lr, #0
 800aee0:	f857 2b04 	ldr.w	r2, [r7], #4
 800aee4:	f8d0 c000 	ldr.w	ip, [r0]
 800aee8:	b293      	uxth	r3, r2
 800aeea:	ebae 0303 	sub.w	r3, lr, r3
 800aeee:	0c12      	lsrs	r2, r2, #16
 800aef0:	fa13 f38c 	uxtah	r3, r3, ip
 800aef4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af02:	45b9      	cmp	r9, r7
 800af04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800af08:	f840 3b04 	str.w	r3, [r0], #4
 800af0c:	d2e8      	bcs.n	800aee0 <quorem+0xb0>
 800af0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800af12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800af16:	b92a      	cbnz	r2, 800af24 <quorem+0xf4>
 800af18:	3b04      	subs	r3, #4
 800af1a:	429e      	cmp	r6, r3
 800af1c:	461a      	mov	r2, r3
 800af1e:	d30b      	bcc.n	800af38 <quorem+0x108>
 800af20:	f8c8 4010 	str.w	r4, [r8, #16]
 800af24:	4628      	mov	r0, r5
 800af26:	b003      	add	sp, #12
 800af28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2c:	6812      	ldr	r2, [r2, #0]
 800af2e:	3b04      	subs	r3, #4
 800af30:	2a00      	cmp	r2, #0
 800af32:	d1ca      	bne.n	800aeca <quorem+0x9a>
 800af34:	3c01      	subs	r4, #1
 800af36:	e7c5      	b.n	800aec4 <quorem+0x94>
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	3b04      	subs	r3, #4
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	d1ef      	bne.n	800af20 <quorem+0xf0>
 800af40:	3c01      	subs	r4, #1
 800af42:	e7ea      	b.n	800af1a <quorem+0xea>
 800af44:	2000      	movs	r0, #0
 800af46:	e7ee      	b.n	800af26 <quorem+0xf6>

0800af48 <_dtoa_r>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	ec57 6b10 	vmov	r6, r7, d0
 800af50:	b097      	sub	sp, #92	; 0x5c
 800af52:	e9cd 6700 	strd	r6, r7, [sp]
 800af56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af58:	9107      	str	r1, [sp, #28]
 800af5a:	4604      	mov	r4, r0
 800af5c:	920a      	str	r2, [sp, #40]	; 0x28
 800af5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af60:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800af62:	b93e      	cbnz	r6, 800af74 <_dtoa_r+0x2c>
 800af64:	2010      	movs	r0, #16
 800af66:	f7fd fb39 	bl	80085dc <malloc>
 800af6a:	6260      	str	r0, [r4, #36]	; 0x24
 800af6c:	6046      	str	r6, [r0, #4]
 800af6e:	6086      	str	r6, [r0, #8]
 800af70:	6006      	str	r6, [r0, #0]
 800af72:	60c6      	str	r6, [r0, #12]
 800af74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af76:	6819      	ldr	r1, [r3, #0]
 800af78:	b151      	cbz	r1, 800af90 <_dtoa_r+0x48>
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	604a      	str	r2, [r1, #4]
 800af7e:	2301      	movs	r3, #1
 800af80:	4093      	lsls	r3, r2
 800af82:	608b      	str	r3, [r1, #8]
 800af84:	4620      	mov	r0, r4
 800af86:	f001 f841 	bl	800c00c <_Bfree>
 800af8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfbf      	itttt	lt
 800af96:	2301      	movlt	r3, #1
 800af98:	602b      	strlt	r3, [r5, #0]
 800af9a:	9b01      	ldrlt	r3, [sp, #4]
 800af9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afa0:	bfb2      	itee	lt
 800afa2:	9301      	strlt	r3, [sp, #4]
 800afa4:	2300      	movge	r3, #0
 800afa6:	602b      	strge	r3, [r5, #0]
 800afa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800afac:	4ba8      	ldr	r3, [pc, #672]	; (800b250 <_dtoa_r+0x308>)
 800afae:	ea33 0308 	bics.w	r3, r3, r8
 800afb2:	d11b      	bne.n	800afec <_dtoa_r+0xa4>
 800afb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	9b00      	ldr	r3, [sp, #0]
 800afbe:	b923      	cbnz	r3, 800afca <_dtoa_r+0x82>
 800afc0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f000 8578 	beq.w	800baba <_dtoa_r+0xb72>
 800afca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afcc:	b953      	cbnz	r3, 800afe4 <_dtoa_r+0x9c>
 800afce:	4ba1      	ldr	r3, [pc, #644]	; (800b254 <_dtoa_r+0x30c>)
 800afd0:	e021      	b.n	800b016 <_dtoa_r+0xce>
 800afd2:	4ba1      	ldr	r3, [pc, #644]	; (800b258 <_dtoa_r+0x310>)
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	3308      	adds	r3, #8
 800afd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	9802      	ldr	r0, [sp, #8]
 800afde:	b017      	add	sp, #92	; 0x5c
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	4b9b      	ldr	r3, [pc, #620]	; (800b254 <_dtoa_r+0x30c>)
 800afe6:	9302      	str	r3, [sp, #8]
 800afe8:	3303      	adds	r3, #3
 800afea:	e7f5      	b.n	800afd8 <_dtoa_r+0x90>
 800afec:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aff0:	2200      	movs	r2, #0
 800aff2:	2300      	movs	r3, #0
 800aff4:	4630      	mov	r0, r6
 800aff6:	4639      	mov	r1, r7
 800aff8:	f7f5 fd72 	bl	8000ae0 <__aeabi_dcmpeq>
 800affc:	4681      	mov	r9, r0
 800affe:	b160      	cbz	r0, 800b01a <_dtoa_r+0xd2>
 800b000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b002:	2301      	movs	r3, #1
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 8553 	beq.w	800bab4 <_dtoa_r+0xb6c>
 800b00e:	4b93      	ldr	r3, [pc, #588]	; (800b25c <_dtoa_r+0x314>)
 800b010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	3b01      	subs	r3, #1
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	e7e0      	b.n	800afdc <_dtoa_r+0x94>
 800b01a:	aa14      	add	r2, sp, #80	; 0x50
 800b01c:	a915      	add	r1, sp, #84	; 0x54
 800b01e:	ec47 6b10 	vmov	d0, r6, r7
 800b022:	4620      	mov	r0, r4
 800b024:	f001 fa3f 	bl	800c4a6 <__d2b>
 800b028:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b02c:	4682      	mov	sl, r0
 800b02e:	2d00      	cmp	r5, #0
 800b030:	d07e      	beq.n	800b130 <_dtoa_r+0x1e8>
 800b032:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b036:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b03a:	4630      	mov	r0, r6
 800b03c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b040:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b044:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800b048:	2200      	movs	r2, #0
 800b04a:	4b85      	ldr	r3, [pc, #532]	; (800b260 <_dtoa_r+0x318>)
 800b04c:	f7f5 f92c 	bl	80002a8 <__aeabi_dsub>
 800b050:	a379      	add	r3, pc, #484	; (adr r3, 800b238 <_dtoa_r+0x2f0>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 fadb 	bl	8000610 <__aeabi_dmul>
 800b05a:	a379      	add	r3, pc, #484	; (adr r3, 800b240 <_dtoa_r+0x2f8>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 f924 	bl	80002ac <__adddf3>
 800b064:	4606      	mov	r6, r0
 800b066:	4628      	mov	r0, r5
 800b068:	460f      	mov	r7, r1
 800b06a:	f7f5 fa6b 	bl	8000544 <__aeabi_i2d>
 800b06e:	a376      	add	r3, pc, #472	; (adr r3, 800b248 <_dtoa_r+0x300>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 facc 	bl	8000610 <__aeabi_dmul>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4630      	mov	r0, r6
 800b07e:	4639      	mov	r1, r7
 800b080:	f7f5 f914 	bl	80002ac <__adddf3>
 800b084:	4606      	mov	r6, r0
 800b086:	460f      	mov	r7, r1
 800b088:	f7f5 fd72 	bl	8000b70 <__aeabi_d2iz>
 800b08c:	2200      	movs	r2, #0
 800b08e:	4683      	mov	fp, r0
 800b090:	2300      	movs	r3, #0
 800b092:	4630      	mov	r0, r6
 800b094:	4639      	mov	r1, r7
 800b096:	f7f5 fd2d 	bl	8000af4 <__aeabi_dcmplt>
 800b09a:	b158      	cbz	r0, 800b0b4 <_dtoa_r+0x16c>
 800b09c:	4658      	mov	r0, fp
 800b09e:	f7f5 fa51 	bl	8000544 <__aeabi_i2d>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 fd19 	bl	8000ae0 <__aeabi_dcmpeq>
 800b0ae:	b908      	cbnz	r0, 800b0b4 <_dtoa_r+0x16c>
 800b0b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0b4:	f1bb 0f16 	cmp.w	fp, #22
 800b0b8:	d859      	bhi.n	800b16e <_dtoa_r+0x226>
 800b0ba:	496a      	ldr	r1, [pc, #424]	; (800b264 <_dtoa_r+0x31c>)
 800b0bc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c8:	f7f5 fd32 	bl	8000b30 <__aeabi_dcmpgt>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d050      	beq.n	800b172 <_dtoa_r+0x22a>
 800b0d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b0d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0da:	1b5d      	subs	r5, r3, r5
 800b0dc:	1e6b      	subs	r3, r5, #1
 800b0de:	9306      	str	r3, [sp, #24]
 800b0e0:	bf45      	ittet	mi
 800b0e2:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0e6:	9305      	strmi	r3, [sp, #20]
 800b0e8:	2300      	movpl	r3, #0
 800b0ea:	2300      	movmi	r3, #0
 800b0ec:	bf4c      	ite	mi
 800b0ee:	9306      	strmi	r3, [sp, #24]
 800b0f0:	9305      	strpl	r3, [sp, #20]
 800b0f2:	f1bb 0f00 	cmp.w	fp, #0
 800b0f6:	db3e      	blt.n	800b176 <_dtoa_r+0x22e>
 800b0f8:	9b06      	ldr	r3, [sp, #24]
 800b0fa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b0fe:	445b      	add	r3, fp
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	2300      	movs	r3, #0
 800b104:	9308      	str	r3, [sp, #32]
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	2b09      	cmp	r3, #9
 800b10a:	f200 80af 	bhi.w	800b26c <_dtoa_r+0x324>
 800b10e:	2b05      	cmp	r3, #5
 800b110:	bfc4      	itt	gt
 800b112:	3b04      	subgt	r3, #4
 800b114:	9307      	strgt	r3, [sp, #28]
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	f1a3 0302 	sub.w	r3, r3, #2
 800b11c:	bfcc      	ite	gt
 800b11e:	2600      	movgt	r6, #0
 800b120:	2601      	movle	r6, #1
 800b122:	2b03      	cmp	r3, #3
 800b124:	f200 80ae 	bhi.w	800b284 <_dtoa_r+0x33c>
 800b128:	e8df f003 	tbb	[pc, r3]
 800b12c:	772f8482 	.word	0x772f8482
 800b130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b132:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b134:	441d      	add	r5, r3
 800b136:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	dd11      	ble.n	800b162 <_dtoa_r+0x21a>
 800b13e:	9a00      	ldr	r2, [sp, #0]
 800b140:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b144:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b148:	fa22 f000 	lsr.w	r0, r2, r0
 800b14c:	fa08 f303 	lsl.w	r3, r8, r3
 800b150:	4318      	orrs	r0, r3
 800b152:	f7f5 f9e7 	bl	8000524 <__aeabi_ui2d>
 800b156:	2301      	movs	r3, #1
 800b158:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b15c:	3d01      	subs	r5, #1
 800b15e:	9312      	str	r3, [sp, #72]	; 0x48
 800b160:	e772      	b.n	800b048 <_dtoa_r+0x100>
 800b162:	f1c3 0020 	rsb	r0, r3, #32
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	fa03 f000 	lsl.w	r0, r3, r0
 800b16c:	e7f1      	b.n	800b152 <_dtoa_r+0x20a>
 800b16e:	2301      	movs	r3, #1
 800b170:	e7b1      	b.n	800b0d6 <_dtoa_r+0x18e>
 800b172:	900e      	str	r0, [sp, #56]	; 0x38
 800b174:	e7b0      	b.n	800b0d8 <_dtoa_r+0x190>
 800b176:	9b05      	ldr	r3, [sp, #20]
 800b178:	eba3 030b 	sub.w	r3, r3, fp
 800b17c:	9305      	str	r3, [sp, #20]
 800b17e:	f1cb 0300 	rsb	r3, fp, #0
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	2300      	movs	r3, #0
 800b186:	930b      	str	r3, [sp, #44]	; 0x2c
 800b188:	e7bd      	b.n	800b106 <_dtoa_r+0x1be>
 800b18a:	2301      	movs	r3, #1
 800b18c:	9309      	str	r3, [sp, #36]	; 0x24
 800b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b190:	2b00      	cmp	r3, #0
 800b192:	dd7a      	ble.n	800b28a <_dtoa_r+0x342>
 800b194:	9304      	str	r3, [sp, #16]
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b19a:	2200      	movs	r2, #0
 800b19c:	606a      	str	r2, [r5, #4]
 800b19e:	2104      	movs	r1, #4
 800b1a0:	f101 0214 	add.w	r2, r1, #20
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d975      	bls.n	800b294 <_dtoa_r+0x34c>
 800b1a8:	6869      	ldr	r1, [r5, #4]
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fefa 	bl	800bfa4 <_Balloc>
 800b1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1b2:	6028      	str	r0, [r5, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	2b0e      	cmp	r3, #14
 800b1bc:	f200 80e5 	bhi.w	800b38a <_dtoa_r+0x442>
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	f000 80e2 	beq.w	800b38a <_dtoa_r+0x442>
 800b1c6:	ed9d 7b00 	vldr	d7, [sp]
 800b1ca:	f1bb 0f00 	cmp.w	fp, #0
 800b1ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b1d2:	dd74      	ble.n	800b2be <_dtoa_r+0x376>
 800b1d4:	4a23      	ldr	r2, [pc, #140]	; (800b264 <_dtoa_r+0x31c>)
 800b1d6:	f00b 030f 	and.w	r3, fp, #15
 800b1da:	ea4f 162b 	mov.w	r6, fp, asr #4
 800b1de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1e2:	06f0      	lsls	r0, r6, #27
 800b1e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1e8:	d559      	bpl.n	800b29e <_dtoa_r+0x356>
 800b1ea:	4b1f      	ldr	r3, [pc, #124]	; (800b268 <_dtoa_r+0x320>)
 800b1ec:	ec51 0b17 	vmov	r0, r1, d7
 800b1f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1f4:	f7f5 fb36 	bl	8000864 <__aeabi_ddiv>
 800b1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b1fc:	f006 060f 	and.w	r6, r6, #15
 800b200:	2503      	movs	r5, #3
 800b202:	4f19      	ldr	r7, [pc, #100]	; (800b268 <_dtoa_r+0x320>)
 800b204:	2e00      	cmp	r6, #0
 800b206:	d14c      	bne.n	800b2a2 <_dtoa_r+0x35a>
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b210:	f7f5 fb28 	bl	8000864 <__aeabi_ddiv>
 800b214:	e9cd 0100 	strd	r0, r1, [sp]
 800b218:	e06a      	b.n	800b2f0 <_dtoa_r+0x3a8>
 800b21a:	2301      	movs	r3, #1
 800b21c:	9309      	str	r3, [sp, #36]	; 0x24
 800b21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b220:	445b      	add	r3, fp
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	3301      	adds	r3, #1
 800b226:	2b01      	cmp	r3, #1
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	bfb8      	it	lt
 800b22c:	2301      	movlt	r3, #1
 800b22e:	e7b3      	b.n	800b198 <_dtoa_r+0x250>
 800b230:	2300      	movs	r3, #0
 800b232:	e7ab      	b.n	800b18c <_dtoa_r+0x244>
 800b234:	2300      	movs	r3, #0
 800b236:	e7f1      	b.n	800b21c <_dtoa_r+0x2d4>
 800b238:	636f4361 	.word	0x636f4361
 800b23c:	3fd287a7 	.word	0x3fd287a7
 800b240:	8b60c8b3 	.word	0x8b60c8b3
 800b244:	3fc68a28 	.word	0x3fc68a28
 800b248:	509f79fb 	.word	0x509f79fb
 800b24c:	3fd34413 	.word	0x3fd34413
 800b250:	7ff00000 	.word	0x7ff00000
 800b254:	0800d2c5 	.word	0x0800d2c5
 800b258:	0800d2bc 	.word	0x0800d2bc
 800b25c:	0800d27b 	.word	0x0800d27b
 800b260:	3ff80000 	.word	0x3ff80000
 800b264:	0800d2f8 	.word	0x0800d2f8
 800b268:	0800d2d0 	.word	0x0800d2d0
 800b26c:	2601      	movs	r6, #1
 800b26e:	2300      	movs	r3, #0
 800b270:	9307      	str	r3, [sp, #28]
 800b272:	9609      	str	r6, [sp, #36]	; 0x24
 800b274:	f04f 33ff 	mov.w	r3, #4294967295
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	2312      	movs	r3, #18
 800b280:	920a      	str	r2, [sp, #40]	; 0x28
 800b282:	e789      	b.n	800b198 <_dtoa_r+0x250>
 800b284:	2301      	movs	r3, #1
 800b286:	9309      	str	r3, [sp, #36]	; 0x24
 800b288:	e7f4      	b.n	800b274 <_dtoa_r+0x32c>
 800b28a:	2301      	movs	r3, #1
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	461a      	mov	r2, r3
 800b292:	e7f5      	b.n	800b280 <_dtoa_r+0x338>
 800b294:	686a      	ldr	r2, [r5, #4]
 800b296:	3201      	adds	r2, #1
 800b298:	606a      	str	r2, [r5, #4]
 800b29a:	0049      	lsls	r1, r1, #1
 800b29c:	e780      	b.n	800b1a0 <_dtoa_r+0x258>
 800b29e:	2502      	movs	r5, #2
 800b2a0:	e7af      	b.n	800b202 <_dtoa_r+0x2ba>
 800b2a2:	07f1      	lsls	r1, r6, #31
 800b2a4:	d508      	bpl.n	800b2b8 <_dtoa_r+0x370>
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ae:	f7f5 f9af 	bl	8000610 <__aeabi_dmul>
 800b2b2:	3501      	adds	r5, #1
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	4689      	mov	r9, r1
 800b2b8:	1076      	asrs	r6, r6, #1
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	e7a2      	b.n	800b204 <_dtoa_r+0x2bc>
 800b2be:	f000 809d 	beq.w	800b3fc <_dtoa_r+0x4b4>
 800b2c2:	f1cb 0600 	rsb	r6, fp, #0
 800b2c6:	4b9f      	ldr	r3, [pc, #636]	; (800b544 <_dtoa_r+0x5fc>)
 800b2c8:	4f9f      	ldr	r7, [pc, #636]	; (800b548 <_dtoa_r+0x600>)
 800b2ca:	f006 020f 	and.w	r2, r6, #15
 800b2ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2da:	f7f5 f999 	bl	8000610 <__aeabi_dmul>
 800b2de:	e9cd 0100 	strd	r0, r1, [sp]
 800b2e2:	1136      	asrs	r6, r6, #4
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2502      	movs	r5, #2
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	d17c      	bne.n	800b3e6 <_dtoa_r+0x49e>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d191      	bne.n	800b214 <_dtoa_r+0x2cc>
 800b2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 8084 	beq.w	800b400 <_dtoa_r+0x4b8>
 800b2f8:	e9dd 8900 	ldrd	r8, r9, [sp]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4b93      	ldr	r3, [pc, #588]	; (800b54c <_dtoa_r+0x604>)
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f5 fbf6 	bl	8000af4 <__aeabi_dcmplt>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d079      	beq.n	800b400 <_dtoa_r+0x4b8>
 800b30c:	9b03      	ldr	r3, [sp, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d076      	beq.n	800b400 <_dtoa_r+0x4b8>
 800b312:	9b04      	ldr	r3, [sp, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd34      	ble.n	800b382 <_dtoa_r+0x43a>
 800b318:	2200      	movs	r2, #0
 800b31a:	4b8d      	ldr	r3, [pc, #564]	; (800b550 <_dtoa_r+0x608>)
 800b31c:	4640      	mov	r0, r8
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 f976 	bl	8000610 <__aeabi_dmul>
 800b324:	e9cd 0100 	strd	r0, r1, [sp]
 800b328:	9e04      	ldr	r6, [sp, #16]
 800b32a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b32e:	3501      	adds	r5, #1
 800b330:	4628      	mov	r0, r5
 800b332:	f7f5 f907 	bl	8000544 <__aeabi_i2d>
 800b336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b33a:	f7f5 f969 	bl	8000610 <__aeabi_dmul>
 800b33e:	2200      	movs	r2, #0
 800b340:	4b84      	ldr	r3, [pc, #528]	; (800b554 <_dtoa_r+0x60c>)
 800b342:	f7f4 ffb3 	bl	80002ac <__adddf3>
 800b346:	4680      	mov	r8, r0
 800b348:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800b34c:	2e00      	cmp	r6, #0
 800b34e:	d15a      	bne.n	800b406 <_dtoa_r+0x4be>
 800b350:	2200      	movs	r2, #0
 800b352:	4b81      	ldr	r3, [pc, #516]	; (800b558 <_dtoa_r+0x610>)
 800b354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b358:	f7f4 ffa6 	bl	80002a8 <__aeabi_dsub>
 800b35c:	4642      	mov	r2, r8
 800b35e:	464b      	mov	r3, r9
 800b360:	e9cd 0100 	strd	r0, r1, [sp]
 800b364:	f7f5 fbe4 	bl	8000b30 <__aeabi_dcmpgt>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f040 829b 	bne.w	800b8a4 <_dtoa_r+0x95c>
 800b36e:	4642      	mov	r2, r8
 800b370:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b378:	f7f5 fbbc 	bl	8000af4 <__aeabi_dcmplt>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f040 828f 	bne.w	800b8a0 <_dtoa_r+0x958>
 800b382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b386:	e9cd 2300 	strd	r2, r3, [sp]
 800b38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f2c0 8150 	blt.w	800b632 <_dtoa_r+0x6ea>
 800b392:	f1bb 0f0e 	cmp.w	fp, #14
 800b396:	f300 814c 	bgt.w	800b632 <_dtoa_r+0x6ea>
 800b39a:	4b6a      	ldr	r3, [pc, #424]	; (800b544 <_dtoa_r+0x5fc>)
 800b39c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f280 80da 	bge.w	800b560 <_dtoa_r+0x618>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f300 80d6 	bgt.w	800b560 <_dtoa_r+0x618>
 800b3b4:	f040 8273 	bne.w	800b89e <_dtoa_r+0x956>
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4b67      	ldr	r3, [pc, #412]	; (800b558 <_dtoa_r+0x610>)
 800b3bc:	4640      	mov	r0, r8
 800b3be:	4649      	mov	r1, r9
 800b3c0:	f7f5 f926 	bl	8000610 <__aeabi_dmul>
 800b3c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3c8:	f7f5 fba8 	bl	8000b1c <__aeabi_dcmpge>
 800b3cc:	9e03      	ldr	r6, [sp, #12]
 800b3ce:	4637      	mov	r7, r6
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	f040 824a 	bne.w	800b86a <_dtoa_r+0x922>
 800b3d6:	9b02      	ldr	r3, [sp, #8]
 800b3d8:	9a02      	ldr	r2, [sp, #8]
 800b3da:	1c5d      	adds	r5, r3, #1
 800b3dc:	2331      	movs	r3, #49	; 0x31
 800b3de:	7013      	strb	r3, [r2, #0]
 800b3e0:	f10b 0b01 	add.w	fp, fp, #1
 800b3e4:	e245      	b.n	800b872 <_dtoa_r+0x92a>
 800b3e6:	07f2      	lsls	r2, r6, #31
 800b3e8:	d505      	bpl.n	800b3f6 <_dtoa_r+0x4ae>
 800b3ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ee:	f7f5 f90f 	bl	8000610 <__aeabi_dmul>
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	1076      	asrs	r6, r6, #1
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	e775      	b.n	800b2e8 <_dtoa_r+0x3a0>
 800b3fc:	2502      	movs	r5, #2
 800b3fe:	e777      	b.n	800b2f0 <_dtoa_r+0x3a8>
 800b400:	465f      	mov	r7, fp
 800b402:	9e03      	ldr	r6, [sp, #12]
 800b404:	e794      	b.n	800b330 <_dtoa_r+0x3e8>
 800b406:	9a02      	ldr	r2, [sp, #8]
 800b408:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <_dtoa_r+0x5fc>)
 800b40a:	4432      	add	r2, r6
 800b40c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	1e71      	subs	r1, r6, #1
 800b412:	2a00      	cmp	r2, #0
 800b414:	d048      	beq.n	800b4a8 <_dtoa_r+0x560>
 800b416:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	2000      	movs	r0, #0
 800b420:	494e      	ldr	r1, [pc, #312]	; (800b55c <_dtoa_r+0x614>)
 800b422:	f7f5 fa1f 	bl	8000864 <__aeabi_ddiv>
 800b426:	4642      	mov	r2, r8
 800b428:	464b      	mov	r3, r9
 800b42a:	f7f4 ff3d 	bl	80002a8 <__aeabi_dsub>
 800b42e:	9d02      	ldr	r5, [sp, #8]
 800b430:	4680      	mov	r8, r0
 800b432:	4689      	mov	r9, r1
 800b434:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b438:	f7f5 fb9a 	bl	8000b70 <__aeabi_d2iz>
 800b43c:	4606      	mov	r6, r0
 800b43e:	f7f5 f881 	bl	8000544 <__aeabi_i2d>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b44a:	f7f4 ff2d 	bl	80002a8 <__aeabi_dsub>
 800b44e:	3630      	adds	r6, #48	; 0x30
 800b450:	f805 6b01 	strb.w	r6, [r5], #1
 800b454:	4642      	mov	r2, r8
 800b456:	464b      	mov	r3, r9
 800b458:	e9cd 0100 	strd	r0, r1, [sp]
 800b45c:	f7f5 fb4a 	bl	8000af4 <__aeabi_dcmplt>
 800b460:	2800      	cmp	r0, #0
 800b462:	d165      	bne.n	800b530 <_dtoa_r+0x5e8>
 800b464:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b468:	2000      	movs	r0, #0
 800b46a:	4938      	ldr	r1, [pc, #224]	; (800b54c <_dtoa_r+0x604>)
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	f7f5 fb3e 	bl	8000af4 <__aeabi_dcmplt>
 800b478:	2800      	cmp	r0, #0
 800b47a:	f040 80ba 	bne.w	800b5f2 <_dtoa_r+0x6aa>
 800b47e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b480:	429d      	cmp	r5, r3
 800b482:	f43f af7e 	beq.w	800b382 <_dtoa_r+0x43a>
 800b486:	2200      	movs	r2, #0
 800b488:	4b31      	ldr	r3, [pc, #196]	; (800b550 <_dtoa_r+0x608>)
 800b48a:	4640      	mov	r0, r8
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 f8bf 	bl	8000610 <__aeabi_dmul>
 800b492:	2200      	movs	r2, #0
 800b494:	4680      	mov	r8, r0
 800b496:	4689      	mov	r9, r1
 800b498:	4b2d      	ldr	r3, [pc, #180]	; (800b550 <_dtoa_r+0x608>)
 800b49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b49e:	f7f5 f8b7 	bl	8000610 <__aeabi_dmul>
 800b4a2:	e9cd 0100 	strd	r0, r1, [sp]
 800b4a6:	e7c5      	b.n	800b434 <_dtoa_r+0x4ec>
 800b4a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	f7f5 f8ac 	bl	8000610 <__aeabi_dmul>
 800b4b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4bc:	9d02      	ldr	r5, [sp, #8]
 800b4be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4c2:	f7f5 fb55 	bl	8000b70 <__aeabi_d2iz>
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	f7f5 f83c 	bl	8000544 <__aeabi_i2d>
 800b4cc:	3630      	adds	r6, #48	; 0x30
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4d6:	f7f4 fee7 	bl	80002a8 <__aeabi_dsub>
 800b4da:	f805 6b01 	strb.w	r6, [r5], #1
 800b4de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	4689      	mov	r9, r1
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	d125      	bne.n	800b538 <_dtoa_r+0x5f0>
 800b4ec:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <_dtoa_r+0x614>)
 800b4ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4f2:	f7f4 fedb 	bl	80002ac <__adddf3>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	f7f5 fb17 	bl	8000b30 <__aeabi_dcmpgt>
 800b502:	2800      	cmp	r0, #0
 800b504:	d175      	bne.n	800b5f2 <_dtoa_r+0x6aa>
 800b506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b50a:	2000      	movs	r0, #0
 800b50c:	4913      	ldr	r1, [pc, #76]	; (800b55c <_dtoa_r+0x614>)
 800b50e:	f7f4 fecb 	bl	80002a8 <__aeabi_dsub>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f7f5 faeb 	bl	8000af4 <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f43f af2f 	beq.w	800b382 <_dtoa_r+0x43a>
 800b524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b528:	2b30      	cmp	r3, #48	; 0x30
 800b52a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b52e:	d001      	beq.n	800b534 <_dtoa_r+0x5ec>
 800b530:	46bb      	mov	fp, r7
 800b532:	e04d      	b.n	800b5d0 <_dtoa_r+0x688>
 800b534:	4615      	mov	r5, r2
 800b536:	e7f5      	b.n	800b524 <_dtoa_r+0x5dc>
 800b538:	4b05      	ldr	r3, [pc, #20]	; (800b550 <_dtoa_r+0x608>)
 800b53a:	f7f5 f869 	bl	8000610 <__aeabi_dmul>
 800b53e:	e9cd 0100 	strd	r0, r1, [sp]
 800b542:	e7bc      	b.n	800b4be <_dtoa_r+0x576>
 800b544:	0800d2f8 	.word	0x0800d2f8
 800b548:	0800d2d0 	.word	0x0800d2d0
 800b54c:	3ff00000 	.word	0x3ff00000
 800b550:	40240000 	.word	0x40240000
 800b554:	401c0000 	.word	0x401c0000
 800b558:	40140000 	.word	0x40140000
 800b55c:	3fe00000 	.word	0x3fe00000
 800b560:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b564:	9d02      	ldr	r5, [sp, #8]
 800b566:	4642      	mov	r2, r8
 800b568:	464b      	mov	r3, r9
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 f979 	bl	8000864 <__aeabi_ddiv>
 800b572:	f7f5 fafd 	bl	8000b70 <__aeabi_d2iz>
 800b576:	9000      	str	r0, [sp, #0]
 800b578:	f7f4 ffe4 	bl	8000544 <__aeabi_i2d>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f5 f846 	bl	8000610 <__aeabi_dmul>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f4 fe8c 	bl	80002a8 <__aeabi_dsub>
 800b590:	9e00      	ldr	r6, [sp, #0]
 800b592:	9f03      	ldr	r7, [sp, #12]
 800b594:	3630      	adds	r6, #48	; 0x30
 800b596:	f805 6b01 	strb.w	r6, [r5], #1
 800b59a:	9e02      	ldr	r6, [sp, #8]
 800b59c:	1bae      	subs	r6, r5, r6
 800b59e:	42b7      	cmp	r7, r6
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	d138      	bne.n	800b618 <_dtoa_r+0x6d0>
 800b5a6:	f7f4 fe81 	bl	80002ac <__adddf3>
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f5 fa9d 	bl	8000af4 <__aeabi_dcmplt>
 800b5ba:	b9c8      	cbnz	r0, 800b5f0 <_dtoa_r+0x6a8>
 800b5bc:	4632      	mov	r2, r6
 800b5be:	463b      	mov	r3, r7
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f7f5 fa8c 	bl	8000ae0 <__aeabi_dcmpeq>
 800b5c8:	b110      	cbz	r0, 800b5d0 <_dtoa_r+0x688>
 800b5ca:	9b00      	ldr	r3, [sp, #0]
 800b5cc:	07db      	lsls	r3, r3, #31
 800b5ce:	d40f      	bmi.n	800b5f0 <_dtoa_r+0x6a8>
 800b5d0:	4651      	mov	r1, sl
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 fd1a 	bl	800c00c <_Bfree>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5dc:	702b      	strb	r3, [r5, #0]
 800b5de:	f10b 0301 	add.w	r3, fp, #1
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f43f acf8 	beq.w	800afdc <_dtoa_r+0x94>
 800b5ec:	601d      	str	r5, [r3, #0]
 800b5ee:	e4f5      	b.n	800afdc <_dtoa_r+0x94>
 800b5f0:	465f      	mov	r7, fp
 800b5f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5f6:	2a39      	cmp	r2, #57	; 0x39
 800b5f8:	f105 33ff 	add.w	r3, r5, #4294967295
 800b5fc:	d106      	bne.n	800b60c <_dtoa_r+0x6c4>
 800b5fe:	9a02      	ldr	r2, [sp, #8]
 800b600:	429a      	cmp	r2, r3
 800b602:	d107      	bne.n	800b614 <_dtoa_r+0x6cc>
 800b604:	2330      	movs	r3, #48	; 0x30
 800b606:	7013      	strb	r3, [r2, #0]
 800b608:	3701      	adds	r7, #1
 800b60a:	4613      	mov	r3, r2
 800b60c:	781a      	ldrb	r2, [r3, #0]
 800b60e:	3201      	adds	r2, #1
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	e78d      	b.n	800b530 <_dtoa_r+0x5e8>
 800b614:	461d      	mov	r5, r3
 800b616:	e7ec      	b.n	800b5f2 <_dtoa_r+0x6aa>
 800b618:	2200      	movs	r2, #0
 800b61a:	4ba4      	ldr	r3, [pc, #656]	; (800b8ac <_dtoa_r+0x964>)
 800b61c:	f7f4 fff8 	bl	8000610 <__aeabi_dmul>
 800b620:	2200      	movs	r2, #0
 800b622:	2300      	movs	r3, #0
 800b624:	4606      	mov	r6, r0
 800b626:	460f      	mov	r7, r1
 800b628:	f7f5 fa5a 	bl	8000ae0 <__aeabi_dcmpeq>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d09a      	beq.n	800b566 <_dtoa_r+0x61e>
 800b630:	e7ce      	b.n	800b5d0 <_dtoa_r+0x688>
 800b632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b634:	2a00      	cmp	r2, #0
 800b636:	f000 80cd 	beq.w	800b7d4 <_dtoa_r+0x88c>
 800b63a:	9a07      	ldr	r2, [sp, #28]
 800b63c:	2a01      	cmp	r2, #1
 800b63e:	f300 80af 	bgt.w	800b7a0 <_dtoa_r+0x858>
 800b642:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b644:	2a00      	cmp	r2, #0
 800b646:	f000 80a7 	beq.w	800b798 <_dtoa_r+0x850>
 800b64a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b64e:	9e08      	ldr	r6, [sp, #32]
 800b650:	9d05      	ldr	r5, [sp, #20]
 800b652:	9a05      	ldr	r2, [sp, #20]
 800b654:	441a      	add	r2, r3
 800b656:	9205      	str	r2, [sp, #20]
 800b658:	9a06      	ldr	r2, [sp, #24]
 800b65a:	2101      	movs	r1, #1
 800b65c:	441a      	add	r2, r3
 800b65e:	4620      	mov	r0, r4
 800b660:	9206      	str	r2, [sp, #24]
 800b662:	f000 fd73 	bl	800c14c <__i2b>
 800b666:	4607      	mov	r7, r0
 800b668:	2d00      	cmp	r5, #0
 800b66a:	dd0c      	ble.n	800b686 <_dtoa_r+0x73e>
 800b66c:	9b06      	ldr	r3, [sp, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	dd09      	ble.n	800b686 <_dtoa_r+0x73e>
 800b672:	42ab      	cmp	r3, r5
 800b674:	9a05      	ldr	r2, [sp, #20]
 800b676:	bfa8      	it	ge
 800b678:	462b      	movge	r3, r5
 800b67a:	1ad2      	subs	r2, r2, r3
 800b67c:	9205      	str	r2, [sp, #20]
 800b67e:	9a06      	ldr	r2, [sp, #24]
 800b680:	1aed      	subs	r5, r5, r3
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	9306      	str	r3, [sp, #24]
 800b686:	9b08      	ldr	r3, [sp, #32]
 800b688:	b1f3      	cbz	r3, 800b6c8 <_dtoa_r+0x780>
 800b68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 80a5 	beq.w	800b7dc <_dtoa_r+0x894>
 800b692:	2e00      	cmp	r6, #0
 800b694:	dd10      	ble.n	800b6b8 <_dtoa_r+0x770>
 800b696:	4639      	mov	r1, r7
 800b698:	4632      	mov	r2, r6
 800b69a:	4620      	mov	r0, r4
 800b69c:	f000 fdec 	bl	800c278 <__pow5mult>
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fd59 	bl	800c15e <__multiply>
 800b6ac:	4651      	mov	r1, sl
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fcab 	bl	800c00c <_Bfree>
 800b6b6:	46c2      	mov	sl, r8
 800b6b8:	9b08      	ldr	r3, [sp, #32]
 800b6ba:	1b9a      	subs	r2, r3, r6
 800b6bc:	d004      	beq.n	800b6c8 <_dtoa_r+0x780>
 800b6be:	4651      	mov	r1, sl
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f000 fdd9 	bl	800c278 <__pow5mult>
 800b6c6:	4682      	mov	sl, r0
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fd3e 	bl	800c14c <__i2b>
 800b6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	f340 8083 	ble.w	800b7e0 <_dtoa_r+0x898>
 800b6da:	461a      	mov	r2, r3
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fdca 	bl	800c278 <__pow5mult>
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	dd7c      	ble.n	800b7e6 <_dtoa_r+0x89e>
 800b6ec:	f04f 0800 	mov.w	r8, #0
 800b6f0:	6933      	ldr	r3, [r6, #16]
 800b6f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6f6:	6918      	ldr	r0, [r3, #16]
 800b6f8:	f000 fcda 	bl	800c0b0 <__hi0bits>
 800b6fc:	f1c0 0020 	rsb	r0, r0, #32
 800b700:	9b06      	ldr	r3, [sp, #24]
 800b702:	4418      	add	r0, r3
 800b704:	f010 001f 	ands.w	r0, r0, #31
 800b708:	f000 8096 	beq.w	800b838 <_dtoa_r+0x8f0>
 800b70c:	f1c0 0320 	rsb	r3, r0, #32
 800b710:	2b04      	cmp	r3, #4
 800b712:	f340 8087 	ble.w	800b824 <_dtoa_r+0x8dc>
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	f1c0 001c 	rsb	r0, r0, #28
 800b71c:	4403      	add	r3, r0
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	9b06      	ldr	r3, [sp, #24]
 800b722:	4405      	add	r5, r0
 800b724:	4403      	add	r3, r0
 800b726:	9306      	str	r3, [sp, #24]
 800b728:	9b05      	ldr	r3, [sp, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd05      	ble.n	800b73a <_dtoa_r+0x7f2>
 800b72e:	4651      	mov	r1, sl
 800b730:	461a      	mov	r2, r3
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fdee 	bl	800c314 <__lshift>
 800b738:	4682      	mov	sl, r0
 800b73a:	9b06      	ldr	r3, [sp, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd05      	ble.n	800b74c <_dtoa_r+0x804>
 800b740:	4631      	mov	r1, r6
 800b742:	461a      	mov	r2, r3
 800b744:	4620      	mov	r0, r4
 800b746:	f000 fde5 	bl	800c314 <__lshift>
 800b74a:	4606      	mov	r6, r0
 800b74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d074      	beq.n	800b83c <_dtoa_r+0x8f4>
 800b752:	4631      	mov	r1, r6
 800b754:	4650      	mov	r0, sl
 800b756:	f000 fe2e 	bl	800c3b6 <__mcmp>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	da6e      	bge.n	800b83c <_dtoa_r+0x8f4>
 800b75e:	2300      	movs	r3, #0
 800b760:	4651      	mov	r1, sl
 800b762:	220a      	movs	r2, #10
 800b764:	4620      	mov	r0, r4
 800b766:	f000 fc68 	bl	800c03a <__multadd>
 800b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b770:	4682      	mov	sl, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 81a8 	beq.w	800bac8 <_dtoa_r+0xb80>
 800b778:	2300      	movs	r3, #0
 800b77a:	4639      	mov	r1, r7
 800b77c:	220a      	movs	r2, #10
 800b77e:	4620      	mov	r0, r4
 800b780:	f000 fc5b 	bl	800c03a <__multadd>
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	4607      	mov	r7, r0
 800b78a:	f300 80c8 	bgt.w	800b91e <_dtoa_r+0x9d6>
 800b78e:	9b07      	ldr	r3, [sp, #28]
 800b790:	2b02      	cmp	r3, #2
 800b792:	f340 80c4 	ble.w	800b91e <_dtoa_r+0x9d6>
 800b796:	e059      	b.n	800b84c <_dtoa_r+0x904>
 800b798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b79a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b79e:	e756      	b.n	800b64e <_dtoa_r+0x706>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	1e5e      	subs	r6, r3, #1
 800b7a4:	9b08      	ldr	r3, [sp, #32]
 800b7a6:	42b3      	cmp	r3, r6
 800b7a8:	bfbf      	itttt	lt
 800b7aa:	9b08      	ldrlt	r3, [sp, #32]
 800b7ac:	9608      	strlt	r6, [sp, #32]
 800b7ae:	1af2      	sublt	r2, r6, r3
 800b7b0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b7b2:	bfb6      	itet	lt
 800b7b4:	189b      	addlt	r3, r3, r2
 800b7b6:	1b9e      	subge	r6, r3, r6
 800b7b8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	bfb8      	it	lt
 800b7be:	2600      	movlt	r6, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	bfb9      	ittee	lt
 800b7c4:	9b05      	ldrlt	r3, [sp, #20]
 800b7c6:	9a03      	ldrlt	r2, [sp, #12]
 800b7c8:	9d05      	ldrge	r5, [sp, #20]
 800b7ca:	9b03      	ldrge	r3, [sp, #12]
 800b7cc:	bfbc      	itt	lt
 800b7ce:	1a9d      	sublt	r5, r3, r2
 800b7d0:	2300      	movlt	r3, #0
 800b7d2:	e73e      	b.n	800b652 <_dtoa_r+0x70a>
 800b7d4:	9e08      	ldr	r6, [sp, #32]
 800b7d6:	9d05      	ldr	r5, [sp, #20]
 800b7d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b7da:	e745      	b.n	800b668 <_dtoa_r+0x720>
 800b7dc:	9a08      	ldr	r2, [sp, #32]
 800b7de:	e76e      	b.n	800b6be <_dtoa_r+0x776>
 800b7e0:	9b07      	ldr	r3, [sp, #28]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	dc19      	bgt.n	800b81a <_dtoa_r+0x8d2>
 800b7e6:	9b00      	ldr	r3, [sp, #0]
 800b7e8:	b9bb      	cbnz	r3, 800b81a <_dtoa_r+0x8d2>
 800b7ea:	9b01      	ldr	r3, [sp, #4]
 800b7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7f0:	b99b      	cbnz	r3, 800b81a <_dtoa_r+0x8d2>
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7f8:	0d1b      	lsrs	r3, r3, #20
 800b7fa:	051b      	lsls	r3, r3, #20
 800b7fc:	b183      	cbz	r3, 800b820 <_dtoa_r+0x8d8>
 800b7fe:	9b05      	ldr	r3, [sp, #20]
 800b800:	3301      	adds	r3, #1
 800b802:	9305      	str	r3, [sp, #20]
 800b804:	9b06      	ldr	r3, [sp, #24]
 800b806:	3301      	adds	r3, #1
 800b808:	9306      	str	r3, [sp, #24]
 800b80a:	f04f 0801 	mov.w	r8, #1
 800b80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b810:	2b00      	cmp	r3, #0
 800b812:	f47f af6d 	bne.w	800b6f0 <_dtoa_r+0x7a8>
 800b816:	2001      	movs	r0, #1
 800b818:	e772      	b.n	800b700 <_dtoa_r+0x7b8>
 800b81a:	f04f 0800 	mov.w	r8, #0
 800b81e:	e7f6      	b.n	800b80e <_dtoa_r+0x8c6>
 800b820:	4698      	mov	r8, r3
 800b822:	e7f4      	b.n	800b80e <_dtoa_r+0x8c6>
 800b824:	d080      	beq.n	800b728 <_dtoa_r+0x7e0>
 800b826:	9a05      	ldr	r2, [sp, #20]
 800b828:	331c      	adds	r3, #28
 800b82a:	441a      	add	r2, r3
 800b82c:	9205      	str	r2, [sp, #20]
 800b82e:	9a06      	ldr	r2, [sp, #24]
 800b830:	441a      	add	r2, r3
 800b832:	441d      	add	r5, r3
 800b834:	4613      	mov	r3, r2
 800b836:	e776      	b.n	800b726 <_dtoa_r+0x7de>
 800b838:	4603      	mov	r3, r0
 800b83a:	e7f4      	b.n	800b826 <_dtoa_r+0x8de>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dc36      	bgt.n	800b8b0 <_dtoa_r+0x968>
 800b842:	9b07      	ldr	r3, [sp, #28]
 800b844:	2b02      	cmp	r3, #2
 800b846:	dd33      	ble.n	800b8b0 <_dtoa_r+0x968>
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	9b04      	ldr	r3, [sp, #16]
 800b84e:	b963      	cbnz	r3, 800b86a <_dtoa_r+0x922>
 800b850:	4631      	mov	r1, r6
 800b852:	2205      	movs	r2, #5
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fbf0 	bl	800c03a <__multadd>
 800b85a:	4601      	mov	r1, r0
 800b85c:	4606      	mov	r6, r0
 800b85e:	4650      	mov	r0, sl
 800b860:	f000 fda9 	bl	800c3b6 <__mcmp>
 800b864:	2800      	cmp	r0, #0
 800b866:	f73f adb6 	bgt.w	800b3d6 <_dtoa_r+0x48e>
 800b86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86c:	9d02      	ldr	r5, [sp, #8]
 800b86e:	ea6f 0b03 	mvn.w	fp, r3
 800b872:	2300      	movs	r3, #0
 800b874:	9303      	str	r3, [sp, #12]
 800b876:	4631      	mov	r1, r6
 800b878:	4620      	mov	r0, r4
 800b87a:	f000 fbc7 	bl	800c00c <_Bfree>
 800b87e:	2f00      	cmp	r7, #0
 800b880:	f43f aea6 	beq.w	800b5d0 <_dtoa_r+0x688>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	b12b      	cbz	r3, 800b894 <_dtoa_r+0x94c>
 800b888:	42bb      	cmp	r3, r7
 800b88a:	d003      	beq.n	800b894 <_dtoa_r+0x94c>
 800b88c:	4619      	mov	r1, r3
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 fbbc 	bl	800c00c <_Bfree>
 800b894:	4639      	mov	r1, r7
 800b896:	4620      	mov	r0, r4
 800b898:	f000 fbb8 	bl	800c00c <_Bfree>
 800b89c:	e698      	b.n	800b5d0 <_dtoa_r+0x688>
 800b89e:	2600      	movs	r6, #0
 800b8a0:	4637      	mov	r7, r6
 800b8a2:	e7e2      	b.n	800b86a <_dtoa_r+0x922>
 800b8a4:	46bb      	mov	fp, r7
 800b8a6:	4637      	mov	r7, r6
 800b8a8:	e595      	b.n	800b3d6 <_dtoa_r+0x48e>
 800b8aa:	bf00      	nop
 800b8ac:	40240000 	.word	0x40240000
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	bb93      	cbnz	r3, 800b91a <_dtoa_r+0x9d2>
 800b8b4:	9b03      	ldr	r3, [sp, #12]
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	9d02      	ldr	r5, [sp, #8]
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4650      	mov	r0, sl
 800b8be:	f7ff fab7 	bl	800ae30 <quorem>
 800b8c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8c6:	f805 9b01 	strb.w	r9, [r5], #1
 800b8ca:	9b02      	ldr	r3, [sp, #8]
 800b8cc:	9a04      	ldr	r2, [sp, #16]
 800b8ce:	1aeb      	subs	r3, r5, r3
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	f300 80dc 	bgt.w	800ba8e <_dtoa_r+0xb46>
 800b8d6:	9b02      	ldr	r3, [sp, #8]
 800b8d8:	2a01      	cmp	r2, #1
 800b8da:	bfac      	ite	ge
 800b8dc:	189b      	addge	r3, r3, r2
 800b8de:	3301      	addlt	r3, #1
 800b8e0:	4698      	mov	r8, r3
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	4651      	mov	r1, sl
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fd12 	bl	800c314 <__lshift>
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	4682      	mov	sl, r0
 800b8f4:	f000 fd5f 	bl	800c3b6 <__mcmp>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f300 808d 	bgt.w	800ba18 <_dtoa_r+0xad0>
 800b8fe:	d103      	bne.n	800b908 <_dtoa_r+0x9c0>
 800b900:	f019 0f01 	tst.w	r9, #1
 800b904:	f040 8088 	bne.w	800ba18 <_dtoa_r+0xad0>
 800b908:	4645      	mov	r5, r8
 800b90a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b90e:	2b30      	cmp	r3, #48	; 0x30
 800b910:	f105 32ff 	add.w	r2, r5, #4294967295
 800b914:	d1af      	bne.n	800b876 <_dtoa_r+0x92e>
 800b916:	4615      	mov	r5, r2
 800b918:	e7f7      	b.n	800b90a <_dtoa_r+0x9c2>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	2d00      	cmp	r5, #0
 800b920:	dd05      	ble.n	800b92e <_dtoa_r+0x9e6>
 800b922:	4639      	mov	r1, r7
 800b924:	462a      	mov	r2, r5
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fcf4 	bl	800c314 <__lshift>
 800b92c:	4607      	mov	r7, r0
 800b92e:	f1b8 0f00 	cmp.w	r8, #0
 800b932:	d04c      	beq.n	800b9ce <_dtoa_r+0xa86>
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fb34 	bl	800bfa4 <_Balloc>
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	3202      	adds	r2, #2
 800b940:	4605      	mov	r5, r0
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	f107 010c 	add.w	r1, r7, #12
 800b948:	300c      	adds	r0, #12
 800b94a:	f7fd f865 	bl	8008a18 <memcpy>
 800b94e:	2201      	movs	r2, #1
 800b950:	4629      	mov	r1, r5
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fcde 	bl	800c314 <__lshift>
 800b958:	9b00      	ldr	r3, [sp, #0]
 800b95a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b95e:	9703      	str	r7, [sp, #12]
 800b960:	f003 0301 	and.w	r3, r3, #1
 800b964:	4607      	mov	r7, r0
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	4631      	mov	r1, r6
 800b96a:	4650      	mov	r0, sl
 800b96c:	f7ff fa60 	bl	800ae30 <quorem>
 800b970:	9903      	ldr	r1, [sp, #12]
 800b972:	4605      	mov	r5, r0
 800b974:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b978:	4650      	mov	r0, sl
 800b97a:	f000 fd1c 	bl	800c3b6 <__mcmp>
 800b97e:	463a      	mov	r2, r7
 800b980:	9000      	str	r0, [sp, #0]
 800b982:	4631      	mov	r1, r6
 800b984:	4620      	mov	r0, r4
 800b986:	f000 fd30 	bl	800c3ea <__mdiff>
 800b98a:	68c3      	ldr	r3, [r0, #12]
 800b98c:	4602      	mov	r2, r0
 800b98e:	bb03      	cbnz	r3, 800b9d2 <_dtoa_r+0xa8a>
 800b990:	4601      	mov	r1, r0
 800b992:	9006      	str	r0, [sp, #24]
 800b994:	4650      	mov	r0, sl
 800b996:	f000 fd0e 	bl	800c3b6 <__mcmp>
 800b99a:	9a06      	ldr	r2, [sp, #24]
 800b99c:	4603      	mov	r3, r0
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	9306      	str	r3, [sp, #24]
 800b9a4:	f000 fb32 	bl	800c00c <_Bfree>
 800b9a8:	9b06      	ldr	r3, [sp, #24]
 800b9aa:	b9a3      	cbnz	r3, 800b9d6 <_dtoa_r+0xa8e>
 800b9ac:	9a07      	ldr	r2, [sp, #28]
 800b9ae:	b992      	cbnz	r2, 800b9d6 <_dtoa_r+0xa8e>
 800b9b0:	9a05      	ldr	r2, [sp, #20]
 800b9b2:	b982      	cbnz	r2, 800b9d6 <_dtoa_r+0xa8e>
 800b9b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9b8:	d029      	beq.n	800ba0e <_dtoa_r+0xac6>
 800b9ba:	9b00      	ldr	r3, [sp, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	dd01      	ble.n	800b9c4 <_dtoa_r+0xa7c>
 800b9c0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800b9c4:	f108 0501 	add.w	r5, r8, #1
 800b9c8:	f888 9000 	strb.w	r9, [r8]
 800b9cc:	e753      	b.n	800b876 <_dtoa_r+0x92e>
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	e7c2      	b.n	800b958 <_dtoa_r+0xa10>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e7e3      	b.n	800b99e <_dtoa_r+0xa56>
 800b9d6:	9a00      	ldr	r2, [sp, #0]
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	db04      	blt.n	800b9e6 <_dtoa_r+0xa9e>
 800b9dc:	d125      	bne.n	800ba2a <_dtoa_r+0xae2>
 800b9de:	9a07      	ldr	r2, [sp, #28]
 800b9e0:	bb1a      	cbnz	r2, 800ba2a <_dtoa_r+0xae2>
 800b9e2:	9a05      	ldr	r2, [sp, #20]
 800b9e4:	bb0a      	cbnz	r2, 800ba2a <_dtoa_r+0xae2>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	ddec      	ble.n	800b9c4 <_dtoa_r+0xa7c>
 800b9ea:	4651      	mov	r1, sl
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fc90 	bl	800c314 <__lshift>
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	f000 fcdd 	bl	800c3b6 <__mcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	dc03      	bgt.n	800ba08 <_dtoa_r+0xac0>
 800ba00:	d1e0      	bne.n	800b9c4 <_dtoa_r+0xa7c>
 800ba02:	f019 0f01 	tst.w	r9, #1
 800ba06:	d0dd      	beq.n	800b9c4 <_dtoa_r+0xa7c>
 800ba08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba0c:	d1d8      	bne.n	800b9c0 <_dtoa_r+0xa78>
 800ba0e:	2339      	movs	r3, #57	; 0x39
 800ba10:	f888 3000 	strb.w	r3, [r8]
 800ba14:	f108 0801 	add.w	r8, r8, #1
 800ba18:	4645      	mov	r5, r8
 800ba1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba1e:	2b39      	cmp	r3, #57	; 0x39
 800ba20:	f105 32ff 	add.w	r2, r5, #4294967295
 800ba24:	d03b      	beq.n	800ba9e <_dtoa_r+0xb56>
 800ba26:	3301      	adds	r3, #1
 800ba28:	e040      	b.n	800baac <_dtoa_r+0xb64>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f108 0501 	add.w	r5, r8, #1
 800ba30:	dd05      	ble.n	800ba3e <_dtoa_r+0xaf6>
 800ba32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba36:	d0ea      	beq.n	800ba0e <_dtoa_r+0xac6>
 800ba38:	f109 0901 	add.w	r9, r9, #1
 800ba3c:	e7c4      	b.n	800b9c8 <_dtoa_r+0xa80>
 800ba3e:	9b02      	ldr	r3, [sp, #8]
 800ba40:	9a04      	ldr	r2, [sp, #16]
 800ba42:	f805 9c01 	strb.w	r9, [r5, #-1]
 800ba46:	1aeb      	subs	r3, r5, r3
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	46a8      	mov	r8, r5
 800ba4c:	f43f af4b 	beq.w	800b8e6 <_dtoa_r+0x99e>
 800ba50:	4651      	mov	r1, sl
 800ba52:	2300      	movs	r3, #0
 800ba54:	220a      	movs	r2, #10
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 faef 	bl	800c03a <__multadd>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	9903      	ldr	r1, [sp, #12]
 800ba60:	42bb      	cmp	r3, r7
 800ba62:	4682      	mov	sl, r0
 800ba64:	f04f 0300 	mov.w	r3, #0
 800ba68:	f04f 020a 	mov.w	r2, #10
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	d104      	bne.n	800ba7a <_dtoa_r+0xb32>
 800ba70:	f000 fae3 	bl	800c03a <__multadd>
 800ba74:	9003      	str	r0, [sp, #12]
 800ba76:	4607      	mov	r7, r0
 800ba78:	e776      	b.n	800b968 <_dtoa_r+0xa20>
 800ba7a:	f000 fade 	bl	800c03a <__multadd>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9003      	str	r0, [sp, #12]
 800ba82:	220a      	movs	r2, #10
 800ba84:	4639      	mov	r1, r7
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fad7 	bl	800c03a <__multadd>
 800ba8c:	e7f3      	b.n	800ba76 <_dtoa_r+0xb2e>
 800ba8e:	4651      	mov	r1, sl
 800ba90:	2300      	movs	r3, #0
 800ba92:	220a      	movs	r2, #10
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 fad0 	bl	800c03a <__multadd>
 800ba9a:	4682      	mov	sl, r0
 800ba9c:	e70d      	b.n	800b8ba <_dtoa_r+0x972>
 800ba9e:	9b02      	ldr	r3, [sp, #8]
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d105      	bne.n	800bab0 <_dtoa_r+0xb68>
 800baa4:	9a02      	ldr	r2, [sp, #8]
 800baa6:	f10b 0b01 	add.w	fp, fp, #1
 800baaa:	2331      	movs	r3, #49	; 0x31
 800baac:	7013      	strb	r3, [r2, #0]
 800baae:	e6e2      	b.n	800b876 <_dtoa_r+0x92e>
 800bab0:	4615      	mov	r5, r2
 800bab2:	e7b2      	b.n	800ba1a <_dtoa_r+0xad2>
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <_dtoa_r+0xb94>)
 800bab6:	f7ff baae 	b.w	800b016 <_dtoa_r+0xce>
 800baba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800babc:	2b00      	cmp	r3, #0
 800babe:	f47f aa88 	bne.w	800afd2 <_dtoa_r+0x8a>
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <_dtoa_r+0xb98>)
 800bac4:	f7ff baa7 	b.w	800b016 <_dtoa_r+0xce>
 800bac8:	9b04      	ldr	r3, [sp, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f73f aef4 	bgt.w	800b8b8 <_dtoa_r+0x970>
 800bad0:	9b07      	ldr	r3, [sp, #28]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	f77f aef0 	ble.w	800b8b8 <_dtoa_r+0x970>
 800bad8:	e6b8      	b.n	800b84c <_dtoa_r+0x904>
 800bada:	bf00      	nop
 800badc:	0800d27a 	.word	0x0800d27a
 800bae0:	0800d2bc 	.word	0x0800d2bc

0800bae4 <_fclose_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4605      	mov	r5, r0
 800bae8:	460c      	mov	r4, r1
 800baea:	b911      	cbnz	r1, 800baf2 <_fclose_r+0xe>
 800baec:	2600      	movs	r6, #0
 800baee:	4630      	mov	r0, r6
 800baf0:	bd70      	pop	{r4, r5, r6, pc}
 800baf2:	b118      	cbz	r0, 800bafc <_fclose_r+0x18>
 800baf4:	6983      	ldr	r3, [r0, #24]
 800baf6:	b90b      	cbnz	r3, 800bafc <_fclose_r+0x18>
 800baf8:	f7fc fb98 	bl	800822c <__sinit>
 800bafc:	4b2c      	ldr	r3, [pc, #176]	; (800bbb0 <_fclose_r+0xcc>)
 800bafe:	429c      	cmp	r4, r3
 800bb00:	d114      	bne.n	800bb2c <_fclose_r+0x48>
 800bb02:	686c      	ldr	r4, [r5, #4]
 800bb04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb06:	07d8      	lsls	r0, r3, #31
 800bb08:	d405      	bmi.n	800bb16 <_fclose_r+0x32>
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	0599      	lsls	r1, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_fclose_r+0x32>
 800bb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb12:	f7fc fd61 	bl	80085d8 <__retarget_lock_acquire_recursive>
 800bb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1a:	b98b      	cbnz	r3, 800bb40 <_fclose_r+0x5c>
 800bb1c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800bb1e:	f016 0601 	ands.w	r6, r6, #1
 800bb22:	d1e3      	bne.n	800baec <_fclose_r+0x8>
 800bb24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb26:	f7fc fd58 	bl	80085da <__retarget_lock_release_recursive>
 800bb2a:	e7e0      	b.n	800baee <_fclose_r+0xa>
 800bb2c:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <_fclose_r+0xd0>)
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d101      	bne.n	800bb36 <_fclose_r+0x52>
 800bb32:	68ac      	ldr	r4, [r5, #8]
 800bb34:	e7e6      	b.n	800bb04 <_fclose_r+0x20>
 800bb36:	4b20      	ldr	r3, [pc, #128]	; (800bbb8 <_fclose_r+0xd4>)
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	bf08      	it	eq
 800bb3c:	68ec      	ldreq	r4, [r5, #12]
 800bb3e:	e7e1      	b.n	800bb04 <_fclose_r+0x20>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4628      	mov	r0, r5
 800bb44:	f7fc fa3a 	bl	8007fbc <__sflush_r>
 800bb48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	b133      	cbz	r3, 800bb5c <_fclose_r+0x78>
 800bb4e:	6a21      	ldr	r1, [r4, #32]
 800bb50:	4628      	mov	r0, r5
 800bb52:	4798      	blx	r3
 800bb54:	2800      	cmp	r0, #0
 800bb56:	bfb8      	it	lt
 800bb58:	f04f 36ff 	movlt.w	r6, #4294967295
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	061a      	lsls	r2, r3, #24
 800bb60:	d503      	bpl.n	800bb6a <_fclose_r+0x86>
 800bb62:	6921      	ldr	r1, [r4, #16]
 800bb64:	4628      	mov	r0, r5
 800bb66:	f7fc fc37 	bl	80083d8 <_free_r>
 800bb6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb6c:	b141      	cbz	r1, 800bb80 <_fclose_r+0x9c>
 800bb6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb72:	4299      	cmp	r1, r3
 800bb74:	d002      	beq.n	800bb7c <_fclose_r+0x98>
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7fc fc2e 	bl	80083d8 <_free_r>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	6363      	str	r3, [r4, #52]	; 0x34
 800bb80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb82:	b121      	cbz	r1, 800bb8e <_fclose_r+0xaa>
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7fc fc27 	bl	80083d8 <_free_r>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	64a3      	str	r3, [r4, #72]	; 0x48
 800bb8e:	f7fc fb35 	bl	80081fc <__sfp_lock_acquire>
 800bb92:	2300      	movs	r3, #0
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb98:	07db      	lsls	r3, r3, #31
 800bb9a:	d402      	bmi.n	800bba2 <_fclose_r+0xbe>
 800bb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb9e:	f7fc fd1c 	bl	80085da <__retarget_lock_release_recursive>
 800bba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bba4:	f7fc fd17 	bl	80085d6 <__retarget_lock_close_recursive>
 800bba8:	f7fc fb2e 	bl	8008208 <__sfp_lock_release>
 800bbac:	e79f      	b.n	800baee <_fclose_r+0xa>
 800bbae:	bf00      	nop
 800bbb0:	0800d204 	.word	0x0800d204
 800bbb4:	0800d224 	.word	0x0800d224
 800bbb8:	0800d1e4 	.word	0x0800d1e4

0800bbbc <__sfvwrite_r>:
 800bbbc:	6893      	ldr	r3, [r2, #8]
 800bbbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	4690      	mov	r8, r2
 800bbc8:	b91b      	cbnz	r3, 800bbd2 <__sfvwrite_r+0x16>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	b003      	add	sp, #12
 800bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd2:	898b      	ldrh	r3, [r1, #12]
 800bbd4:	0718      	lsls	r0, r3, #28
 800bbd6:	d526      	bpl.n	800bc26 <__sfvwrite_r+0x6a>
 800bbd8:	690b      	ldr	r3, [r1, #16]
 800bbda:	b323      	cbz	r3, 800bc26 <__sfvwrite_r+0x6a>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f8d8 6000 	ldr.w	r6, [r8]
 800bbe2:	f013 0902 	ands.w	r9, r3, #2
 800bbe6:	d02d      	beq.n	800bc44 <__sfvwrite_r+0x88>
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	f8df b264 	ldr.w	fp, [pc, #612]	; 800be54 <__sfvwrite_r+0x298>
 800bbf0:	46d1      	mov	r9, sl
 800bbf2:	f1b9 0f00 	cmp.w	r9, #0
 800bbf6:	d01f      	beq.n	800bc38 <__sfvwrite_r+0x7c>
 800bbf8:	45d9      	cmp	r9, fp
 800bbfa:	464b      	mov	r3, r9
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	bf28      	it	cs
 800bc00:	465b      	movcs	r3, fp
 800bc02:	6a21      	ldr	r1, [r4, #32]
 800bc04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bc06:	4638      	mov	r0, r7
 800bc08:	47a8      	blx	r5
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f340 8089 	ble.w	800bd22 <__sfvwrite_r+0x166>
 800bc10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc14:	4482      	add	sl, r0
 800bc16:	eba9 0900 	sub.w	r9, r9, r0
 800bc1a:	1a18      	subs	r0, r3, r0
 800bc1c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d1e6      	bne.n	800bbf2 <__sfvwrite_r+0x36>
 800bc24:	e7d1      	b.n	800bbca <__sfvwrite_r+0xe>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f7ff f883 	bl	800ad34 <__swsetup_r>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d0d4      	beq.n	800bbdc <__sfvwrite_r+0x20>
 800bc32:	f04f 30ff 	mov.w	r0, #4294967295
 800bc36:	e7c9      	b.n	800bbcc <__sfvwrite_r+0x10>
 800bc38:	f8d6 a000 	ldr.w	sl, [r6]
 800bc3c:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800bc40:	3608      	adds	r6, #8
 800bc42:	e7d6      	b.n	800bbf2 <__sfvwrite_r+0x36>
 800bc44:	f013 0301 	ands.w	r3, r3, #1
 800bc48:	d043      	beq.n	800bcd2 <__sfvwrite_r+0x116>
 800bc4a:	4648      	mov	r0, r9
 800bc4c:	46ca      	mov	sl, r9
 800bc4e:	46cb      	mov	fp, r9
 800bc50:	f1bb 0f00 	cmp.w	fp, #0
 800bc54:	f000 80d9 	beq.w	800be0a <__sfvwrite_r+0x24e>
 800bc58:	b950      	cbnz	r0, 800bc70 <__sfvwrite_r+0xb4>
 800bc5a:	465a      	mov	r2, fp
 800bc5c:	210a      	movs	r1, #10
 800bc5e:	4650      	mov	r0, sl
 800bc60:	f7f4 face 	bl	8000200 <memchr>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f000 80d5 	beq.w	800be14 <__sfvwrite_r+0x258>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	eba0 090a 	sub.w	r9, r0, sl
 800bc70:	6820      	ldr	r0, [r4, #0]
 800bc72:	6921      	ldr	r1, [r4, #16]
 800bc74:	6962      	ldr	r2, [r4, #20]
 800bc76:	45d9      	cmp	r9, fp
 800bc78:	464b      	mov	r3, r9
 800bc7a:	bf28      	it	cs
 800bc7c:	465b      	movcs	r3, fp
 800bc7e:	4288      	cmp	r0, r1
 800bc80:	f240 80cb 	bls.w	800be1a <__sfvwrite_r+0x25e>
 800bc84:	68a5      	ldr	r5, [r4, #8]
 800bc86:	4415      	add	r5, r2
 800bc88:	42ab      	cmp	r3, r5
 800bc8a:	f340 80c6 	ble.w	800be1a <__sfvwrite_r+0x25e>
 800bc8e:	4651      	mov	r1, sl
 800bc90:	462a      	mov	r2, r5
 800bc92:	f000 f96d 	bl	800bf70 <memmove>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	442b      	add	r3, r5
 800bc9a:	6023      	str	r3, [r4, #0]
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	4638      	mov	r0, r7
 800bca0:	f7fc fa1e 	bl	80080e0 <_fflush_r>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d13c      	bne.n	800bd22 <__sfvwrite_r+0x166>
 800bca8:	ebb9 0905 	subs.w	r9, r9, r5
 800bcac:	f040 80cf 	bne.w	800be4e <__sfvwrite_r+0x292>
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	f7fc fa14 	bl	80080e0 <_fflush_r>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d132      	bne.n	800bd22 <__sfvwrite_r+0x166>
 800bcbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcc0:	44aa      	add	sl, r5
 800bcc2:	ebab 0b05 	sub.w	fp, fp, r5
 800bcc6:	1b5d      	subs	r5, r3, r5
 800bcc8:	f8c8 5008 	str.w	r5, [r8, #8]
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	d1bf      	bne.n	800bc50 <__sfvwrite_r+0x94>
 800bcd0:	e77b      	b.n	800bbca <__sfvwrite_r+0xe>
 800bcd2:	4699      	mov	r9, r3
 800bcd4:	469a      	mov	sl, r3
 800bcd6:	f1ba 0f00 	cmp.w	sl, #0
 800bcda:	d027      	beq.n	800bd2c <__sfvwrite_r+0x170>
 800bcdc:	89a2      	ldrh	r2, [r4, #12]
 800bcde:	68a5      	ldr	r5, [r4, #8]
 800bce0:	0591      	lsls	r1, r2, #22
 800bce2:	d565      	bpl.n	800bdb0 <__sfvwrite_r+0x1f4>
 800bce4:	45aa      	cmp	sl, r5
 800bce6:	d33b      	bcc.n	800bd60 <__sfvwrite_r+0x1a4>
 800bce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcec:	d036      	beq.n	800bd5c <__sfvwrite_r+0x1a0>
 800bcee:	6921      	ldr	r1, [r4, #16]
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	1a5b      	subs	r3, r3, r1
 800bcf4:	9301      	str	r3, [sp, #4]
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	2002      	movs	r0, #2
 800bcfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bcfe:	fb93 fbf0 	sdiv	fp, r3, r0
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	1c58      	adds	r0, r3, #1
 800bd06:	4450      	add	r0, sl
 800bd08:	4583      	cmp	fp, r0
 800bd0a:	bf38      	it	cc
 800bd0c:	4683      	movcc	fp, r0
 800bd0e:	0553      	lsls	r3, r2, #21
 800bd10:	d53e      	bpl.n	800bd90 <__sfvwrite_r+0x1d4>
 800bd12:	4659      	mov	r1, fp
 800bd14:	4638      	mov	r0, r7
 800bd16:	f7fc fc71 	bl	80085fc <_malloc_r>
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	b950      	cbnz	r0, 800bd34 <__sfvwrite_r+0x178>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	e782      	b.n	800bc32 <__sfvwrite_r+0x76>
 800bd2c:	e896 0600 	ldmia.w	r6, {r9, sl}
 800bd30:	3608      	adds	r6, #8
 800bd32:	e7d0      	b.n	800bcd6 <__sfvwrite_r+0x11a>
 800bd34:	9a01      	ldr	r2, [sp, #4]
 800bd36:	6921      	ldr	r1, [r4, #16]
 800bd38:	f7fc fe6e 	bl	8008a18 <memcpy>
 800bd3c:	89a2      	ldrh	r2, [r4, #12]
 800bd3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bd42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd46:	81a2      	strh	r2, [r4, #12]
 800bd48:	9b01      	ldr	r3, [sp, #4]
 800bd4a:	6125      	str	r5, [r4, #16]
 800bd4c:	441d      	add	r5, r3
 800bd4e:	ebab 0303 	sub.w	r3, fp, r3
 800bd52:	6025      	str	r5, [r4, #0]
 800bd54:	f8c4 b014 	str.w	fp, [r4, #20]
 800bd58:	4655      	mov	r5, sl
 800bd5a:	60a3      	str	r3, [r4, #8]
 800bd5c:	45aa      	cmp	sl, r5
 800bd5e:	d200      	bcs.n	800bd62 <__sfvwrite_r+0x1a6>
 800bd60:	4655      	mov	r5, sl
 800bd62:	462a      	mov	r2, r5
 800bd64:	4649      	mov	r1, r9
 800bd66:	6820      	ldr	r0, [r4, #0]
 800bd68:	f000 f902 	bl	800bf70 <memmove>
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	1b5b      	subs	r3, r3, r5
 800bd70:	60a3      	str	r3, [r4, #8]
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	441d      	add	r5, r3
 800bd76:	6025      	str	r5, [r4, #0]
 800bd78:	4655      	mov	r5, sl
 800bd7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd7e:	44a9      	add	r9, r5
 800bd80:	ebaa 0a05 	sub.w	sl, sl, r5
 800bd84:	1b5d      	subs	r5, r3, r5
 800bd86:	f8c8 5008 	str.w	r5, [r8, #8]
 800bd8a:	2d00      	cmp	r5, #0
 800bd8c:	d1a3      	bne.n	800bcd6 <__sfvwrite_r+0x11a>
 800bd8e:	e71c      	b.n	800bbca <__sfvwrite_r+0xe>
 800bd90:	465a      	mov	r2, fp
 800bd92:	4638      	mov	r0, r7
 800bd94:	f000 fc30 	bl	800c5f8 <_realloc_r>
 800bd98:	4605      	mov	r5, r0
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d1d4      	bne.n	800bd48 <__sfvwrite_r+0x18c>
 800bd9e:	6921      	ldr	r1, [r4, #16]
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7fc fb19 	bl	80083d8 <_free_r>
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	e7b6      	b.n	800bd1e <__sfvwrite_r+0x162>
 800bdb0:	6820      	ldr	r0, [r4, #0]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	4298      	cmp	r0, r3
 800bdb6:	d802      	bhi.n	800bdbe <__sfvwrite_r+0x202>
 800bdb8:	6962      	ldr	r2, [r4, #20]
 800bdba:	4592      	cmp	sl, r2
 800bdbc:	d215      	bcs.n	800bdea <__sfvwrite_r+0x22e>
 800bdbe:	4555      	cmp	r5, sl
 800bdc0:	bf28      	it	cs
 800bdc2:	4655      	movcs	r5, sl
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	f000 f8d2 	bl	800bf70 <memmove>
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	1b5b      	subs	r3, r3, r5
 800bdd2:	442a      	add	r2, r5
 800bdd4:	60a3      	str	r3, [r4, #8]
 800bdd6:	6022      	str	r2, [r4, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1ce      	bne.n	800bd7a <__sfvwrite_r+0x1be>
 800bddc:	4621      	mov	r1, r4
 800bdde:	4638      	mov	r0, r7
 800bde0:	f7fc f97e 	bl	80080e0 <_fflush_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0c8      	beq.n	800bd7a <__sfvwrite_r+0x1be>
 800bde8:	e79b      	b.n	800bd22 <__sfvwrite_r+0x166>
 800bdea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bdee:	4553      	cmp	r3, sl
 800bdf0:	bf28      	it	cs
 800bdf2:	4653      	movcs	r3, sl
 800bdf4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bdf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdfa:	6a21      	ldr	r1, [r4, #32]
 800bdfc:	4353      	muls	r3, r2
 800bdfe:	4638      	mov	r0, r7
 800be00:	464a      	mov	r2, r9
 800be02:	47a8      	blx	r5
 800be04:	1e05      	subs	r5, r0, #0
 800be06:	dcb8      	bgt.n	800bd7a <__sfvwrite_r+0x1be>
 800be08:	e78b      	b.n	800bd22 <__sfvwrite_r+0x166>
 800be0a:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800be0e:	2000      	movs	r0, #0
 800be10:	3608      	adds	r6, #8
 800be12:	e71d      	b.n	800bc50 <__sfvwrite_r+0x94>
 800be14:	f10b 0901 	add.w	r9, fp, #1
 800be18:	e72a      	b.n	800bc70 <__sfvwrite_r+0xb4>
 800be1a:	4293      	cmp	r3, r2
 800be1c:	db09      	blt.n	800be32 <__sfvwrite_r+0x276>
 800be1e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800be20:	6a21      	ldr	r1, [r4, #32]
 800be22:	4613      	mov	r3, r2
 800be24:	4638      	mov	r0, r7
 800be26:	4652      	mov	r2, sl
 800be28:	47a8      	blx	r5
 800be2a:	1e05      	subs	r5, r0, #0
 800be2c:	f73f af3c 	bgt.w	800bca8 <__sfvwrite_r+0xec>
 800be30:	e777      	b.n	800bd22 <__sfvwrite_r+0x166>
 800be32:	461a      	mov	r2, r3
 800be34:	4651      	mov	r1, sl
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	f000 f89a 	bl	800bf70 <memmove>
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	68a2      	ldr	r2, [r4, #8]
 800be40:	1ad2      	subs	r2, r2, r3
 800be42:	60a2      	str	r2, [r4, #8]
 800be44:	6822      	ldr	r2, [r4, #0]
 800be46:	441a      	add	r2, r3
 800be48:	6022      	str	r2, [r4, #0]
 800be4a:	461d      	mov	r5, r3
 800be4c:	e72c      	b.n	800bca8 <__sfvwrite_r+0xec>
 800be4e:	2001      	movs	r0, #1
 800be50:	e734      	b.n	800bcbc <__sfvwrite_r+0x100>
 800be52:	bf00      	nop
 800be54:	7ffffc00 	.word	0x7ffffc00

0800be58 <_localeconv_r>:
 800be58:	4b04      	ldr	r3, [pc, #16]	; (800be6c <_localeconv_r+0x14>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6a18      	ldr	r0, [r3, #32]
 800be5e:	4b04      	ldr	r3, [pc, #16]	; (800be70 <_localeconv_r+0x18>)
 800be60:	2800      	cmp	r0, #0
 800be62:	bf08      	it	eq
 800be64:	4618      	moveq	r0, r3
 800be66:	30f0      	adds	r0, #240	; 0xf0
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	2000003c 	.word	0x2000003c
 800be70:	20000540 	.word	0x20000540

0800be74 <_lseek_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4c07      	ldr	r4, [pc, #28]	; (800be94 <_lseek_r+0x20>)
 800be78:	4605      	mov	r5, r0
 800be7a:	4608      	mov	r0, r1
 800be7c:	4611      	mov	r1, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	f7fb feb2 	bl	8007bec <_lseek>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_lseek_r+0x1e>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_lseek_r+0x1e>
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	20001dc8 	.word	0x20001dc8

0800be98 <__swhatbuf_r>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	460e      	mov	r6, r1
 800be9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea0:	2900      	cmp	r1, #0
 800bea2:	b090      	sub	sp, #64	; 0x40
 800bea4:	4614      	mov	r4, r2
 800bea6:	461d      	mov	r5, r3
 800bea8:	da09      	bge.n	800bebe <__swhatbuf_r+0x26>
 800beaa:	89b3      	ldrh	r3, [r6, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800beb2:	602a      	str	r2, [r5, #0]
 800beb4:	d116      	bne.n	800bee4 <__swhatbuf_r+0x4c>
 800beb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	e015      	b.n	800beea <__swhatbuf_r+0x52>
 800bebe:	aa01      	add	r2, sp, #4
 800bec0:	f000 fec0 	bl	800cc44 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbf0      	blt.n	800beaa <__swhatbuf_r+0x12>
 800bec8:	9a02      	ldr	r2, [sp, #8]
 800beca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bed2:	425a      	negs	r2, r3
 800bed4:	415a      	adcs	r2, r3
 800bed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beda:	602a      	str	r2, [r5, #0]
 800bedc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	e002      	b.n	800beea <__swhatbuf_r+0x52>
 800bee4:	2340      	movs	r3, #64	; 0x40
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	4610      	mov	r0, r2
 800beea:	b010      	add	sp, #64	; 0x40
 800beec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bef0 <__smakebuf_r>:
 800bef0:	898b      	ldrh	r3, [r1, #12]
 800bef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bef4:	079d      	lsls	r5, r3, #30
 800bef6:	4606      	mov	r6, r0
 800bef8:	460c      	mov	r4, r1
 800befa:	d507      	bpl.n	800bf0c <__smakebuf_r+0x1c>
 800befc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	2301      	movs	r3, #1
 800bf06:	6163      	str	r3, [r4, #20]
 800bf08:	b002      	add	sp, #8
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}
 800bf0c:	ab01      	add	r3, sp, #4
 800bf0e:	466a      	mov	r2, sp
 800bf10:	f7ff ffc2 	bl	800be98 <__swhatbuf_r>
 800bf14:	9900      	ldr	r1, [sp, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7fc fb6f 	bl	80085fc <_malloc_r>
 800bf1e:	b948      	cbnz	r0, 800bf34 <__smakebuf_r+0x44>
 800bf20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf24:	059a      	lsls	r2, r3, #22
 800bf26:	d4ef      	bmi.n	800bf08 <__smakebuf_r+0x18>
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	f043 0302 	orr.w	r3, r3, #2
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	e7e3      	b.n	800befc <__smakebuf_r+0xc>
 800bf34:	4b0d      	ldr	r3, [pc, #52]	; (800bf6c <__smakebuf_r+0x7c>)
 800bf36:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	6020      	str	r0, [r4, #0]
 800bf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	9b00      	ldr	r3, [sp, #0]
 800bf44:	6163      	str	r3, [r4, #20]
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	6120      	str	r0, [r4, #16]
 800bf4a:	b15b      	cbz	r3, 800bf64 <__smakebuf_r+0x74>
 800bf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf50:	4630      	mov	r0, r6
 800bf52:	f000 fe89 	bl	800cc68 <_isatty_r>
 800bf56:	b128      	cbz	r0, 800bf64 <__smakebuf_r+0x74>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	f023 0303 	bic.w	r3, r3, #3
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	431d      	orrs	r5, r3
 800bf68:	81a5      	strh	r5, [r4, #12]
 800bf6a:	e7cd      	b.n	800bf08 <__smakebuf_r+0x18>
 800bf6c:	0800817d 	.word	0x0800817d

0800bf70 <memmove>:
 800bf70:	4288      	cmp	r0, r1
 800bf72:	b510      	push	{r4, lr}
 800bf74:	eb01 0302 	add.w	r3, r1, r2
 800bf78:	d803      	bhi.n	800bf82 <memmove+0x12>
 800bf7a:	1e42      	subs	r2, r0, #1
 800bf7c:	4299      	cmp	r1, r3
 800bf7e:	d10c      	bne.n	800bf9a <memmove+0x2a>
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	4298      	cmp	r0, r3
 800bf84:	d2f9      	bcs.n	800bf7a <memmove+0xa>
 800bf86:	1881      	adds	r1, r0, r2
 800bf88:	1ad2      	subs	r2, r2, r3
 800bf8a:	42d3      	cmn	r3, r2
 800bf8c:	d100      	bne.n	800bf90 <memmove+0x20>
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bf98:	e7f7      	b.n	800bf8a <memmove+0x1a>
 800bf9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bfa2:	e7eb      	b.n	800bf7c <memmove+0xc>

0800bfa4 <_Balloc>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460e      	mov	r6, r1
 800bfac:	b93d      	cbnz	r5, 800bfbe <_Balloc+0x1a>
 800bfae:	2010      	movs	r0, #16
 800bfb0:	f7fc fb14 	bl	80085dc <malloc>
 800bfb4:	6260      	str	r0, [r4, #36]	; 0x24
 800bfb6:	6045      	str	r5, [r0, #4]
 800bfb8:	6085      	str	r5, [r0, #8]
 800bfba:	6005      	str	r5, [r0, #0]
 800bfbc:	60c5      	str	r5, [r0, #12]
 800bfbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bfc0:	68eb      	ldr	r3, [r5, #12]
 800bfc2:	b183      	cbz	r3, 800bfe6 <_Balloc+0x42>
 800bfc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bfcc:	b9b8      	cbnz	r0, 800bffe <_Balloc+0x5a>
 800bfce:	2101      	movs	r1, #1
 800bfd0:	fa01 f506 	lsl.w	r5, r1, r6
 800bfd4:	1d6a      	adds	r2, r5, #5
 800bfd6:	0092      	lsls	r2, r2, #2
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fd9b 	bl	800cb14 <_calloc_r>
 800bfde:	b160      	cbz	r0, 800bffa <_Balloc+0x56>
 800bfe0:	6046      	str	r6, [r0, #4]
 800bfe2:	6085      	str	r5, [r0, #8]
 800bfe4:	e00e      	b.n	800c004 <_Balloc+0x60>
 800bfe6:	2221      	movs	r2, #33	; 0x21
 800bfe8:	2104      	movs	r1, #4
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fd92 	bl	800cb14 <_calloc_r>
 800bff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff2:	60e8      	str	r0, [r5, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e4      	bne.n	800bfc4 <_Balloc+0x20>
 800bffa:	2000      	movs	r0, #0
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
 800bffe:	6802      	ldr	r2, [r0, #0]
 800c000:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c004:	2300      	movs	r3, #0
 800c006:	6103      	str	r3, [r0, #16]
 800c008:	60c3      	str	r3, [r0, #12]
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <_Bfree>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c010:	4606      	mov	r6, r0
 800c012:	460d      	mov	r5, r1
 800c014:	b93c      	cbnz	r4, 800c026 <_Bfree+0x1a>
 800c016:	2010      	movs	r0, #16
 800c018:	f7fc fae0 	bl	80085dc <malloc>
 800c01c:	6270      	str	r0, [r6, #36]	; 0x24
 800c01e:	6044      	str	r4, [r0, #4]
 800c020:	6084      	str	r4, [r0, #8]
 800c022:	6004      	str	r4, [r0, #0]
 800c024:	60c4      	str	r4, [r0, #12]
 800c026:	b13d      	cbz	r5, 800c038 <_Bfree+0x2c>
 800c028:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c02a:	686a      	ldr	r2, [r5, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c032:	6029      	str	r1, [r5, #0]
 800c034:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c038:	bd70      	pop	{r4, r5, r6, pc}

0800c03a <__multadd>:
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	690d      	ldr	r5, [r1, #16]
 800c040:	461f      	mov	r7, r3
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	f101 0e14 	add.w	lr, r1, #20
 800c04a:	2300      	movs	r3, #0
 800c04c:	f8de 0000 	ldr.w	r0, [lr]
 800c050:	b281      	uxth	r1, r0
 800c052:	fb02 7101 	mla	r1, r2, r1, r7
 800c056:	0c0f      	lsrs	r7, r1, #16
 800c058:	0c00      	lsrs	r0, r0, #16
 800c05a:	fb02 7000 	mla	r0, r2, r0, r7
 800c05e:	b289      	uxth	r1, r1
 800c060:	3301      	adds	r3, #1
 800c062:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c066:	429d      	cmp	r5, r3
 800c068:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c06c:	f84e 1b04 	str.w	r1, [lr], #4
 800c070:	dcec      	bgt.n	800c04c <__multadd+0x12>
 800c072:	b1d7      	cbz	r7, 800c0aa <__multadd+0x70>
 800c074:	68a3      	ldr	r3, [r4, #8]
 800c076:	429d      	cmp	r5, r3
 800c078:	db12      	blt.n	800c0a0 <__multadd+0x66>
 800c07a:	6861      	ldr	r1, [r4, #4]
 800c07c:	4630      	mov	r0, r6
 800c07e:	3101      	adds	r1, #1
 800c080:	f7ff ff90 	bl	800bfa4 <_Balloc>
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	3202      	adds	r2, #2
 800c088:	f104 010c 	add.w	r1, r4, #12
 800c08c:	4680      	mov	r8, r0
 800c08e:	0092      	lsls	r2, r2, #2
 800c090:	300c      	adds	r0, #12
 800c092:	f7fc fcc1 	bl	8008a18 <memcpy>
 800c096:	4621      	mov	r1, r4
 800c098:	4630      	mov	r0, r6
 800c09a:	f7ff ffb7 	bl	800c00c <_Bfree>
 800c09e:	4644      	mov	r4, r8
 800c0a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0a4:	3501      	adds	r5, #1
 800c0a6:	615f      	str	r7, [r3, #20]
 800c0a8:	6125      	str	r5, [r4, #16]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0b0 <__hi0bits>:
 800c0b0:	0c02      	lsrs	r2, r0, #16
 800c0b2:	0412      	lsls	r2, r2, #16
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	b9b2      	cbnz	r2, 800c0e6 <__hi0bits+0x36>
 800c0b8:	0403      	lsls	r3, r0, #16
 800c0ba:	2010      	movs	r0, #16
 800c0bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c0c0:	bf04      	itt	eq
 800c0c2:	021b      	lsleq	r3, r3, #8
 800c0c4:	3008      	addeq	r0, #8
 800c0c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c0ca:	bf04      	itt	eq
 800c0cc:	011b      	lsleq	r3, r3, #4
 800c0ce:	3004      	addeq	r0, #4
 800c0d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c0d4:	bf04      	itt	eq
 800c0d6:	009b      	lsleq	r3, r3, #2
 800c0d8:	3002      	addeq	r0, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	db06      	blt.n	800c0ec <__hi0bits+0x3c>
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	d503      	bpl.n	800c0ea <__hi0bits+0x3a>
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	4770      	bx	lr
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e7e8      	b.n	800c0bc <__hi0bits+0xc>
 800c0ea:	2020      	movs	r0, #32
 800c0ec:	4770      	bx	lr

0800c0ee <__lo0bits>:
 800c0ee:	6803      	ldr	r3, [r0, #0]
 800c0f0:	f013 0207 	ands.w	r2, r3, #7
 800c0f4:	4601      	mov	r1, r0
 800c0f6:	d00b      	beq.n	800c110 <__lo0bits+0x22>
 800c0f8:	07da      	lsls	r2, r3, #31
 800c0fa:	d423      	bmi.n	800c144 <__lo0bits+0x56>
 800c0fc:	0798      	lsls	r0, r3, #30
 800c0fe:	bf49      	itett	mi
 800c100:	085b      	lsrmi	r3, r3, #1
 800c102:	089b      	lsrpl	r3, r3, #2
 800c104:	2001      	movmi	r0, #1
 800c106:	600b      	strmi	r3, [r1, #0]
 800c108:	bf5c      	itt	pl
 800c10a:	600b      	strpl	r3, [r1, #0]
 800c10c:	2002      	movpl	r0, #2
 800c10e:	4770      	bx	lr
 800c110:	b298      	uxth	r0, r3
 800c112:	b9a8      	cbnz	r0, 800c140 <__lo0bits+0x52>
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	2010      	movs	r0, #16
 800c118:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c11c:	bf04      	itt	eq
 800c11e:	0a1b      	lsreq	r3, r3, #8
 800c120:	3008      	addeq	r0, #8
 800c122:	071a      	lsls	r2, r3, #28
 800c124:	bf04      	itt	eq
 800c126:	091b      	lsreq	r3, r3, #4
 800c128:	3004      	addeq	r0, #4
 800c12a:	079a      	lsls	r2, r3, #30
 800c12c:	bf04      	itt	eq
 800c12e:	089b      	lsreq	r3, r3, #2
 800c130:	3002      	addeq	r0, #2
 800c132:	07da      	lsls	r2, r3, #31
 800c134:	d402      	bmi.n	800c13c <__lo0bits+0x4e>
 800c136:	085b      	lsrs	r3, r3, #1
 800c138:	d006      	beq.n	800c148 <__lo0bits+0x5a>
 800c13a:	3001      	adds	r0, #1
 800c13c:	600b      	str	r3, [r1, #0]
 800c13e:	4770      	bx	lr
 800c140:	4610      	mov	r0, r2
 800c142:	e7e9      	b.n	800c118 <__lo0bits+0x2a>
 800c144:	2000      	movs	r0, #0
 800c146:	4770      	bx	lr
 800c148:	2020      	movs	r0, #32
 800c14a:	4770      	bx	lr

0800c14c <__i2b>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	460c      	mov	r4, r1
 800c150:	2101      	movs	r1, #1
 800c152:	f7ff ff27 	bl	800bfa4 <_Balloc>
 800c156:	2201      	movs	r2, #1
 800c158:	6144      	str	r4, [r0, #20]
 800c15a:	6102      	str	r2, [r0, #16]
 800c15c:	bd10      	pop	{r4, pc}

0800c15e <__multiply>:
 800c15e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c162:	4614      	mov	r4, r2
 800c164:	690a      	ldr	r2, [r1, #16]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	429a      	cmp	r2, r3
 800c16a:	bfb8      	it	lt
 800c16c:	460b      	movlt	r3, r1
 800c16e:	4689      	mov	r9, r1
 800c170:	bfbc      	itt	lt
 800c172:	46a1      	movlt	r9, r4
 800c174:	461c      	movlt	r4, r3
 800c176:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c17a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c17e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c182:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c186:	eb07 060a 	add.w	r6, r7, sl
 800c18a:	429e      	cmp	r6, r3
 800c18c:	bfc8      	it	gt
 800c18e:	3101      	addgt	r1, #1
 800c190:	f7ff ff08 	bl	800bfa4 <_Balloc>
 800c194:	f100 0514 	add.w	r5, r0, #20
 800c198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c19c:	462b      	mov	r3, r5
 800c19e:	2200      	movs	r2, #0
 800c1a0:	4543      	cmp	r3, r8
 800c1a2:	d316      	bcc.n	800c1d2 <__multiply+0x74>
 800c1a4:	f104 0214 	add.w	r2, r4, #20
 800c1a8:	f109 0114 	add.w	r1, r9, #20
 800c1ac:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800c1b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	9c01      	ldr	r4, [sp, #4]
 800c1b8:	4294      	cmp	r4, r2
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	d80c      	bhi.n	800c1d8 <__multiply+0x7a>
 800c1be:	2e00      	cmp	r6, #0
 800c1c0:	dd03      	ble.n	800c1ca <__multiply+0x6c>
 800c1c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d054      	beq.n	800c274 <__multiply+0x116>
 800c1ca:	6106      	str	r6, [r0, #16]
 800c1cc:	b003      	add	sp, #12
 800c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d2:	f843 2b04 	str.w	r2, [r3], #4
 800c1d6:	e7e3      	b.n	800c1a0 <__multiply+0x42>
 800c1d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1dc:	3204      	adds	r2, #4
 800c1de:	f1ba 0f00 	cmp.w	sl, #0
 800c1e2:	d020      	beq.n	800c226 <__multiply+0xc8>
 800c1e4:	46ae      	mov	lr, r5
 800c1e6:	4689      	mov	r9, r1
 800c1e8:	f04f 0c00 	mov.w	ip, #0
 800c1ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1f0:	f8be b000 	ldrh.w	fp, [lr]
 800c1f4:	b2a3      	uxth	r3, r4
 800c1f6:	fb0a b303 	mla	r3, sl, r3, fp
 800c1fa:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800c1fe:	f8de 4000 	ldr.w	r4, [lr]
 800c202:	4463      	add	r3, ip
 800c204:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c208:	fb0a c40b 	mla	r4, sl, fp, ip
 800c20c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c210:	b29b      	uxth	r3, r3
 800c212:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c216:	454f      	cmp	r7, r9
 800c218:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c21c:	f84e 3b04 	str.w	r3, [lr], #4
 800c220:	d8e4      	bhi.n	800c1ec <__multiply+0x8e>
 800c222:	f8ce c000 	str.w	ip, [lr]
 800c226:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800c22a:	f1b9 0f00 	cmp.w	r9, #0
 800c22e:	d01f      	beq.n	800c270 <__multiply+0x112>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	46ae      	mov	lr, r5
 800c234:	468c      	mov	ip, r1
 800c236:	f04f 0a00 	mov.w	sl, #0
 800c23a:	f8bc 4000 	ldrh.w	r4, [ip]
 800c23e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c242:	fb09 b404 	mla	r4, r9, r4, fp
 800c246:	44a2      	add	sl, r4
 800c248:	b29b      	uxth	r3, r3
 800c24a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c24e:	f84e 3b04 	str.w	r3, [lr], #4
 800c252:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c256:	f8be 4000 	ldrh.w	r4, [lr]
 800c25a:	0c1b      	lsrs	r3, r3, #16
 800c25c:	fb09 4303 	mla	r3, r9, r3, r4
 800c260:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800c264:	4567      	cmp	r7, ip
 800c266:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c26a:	d8e6      	bhi.n	800c23a <__multiply+0xdc>
 800c26c:	f8ce 3000 	str.w	r3, [lr]
 800c270:	3504      	adds	r5, #4
 800c272:	e7a0      	b.n	800c1b6 <__multiply+0x58>
 800c274:	3e01      	subs	r6, #1
 800c276:	e7a2      	b.n	800c1be <__multiply+0x60>

0800c278 <__pow5mult>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4615      	mov	r5, r2
 800c27e:	f012 0203 	ands.w	r2, r2, #3
 800c282:	4606      	mov	r6, r0
 800c284:	460f      	mov	r7, r1
 800c286:	d007      	beq.n	800c298 <__pow5mult+0x20>
 800c288:	3a01      	subs	r2, #1
 800c28a:	4c21      	ldr	r4, [pc, #132]	; (800c310 <__pow5mult+0x98>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c292:	f7ff fed2 	bl	800c03a <__multadd>
 800c296:	4607      	mov	r7, r0
 800c298:	10ad      	asrs	r5, r5, #2
 800c29a:	d035      	beq.n	800c308 <__pow5mult+0x90>
 800c29c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c29e:	b93c      	cbnz	r4, 800c2b0 <__pow5mult+0x38>
 800c2a0:	2010      	movs	r0, #16
 800c2a2:	f7fc f99b 	bl	80085dc <malloc>
 800c2a6:	6270      	str	r0, [r6, #36]	; 0x24
 800c2a8:	6044      	str	r4, [r0, #4]
 800c2aa:	6084      	str	r4, [r0, #8]
 800c2ac:	6004      	str	r4, [r0, #0]
 800c2ae:	60c4      	str	r4, [r0, #12]
 800c2b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2b8:	b94c      	cbnz	r4, 800c2ce <__pow5mult+0x56>
 800c2ba:	f240 2171 	movw	r1, #625	; 0x271
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7ff ff44 	bl	800c14c <__i2b>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	6003      	str	r3, [r0, #0]
 800c2ce:	f04f 0800 	mov.w	r8, #0
 800c2d2:	07eb      	lsls	r3, r5, #31
 800c2d4:	d50a      	bpl.n	800c2ec <__pow5mult+0x74>
 800c2d6:	4639      	mov	r1, r7
 800c2d8:	4622      	mov	r2, r4
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ff3f 	bl	800c15e <__multiply>
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	4681      	mov	r9, r0
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff fe91 	bl	800c00c <_Bfree>
 800c2ea:	464f      	mov	r7, r9
 800c2ec:	106d      	asrs	r5, r5, #1
 800c2ee:	d00b      	beq.n	800c308 <__pow5mult+0x90>
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	b938      	cbnz	r0, 800c304 <__pow5mult+0x8c>
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f7ff ff30 	bl	800c15e <__multiply>
 800c2fe:	6020      	str	r0, [r4, #0]
 800c300:	f8c0 8000 	str.w	r8, [r0]
 800c304:	4604      	mov	r4, r0
 800c306:	e7e4      	b.n	800c2d2 <__pow5mult+0x5a>
 800c308:	4638      	mov	r0, r7
 800c30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30e:	bf00      	nop
 800c310:	0800d3c0 	.word	0x0800d3c0

0800c314 <__lshift>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	6849      	ldr	r1, [r1, #4]
 800c322:	eb0a 0903 	add.w	r9, sl, r3
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	4607      	mov	r7, r0
 800c32a:	4616      	mov	r6, r2
 800c32c:	f109 0501 	add.w	r5, r9, #1
 800c330:	42ab      	cmp	r3, r5
 800c332:	db31      	blt.n	800c398 <__lshift+0x84>
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff fe35 	bl	800bfa4 <_Balloc>
 800c33a:	2200      	movs	r2, #0
 800c33c:	4680      	mov	r8, r0
 800c33e:	f100 0314 	add.w	r3, r0, #20
 800c342:	4611      	mov	r1, r2
 800c344:	4552      	cmp	r2, sl
 800c346:	db2a      	blt.n	800c39e <__lshift+0x8a>
 800c348:	6920      	ldr	r0, [r4, #16]
 800c34a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c34e:	f104 0114 	add.w	r1, r4, #20
 800c352:	f016 021f 	ands.w	r2, r6, #31
 800c356:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c35a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800c35e:	d022      	beq.n	800c3a6 <__lshift+0x92>
 800c360:	f1c2 0c20 	rsb	ip, r2, #32
 800c364:	2000      	movs	r0, #0
 800c366:	680e      	ldr	r6, [r1, #0]
 800c368:	4096      	lsls	r6, r2
 800c36a:	4330      	orrs	r0, r6
 800c36c:	f843 0b04 	str.w	r0, [r3], #4
 800c370:	f851 0b04 	ldr.w	r0, [r1], #4
 800c374:	458e      	cmp	lr, r1
 800c376:	fa20 f00c 	lsr.w	r0, r0, ip
 800c37a:	d8f4      	bhi.n	800c366 <__lshift+0x52>
 800c37c:	6018      	str	r0, [r3, #0]
 800c37e:	b108      	cbz	r0, 800c384 <__lshift+0x70>
 800c380:	f109 0502 	add.w	r5, r9, #2
 800c384:	3d01      	subs	r5, #1
 800c386:	4638      	mov	r0, r7
 800c388:	f8c8 5010 	str.w	r5, [r8, #16]
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7ff fe3d 	bl	800c00c <_Bfree>
 800c392:	4640      	mov	r0, r8
 800c394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c398:	3101      	adds	r1, #1
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	e7c8      	b.n	800c330 <__lshift+0x1c>
 800c39e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	e7ce      	b.n	800c344 <__lshift+0x30>
 800c3a6:	3b04      	subs	r3, #4
 800c3a8:	f851 2b04 	ldr.w	r2, [r1], #4
 800c3ac:	f843 2f04 	str.w	r2, [r3, #4]!
 800c3b0:	458e      	cmp	lr, r1
 800c3b2:	d8f9      	bhi.n	800c3a8 <__lshift+0x94>
 800c3b4:	e7e6      	b.n	800c384 <__lshift+0x70>

0800c3b6 <__mcmp>:
 800c3b6:	6903      	ldr	r3, [r0, #16]
 800c3b8:	690a      	ldr	r2, [r1, #16]
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	b530      	push	{r4, r5, lr}
 800c3be:	d10c      	bne.n	800c3da <__mcmp+0x24>
 800c3c0:	0092      	lsls	r2, r2, #2
 800c3c2:	3014      	adds	r0, #20
 800c3c4:	3114      	adds	r1, #20
 800c3c6:	1884      	adds	r4, r0, r2
 800c3c8:	4411      	add	r1, r2
 800c3ca:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3ce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3d2:	4295      	cmp	r5, r2
 800c3d4:	d003      	beq.n	800c3de <__mcmp+0x28>
 800c3d6:	d305      	bcc.n	800c3e4 <__mcmp+0x2e>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4618      	mov	r0, r3
 800c3dc:	bd30      	pop	{r4, r5, pc}
 800c3de:	42a0      	cmp	r0, r4
 800c3e0:	d3f3      	bcc.n	800c3ca <__mcmp+0x14>
 800c3e2:	e7fa      	b.n	800c3da <__mcmp+0x24>
 800c3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e8:	e7f7      	b.n	800c3da <__mcmp+0x24>

0800c3ea <__mdiff>:
 800c3ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ee:	460d      	mov	r5, r1
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	f7ff ffdd 	bl	800c3b6 <__mcmp>
 800c3fc:	1e06      	subs	r6, r0, #0
 800c3fe:	d108      	bne.n	800c412 <__mdiff+0x28>
 800c400:	4631      	mov	r1, r6
 800c402:	4638      	mov	r0, r7
 800c404:	f7ff fdce 	bl	800bfa4 <_Balloc>
 800c408:	2301      	movs	r3, #1
 800c40a:	6103      	str	r3, [r0, #16]
 800c40c:	6146      	str	r6, [r0, #20]
 800c40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c412:	bfa4      	itt	ge
 800c414:	4623      	movge	r3, r4
 800c416:	462c      	movge	r4, r5
 800c418:	4638      	mov	r0, r7
 800c41a:	6861      	ldr	r1, [r4, #4]
 800c41c:	bfa6      	itte	ge
 800c41e:	461d      	movge	r5, r3
 800c420:	2600      	movge	r6, #0
 800c422:	2601      	movlt	r6, #1
 800c424:	f7ff fdbe 	bl	800bfa4 <_Balloc>
 800c428:	692b      	ldr	r3, [r5, #16]
 800c42a:	60c6      	str	r6, [r0, #12]
 800c42c:	6926      	ldr	r6, [r4, #16]
 800c42e:	f105 0914 	add.w	r9, r5, #20
 800c432:	f104 0214 	add.w	r2, r4, #20
 800c436:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c43a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c43e:	f100 0514 	add.w	r5, r0, #20
 800c442:	f04f 0c00 	mov.w	ip, #0
 800c446:	f852 ab04 	ldr.w	sl, [r2], #4
 800c44a:	f859 4b04 	ldr.w	r4, [r9], #4
 800c44e:	fa1c f18a 	uxtah	r1, ip, sl
 800c452:	b2a3      	uxth	r3, r4
 800c454:	1ac9      	subs	r1, r1, r3
 800c456:	0c23      	lsrs	r3, r4, #16
 800c458:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c45c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c460:	b289      	uxth	r1, r1
 800c462:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c466:	45c8      	cmp	r8, r9
 800c468:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c46c:	4696      	mov	lr, r2
 800c46e:	f845 3b04 	str.w	r3, [r5], #4
 800c472:	d8e8      	bhi.n	800c446 <__mdiff+0x5c>
 800c474:	45be      	cmp	lr, r7
 800c476:	d305      	bcc.n	800c484 <__mdiff+0x9a>
 800c478:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c47c:	b18b      	cbz	r3, 800c4a2 <__mdiff+0xb8>
 800c47e:	6106      	str	r6, [r0, #16]
 800c480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c484:	f85e 1b04 	ldr.w	r1, [lr], #4
 800c488:	fa1c f381 	uxtah	r3, ip, r1
 800c48c:	141a      	asrs	r2, r3, #16
 800c48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c492:	b29b      	uxth	r3, r3
 800c494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c49c:	f845 3b04 	str.w	r3, [r5], #4
 800c4a0:	e7e8      	b.n	800c474 <__mdiff+0x8a>
 800c4a2:	3e01      	subs	r6, #1
 800c4a4:	e7e8      	b.n	800c478 <__mdiff+0x8e>

0800c4a6 <__d2b>:
 800c4a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	ec59 8b10 	vmov	r8, r9, d0
 800c4b2:	4615      	mov	r5, r2
 800c4b4:	f7ff fd76 	bl	800bfa4 <_Balloc>
 800c4b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c4bc:	4607      	mov	r7, r0
 800c4be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4c2:	bb34      	cbnz	r4, 800c512 <__d2b+0x6c>
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ca:	d027      	beq.n	800c51c <__d2b+0x76>
 800c4cc:	a802      	add	r0, sp, #8
 800c4ce:	f840 8d08 	str.w	r8, [r0, #-8]!
 800c4d2:	f7ff fe0c 	bl	800c0ee <__lo0bits>
 800c4d6:	9900      	ldr	r1, [sp, #0]
 800c4d8:	b1f0      	cbz	r0, 800c518 <__d2b+0x72>
 800c4da:	9a01      	ldr	r2, [sp, #4]
 800c4dc:	f1c0 0320 	rsb	r3, r0, #32
 800c4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e4:	430b      	orrs	r3, r1
 800c4e6:	40c2      	lsrs	r2, r0
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	9201      	str	r2, [sp, #4]
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	61bb      	str	r3, [r7, #24]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bf14      	ite	ne
 800c4f4:	2102      	movne	r1, #2
 800c4f6:	2101      	moveq	r1, #1
 800c4f8:	6139      	str	r1, [r7, #16]
 800c4fa:	b1c4      	cbz	r4, 800c52e <__d2b+0x88>
 800c4fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c500:	4404      	add	r4, r0
 800c502:	6034      	str	r4, [r6, #0]
 800c504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c508:	6028      	str	r0, [r5, #0]
 800c50a:	4638      	mov	r0, r7
 800c50c:	b003      	add	sp, #12
 800c50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c516:	e7d5      	b.n	800c4c4 <__d2b+0x1e>
 800c518:	6179      	str	r1, [r7, #20]
 800c51a:	e7e7      	b.n	800c4ec <__d2b+0x46>
 800c51c:	a801      	add	r0, sp, #4
 800c51e:	f7ff fde6 	bl	800c0ee <__lo0bits>
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	2101      	movs	r1, #1
 800c528:	6139      	str	r1, [r7, #16]
 800c52a:	3020      	adds	r0, #32
 800c52c:	e7e5      	b.n	800c4fa <__d2b+0x54>
 800c52e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c532:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c536:	6030      	str	r0, [r6, #0]
 800c538:	6918      	ldr	r0, [r3, #16]
 800c53a:	f7ff fdb9 	bl	800c0b0 <__hi0bits>
 800c53e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c542:	e7e1      	b.n	800c508 <__d2b+0x62>

0800c544 <_putc_r>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	460d      	mov	r5, r1
 800c548:	4614      	mov	r4, r2
 800c54a:	4606      	mov	r6, r0
 800c54c:	b118      	cbz	r0, 800c556 <_putc_r+0x12>
 800c54e:	6983      	ldr	r3, [r0, #24]
 800c550:	b90b      	cbnz	r3, 800c556 <_putc_r+0x12>
 800c552:	f7fb fe6b 	bl	800822c <__sinit>
 800c556:	4b1c      	ldr	r3, [pc, #112]	; (800c5c8 <_putc_r+0x84>)
 800c558:	429c      	cmp	r4, r3
 800c55a:	d124      	bne.n	800c5a6 <_putc_r+0x62>
 800c55c:	6874      	ldr	r4, [r6, #4]
 800c55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c560:	07d8      	lsls	r0, r3, #31
 800c562:	d405      	bmi.n	800c570 <_putc_r+0x2c>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	0599      	lsls	r1, r3, #22
 800c568:	d402      	bmi.n	800c570 <_putc_r+0x2c>
 800c56a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c56c:	f7fc f834 	bl	80085d8 <__retarget_lock_acquire_recursive>
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	3b01      	subs	r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	60a3      	str	r3, [r4, #8]
 800c578:	da05      	bge.n	800c586 <_putc_r+0x42>
 800c57a:	69a2      	ldr	r2, [r4, #24]
 800c57c:	4293      	cmp	r3, r2
 800c57e:	db1c      	blt.n	800c5ba <_putc_r+0x76>
 800c580:	b2eb      	uxtb	r3, r5
 800c582:	2b0a      	cmp	r3, #10
 800c584:	d019      	beq.n	800c5ba <_putc_r+0x76>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	6022      	str	r2, [r4, #0]
 800c58c:	701d      	strb	r5, [r3, #0]
 800c58e:	b2ed      	uxtb	r5, r5
 800c590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c592:	07da      	lsls	r2, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_putc_r+0x5e>
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	059b      	lsls	r3, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_putc_r+0x5e>
 800c59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c59e:	f7fc f81c 	bl	80085da <__retarget_lock_release_recursive>
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	bd70      	pop	{r4, r5, r6, pc}
 800c5a6:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <_putc_r+0x88>)
 800c5a8:	429c      	cmp	r4, r3
 800c5aa:	d101      	bne.n	800c5b0 <_putc_r+0x6c>
 800c5ac:	68b4      	ldr	r4, [r6, #8]
 800c5ae:	e7d6      	b.n	800c55e <_putc_r+0x1a>
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <_putc_r+0x8c>)
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	bf08      	it	eq
 800c5b6:	68f4      	ldreq	r4, [r6, #12]
 800c5b8:	e7d1      	b.n	800c55e <_putc_r+0x1a>
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f000 fa4a 	bl	800ca58 <__swbuf_r>
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	e7e3      	b.n	800c590 <_putc_r+0x4c>
 800c5c8:	0800d204 	.word	0x0800d204
 800c5cc:	0800d224 	.word	0x0800d224
 800c5d0:	0800d1e4 	.word	0x0800d1e4

0800c5d4 <_read_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4c07      	ldr	r4, [pc, #28]	; (800c5f4 <_read_r+0x20>)
 800c5d8:	4605      	mov	r5, r0
 800c5da:	4608      	mov	r0, r1
 800c5dc:	4611      	mov	r1, r2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	6022      	str	r2, [r4, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f7fb fac2 	bl	8007b6c <_read>
 800c5e8:	1c43      	adds	r3, r0, #1
 800c5ea:	d102      	bne.n	800c5f2 <_read_r+0x1e>
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	b103      	cbz	r3, 800c5f2 <_read_r+0x1e>
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	20001dc8 	.word	0x20001dc8

0800c5f8 <_realloc_r>:
 800c5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	b929      	cbnz	r1, 800c60e <_realloc_r+0x16>
 800c602:	4611      	mov	r1, r2
 800c604:	b003      	add	sp, #12
 800c606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	f7fb bff7 	b.w	80085fc <_malloc_r>
 800c60e:	9201      	str	r2, [sp, #4]
 800c610:	f7fc fa16 	bl	8008a40 <__malloc_lock>
 800c614:	9a01      	ldr	r2, [sp, #4]
 800c616:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c61a:	f102 080b 	add.w	r8, r2, #11
 800c61e:	f1b8 0f16 	cmp.w	r8, #22
 800c622:	f1a4 0908 	sub.w	r9, r4, #8
 800c626:	f025 0603 	bic.w	r6, r5, #3
 800c62a:	d90a      	bls.n	800c642 <_realloc_r+0x4a>
 800c62c:	f038 0807 	bics.w	r8, r8, #7
 800c630:	d509      	bpl.n	800c646 <_realloc_r+0x4e>
 800c632:	230c      	movs	r3, #12
 800c634:	f8ca 3000 	str.w	r3, [sl]
 800c638:	2700      	movs	r7, #0
 800c63a:	4638      	mov	r0, r7
 800c63c:	b003      	add	sp, #12
 800c63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c642:	f04f 0810 	mov.w	r8, #16
 800c646:	4590      	cmp	r8, r2
 800c648:	d3f3      	bcc.n	800c632 <_realloc_r+0x3a>
 800c64a:	45b0      	cmp	r8, r6
 800c64c:	f340 8145 	ble.w	800c8da <_realloc_r+0x2e2>
 800c650:	4ba8      	ldr	r3, [pc, #672]	; (800c8f4 <_realloc_r+0x2fc>)
 800c652:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800c656:	eb09 0106 	add.w	r1, r9, r6
 800c65a:	4571      	cmp	r1, lr
 800c65c:	469b      	mov	fp, r3
 800c65e:	684b      	ldr	r3, [r1, #4]
 800c660:	d005      	beq.n	800c66e <_realloc_r+0x76>
 800c662:	f023 0001 	bic.w	r0, r3, #1
 800c666:	4408      	add	r0, r1
 800c668:	6840      	ldr	r0, [r0, #4]
 800c66a:	07c7      	lsls	r7, r0, #31
 800c66c:	d447      	bmi.n	800c6fe <_realloc_r+0x106>
 800c66e:	f023 0303 	bic.w	r3, r3, #3
 800c672:	4571      	cmp	r1, lr
 800c674:	eb06 0703 	add.w	r7, r6, r3
 800c678:	d119      	bne.n	800c6ae <_realloc_r+0xb6>
 800c67a:	f108 0010 	add.w	r0, r8, #16
 800c67e:	4287      	cmp	r7, r0
 800c680:	db3f      	blt.n	800c702 <_realloc_r+0x10a>
 800c682:	eb09 0308 	add.w	r3, r9, r8
 800c686:	eba7 0708 	sub.w	r7, r7, r8
 800c68a:	f047 0701 	orr.w	r7, r7, #1
 800c68e:	f8cb 3008 	str.w	r3, [fp, #8]
 800c692:	605f      	str	r7, [r3, #4]
 800c694:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	ea43 0308 	orr.w	r3, r3, r8
 800c6a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	f7fc f9d1 	bl	8008a4c <__malloc_unlock>
 800c6aa:	4627      	mov	r7, r4
 800c6ac:	e7c5      	b.n	800c63a <_realloc_r+0x42>
 800c6ae:	45b8      	cmp	r8, r7
 800c6b0:	dc27      	bgt.n	800c702 <_realloc_r+0x10a>
 800c6b2:	68cb      	ldr	r3, [r1, #12]
 800c6b4:	688a      	ldr	r2, [r1, #8]
 800c6b6:	60d3      	str	r3, [r2, #12]
 800c6b8:	609a      	str	r2, [r3, #8]
 800c6ba:	eba7 0008 	sub.w	r0, r7, r8
 800c6be:	280f      	cmp	r0, #15
 800c6c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c6c4:	eb09 0207 	add.w	r2, r9, r7
 800c6c8:	f240 8109 	bls.w	800c8de <_realloc_r+0x2e6>
 800c6cc:	eb09 0108 	add.w	r1, r9, r8
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	ea43 0308 	orr.w	r3, r3, r8
 800c6d8:	f040 0001 	orr.w	r0, r0, #1
 800c6dc:	f8c9 3004 	str.w	r3, [r9, #4]
 800c6e0:	6048      	str	r0, [r1, #4]
 800c6e2:	6853      	ldr	r3, [r2, #4]
 800c6e4:	f043 0301 	orr.w	r3, r3, #1
 800c6e8:	6053      	str	r3, [r2, #4]
 800c6ea:	3108      	adds	r1, #8
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	f7fb fe73 	bl	80083d8 <_free_r>
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	f7fc f9aa 	bl	8008a4c <__malloc_unlock>
 800c6f8:	f109 0708 	add.w	r7, r9, #8
 800c6fc:	e79d      	b.n	800c63a <_realloc_r+0x42>
 800c6fe:	2300      	movs	r3, #0
 800c700:	4619      	mov	r1, r3
 800c702:	07e8      	lsls	r0, r5, #31
 800c704:	f100 8084 	bmi.w	800c810 <_realloc_r+0x218>
 800c708:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c70c:	eba9 0505 	sub.w	r5, r9, r5
 800c710:	6868      	ldr	r0, [r5, #4]
 800c712:	f020 0003 	bic.w	r0, r0, #3
 800c716:	4430      	add	r0, r6
 800c718:	2900      	cmp	r1, #0
 800c71a:	d076      	beq.n	800c80a <_realloc_r+0x212>
 800c71c:	4571      	cmp	r1, lr
 800c71e:	d150      	bne.n	800c7c2 <_realloc_r+0x1ca>
 800c720:	4403      	add	r3, r0
 800c722:	f108 0110 	add.w	r1, r8, #16
 800c726:	428b      	cmp	r3, r1
 800c728:	db6f      	blt.n	800c80a <_realloc_r+0x212>
 800c72a:	462f      	mov	r7, r5
 800c72c:	68ea      	ldr	r2, [r5, #12]
 800c72e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800c732:	60ca      	str	r2, [r1, #12]
 800c734:	6091      	str	r1, [r2, #8]
 800c736:	1f32      	subs	r2, r6, #4
 800c738:	2a24      	cmp	r2, #36	; 0x24
 800c73a:	d83b      	bhi.n	800c7b4 <_realloc_r+0x1bc>
 800c73c:	2a13      	cmp	r2, #19
 800c73e:	d936      	bls.n	800c7ae <_realloc_r+0x1b6>
 800c740:	6821      	ldr	r1, [r4, #0]
 800c742:	60a9      	str	r1, [r5, #8]
 800c744:	6861      	ldr	r1, [r4, #4]
 800c746:	60e9      	str	r1, [r5, #12]
 800c748:	2a1b      	cmp	r2, #27
 800c74a:	d81c      	bhi.n	800c786 <_realloc_r+0x18e>
 800c74c:	f105 0210 	add.w	r2, r5, #16
 800c750:	f104 0108 	add.w	r1, r4, #8
 800c754:	6808      	ldr	r0, [r1, #0]
 800c756:	6010      	str	r0, [r2, #0]
 800c758:	6848      	ldr	r0, [r1, #4]
 800c75a:	6050      	str	r0, [r2, #4]
 800c75c:	6889      	ldr	r1, [r1, #8]
 800c75e:	6091      	str	r1, [r2, #8]
 800c760:	eb05 0208 	add.w	r2, r5, r8
 800c764:	eba3 0308 	sub.w	r3, r3, r8
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	f8cb 2008 	str.w	r2, [fp, #8]
 800c770:	6053      	str	r3, [r2, #4]
 800c772:	686b      	ldr	r3, [r5, #4]
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	ea43 0308 	orr.w	r3, r3, r8
 800c77c:	606b      	str	r3, [r5, #4]
 800c77e:	4650      	mov	r0, sl
 800c780:	f7fc f964 	bl	8008a4c <__malloc_unlock>
 800c784:	e759      	b.n	800c63a <_realloc_r+0x42>
 800c786:	68a1      	ldr	r1, [r4, #8]
 800c788:	6129      	str	r1, [r5, #16]
 800c78a:	68e1      	ldr	r1, [r4, #12]
 800c78c:	6169      	str	r1, [r5, #20]
 800c78e:	2a24      	cmp	r2, #36	; 0x24
 800c790:	bf01      	itttt	eq
 800c792:	6922      	ldreq	r2, [r4, #16]
 800c794:	61aa      	streq	r2, [r5, #24]
 800c796:	6960      	ldreq	r0, [r4, #20]
 800c798:	61e8      	streq	r0, [r5, #28]
 800c79a:	bf19      	ittee	ne
 800c79c:	f105 0218 	addne.w	r2, r5, #24
 800c7a0:	f104 0110 	addne.w	r1, r4, #16
 800c7a4:	f105 0220 	addeq.w	r2, r5, #32
 800c7a8:	f104 0118 	addeq.w	r1, r4, #24
 800c7ac:	e7d2      	b.n	800c754 <_realloc_r+0x15c>
 800c7ae:	463a      	mov	r2, r7
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	e7cf      	b.n	800c754 <_realloc_r+0x15c>
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	f7ff fbd9 	bl	800bf70 <memmove>
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	e7ce      	b.n	800c760 <_realloc_r+0x168>
 800c7c2:	18c7      	adds	r7, r0, r3
 800c7c4:	45b8      	cmp	r8, r7
 800c7c6:	dc20      	bgt.n	800c80a <_realloc_r+0x212>
 800c7c8:	68cb      	ldr	r3, [r1, #12]
 800c7ca:	688a      	ldr	r2, [r1, #8]
 800c7cc:	60d3      	str	r3, [r2, #12]
 800c7ce:	609a      	str	r2, [r3, #8]
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	68eb      	ldr	r3, [r5, #12]
 800c7d4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c7d8:	60d3      	str	r3, [r2, #12]
 800c7da:	609a      	str	r2, [r3, #8]
 800c7dc:	1f32      	subs	r2, r6, #4
 800c7de:	2a24      	cmp	r2, #36	; 0x24
 800c7e0:	d842      	bhi.n	800c868 <_realloc_r+0x270>
 800c7e2:	2a13      	cmp	r2, #19
 800c7e4:	d93e      	bls.n	800c864 <_realloc_r+0x26c>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	60ab      	str	r3, [r5, #8]
 800c7ea:	6863      	ldr	r3, [r4, #4]
 800c7ec:	60eb      	str	r3, [r5, #12]
 800c7ee:	2a1b      	cmp	r2, #27
 800c7f0:	d824      	bhi.n	800c83c <_realloc_r+0x244>
 800c7f2:	f105 0010 	add.w	r0, r5, #16
 800c7f6:	f104 0308 	add.w	r3, r4, #8
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	6002      	str	r2, [r0, #0]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	6042      	str	r2, [r0, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	6083      	str	r3, [r0, #8]
 800c806:	46a9      	mov	r9, r5
 800c808:	e757      	b.n	800c6ba <_realloc_r+0xc2>
 800c80a:	4580      	cmp	r8, r0
 800c80c:	4607      	mov	r7, r0
 800c80e:	dddf      	ble.n	800c7d0 <_realloc_r+0x1d8>
 800c810:	4611      	mov	r1, r2
 800c812:	4650      	mov	r0, sl
 800c814:	f7fb fef2 	bl	80085fc <_malloc_r>
 800c818:	4607      	mov	r7, r0
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d0af      	beq.n	800c77e <_realloc_r+0x186>
 800c81e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c822:	f023 0301 	bic.w	r3, r3, #1
 800c826:	f1a0 0208 	sub.w	r2, r0, #8
 800c82a:	444b      	add	r3, r9
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d11f      	bne.n	800c870 <_realloc_r+0x278>
 800c830:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c834:	f027 0703 	bic.w	r7, r7, #3
 800c838:	4437      	add	r7, r6
 800c83a:	e73e      	b.n	800c6ba <_realloc_r+0xc2>
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	612b      	str	r3, [r5, #16]
 800c840:	68e3      	ldr	r3, [r4, #12]
 800c842:	616b      	str	r3, [r5, #20]
 800c844:	2a24      	cmp	r2, #36	; 0x24
 800c846:	bf01      	itttt	eq
 800c848:	6923      	ldreq	r3, [r4, #16]
 800c84a:	61ab      	streq	r3, [r5, #24]
 800c84c:	6962      	ldreq	r2, [r4, #20]
 800c84e:	61ea      	streq	r2, [r5, #28]
 800c850:	bf19      	ittee	ne
 800c852:	f105 0018 	addne.w	r0, r5, #24
 800c856:	f104 0310 	addne.w	r3, r4, #16
 800c85a:	f105 0020 	addeq.w	r0, r5, #32
 800c85e:	f104 0318 	addeq.w	r3, r4, #24
 800c862:	e7ca      	b.n	800c7fa <_realloc_r+0x202>
 800c864:	4623      	mov	r3, r4
 800c866:	e7c8      	b.n	800c7fa <_realloc_r+0x202>
 800c868:	4621      	mov	r1, r4
 800c86a:	f7ff fb81 	bl	800bf70 <memmove>
 800c86e:	e7ca      	b.n	800c806 <_realloc_r+0x20e>
 800c870:	1f32      	subs	r2, r6, #4
 800c872:	2a24      	cmp	r2, #36	; 0x24
 800c874:	d82d      	bhi.n	800c8d2 <_realloc_r+0x2da>
 800c876:	2a13      	cmp	r2, #19
 800c878:	d928      	bls.n	800c8cc <_realloc_r+0x2d4>
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	6043      	str	r3, [r0, #4]
 800c882:	2a1b      	cmp	r2, #27
 800c884:	d80e      	bhi.n	800c8a4 <_realloc_r+0x2ac>
 800c886:	f100 0308 	add.w	r3, r0, #8
 800c88a:	f104 0208 	add.w	r2, r4, #8
 800c88e:	6811      	ldr	r1, [r2, #0]
 800c890:	6019      	str	r1, [r3, #0]
 800c892:	6851      	ldr	r1, [r2, #4]
 800c894:	6059      	str	r1, [r3, #4]
 800c896:	6892      	ldr	r2, [r2, #8]
 800c898:	609a      	str	r2, [r3, #8]
 800c89a:	4621      	mov	r1, r4
 800c89c:	4650      	mov	r0, sl
 800c89e:	f7fb fd9b 	bl	80083d8 <_free_r>
 800c8a2:	e76c      	b.n	800c77e <_realloc_r+0x186>
 800c8a4:	68a3      	ldr	r3, [r4, #8]
 800c8a6:	6083      	str	r3, [r0, #8]
 800c8a8:	68e3      	ldr	r3, [r4, #12]
 800c8aa:	60c3      	str	r3, [r0, #12]
 800c8ac:	2a24      	cmp	r2, #36	; 0x24
 800c8ae:	bf01      	itttt	eq
 800c8b0:	6923      	ldreq	r3, [r4, #16]
 800c8b2:	6103      	streq	r3, [r0, #16]
 800c8b4:	6961      	ldreq	r1, [r4, #20]
 800c8b6:	6141      	streq	r1, [r0, #20]
 800c8b8:	bf19      	ittee	ne
 800c8ba:	f100 0310 	addne.w	r3, r0, #16
 800c8be:	f104 0210 	addne.w	r2, r4, #16
 800c8c2:	f100 0318 	addeq.w	r3, r0, #24
 800c8c6:	f104 0218 	addeq.w	r2, r4, #24
 800c8ca:	e7e0      	b.n	800c88e <_realloc_r+0x296>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	e7dd      	b.n	800c88e <_realloc_r+0x296>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	f7ff fb4c 	bl	800bf70 <memmove>
 800c8d8:	e7df      	b.n	800c89a <_realloc_r+0x2a2>
 800c8da:	4637      	mov	r7, r6
 800c8dc:	e6ed      	b.n	800c6ba <_realloc_r+0xc2>
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	431f      	orrs	r7, r3
 800c8e4:	f8c9 7004 	str.w	r7, [r9, #4]
 800c8e8:	6853      	ldr	r3, [r2, #4]
 800c8ea:	f043 0301 	orr.w	r3, r3, #1
 800c8ee:	6053      	str	r3, [r2, #4]
 800c8f0:	e6ff      	b.n	800c6f2 <_realloc_r+0xfa>
 800c8f2:	bf00      	nop
 800c8f4:	20000130 	.word	0x20000130

0800c8f8 <__ssprint_r>:
 800c8f8:	6893      	ldr	r3, [r2, #8]
 800c8fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fe:	4681      	mov	r9, r0
 800c900:	460c      	mov	r4, r1
 800c902:	4617      	mov	r7, r2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d060      	beq.n	800c9ca <__ssprint_r+0xd2>
 800c908:	f04f 0b00 	mov.w	fp, #0
 800c90c:	f8d2 a000 	ldr.w	sl, [r2]
 800c910:	465e      	mov	r6, fp
 800c912:	b356      	cbz	r6, 800c96a <__ssprint_r+0x72>
 800c914:	68a3      	ldr	r3, [r4, #8]
 800c916:	429e      	cmp	r6, r3
 800c918:	d344      	bcc.n	800c9a4 <__ssprint_r+0xac>
 800c91a:	89a2      	ldrh	r2, [r4, #12]
 800c91c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c920:	d03e      	beq.n	800c9a0 <__ssprint_r+0xa8>
 800c922:	6825      	ldr	r5, [r4, #0]
 800c924:	6921      	ldr	r1, [r4, #16]
 800c926:	eba5 0801 	sub.w	r8, r5, r1
 800c92a:	6965      	ldr	r5, [r4, #20]
 800c92c:	2302      	movs	r3, #2
 800c92e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c932:	fb95 f5f3 	sdiv	r5, r5, r3
 800c936:	f108 0301 	add.w	r3, r8, #1
 800c93a:	4433      	add	r3, r6
 800c93c:	429d      	cmp	r5, r3
 800c93e:	bf38      	it	cc
 800c940:	461d      	movcc	r5, r3
 800c942:	0553      	lsls	r3, r2, #21
 800c944:	d546      	bpl.n	800c9d4 <__ssprint_r+0xdc>
 800c946:	4629      	mov	r1, r5
 800c948:	4648      	mov	r0, r9
 800c94a:	f7fb fe57 	bl	80085fc <_malloc_r>
 800c94e:	b998      	cbnz	r0, 800c978 <__ssprint_r+0x80>
 800c950:	230c      	movs	r3, #12
 800c952:	f8c9 3000 	str.w	r3, [r9]
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	2300      	movs	r3, #0
 800c960:	60bb      	str	r3, [r7, #8]
 800c962:	607b      	str	r3, [r7, #4]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	e031      	b.n	800c9ce <__ssprint_r+0xd6>
 800c96a:	f8da b000 	ldr.w	fp, [sl]
 800c96e:	f8da 6004 	ldr.w	r6, [sl, #4]
 800c972:	f10a 0a08 	add.w	sl, sl, #8
 800c976:	e7cc      	b.n	800c912 <__ssprint_r+0x1a>
 800c978:	4642      	mov	r2, r8
 800c97a:	6921      	ldr	r1, [r4, #16]
 800c97c:	9001      	str	r0, [sp, #4]
 800c97e:	f7fc f84b 	bl	8008a18 <memcpy>
 800c982:	89a2      	ldrh	r2, [r4, #12]
 800c984:	9b01      	ldr	r3, [sp, #4]
 800c986:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c98a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c98e:	81a2      	strh	r2, [r4, #12]
 800c990:	6123      	str	r3, [r4, #16]
 800c992:	6165      	str	r5, [r4, #20]
 800c994:	4443      	add	r3, r8
 800c996:	eba5 0508 	sub.w	r5, r5, r8
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	60a5      	str	r5, [r4, #8]
 800c99e:	4633      	mov	r3, r6
 800c9a0:	429e      	cmp	r6, r3
 800c9a2:	d200      	bcs.n	800c9a6 <__ssprint_r+0xae>
 800c9a4:	4633      	mov	r3, r6
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	4659      	mov	r1, fp
 800c9aa:	6820      	ldr	r0, [r4, #0]
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	f7ff fadf 	bl	800bf70 <memmove>
 800c9b2:	68a2      	ldr	r2, [r4, #8]
 800c9b4:	9b01      	ldr	r3, [sp, #4]
 800c9b6:	1ad2      	subs	r2, r2, r3
 800c9b8:	60a2      	str	r2, [r4, #8]
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	4413      	add	r3, r2
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	1b9e      	subs	r6, r3, r6
 800c9c4:	60be      	str	r6, [r7, #8]
 800c9c6:	2e00      	cmp	r6, #0
 800c9c8:	d1cf      	bne.n	800c96a <__ssprint_r+0x72>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	b003      	add	sp, #12
 800c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	f7ff fe0e 	bl	800c5f8 <_realloc_r>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d1d6      	bne.n	800c990 <__ssprint_r+0x98>
 800c9e2:	6921      	ldr	r1, [r4, #16]
 800c9e4:	4648      	mov	r0, r9
 800c9e6:	f7fb fcf7 	bl	80083d8 <_free_r>
 800c9ea:	e7b1      	b.n	800c950 <__ssprint_r+0x58>

0800c9ec <__sprint_r>:
 800c9ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	4614      	mov	r4, r2
 800c9f8:	b91b      	cbnz	r3, 800ca02 <__sprint_r+0x16>
 800c9fa:	6053      	str	r3, [r2, #4]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ca04:	049d      	lsls	r5, r3, #18
 800ca06:	d523      	bpl.n	800ca50 <__sprint_r+0x64>
 800ca08:	6815      	ldr	r5, [r2, #0]
 800ca0a:	68a0      	ldr	r0, [r4, #8]
 800ca0c:	3508      	adds	r5, #8
 800ca0e:	b920      	cbnz	r0, 800ca1a <__sprint_r+0x2e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1a:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800ca1e:	f855 bc08 	ldr.w	fp, [r5, #-8]
 800ca22:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800ca26:	f04f 0900 	mov.w	r9, #0
 800ca2a:	45ca      	cmp	sl, r9
 800ca2c:	dc05      	bgt.n	800ca3a <__sprint_r+0x4e>
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	f026 0603 	bic.w	r6, r6, #3
 800ca34:	1b9e      	subs	r6, r3, r6
 800ca36:	60a6      	str	r6, [r4, #8]
 800ca38:	e7e7      	b.n	800ca0a <__sprint_r+0x1e>
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800ca40:	4640      	mov	r0, r8
 800ca42:	f000 f8d5 	bl	800cbf0 <_fputwc_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	d0e2      	beq.n	800ca10 <__sprint_r+0x24>
 800ca4a:	f109 0901 	add.w	r9, r9, #1
 800ca4e:	e7ec      	b.n	800ca2a <__sprint_r+0x3e>
 800ca50:	f7ff f8b4 	bl	800bbbc <__sfvwrite_r>
 800ca54:	e7dc      	b.n	800ca10 <__sprint_r+0x24>
	...

0800ca58 <__swbuf_r>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	460e      	mov	r6, r1
 800ca5c:	4614      	mov	r4, r2
 800ca5e:	4605      	mov	r5, r0
 800ca60:	b118      	cbz	r0, 800ca6a <__swbuf_r+0x12>
 800ca62:	6983      	ldr	r3, [r0, #24]
 800ca64:	b90b      	cbnz	r3, 800ca6a <__swbuf_r+0x12>
 800ca66:	f7fb fbe1 	bl	800822c <__sinit>
 800ca6a:	4b27      	ldr	r3, [pc, #156]	; (800cb08 <__swbuf_r+0xb0>)
 800ca6c:	429c      	cmp	r4, r3
 800ca6e:	d12f      	bne.n	800cad0 <__swbuf_r+0x78>
 800ca70:	686c      	ldr	r4, [r5, #4]
 800ca72:	69a3      	ldr	r3, [r4, #24]
 800ca74:	60a3      	str	r3, [r4, #8]
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	0719      	lsls	r1, r3, #28
 800ca7a:	d533      	bpl.n	800cae4 <__swbuf_r+0x8c>
 800ca7c:	6923      	ldr	r3, [r4, #16]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d030      	beq.n	800cae4 <__swbuf_r+0x8c>
 800ca82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca86:	b2f6      	uxtb	r6, r6
 800ca88:	049a      	lsls	r2, r3, #18
 800ca8a:	4637      	mov	r7, r6
 800ca8c:	d534      	bpl.n	800caf8 <__swbuf_r+0xa0>
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	1ac0      	subs	r0, r0, r3
 800ca94:	6963      	ldr	r3, [r4, #20]
 800ca96:	4298      	cmp	r0, r3
 800ca98:	db04      	blt.n	800caa4 <__swbuf_r+0x4c>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f7fb fb1f 	bl	80080e0 <_fflush_r>
 800caa2:	bb28      	cbnz	r0, 800caf0 <__swbuf_r+0x98>
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	60a3      	str	r3, [r4, #8]
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	701e      	strb	r6, [r3, #0]
 800cab2:	6963      	ldr	r3, [r4, #20]
 800cab4:	3001      	adds	r0, #1
 800cab6:	4298      	cmp	r0, r3
 800cab8:	d004      	beq.n	800cac4 <__swbuf_r+0x6c>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	07db      	lsls	r3, r3, #31
 800cabe:	d519      	bpl.n	800caf4 <__swbuf_r+0x9c>
 800cac0:	2e0a      	cmp	r6, #10
 800cac2:	d117      	bne.n	800caf4 <__swbuf_r+0x9c>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f7fb fb0a 	bl	80080e0 <_fflush_r>
 800cacc:	b190      	cbz	r0, 800caf4 <__swbuf_r+0x9c>
 800cace:	e00f      	b.n	800caf0 <__swbuf_r+0x98>
 800cad0:	4b0e      	ldr	r3, [pc, #56]	; (800cb0c <__swbuf_r+0xb4>)
 800cad2:	429c      	cmp	r4, r3
 800cad4:	d101      	bne.n	800cada <__swbuf_r+0x82>
 800cad6:	68ac      	ldr	r4, [r5, #8]
 800cad8:	e7cb      	b.n	800ca72 <__swbuf_r+0x1a>
 800cada:	4b0d      	ldr	r3, [pc, #52]	; (800cb10 <__swbuf_r+0xb8>)
 800cadc:	429c      	cmp	r4, r3
 800cade:	bf08      	it	eq
 800cae0:	68ec      	ldreq	r4, [r5, #12]
 800cae2:	e7c6      	b.n	800ca72 <__swbuf_r+0x1a>
 800cae4:	4621      	mov	r1, r4
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7fe f924 	bl	800ad34 <__swsetup_r>
 800caec:	2800      	cmp	r0, #0
 800caee:	d0c8      	beq.n	800ca82 <__swbuf_r+0x2a>
 800caf0:	f04f 37ff 	mov.w	r7, #4294967295
 800caf4:	4638      	mov	r0, r7
 800caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cafc:	81a3      	strh	r3, [r4, #12]
 800cafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb04:	6663      	str	r3, [r4, #100]	; 0x64
 800cb06:	e7c2      	b.n	800ca8e <__swbuf_r+0x36>
 800cb08:	0800d204 	.word	0x0800d204
 800cb0c:	0800d224 	.word	0x0800d224
 800cb10:	0800d1e4 	.word	0x0800d1e4

0800cb14 <_calloc_r>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	4351      	muls	r1, r2
 800cb18:	f7fb fd70 	bl	80085fc <_malloc_r>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	b198      	cbz	r0, 800cb48 <_calloc_r+0x34>
 800cb20:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cb24:	f022 0203 	bic.w	r2, r2, #3
 800cb28:	3a04      	subs	r2, #4
 800cb2a:	2a24      	cmp	r2, #36	; 0x24
 800cb2c:	d81b      	bhi.n	800cb66 <_calloc_r+0x52>
 800cb2e:	2a13      	cmp	r2, #19
 800cb30:	d917      	bls.n	800cb62 <_calloc_r+0x4e>
 800cb32:	2100      	movs	r1, #0
 800cb34:	2a1b      	cmp	r2, #27
 800cb36:	6001      	str	r1, [r0, #0]
 800cb38:	6041      	str	r1, [r0, #4]
 800cb3a:	d807      	bhi.n	800cb4c <_calloc_r+0x38>
 800cb3c:	f100 0308 	add.w	r3, r0, #8
 800cb40:	2200      	movs	r2, #0
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	605a      	str	r2, [r3, #4]
 800cb46:	609a      	str	r2, [r3, #8]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	bd10      	pop	{r4, pc}
 800cb4c:	2a24      	cmp	r2, #36	; 0x24
 800cb4e:	6081      	str	r1, [r0, #8]
 800cb50:	60c1      	str	r1, [r0, #12]
 800cb52:	bf11      	iteee	ne
 800cb54:	f100 0310 	addne.w	r3, r0, #16
 800cb58:	6101      	streq	r1, [r0, #16]
 800cb5a:	f100 0318 	addeq.w	r3, r0, #24
 800cb5e:	6141      	streq	r1, [r0, #20]
 800cb60:	e7ee      	b.n	800cb40 <_calloc_r+0x2c>
 800cb62:	4603      	mov	r3, r0
 800cb64:	e7ec      	b.n	800cb40 <_calloc_r+0x2c>
 800cb66:	2100      	movs	r1, #0
 800cb68:	f7fb ff61 	bl	8008a2e <memset>
 800cb6c:	e7ec      	b.n	800cb48 <_calloc_r+0x34>

0800cb6e <__fputwc>:
 800cb6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb72:	4680      	mov	r8, r0
 800cb74:	460e      	mov	r6, r1
 800cb76:	4614      	mov	r4, r2
 800cb78:	f000 f886 	bl	800cc88 <__locale_mb_cur_max>
 800cb7c:	2801      	cmp	r0, #1
 800cb7e:	d11c      	bne.n	800cbba <__fputwc+0x4c>
 800cb80:	1e73      	subs	r3, r6, #1
 800cb82:	2bfe      	cmp	r3, #254	; 0xfe
 800cb84:	d819      	bhi.n	800cbba <__fputwc+0x4c>
 800cb86:	f88d 6004 	strb.w	r6, [sp, #4]
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	2700      	movs	r7, #0
 800cb8e:	f10d 0904 	add.w	r9, sp, #4
 800cb92:	42af      	cmp	r7, r5
 800cb94:	d020      	beq.n	800cbd8 <__fputwc+0x6a>
 800cb96:	68a3      	ldr	r3, [r4, #8]
 800cb98:	f817 1009 	ldrb.w	r1, [r7, r9]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	60a3      	str	r3, [r4, #8]
 800cba2:	da04      	bge.n	800cbae <__fputwc+0x40>
 800cba4:	69a2      	ldr	r2, [r4, #24]
 800cba6:	4293      	cmp	r3, r2
 800cba8:	db1a      	blt.n	800cbe0 <__fputwc+0x72>
 800cbaa:	290a      	cmp	r1, #10
 800cbac:	d018      	beq.n	800cbe0 <__fputwc+0x72>
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	6022      	str	r2, [r4, #0]
 800cbb4:	7019      	strb	r1, [r3, #0]
 800cbb6:	3701      	adds	r7, #1
 800cbb8:	e7eb      	b.n	800cb92 <__fputwc+0x24>
 800cbba:	4632      	mov	r2, r6
 800cbbc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800cbc0:	a901      	add	r1, sp, #4
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f000 f880 	bl	800ccc8 <_wcrtomb_r>
 800cbc8:	1c42      	adds	r2, r0, #1
 800cbca:	4605      	mov	r5, r0
 800cbcc:	d1de      	bne.n	800cb8c <__fputwc+0x1e>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	4630      	mov	r0, r6
 800cbda:	b003      	add	sp, #12
 800cbdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	f7ff ff38 	bl	800ca58 <__swbuf_r>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d1e4      	bne.n	800cbb6 <__fputwc+0x48>
 800cbec:	4606      	mov	r6, r0
 800cbee:	e7f3      	b.n	800cbd8 <__fputwc+0x6a>

0800cbf0 <_fputwc_r>:
 800cbf0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800cbf2:	07db      	lsls	r3, r3, #31
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	460e      	mov	r6, r1
 800cbfa:	4614      	mov	r4, r2
 800cbfc:	d405      	bmi.n	800cc0a <_fputwc_r+0x1a>
 800cbfe:	8993      	ldrh	r3, [r2, #12]
 800cc00:	0598      	lsls	r0, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_fputwc_r+0x1a>
 800cc04:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800cc06:	f7fb fce7 	bl	80085d8 <__retarget_lock_acquire_recursive>
 800cc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0e:	0499      	lsls	r1, r3, #18
 800cc10:	d406      	bmi.n	800cc20 <_fputwc_r+0x30>
 800cc12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc1e:	6663      	str	r3, [r4, #100]	; 0x64
 800cc20:	4622      	mov	r2, r4
 800cc22:	4628      	mov	r0, r5
 800cc24:	4631      	mov	r1, r6
 800cc26:	f7ff ffa2 	bl	800cb6e <__fputwc>
 800cc2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc2c:	07da      	lsls	r2, r3, #31
 800cc2e:	4605      	mov	r5, r0
 800cc30:	d405      	bmi.n	800cc3e <_fputwc_r+0x4e>
 800cc32:	89a3      	ldrh	r3, [r4, #12]
 800cc34:	059b      	lsls	r3, r3, #22
 800cc36:	d402      	bmi.n	800cc3e <_fputwc_r+0x4e>
 800cc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc3a:	f7fb fcce 	bl	80085da <__retarget_lock_release_recursive>
 800cc3e:	4628      	mov	r0, r5
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc44 <_fstat_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4c07      	ldr	r4, [pc, #28]	; (800cc64 <_fstat_r+0x20>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	4611      	mov	r1, r2
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	f7fa ffc4 	bl	8007bde <_fstat>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d102      	bne.n	800cc60 <_fstat_r+0x1c>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	b103      	cbz	r3, 800cc60 <_fstat_r+0x1c>
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	bf00      	nop
 800cc64:	20001dc8 	.word	0x20001dc8

0800cc68 <_isatty_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4c06      	ldr	r4, [pc, #24]	; (800cc84 <_isatty_r+0x1c>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4605      	mov	r5, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	f7fa ffb8 	bl	8007be8 <_isatty>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_isatty_r+0x1a>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_isatty_r+0x1a>
 800cc80:	602b      	str	r3, [r5, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	20001dc8 	.word	0x20001dc8

0800cc88 <__locale_mb_cur_max>:
 800cc88:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <__locale_mb_cur_max+0x14>)
 800cc8a:	4a05      	ldr	r2, [pc, #20]	; (800cca0 <__locale_mb_cur_max+0x18>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6a1b      	ldr	r3, [r3, #32]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	bf08      	it	eq
 800cc94:	4613      	moveq	r3, r2
 800cc96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800cc9a:	4770      	bx	lr
 800cc9c:	2000003c 	.word	0x2000003c
 800cca0:	20000540 	.word	0x20000540

0800cca4 <__ascii_mbtowc>:
 800cca4:	b082      	sub	sp, #8
 800cca6:	b901      	cbnz	r1, 800ccaa <__ascii_mbtowc+0x6>
 800cca8:	a901      	add	r1, sp, #4
 800ccaa:	b142      	cbz	r2, 800ccbe <__ascii_mbtowc+0x1a>
 800ccac:	b14b      	cbz	r3, 800ccc2 <__ascii_mbtowc+0x1e>
 800ccae:	7813      	ldrb	r3, [r2, #0]
 800ccb0:	600b      	str	r3, [r1, #0]
 800ccb2:	7812      	ldrb	r2, [r2, #0]
 800ccb4:	1c10      	adds	r0, r2, #0
 800ccb6:	bf18      	it	ne
 800ccb8:	2001      	movne	r0, #1
 800ccba:	b002      	add	sp, #8
 800ccbc:	4770      	bx	lr
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	e7fb      	b.n	800ccba <__ascii_mbtowc+0x16>
 800ccc2:	f06f 0001 	mvn.w	r0, #1
 800ccc6:	e7f8      	b.n	800ccba <__ascii_mbtowc+0x16>

0800ccc8 <_wcrtomb_r>:
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	4605      	mov	r5, r0
 800cccc:	b085      	sub	sp, #20
 800ccce:	461e      	mov	r6, r3
 800ccd0:	460f      	mov	r7, r1
 800ccd2:	4c0f      	ldr	r4, [pc, #60]	; (800cd10 <_wcrtomb_r+0x48>)
 800ccd4:	b991      	cbnz	r1, 800ccfc <_wcrtomb_r+0x34>
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	490e      	ldr	r1, [pc, #56]	; (800cd14 <_wcrtomb_r+0x4c>)
 800ccda:	6a12      	ldr	r2, [r2, #32]
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	bf08      	it	eq
 800cce0:	460a      	moveq	r2, r1
 800cce2:	a901      	add	r1, sp, #4
 800cce4:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800cce8:	463a      	mov	r2, r7
 800ccea:	47a0      	blx	r4
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	bf01      	itttt	eq
 800ccf0:	2300      	moveq	r3, #0
 800ccf2:	6033      	streq	r3, [r6, #0]
 800ccf4:	238a      	moveq	r3, #138	; 0x8a
 800ccf6:	602b      	streq	r3, [r5, #0]
 800ccf8:	b005      	add	sp, #20
 800ccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfc:	6824      	ldr	r4, [r4, #0]
 800ccfe:	4f05      	ldr	r7, [pc, #20]	; (800cd14 <_wcrtomb_r+0x4c>)
 800cd00:	6a24      	ldr	r4, [r4, #32]
 800cd02:	2c00      	cmp	r4, #0
 800cd04:	bf08      	it	eq
 800cd06:	463c      	moveq	r4, r7
 800cd08:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800cd0c:	e7ed      	b.n	800ccea <_wcrtomb_r+0x22>
 800cd0e:	bf00      	nop
 800cd10:	2000003c 	.word	0x2000003c
 800cd14:	20000540 	.word	0x20000540

0800cd18 <__ascii_wctomb>:
 800cd18:	b149      	cbz	r1, 800cd2e <__ascii_wctomb+0x16>
 800cd1a:	2aff      	cmp	r2, #255	; 0xff
 800cd1c:	bf85      	ittet	hi
 800cd1e:	238a      	movhi	r3, #138	; 0x8a
 800cd20:	6003      	strhi	r3, [r0, #0]
 800cd22:	700a      	strbls	r2, [r1, #0]
 800cd24:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd28:	bf98      	it	ls
 800cd2a:	2001      	movls	r0, #1
 800cd2c:	4770      	bx	lr
 800cd2e:	4608      	mov	r0, r1
 800cd30:	4770      	bx	lr

0800cd32 <abort>:
 800cd32:	b508      	push	{r3, lr}
 800cd34:	2006      	movs	r0, #6
 800cd36:	f000 f82b 	bl	800cd90 <raise>
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	f7fa ff10 	bl	8007b60 <_exit>

0800cd40 <_raise_r>:
 800cd40:	291f      	cmp	r1, #31
 800cd42:	b538      	push	{r3, r4, r5, lr}
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	d904      	bls.n	800cd54 <_raise_r+0x14>
 800cd4a:	2316      	movs	r3, #22
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd56:	b112      	cbz	r2, 800cd5e <_raise_r+0x1e>
 800cd58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd5c:	b94b      	cbnz	r3, 800cd72 <_raise_r+0x32>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 f830 	bl	800cdc4 <_getpid_r>
 800cd64:	462a      	mov	r2, r5
 800cd66:	4601      	mov	r1, r0
 800cd68:	4620      	mov	r0, r4
 800cd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd6e:	f000 b817 	b.w	800cda0 <_kill_r>
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d00a      	beq.n	800cd8c <_raise_r+0x4c>
 800cd76:	1c59      	adds	r1, r3, #1
 800cd78:	d103      	bne.n	800cd82 <_raise_r+0x42>
 800cd7a:	2316      	movs	r3, #22
 800cd7c:	6003      	str	r3, [r0, #0]
 800cd7e:	2001      	movs	r0, #1
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	2400      	movs	r4, #0
 800cd84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd88:	4628      	mov	r0, r5
 800cd8a:	4798      	blx	r3
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}

0800cd90 <raise>:
 800cd90:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <raise+0xc>)
 800cd92:	4601      	mov	r1, r0
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	f7ff bfd3 	b.w	800cd40 <_raise_r>
 800cd9a:	bf00      	nop
 800cd9c:	2000003c 	.word	0x2000003c

0800cda0 <_kill_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4c07      	ldr	r4, [pc, #28]	; (800cdc0 <_kill_r+0x20>)
 800cda4:	2300      	movs	r3, #0
 800cda6:	4605      	mov	r5, r0
 800cda8:	4608      	mov	r0, r1
 800cdaa:	4611      	mov	r1, r2
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	f7fa fecf 	bl	8007b50 <_kill>
 800cdb2:	1c43      	adds	r3, r0, #1
 800cdb4:	d102      	bne.n	800cdbc <_kill_r+0x1c>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	b103      	cbz	r3, 800cdbc <_kill_r+0x1c>
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	bd38      	pop	{r3, r4, r5, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20001dc8 	.word	0x20001dc8

0800cdc4 <_getpid_r>:
 800cdc4:	f7fa bec2 	b.w	8007b4c <_getpid>

0800cdc8 <_init>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	bf00      	nop
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr

0800cdd4 <_fini>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr
